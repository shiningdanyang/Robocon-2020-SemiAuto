
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5dc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800c874  0800c874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c89c  0800c89c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800c89c  0800c89c  0001c89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8a4  0800c8a4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8a4  0800c8a4  0001c8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8a8  0800c8a8  0001c8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  24000000  0800c8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  24000028  0800c8d4  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400081c  0800c8d4  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020935  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f43  00000000  00000000  0004098b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  000438d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  00044ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003861c  00000000  00000000  000463c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001234b  00000000  00000000  0007e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017379b  00000000  00000000  00090d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002044ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  00204548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c85c 	.word	0x0800c85c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	0800c85c 	.word	0x0800c85c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <peripheralUART_Init+0x44>)
 800061e:	22aa      	movs	r2, #170	; 0xaa
 8000620:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <peripheralUART_Init+0x44>)
 8000624:	22aa      	movs	r2, #170	; 0xaa
 8000626:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <peripheralUART_Init+0x44>)
 800062a:	22aa      	movs	r2, #170	; 0xaa
 800062c:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <peripheralUART_Init+0x44>)
 8000630:	22aa      	movs	r2, #170	; 0xaa
 8000632:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <peripheralUART_Init+0x44>)
 8000636:	2200      	movs	r2, #0
 8000638:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	4908      	ldr	r1, [pc, #32]	; (8000660 <peripheralUART_Init+0x48>)
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <peripheralUART_Init+0x4c>)
 8000640:	f008 fe0a 	bl	8009258 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <peripheralUART_Init+0x50>)
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <peripheralUART_Init+0x54>)
 800064a:	f008 fedd 	bl	8009408 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800064e:	2202      	movs	r2, #2
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <peripheralUART_Init+0x58>)
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <peripheralUART_Init+0x5c>)
 8000654:	f008 fed8 	bl	8009408 <HAL_UART_Receive_DMA>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2400000c 	.word	0x2400000c
 8000660:	2400072c 	.word	0x2400072c
 8000664:	24000678 	.word	0x24000678
 8000668:	24000704 	.word	0x24000704
 800066c:	240001a4 	.word	0x240001a4
 8000670:	240002c0 	.word	0x240002c0
 8000674:	24000508 	.word	0x24000508

08000678 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_UART_TxCpltCallback+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d103      	bne.n	8000694 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_UART_TxCpltCallback+0x68>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 8000692:	e01c      	b.n	80006ce <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_UART_TxCpltCallback+0x6c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d103      	bne.n	80006a8 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_TxCpltCallback+0x70>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	e012      	b.n	80006ce <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_UART_TxCpltCallback+0x74>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d103      	bne.n	80006bc <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_UART_TxCpltCallback+0x78>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	e008      	b.n	80006ce <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_UART_TxCpltCallback+0x7c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d102      	bne.n	80006ce <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_UART_TxCpltCallback+0x80>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	24000508 	.word	0x24000508
 80006e0:	24000298 	.word	0x24000298
 80006e4:	240001a4 	.word	0x240001a4
 80006e8:	24000650 	.word	0x24000650
 80006ec:	24000678 	.word	0x24000678
 80006f0:	24000380 	.word	0x24000380
 80006f4:	24000078 	.word	0x24000078
 80006f8:	24000104 	.word	0x24000104

080006fc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <HAL_UART_RxCpltCallback+0x7c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	d103      	bne.n	8000718 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <HAL_UART_RxCpltCallback+0x80>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000716:	e02b      	b.n	8000770 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_UART_RxCpltCallback+0x84>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d103      	bne.n	800072c <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_UART_RxCpltCallback+0x88>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
}
 800072a:	e021      	b.n	8000770 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_UART_RxCpltCallback+0x8c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d112      	bne.n	800075e <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_UART_RxCpltCallback+0x90>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b74      	cmp	r3, #116	; 0x74
 800073e:	d105      	bne.n	800074c <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	2209      	movs	r2, #9
 8000744:	4912      	ldr	r1, [pc, #72]	; (8000790 <HAL_UART_RxCpltCallback+0x94>)
 8000746:	4810      	ldr	r0, [pc, #64]	; (8000788 <HAL_UART_RxCpltCallback+0x8c>)
 8000748:	f008 fc6c 	bl	8009024 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_UART_RxCpltCallback+0x98>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	490d      	ldr	r1, [pc, #52]	; (800078c <HAL_UART_RxCpltCallback+0x90>)
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <HAL_UART_RxCpltCallback+0x8c>)
 8000758:	f008 fd7e 	bl	8009258 <HAL_UART_Receive_IT>
}
 800075c:	e008      	b.n	8000770 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_UART_RxCpltCallback+0x9c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	d102      	bne.n	8000770 <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_UART_RxCpltCallback+0xa0>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	24000508 	.word	0x24000508
 800077c:	24000050 	.word	0x24000050
 8000780:	240001a4 	.word	0x240001a4
 8000784:	24000650 	.word	0x24000650
 8000788:	24000678 	.word	0x24000678
 800078c:	2400072c 	.word	0x2400072c
 8000790:	2400000c 	.word	0x2400000c
 8000794:	24000810 	.word	0x24000810
 8000798:	24000078 	.word	0x24000078
 800079c:	24000658 	.word	0x24000658

080007a0 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <compassReset+0x24>)
 80007a6:	2261      	movs	r2, #97	; 0x61
 80007a8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	4905      	ldr	r1, [pc, #20]	; (80007c4 <compassReset+0x24>)
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <compassReset+0x28>)
 80007b0:	f008 fcce 	bl	8009150 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 80007b4:	f000 f818 	bl	80007e8 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <compassReset+0x24>)
 80007ba:	227a      	movs	r2, #122	; 0x7a
 80007bc:	701a      	strb	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000000 	.word	0x24000000
 80007c8:	24000508 	.word	0x24000508

080007cc <compassRequest>:
void compassRequest(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4903      	ldr	r1, [pc, #12]	; (80007e0 <compassRequest+0x14>)
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <compassRequest+0x18>)
 80007d6:	f008 fcbb 	bl	8009150 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	24000000 	.word	0x24000000
 80007e4:	24000508 	.word	0x24000508

080007e8 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 80007ec:	bf00      	nop
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <wait4CompassTx+0x20>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0fb      	beq.n	80007ee <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <wait4CompassTx+0x20>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	24000298 	.word	0x24000298

0800080c <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 8000810:	2209      	movs	r2, #9
 8000812:	4904      	ldr	r1, [pc, #16]	; (8000824 <spinalCordTrans+0x18>)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <spinalCordTrans+0x1c>)
 8000816:	f008 fc9b 	bl	8009150 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 800081a:	f000 f807 	bl	800082c <wait4SpinalCordTx>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2400000c 	.word	0x2400000c
 8000828:	24000678 	.word	0x24000678

0800082c <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 8000830:	bf00      	nop
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <wait4SpinalCordTx+0x20>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0fb      	beq.n	8000832 <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <wait4SpinalCordTx+0x20>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	24000380 	.word	0x24000380

08000850 <peripheralADC_Init>:
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <controlMotor1>:
double PIDroL(int _roLValue, int _roLSetpoint);


#ifdef SPINAL_CORD_MODE_ONEWAY
void controlMotor1(int _speed)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bfb8      	it	lt
 800086e:	425b      	neglt	r3, r3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <controlMotor1+0x48>)
 8000874:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db07      	blt.n	800088c <controlMotor1+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <controlMotor1+0x48>)
 800087e:	7a1b      	ldrb	r3, [r3, #8]
 8000880:	f023 0301 	bic.w	r3, r3, #1
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <controlMotor1+0x48>)
 8000888:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
}
 800088a:	e006      	b.n	800089a <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <controlMotor1+0x48>)
 800088e:	7a1b      	ldrb	r3, [r3, #8]
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <controlMotor1+0x48>)
 8000898:	721a      	strb	r2, [r3, #8]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	2400000c 	.word	0x2400000c

080008ac <controlMotor2>:
void controlMotor2(int _speed)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bfb8      	it	lt
 80008ba:	425b      	neglt	r3, r3
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <controlMotor2+0x48>)
 80008c0:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db07      	blt.n	80008d8 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <controlMotor2+0x48>)
 80008ca:	7a1b      	ldrb	r3, [r3, #8]
 80008cc:	f023 0302 	bic.w	r3, r3, #2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <controlMotor2+0x48>)
 80008d4:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
}
 80008d6:	e006      	b.n	80008e6 <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <controlMotor2+0x48>)
 80008da:	7a1b      	ldrb	r3, [r3, #8]
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <controlMotor2+0x48>)
 80008e4:	721a      	strb	r2, [r3, #8]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	2400000c 	.word	0x2400000c

080008f8 <controlMotor3>:
void controlMotor3(int _speed)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	bfb8      	it	lt
 8000906:	425b      	neglt	r3, r3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <controlMotor3+0x48>)
 800090c:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db07      	blt.n	8000924 <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <controlMotor3+0x48>)
 8000916:	7a1b      	ldrb	r3, [r3, #8]
 8000918:	f023 0304 	bic.w	r3, r3, #4
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <controlMotor3+0x48>)
 8000920:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
}
 8000922:	e006      	b.n	8000932 <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <controlMotor3+0x48>)
 8000926:	7a1b      	ldrb	r3, [r3, #8]
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <controlMotor3+0x48>)
 8000930:	721a      	strb	r2, [r3, #8]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2400000c 	.word	0x2400000c

08000944 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <controlMotor4+0x48>)
 8000958:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db07      	blt.n	8000970 <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <controlMotor4+0x48>)
 8000962:	7a1b      	ldrb	r3, [r3, #8]
 8000964:	f023 0308 	bic.w	r3, r3, #8
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <controlMotor4+0x48>)
 800096c:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
}
 800096e:	e006      	b.n	800097e <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <controlMotor4+0x48>)
 8000972:	7a1b      	ldrb	r3, [r3, #8]
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <controlMotor4+0x48>)
 800097c:	721a      	strb	r2, [r3, #8]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	2400000c 	.word	0x2400000c

08000990 <testPWM>:
void testPWM(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
  for(int i = -1; i > -255; --i)
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	e013      	b.n	80009c6 <testPWM+0x36>
  {
	  controlMotor1(i);
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff5e 	bl	8000860 <controlMotor1>
	  controlMotor2(i);
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff ff81 	bl	80008ac <controlMotor2>
	  controlMotor3(i);
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff ffa4 	bl	80008f8 <controlMotor3>
	  controlMotor4(i);
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff ffc7 	bl	8000944 <controlMotor4>
	  spinalCordTrans();
 80009b6:	f7ff ff29 	bl	800080c <spinalCordTrans>
	  HAL_Delay(20);
 80009ba:	2014      	movs	r0, #20
 80009bc:	f001 fb3a 	bl	8002034 <HAL_Delay>
  for(int i = -1; i > -255; --i)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 80009cc:	dae7      	bge.n	800099e <testPWM+0xe>
  }
  for(int i = -255; i < 0; ++i)
 80009ce:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	e013      	b.n	80009fe <testPWM+0x6e>
  {
	  controlMotor1(i);
 80009d6:	68b8      	ldr	r0, [r7, #8]
 80009d8:	f7ff ff42 	bl	8000860 <controlMotor1>
	  controlMotor2(i);
 80009dc:	68b8      	ldr	r0, [r7, #8]
 80009de:	f7ff ff65 	bl	80008ac <controlMotor2>
	  controlMotor3(i);
 80009e2:	68b8      	ldr	r0, [r7, #8]
 80009e4:	f7ff ff88 	bl	80008f8 <controlMotor3>
	  controlMotor4(i);
 80009e8:	68b8      	ldr	r0, [r7, #8]
 80009ea:	f7ff ffab 	bl	8000944 <controlMotor4>
	  spinalCordTrans();
 80009ee:	f7ff ff0d 	bl	800080c <spinalCordTrans>
	  HAL_Delay(20);
 80009f2:	2014      	movs	r0, #20
 80009f4:	f001 fb1e 	bl	8002034 <HAL_Delay>
  for(int i = -255; i < 0; ++i)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dbe8      	blt.n	80009d6 <testPWM+0x46>
  }
  for(int i = 1 ; i < 255; ++i)
 8000a04:	2301      	movs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	e013      	b.n	8000a32 <testPWM+0xa2>
  {
	  controlMotor1(i);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff28 	bl	8000860 <controlMotor1>
	  controlMotor2(i);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff4b 	bl	80008ac <controlMotor2>
	  controlMotor3(i);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ff6e 	bl	80008f8 <controlMotor3>
	  controlMotor4(i);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff91 	bl	8000944 <controlMotor4>
	  spinalCordTrans();
 8000a22:	f7ff fef3 	bl	800080c <spinalCordTrans>
	  HAL_Delay(20);
 8000a26:	2014      	movs	r0, #20
 8000a28:	f001 fb04 	bl	8002034 <HAL_Delay>
  for(int i = 1 ; i < 255; ++i)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2bfe      	cmp	r3, #254	; 0xfe
 8000a36:	dde8      	ble.n	8000a0a <testPWM+0x7a>
  }
  for(int i = 255; i > 0; --i)
 8000a38:	23ff      	movs	r3, #255	; 0xff
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	e013      	b.n	8000a66 <testPWM+0xd6>
  {
	  controlMotor1(i);
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	f7ff ff0e 	bl	8000860 <controlMotor1>
	  controlMotor2(i);
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	f7ff ff31 	bl	80008ac <controlMotor2>
	  controlMotor3(i);
 8000a4a:	6838      	ldr	r0, [r7, #0]
 8000a4c:	f7ff ff54 	bl	80008f8 <controlMotor3>
	  controlMotor4(i);
 8000a50:	6838      	ldr	r0, [r7, #0]
 8000a52:	f7ff ff77 	bl	8000944 <controlMotor4>
	  spinalCordTrans();
 8000a56:	f7ff fed9 	bl	800080c <spinalCordTrans>
	  HAL_Delay(20);
 8000a5a:	2014      	movs	r0, #20
 8000a5c:	f001 faea 	bl	8002034 <HAL_Delay>
  for(int i = 255; i > 0; --i)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dce8      	bgt.n	8000a3e <testPWM+0xae>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8000a78:	2064      	movs	r0, #100	; 0x64
 8000a7a:	f7ff fef1 	bl	8000860 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8000a7e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8000a82:	f7ff ff13 	bl	80008ac <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 8000a86:	2064      	movs	r0, #100	; 0x64
 8000a88:	f7ff ff36 	bl	80008f8 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8000a8c:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8000a90:	f7ff ff58 	bl	8000944 <controlMotor4>
	spinalCordTrans();
 8000a94:	f7ff feba 	bl	800080c <spinalCordTrans>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <positionControl_Init+0x18>)
 8000aa2:	f007 ffbd 	bl	8008a20 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <positionControl_Init+0x1c>)
 8000aac:	f005 f90e 	bl	8005ccc <HAL_GPIO_WritePin>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	240007b8 	.word	0x240007b8
 8000ab8:	58021000 	.word	0x58021000

08000abc <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d16e      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d16a      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8000ad8:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d11e      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae6:	4837      	ldr	r0, [pc, #220]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ae8:	f005 f8f0 	bl	8005ccc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	4834      	ldr	r0, [pc, #208]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000af2:	f005 f904 	bl	8005cfe <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000afe:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000b00:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b08:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2bc7      	cmp	r3, #199	; 0xc7
 8000b10:	dd05      	ble.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8000b1e:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d11f      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2c:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b2e:	f005 f8cd 	bl	8005ccc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000b32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b36:	4823      	ldr	r0, [pc, #140]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b38:	f005 f8e1 	bl	8005cfe <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b44:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b4e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000b58:	db05      	blt.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d11f      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b76:	f005 f8a9 	bl	8005ccc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b80:	f005 f8bd 	bl	8005cfe <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b8c:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b96:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000ba0:	db05      	blt.n	8000bae <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	240007b8 	.word	0x240007b8
 8000bbc:	240005a0 	.word	0x240005a0
 8000bc0:	2400070c 	.word	0x2400070c
 8000bc4:	58020c00 	.word	0x58020c00
 8000bc8:	24000598 	.word	0x24000598
 8000bcc:	24000654 	.word	0x24000654

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f001 f99c 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f83a 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 fbe6 	bl	80013ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000be0:	f000 fb94 	bl	800130c <MX_DMA_Init>
  MX_ADC1_Init();
 8000be4:	f000 f8ea 	bl	8000dbc <MX_ADC1_Init>
  MX_ADC3_Init();
 8000be8:	f000 f9c4 	bl	8000f74 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000bec:	f000 faaa 	bl	8001144 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000bf0:	f000 faf4 	bl	80011dc <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000bf4:	f000 fa22 	bl	800103c <MX_TIM7_Init>
  MX_UART7_Init();
 8000bf8:	f000 fa58 	bl	80010ac <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000bfc:	f000 fb3a 	bl	8001274 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8000c00:	f000 f954 	bl	8000eac <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000c04:	f7ff fd08 	bl	8000618 <peripheralUART_Init>
  peripheralADC_Init();
 8000c08:	f7ff fe22 	bl	8000850 <peripheralADC_Init>
  delayUs_Init();
 8000c0c:	f7ff fce4 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000c10:	f7ff ff44 	bl	8000a9c <positionControl_Init>
  tracking = 1000;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <main+0x78>)
 8000c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c1a:	601a      	str	r2, [r3, #0]
  brake();
 8000c1c:	f7ff ff2a 	bl	8000a74 <brake>
  compassReset();
 8000c20:	f7ff fdbe 	bl	80007a0 <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <main+0x7c>)
 8000c2a:	f005 f84f 	bl	8005ccc <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000c2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c32:	f001 f9ff 	bl	8002034 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  testPWM();
 8000c36:	f7ff feab 	bl	8000990 <testPWM>
//////////////////////////////////////////////////////////////////////
//	  readADC();
	  tracking++;
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <main+0x78>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a01      	ldr	r2, [pc, #4]	; (8000c48 <main+0x78>)
 8000c42:	6013      	str	r3, [r2, #0]
	  testPWM();
 8000c44:	e7f7      	b.n	8000c36 <main+0x66>
 8000c46:	bf00      	nop
 8000c48:	24000624 	.word	0x24000624
 8000c4c:	58020400 	.word	0x58020400

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0cc      	sub	sp, #304	; 0x130
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c5a:	224c      	movs	r2, #76	; 0x4c
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f00b fdf4 	bl	800c84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f00b fded 	bl	800c84c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4618      	mov	r0, r3
 8000c78:	23bc      	movs	r3, #188	; 0xbc
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f00b fde5 	bl	800c84c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c82:	2002      	movs	r0, #2
 8000c84:	f005 f856 	bl	8005d34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <SystemClock_Config+0x164>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a48      	ldr	r2, [pc, #288]	; (8000db4 <SystemClock_Config+0x164>)
 8000c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <SystemClock_Config+0x164>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	4b44      	ldr	r3, [pc, #272]	; (8000db8 <SystemClock_Config+0x168>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	4a43      	ldr	r2, [pc, #268]	; (8000db8 <SystemClock_Config+0x168>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cb2:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <SystemClock_Config+0x168>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc2:	bf00      	nop
 8000cc4:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <SystemClock_Config+0x164>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd0:	d1f8      	bne.n	8000cc4 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cde:	2340      	movs	r3, #64	; 0x40
 8000ce0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000cf6:	233c      	movs	r3, #60	; 0x3c
 8000cf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 f83f 	bl	8005da8 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000d30:	f000 fc52 	bl	80015d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	233f      	movs	r3, #63	; 0x3f
 8000d36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d46:	2308      	movs	r3, #8
 8000d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d52:	2340      	movs	r3, #64	; 0x40
 8000d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d66:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 fbf3 	bl	8006558 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000d78:	f000 fc2e 	bl	80015d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	2203      	movs	r2, #3
 8000d82:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2200      	movs	r2, #0
 8000d92:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 ff61 	bl	8006c60 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000da4:	f000 fc18 	bl	80015d8 <Error_Handler>
  }
}
 8000da8:	bf00      	nop
 8000daa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58024800 	.word	0x58024800
 8000db8:	58000400 	.word	0x58000400

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000de0:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000de2:	4a30      	ldr	r2, [pc, #192]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000de4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000de8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000df0:	2208      	movs	r2, #8
 8000df2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e3e:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e40:	f001 fabc 	bl	80023bc <HAL_ADC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e4a:	f000 fbc5 	bl	80015d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e5a:	f002 f881 	bl	8002f60 <HAL_ADCEx_MultiModeConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e64:	f000 fbb8 	bl	80015d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_ADC1_Init+0xec>)
 8000e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e74:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_ADC1_Init+0xe4>)
 8000e88:	f001 fc38 	bl	80026fc <HAL_ADC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000e92:	f000 fba1 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	240003a0 	.word	0x240003a0
 8000ea4:	40022000 	.word	0x40022000
 8000ea8:	3ef08000 	.word	0x3ef08000

08000eac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000ec6:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <MX_ADC2_Init+0xc0>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000ecc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f22:	4811      	ldr	r0, [pc, #68]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000f24:	f001 fa4a 	bl	80023bc <HAL_ADC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000f2e:	f000 fb53 	bl	80015d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_ADC2_Init+0xc4>)
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f36:	2306      	movs	r3, #6
 8000f38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f42:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f44:	2304      	movs	r3, #4
 8000f46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_ADC2_Init+0xbc>)
 8000f52:	f001 fbd3 	bl	80026fc <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000f5c:	f000 fb3c 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	24000234 	.word	0x24000234
 8000f6c:	40022100 	.word	0x40022100
 8000f70:	2a000400 	.word	0x2a000400

08000f74 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000f8e:	4a29      	ldr	r2, [pc, #164]	; (8001034 <MX_ADC3_Init+0xc0>)
 8000f90:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000f94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f98:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fea:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_ADC3_Init+0xbc>)
 8000fec:	f001 f9e6 	bl	80023bc <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ff6:	f000 faef 	bl	80015d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_ADC3_Init+0xc4>)
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffe:	2306      	movs	r3, #6
 8001000:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001006:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800100a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800100c:	2304      	movs	r3, #4
 800100e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_ADC3_Init+0xbc>)
 800101a:	f001 fb6f 	bl	80026fc <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001024:	f000 fad8 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2400040c 	.word	0x2400040c
 8001034:	58026000 	.word	0x58026000
 8001038:	04300002 	.word	0x04300002

0800103c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_TIM7_Init+0x68>)
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <MX_TIM7_Init+0x6c>)
 8001050:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_TIM7_Init+0x68>)
 8001054:	f640 125f 	movw	r2, #2399	; 0x95f
 8001058:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_TIM7_Init+0x68>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_TIM7_Init+0x68>)
 8001062:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001066:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_TIM7_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_TIM7_Init+0x68>)
 8001070:	f007 fcaa 	bl	80089c8 <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800107a:	f000 faad 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_TIM7_Init+0x68>)
 800108c:	f007 fed4 	bl	8008e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001096:	f000 fa9f 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240007b8 	.word	0x240007b8
 80010a8:	40001400 	.word	0x40001400

080010ac <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_UART7_Init+0x90>)
 80010b2:	4a23      	ldr	r2, [pc, #140]	; (8001140 <MX_UART7_Init+0x94>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_UART7_Init+0x90>)
 80010b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010bc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_UART7_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_UART7_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_UART7_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_UART7_Init+0x90>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_UART7_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_UART7_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_UART7_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_UART7_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_UART7_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80010f4:	4811      	ldr	r0, [pc, #68]	; (800113c <MX_UART7_Init+0x90>)
 80010f6:	f007 ff45 	bl	8008f84 <HAL_UART_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001100:	f000 fa6a 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_UART7_Init+0x90>)
 8001108:	f00b fa97 	bl	800c63a <HAL_UARTEx_SetTxFifoThreshold>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001112:	f000 fa61 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <MX_UART7_Init+0x90>)
 800111a:	f00b facc 	bl	800c6b6 <HAL_UARTEx_SetRxFifoThreshold>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001124:	f000 fa58 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_UART7_Init+0x90>)
 800112a:	f00b fa4d 	bl	800c5c8 <HAL_UARTEx_DisableFifoMode>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 fa50 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	24000078 	.word	0x24000078
 8001140:	40007800 	.word	0x40007800

08001144 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 800114a:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <MX_USART1_UART_Init+0x94>)
 800114c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118c:	4811      	ldr	r0, [pc, #68]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 800118e:	f007 fef9 	bl	8008f84 <HAL_UART_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001198:	f000 fa1e 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 80011a0:	f00b fa4b 	bl	800c63a <HAL_UARTEx_SetTxFifoThreshold>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011aa:	f000 fa15 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ae:	2100      	movs	r1, #0
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 80011b2:	f00b fa80 	bl	800c6b6 <HAL_UARTEx_SetRxFifoThreshold>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011bc:	f000 fa0c 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_USART1_UART_Init+0x90>)
 80011c2:	f00b fa01 	bl	800c5c8 <HAL_UARTEx_DisableFifoMode>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011cc:	f000 fa04 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	24000508 	.word	0x24000508
 80011d8:	40011000 	.word	0x40011000

080011dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <MX_USART3_UART_Init+0x90>)
 80011e2:	4a23      	ldr	r2, [pc, #140]	; (8001270 <MX_USART3_UART_Init+0x94>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_USART3_UART_Init+0x90>)
 80011e8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80011ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_USART3_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_USART3_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_USART3_UART_Init+0x90>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_USART3_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_USART3_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_USART3_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_USART3_UART_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_USART3_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <MX_USART3_UART_Init+0x90>)
 8001226:	f007 fead 	bl	8008f84 <HAL_UART_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001230:	f000 f9d2 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001234:	2100      	movs	r1, #0
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_USART3_UART_Init+0x90>)
 8001238:	f00b f9ff 	bl	800c63a <HAL_UARTEx_SetTxFifoThreshold>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001242:	f000 f9c9 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001246:	2100      	movs	r1, #0
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <MX_USART3_UART_Init+0x90>)
 800124a:	f00b fa34 	bl	800c6b6 <HAL_UARTEx_SetRxFifoThreshold>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001254:	f000 f9c0 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_USART3_UART_Init+0x90>)
 800125a:	f00b f9b5 	bl	800c5c8 <HAL_UARTEx_DisableFifoMode>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001264:	f000 f9b8 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	240001a4 	.word	0x240001a4
 8001270:	40004800 	.word	0x40004800

08001274 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_USART6_UART_Init+0x90>)
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <MX_USART6_UART_Init+0x94>)
 800127c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_USART6_UART_Init+0x90>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_USART6_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_USART6_UART_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_USART6_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_USART6_UART_Init+0x90>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012be:	f007 fe61 	bl	8008f84 <HAL_UART_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80012c8:	f000 f986 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012d0:	f00b f9b3 	bl	800c63a <HAL_UARTEx_SetTxFifoThreshold>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80012da:	f000 f97d 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012de:	2100      	movs	r1, #0
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012e2:	f00b f9e8 	bl	800c6b6 <HAL_UARTEx_SetRxFifoThreshold>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80012ec:	f000 f974 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_USART6_UART_Init+0x90>)
 80012f2:	f00b f969 	bl	800c5c8 <HAL_UARTEx_DisableFifoMode>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80012fc:	f000 f96c 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	24000678 	.word	0x24000678
 8001308:	40011400 	.word	0x40011400

0800130c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <MX_DMA_Init+0x9c>)
 8001314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001318:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <MX_DMA_Init+0x9c>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_DMA_Init+0x9c>)
 8001324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_DMA_Init+0x9c>)
 8001332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <MX_DMA_Init+0x9c>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_DMA_Init+0x9c>)
 8001342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	200b      	movs	r0, #11
 8001354:	f001 ffb9 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001358:	200b      	movs	r0, #11
 800135a:	f001 ffd0 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	200c      	movs	r0, #12
 8001364:	f001 ffb1 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001368:	200c      	movs	r0, #12
 800136a:	f001 ffc8 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	200d      	movs	r0, #13
 8001374:	f001 ffa9 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001378:	200d      	movs	r0, #13
 800137a:	f001 ffc0 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	200e      	movs	r0, #14
 8001384:	f001 ffa1 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001388:	200e      	movs	r0, #14
 800138a:	f001 ffb8 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	203a      	movs	r0, #58	; 0x3a
 8001394:	f001 ff99 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001398:	203a      	movs	r0, #58	; 0x3a
 800139a:	f001 ffb0 	bl	80032fe <HAL_NVIC_EnableIRQ>

}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	58024400 	.word	0x58024400

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	; 0x30
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c2:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <MX_GPIO_Init+0x214>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	4a7d      	ldr	r2, [pc, #500]	; (80015c0 <MX_GPIO_Init+0x214>)
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d2:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <MX_GPIO_Init+0x214>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	4b77      	ldr	r3, [pc, #476]	; (80015c0 <MX_GPIO_Init+0x214>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	4a76      	ldr	r2, [pc, #472]	; (80015c0 <MX_GPIO_Init+0x214>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f0:	4b73      	ldr	r3, [pc, #460]	; (80015c0 <MX_GPIO_Init+0x214>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b70      	ldr	r3, [pc, #448]	; (80015c0 <MX_GPIO_Init+0x214>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4a6e      	ldr	r2, [pc, #440]	; (80015c0 <MX_GPIO_Init+0x214>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <MX_GPIO_Init+0x214>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <MX_GPIO_Init+0x214>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <MX_GPIO_Init+0x214>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142c:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <MX_GPIO_Init+0x214>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143a:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <MX_GPIO_Init+0x214>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a5f      	ldr	r2, [pc, #380]	; (80015c0 <MX_GPIO_Init+0x214>)
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <MX_GPIO_Init+0x214>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <MX_GPIO_Init+0x214>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <MX_GPIO_Init+0x214>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <MX_GPIO_Init+0x214>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <MX_GPIO_Init+0x214>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a50      	ldr	r2, [pc, #320]	; (80015c0 <MX_GPIO_Init+0x214>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <MX_GPIO_Init+0x214>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f240 7104 	movw	r1, #1796	; 0x704
 800149a:	484a      	ldr	r0, [pc, #296]	; (80015c4 <MX_GPIO_Init+0x218>)
 800149c:	f004 fc16 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80014a0:	2200      	movs	r2, #0
 80014a2:	f242 0167 	movw	r1, #8295	; 0x2067
 80014a6:	4848      	ldr	r0, [pc, #288]	; (80015c8 <MX_GPIO_Init+0x21c>)
 80014a8:	f004 fc10 	bl	8005ccc <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 80014ac:	2200      	movs	r2, #0
 80014ae:	f643 610d 	movw	r1, #15885	; 0x3e0d
 80014b2:	4846      	ldr	r0, [pc, #280]	; (80015cc <MX_GPIO_Init+0x220>)
 80014b4:	f004 fc0a 	bl	8005ccc <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2182      	movs	r1, #130	; 0x82
 80014bc:	4844      	ldr	r0, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x224>)
 80014be:	f004 fc05 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80014c8:	4842      	ldr	r0, [pc, #264]	; (80015d4 <MX_GPIO_Init+0x228>)
 80014ca:	f004 fbff 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 80014ce:	f240 7304 	movw	r3, #1796	; 0x704
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	4837      	ldr	r0, [pc, #220]	; (80015c4 <MX_GPIO_Init+0x218>)
 80014e8:	f004 fa40 	bl	800596c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80014ec:	f242 0367 	movw	r3, #8295	; 0x2067
 80014f0:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4830      	ldr	r0, [pc, #192]	; (80015c8 <MX_GPIO_Init+0x21c>)
 8001506:	f004 fa31 	bl	800596c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800150a:	230d      	movs	r3, #13
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	482a      	ldr	r0, [pc, #168]	; (80015cc <MX_GPIO_Init+0x220>)
 8001522:	f004 fa23 	bl	800596c <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4824      	ldr	r0, [pc, #144]	; (80015d0 <MX_GPIO_Init+0x224>)
 800153e:	f004 fa15 	bl	800596c <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 8001542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	481e      	ldr	r0, [pc, #120]	; (80015d4 <MX_GPIO_Init+0x228>)
 800155c:	f004 fa06 	bl	800596c <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4816      	ldr	r0, [pc, #88]	; (80015d4 <MX_GPIO_Init+0x228>)
 800157a:	f004 f9f7 	bl	800596c <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 800157e:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001582:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_GPIO_Init+0x220>)
 8001598:	f004 f9e8 	bl	800596c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 800159c:	2302      	movs	r3, #2
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_GPIO_Init+0x224>)
 80015b4:	f004 f9da 	bl	800596c <HAL_GPIO_Init>

}
 80015b8:	bf00      	nop
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58020000 	.word	0x58020000
 80015c8:	58020400 	.word	0x58020400
 80015cc:	58021800 	.word	0x58021800
 80015d0:	58021000 	.word	0x58021000
 80015d4:	58020c00 	.word	0x58020c00

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_MspInit+0x30>)
 80015f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_MspInit+0x30>)
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_MspInit+0x30>)
 8001600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	58024400 	.word	0x58024400

0800161c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	; 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a96      	ldr	r2, [pc, #600]	; (8001894 <HAL_ADC_MspInit+0x278>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d163      	bne.n	8001706 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800163e:	4b96      	ldr	r3, [pc, #600]	; (8001898 <HAL_ADC_MspInit+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a94      	ldr	r2, [pc, #592]	; (8001898 <HAL_ADC_MspInit+0x27c>)
 8001646:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001648:	4b93      	ldr	r3, [pc, #588]	; (8001898 <HAL_ADC_MspInit+0x27c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10e      	bne.n	800166e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001650:	4b92      	ldr	r3, [pc, #584]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001652:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001656:	4a91      	ldr	r2, [pc, #580]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001660:	4b8e      	ldr	r3, [pc, #568]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001662:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	623b      	str	r3, [r7, #32]
 800166c:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b8b      	ldr	r3, [pc, #556]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001674:	4a89      	ldr	r2, [pc, #548]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800167e:	4b87      	ldr	r3, [pc, #540]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollLeft_Pin;
 800168c:	2308      	movs	r3, #8
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	4880      	ldr	r0, [pc, #512]	; (80018a0 <HAL_ADC_MspInit+0x284>)
 80016a0:	f004 f964 	bl	800596c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80016a4:	4b7f      	ldr	r3, [pc, #508]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016a6:	4a80      	ldr	r2, [pc, #512]	; (80018a8 <HAL_ADC_MspInit+0x28c>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016aa:	4b7e      	ldr	r3, [pc, #504]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016ac:	2209      	movs	r2, #9
 80016ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b0:	4b7c      	ldr	r3, [pc, #496]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b6:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016bc:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c4:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016cc:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016d4:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016dc:	4b71      	ldr	r3, [pc, #452]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e2:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016e8:	486e      	ldr	r0, [pc, #440]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016ea:	f001 fe23 	bl	8003334 <HAL_DMA_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 80016f4:	f7ff ff70 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a6a      	ldr	r2, [pc, #424]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 80016fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80016fe:	4a69      	ldr	r2, [pc, #420]	; (80018a4 <HAL_ADC_MspInit+0x288>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001704:	e0c1      	b.n	800188a <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a68      	ldr	r2, [pc, #416]	; (80018ac <HAL_ADC_MspInit+0x290>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d163      	bne.n	80017d8 <HAL_ADC_MspInit+0x1bc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <HAL_ADC_MspInit+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a60      	ldr	r2, [pc, #384]	; (8001898 <HAL_ADC_MspInit+0x27c>)
 8001718:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_ADC_MspInit+0x27c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d10e      	bne.n	8001740 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001722:	4b5e      	ldr	r3, [pc, #376]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001724:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001728:	4a5c      	ldr	r2, [pc, #368]	; (800189c <HAL_ADC_MspInit+0x280>)
 800172a:	f043 0320 	orr.w	r3, r3, #32
 800172e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001732:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	4a55      	ldr	r2, [pc, #340]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001750:	4b52      	ldr	r3, [pc, #328]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RollRigt_Pin;
 800175e:	2301      	movs	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001762:	2303      	movs	r3, #3
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	484f      	ldr	r0, [pc, #316]	; (80018b0 <HAL_ADC_MspInit+0x294>)
 8001772:	f004 f8fb 	bl	800596c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001776:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 8001778:	4a4f      	ldr	r2, [pc, #316]	; (80018b8 <HAL_ADC_MspInit+0x29c>)
 800177a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800177c:	4b4d      	ldr	r3, [pc, #308]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 800177e:	220a      	movs	r2, #10
 8001780:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001782:	4b4c      	ldr	r3, [pc, #304]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001788:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 8001790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001794:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 8001798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800179c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800179e:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 80017a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017a6:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 80017a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b4:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017ba:	483e      	ldr	r0, [pc, #248]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 80017bc:	f001 fdba 	bl	8003334 <HAL_DMA_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 80017c6:	f7ff ff07 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a39      	ldr	r2, [pc, #228]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 80017ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80017d0:	4a38      	ldr	r2, [pc, #224]	; (80018b4 <HAL_ADC_MspInit+0x298>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017d6:	e058      	b.n	800188a <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a37      	ldr	r2, [pc, #220]	; (80018bc <HAL_ADC_MspInit+0x2a0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d153      	bne.n	800188a <HAL_ADC_MspInit+0x26e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_ADC_MspInit+0x280>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	4a2c      	ldr	r2, [pc, #176]	; (800189c <HAL_ADC_MspInit+0x280>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_ADC_MspInit+0x280>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_ADC_MspInit+0x280>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800181e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001822:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001826:	f000 fc33 	bl	8002090 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 800182c:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <HAL_ADC_MspInit+0x2a8>)
 800182e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 8001832:	2273      	movs	r2, #115	; 0x73
 8001834:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 8001844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001848:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 800184c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001850:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 8001854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001858:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 800185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001860:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 8001870:	f001 fd60 	bl	8003334 <HAL_DMA_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_ADC_MspInit+0x262>
      Error_Handler();
 800187a:	f7ff fead 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 8001882:	64da      	str	r2, [r3, #76]	; 0x4c
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_ADC_MspInit+0x2a4>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6393      	str	r3, [r2, #56]	; 0x38
}
 800188a:	bf00      	nop
 800188c:	3738      	adds	r7, #56	; 0x38
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000
 8001898:	24000048 	.word	0x24000048
 800189c:	58024400 	.word	0x58024400
 80018a0:	58020000 	.word	0x58020000
 80018a4:	240005a8 	.word	0x240005a8
 80018a8:	40020010 	.word	0x40020010
 80018ac:	40022100 	.word	0x40022100
 80018b0:	58020800 	.word	0x58020800
 80018b4:	24000738 	.word	0x24000738
 80018b8:	40020028 	.word	0x40020028
 80018bc:	58026000 	.word	0x58026000
 80018c0:	240002e0 	.word	0x240002e0
 80018c4:	40020040 	.word	0x40020040

080018c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_TIM_Base_MspInit+0x48>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d116      	bne.n	8001908 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_TIM_Base_MspInit+0x4c>)
 80018dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <HAL_TIM_Base_MspInit+0x4c>)
 80018e2:	f043 0320 	orr.w	r3, r3, #32
 80018e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_TIM_Base_MspInit+0x4c>)
 80018ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2037      	movs	r0, #55	; 0x37
 80018fe:	f001 fce4 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001902:	2037      	movs	r0, #55	; 0x37
 8001904:	f001 fcfb 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40001400 	.word	0x40001400
 8001914:	58024400 	.word	0x58024400

08001918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b090      	sub	sp, #64	; 0x40
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4aa3      	ldr	r2, [pc, #652]	; (8001bc4 <HAL_UART_MspInit+0x2ac>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d136      	bne.n	80019a8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800193a:	4ba3      	ldr	r3, [pc, #652]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 800193c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001940:	4aa1      	ldr	r2, [pc, #644]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001946:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800194a:	4b9f      	ldr	r3, [pc, #636]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 800194c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001958:	4b9b      	ldr	r3, [pc, #620]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	4a9a      	ldr	r2, [pc, #616]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001960:	f043 0320 	orr.w	r3, r3, #32
 8001964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001968:	4b97      	ldr	r3, [pc, #604]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001986:	2307      	movs	r3, #7
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	4619      	mov	r1, r3
 8001990:	488e      	ldr	r0, [pc, #568]	; (8001bcc <HAL_UART_MspInit+0x2b4>)
 8001992:	f003 ffeb 	bl	800596c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2104      	movs	r1, #4
 800199a:	2052      	movs	r0, #82	; 0x52
 800199c:	f001 fc95 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80019a0:	2052      	movs	r0, #82	; 0x52
 80019a2:	f001 fcac 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019a6:	e108      	b.n	8001bba <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a88      	ldr	r2, [pc, #544]	; (8001bd0 <HAL_UART_MspInit+0x2b8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d165      	bne.n	8001a7e <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b2:	4b85      	ldr	r3, [pc, #532]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 80019b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019b8:	4a83      	ldr	r2, [pc, #524]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019c2:	4b81      	ldr	r3, [pc, #516]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 80019c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	4b7d      	ldr	r3, [pc, #500]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	4a7c      	ldr	r2, [pc, #496]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e0:	4b79      	ldr	r3, [pc, #484]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 80019ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a00:	2304      	movs	r3, #4
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4872      	ldr	r0, [pc, #456]	; (8001bd4 <HAL_UART_MspInit+0x2bc>)
 8001a0c:	f003 ffae 	bl	800596c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001a10:	4b71      	ldr	r3, [pc, #452]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a12:	4a72      	ldr	r2, [pc, #456]	; (8001bdc <HAL_UART_MspInit+0x2c4>)
 8001a14:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a16:	4b70      	ldr	r3, [pc, #448]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a18:	2229      	movs	r2, #41	; 0x29
 8001a1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a1c:	4b6e      	ldr	r3, [pc, #440]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a22:	4b6d      	ldr	r3, [pc, #436]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a28:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a30:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a36:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a3c:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a42:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a50:	4861      	ldr	r0, [pc, #388]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a52:	f001 fc6f 	bl	8003334 <HAL_DMA_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001a5c:	f7ff fdbc 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a5d      	ldr	r2, [pc, #372]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a64:	679a      	str	r2, [r3, #120]	; 0x78
 8001a66:	4a5c      	ldr	r2, [pc, #368]	; (8001bd8 <HAL_UART_MspInit+0x2c0>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2025      	movs	r0, #37	; 0x25
 8001a72:	f001 fc2a 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a76:	2025      	movs	r0, #37	; 0x25
 8001a78:	f001 fc41 	bl	80032fe <HAL_NVIC_EnableIRQ>
}
 8001a7c:	e09d      	b.n	8001bba <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <HAL_UART_MspInit+0x2c8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d15d      	bne.n	8001b44 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a88:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8e:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a98:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b48      	ldr	r3, [pc, #288]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	4a46      	ldr	r2, [pc, #280]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab6:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001ac4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	483c      	ldr	r0, [pc, #240]	; (8001bd4 <HAL_UART_MspInit+0x2bc>)
 8001ae2:	f003 ff43 	bl	800596c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001ae8:	4a3f      	ldr	r2, [pc, #252]	; (8001be8 <HAL_UART_MspInit+0x2d0>)
 8001aea:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001aec:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001aee:	222d      	movs	r2, #45	; 0x2d
 8001af0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af2:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af8:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afe:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b04:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0c:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b18:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b26:	482f      	ldr	r0, [pc, #188]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b28:	f001 fc04 	bl	8003334 <HAL_DMA_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001b32:	f7ff fd51 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b3a:	679a      	str	r2, [r3, #120]	; 0x78
 8001b3c:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <HAL_UART_MspInit+0x2cc>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b42:	e03a      	b.n	8001bba <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_UART_MspInit+0x2d4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d135      	bne.n	8001bba <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001b56:	f043 0320 	orr.w	r3, r3, #32
 8001b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_UART_MspInit+0x2b0>)
 8001b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001b8a:	23c0      	movs	r3, #192	; 0xc0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <HAL_UART_MspInit+0x2d8>)
 8001ba6:	f003 fee1 	bl	800596c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2102      	movs	r1, #2
 8001bae:	2047      	movs	r0, #71	; 0x47
 8001bb0:	f001 fb8b 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bb4:	2047      	movs	r0, #71	; 0x47
 8001bb6:	f001 fba2 	bl	80032fe <HAL_NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3740      	adds	r7, #64	; 0x40
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40007800 	.word	0x40007800
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	58021400 	.word	0x58021400
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	58020400 	.word	0x58020400
 8001bd8:	24000474 	.word	0x24000474
 8001bdc:	40020058 	.word	0x40020058
 8001be0:	40004800 	.word	0x40004800
 8001be4:	2400011c 	.word	0x2400011c
 8001be8:	40020440 	.word	0x40020440
 8001bec:	40011400 	.word	0x40011400
 8001bf0:	58020800 	.word	0x58020800

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <SysTick_Handler+0x2c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <SysTick_Handler+0x2c>)
 8001c52:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <SysTick_Handler+0x2c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d904      	bls.n	8001c66 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Handler+0x2c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001c62:	f7fe fdb3 	bl	80007cc <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c66:	f000 f9c5 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	240004fc 	.word	0x240004fc

08001c74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <DMA1_Stream0_IRQHandler+0x10>)
 8001c7a:	f002 fb65 	bl	8004348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	240005a8 	.word	0x240005a8

08001c88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
//	leftRawDistance = a_Linear *pitchRawValue[0] + b_Linear;
//	rigtRawDistance = a_Linear *pitchRawValue[1] + b_Linear;
//	pitchRawDistance = a_Linear *pitchRawValue[2] + b_Linear;
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <DMA1_Stream1_IRQHandler+0x10>)
 8001c8e:	f002 fb5b 	bl	8004348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	24000738 	.word	0x24000738

08001c9c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA1_Stream2_IRQHandler+0x10>)
 8001ca2:	f002 fb51 	bl	8004348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	240002e0 	.word	0x240002e0

08001cb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <DMA1_Stream3_IRQHandler+0x24>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <DMA1_Stream3_IRQHandler+0x24>)
 8001cbe:	785b      	ldrb	r3, [r3, #1]
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <DMA1_Stream3_IRQHandler+0x28>)
 8001cc8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cca:	4804      	ldr	r0, [pc, #16]	; (8001cdc <DMA1_Stream3_IRQHandler+0x2c>)
 8001ccc:	f002 fb3c 	bl	8004348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	240002c0 	.word	0x240002c0
 8001cd8:	24000370 	.word	0x24000370
 8001cdc:	24000474 	.word	0x24000474

08001ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <USART1_IRQHandler+0x10>)
 8001ce6:	f007 fc17 	bl	8009518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	24000508 	.word	0x24000508

08001cf4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <TIM7_IRQHandler+0x10>)
 8001cfa:	f006 febb 	bl	8008a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	240007b8 	.word	0x240007b8

08001d08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d135      	bne.n	8001d80 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <DMA2_Stream2_IRQHandler+0xac>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	b2d1      	uxtb	r1, r2
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <DMA2_Stream2_IRQHandler+0xac>)
 8001d1e:	7011      	strb	r1, [r2, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <DMA2_Stream2_IRQHandler+0xb0>)
 8001d24:	7819      	ldrb	r1, [r3, #0]
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <DMA2_Stream2_IRQHandler+0xb4>)
 8001d28:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <DMA2_Stream2_IRQHandler+0xac>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b05      	cmp	r3, #5
 8001d30:	d926      	bls.n	8001d80 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <DMA2_Stream2_IRQHandler+0xac>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <DMA2_Stream2_IRQHandler+0xb4>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <DMA2_Stream2_IRQHandler+0xb4>)
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <DMA2_Stream2_IRQHandler+0xb8>)
 8001d52:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <DMA2_Stream2_IRQHandler+0xb4>)
 8001d56:	789b      	ldrb	r3, [r3, #2]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <DMA2_Stream2_IRQHandler+0xb4>)
 8001d5e:	78db      	ldrb	r3, [r3, #3]
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <DMA2_Stream2_IRQHandler+0xbc>)
 8001d68:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <DMA2_Stream2_IRQHandler+0xb4>)
 8001d6c:	791b      	ldrb	r3, [r3, #4]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <DMA2_Stream2_IRQHandler+0xb4>)
 8001d74:	795b      	ldrb	r3, [r3, #5]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <DMA2_Stream2_IRQHandler+0xc0>)
 8001d7e:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <DMA2_Stream2_IRQHandler+0xb0>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2baa      	cmp	r3, #170	; 0xaa
 8001d86:	d106      	bne.n	8001d96 <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e006      	b.n	8001da4 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d002      	beq.n	8001da4 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001da4:	4809      	ldr	r0, [pc, #36]	; (8001dcc <DMA2_Stream2_IRQHandler+0xc4>)
 8001da6:	f002 facf 	bl	8004348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	24000044 	.word	0x24000044
 8001db4:	24000404 	.word	0x24000404
 8001db8:	24000704 	.word	0x24000704
 8001dbc:	240002b8 	.word	0x240002b8
 8001dc0:	240005a4 	.word	0x240005a4
 8001dc4:	240005a6 	.word	0x240005a6
 8001dc8:	24000718 	.word	0x24000718
 8001dcc:	2400011c 	.word	0x2400011c

08001dd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <USART6_IRQHandler+0x10>)
 8001dd6:	f007 fb9f 	bl	8009518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	24000678 	.word	0x24000678

08001de4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <UART7_IRQHandler+0x10>)
 8001dea:	f007 fb95 	bl	8009518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	24000078 	.word	0x24000078

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <SystemInit+0xac>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <SystemInit+0xac>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <SystemInit+0xb0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <SystemInit+0xb0>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <SystemInit+0xb0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <SystemInit+0xb0>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4921      	ldr	r1, [pc, #132]	; (8001ea8 <SystemInit+0xb0>)
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <SystemInit+0xb4>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <SystemInit+0xb0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <SystemInit+0xb0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <SystemInit+0xb0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <SystemInit+0xb0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <SystemInit+0xb0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <SystemInit+0xb0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <SystemInit+0xb0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <SystemInit+0xb0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <SystemInit+0xb0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <SystemInit+0xb0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <SystemInit+0xb0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <SystemInit+0xb0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <SystemInit+0xb0>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <SystemInit+0xb0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <SystemInit+0xb8>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <SystemInit+0xbc>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e8a:	d202      	bcs.n	8001e92 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <SystemInit+0xc0>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SystemInit+0xac>)
 8001e94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e98:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	eaf6ed7f 	.word	0xeaf6ed7f
 8001eb0:	5c001000 	.word	0x5c001000
 8001eb4:	ffff0000 	.word	0xffff0000
 8001eb8:	51008108 	.word	0x51008108

08001ebc <Reset_Handler>:
 8001ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef4 <LoopFillZerobss+0x14>
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	e003      	b.n	8001ecc <LoopCopyDataInit>

08001ec4 <CopyDataInit>:
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x18>)
 8001ec6:	585b      	ldr	r3, [r3, r1]
 8001ec8:	5043      	str	r3, [r0, r1]
 8001eca:	3104      	adds	r1, #4

08001ecc <LoopCopyDataInit>:
 8001ecc:	480b      	ldr	r0, [pc, #44]	; (8001efc <LoopFillZerobss+0x1c>)
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <LoopFillZerobss+0x20>)
 8001ed0:	1842      	adds	r2, r0, r1
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d3f6      	bcc.n	8001ec4 <CopyDataInit>
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <LoopFillZerobss+0x24>)
 8001ed8:	e002      	b.n	8001ee0 <LoopFillZerobss>

08001eda <FillZerobss>:
 8001eda:	2300      	movs	r3, #0
 8001edc:	f842 3b04 	str.w	r3, [r2], #4

08001ee0 <LoopFillZerobss>:
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <LoopFillZerobss+0x28>)
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3f9      	bcc.n	8001eda <FillZerobss>
 8001ee6:	f7ff ff87 	bl	8001df8 <SystemInit>
 8001eea:	f00a fc8b 	bl	800c804 <__libc_init_array>
 8001eee:	f7fe fe6f 	bl	8000bd0 <main>
 8001ef2:	4770      	bx	lr
 8001ef4:	24080000 	.word	0x24080000
 8001ef8:	0800c8ac 	.word	0x0800c8ac
 8001efc:	24000000 	.word	0x24000000
 8001f00:	24000028 	.word	0x24000028
 8001f04:	24000028 	.word	0x24000028
 8001f08:	2400081c 	.word	0x2400081c

08001f0c <ADC3_IRQHandler>:
 8001f0c:	e7fe      	b.n	8001f0c <ADC3_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f16:	2003      	movs	r0, #3
 8001f18:	f001 f9cc 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f1c:	f004 fcd2 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 8001f20:	4601      	mov	r1, r0
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_Init+0x68>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <HAL_Init+0x6c>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa21 f303 	lsr.w	r3, r1, r3
 8001f38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_Init+0x68>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_Init+0x6c>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_Init+0x70>)
 8001f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_Init+0x74>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f814 	bl	8001f88 <HAL_InitTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e002      	b.n	8001f70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6a:	f7ff fb3d 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	0800c884 	.word	0x0800c884
 8001f80:	2400001c 	.word	0x2400001c
 8001f84:	24000018 	.word	0x24000018

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_InitTick+0x60>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e021      	b.n	8001fe0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_InitTick+0x64>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_InitTick+0x60>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 f9b1 	bl	800331a <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f001 f97b 	bl	80032ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_InitTick+0x68>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000024 	.word	0x24000024
 8001fec:	24000018 	.word	0x24000018
 8001ff0:	24000020 	.word	0x24000020

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	24000024 	.word	0x24000024
 8002018:	24000818 	.word	0x24000818

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	24000818 	.word	0x24000818

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_Delay+0x40>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24000024 	.word	0x24000024

08002078 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_GetREVID+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0c1b      	lsrs	r3, r3, #16
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	5c001000 	.word	0x5c001000

08002090 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	4904      	ldr	r1, [pc, #16]	; (80020b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	58000400 	.word	0x58000400

080020bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	609a      	str	r2, [r3, #8]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002124:	b490      	push	{r4, r7}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3360      	adds	r3, #96	; 0x60
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	430b      	orrs	r3, r1
 8002150:	4313      	orrs	r3, r2
 8002152:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bc90      	pop	{r4, r7}
 800215c:	4770      	bx	lr

0800215e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	431a      	orrs	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	611a      	str	r2, [r3, #16]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002190:	b490      	push	{r4, r7}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3360      	adds	r3, #96	; 0x60
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	6023      	str	r3, [r4, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc90      	pop	{r4, r7}
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021c0:	b490      	push	{r4, r7}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3330      	adds	r3, #48	; 0x30
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	4413      	add	r3, r2
 80021de:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021e0:	6822      	ldr	r2, [r4, #0]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	211f      	movs	r1, #31
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	401a      	ands	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	f003 011f 	and.w	r1, r3, #31
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bc90      	pop	{r4, r7}
 8002210:	4770      	bx	lr

08002212 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002212:	b490      	push	{r4, r7}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3314      	adds	r3, #20
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	0e5b      	lsrs	r3, r3, #25
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	4413      	add	r3, r2
 8002230:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0d1b      	lsrs	r3, r3, #20
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2107      	movs	r1, #7
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	401a      	ands	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	0d1b      	lsrs	r3, r3, #20
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bc90      	pop	{r4, r7}
 8002260:	4770      	bx	lr
	...

08002264 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800227c:	43db      	mvns	r3, r3
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0318 	and.w	r3, r3, #24
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002288:	40d9      	lsrs	r1, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	400b      	ands	r3, r1
 800228e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002292:	431a      	orrs	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	000fffff 	.word	0x000fffff

080022ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <LL_ADC_DisableDeepPowerDown+0x20>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6093      	str	r3, [r2, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	5fffffc0 	.word	0x5fffffc0

080022d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e4:	d101      	bne.n	80022ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <LL_ADC_EnableInternalRegulator+0x24>)
 8002306:	4013      	ands	r3, r2
 8002308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	6fffffc0 	.word	0x6fffffc0

08002320 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002334:	d101      	bne.n	800233a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <LL_ADC_IsEnabled+0x18>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <LL_ADC_IsEnabled+0x1a>
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b04      	cmp	r3, #4
 8002380:	d101      	bne.n	8002386 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d101      	bne.n	80023ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e18e      	b.n	80026f4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff f919 	bl	800161c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff67 	bl	80022d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff4d 	bl	80022ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff82 	bl	8002320 <LL_ADC_IsInternalRegulatorEnabled>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d113      	bne.n	800244a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff66 	bl	80022f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800242c:	4b9a      	ldr	r3, [pc, #616]	; (8002698 <HAL_ADC_Init+0x2dc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	4a9a      	ldr	r2, [pc, #616]	; (800269c <HAL_ADC_Init+0x2e0>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800243c:	e002      	b.n	8002444 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3b01      	subs	r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f9      	bne.n	800243e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff66 	bl	8002320 <LL_ADC_IsInternalRegulatorEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	f043 0210 	orr.w	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff77 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 8002480:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 8129 	bne.w	80026e2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8125 	bne.w	80026e2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024a0:	f043 0202 	orr.w	r2, r3, #2
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff4b 	bl	8002348 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d136      	bne.n	8002526 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a78      	ldr	r2, [pc, #480]	; (80026a0 <HAL_ADC_Init+0x2e4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_Init+0x110>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a77      	ldr	r2, [pc, #476]	; (80026a4 <HAL_ADC_Init+0x2e8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d10e      	bne.n	80024ea <HAL_ADC_Init+0x12e>
 80024cc:	4874      	ldr	r0, [pc, #464]	; (80026a0 <HAL_ADC_Init+0x2e4>)
 80024ce:	f7ff ff3b 	bl	8002348 <LL_ADC_IsEnabled>
 80024d2:	4604      	mov	r4, r0
 80024d4:	4873      	ldr	r0, [pc, #460]	; (80026a4 <HAL_ADC_Init+0x2e8>)
 80024d6:	f7ff ff37 	bl	8002348 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	4323      	orrs	r3, r4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf0c      	ite	eq
 80024e2:	2301      	moveq	r3, #1
 80024e4:	2300      	movne	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	e008      	b.n	80024fc <HAL_ADC_Init+0x140>
 80024ea:	486f      	ldr	r0, [pc, #444]	; (80026a8 <HAL_ADC_Init+0x2ec>)
 80024ec:	f7ff ff2c 	bl	8002348 <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a66      	ldr	r2, [pc, #408]	; (80026a0 <HAL_ADC_Init+0x2e4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_ADC_Init+0x158>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a65      	ldr	r2, [pc, #404]	; (80026a4 <HAL_ADC_Init+0x2e8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_ADC_Init+0x15c>
 8002514:	4a65      	ldr	r2, [pc, #404]	; (80026ac <HAL_ADC_Init+0x2f0>)
 8002516:	e000      	b.n	800251a <HAL_ADC_Init+0x15e>
 8002518:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <HAL_ADC_Init+0x2f4>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7ff fdcb 	bl	80020bc <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002526:	f7ff fda7 	bl	8002078 <HAL_GetREVID>
 800252a:	4602      	mov	r2, r0
 800252c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002530:	429a      	cmp	r2, r3
 8002532:	d914      	bls.n	800255e <HAL_ADC_Init+0x1a2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b10      	cmp	r3, #16
 800253a:	d110      	bne.n	800255e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7d5b      	ldrb	r3, [r3, #21]
 8002540:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002546:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800254c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7f1b      	ldrb	r3, [r3, #28]
 8002552:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002554:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002556:	f043 030c 	orr.w	r3, r3, #12
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e00d      	b.n	800257a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7d5b      	ldrb	r3, [r3, #21]
 8002562:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002568:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800256e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7f1b      	ldrb	r3, [r3, #28]
 8002574:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7f1b      	ldrb	r3, [r3, #28]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d106      	bne.n	8002590 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	3b01      	subs	r3, #1
 8002588:	045b      	lsls	r3, r3, #17
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d009      	beq.n	80025ac <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_ADC_Init+0x2f8>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	430b      	orrs	r3, r1
 80025be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fed2 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 80025ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fedf 	bl	8002394 <LL_ADC_INJ_IsConversionOngoing>
 80025d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d14a      	bne.n	8002674 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d147      	bne.n	8002674 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7d1b      	ldrb	r3, [r3, #20]
 80025e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_ADC_Init+0x2fc>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	69b9      	ldr	r1, [r7, #24]
 8002602:	430b      	orrs	r3, r1
 8002604:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800260c:	2b01      	cmp	r3, #1
 800260e:	d11b      	bne.n	8002648 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_ADC_Init+0x300>)
 800261e:	4013      	ands	r3, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002624:	3a01      	subs	r2, #1
 8002626:	0411      	lsls	r1, r2, #16
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002632:	4311      	orrs	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002638:	430a      	orrs	r2, r1
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	611a      	str	r2, [r3, #16]
 8002646:	e007      	b.n	8002658 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fb58 	bl	8002d24 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d121      	bne.n	80026c0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f023 010f 	bic.w	r1, r3, #15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
 8002694:	e01c      	b.n	80026d0 <HAL_ADC_Init+0x314>
 8002696:	bf00      	nop
 8002698:	24000018 	.word	0x24000018
 800269c:	053e2d63 	.word	0x053e2d63
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40022100 	.word	0x40022100
 80026a8:	58026000 	.word	0x58026000
 80026ac:	40022300 	.word	0x40022300
 80026b0:	58026300 	.word	0x58026300
 80026b4:	fff0c003 	.word	0xfff0c003
 80026b8:	ffffbffc 	.word	0xffffbffc
 80026bc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 020f 	bic.w	r2, r2, #15
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f023 0303 	bic.w	r3, r3, #3
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
 80026e0:	e007      	b.n	80026f2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3724      	adds	r7, #36	; 0x24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd90      	pop	{r4, r7, pc}

080026fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b099      	sub	sp, #100	; 0x64
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a99      	ldr	r2, [pc, #612]	; (800297c <HAL_ADC_ConfigChannel+0x280>)
 8002716:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x2a>
 8002722:	2302      	movs	r3, #2
 8002724:	e2e6      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x5f8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fe1b 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 82cb 	bne.w	8002cd6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002748:	2b00      	cmp	r3, #0
 800274a:	d108      	bne.n	800275e <HAL_ADC_ConfigChannel+0x62>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2201      	movs	r2, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	e00f      	b.n	800277e <HAL_ADC_ConfigChannel+0x82>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800276c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2201      	movs	r2, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	69d1      	ldr	r1, [r2, #28]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	430b      	orrs	r3, r1
 800278a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	f7ff fd11 	bl	80021c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fde3 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 80027a8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fdf0 	bl	8002394 <LL_ADC_INJ_IsConversionOngoing>
 80027b4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 80b3 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 80af 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f7ff fd1d 	bl	8002212 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027d8:	4b69      	ldr	r3, [pc, #420]	; (8002980 <HAL_ADC_ConfigChannel+0x284>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80027e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027e4:	d10b      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x102>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	e01d      	b.n	800283a <HAL_ADC_ConfigChannel+0x13e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x128>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	e00a      	b.n	800283a <HAL_ADC_ConfigChannel+0x13e>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d027      	beq.n	8002894 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6919      	ldr	r1, [r3, #16]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002852:	f7ff fc67 	bl	8002124 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6919      	ldr	r1, [r3, #16]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7e5b      	ldrb	r3, [r3, #25]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d102      	bne.n	800286c <HAL_ADC_ConfigChannel+0x170>
 8002866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800286a:	e000      	b.n	800286e <HAL_ADC_ConfigChannel+0x172>
 800286c:	2300      	movs	r3, #0
 800286e:	461a      	mov	r2, r3
 8002870:	f7ff fc8e 	bl	8002190 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6919      	ldr	r1, [r3, #16]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	7e1b      	ldrb	r3, [r3, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d102      	bne.n	800288a <HAL_ADC_ConfigChannel+0x18e>
 8002884:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002888:	e000      	b.n	800288c <HAL_ADC_ConfigChannel+0x190>
 800288a:	2300      	movs	r3, #0
 800288c:	461a      	mov	r2, r3
 800288e:	f7ff fc66 	bl	800215e <LL_ADC_SetDataRightShift>
 8002892:	e047      	b.n	8002924 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	069b      	lsls	r3, r3, #26
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d107      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028b6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	069b      	lsls	r3, r3, #26
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d107      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028da:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	069b      	lsls	r3, r3, #26
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d107      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028fe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	069b      	lsls	r3, r3, #26
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002922:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fd0d 	bl	8002348 <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 81d9 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f7ff fc8e 	bl	8002264 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_ADC_ConfigChannel+0x280>)
 800294e:	4293      	cmp	r3, r2
 8002950:	f040 8101 	bne.w	8002b56 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10f      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x288>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2b09      	cmp	r3, #9
 8002972:	bf94      	ite	ls
 8002974:	2301      	movls	r3, #1
 8002976:	2300      	movhi	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e016      	b.n	80029aa <HAL_ADC_ConfigChannel+0x2ae>
 800297c:	47ff0000 	.word	0x47ff0000
 8002980:	5c001000 	.word	0x5c001000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2b09      	cmp	r3, #9
 80029a2:	bf94      	ite	ls
 80029a4:	2301      	movls	r3, #1
 80029a6:	2300      	movhi	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d064      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x2ce>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	3301      	adds	r3, #1
 80029c2:	069b      	lsls	r3, r3, #26
 80029c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c8:	e00e      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x2ec>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	069b      	lsls	r3, r3, #26
 80029e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x30c>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	0e9b      	lsrs	r3, r3, #26
 80029fa:	3301      	adds	r3, #1
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	e010      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x32e>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	2101      	movs	r1, #1
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	ea42 0103 	orr.w	r1, r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x354>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0e9b      	lsrs	r3, r3, #26
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	051b      	lsls	r3, r3, #20
 8002a4e:	e011      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x378>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a74:	430b      	orrs	r3, r1
 8002a76:	e069      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x398>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	069b      	lsls	r3, r3, #26
 8002a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a92:	e00e      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x3b6>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	61fb      	str	r3, [r7, #28]
  return result;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	069b      	lsls	r3, r3, #26
 8002aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x3d6>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	e010      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x3f8>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	617b      	str	r3, [r7, #20]
  return result;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	2101      	movs	r1, #1
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	ea42 0103 	orr.w	r1, r2, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10d      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x424>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	3b1e      	subs	r3, #30
 8002b18:	051b      	lsls	r3, r3, #20
 8002b1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	e014      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x44e>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	60fb      	str	r3, [r7, #12]
  return result;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	3b1e      	subs	r3, #30
 8002b44:	051b      	lsls	r3, r3, #20
 8002b46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	6892      	ldr	r2, [r2, #8]
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7ff fb5e 	bl	8002212 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f280 80c4 	bge.w	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a65      	ldr	r2, [pc, #404]	; (8002cfc <HAL_ADC_ConfigChannel+0x600>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0x478>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a64      	ldr	r2, [pc, #400]	; (8002d00 <HAL_ADC_ConfigChannel+0x604>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x47c>
 8002b74:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_ADC_ConfigChannel+0x608>)
 8002b76:	e000      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x47e>
 8002b78:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_ADC_ConfigChannel+0x60c>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fac4 	bl	8002108 <LL_ADC_GetCommonPathInternalCh>
 8002b80:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_ADC_ConfigChannel+0x600>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x49a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5b      	ldr	r2, [pc, #364]	; (8002d00 <HAL_ADC_ConfigChannel+0x604>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10e      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x4b8>
 8002b96:	4859      	ldr	r0, [pc, #356]	; (8002cfc <HAL_ADC_ConfigChannel+0x600>)
 8002b98:	f7ff fbd6 	bl	8002348 <LL_ADC_IsEnabled>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	4858      	ldr	r0, [pc, #352]	; (8002d00 <HAL_ADC_ConfigChannel+0x604>)
 8002ba0:	f7ff fbd2 	bl	8002348 <LL_ADC_IsEnabled>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4323      	orrs	r3, r4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e008      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x4ca>
 8002bb4:	4855      	ldr	r0, [pc, #340]	; (8002d0c <HAL_ADC_ConfigChannel+0x610>)
 8002bb6:	f7ff fbc7 	bl	8002348 <LL_ADC_IsEnabled>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d07b      	beq.n	8002cc2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a50      	ldr	r2, [pc, #320]	; (8002d10 <HAL_ADC_ConfigChannel+0x614>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d12e      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x536>
 8002bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d129      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4a      	ldr	r2, [pc, #296]	; (8002d0c <HAL_ADC_ConfigChannel+0x610>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d17f      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <HAL_ADC_ConfigChannel+0x600>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x500>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a42      	ldr	r2, [pc, #264]	; (8002d00 <HAL_ADC_ConfigChannel+0x604>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x504>
 8002bfc:	4a41      	ldr	r2, [pc, #260]	; (8002d04 <HAL_ADC_ConfigChannel+0x608>)
 8002bfe:	e000      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x506>
 8002c00:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <HAL_ADC_ConfigChannel+0x60c>)
 8002c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f7ff fa69 	bl	80020e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c10:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <HAL_ADC_ConfigChannel+0x618>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	4a40      	ldr	r2, [pc, #256]	; (8002d18 <HAL_ADC_ConfigChannel+0x61c>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002c22:	e002      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f9      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c30:	e05a      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a39      	ldr	r2, [pc, #228]	; (8002d1c <HAL_ADC_ConfigChannel+0x620>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d11e      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x57e>
 8002c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d119      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a30      	ldr	r2, [pc, #192]	; (8002d0c <HAL_ADC_ConfigChannel+0x610>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d14b      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a29      	ldr	r2, [pc, #164]	; (8002cfc <HAL_ADC_ConfigChannel+0x600>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_ADC_ConfigChannel+0x568>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <HAL_ADC_ConfigChannel+0x604>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x56c>
 8002c64:	4a27      	ldr	r2, [pc, #156]	; (8002d04 <HAL_ADC_ConfigChannel+0x608>)
 8002c66:	e000      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x56e>
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <HAL_ADC_ConfigChannel+0x60c>)
 8002c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7ff fa35 	bl	80020e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c78:	e036      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <HAL_ADC_ConfigChannel+0x624>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d131      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
 8002c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d12c      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_ADC_ConfigChannel+0x610>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d127      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_ADC_ConfigChannel+0x600>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_ADC_ConfigChannel+0x5b0>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_ADC_ConfigChannel+0x604>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x5b4>
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <HAL_ADC_ConfigChannel+0x608>)
 8002cae:	e000      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x5b6>
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <HAL_ADC_ConfigChannel+0x60c>)
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f7ff fa11 	bl	80020e2 <LL_ADC_SetCommonPathInternalCh>
 8002cc0:	e012      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cd4:	e008      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3764      	adds	r7, #100	; 0x64
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40022100 	.word	0x40022100
 8002d04:	40022300 	.word	0x40022300
 8002d08:	58026300 	.word	0x58026300
 8002d0c:	58026000 	.word	0x58026000
 8002d10:	cb840000 	.word	0xcb840000
 8002d14:	24000018 	.word	0x24000018
 8002d18:	053e2d63 	.word	0x053e2d63
 8002d1c:	c7520000 	.word	0xc7520000
 8002d20:	cfb80000 	.word	0xcfb80000

08002d24 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a70      	ldr	r2, [pc, #448]	; (8002ef4 <ADC_ConfigureBoostMode+0x1d0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <ADC_ConfigureBoostMode+0x1c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ef8 <ADC_ConfigureBoostMode+0x1d4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d109      	bne.n	8002d54 <ADC_ConfigureBoostMode+0x30>
 8002d40:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <ADC_ConfigureBoostMode+0x1d8>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	e008      	b.n	8002d66 <ADC_ConfigureBoostMode+0x42>
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <ADC_ConfigureBoostMode+0x1dc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01a      	beq.n	8002da0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d6a:	f003 ff1d 	bl	8006ba8 <HAL_RCC_GetHCLKFreq>
 8002d6e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d78:	d006      	beq.n	8002d88 <ADC_ConfigureBoostMode+0x64>
 8002d7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d7e:	d00b      	beq.n	8002d98 <ADC_ConfigureBoostMode+0x74>
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d000      	beq.n	8002d88 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002d86:	e05d      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	60fb      	str	r3, [r7, #12]
        break;
 8002d96:	e055      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	60fb      	str	r3, [r7, #12]
        break;
 8002d9e:	e051      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002da0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002da4:	f004 fe3a 	bl	8007a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002da8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002db2:	d02a      	beq.n	8002e0a <ADC_ConfigureBoostMode+0xe6>
 8002db4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002db8:	d813      	bhi.n	8002de2 <ADC_ConfigureBoostMode+0xbe>
 8002dba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dbe:	d024      	beq.n	8002e0a <ADC_ConfigureBoostMode+0xe6>
 8002dc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dc4:	d806      	bhi.n	8002dd4 <ADC_ConfigureBoostMode+0xb0>
 8002dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dca:	d01e      	beq.n	8002e0a <ADC_ConfigureBoostMode+0xe6>
 8002dcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd0:	d01b      	beq.n	8002e0a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002dd2:	e037      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd8:	d017      	beq.n	8002e0a <ADC_ConfigureBoostMode+0xe6>
 8002dda:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002dde:	d014      	beq.n	8002e0a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002de0:	e030      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002de2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002de6:	d021      	beq.n	8002e2c <ADC_ConfigureBoostMode+0x108>
 8002de8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002dec:	d806      	bhi.n	8002dfc <ADC_ConfigureBoostMode+0xd8>
 8002dee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002df2:	d013      	beq.n	8002e1c <ADC_ConfigureBoostMode+0xf8>
 8002df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002df8:	d014      	beq.n	8002e24 <ADC_ConfigureBoostMode+0x100>
        break;
 8002dfa:	e023      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002dfc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e00:	d018      	beq.n	8002e34 <ADC_ConfigureBoostMode+0x110>
 8002e02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e06:	d019      	beq.n	8002e3c <ADC_ConfigureBoostMode+0x118>
        break;
 8002e08:	e01c      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	0c9b      	lsrs	r3, r3, #18
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	60fb      	str	r3, [r7, #12]
        break;
 8002e1a:	e013      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	60fb      	str	r3, [r7, #12]
      break;
 8002e22:	e00f      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	60fb      	str	r3, [r7, #12]
        break;
 8002e2a:	e00b      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	60fb      	str	r3, [r7, #12]
        break;
 8002e32:	e007      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	09db      	lsrs	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
        break;
 8002e3a:	e003      	b.n	8002e44 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	60fb      	str	r3, [r7, #12]
        break;
 8002e42:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e44:	f7ff f918 	bl	8002078 <HAL_GetREVID>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d815      	bhi.n	8002e7e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a2b      	ldr	r2, [pc, #172]	; (8002f04 <ADC_ConfigureBoostMode+0x1e0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d908      	bls.n	8002e6c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e68:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e6a:	e03e      	b.n	8002eea <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e7a:	609a      	str	r2, [r3, #8]
}
 8002e7c:	e035      	b.n	8002eea <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a20      	ldr	r2, [pc, #128]	; (8002f08 <ADC_ConfigureBoostMode+0x1e4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d808      	bhi.n	8002e9e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	e025      	b.n	8002eea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a1a      	ldr	r2, [pc, #104]	; (8002f0c <ADC_ConfigureBoostMode+0x1e8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d80a      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb8:	609a      	str	r2, [r3, #8]
}
 8002eba:	e016      	b.n	8002eea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <ADC_ConfigureBoostMode+0x1ec>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d80a      	bhi.n	8002eda <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed6:	609a      	str	r2, [r3, #8]
}
 8002ed8:	e007      	b.n	8002eea <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40022100 	.word	0x40022100
 8002efc:	40022300 	.word	0x40022300
 8002f00:	58026300 	.word	0x58026300
 8002f04:	01312d00 	.word	0x01312d00
 8002f08:	005f5e10 	.word	0x005f5e10
 8002f0c:	00bebc20 	.word	0x00bebc20
 8002f10:	017d7840 	.word	0x017d7840

08002f14 <LL_ADC_IsEnabled>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <LL_ADC_IsEnabled+0x18>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_ADC_IsEnabled+0x1a>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d101      	bne.n	8002f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b09f      	sub	sp, #124	; 0x7c
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0ba      	b.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a5c      	ldr	r2, [pc, #368]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d102      	bne.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002f90:	4b5b      	ldr	r3, [pc, #364]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	e001      	b.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e09d      	b.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ffbd 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8002fc0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ffb7 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d17f      	bne.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d17c      	bne.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a47      	ldr	r2, [pc, #284]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a46      	ldr	r2, [pc, #280]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002fec:	4b45      	ldr	r3, [pc, #276]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fee:	e000      	b.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002ff0:	4b45      	ldr	r3, [pc, #276]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ff2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d039      	beq.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	431a      	orrs	r2, r3
 800300a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a38      	ldr	r2, [pc, #224]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10e      	bne.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003022:	4836      	ldr	r0, [pc, #216]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003024:	f7ff ff76 	bl	8002f14 <LL_ADC_IsEnabled>
 8003028:	4604      	mov	r4, r0
 800302a:	4835      	ldr	r0, [pc, #212]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800302c:	f7ff ff72 	bl	8002f14 <LL_ADC_IsEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	4323      	orrs	r3, r4
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e008      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003040:	4832      	ldr	r0, [pc, #200]	; (800310c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003042:	f7ff ff67 	bl	8002f14 <LL_ADC_IsEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d047      	beq.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800305c:	4013      	ands	r3, r2
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	6811      	ldr	r1, [r2, #0]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	6892      	ldr	r2, [r2, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	431a      	orrs	r2, r3
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800306e:	e03a      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10e      	bne.n	80030ae <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003090:	481a      	ldr	r0, [pc, #104]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003092:	f7ff ff3f 	bl	8002f14 <LL_ADC_IsEnabled>
 8003096:	4604      	mov	r4, r0
 8003098:	4819      	ldr	r0, [pc, #100]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800309a:	f7ff ff3b 	bl	8002f14 <LL_ADC_IsEnabled>
 800309e:	4603      	mov	r3, r0
 80030a0:	4323      	orrs	r3, r4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e008      	b.n	80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80030ae:	4817      	ldr	r0, [pc, #92]	; (800310c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030b0:	f7ff ff30 	bl	8002f14 <LL_ADC_IsEnabled>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030d0:	e009      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f043 0220 	orr.w	r2, r3, #32
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80030e4:	e000      	b.n	80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	377c      	adds	r7, #124	; 0x7c
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd90      	pop	{r4, r7, pc}
 80030fc:	40022000 	.word	0x40022000
 8003100:	40022100 	.word	0x40022100
 8003104:	40022300 	.word	0x40022300
 8003108:	58026300 	.word	0x58026300
 800310c:	58026000 	.word	0x58026000
 8003110:	fffff0e0 	.word	0xfffff0e0

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <__NVIC_SetPriorityGrouping+0x40>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 800313e:	4313      	orrs	r3, r2
 8003140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003142:	4a04      	ldr	r2, [pc, #16]	; (8003154 <__NVIC_SetPriorityGrouping+0x40>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	60d3      	str	r3, [r2, #12]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00
 8003158:	05fa0000 	.word	0x05fa0000

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	; (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d301      	bcc.n	8003286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003282:	2301      	movs	r3, #1
 8003284:	e00f      	b.n	80032a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <SysTick_Config+0x40>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328e:	210f      	movs	r1, #15
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f7ff ff8e 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <SysTick_Config+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Config+0x40>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff29 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff40 	bl	800315c <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff90 	bl	8003208 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5f 	bl	80031b4 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff33 	bl	8003178 <__NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffa4 	bl	8003270 <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800333c:	f7fe fe6e 	bl	800201c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e316      	b.n	800397a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a66      	ldr	r2, [pc, #408]	; (80034ec <HAL_DMA_Init+0x1b8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a65      	ldr	r2, [pc, #404]	; (80034f0 <HAL_DMA_Init+0x1bc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a63      	ldr	r2, [pc, #396]	; (80034f4 <HAL_DMA_Init+0x1c0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a62      	ldr	r2, [pc, #392]	; (80034f8 <HAL_DMA_Init+0x1c4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a60      	ldr	r2, [pc, #384]	; (80034fc <HAL_DMA_Init+0x1c8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5f      	ldr	r2, [pc, #380]	; (8003500 <HAL_DMA_Init+0x1cc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <HAL_DMA_Init+0x1d0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5c      	ldr	r2, [pc, #368]	; (8003508 <HAL_DMA_Init+0x1d4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a5a      	ldr	r2, [pc, #360]	; (800350c <HAL_DMA_Init+0x1d8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a59      	ldr	r2, [pc, #356]	; (8003510 <HAL_DMA_Init+0x1dc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a57      	ldr	r2, [pc, #348]	; (8003514 <HAL_DMA_Init+0x1e0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a56      	ldr	r2, [pc, #344]	; (8003518 <HAL_DMA_Init+0x1e4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a54      	ldr	r2, [pc, #336]	; (800351c <HAL_DMA_Init+0x1e8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a53      	ldr	r2, [pc, #332]	; (8003520 <HAL_DMA_Init+0x1ec>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_DMA_Init+0x1f0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Init+0xb8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a50      	ldr	r2, [pc, #320]	; (8003528 <HAL_DMA_Init+0x1f4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_Init+0xbc>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_DMA_Init+0xbe>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 813b 	beq.w	800366e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a37      	ldr	r2, [pc, #220]	; (80034ec <HAL_DMA_Init+0x1b8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d04a      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <HAL_DMA_Init+0x1bc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d045      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a34      	ldr	r2, [pc, #208]	; (80034f4 <HAL_DMA_Init+0x1c0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d040      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a33      	ldr	r2, [pc, #204]	; (80034f8 <HAL_DMA_Init+0x1c4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d03b      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a31      	ldr	r2, [pc, #196]	; (80034fc <HAL_DMA_Init+0x1c8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d036      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a30      	ldr	r2, [pc, #192]	; (8003500 <HAL_DMA_Init+0x1cc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d031      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2e      	ldr	r2, [pc, #184]	; (8003504 <HAL_DMA_Init+0x1d0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02c      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2d      	ldr	r2, [pc, #180]	; (8003508 <HAL_DMA_Init+0x1d4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d027      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2b      	ldr	r2, [pc, #172]	; (800350c <HAL_DMA_Init+0x1d8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d022      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2a      	ldr	r2, [pc, #168]	; (8003510 <HAL_DMA_Init+0x1dc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d01d      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a28      	ldr	r2, [pc, #160]	; (8003514 <HAL_DMA_Init+0x1e0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d018      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a27      	ldr	r2, [pc, #156]	; (8003518 <HAL_DMA_Init+0x1e4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a25      	ldr	r2, [pc, #148]	; (800351c <HAL_DMA_Init+0x1e8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00e      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a24      	ldr	r2, [pc, #144]	; (8003520 <HAL_DMA_Init+0x1ec>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d009      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a22      	ldr	r2, [pc, #136]	; (8003524 <HAL_DMA_Init+0x1f0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_DMA_Init+0x174>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a21      	ldr	r2, [pc, #132]	; (8003528 <HAL_DMA_Init+0x1f4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d108      	bne.n	80034ba <HAL_DMA_Init+0x186>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e007      	b.n	80034ca <HAL_DMA_Init+0x196>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034ca:	e02f      	b.n	800352c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034cc:	f7fe fda6 	bl	800201c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d928      	bls.n	800352c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2203      	movs	r2, #3
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e246      	b.n	800397a <HAL_DMA_Init+0x646>
 80034ec:	40020010 	.word	0x40020010
 80034f0:	40020028 	.word	0x40020028
 80034f4:	40020040 	.word	0x40020040
 80034f8:	40020058 	.word	0x40020058
 80034fc:	40020070 	.word	0x40020070
 8003500:	40020088 	.word	0x40020088
 8003504:	400200a0 	.word	0x400200a0
 8003508:	400200b8 	.word	0x400200b8
 800350c:	40020410 	.word	0x40020410
 8003510:	40020428 	.word	0x40020428
 8003514:	40020440 	.word	0x40020440
 8003518:	40020458 	.word	0x40020458
 800351c:	40020470 	.word	0x40020470
 8003520:	40020488 	.word	0x40020488
 8003524:	400204a0 	.word	0x400204a0
 8003528:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1c8      	bne.n	80034cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4b83      	ldr	r3, [pc, #524]	; (8003754 <HAL_DMA_Init+0x420>)
 8003546:	4013      	ands	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003552:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	2b04      	cmp	r3, #4
 800357e:	d107      	bne.n	8003590 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	4313      	orrs	r3, r2
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003590:	4b71      	ldr	r3, [pc, #452]	; (8003758 <HAL_DMA_Init+0x424>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b71      	ldr	r3, [pc, #452]	; (800375c <HAL_DMA_Init+0x428>)
 8003596:	4013      	ands	r3, r2
 8003598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359c:	d328      	bcc.n	80035f0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b28      	cmp	r3, #40	; 0x28
 80035a4:	d903      	bls.n	80035ae <HAL_DMA_Init+0x27a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b2e      	cmp	r3, #46	; 0x2e
 80035ac:	d917      	bls.n	80035de <HAL_DMA_Init+0x2aa>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b3e      	cmp	r3, #62	; 0x3e
 80035b4:	d903      	bls.n	80035be <HAL_DMA_Init+0x28a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b42      	cmp	r3, #66	; 0x42
 80035bc:	d90f      	bls.n	80035de <HAL_DMA_Init+0x2aa>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b46      	cmp	r3, #70	; 0x46
 80035c4:	d903      	bls.n	80035ce <HAL_DMA_Init+0x29a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b48      	cmp	r3, #72	; 0x48
 80035cc:	d907      	bls.n	80035de <HAL_DMA_Init+0x2aa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b4e      	cmp	r3, #78	; 0x4e
 80035d4:	d905      	bls.n	80035e2 <HAL_DMA_Init+0x2ae>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b52      	cmp	r3, #82	; 0x52
 80035dc:	d801      	bhi.n	80035e2 <HAL_DMA_Init+0x2ae>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_DMA_Init+0x2b0>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0307 	bic.w	r3, r3, #7
 8003606:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b04      	cmp	r3, #4
 8003618:	d117      	bne.n	800364a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00e      	beq.n	800364a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f002 f813 	bl	8005658 <DMA_CheckFifoParam>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e197      	b.n	800397a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f001 ff4e 	bl	80054f4 <DMA_CalcBaseAndBitshift>
 8003658:	4603      	mov	r3, r0
 800365a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	223f      	movs	r2, #63	; 0x3f
 8003666:	409a      	lsls	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	e0cd      	b.n	800380a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3b      	ldr	r2, [pc, #236]	; (8003760 <HAL_DMA_Init+0x42c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_Init+0x38a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a39      	ldr	r2, [pc, #228]	; (8003764 <HAL_DMA_Init+0x430>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_DMA_Init+0x38a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a38      	ldr	r2, [pc, #224]	; (8003768 <HAL_DMA_Init+0x434>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_DMA_Init+0x38a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a36      	ldr	r2, [pc, #216]	; (800376c <HAL_DMA_Init+0x438>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_DMA_Init+0x38a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a35      	ldr	r2, [pc, #212]	; (8003770 <HAL_DMA_Init+0x43c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_DMA_Init+0x38a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a33      	ldr	r2, [pc, #204]	; (8003774 <HAL_DMA_Init+0x440>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_DMA_Init+0x38a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a32      	ldr	r2, [pc, #200]	; (8003778 <HAL_DMA_Init+0x444>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_DMA_Init+0x38a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a30      	ldr	r2, [pc, #192]	; (800377c <HAL_DMA_Init+0x448>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_DMA_Init+0x38e>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_DMA_Init+0x390>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8097 	beq.w	80037f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a24      	ldr	r2, [pc, #144]	; (8003760 <HAL_DMA_Init+0x42c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d021      	beq.n	8003718 <HAL_DMA_Init+0x3e4>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a22      	ldr	r2, [pc, #136]	; (8003764 <HAL_DMA_Init+0x430>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01c      	beq.n	8003718 <HAL_DMA_Init+0x3e4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <HAL_DMA_Init+0x434>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d017      	beq.n	8003718 <HAL_DMA_Init+0x3e4>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_DMA_Init+0x438>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d012      	beq.n	8003718 <HAL_DMA_Init+0x3e4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <HAL_DMA_Init+0x43c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00d      	beq.n	8003718 <HAL_DMA_Init+0x3e4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_DMA_Init+0x440>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d008      	beq.n	8003718 <HAL_DMA_Init+0x3e4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <HAL_DMA_Init+0x444>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <HAL_DMA_Init+0x3e4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <HAL_DMA_Init+0x448>)
 8003716:	4293      	cmp	r3, r2
 8003718:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_DMA_Init+0x44c>)
 8003736:	4013      	ands	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d020      	beq.n	8003784 <HAL_DMA_Init+0x450>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d102      	bne.n	8003750 <HAL_DMA_Init+0x41c>
 800374a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800374e:	e01a      	b.n	8003786 <HAL_DMA_Init+0x452>
 8003750:	2300      	movs	r3, #0
 8003752:	e018      	b.n	8003786 <HAL_DMA_Init+0x452>
 8003754:	fe10803f 	.word	0xfe10803f
 8003758:	5c001000 	.word	0x5c001000
 800375c:	ffff0000 	.word	0xffff0000
 8003760:	58025408 	.word	0x58025408
 8003764:	5802541c 	.word	0x5802541c
 8003768:	58025430 	.word	0x58025430
 800376c:	58025444 	.word	0x58025444
 8003770:	58025458 	.word	0x58025458
 8003774:	5802546c 	.word	0x5802546c
 8003778:	58025480 	.word	0x58025480
 800377c:	58025494 	.word	0x58025494
 8003780:	fffe000f 	.word	0xfffe000f
 8003784:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68d2      	ldr	r2, [r2, #12]
 800378a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800378c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003794:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800379c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b6e      	ldr	r3, [pc, #440]	; (8003984 <HAL_DMA_Init+0x650>)
 80037cc:	4413      	add	r3, r2
 80037ce:	4a6e      	ldr	r2, [pc, #440]	; (8003988 <HAL_DMA_Init+0x654>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f001 fe89 	bl	80054f4 <DMA_CalcBaseAndBitshift>
 80037e2:	4603      	mov	r3, r0
 80037e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2201      	movs	r2, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	e008      	b.n	800380a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2240      	movs	r2, #64	; 0x40
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2203      	movs	r2, #3
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0b7      	b.n	800397a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5f      	ldr	r2, [pc, #380]	; (800398c <HAL_DMA_Init+0x658>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d072      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5d      	ldr	r2, [pc, #372]	; (8003990 <HAL_DMA_Init+0x65c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d06d      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a5c      	ldr	r2, [pc, #368]	; (8003994 <HAL_DMA_Init+0x660>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d068      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a5a      	ldr	r2, [pc, #360]	; (8003998 <HAL_DMA_Init+0x664>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d063      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a59      	ldr	r2, [pc, #356]	; (800399c <HAL_DMA_Init+0x668>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d05e      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a57      	ldr	r2, [pc, #348]	; (80039a0 <HAL_DMA_Init+0x66c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d059      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a56      	ldr	r2, [pc, #344]	; (80039a4 <HAL_DMA_Init+0x670>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d054      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a54      	ldr	r2, [pc, #336]	; (80039a8 <HAL_DMA_Init+0x674>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d04f      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a53      	ldr	r2, [pc, #332]	; (80039ac <HAL_DMA_Init+0x678>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d04a      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a51      	ldr	r2, [pc, #324]	; (80039b0 <HAL_DMA_Init+0x67c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d045      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a50      	ldr	r2, [pc, #320]	; (80039b4 <HAL_DMA_Init+0x680>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d040      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a4e      	ldr	r2, [pc, #312]	; (80039b8 <HAL_DMA_Init+0x684>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d03b      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a4d      	ldr	r2, [pc, #308]	; (80039bc <HAL_DMA_Init+0x688>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d036      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a4b      	ldr	r2, [pc, #300]	; (80039c0 <HAL_DMA_Init+0x68c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d031      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a4a      	ldr	r2, [pc, #296]	; (80039c4 <HAL_DMA_Init+0x690>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d02c      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a48      	ldr	r2, [pc, #288]	; (80039c8 <HAL_DMA_Init+0x694>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d027      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a47      	ldr	r2, [pc, #284]	; (80039cc <HAL_DMA_Init+0x698>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d022      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a45      	ldr	r2, [pc, #276]	; (80039d0 <HAL_DMA_Init+0x69c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01d      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a44      	ldr	r2, [pc, #272]	; (80039d4 <HAL_DMA_Init+0x6a0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a42      	ldr	r2, [pc, #264]	; (80039d8 <HAL_DMA_Init+0x6a4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a41      	ldr	r2, [pc, #260]	; (80039dc <HAL_DMA_Init+0x6a8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00e      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3f      	ldr	r2, [pc, #252]	; (80039e0 <HAL_DMA_Init+0x6ac>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3e      	ldr	r2, [pc, #248]	; (80039e4 <HAL_DMA_Init+0x6b0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_DMA_Init+0x5c6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a3c      	ldr	r2, [pc, #240]	; (80039e8 <HAL_DMA_Init+0x6b4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_DMA_Init+0x5ca>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_DMA_Init+0x5cc>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d032      	beq.n	800396a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f001 ff23 	bl	8005750 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d102      	bne.n	8003918 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800392c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_DMA_Init+0x624>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d80c      	bhi.n	8003958 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f001 ffa0 	bl	8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e008      	b.n	800396a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	a7fdabf8 	.word	0xa7fdabf8
 8003988:	cccccccd 	.word	0xcccccccd
 800398c:	40020010 	.word	0x40020010
 8003990:	40020028 	.word	0x40020028
 8003994:	40020040 	.word	0x40020040
 8003998:	40020058 	.word	0x40020058
 800399c:	40020070 	.word	0x40020070
 80039a0:	40020088 	.word	0x40020088
 80039a4:	400200a0 	.word	0x400200a0
 80039a8:	400200b8 	.word	0x400200b8
 80039ac:	40020410 	.word	0x40020410
 80039b0:	40020428 	.word	0x40020428
 80039b4:	40020440 	.word	0x40020440
 80039b8:	40020458 	.word	0x40020458
 80039bc:	40020470 	.word	0x40020470
 80039c0:	40020488 	.word	0x40020488
 80039c4:	400204a0 	.word	0x400204a0
 80039c8:	400204b8 	.word	0x400204b8
 80039cc:	58025408 	.word	0x58025408
 80039d0:	5802541c 	.word	0x5802541c
 80039d4:	58025430 	.word	0x58025430
 80039d8:	58025444 	.word	0x58025444
 80039dc:	58025458 	.word	0x58025458
 80039e0:	5802546c 	.word	0x5802546c
 80039e4:	58025480 	.word	0x58025480
 80039e8:	58025494 	.word	0x58025494

080039ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e226      	b.n	8003e56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_DMA_Start_IT+0x2a>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e21f      	b.n	8003e56 <HAL_DMA_Start_IT+0x46a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	f040 820a 	bne.w	8003e40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a68      	ldr	r2, [pc, #416]	; (8003be0 <HAL_DMA_Start_IT+0x1f4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d04a      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a66      	ldr	r2, [pc, #408]	; (8003be4 <HAL_DMA_Start_IT+0x1f8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d045      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_DMA_Start_IT+0x1fc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d040      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a63      	ldr	r2, [pc, #396]	; (8003bec <HAL_DMA_Start_IT+0x200>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d03b      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a62      	ldr	r2, [pc, #392]	; (8003bf0 <HAL_DMA_Start_IT+0x204>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d036      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a60      	ldr	r2, [pc, #384]	; (8003bf4 <HAL_DMA_Start_IT+0x208>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d031      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a5f      	ldr	r2, [pc, #380]	; (8003bf8 <HAL_DMA_Start_IT+0x20c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d02c      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a5d      	ldr	r2, [pc, #372]	; (8003bfc <HAL_DMA_Start_IT+0x210>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d027      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a5c      	ldr	r2, [pc, #368]	; (8003c00 <HAL_DMA_Start_IT+0x214>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d022      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5a      	ldr	r2, [pc, #360]	; (8003c04 <HAL_DMA_Start_IT+0x218>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01d      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a59      	ldr	r2, [pc, #356]	; (8003c08 <HAL_DMA_Start_IT+0x21c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d018      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a57      	ldr	r2, [pc, #348]	; (8003c0c <HAL_DMA_Start_IT+0x220>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a56      	ldr	r2, [pc, #344]	; (8003c10 <HAL_DMA_Start_IT+0x224>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a54      	ldr	r2, [pc, #336]	; (8003c14 <HAL_DMA_Start_IT+0x228>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a53      	ldr	r2, [pc, #332]	; (8003c18 <HAL_DMA_Start_IT+0x22c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_DMA_Start_IT+0xee>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a51      	ldr	r2, [pc, #324]	; (8003c1c <HAL_DMA_Start_IT+0x230>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d108      	bne.n	8003aec <HAL_DMA_Start_IT+0x100>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e007      	b.n	8003afc <HAL_DMA_Start_IT+0x110>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f001 fb4a 	bl	800519c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_DMA_Start_IT+0x1f4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d04a      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a33      	ldr	r2, [pc, #204]	; (8003be4 <HAL_DMA_Start_IT+0x1f8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d045      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a31      	ldr	r2, [pc, #196]	; (8003be8 <HAL_DMA_Start_IT+0x1fc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d040      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_DMA_Start_IT+0x200>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d03b      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2e      	ldr	r2, [pc, #184]	; (8003bf0 <HAL_DMA_Start_IT+0x204>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d036      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2d      	ldr	r2, [pc, #180]	; (8003bf4 <HAL_DMA_Start_IT+0x208>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d031      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_DMA_Start_IT+0x20c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02c      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <HAL_DMA_Start_IT+0x210>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d027      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <HAL_DMA_Start_IT+0x214>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d022      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <HAL_DMA_Start_IT+0x218>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <HAL_DMA_Start_IT+0x21c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <HAL_DMA_Start_IT+0x220>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <HAL_DMA_Start_IT+0x224>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a21      	ldr	r2, [pc, #132]	; (8003c14 <HAL_DMA_Start_IT+0x228>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_DMA_Start_IT+0x22c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x1bc>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <HAL_DMA_Start_IT+0x230>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_DMA_Start_IT+0x1c0>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <HAL_DMA_Start_IT+0x1c2>
 8003bac:	2300      	movs	r3, #0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d036      	beq.n	8003c20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 021e 	bic.w	r2, r3, #30
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0216 	orr.w	r2, r2, #22
 8003bc4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d03e      	beq.n	8003c4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0208 	orr.w	r2, r2, #8
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e035      	b.n	8003c4c <HAL_DMA_Start_IT+0x260>
 8003be0:	40020010 	.word	0x40020010
 8003be4:	40020028 	.word	0x40020028
 8003be8:	40020040 	.word	0x40020040
 8003bec:	40020058 	.word	0x40020058
 8003bf0:	40020070 	.word	0x40020070
 8003bf4:	40020088 	.word	0x40020088
 8003bf8:	400200a0 	.word	0x400200a0
 8003bfc:	400200b8 	.word	0x400200b8
 8003c00:	40020410 	.word	0x40020410
 8003c04:	40020428 	.word	0x40020428
 8003c08:	40020440 	.word	0x40020440
 8003c0c:	40020458 	.word	0x40020458
 8003c10:	40020470 	.word	0x40020470
 8003c14:	40020488 	.word	0x40020488
 8003c18:	400204a0 	.word	0x400204a0
 8003c1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 020e 	bic.w	r2, r3, #14
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 020a 	orr.w	r2, r2, #10
 8003c32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0204 	orr.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a83      	ldr	r2, [pc, #524]	; (8003e60 <HAL_DMA_Start_IT+0x474>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d072      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a82      	ldr	r2, [pc, #520]	; (8003e64 <HAL_DMA_Start_IT+0x478>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d06d      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a80      	ldr	r2, [pc, #512]	; (8003e68 <HAL_DMA_Start_IT+0x47c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d068      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a7f      	ldr	r2, [pc, #508]	; (8003e6c <HAL_DMA_Start_IT+0x480>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d063      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a7d      	ldr	r2, [pc, #500]	; (8003e70 <HAL_DMA_Start_IT+0x484>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d05e      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7c      	ldr	r2, [pc, #496]	; (8003e74 <HAL_DMA_Start_IT+0x488>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d059      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7a      	ldr	r2, [pc, #488]	; (8003e78 <HAL_DMA_Start_IT+0x48c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d054      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a79      	ldr	r2, [pc, #484]	; (8003e7c <HAL_DMA_Start_IT+0x490>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d04f      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a77      	ldr	r2, [pc, #476]	; (8003e80 <HAL_DMA_Start_IT+0x494>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d04a      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a76      	ldr	r2, [pc, #472]	; (8003e84 <HAL_DMA_Start_IT+0x498>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d045      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a74      	ldr	r2, [pc, #464]	; (8003e88 <HAL_DMA_Start_IT+0x49c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d040      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a73      	ldr	r2, [pc, #460]	; (8003e8c <HAL_DMA_Start_IT+0x4a0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d03b      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a71      	ldr	r2, [pc, #452]	; (8003e90 <HAL_DMA_Start_IT+0x4a4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d036      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a70      	ldr	r2, [pc, #448]	; (8003e94 <HAL_DMA_Start_IT+0x4a8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d031      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6e      	ldr	r2, [pc, #440]	; (8003e98 <HAL_DMA_Start_IT+0x4ac>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d02c      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a6d      	ldr	r2, [pc, #436]	; (8003e9c <HAL_DMA_Start_IT+0x4b0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d027      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6b      	ldr	r2, [pc, #428]	; (8003ea0 <HAL_DMA_Start_IT+0x4b4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d022      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6a      	ldr	r2, [pc, #424]	; (8003ea4 <HAL_DMA_Start_IT+0x4b8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d01d      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a68      	ldr	r2, [pc, #416]	; (8003ea8 <HAL_DMA_Start_IT+0x4bc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d018      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a67      	ldr	r2, [pc, #412]	; (8003eac <HAL_DMA_Start_IT+0x4c0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a65      	ldr	r2, [pc, #404]	; (8003eb0 <HAL_DMA_Start_IT+0x4c4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00e      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a64      	ldr	r2, [pc, #400]	; (8003eb4 <HAL_DMA_Start_IT+0x4c8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a62      	ldr	r2, [pc, #392]	; (8003eb8 <HAL_DMA_Start_IT+0x4cc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_DMA_Start_IT+0x350>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a61      	ldr	r2, [pc, #388]	; (8003ebc <HAL_DMA_Start_IT+0x4d0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d101      	bne.n	8003d40 <HAL_DMA_Start_IT+0x354>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_DMA_Start_IT+0x356>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a37      	ldr	r2, [pc, #220]	; (8003e60 <HAL_DMA_Start_IT+0x474>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d04a      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a36      	ldr	r2, [pc, #216]	; (8003e64 <HAL_DMA_Start_IT+0x478>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d045      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a34      	ldr	r2, [pc, #208]	; (8003e68 <HAL_DMA_Start_IT+0x47c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d040      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a33      	ldr	r2, [pc, #204]	; (8003e6c <HAL_DMA_Start_IT+0x480>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d03b      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a31      	ldr	r2, [pc, #196]	; (8003e70 <HAL_DMA_Start_IT+0x484>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d036      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a30      	ldr	r2, [pc, #192]	; (8003e74 <HAL_DMA_Start_IT+0x488>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d031      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2e      	ldr	r2, [pc, #184]	; (8003e78 <HAL_DMA_Start_IT+0x48c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d02c      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2d      	ldr	r2, [pc, #180]	; (8003e7c <HAL_DMA_Start_IT+0x490>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d027      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <HAL_DMA_Start_IT+0x494>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d022      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2a      	ldr	r2, [pc, #168]	; (8003e84 <HAL_DMA_Start_IT+0x498>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d01d      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <HAL_DMA_Start_IT+0x49c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d018      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <HAL_DMA_Start_IT+0x4a0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a25      	ldr	r2, [pc, #148]	; (8003e90 <HAL_DMA_Start_IT+0x4a4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a24      	ldr	r2, [pc, #144]	; (8003e94 <HAL_DMA_Start_IT+0x4a8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <HAL_DMA_Start_IT+0x4ac>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_DMA_Start_IT+0x430>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a21      	ldr	r2, [pc, #132]	; (8003e9c <HAL_DMA_Start_IT+0x4b0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d108      	bne.n	8003e2e <HAL_DMA_Start_IT+0x442>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e012      	b.n	8003e54 <HAL_DMA_Start_IT+0x468>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e009      	b.n	8003e54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40020010 	.word	0x40020010
 8003e64:	40020028 	.word	0x40020028
 8003e68:	40020040 	.word	0x40020040
 8003e6c:	40020058 	.word	0x40020058
 8003e70:	40020070 	.word	0x40020070
 8003e74:	40020088 	.word	0x40020088
 8003e78:	400200a0 	.word	0x400200a0
 8003e7c:	400200b8 	.word	0x400200b8
 8003e80:	40020410 	.word	0x40020410
 8003e84:	40020428 	.word	0x40020428
 8003e88:	40020440 	.word	0x40020440
 8003e8c:	40020458 	.word	0x40020458
 8003e90:	40020470 	.word	0x40020470
 8003e94:	40020488 	.word	0x40020488
 8003e98:	400204a0 	.word	0x400204a0
 8003e9c:	400204b8 	.word	0x400204b8
 8003ea0:	58025408 	.word	0x58025408
 8003ea4:	5802541c 	.word	0x5802541c
 8003ea8:	58025430 	.word	0x58025430
 8003eac:	58025444 	.word	0x58025444
 8003eb0:	58025458 	.word	0x58025458
 8003eb4:	5802546c 	.word	0x5802546c
 8003eb8:	58025480 	.word	0x58025480
 8003ebc:	58025494 	.word	0x58025494

08003ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e205      	b.n	80042de <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d004      	beq.n	8003ee8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2280      	movs	r2, #128	; 0x80
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e1fa      	b.n	80042de <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a8c      	ldr	r2, [pc, #560]	; (8004120 <HAL_DMA_Abort_IT+0x260>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d04a      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a8b      	ldr	r2, [pc, #556]	; (8004124 <HAL_DMA_Abort_IT+0x264>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d045      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a89      	ldr	r2, [pc, #548]	; (8004128 <HAL_DMA_Abort_IT+0x268>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d040      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a88      	ldr	r2, [pc, #544]	; (800412c <HAL_DMA_Abort_IT+0x26c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d03b      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a86      	ldr	r2, [pc, #536]	; (8004130 <HAL_DMA_Abort_IT+0x270>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d036      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a85      	ldr	r2, [pc, #532]	; (8004134 <HAL_DMA_Abort_IT+0x274>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d031      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a83      	ldr	r2, [pc, #524]	; (8004138 <HAL_DMA_Abort_IT+0x278>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d02c      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a82      	ldr	r2, [pc, #520]	; (800413c <HAL_DMA_Abort_IT+0x27c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d027      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a80      	ldr	r2, [pc, #512]	; (8004140 <HAL_DMA_Abort_IT+0x280>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d022      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a7f      	ldr	r2, [pc, #508]	; (8004144 <HAL_DMA_Abort_IT+0x284>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01d      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a7d      	ldr	r2, [pc, #500]	; (8004148 <HAL_DMA_Abort_IT+0x288>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	; (800414c <HAL_DMA_Abort_IT+0x28c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a7a      	ldr	r2, [pc, #488]	; (8004150 <HAL_DMA_Abort_IT+0x290>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a79      	ldr	r2, [pc, #484]	; (8004154 <HAL_DMA_Abort_IT+0x294>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a77      	ldr	r2, [pc, #476]	; (8004158 <HAL_DMA_Abort_IT+0x298>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xc8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a76      	ldr	r2, [pc, #472]	; (800415c <HAL_DMA_Abort_IT+0x29c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <HAL_DMA_Abort_IT+0xcc>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_DMA_Abort_IT+0xce>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d065      	beq.n	800405e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a60      	ldr	r2, [pc, #384]	; (8004120 <HAL_DMA_Abort_IT+0x260>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d04a      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a5e      	ldr	r2, [pc, #376]	; (8004124 <HAL_DMA_Abort_IT+0x264>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d045      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a5d      	ldr	r2, [pc, #372]	; (8004128 <HAL_DMA_Abort_IT+0x268>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d040      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5b      	ldr	r2, [pc, #364]	; (800412c <HAL_DMA_Abort_IT+0x26c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d03b      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5a      	ldr	r2, [pc, #360]	; (8004130 <HAL_DMA_Abort_IT+0x270>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d036      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_DMA_Abort_IT+0x274>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d031      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a57      	ldr	r2, [pc, #348]	; (8004138 <HAL_DMA_Abort_IT+0x278>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d02c      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a55      	ldr	r2, [pc, #340]	; (800413c <HAL_DMA_Abort_IT+0x27c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d027      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a54      	ldr	r2, [pc, #336]	; (8004140 <HAL_DMA_Abort_IT+0x280>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	; (8004144 <HAL_DMA_Abort_IT+0x284>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01d      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a51      	ldr	r2, [pc, #324]	; (8004148 <HAL_DMA_Abort_IT+0x288>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a4f      	ldr	r2, [pc, #316]	; (800414c <HAL_DMA_Abort_IT+0x28c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a4e      	ldr	r2, [pc, #312]	; (8004150 <HAL_DMA_Abort_IT+0x290>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a4c      	ldr	r2, [pc, #304]	; (8004154 <HAL_DMA_Abort_IT+0x294>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a4b      	ldr	r2, [pc, #300]	; (8004158 <HAL_DMA_Abort_IT+0x298>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_DMA_Abort_IT+0x17a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a49      	ldr	r2, [pc, #292]	; (800415c <HAL_DMA_Abort_IT+0x29c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <HAL_DMA_Abort_IT+0x18c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e147      	b.n	80042dc <HAL_DMA_Abort_IT+0x41c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e13e      	b.n	80042dc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 020e 	bic.w	r2, r2, #14
 800406c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2b      	ldr	r2, [pc, #172]	; (8004120 <HAL_DMA_Abort_IT+0x260>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d04a      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a29      	ldr	r2, [pc, #164]	; (8004124 <HAL_DMA_Abort_IT+0x264>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d045      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a28      	ldr	r2, [pc, #160]	; (8004128 <HAL_DMA_Abort_IT+0x268>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d040      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <HAL_DMA_Abort_IT+0x26c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d03b      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a25      	ldr	r2, [pc, #148]	; (8004130 <HAL_DMA_Abort_IT+0x270>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d036      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a23      	ldr	r2, [pc, #140]	; (8004134 <HAL_DMA_Abort_IT+0x274>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d031      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a22      	ldr	r2, [pc, #136]	; (8004138 <HAL_DMA_Abort_IT+0x278>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d02c      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <HAL_DMA_Abort_IT+0x27c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d027      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1f      	ldr	r2, [pc, #124]	; (8004140 <HAL_DMA_Abort_IT+0x280>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d022      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <HAL_DMA_Abort_IT+0x284>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01d      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <HAL_DMA_Abort_IT+0x288>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_DMA_Abort_IT+0x28c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a19      	ldr	r2, [pc, #100]	; (8004150 <HAL_DMA_Abort_IT+0x290>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <HAL_DMA_Abort_IT+0x294>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a16      	ldr	r2, [pc, #88]	; (8004158 <HAL_DMA_Abort_IT+0x298>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_DMA_Abort_IT+0x24e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <HAL_DMA_Abort_IT+0x29c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d128      	bne.n	8004160 <HAL_DMA_Abort_IT+0x2a0>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e027      	b.n	8004170 <HAL_DMA_Abort_IT+0x2b0>
 8004120:	40020010 	.word	0x40020010
 8004124:	40020028 	.word	0x40020028
 8004128:	40020040 	.word	0x40020040
 800412c:	40020058 	.word	0x40020058
 8004130:	40020070 	.word	0x40020070
 8004134:	40020088 	.word	0x40020088
 8004138:	400200a0 	.word	0x400200a0
 800413c:	400200b8 	.word	0x400200b8
 8004140:	40020410 	.word	0x40020410
 8004144:	40020428 	.word	0x40020428
 8004148:	40020440 	.word	0x40020440
 800414c:	40020458 	.word	0x40020458
 8004150:	40020470 	.word	0x40020470
 8004154:	40020488 	.word	0x40020488
 8004158:	400204a0 	.word	0x400204a0
 800415c:	400204b8 	.word	0x400204b8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5c      	ldr	r2, [pc, #368]	; (80042e8 <HAL_DMA_Abort_IT+0x428>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d072      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5b      	ldr	r2, [pc, #364]	; (80042ec <HAL_DMA_Abort_IT+0x42c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d06d      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a59      	ldr	r2, [pc, #356]	; (80042f0 <HAL_DMA_Abort_IT+0x430>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d068      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a58      	ldr	r2, [pc, #352]	; (80042f4 <HAL_DMA_Abort_IT+0x434>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d063      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a56      	ldr	r2, [pc, #344]	; (80042f8 <HAL_DMA_Abort_IT+0x438>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d05e      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a55      	ldr	r2, [pc, #340]	; (80042fc <HAL_DMA_Abort_IT+0x43c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d059      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a53      	ldr	r2, [pc, #332]	; (8004300 <HAL_DMA_Abort_IT+0x440>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d054      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a52      	ldr	r2, [pc, #328]	; (8004304 <HAL_DMA_Abort_IT+0x444>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d04f      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a50      	ldr	r2, [pc, #320]	; (8004308 <HAL_DMA_Abort_IT+0x448>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d04a      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4f      	ldr	r2, [pc, #316]	; (800430c <HAL_DMA_Abort_IT+0x44c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d045      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a4d      	ldr	r2, [pc, #308]	; (8004310 <HAL_DMA_Abort_IT+0x450>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d040      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a4c      	ldr	r2, [pc, #304]	; (8004314 <HAL_DMA_Abort_IT+0x454>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d03b      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a4a      	ldr	r2, [pc, #296]	; (8004318 <HAL_DMA_Abort_IT+0x458>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d036      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a49      	ldr	r2, [pc, #292]	; (800431c <HAL_DMA_Abort_IT+0x45c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d031      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a47      	ldr	r2, [pc, #284]	; (8004320 <HAL_DMA_Abort_IT+0x460>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d02c      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a46      	ldr	r2, [pc, #280]	; (8004324 <HAL_DMA_Abort_IT+0x464>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d027      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a44      	ldr	r2, [pc, #272]	; (8004328 <HAL_DMA_Abort_IT+0x468>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d022      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a43      	ldr	r2, [pc, #268]	; (800432c <HAL_DMA_Abort_IT+0x46c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d01d      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a41      	ldr	r2, [pc, #260]	; (8004330 <HAL_DMA_Abort_IT+0x470>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d018      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a40      	ldr	r2, [pc, #256]	; (8004334 <HAL_DMA_Abort_IT+0x474>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3e      	ldr	r2, [pc, #248]	; (8004338 <HAL_DMA_Abort_IT+0x478>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00e      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3d      	ldr	r2, [pc, #244]	; (800433c <HAL_DMA_Abort_IT+0x47c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3b      	ldr	r2, [pc, #236]	; (8004340 <HAL_DMA_Abort_IT+0x480>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_DMA_Abort_IT+0x3a0>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3a      	ldr	r2, [pc, #232]	; (8004344 <HAL_DMA_Abort_IT+0x484>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_DMA_Abort_IT+0x3a4>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_DMA_Abort_IT+0x3a6>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d028      	beq.n	80042bc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004278:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2201      	movs	r2, #1
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004298:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00c      	beq.n	80042bc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40020010 	.word	0x40020010
 80042ec:	40020028 	.word	0x40020028
 80042f0:	40020040 	.word	0x40020040
 80042f4:	40020058 	.word	0x40020058
 80042f8:	40020070 	.word	0x40020070
 80042fc:	40020088 	.word	0x40020088
 8004300:	400200a0 	.word	0x400200a0
 8004304:	400200b8 	.word	0x400200b8
 8004308:	40020410 	.word	0x40020410
 800430c:	40020428 	.word	0x40020428
 8004310:	40020440 	.word	0x40020440
 8004314:	40020458 	.word	0x40020458
 8004318:	40020470 	.word	0x40020470
 800431c:	40020488 	.word	0x40020488
 8004320:	400204a0 	.word	0x400204a0
 8004324:	400204b8 	.word	0x400204b8
 8004328:	58025408 	.word	0x58025408
 800432c:	5802541c 	.word	0x5802541c
 8004330:	58025430 	.word	0x58025430
 8004334:	58025444 	.word	0x58025444
 8004338:	58025458 	.word	0x58025458
 800433c:	5802546c 	.word	0x5802546c
 8004340:	58025480 	.word	0x58025480
 8004344:	58025494 	.word	0x58025494

08004348 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004354:	4b67      	ldr	r3, [pc, #412]	; (80044f4 <HAL_DMA_IRQHandler+0x1ac>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a67      	ldr	r2, [pc, #412]	; (80044f8 <HAL_DMA_IRQHandler+0x1b0>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	0a9b      	lsrs	r3, r3, #10
 8004360:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5f      	ldr	r2, [pc, #380]	; (80044fc <HAL_DMA_IRQHandler+0x1b4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d04a      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a5d      	ldr	r2, [pc, #372]	; (8004500 <HAL_DMA_IRQHandler+0x1b8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d045      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a5c      	ldr	r2, [pc, #368]	; (8004504 <HAL_DMA_IRQHandler+0x1bc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d040      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a5a      	ldr	r2, [pc, #360]	; (8004508 <HAL_DMA_IRQHandler+0x1c0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d03b      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a59      	ldr	r2, [pc, #356]	; (800450c <HAL_DMA_IRQHandler+0x1c4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d036      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a57      	ldr	r2, [pc, #348]	; (8004510 <HAL_DMA_IRQHandler+0x1c8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d031      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a56      	ldr	r2, [pc, #344]	; (8004514 <HAL_DMA_IRQHandler+0x1cc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d02c      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a54      	ldr	r2, [pc, #336]	; (8004518 <HAL_DMA_IRQHandler+0x1d0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d027      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a53      	ldr	r2, [pc, #332]	; (800451c <HAL_DMA_IRQHandler+0x1d4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a51      	ldr	r2, [pc, #324]	; (8004520 <HAL_DMA_IRQHandler+0x1d8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01d      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a50      	ldr	r2, [pc, #320]	; (8004524 <HAL_DMA_IRQHandler+0x1dc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a4e      	ldr	r2, [pc, #312]	; (8004528 <HAL_DMA_IRQHandler+0x1e0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a4d      	ldr	r2, [pc, #308]	; (800452c <HAL_DMA_IRQHandler+0x1e4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a4b      	ldr	r2, [pc, #300]	; (8004530 <HAL_DMA_IRQHandler+0x1e8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a4a      	ldr	r2, [pc, #296]	; (8004534 <HAL_DMA_IRQHandler+0x1ec>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_DMA_IRQHandler+0xd2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a48      	ldr	r2, [pc, #288]	; (8004538 <HAL_DMA_IRQHandler+0x1f0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <HAL_DMA_IRQHandler+0xd6>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_DMA_IRQHandler+0xd8>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 842b 	beq.w	8004c7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2208      	movs	r2, #8
 8004430:	409a      	lsls	r2, r3
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80a2 	beq.w	8004580 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2e      	ldr	r2, [pc, #184]	; (80044fc <HAL_DMA_IRQHandler+0x1b4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d04a      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <HAL_DMA_IRQHandler+0x1b8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d045      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a2b      	ldr	r2, [pc, #172]	; (8004504 <HAL_DMA_IRQHandler+0x1bc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d040      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2a      	ldr	r2, [pc, #168]	; (8004508 <HAL_DMA_IRQHandler+0x1c0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d03b      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a28      	ldr	r2, [pc, #160]	; (800450c <HAL_DMA_IRQHandler+0x1c4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d036      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a27      	ldr	r2, [pc, #156]	; (8004510 <HAL_DMA_IRQHandler+0x1c8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d031      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a25      	ldr	r2, [pc, #148]	; (8004514 <HAL_DMA_IRQHandler+0x1cc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d02c      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a24      	ldr	r2, [pc, #144]	; (8004518 <HAL_DMA_IRQHandler+0x1d0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d027      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <HAL_DMA_IRQHandler+0x1d4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a21      	ldr	r2, [pc, #132]	; (8004520 <HAL_DMA_IRQHandler+0x1d8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d01d      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HAL_DMA_IRQHandler+0x1dc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_DMA_IRQHandler+0x1e0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_DMA_IRQHandler+0x1e4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_DMA_IRQHandler+0x1e8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a19      	ldr	r2, [pc, #100]	; (8004534 <HAL_DMA_IRQHandler+0x1ec>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_DMA_IRQHandler+0x194>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a18      	ldr	r2, [pc, #96]	; (8004538 <HAL_DMA_IRQHandler+0x1f0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d12f      	bne.n	800453c <HAL_DMA_IRQHandler+0x1f4>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf14      	ite	ne
 80044ea:	2301      	movne	r3, #1
 80044ec:	2300      	moveq	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	e02e      	b.n	8004550 <HAL_DMA_IRQHandler+0x208>
 80044f2:	bf00      	nop
 80044f4:	24000018 	.word	0x24000018
 80044f8:	1b4e81b5 	.word	0x1b4e81b5
 80044fc:	40020010 	.word	0x40020010
 8004500:	40020028 	.word	0x40020028
 8004504:	40020040 	.word	0x40020040
 8004508:	40020058 	.word	0x40020058
 800450c:	40020070 	.word	0x40020070
 8004510:	40020088 	.word	0x40020088
 8004514:	400200a0 	.word	0x400200a0
 8004518:	400200b8 	.word	0x400200b8
 800451c:	40020410 	.word	0x40020410
 8004520:	40020428 	.word	0x40020428
 8004524:	40020440 	.word	0x40020440
 8004528:	40020458 	.word	0x40020458
 800452c:	40020470 	.word	0x40020470
 8004530:	40020488 	.word	0x40020488
 8004534:	400204a0 	.word	0x400204a0
 8004538:	400204b8 	.word	0x400204b8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0204 	bic.w	r2, r2, #4
 8004562:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2208      	movs	r2, #8
 800456e:	409a      	lsls	r2, r3
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d06e      	beq.n	8004674 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a69      	ldr	r2, [pc, #420]	; (8004740 <HAL_DMA_IRQHandler+0x3f8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d04a      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a67      	ldr	r2, [pc, #412]	; (8004744 <HAL_DMA_IRQHandler+0x3fc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d045      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a66      	ldr	r2, [pc, #408]	; (8004748 <HAL_DMA_IRQHandler+0x400>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d040      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a64      	ldr	r2, [pc, #400]	; (800474c <HAL_DMA_IRQHandler+0x404>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d03b      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a63      	ldr	r2, [pc, #396]	; (8004750 <HAL_DMA_IRQHandler+0x408>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d036      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a61      	ldr	r2, [pc, #388]	; (8004754 <HAL_DMA_IRQHandler+0x40c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d031      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a60      	ldr	r2, [pc, #384]	; (8004758 <HAL_DMA_IRQHandler+0x410>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d02c      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a5e      	ldr	r2, [pc, #376]	; (800475c <HAL_DMA_IRQHandler+0x414>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d027      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a5d      	ldr	r2, [pc, #372]	; (8004760 <HAL_DMA_IRQHandler+0x418>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5b      	ldr	r2, [pc, #364]	; (8004764 <HAL_DMA_IRQHandler+0x41c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01d      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a5a      	ldr	r2, [pc, #360]	; (8004768 <HAL_DMA_IRQHandler+0x420>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a58      	ldr	r2, [pc, #352]	; (800476c <HAL_DMA_IRQHandler+0x424>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a57      	ldr	r2, [pc, #348]	; (8004770 <HAL_DMA_IRQHandler+0x428>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a55      	ldr	r2, [pc, #340]	; (8004774 <HAL_DMA_IRQHandler+0x42c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a54      	ldr	r2, [pc, #336]	; (8004778 <HAL_DMA_IRQHandler+0x430>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2ee>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a52      	ldr	r2, [pc, #328]	; (800477c <HAL_DMA_IRQHandler+0x434>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10a      	bne.n	800464c <HAL_DMA_IRQHandler+0x304>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e003      	b.n	8004654 <HAL_DMA_IRQHandler+0x30c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	2201      	movs	r2, #1
 8004662:	409a      	lsls	r2, r3
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	f043 0202 	orr.w	r2, r3, #2
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2204      	movs	r2, #4
 800467e:	409a      	lsls	r2, r3
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 808f 	beq.w	80047a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <HAL_DMA_IRQHandler+0x3f8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d04a      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <HAL_DMA_IRQHandler+0x3fc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d045      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a29      	ldr	r2, [pc, #164]	; (8004748 <HAL_DMA_IRQHandler+0x400>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d040      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a27      	ldr	r2, [pc, #156]	; (800474c <HAL_DMA_IRQHandler+0x404>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d03b      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a26      	ldr	r2, [pc, #152]	; (8004750 <HAL_DMA_IRQHandler+0x408>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d036      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a24      	ldr	r2, [pc, #144]	; (8004754 <HAL_DMA_IRQHandler+0x40c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d031      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a23      	ldr	r2, [pc, #140]	; (8004758 <HAL_DMA_IRQHandler+0x410>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d02c      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a21      	ldr	r2, [pc, #132]	; (800475c <HAL_DMA_IRQHandler+0x414>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d027      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_DMA_IRQHandler+0x418>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_DMA_IRQHandler+0x41c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_DMA_IRQHandler+0x420>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_DMA_IRQHandler+0x424>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <HAL_DMA_IRQHandler+0x428>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a18      	ldr	r2, [pc, #96]	; (8004774 <HAL_DMA_IRQHandler+0x42c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <HAL_DMA_IRQHandler+0x430>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_DMA_IRQHandler+0x3e2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <HAL_DMA_IRQHandler+0x434>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d12a      	bne.n	8004780 <HAL_DMA_IRQHandler+0x438>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e023      	b.n	8004788 <HAL_DMA_IRQHandler+0x440>
 8004740:	40020010 	.word	0x40020010
 8004744:	40020028 	.word	0x40020028
 8004748:	40020040 	.word	0x40020040
 800474c:	40020058 	.word	0x40020058
 8004750:	40020070 	.word	0x40020070
 8004754:	40020088 	.word	0x40020088
 8004758:	400200a0 	.word	0x400200a0
 800475c:	400200b8 	.word	0x400200b8
 8004760:	40020410 	.word	0x40020410
 8004764:	40020428 	.word	0x40020428
 8004768:	40020440 	.word	0x40020440
 800476c:	40020458 	.word	0x40020458
 8004770:	40020470 	.word	0x40020470
 8004774:	40020488 	.word	0x40020488
 8004778:	400204a0 	.word	0x400204a0
 800477c:	400204b8 	.word	0x400204b8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00d      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2204      	movs	r2, #4
 8004796:	409a      	lsls	r2, r3
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f043 0204 	orr.w	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2210      	movs	r2, #16
 80047b2:	409a      	lsls	r2, r3
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80a6 	beq.w	800490a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a85      	ldr	r2, [pc, #532]	; (80049d8 <HAL_DMA_IRQHandler+0x690>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d04a      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a83      	ldr	r2, [pc, #524]	; (80049dc <HAL_DMA_IRQHandler+0x694>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d045      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a82      	ldr	r2, [pc, #520]	; (80049e0 <HAL_DMA_IRQHandler+0x698>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d040      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a80      	ldr	r2, [pc, #512]	; (80049e4 <HAL_DMA_IRQHandler+0x69c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d03b      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7f      	ldr	r2, [pc, #508]	; (80049e8 <HAL_DMA_IRQHandler+0x6a0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d036      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a7d      	ldr	r2, [pc, #500]	; (80049ec <HAL_DMA_IRQHandler+0x6a4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a7c      	ldr	r2, [pc, #496]	; (80049f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02c      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7a      	ldr	r2, [pc, #488]	; (80049f4 <HAL_DMA_IRQHandler+0x6ac>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d027      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a79      	ldr	r2, [pc, #484]	; (80049f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a77      	ldr	r2, [pc, #476]	; (80049fc <HAL_DMA_IRQHandler+0x6b4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a76      	ldr	r2, [pc, #472]	; (8004a00 <HAL_DMA_IRQHandler+0x6b8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a74      	ldr	r2, [pc, #464]	; (8004a04 <HAL_DMA_IRQHandler+0x6bc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a73      	ldr	r2, [pc, #460]	; (8004a08 <HAL_DMA_IRQHandler+0x6c0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a71      	ldr	r2, [pc, #452]	; (8004a0c <HAL_DMA_IRQHandler+0x6c4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a70      	ldr	r2, [pc, #448]	; (8004a10 <HAL_DMA_IRQHandler+0x6c8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_DMA_IRQHandler+0x516>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_DMA_IRQHandler+0x6cc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10a      	bne.n	8004874 <HAL_DMA_IRQHandler+0x52c>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e009      	b.n	8004888 <HAL_DMA_IRQHandler+0x540>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03e      	beq.n	800490a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2210      	movs	r2, #16
 8004896:	409a      	lsls	r2, r3
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d108      	bne.n	80048ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d024      	beq.n	800490a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
 80048c8:	e01f      	b.n	800490a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
 80048da:	e016      	b.n	800490a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d107      	bne.n	80048fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0208 	bic.w	r2, r2, #8
 80048f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490e:	f003 031f 	and.w	r3, r3, #31
 8004912:	2220      	movs	r2, #32
 8004914:	409a      	lsls	r2, r3
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8110 	beq.w	8004b40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <HAL_DMA_IRQHandler+0x690>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d04a      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2b      	ldr	r2, [pc, #172]	; (80049dc <HAL_DMA_IRQHandler+0x694>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d045      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_DMA_IRQHandler+0x698>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d040      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <HAL_DMA_IRQHandler+0x69c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d03b      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <HAL_DMA_IRQHandler+0x6a0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d036      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a25      	ldr	r2, [pc, #148]	; (80049ec <HAL_DMA_IRQHandler+0x6a4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d031      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d02c      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <HAL_DMA_IRQHandler+0x6ac>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d027      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d022      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <HAL_DMA_IRQHandler+0x6b4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d01d      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <HAL_DMA_IRQHandler+0x6b8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d018      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <HAL_DMA_IRQHandler+0x6bc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1a      	ldr	r2, [pc, #104]	; (8004a08 <HAL_DMA_IRQHandler+0x6c0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00e      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <HAL_DMA_IRQHandler+0x6c4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d009      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <HAL_DMA_IRQHandler+0x6c8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x678>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a16      	ldr	r2, [pc, #88]	; (8004a14 <HAL_DMA_IRQHandler+0x6cc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d12b      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x6d0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e02a      	b.n	8004a2c <HAL_DMA_IRQHandler+0x6e4>
 80049d6:	bf00      	nop
 80049d8:	40020010 	.word	0x40020010
 80049dc:	40020028 	.word	0x40020028
 80049e0:	40020040 	.word	0x40020040
 80049e4:	40020058 	.word	0x40020058
 80049e8:	40020070 	.word	0x40020070
 80049ec:	40020088 	.word	0x40020088
 80049f0:	400200a0 	.word	0x400200a0
 80049f4:	400200b8 	.word	0x400200b8
 80049f8:	40020410 	.word	0x40020410
 80049fc:	40020428 	.word	0x40020428
 8004a00:	40020440 	.word	0x40020440
 8004a04:	40020458 	.word	0x40020458
 8004a08:	40020470 	.word	0x40020470
 8004a0c:	40020488 	.word	0x40020488
 8004a10:	400204a0 	.word	0x400204a0
 8004a14:	400204b8 	.word	0x400204b8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bf14      	ite	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	2300      	moveq	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8087 	beq.w	8004b40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d139      	bne.n	8004ac2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0216 	bic.w	r2, r2, #22
 8004a5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695a      	ldr	r2, [r3, #20]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <HAL_DMA_IRQHandler+0x736>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0208 	bic.w	r2, r2, #8
 8004a8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	223f      	movs	r2, #63	; 0x3f
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 834a 	beq.w	800514c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
          }
          return;
 8004ac0:	e344      	b.n	800514c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d018      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d108      	bne.n	8004af0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02c      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
 8004aee:	e027      	b.n	8004b40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d023      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
 8004b00:	e01e      	b.n	8004b40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10f      	bne.n	8004b30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0210 	bic.w	r2, r2, #16
 8004b1e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8306 	beq.w	8005156 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 8088 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a7a      	ldr	r2, [pc, #488]	; (8004d50 <HAL_DMA_IRQHandler+0xa08>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d04a      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a79      	ldr	r2, [pc, #484]	; (8004d54 <HAL_DMA_IRQHandler+0xa0c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d045      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a77      	ldr	r2, [pc, #476]	; (8004d58 <HAL_DMA_IRQHandler+0xa10>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d040      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a76      	ldr	r2, [pc, #472]	; (8004d5c <HAL_DMA_IRQHandler+0xa14>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d03b      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a74      	ldr	r2, [pc, #464]	; (8004d60 <HAL_DMA_IRQHandler+0xa18>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d036      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a73      	ldr	r2, [pc, #460]	; (8004d64 <HAL_DMA_IRQHandler+0xa1c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d031      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a71      	ldr	r2, [pc, #452]	; (8004d68 <HAL_DMA_IRQHandler+0xa20>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d02c      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a70      	ldr	r2, [pc, #448]	; (8004d6c <HAL_DMA_IRQHandler+0xa24>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d027      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a6e      	ldr	r2, [pc, #440]	; (8004d70 <HAL_DMA_IRQHandler+0xa28>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d022      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6d      	ldr	r2, [pc, #436]	; (8004d74 <HAL_DMA_IRQHandler+0xa2c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d01d      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a6b      	ldr	r2, [pc, #428]	; (8004d78 <HAL_DMA_IRQHandler+0xa30>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d018      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a6a      	ldr	r2, [pc, #424]	; (8004d7c <HAL_DMA_IRQHandler+0xa34>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a68      	ldr	r2, [pc, #416]	; (8004d80 <HAL_DMA_IRQHandler+0xa38>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00e      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a67      	ldr	r2, [pc, #412]	; (8004d84 <HAL_DMA_IRQHandler+0xa3c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a65      	ldr	r2, [pc, #404]	; (8004d88 <HAL_DMA_IRQHandler+0xa40>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x8b8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a64      	ldr	r2, [pc, #400]	; (8004d8c <HAL_DMA_IRQHandler+0xa44>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d108      	bne.n	8004c12 <HAL_DMA_IRQHandler+0x8ca>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e007      	b.n	8004c22 <HAL_DMA_IRQHandler+0x8da>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d307      	bcc.n	8004c3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f2      	bne.n	8004c22 <HAL_DMA_IRQHandler+0x8da>
 8004c3c:	e000      	b.n	8004c40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c3e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c5e:	e003      	b.n	8004c68 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8272 	beq.w	8005156 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
 8004c7a:	e26c      	b.n	8005156 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a43      	ldr	r2, [pc, #268]	; (8004d90 <HAL_DMA_IRQHandler+0xa48>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d022      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x984>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a42      	ldr	r2, [pc, #264]	; (8004d94 <HAL_DMA_IRQHandler+0xa4c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d01d      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x984>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a40      	ldr	r2, [pc, #256]	; (8004d98 <HAL_DMA_IRQHandler+0xa50>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x984>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a3f      	ldr	r2, [pc, #252]	; (8004d9c <HAL_DMA_IRQHandler+0xa54>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x984>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3d      	ldr	r2, [pc, #244]	; (8004da0 <HAL_DMA_IRQHandler+0xa58>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x984>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3c      	ldr	r2, [pc, #240]	; (8004da4 <HAL_DMA_IRQHandler+0xa5c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x984>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3a      	ldr	r2, [pc, #232]	; (8004da8 <HAL_DMA_IRQHandler+0xa60>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x984>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a39      	ldr	r2, [pc, #228]	; (8004dac <HAL_DMA_IRQHandler+0xa64>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0x988>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_DMA_IRQHandler+0x98a>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 823f 	beq.w	8005156 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2204      	movs	r2, #4
 8004cea:	409a      	lsls	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80cd 	beq.w	8004e90 <HAL_DMA_IRQHandler+0xb48>
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80c7 	beq.w	8004e90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d049      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8210 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d38:	e20a      	b.n	8005150 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8206 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d4c:	e200      	b.n	8005150 <HAL_DMA_IRQHandler+0xe08>
 8004d4e:	bf00      	nop
 8004d50:	40020010 	.word	0x40020010
 8004d54:	40020028 	.word	0x40020028
 8004d58:	40020040 	.word	0x40020040
 8004d5c:	40020058 	.word	0x40020058
 8004d60:	40020070 	.word	0x40020070
 8004d64:	40020088 	.word	0x40020088
 8004d68:	400200a0 	.word	0x400200a0
 8004d6c:	400200b8 	.word	0x400200b8
 8004d70:	40020410 	.word	0x40020410
 8004d74:	40020428 	.word	0x40020428
 8004d78:	40020440 	.word	0x40020440
 8004d7c:	40020458 	.word	0x40020458
 8004d80:	40020470 	.word	0x40020470
 8004d84:	40020488 	.word	0x40020488
 8004d88:	400204a0 	.word	0x400204a0
 8004d8c:	400204b8 	.word	0x400204b8
 8004d90:	58025408 	.word	0x58025408
 8004d94:	5802541c 	.word	0x5802541c
 8004d98:	58025430 	.word	0x58025430
 8004d9c:	58025444 	.word	0x58025444
 8004da0:	58025458 	.word	0x58025458
 8004da4:	5802546c 	.word	0x5802546c
 8004da8:	58025480 	.word	0x58025480
 8004dac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d160      	bne.n	8004e7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a8c      	ldr	r2, [pc, #560]	; (8004ff0 <HAL_DMA_IRQHandler+0xca8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d04a      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a8a      	ldr	r2, [pc, #552]	; (8004ff4 <HAL_DMA_IRQHandler+0xcac>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d045      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a89      	ldr	r2, [pc, #548]	; (8004ff8 <HAL_DMA_IRQHandler+0xcb0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d040      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a87      	ldr	r2, [pc, #540]	; (8004ffc <HAL_DMA_IRQHandler+0xcb4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d03b      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a86      	ldr	r2, [pc, #536]	; (8005000 <HAL_DMA_IRQHandler+0xcb8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d036      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a84      	ldr	r2, [pc, #528]	; (8005004 <HAL_DMA_IRQHandler+0xcbc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d031      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a83      	ldr	r2, [pc, #524]	; (8005008 <HAL_DMA_IRQHandler+0xcc0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d02c      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a81      	ldr	r2, [pc, #516]	; (800500c <HAL_DMA_IRQHandler+0xcc4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d027      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a80      	ldr	r2, [pc, #512]	; (8005010 <HAL_DMA_IRQHandler+0xcc8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d022      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a7e      	ldr	r2, [pc, #504]	; (8005014 <HAL_DMA_IRQHandler+0xccc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01d      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a7d      	ldr	r2, [pc, #500]	; (8005018 <HAL_DMA_IRQHandler+0xcd0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a7b      	ldr	r2, [pc, #492]	; (800501c <HAL_DMA_IRQHandler+0xcd4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a7a      	ldr	r2, [pc, #488]	; (8005020 <HAL_DMA_IRQHandler+0xcd8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a78      	ldr	r2, [pc, #480]	; (8005024 <HAL_DMA_IRQHandler+0xcdc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a77      	ldr	r2, [pc, #476]	; (8005028 <HAL_DMA_IRQHandler+0xce0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xb12>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a75      	ldr	r2, [pc, #468]	; (800502c <HAL_DMA_IRQHandler+0xce4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d108      	bne.n	8004e6c <HAL_DMA_IRQHandler+0xb24>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0208 	bic.w	r2, r2, #8
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e007      	b.n	8004e7c <HAL_DMA_IRQHandler+0xb34>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8165 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e8e:	e15f      	b.n	8005150 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2202      	movs	r2, #2
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80c5 	beq.w	8005030 <HAL_DMA_IRQHandler+0xce8>
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80bf 	beq.w	8005030 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2202      	movs	r2, #2
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d018      	beq.n	8004efe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 813a 	beq.w	8005154 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee8:	e134      	b.n	8005154 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8130 	beq.w	8005154 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004efc:	e12a      	b.n	8005154 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d168      	bne.n	8004fda <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <HAL_DMA_IRQHandler+0xca8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d04a      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a37      	ldr	r2, [pc, #220]	; (8004ff4 <HAL_DMA_IRQHandler+0xcac>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d045      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a35      	ldr	r2, [pc, #212]	; (8004ff8 <HAL_DMA_IRQHandler+0xcb0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d040      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a34      	ldr	r2, [pc, #208]	; (8004ffc <HAL_DMA_IRQHandler+0xcb4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d03b      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a32      	ldr	r2, [pc, #200]	; (8005000 <HAL_DMA_IRQHandler+0xcb8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d036      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a31      	ldr	r2, [pc, #196]	; (8005004 <HAL_DMA_IRQHandler+0xcbc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d031      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2f      	ldr	r2, [pc, #188]	; (8005008 <HAL_DMA_IRQHandler+0xcc0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02c      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2e      	ldr	r2, [pc, #184]	; (800500c <HAL_DMA_IRQHandler+0xcc4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d027      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2c      	ldr	r2, [pc, #176]	; (8005010 <HAL_DMA_IRQHandler+0xcc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2b      	ldr	r2, [pc, #172]	; (8005014 <HAL_DMA_IRQHandler+0xccc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a29      	ldr	r2, [pc, #164]	; (8005018 <HAL_DMA_IRQHandler+0xcd0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a28      	ldr	r2, [pc, #160]	; (800501c <HAL_DMA_IRQHandler+0xcd4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a26      	ldr	r2, [pc, #152]	; (8005020 <HAL_DMA_IRQHandler+0xcd8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a25      	ldr	r2, [pc, #148]	; (8005024 <HAL_DMA_IRQHandler+0xcdc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a23      	ldr	r2, [pc, #140]	; (8005028 <HAL_DMA_IRQHandler+0xce0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0xc60>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a22      	ldr	r2, [pc, #136]	; (800502c <HAL_DMA_IRQHandler+0xce4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d108      	bne.n	8004fba <HAL_DMA_IRQHandler+0xc72>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0214 	bic.w	r2, r2, #20
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e007      	b.n	8004fca <HAL_DMA_IRQHandler+0xc82>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 020a 	bic.w	r2, r2, #10
 8004fc8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80b8 	beq.w	8005154 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fec:	e0b2      	b.n	8005154 <HAL_DMA_IRQHandler+0xe0c>
 8004fee:	bf00      	nop
 8004ff0:	40020010 	.word	0x40020010
 8004ff4:	40020028 	.word	0x40020028
 8004ff8:	40020040 	.word	0x40020040
 8004ffc:	40020058 	.word	0x40020058
 8005000:	40020070 	.word	0x40020070
 8005004:	40020088 	.word	0x40020088
 8005008:	400200a0 	.word	0x400200a0
 800500c:	400200b8 	.word	0x400200b8
 8005010:	40020410 	.word	0x40020410
 8005014:	40020428 	.word	0x40020428
 8005018:	40020440 	.word	0x40020440
 800501c:	40020458 	.word	0x40020458
 8005020:	40020470 	.word	0x40020470
 8005024:	40020488 	.word	0x40020488
 8005028:	400204a0 	.word	0x400204a0
 800502c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	2208      	movs	r2, #8
 800503a:	409a      	lsls	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4013      	ands	r3, r2
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8088 	beq.w	8005156 <HAL_DMA_IRQHandler+0xe0e>
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8082 	beq.w	8005156 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a41      	ldr	r2, [pc, #260]	; (800515c <HAL_DMA_IRQHandler+0xe14>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d04a      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3f      	ldr	r2, [pc, #252]	; (8005160 <HAL_DMA_IRQHandler+0xe18>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d045      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3e      	ldr	r2, [pc, #248]	; (8005164 <HAL_DMA_IRQHandler+0xe1c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d040      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3c      	ldr	r2, [pc, #240]	; (8005168 <HAL_DMA_IRQHandler+0xe20>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d03b      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3b      	ldr	r2, [pc, #236]	; (800516c <HAL_DMA_IRQHandler+0xe24>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d036      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a39      	ldr	r2, [pc, #228]	; (8005170 <HAL_DMA_IRQHandler+0xe28>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d031      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a38      	ldr	r2, [pc, #224]	; (8005174 <HAL_DMA_IRQHandler+0xe2c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d02c      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a36      	ldr	r2, [pc, #216]	; (8005178 <HAL_DMA_IRQHandler+0xe30>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d027      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a35      	ldr	r2, [pc, #212]	; (800517c <HAL_DMA_IRQHandler+0xe34>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a33      	ldr	r2, [pc, #204]	; (8005180 <HAL_DMA_IRQHandler+0xe38>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d01d      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a32      	ldr	r2, [pc, #200]	; (8005184 <HAL_DMA_IRQHandler+0xe3c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a30      	ldr	r2, [pc, #192]	; (8005188 <HAL_DMA_IRQHandler+0xe40>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2f      	ldr	r2, [pc, #188]	; (800518c <HAL_DMA_IRQHandler+0xe44>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2d      	ldr	r2, [pc, #180]	; (8005190 <HAL_DMA_IRQHandler+0xe48>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <HAL_DMA_IRQHandler+0xe4c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xdaa>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <HAL_DMA_IRQHandler+0xe50>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <HAL_DMA_IRQHandler+0xdbc>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 021c 	bic.w	r2, r2, #28
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e007      	b.n	8005114 <HAL_DMA_IRQHandler+0xdcc>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 020e 	bic.w	r2, r2, #14
 8005112:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	2201      	movs	r2, #1
 800511e:	409a      	lsls	r2, r3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
 800514a:	e004      	b.n	8005156 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005154:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005156:	3728      	adds	r7, #40	; 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40020010 	.word	0x40020010
 8005160:	40020028 	.word	0x40020028
 8005164:	40020040 	.word	0x40020040
 8005168:	40020058 	.word	0x40020058
 800516c:	40020070 	.word	0x40020070
 8005170:	40020088 	.word	0x40020088
 8005174:	400200a0 	.word	0x400200a0
 8005178:	400200b8 	.word	0x400200b8
 800517c:	40020410 	.word	0x40020410
 8005180:	40020428 	.word	0x40020428
 8005184:	40020440 	.word	0x40020440
 8005188:	40020458 	.word	0x40020458
 800518c:	40020470 	.word	0x40020470
 8005190:	40020488 	.word	0x40020488
 8005194:	400204a0 	.word	0x400204a0
 8005198:	400204b8 	.word	0x400204b8

0800519c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a84      	ldr	r2, [pc, #528]	; (80053cc <DMA_SetConfig+0x230>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d072      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a82      	ldr	r2, [pc, #520]	; (80053d0 <DMA_SetConfig+0x234>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d06d      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a81      	ldr	r2, [pc, #516]	; (80053d4 <DMA_SetConfig+0x238>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d068      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a7f      	ldr	r2, [pc, #508]	; (80053d8 <DMA_SetConfig+0x23c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d063      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a7e      	ldr	r2, [pc, #504]	; (80053dc <DMA_SetConfig+0x240>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d05e      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a7c      	ldr	r2, [pc, #496]	; (80053e0 <DMA_SetConfig+0x244>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d059      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a7b      	ldr	r2, [pc, #492]	; (80053e4 <DMA_SetConfig+0x248>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d054      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a79      	ldr	r2, [pc, #484]	; (80053e8 <DMA_SetConfig+0x24c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d04f      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a78      	ldr	r2, [pc, #480]	; (80053ec <DMA_SetConfig+0x250>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d04a      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a76      	ldr	r2, [pc, #472]	; (80053f0 <DMA_SetConfig+0x254>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d045      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a75      	ldr	r2, [pc, #468]	; (80053f4 <DMA_SetConfig+0x258>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d040      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a73      	ldr	r2, [pc, #460]	; (80053f8 <DMA_SetConfig+0x25c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d03b      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a72      	ldr	r2, [pc, #456]	; (80053fc <DMA_SetConfig+0x260>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d036      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a70      	ldr	r2, [pc, #448]	; (8005400 <DMA_SetConfig+0x264>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d031      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a6f      	ldr	r2, [pc, #444]	; (8005404 <DMA_SetConfig+0x268>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d02c      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a6d      	ldr	r2, [pc, #436]	; (8005408 <DMA_SetConfig+0x26c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d027      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a6c      	ldr	r2, [pc, #432]	; (800540c <DMA_SetConfig+0x270>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d022      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a6a      	ldr	r2, [pc, #424]	; (8005410 <DMA_SetConfig+0x274>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01d      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a69      	ldr	r2, [pc, #420]	; (8005414 <DMA_SetConfig+0x278>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a67      	ldr	r2, [pc, #412]	; (8005418 <DMA_SetConfig+0x27c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a66      	ldr	r2, [pc, #408]	; (800541c <DMA_SetConfig+0x280>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a64      	ldr	r2, [pc, #400]	; (8005420 <DMA_SetConfig+0x284>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a63      	ldr	r2, [pc, #396]	; (8005424 <DMA_SetConfig+0x288>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <DMA_SetConfig+0x10a>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a61      	ldr	r2, [pc, #388]	; (8005428 <DMA_SetConfig+0x28c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <DMA_SetConfig+0x10e>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <DMA_SetConfig+0x110>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00d      	beq.n	80052cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a3e      	ldr	r2, [pc, #248]	; (80053cc <DMA_SetConfig+0x230>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d04a      	beq.n	800536c <DMA_SetConfig+0x1d0>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3d      	ldr	r2, [pc, #244]	; (80053d0 <DMA_SetConfig+0x234>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d045      	beq.n	800536c <DMA_SetConfig+0x1d0>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3b      	ldr	r2, [pc, #236]	; (80053d4 <DMA_SetConfig+0x238>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d040      	beq.n	800536c <DMA_SetConfig+0x1d0>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a3a      	ldr	r2, [pc, #232]	; (80053d8 <DMA_SetConfig+0x23c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d03b      	beq.n	800536c <DMA_SetConfig+0x1d0>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a38      	ldr	r2, [pc, #224]	; (80053dc <DMA_SetConfig+0x240>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d036      	beq.n	800536c <DMA_SetConfig+0x1d0>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <DMA_SetConfig+0x244>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d031      	beq.n	800536c <DMA_SetConfig+0x1d0>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a35      	ldr	r2, [pc, #212]	; (80053e4 <DMA_SetConfig+0x248>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d02c      	beq.n	800536c <DMA_SetConfig+0x1d0>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a34      	ldr	r2, [pc, #208]	; (80053e8 <DMA_SetConfig+0x24c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d027      	beq.n	800536c <DMA_SetConfig+0x1d0>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a32      	ldr	r2, [pc, #200]	; (80053ec <DMA_SetConfig+0x250>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d022      	beq.n	800536c <DMA_SetConfig+0x1d0>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a31      	ldr	r2, [pc, #196]	; (80053f0 <DMA_SetConfig+0x254>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d01d      	beq.n	800536c <DMA_SetConfig+0x1d0>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2f      	ldr	r2, [pc, #188]	; (80053f4 <DMA_SetConfig+0x258>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d018      	beq.n	800536c <DMA_SetConfig+0x1d0>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2e      	ldr	r2, [pc, #184]	; (80053f8 <DMA_SetConfig+0x25c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d013      	beq.n	800536c <DMA_SetConfig+0x1d0>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a2c      	ldr	r2, [pc, #176]	; (80053fc <DMA_SetConfig+0x260>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00e      	beq.n	800536c <DMA_SetConfig+0x1d0>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <DMA_SetConfig+0x264>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d009      	beq.n	800536c <DMA_SetConfig+0x1d0>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a29      	ldr	r2, [pc, #164]	; (8005404 <DMA_SetConfig+0x268>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <DMA_SetConfig+0x1d0>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a28      	ldr	r2, [pc, #160]	; (8005408 <DMA_SetConfig+0x26c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d101      	bne.n	8005370 <DMA_SetConfig+0x1d4>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <DMA_SetConfig+0x1d6>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d05a      	beq.n	800542c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	223f      	movs	r2, #63	; 0x3f
 8005380:	409a      	lsls	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005394:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b40      	cmp	r3, #64	; 0x40
 80053a4:	d108      	bne.n	80053b8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053b6:	e087      	b.n	80054c8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
}
 80053c8:	e07e      	b.n	80054c8 <DMA_SetConfig+0x32c>
 80053ca:	bf00      	nop
 80053cc:	40020010 	.word	0x40020010
 80053d0:	40020028 	.word	0x40020028
 80053d4:	40020040 	.word	0x40020040
 80053d8:	40020058 	.word	0x40020058
 80053dc:	40020070 	.word	0x40020070
 80053e0:	40020088 	.word	0x40020088
 80053e4:	400200a0 	.word	0x400200a0
 80053e8:	400200b8 	.word	0x400200b8
 80053ec:	40020410 	.word	0x40020410
 80053f0:	40020428 	.word	0x40020428
 80053f4:	40020440 	.word	0x40020440
 80053f8:	40020458 	.word	0x40020458
 80053fc:	40020470 	.word	0x40020470
 8005400:	40020488 	.word	0x40020488
 8005404:	400204a0 	.word	0x400204a0
 8005408:	400204b8 	.word	0x400204b8
 800540c:	58025408 	.word	0x58025408
 8005410:	5802541c 	.word	0x5802541c
 8005414:	58025430 	.word	0x58025430
 8005418:	58025444 	.word	0x58025444
 800541c:	58025458 	.word	0x58025458
 8005420:	5802546c 	.word	0x5802546c
 8005424:	58025480 	.word	0x58025480
 8005428:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a28      	ldr	r2, [pc, #160]	; (80054d4 <DMA_SetConfig+0x338>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d022      	beq.n	800547c <DMA_SetConfig+0x2e0>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a27      	ldr	r2, [pc, #156]	; (80054d8 <DMA_SetConfig+0x33c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01d      	beq.n	800547c <DMA_SetConfig+0x2e0>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a25      	ldr	r2, [pc, #148]	; (80054dc <DMA_SetConfig+0x340>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d018      	beq.n	800547c <DMA_SetConfig+0x2e0>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a24      	ldr	r2, [pc, #144]	; (80054e0 <DMA_SetConfig+0x344>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <DMA_SetConfig+0x2e0>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <DMA_SetConfig+0x348>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00e      	beq.n	800547c <DMA_SetConfig+0x2e0>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <DMA_SetConfig+0x34c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <DMA_SetConfig+0x2e0>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1f      	ldr	r2, [pc, #124]	; (80054ec <DMA_SetConfig+0x350>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <DMA_SetConfig+0x2e0>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <DMA_SetConfig+0x354>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d101      	bne.n	8005480 <DMA_SetConfig+0x2e4>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <DMA_SetConfig+0x2e6>
 8005480:	2300      	movs	r3, #0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d020      	beq.n	80054c8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2201      	movs	r2, #1
 8005490:	409a      	lsls	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d108      	bne.n	80054b8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	60da      	str	r2, [r3, #12]
}
 80054b6:	e007      	b.n	80054c8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	58025408 	.word	0x58025408
 80054d8:	5802541c 	.word	0x5802541c
 80054dc:	58025430 	.word	0x58025430
 80054e0:	58025444 	.word	0x58025444
 80054e4:	58025458 	.word	0x58025458
 80054e8:	5802546c 	.word	0x5802546c
 80054ec:	58025480 	.word	0x58025480
 80054f0:	58025494 	.word	0x58025494

080054f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a42      	ldr	r2, [pc, #264]	; (800560c <DMA_CalcBaseAndBitshift+0x118>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d04a      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a41      	ldr	r2, [pc, #260]	; (8005610 <DMA_CalcBaseAndBitshift+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d045      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3f      	ldr	r2, [pc, #252]	; (8005614 <DMA_CalcBaseAndBitshift+0x120>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d040      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a3e      	ldr	r2, [pc, #248]	; (8005618 <DMA_CalcBaseAndBitshift+0x124>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d03b      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a3c      	ldr	r2, [pc, #240]	; (800561c <DMA_CalcBaseAndBitshift+0x128>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d036      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <DMA_CalcBaseAndBitshift+0x12c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d031      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a39      	ldr	r2, [pc, #228]	; (8005624 <DMA_CalcBaseAndBitshift+0x130>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d02c      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a38      	ldr	r2, [pc, #224]	; (8005628 <DMA_CalcBaseAndBitshift+0x134>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d027      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a36      	ldr	r2, [pc, #216]	; (800562c <DMA_CalcBaseAndBitshift+0x138>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d022      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a35      	ldr	r2, [pc, #212]	; (8005630 <DMA_CalcBaseAndBitshift+0x13c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d01d      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a33      	ldr	r2, [pc, #204]	; (8005634 <DMA_CalcBaseAndBitshift+0x140>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d018      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a32      	ldr	r2, [pc, #200]	; (8005638 <DMA_CalcBaseAndBitshift+0x144>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a30      	ldr	r2, [pc, #192]	; (800563c <DMA_CalcBaseAndBitshift+0x148>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00e      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2f      	ldr	r2, [pc, #188]	; (8005640 <DMA_CalcBaseAndBitshift+0x14c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d009      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <DMA_CalcBaseAndBitshift+0x150>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <DMA_CalcBaseAndBitshift+0xa8>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <DMA_CalcBaseAndBitshift+0x154>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d101      	bne.n	80055a0 <DMA_CalcBaseAndBitshift+0xac>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <DMA_CalcBaseAndBitshift+0xae>
 80055a0:	2300      	movs	r3, #0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d024      	beq.n	80055f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	3b10      	subs	r3, #16
 80055ae:	4a27      	ldr	r2, [pc, #156]	; (800564c <DMA_CalcBaseAndBitshift+0x158>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	4a24      	ldr	r2, [pc, #144]	; (8005650 <DMA_CalcBaseAndBitshift+0x15c>)
 80055c0:	5cd3      	ldrb	r3, [r2, r3]
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d908      	bls.n	80055e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	4b1f      	ldr	r3, [pc, #124]	; (8005654 <DMA_CalcBaseAndBitshift+0x160>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	1d1a      	adds	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	659a      	str	r2, [r3, #88]	; 0x58
 80055de:	e00d      	b.n	80055fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <DMA_CalcBaseAndBitshift+0x160>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6593      	str	r3, [r2, #88]	; 0x58
 80055ee:	e005      	b.n	80055fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	40020010 	.word	0x40020010
 8005610:	40020028 	.word	0x40020028
 8005614:	40020040 	.word	0x40020040
 8005618:	40020058 	.word	0x40020058
 800561c:	40020070 	.word	0x40020070
 8005620:	40020088 	.word	0x40020088
 8005624:	400200a0 	.word	0x400200a0
 8005628:	400200b8 	.word	0x400200b8
 800562c:	40020410 	.word	0x40020410
 8005630:	40020428 	.word	0x40020428
 8005634:	40020440 	.word	0x40020440
 8005638:	40020458 	.word	0x40020458
 800563c:	40020470 	.word	0x40020470
 8005640:	40020488 	.word	0x40020488
 8005644:	400204a0 	.word	0x400204a0
 8005648:	400204b8 	.word	0x400204b8
 800564c:	aaaaaaab 	.word	0xaaaaaaab
 8005650:	0800c894 	.word	0x0800c894
 8005654:	fffffc00 	.word	0xfffffc00

08005658 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d120      	bne.n	80056ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	2b03      	cmp	r3, #3
 8005672:	d858      	bhi.n	8005726 <DMA_CheckFifoParam+0xce>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <DMA_CheckFifoParam+0x24>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	0800568d 	.word	0x0800568d
 8005680:	0800569f 	.word	0x0800569f
 8005684:	0800568d 	.word	0x0800568d
 8005688:	08005727 	.word	0x08005727
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d048      	beq.n	800572a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800569c:	e045      	b.n	800572a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056a6:	d142      	bne.n	800572e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056ac:	e03f      	b.n	800572e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b6:	d123      	bne.n	8005700 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d838      	bhi.n	8005732 <DMA_CheckFifoParam+0xda>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <DMA_CheckFifoParam+0x70>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	080056df 	.word	0x080056df
 80056d0:	080056d9 	.word	0x080056d9
 80056d4:	080056f1 	.word	0x080056f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
        break;
 80056dc:	e030      	b.n	8005740 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d025      	beq.n	8005736 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056ee:	e022      	b.n	8005736 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056f8:	d11f      	bne.n	800573a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056fe:	e01c      	b.n	800573a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	2b02      	cmp	r3, #2
 8005706:	d902      	bls.n	800570e <DMA_CheckFifoParam+0xb6>
 8005708:	2b03      	cmp	r3, #3
 800570a:	d003      	beq.n	8005714 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800570c:	e018      	b.n	8005740 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
        break;
 8005712:	e015      	b.n	8005740 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00e      	beq.n	800573e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
    break;
 8005724:	e00b      	b.n	800573e <DMA_CheckFifoParam+0xe6>
        break;
 8005726:	bf00      	nop
 8005728:	e00a      	b.n	8005740 <DMA_CheckFifoParam+0xe8>
        break;
 800572a:	bf00      	nop
 800572c:	e008      	b.n	8005740 <DMA_CheckFifoParam+0xe8>
        break;
 800572e:	bf00      	nop
 8005730:	e006      	b.n	8005740 <DMA_CheckFifoParam+0xe8>
        break;
 8005732:	bf00      	nop
 8005734:	e004      	b.n	8005740 <DMA_CheckFifoParam+0xe8>
        break;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <DMA_CheckFifoParam+0xe8>
        break;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <DMA_CheckFifoParam+0xe8>
    break;
 800573e:	bf00      	nop
    }
  }

  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop

08005750 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a38      	ldr	r2, [pc, #224]	; (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d022      	beq.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a36      	ldr	r2, [pc, #216]	; (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01d      	beq.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a35      	ldr	r2, [pc, #212]	; (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d018      	beq.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a33      	ldr	r2, [pc, #204]	; (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a32      	ldr	r2, [pc, #200]	; (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00e      	beq.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a30      	ldr	r2, [pc, #192]	; (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d009      	beq.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2f      	ldr	r2, [pc, #188]	; (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d101      	bne.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80057b2:	2300      	movs	r3, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01a      	beq.n	80057ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	3b08      	subs	r3, #8
 80057c0:	4a28      	ldr	r2, [pc, #160]	; (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4b26      	ldr	r3, [pc, #152]	; (8005868 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a24      	ldr	r2, [pc, #144]	; (800586c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	2201      	movs	r2, #1
 80057e6:	409a      	lsls	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057ec:	e024      	b.n	8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	3b10      	subs	r3, #16
 80057f6:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d806      	bhi.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d902      	bls.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3308      	adds	r3, #8
 8005814:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	461a      	mov	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a16      	ldr	r2, [pc, #88]	; (8005880 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005828:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2201      	movs	r2, #1
 8005832:	409a      	lsls	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	58025408 	.word	0x58025408
 8005848:	5802541c 	.word	0x5802541c
 800584c:	58025430 	.word	0x58025430
 8005850:	58025444 	.word	0x58025444
 8005854:	58025458 	.word	0x58025458
 8005858:	5802546c 	.word	0x5802546c
 800585c:	58025480 	.word	0x58025480
 8005860:	58025494 	.word	0x58025494
 8005864:	cccccccd 	.word	0xcccccccd
 8005868:	16009600 	.word	0x16009600
 800586c:	58025880 	.word	0x58025880
 8005870:	aaaaaaab 	.word	0xaaaaaaab
 8005874:	400204b8 	.word	0x400204b8
 8005878:	4002040f 	.word	0x4002040f
 800587c:	10008200 	.word	0x10008200
 8005880:	40020880 	.word	0x40020880

08005884 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d04a      	beq.n	8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d847      	bhi.n	8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d022      	beq.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a24      	ldr	r2, [pc, #144]	; (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d01d      	beq.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a22      	ldr	r2, [pc, #136]	; (8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a21      	ldr	r2, [pc, #132]	; (8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1f      	ldr	r2, [pc, #124]	; (800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1e      	ldr	r2, [pc, #120]	; (8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d101      	bne.n	80058f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4b17      	ldr	r3, [pc, #92]	; (800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	461a      	mov	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a15      	ldr	r2, [pc, #84]	; (8005960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800590c:	671a      	str	r2, [r3, #112]	; 0x70
 800590e:	e009      	b.n	8005924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4b14      	ldr	r3, [pc, #80]	; (8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	461a      	mov	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a11      	ldr	r2, [pc, #68]	; (8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005922:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3b01      	subs	r3, #1
 8005928:	2201      	movs	r2, #1
 800592a:	409a      	lsls	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	58025408 	.word	0x58025408
 8005940:	5802541c 	.word	0x5802541c
 8005944:	58025430 	.word	0x58025430
 8005948:	58025444 	.word	0x58025444
 800594c:	58025458 	.word	0x58025458
 8005950:	5802546c 	.word	0x5802546c
 8005954:	58025480 	.word	0x58025480
 8005958:	58025494 	.word	0x58025494
 800595c:	1600963f 	.word	0x1600963f
 8005960:	58025940 	.word	0x58025940
 8005964:	1000823f 	.word	0x1000823f
 8005968:	40020940 	.word	0x40020940

0800596c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800597a:	4b89      	ldr	r3, [pc, #548]	; (8005ba0 <HAL_GPIO_Init+0x234>)
 800597c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800597e:	e194      	b.n	8005caa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	2101      	movs	r1, #1
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8186 	beq.w	8005ca4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d00b      	beq.n	80059b8 <HAL_GPIO_Init+0x4c>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d007      	beq.n	80059b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059ac:	2b11      	cmp	r3, #17
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b12      	cmp	r3, #18
 80059b6:	d130      	bne.n	8005a1a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	2203      	movs	r2, #3
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4313      	orrs	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059ee:	2201      	movs	r2, #1
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	f003 0201 	and.w	r2, r3, #1
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	2203      	movs	r2, #3
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_Init+0xee>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b12      	cmp	r3, #18
 8005a58:	d123      	bne.n	8005aa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	08da      	lsrs	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3208      	adds	r2, #8
 8005a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	220f      	movs	r2, #15
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	08da      	lsrs	r2, r3, #3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3208      	adds	r2, #8
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	2203      	movs	r2, #3
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f003 0203 	and.w	r2, r3, #3
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80e0 	beq.w	8005ca4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae4:	4b2f      	ldr	r3, [pc, #188]	; (8005ba4 <HAL_GPIO_Init+0x238>)
 8005ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aea:	4a2e      	ldr	r2, [pc, #184]	; (8005ba4 <HAL_GPIO_Init+0x238>)
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005af4:	4b2b      	ldr	r3, [pc, #172]	; (8005ba4 <HAL_GPIO_Init+0x238>)
 8005af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b02:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_GPIO_Init+0x23c>)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	3302      	adds	r3, #2
 8005b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	220f      	movs	r2, #15
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4013      	ands	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a20      	ldr	r2, [pc, #128]	; (8005bac <HAL_GPIO_Init+0x240>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d052      	beq.n	8005bd4 <HAL_GPIO_Init+0x268>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <HAL_GPIO_Init+0x244>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d031      	beq.n	8005b9a <HAL_GPIO_Init+0x22e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_GPIO_Init+0x248>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d02b      	beq.n	8005b96 <HAL_GPIO_Init+0x22a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1d      	ldr	r2, [pc, #116]	; (8005bb8 <HAL_GPIO_Init+0x24c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d025      	beq.n	8005b92 <HAL_GPIO_Init+0x226>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <HAL_GPIO_Init+0x250>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01f      	beq.n	8005b8e <HAL_GPIO_Init+0x222>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <HAL_GPIO_Init+0x254>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d019      	beq.n	8005b8a <HAL_GPIO_Init+0x21e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1a      	ldr	r2, [pc, #104]	; (8005bc4 <HAL_GPIO_Init+0x258>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <HAL_GPIO_Init+0x21a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_GPIO_Init+0x25c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00d      	beq.n	8005b82 <HAL_GPIO_Init+0x216>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <HAL_GPIO_Init+0x260>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <HAL_GPIO_Init+0x212>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <HAL_GPIO_Init+0x264>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <HAL_GPIO_Init+0x20e>
 8005b76:	2309      	movs	r3, #9
 8005b78:	e02d      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b7a:	230a      	movs	r3, #10
 8005b7c:	e02b      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b7e:	2308      	movs	r3, #8
 8005b80:	e029      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b82:	2307      	movs	r3, #7
 8005b84:	e027      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b86:	2306      	movs	r3, #6
 8005b88:	e025      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b8a:	2305      	movs	r3, #5
 8005b8c:	e023      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b8e:	2304      	movs	r3, #4
 8005b90:	e021      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b92:	2303      	movs	r3, #3
 8005b94:	e01f      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e01d      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e01b      	b.n	8005bd6 <HAL_GPIO_Init+0x26a>
 8005b9e:	bf00      	nop
 8005ba0:	58000080 	.word	0x58000080
 8005ba4:	58024400 	.word	0x58024400
 8005ba8:	58000400 	.word	0x58000400
 8005bac:	58020000 	.word	0x58020000
 8005bb0:	58020400 	.word	0x58020400
 8005bb4:	58020800 	.word	0x58020800
 8005bb8:	58020c00 	.word	0x58020c00
 8005bbc:	58021000 	.word	0x58021000
 8005bc0:	58021400 	.word	0x58021400
 8005bc4:	58021800 	.word	0x58021800
 8005bc8:	58021c00 	.word	0x58021c00
 8005bcc:	58022000 	.word	0x58022000
 8005bd0:	58022400 	.word	0x58022400
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	f002 0203 	and.w	r2, r2, #3
 8005bdc:	0092      	lsls	r2, r2, #2
 8005bde:	4093      	lsls	r3, r2
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005be6:	4938      	ldr	r1, [pc, #224]	; (8005cc8 <HAL_GPIO_Init+0x35c>)
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	3302      	adds	r3, #2
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	4013      	ands	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	43db      	mvns	r3, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4013      	ands	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4013      	ands	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f ae63 	bne.w	8005980 <HAL_GPIO_Init+0x14>
  }
}
 8005cba:	bf00      	nop
 8005cbc:	3724      	adds	r7, #36	; 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	58000400 	.word	0x58000400

08005ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	807b      	strh	r3, [r7, #2]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cdc:	787b      	ldrb	r3, [r7, #1]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ce2:	887a      	ldrh	r2, [r7, #2]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ce8:	e003      	b.n	8005cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cea:	887b      	ldrh	r3, [r7, #2]
 8005cec:	041a      	lsls	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	619a      	str	r2, [r3, #24]
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	887b      	ldrh	r3, [r7, #2]
 8005d10:	401a      	ands	r2, r3
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d104      	bne.n	8005d22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d18:	887b      	ldrh	r3, [r7, #2]
 8005d1a:	041a      	lsls	r2, r3, #16
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005d20:	e002      	b.n	8005d28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005d22:	887a      	ldrh	r2, [r7, #2]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	619a      	str	r2, [r3, #24]
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d00a      	beq.n	8005d5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d48:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d001      	beq.n	8005d5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e01f      	b.n	8005d9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e01d      	b.n	8005d9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f023 0207 	bic.w	r2, r3, #7
 8005d66:	490f      	ldr	r1, [pc, #60]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d6e:	f7fc f955 	bl	800201c <HAL_GetTick>
 8005d72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d74:	e009      	b.n	8005d8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d76:	f7fc f951 	bl	800201c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d84:	d901      	bls.n	8005d8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e007      	b.n	8005d9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d96:	d1ee      	bne.n	8005d76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	58024800 	.word	0x58024800

08005da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08c      	sub	sp, #48	; 0x30
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e3c4      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 8087 	beq.w	8005ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc8:	4ba2      	ldr	r3, [pc, #648]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dd2:	4ba0      	ldr	r3, [pc, #640]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d007      	beq.n	8005dee <HAL_RCC_OscConfig+0x46>
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	2b18      	cmp	r3, #24
 8005de2:	d110      	bne.n	8005e06 <HAL_RCC_OscConfig+0x5e>
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d10b      	bne.n	8005e06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dee:	4b99      	ldr	r3, [pc, #612]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d06c      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x12c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d168      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e39e      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0e:	d106      	bne.n	8005e1e <HAL_RCC_OscConfig+0x76>
 8005e10:	4b90      	ldr	r3, [pc, #576]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a8f      	ldr	r2, [pc, #572]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e02e      	b.n	8005e7c <HAL_RCC_OscConfig+0xd4>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10c      	bne.n	8005e40 <HAL_RCC_OscConfig+0x98>
 8005e26:	4b8b      	ldr	r3, [pc, #556]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a8a      	ldr	r2, [pc, #552]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	4b88      	ldr	r3, [pc, #544]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a87      	ldr	r2, [pc, #540]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e01d      	b.n	8005e7c <HAL_RCC_OscConfig+0xd4>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e48:	d10c      	bne.n	8005e64 <HAL_RCC_OscConfig+0xbc>
 8005e4a:	4b82      	ldr	r3, [pc, #520]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a81      	ldr	r2, [pc, #516]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4b7f      	ldr	r3, [pc, #508]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7e      	ldr	r2, [pc, #504]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e00b      	b.n	8005e7c <HAL_RCC_OscConfig+0xd4>
 8005e64:	4b7b      	ldr	r3, [pc, #492]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a7a      	ldr	r2, [pc, #488]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4b78      	ldr	r3, [pc, #480]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a77      	ldr	r2, [pc, #476]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d013      	beq.n	8005eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fc f8ca 	bl	800201c <HAL_GetTick>
 8005e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e8c:	f7fc f8c6 	bl	800201c <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	; 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e352      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e9e:	4b6d      	ldr	r3, [pc, #436]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0xe4>
 8005eaa:	e014      	b.n	8005ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fc f8b6 	bl	800201c <HAL_GetTick>
 8005eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb4:	f7fc f8b2 	bl	800201c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	; 0x64
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e33e      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ec6:	4b63      	ldr	r3, [pc, #396]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x10c>
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8092 	beq.w	8006008 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee4:	4b5b      	ldr	r3, [pc, #364]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005eee:	4b59      	ldr	r3, [pc, #356]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <HAL_RCC_OscConfig+0x162>
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	2b18      	cmp	r3, #24
 8005efe:	d12d      	bne.n	8005f5c <HAL_RCC_OscConfig+0x1b4>
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d128      	bne.n	8005f5c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0a:	4b52      	ldr	r3, [pc, #328]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_RCC_OscConfig+0x17a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e310      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f22:	f7fc f8a9 	bl	8002078 <HAL_GetREVID>
 8005f26:	4602      	mov	r2, r0
 8005f28:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d80a      	bhi.n	8005f46 <HAL_RCC_OscConfig+0x19e>
 8005f30:	4b48      	ldr	r3, [pc, #288]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	031b      	lsls	r3, r3, #12
 8005f3e:	4945      	ldr	r1, [pc, #276]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f44:	e060      	b.n	8006008 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f46:	4b43      	ldr	r3, [pc, #268]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	493f      	ldr	r1, [pc, #252]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f5a:	e055      	b.n	8006008 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d038      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f64:	4b3b      	ldr	r3, [pc, #236]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f023 0219 	bic.w	r2, r3, #25
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4938      	ldr	r1, [pc, #224]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f76:	f7fc f851 	bl	800201c <HAL_GetTick>
 8005f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f7e:	f7fc f84d 	bl	800201c <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e2d9      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f90:	4b30      	ldr	r3, [pc, #192]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	f7fc f86c 	bl	8002078 <HAL_GetREVID>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d80a      	bhi.n	8005fc0 <HAL_RCC_OscConfig+0x218>
 8005faa:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	031b      	lsls	r3, r3, #12
 8005fb8:	4926      	ldr	r1, [pc, #152]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	604b      	str	r3, [r1, #4]
 8005fbe:	e023      	b.n	8006008 <HAL_RCC_OscConfig+0x260>
 8005fc0:	4b24      	ldr	r3, [pc, #144]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	061b      	lsls	r3, r3, #24
 8005fce:	4921      	ldr	r1, [pc, #132]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	604b      	str	r3, [r1, #4]
 8005fd4:	e018      	b.n	8006008 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd6:	4b1f      	ldr	r3, [pc, #124]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe2:	f7fc f81b 	bl	800201c <HAL_GetTick>
 8005fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fea:	f7fc f817 	bl	800201c <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e2a3      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ffc:	4b15      	ldr	r3, [pc, #84]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f0      	bne.n	8005fea <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8091 	beq.w	8006138 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800601e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d007      	beq.n	800603c <HAL_RCC_OscConfig+0x294>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b18      	cmp	r3, #24
 8006030:	d12f      	bne.n	8006092 <HAL_RCC_OscConfig+0x2ea>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d12a      	bne.n	8006092 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <HAL_RCC_OscConfig+0x2ac>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_RCC_OscConfig+0x2b0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d003      	beq.n	8006058 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e277      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
 8006054:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006058:	f7fc f80e 	bl	8002078 <HAL_GetREVID>
 800605c:	4602      	mov	r2, r0
 800605e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006062:	429a      	cmp	r2, r3
 8006064:	d80a      	bhi.n	800607c <HAL_RCC_OscConfig+0x2d4>
 8006066:	4ba2      	ldr	r3, [pc, #648]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	069b      	lsls	r3, r3, #26
 8006074:	499e      	ldr	r1, [pc, #632]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006076:	4313      	orrs	r3, r2
 8006078:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800607a:	e05d      	b.n	8006138 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800607c:	4b9c      	ldr	r3, [pc, #624]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	4999      	ldr	r1, [pc, #612]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800608c:	4313      	orrs	r3, r2
 800608e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006090:	e052      	b.n	8006138 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d035      	beq.n	8006106 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800609a:	4b95      	ldr	r3, [pc, #596]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a94      	ldr	r2, [pc, #592]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80060a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a6:	f7fb ffb9 	bl	800201c <HAL_GetTick>
 80060aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060ae:	f7fb ffb5 	bl	800201c <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e241      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060c0:	4b8b      	ldr	r3, [pc, #556]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0f0      	beq.n	80060ae <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060cc:	f7fb ffd4 	bl	8002078 <HAL_GetREVID>
 80060d0:	4602      	mov	r2, r0
 80060d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d80a      	bhi.n	80060f0 <HAL_RCC_OscConfig+0x348>
 80060da:	4b85      	ldr	r3, [pc, #532]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	069b      	lsls	r3, r3, #26
 80060e8:	4981      	ldr	r1, [pc, #516]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
 80060ee:	e023      	b.n	8006138 <HAL_RCC_OscConfig+0x390>
 80060f0:	4b7f      	ldr	r3, [pc, #508]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	061b      	lsls	r3, r3, #24
 80060fe:	497c      	ldr	r1, [pc, #496]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006100:	4313      	orrs	r3, r2
 8006102:	60cb      	str	r3, [r1, #12]
 8006104:	e018      	b.n	8006138 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006106:	4b7a      	ldr	r3, [pc, #488]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a79      	ldr	r2, [pc, #484]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800610c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fb ff83 	bl	800201c <HAL_GetTick>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800611a:	f7fb ff7f 	bl	800201c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e20b      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800612c:	4b70      	ldr	r3, [pc, #448]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d036      	beq.n	80061b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d019      	beq.n	8006180 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800614c:	4b68      	ldr	r3, [pc, #416]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800614e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006150:	4a67      	ldr	r2, [pc, #412]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fb ff60 	bl	800201c <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006160:	f7fb ff5c 	bl	800201c <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e1e8      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006172:	4b5f      	ldr	r3, [pc, #380]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x3b8>
 800617e:	e018      	b.n	80061b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006180:	4b5b      	ldr	r3, [pc, #364]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006184:	4a5a      	ldr	r2, [pc, #360]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618c:	f7fb ff46 	bl	800201c <HAL_GetTick>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006194:	f7fb ff42 	bl	800201c <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e1ce      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061a6:	4b52      	ldr	r3, [pc, #328]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80061a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d036      	beq.n	800622c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d019      	beq.n	80061fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061c6:	4b4a      	ldr	r3, [pc, #296]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a49      	ldr	r2, [pc, #292]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80061cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061d2:	f7fb ff23 	bl	800201c <HAL_GetTick>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061da:	f7fb ff1f 	bl	800201c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e1ab      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061ec:	4b40      	ldr	r3, [pc, #256]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <HAL_RCC_OscConfig+0x432>
 80061f8:	e018      	b.n	800622c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061fa:	4b3d      	ldr	r3, [pc, #244]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a3c      	ldr	r2, [pc, #240]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006204:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006206:	f7fb ff09 	bl	800201c <HAL_GetTick>
 800620a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800620e:	f7fb ff05 	bl	800201c <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e191      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006220:	4b33      	ldr	r3, [pc, #204]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f0      	bne.n	800620e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8086 	beq.w	8006346 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800623a:	4b2e      	ldr	r3, [pc, #184]	; (80062f4 <HAL_RCC_OscConfig+0x54c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <HAL_RCC_OscConfig+0x54c>)
 8006240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006246:	f7fb fee9 	bl	800201c <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800624e:	f7fb fee5 	bl	800201c <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b64      	cmp	r3, #100	; 0x64
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e171      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006260:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <HAL_RCC_OscConfig+0x54c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f0      	beq.n	800624e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d106      	bne.n	8006282 <HAL_RCC_OscConfig+0x4da>
 8006274:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6713      	str	r3, [r2, #112]	; 0x70
 8006280:	e02d      	b.n	80062de <HAL_RCC_OscConfig+0x536>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x4fc>
 800628a:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	6713      	str	r3, [r2, #112]	; 0x70
 8006296:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	4a15      	ldr	r2, [pc, #84]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 800629c:	f023 0304 	bic.w	r3, r3, #4
 80062a0:	6713      	str	r3, [r2, #112]	; 0x70
 80062a2:	e01c      	b.n	80062de <HAL_RCC_OscConfig+0x536>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b05      	cmp	r3, #5
 80062aa:	d10c      	bne.n	80062c6 <HAL_RCC_OscConfig+0x51e>
 80062ac:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b0:	4a0f      	ldr	r2, [pc, #60]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80062b2:	f043 0304 	orr.w	r3, r3, #4
 80062b6:	6713      	str	r3, [r2, #112]	; 0x70
 80062b8:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	6713      	str	r3, [r2, #112]	; 0x70
 80062c4:	e00b      	b.n	80062de <HAL_RCC_OscConfig+0x536>
 80062c6:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	6713      	str	r3, [r2, #112]	; 0x70
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <HAL_RCC_OscConfig+0x548>)
 80062d8:	f023 0304 	bic.w	r3, r3, #4
 80062dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01a      	beq.n	800631c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e6:	f7fb fe99 	bl	800201c <HAL_GetTick>
 80062ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ec:	e00f      	b.n	800630e <HAL_RCC_OscConfig+0x566>
 80062ee:	bf00      	nop
 80062f0:	58024400 	.word	0x58024400
 80062f4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f8:	f7fb fe90 	bl	800201c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f241 3288 	movw	r2, #5000	; 0x1388
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e11a      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800630e:	4b8f      	ldr	r3, [pc, #572]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0ee      	beq.n	80062f8 <HAL_RCC_OscConfig+0x550>
 800631a:	e014      	b.n	8006346 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631c:	f7fb fe7e 	bl	800201c <HAL_GetTick>
 8006320:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006322:	e00a      	b.n	800633a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006324:	f7fb fe7a 	bl	800201c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e104      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800633a:	4b84      	ldr	r3, [pc, #528]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1ee      	bne.n	8006324 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80f9 	beq.w	8006542 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006350:	4b7e      	ldr	r3, [pc, #504]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006358:	2b18      	cmp	r3, #24
 800635a:	f000 80b4 	beq.w	80064c6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2b02      	cmp	r3, #2
 8006364:	f040 8095 	bne.w	8006492 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006368:	4b78      	ldr	r3, [pc, #480]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a77      	ldr	r2, [pc, #476]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800636e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006374:	f7fb fe52 	bl	800201c <HAL_GetTick>
 8006378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800637c:	f7fb fe4e 	bl	800201c <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e0da      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800638e:	4b6f      	ldr	r3, [pc, #444]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800639a:	4b6c      	ldr	r3, [pc, #432]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800639c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639e:	4b6c      	ldr	r3, [pc, #432]	; (8006550 <HAL_RCC_OscConfig+0x7a8>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063aa:	0112      	lsls	r2, r2, #4
 80063ac:	430a      	orrs	r2, r1
 80063ae:	4967      	ldr	r1, [pc, #412]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	628b      	str	r3, [r1, #40]	; 0x28
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	3b01      	subs	r3, #1
 80063ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c2:	3b01      	subs	r3, #1
 80063c4:	025b      	lsls	r3, r3, #9
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	3b01      	subs	r3, #1
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063dc:	3b01      	subs	r3, #1
 80063de:	061b      	lsls	r3, r3, #24
 80063e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063e4:	4959      	ldr	r1, [pc, #356]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80063ea:	4b58      	ldr	r3, [pc, #352]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a57      	ldr	r2, [pc, #348]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063f6:	4b55      	ldr	r3, [pc, #340]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 80063f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fa:	4b56      	ldr	r3, [pc, #344]	; (8006554 <HAL_RCC_OscConfig+0x7ac>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006402:	00d2      	lsls	r2, r2, #3
 8006404:	4951      	ldr	r1, [pc, #324]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800640a:	4b50      	ldr	r3, [pc, #320]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	f023 020c 	bic.w	r2, r3, #12
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	494d      	ldr	r1, [pc, #308]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006418:	4313      	orrs	r3, r2
 800641a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800641c:	4b4b      	ldr	r3, [pc, #300]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	f023 0202 	bic.w	r2, r3, #2
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	4948      	ldr	r1, [pc, #288]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800642a:	4313      	orrs	r3, r2
 800642c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800642e:	4b47      	ldr	r3, [pc, #284]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	4a46      	ldr	r2, [pc, #280]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006438:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800643a:	4b44      	ldr	r3, [pc, #272]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	4a43      	ldr	r2, [pc, #268]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006446:	4b41      	ldr	r3, [pc, #260]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	4a40      	ldr	r2, [pc, #256]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 800644c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006450:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006452:	4b3e      	ldr	r3, [pc, #248]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	4a3d      	ldr	r2, [pc, #244]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800645e:	4b3b      	ldr	r3, [pc, #236]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a3a      	ldr	r2, [pc, #232]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fb fdd7 	bl	800201c <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006472:	f7fb fdd3 	bl	800201c <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e05f      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006484:	4b31      	ldr	r3, [pc, #196]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x6ca>
 8006490:	e057      	b.n	8006542 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006492:	4b2e      	ldr	r3, [pc, #184]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2d      	ldr	r2, [pc, #180]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 8006498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800649c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649e:	f7fb fdbd 	bl	800201c <HAL_GetTick>
 80064a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a6:	f7fb fdb9 	bl	800201c <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e045      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1f0      	bne.n	80064a6 <HAL_RCC_OscConfig+0x6fe>
 80064c4:	e03d      	b.n	8006542 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064c6:	4b21      	ldr	r3, [pc, #132]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064cc:	4b1f      	ldr	r3, [pc, #124]	; (800654c <HAL_RCC_OscConfig+0x7a4>)
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d031      	beq.n	800653e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f003 0203 	and.w	r2, r3, #3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d12a      	bne.n	800653e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	091b      	lsrs	r3, r3, #4
 80064ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d122      	bne.n	800653e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006504:	429a      	cmp	r2, r3
 8006506:	d11a      	bne.n	800653e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	0a5b      	lsrs	r3, r3, #9
 800650c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d111      	bne.n	800653e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006528:	429a      	cmp	r2, r3
 800652a:	d108      	bne.n	800653e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	0e1b      	lsrs	r3, r3, #24
 8006530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006538:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d001      	beq.n	8006542 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3730      	adds	r7, #48	; 0x30
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	58024400 	.word	0x58024400
 8006550:	fffffc0c 	.word	0xfffffc0c
 8006554:	ffff0007 	.word	0xffff0007

08006558 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e19c      	b.n	80068a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800656c:	4b8a      	ldr	r3, [pc, #552]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d910      	bls.n	800659c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657a:	4b87      	ldr	r3, [pc, #540]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f023 020f 	bic.w	r2, r3, #15
 8006582:	4985      	ldr	r1, [pc, #532]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	4313      	orrs	r3, r2
 8006588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658a:	4b83      	ldr	r3, [pc, #524]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 030f 	and.w	r3, r3, #15
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d001      	beq.n	800659c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e184      	b.n	80068a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d010      	beq.n	80065ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	4b7b      	ldr	r3, [pc, #492]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d908      	bls.n	80065ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065b8:	4b78      	ldr	r3, [pc, #480]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	4975      	ldr	r1, [pc, #468]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d010      	beq.n	80065f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695a      	ldr	r2, [r3, #20]
 80065da:	4b70      	ldr	r3, [pc, #448]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d908      	bls.n	80065f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065e6:	4b6d      	ldr	r3, [pc, #436]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	496a      	ldr	r1, [pc, #424]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	d010      	beq.n	8006626 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	4b64      	ldr	r3, [pc, #400]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006610:	429a      	cmp	r2, r3
 8006612:	d908      	bls.n	8006626 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006614:	4b61      	ldr	r3, [pc, #388]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	495e      	ldr	r1, [pc, #376]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006622:	4313      	orrs	r3, r2
 8006624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d010      	beq.n	8006654 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69da      	ldr	r2, [r3, #28]
 8006636:	4b59      	ldr	r3, [pc, #356]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800663e:	429a      	cmp	r2, r3
 8006640:	d908      	bls.n	8006654 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006642:	4b56      	ldr	r3, [pc, #344]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	4953      	ldr	r1, [pc, #332]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006650:	4313      	orrs	r3, r2
 8006652:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d010      	beq.n	8006682 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	4b4d      	ldr	r3, [pc, #308]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	429a      	cmp	r2, r3
 800666e:	d908      	bls.n	8006682 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006670:	4b4a      	ldr	r3, [pc, #296]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	f023 020f 	bic.w	r2, r3, #15
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4947      	ldr	r1, [pc, #284]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 800667e:	4313      	orrs	r3, r2
 8006680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d055      	beq.n	800673a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800668e:	4b43      	ldr	r3, [pc, #268]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	4940      	ldr	r1, [pc, #256]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 800669c:	4313      	orrs	r3, r2
 800669e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066a8:	4b3c      	ldr	r3, [pc, #240]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d121      	bne.n	80066f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0f6      	b.n	80068a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d107      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066c0:	4b36      	ldr	r3, [pc, #216]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d115      	bne.n	80066f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0ea      	b.n	80068a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d107      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066d8:	4b30      	ldr	r3, [pc, #192]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0de      	b.n	80068a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066e8:	4b2c      	ldr	r3, [pc, #176]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0d6      	b.n	80068a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066f8:	4b28      	ldr	r3, [pc, #160]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f023 0207 	bic.w	r2, r3, #7
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4925      	ldr	r1, [pc, #148]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006706:	4313      	orrs	r3, r2
 8006708:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670a:	f7fb fc87 	bl	800201c <HAL_GetTick>
 800670e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006710:	e00a      	b.n	8006728 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006712:	f7fb fc83 	bl	800201c <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e0be      	b.n	80068a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006728:	4b1c      	ldr	r3, [pc, #112]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	429a      	cmp	r2, r3
 8006738:	d1eb      	bne.n	8006712 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d010      	beq.n	8006768 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	4b14      	ldr	r3, [pc, #80]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	429a      	cmp	r2, r3
 8006754:	d208      	bcs.n	8006768 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006756:	4b11      	ldr	r3, [pc, #68]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f023 020f 	bic.w	r2, r3, #15
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	490e      	ldr	r1, [pc, #56]	; (800679c <HAL_RCC_ClockConfig+0x244>)
 8006764:	4313      	orrs	r3, r2
 8006766:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006768:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d214      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 020f 	bic.w	r2, r3, #15
 800677e:	4906      	ldr	r1, [pc, #24]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <HAL_RCC_ClockConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e086      	b.n	80068a6 <HAL_RCC_ClockConfig+0x34e>
 8006798:	52002000 	.word	0x52002000
 800679c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d010      	beq.n	80067ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d208      	bcs.n	80067ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067bc:	4b3c      	ldr	r3, [pc, #240]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	4939      	ldr	r1, [pc, #228]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	4b34      	ldr	r3, [pc, #208]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d208      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067ea:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	492e      	ldr	r1, [pc, #184]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b00      	cmp	r3, #0
 8006806:	d010      	beq.n	800682a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699a      	ldr	r2, [r3, #24]
 800680c:	4b28      	ldr	r3, [pc, #160]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006814:	429a      	cmp	r2, r3
 8006816:	d208      	bcs.n	800682a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006818:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	4922      	ldr	r1, [pc, #136]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 8006826:	4313      	orrs	r3, r2
 8006828:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d010      	beq.n	8006858 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69da      	ldr	r2, [r3, #28]
 800683a:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006842:	429a      	cmp	r2, r3
 8006844:	d208      	bcs.n	8006858 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006846:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	4917      	ldr	r1, [pc, #92]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 8006854:	4313      	orrs	r3, r2
 8006856:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006858:	f000 f834 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 800685c:	4601      	mov	r1, r0
 800685e:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	0a1b      	lsrs	r3, r3, #8
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <HAL_RCC_ClockConfig+0x35c>)
 800686a:	5cd3      	ldrb	r3, [r2, r3]
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	fa21 f303 	lsr.w	r3, r1, r3
 8006874:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006876:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <HAL_RCC_ClockConfig+0x358>)
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	4a0d      	ldr	r2, [pc, #52]	; (80068b4 <HAL_RCC_ClockConfig+0x35c>)
 8006880:	5cd3      	ldrb	r3, [r2, r3]
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
 800688c:	4a0a      	ldr	r2, [pc, #40]	; (80068b8 <HAL_RCC_ClockConfig+0x360>)
 800688e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006890:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <HAL_RCC_ClockConfig+0x364>)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <HAL_RCC_ClockConfig+0x368>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f7fb fb74 	bl	8001f88 <HAL_InitTick>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	58024400 	.word	0x58024400
 80068b4:	0800c884 	.word	0x0800c884
 80068b8:	2400001c 	.word	0x2400001c
 80068bc:	24000018 	.word	0x24000018
 80068c0:	24000020 	.word	0x24000020

080068c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b089      	sub	sp, #36	; 0x24
 80068c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ca:	4baf      	ldr	r3, [pc, #700]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068d2:	2b18      	cmp	r3, #24
 80068d4:	f200 814e 	bhi.w	8006b74 <HAL_RCC_GetSysClockFreq+0x2b0>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	08006945 	.word	0x08006945
 80068e4:	08006b75 	.word	0x08006b75
 80068e8:	08006b75 	.word	0x08006b75
 80068ec:	08006b75 	.word	0x08006b75
 80068f0:	08006b75 	.word	0x08006b75
 80068f4:	08006b75 	.word	0x08006b75
 80068f8:	08006b75 	.word	0x08006b75
 80068fc:	08006b75 	.word	0x08006b75
 8006900:	0800696b 	.word	0x0800696b
 8006904:	08006b75 	.word	0x08006b75
 8006908:	08006b75 	.word	0x08006b75
 800690c:	08006b75 	.word	0x08006b75
 8006910:	08006b75 	.word	0x08006b75
 8006914:	08006b75 	.word	0x08006b75
 8006918:	08006b75 	.word	0x08006b75
 800691c:	08006b75 	.word	0x08006b75
 8006920:	08006971 	.word	0x08006971
 8006924:	08006b75 	.word	0x08006b75
 8006928:	08006b75 	.word	0x08006b75
 800692c:	08006b75 	.word	0x08006b75
 8006930:	08006b75 	.word	0x08006b75
 8006934:	08006b75 	.word	0x08006b75
 8006938:	08006b75 	.word	0x08006b75
 800693c:	08006b75 	.word	0x08006b75
 8006940:	08006977 	.word	0x08006977
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006944:	4b90      	ldr	r3, [pc, #576]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006950:	4b8d      	ldr	r3, [pc, #564]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	08db      	lsrs	r3, r3, #3
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	4a8c      	ldr	r2, [pc, #560]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
 8006960:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006962:	e10a      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006964:	4b89      	ldr	r3, [pc, #548]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006966:	61bb      	str	r3, [r7, #24]
    break;
 8006968:	e107      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800696a:	4b89      	ldr	r3, [pc, #548]	; (8006b90 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800696c:	61bb      	str	r3, [r7, #24]
    break;
 800696e:	e104      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006970:	4b88      	ldr	r3, [pc, #544]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006972:	61bb      	str	r3, [r7, #24]
    break;
 8006974:	e101      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006976:	4b84      	ldr	r3, [pc, #528]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006980:	4b81      	ldr	r3, [pc, #516]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	091b      	lsrs	r3, r3, #4
 8006986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800698a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800698c:	4b7e      	ldr	r3, [pc, #504]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006996:	4b7c      	ldr	r3, [pc, #496]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699a:	08db      	lsrs	r3, r3, #3
 800699c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 80da 	beq.w	8006b6e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d05a      	beq.n	8006a76 <HAL_RCC_GetSysClockFreq+0x1b2>
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d302      	bcc.n	80069ca <HAL_RCC_GetSysClockFreq+0x106>
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d078      	beq.n	8006aba <HAL_RCC_GetSysClockFreq+0x1f6>
 80069c8:	e099      	b.n	8006afe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ca:	4b6f      	ldr	r3, [pc, #444]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d02d      	beq.n	8006a32 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069d6:	4b6c      	ldr	r3, [pc, #432]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	08db      	lsrs	r3, r3, #3
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	4a6a      	ldr	r2, [pc, #424]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80069e2:	fa22 f303 	lsr.w	r3, r2, r3
 80069e6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a00:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a08:	ee07 3a90 	vmov	s15, r3
 8006a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a10:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a14:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006b98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006a30:	e087      	b.n	8006b42 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006b9c <HAL_RCC_GetSysClockFreq+0x2d8>
 8006a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a44:	4b50      	ldr	r3, [pc, #320]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a54:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a58:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006b98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a74:	e065      	b.n	8006b42 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a80:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006ba0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a88:	4b3f      	ldr	r3, [pc, #252]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a98:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a9c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006b98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ab8:	e043      	b.n	8006b42 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	ee07 3a90 	vmov	s15, r3
 8006ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006ba4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006acc:	4b2e      	ldr	r3, [pc, #184]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006adc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ae0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006b98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006afc:	e021      	b.n	8006b42 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b08:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006ba0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b10:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b20:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b24:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006b98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b40:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006b42:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	0a5b      	lsrs	r3, r3, #9
 8006b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b66:	ee17 3a90 	vmov	r3, s15
 8006b6a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b6c:	e005      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61bb      	str	r3, [r7, #24]
    break;
 8006b72:	e002      	b.n	8006b7a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b76:	61bb      	str	r3, [r7, #24]
    break;
 8006b78:	bf00      	nop
  }

  return sysclockfreq;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3724      	adds	r7, #36	; 0x24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	58024400 	.word	0x58024400
 8006b8c:	03d09000 	.word	0x03d09000
 8006b90:	003d0900 	.word	0x003d0900
 8006b94:	017d7840 	.word	0x017d7840
 8006b98:	46000000 	.word	0x46000000
 8006b9c:	4c742400 	.word	0x4c742400
 8006ba0:	4a742400 	.word	0x4a742400
 8006ba4:	4bbebc20 	.word	0x4bbebc20

08006ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006bae:	f7ff fe89 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 8006bb2:	4601      	mov	r1, r0
 8006bb4:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	4a0f      	ldr	r2, [pc, #60]	; (8006bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8006bc0:	5cd3      	ldrb	r3, [r2, r3]
 8006bc2:	f003 031f 	and.w	r3, r3, #31
 8006bc6:	fa21 f303 	lsr.w	r3, r1, r3
 8006bca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f003 030f 	and.w	r3, r3, #15
 8006bd4:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8006bd6:	5cd3      	ldrb	r3, [r2, r3]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	fa22 f303 	lsr.w	r3, r2, r3
 8006be2:	4a07      	ldr	r2, [pc, #28]	; (8006c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8006be4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006be6:	4a07      	ldr	r2, [pc, #28]	; (8006c04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bee:	681b      	ldr	r3, [r3, #0]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	58024400 	.word	0x58024400
 8006bfc:	0800c884 	.word	0x0800c884
 8006c00:	2400001c 	.word	0x2400001c
 8006c04:	24000018 	.word	0x24000018

08006c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c0c:	f7ff ffcc 	bl	8006ba8 <HAL_RCC_GetHCLKFreq>
 8006c10:	4601      	mov	r1, r0
 8006c12:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	091b      	lsrs	r3, r3, #4
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c1e:	5cd3      	ldrb	r3, [r2, r3]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	0800c884 	.word	0x0800c884

08006c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c38:	f7ff ffb6 	bl	8006ba8 <HAL_RCC_GetHCLKFreq>
 8006c3c:	4601      	mov	r1, r0
 8006c3e:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	4a04      	ldr	r2, [pc, #16]	; (8006c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c4a:	5cd3      	ldrb	r3, [r2, r3]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	0800c884 	.word	0x0800c884

08006c60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d03d      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c84:	d013      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8a:	d802      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006c90:	e01f      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c96:	d013      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006c98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c9c:	d01c      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006c9e:	e018      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca0:	4baf      	ldr	r3, [pc, #700]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	4aae      	ldr	r2, [pc, #696]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006caa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cac:	e015      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	2102      	movs	r1, #2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 fd23 	bl	8008700 <RCCEx_PLL2_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cbe:	e00c      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3324      	adds	r3, #36	; 0x24
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fdcc 	bl	8008864 <RCCEx_PLL3_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cd0:	e003      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ce0:	4b9f      	ldr	r3, [pc, #636]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cec:	499c      	ldr	r1, [pc, #624]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8006cf2:	e001      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d03d      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d826      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006d0c:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d29 	.word	0x08006d29
 8006d18:	08006d37 	.word	0x08006d37
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	08006d61 	.word	0x08006d61
 8006d24:	08006d61 	.word	0x08006d61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d28:	4b8d      	ldr	r3, [pc, #564]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	4a8c      	ldr	r2, [pc, #560]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d34:	e015      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 fcdf 	bl	8008700 <RCCEx_PLL2_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d46:	e00c      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 fd88 	bl	8008864 <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5e:	e000      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d68:	4b7d      	ldr	r3, [pc, #500]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6c:	f023 0207 	bic.w	r2, r3, #7
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d74:	497a      	ldr	r1, [pc, #488]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	650b      	str	r3, [r1, #80]	; 0x50
 8006d7a:	e001      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d03e      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d01c      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d804      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d008      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d00d      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006da0:	e01e      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006da2:	2bc0      	cmp	r3, #192	; 0xc0
 8006da4:	d01f      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006daa:	d01e      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006dac:	e018      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dae:	4b6c      	ldr	r3, [pc, #432]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	4a6b      	ldr	r2, [pc, #428]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006db8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dba:	e017      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 fc9c 	bl	8008700 <RCCEx_PLL2_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dcc:	e00e      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3324      	adds	r3, #36	; 0x24
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 fd45 	bl	8008864 <RCCEx_PLL3_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dde:	e005      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
      break;
 8006de4:	e002      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006de6:	bf00      	nop
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006df2:	4b5b      	ldr	r3, [pc, #364]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	4958      	ldr	r1, [pc, #352]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	650b      	str	r3, [r1, #80]	; 0x50
 8006e04:	e001      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d044      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e20:	d01f      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e26:	d805      	bhi.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00a      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e30:	d00e      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006e32:	e01f      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006e34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e38:	d01f      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e3e:	d01e      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006e40:	e018      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e42:	4b47      	ldr	r3, [pc, #284]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	4a46      	ldr	r2, [pc, #280]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e4e:	e017      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3304      	adds	r3, #4
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 fc52 	bl	8008700 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e60:	e00e      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3324      	adds	r3, #36	; 0x24
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 fcfb 	bl	8008864 <RCCEx_PLL3_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e72:	e005      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	75fb      	strb	r3, [r7, #23]
      break;
 8006e78:	e002      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006e7a:	bf00      	nop
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e86:	4b36      	ldr	r3, [pc, #216]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e94:	4932      	ldr	r1, [pc, #200]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	658b      	str	r3, [r1, #88]	; 0x58
 8006e9a:	e001      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d044      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eb6:	d01f      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ebc:	d805      	bhi.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006ec2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006ec8:	e01f      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006eca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ece:	d01f      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ed4:	d01e      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006ed6:	e018      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed8:	4b21      	ldr	r3, [pc, #132]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	4a20      	ldr	r2, [pc, #128]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ee4:	e017      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	2100      	movs	r1, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fc07 	bl	8008700 <RCCEx_PLL2_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ef6:	e00e      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3324      	adds	r3, #36	; 0x24
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 fcb0 	bl	8008864 <RCCEx_PLL3_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f08:	e005      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0e:	e002      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f1c:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f20:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f2a:	490d      	ldr	r1, [pc, #52]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	658b      	str	r3, [r1, #88]	; 0x58
 8006f30:	e001      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d035      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d00c      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d802      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01b      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006f52:	e017      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d00c      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006f58:	2b30      	cmp	r3, #48	; 0x30
 8006f5a:	d018      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006f5c:	e012      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f5e:	bf00      	nop
 8006f60:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f64:	4baf      	ldr	r3, [pc, #700]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4aae      	ldr	r2, [pc, #696]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f70:	e00e      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3304      	adds	r3, #4
 8006f76:	2102      	movs	r1, #2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 fbc1 	bl	8008700 <RCCEx_PLL2_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f82:	e005      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
      break;
 8006f88:	e002      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e000      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f96:	4ba3      	ldr	r3, [pc, #652]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa2:	49a0      	ldr	r1, [pc, #640]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fa8:	e001      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d042      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc2:	d01f      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc8:	d805      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd2:	d00e      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006fd4:	e01f      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fda:	d01f      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe0:	d01e      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006fe2:	e018      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe4:	4b8f      	ldr	r3, [pc, #572]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	4a8e      	ldr	r2, [pc, #568]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ff0:	e017      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 fb81 	bl	8008700 <RCCEx_PLL2_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007002:	e00e      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3324      	adds	r3, #36	; 0x24
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f001 fc2a 	bl	8008864 <RCCEx_PLL3_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007014:	e005      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	75fb      	strb	r3, [r7, #23]
      break;
 800701a:	e002      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007028:	4b7e      	ldr	r3, [pc, #504]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800702a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	497b      	ldr	r1, [pc, #492]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007036:	4313      	orrs	r3, r2
 8007038:	650b      	str	r3, [r1, #80]	; 0x50
 800703a:	e001      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d042      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007054:	d01b      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800705a:	d805      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d022      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007064:	d00a      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007066:	e01b      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800706c:	d01d      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800706e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007072:	d01c      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007074:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007078:	d01b      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800707a:	e011      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	2101      	movs	r1, #1
 8007082:	4618      	mov	r0, r3
 8007084:	f001 fb3c 	bl	8008700 <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800708c:	e012      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3324      	adds	r3, #36	; 0x24
 8007092:	2101      	movs	r1, #1
 8007094:	4618      	mov	r0, r3
 8007096:	f001 fbe5 	bl	8008864 <RCCEx_PLL3_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800709e:	e009      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]
      break;
 80070a4:	e006      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070a6:	bf00      	nop
 80070a8:	e004      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070aa:	bf00      	nop
 80070ac:	e002      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80070b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070ba:	4b5a      	ldr	r3, [pc, #360]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c6:	4957      	ldr	r1, [pc, #348]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	650b      	str	r3, [r1, #80]	; 0x50
 80070cc:	e001      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d044      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e8:	d01b      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80070ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ee:	d805      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d022      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80070f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070f8:	d00a      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80070fa:	e01b      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007100:	d01d      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007106:	d01c      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007108:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800710c:	d01b      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800710e:	e011      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3304      	adds	r3, #4
 8007114:	2101      	movs	r1, #1
 8007116:	4618      	mov	r0, r3
 8007118:	f001 faf2 	bl	8008700 <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007120:	e012      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3324      	adds	r3, #36	; 0x24
 8007126:	2101      	movs	r1, #1
 8007128:	4618      	mov	r0, r3
 800712a:	f001 fb9b 	bl	8008864 <RCCEx_PLL3_Config>
 800712e:	4603      	mov	r3, r0
 8007130:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007132:	e009      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	75fb      	strb	r3, [r7, #23]
      break;
 8007138:	e006      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800713a:	bf00      	nop
 800713c:	e004      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800713e:	bf00      	nop
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800714e:	4b35      	ldr	r3, [pc, #212]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007152:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800715c:	4931      	ldr	r1, [pc, #196]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800715e:	4313      	orrs	r3, r2
 8007160:	658b      	str	r3, [r1, #88]	; 0x58
 8007162:	e001      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d02d      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717c:	d005      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800717e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007182:	d009      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007188:	e00f      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800718a:	4b26      	ldr	r3, [pc, #152]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	4a25      	ldr	r2, [pc, #148]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007194:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007196:	e00c      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	2101      	movs	r1, #1
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 faae 	bl	8008700 <RCCEx_PLL2_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071a8:	e003      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	75fb      	strb	r3, [r7, #23]
      break;
 80071ae:	e000      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80071b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d109      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c4:	4917      	ldr	r1, [pc, #92]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	650b      	str	r3, [r1, #80]	; 0x50
 80071ca:	e001      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d035      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d81b      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80071e4:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007229 	.word	0x08007229
 80071f0:	080071fd 	.word	0x080071fd
 80071f4:	0800720b 	.word	0x0800720b
 80071f8:	08007229 	.word	0x08007229
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fc:	4b09      	ldr	r3, [pc, #36]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a08      	ldr	r2, [pc, #32]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007208:	e00f      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3304      	adds	r3, #4
 800720e:	2102      	movs	r1, #2
 8007210:	4618      	mov	r0, r3
 8007212:	f001 fa75 	bl	8008700 <RCCEx_PLL2_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800721a:	e006      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	75fb      	strb	r3, [r7, #23]
      break;
 8007220:	e003      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007222:	bf00      	nop
 8007224:	58024400 	.word	0x58024400
      break;
 8007228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d109      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007230:	4bba      	ldr	r3, [pc, #744]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007234:	f023 0203 	bic.w	r2, r3, #3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723c:	49b7      	ldr	r1, [pc, #732]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800723e:	4313      	orrs	r3, r2
 8007240:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007242:	e001      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8086 	beq.w	8007362 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007256:	4bb2      	ldr	r3, [pc, #712]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4ab1      	ldr	r2, [pc, #708]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800725c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007260:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007262:	f7fa fedb 	bl	800201c <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007268:	e009      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800726a:	f7fa fed7 	bl	800201c <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b64      	cmp	r3, #100	; 0x64
 8007276:	d902      	bls.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	75fb      	strb	r3, [r7, #23]
        break;
 800727c:	e005      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800727e:	4ba8      	ldr	r3, [pc, #672]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ef      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d166      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007290:	4ba2      	ldr	r3, [pc, #648]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800729a:	4053      	eors	r3, r2
 800729c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d013      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a4:	4b9d      	ldr	r3, [pc, #628]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072ae:	4b9b      	ldr	r3, [pc, #620]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	4a9a      	ldr	r2, [pc, #616]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072ba:	4b98      	ldr	r3, [pc, #608]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4a97      	ldr	r2, [pc, #604]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072c6:	4a95      	ldr	r2, [pc, #596]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d6:	d115      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fa fea0 	bl	800201c <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072de:	e00b      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e0:	f7fa fe9c 	bl	800201c <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d902      	bls.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	75fb      	strb	r3, [r7, #23]
            break;
 80072f6:	e005      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072f8:	4b88      	ldr	r3, [pc, #544]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0ed      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d126      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007318:	d10d      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800731a:	4b80      	ldr	r3, [pc, #512]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007328:	0919      	lsrs	r1, r3, #4
 800732a:	4b7e      	ldr	r3, [pc, #504]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800732c:	400b      	ands	r3, r1
 800732e:	497b      	ldr	r1, [pc, #492]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007330:	4313      	orrs	r3, r2
 8007332:	610b      	str	r3, [r1, #16]
 8007334:	e005      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007336:	4b79      	ldr	r3, [pc, #484]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	4a78      	ldr	r2, [pc, #480]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800733c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007340:	6113      	str	r3, [r2, #16]
 8007342:	4b76      	ldr	r3, [pc, #472]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800734c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007350:	4972      	ldr	r1, [pc, #456]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007352:	4313      	orrs	r3, r2
 8007354:	670b      	str	r3, [r1, #112]	; 0x70
 8007356:	e004      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	75bb      	strb	r3, [r7, #22]
 800735c:	e001      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d07d      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007372:	2b28      	cmp	r3, #40	; 0x28
 8007374:	d866      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	0800744b 	.word	0x0800744b
 8007380:	08007445 	.word	0x08007445
 8007384:	08007445 	.word	0x08007445
 8007388:	08007445 	.word	0x08007445
 800738c:	08007445 	.word	0x08007445
 8007390:	08007445 	.word	0x08007445
 8007394:	08007445 	.word	0x08007445
 8007398:	08007445 	.word	0x08007445
 800739c:	08007421 	.word	0x08007421
 80073a0:	08007445 	.word	0x08007445
 80073a4:	08007445 	.word	0x08007445
 80073a8:	08007445 	.word	0x08007445
 80073ac:	08007445 	.word	0x08007445
 80073b0:	08007445 	.word	0x08007445
 80073b4:	08007445 	.word	0x08007445
 80073b8:	08007445 	.word	0x08007445
 80073bc:	08007433 	.word	0x08007433
 80073c0:	08007445 	.word	0x08007445
 80073c4:	08007445 	.word	0x08007445
 80073c8:	08007445 	.word	0x08007445
 80073cc:	08007445 	.word	0x08007445
 80073d0:	08007445 	.word	0x08007445
 80073d4:	08007445 	.word	0x08007445
 80073d8:	08007445 	.word	0x08007445
 80073dc:	0800744b 	.word	0x0800744b
 80073e0:	08007445 	.word	0x08007445
 80073e4:	08007445 	.word	0x08007445
 80073e8:	08007445 	.word	0x08007445
 80073ec:	08007445 	.word	0x08007445
 80073f0:	08007445 	.word	0x08007445
 80073f4:	08007445 	.word	0x08007445
 80073f8:	08007445 	.word	0x08007445
 80073fc:	0800744b 	.word	0x0800744b
 8007400:	08007445 	.word	0x08007445
 8007404:	08007445 	.word	0x08007445
 8007408:	08007445 	.word	0x08007445
 800740c:	08007445 	.word	0x08007445
 8007410:	08007445 	.word	0x08007445
 8007414:	08007445 	.word	0x08007445
 8007418:	08007445 	.word	0x08007445
 800741c:	0800744b 	.word	0x0800744b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	2101      	movs	r1, #1
 8007426:	4618      	mov	r0, r3
 8007428:	f001 f96a 	bl	8008700 <RCCEx_PLL2_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007430:	e00c      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3324      	adds	r3, #36	; 0x24
 8007436:	2101      	movs	r1, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fa13 	bl	8008864 <RCCEx_PLL3_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007442:	e003      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	75fb      	strb	r3, [r7, #23]
      break;
 8007448:	e000      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800744a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007452:	4b32      	ldr	r3, [pc, #200]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007456:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800745e:	492f      	ldr	r1, [pc, #188]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007460:	4313      	orrs	r3, r2
 8007462:	654b      	str	r3, [r1, #84]	; 0x54
 8007464:	e001      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d037      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747a:	2b05      	cmp	r3, #5
 800747c:	d820      	bhi.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	080074c7 	.word	0x080074c7
 8007488:	0800749d 	.word	0x0800749d
 800748c:	080074af 	.word	0x080074af
 8007490:	080074c7 	.word	0x080074c7
 8007494:	080074c7 	.word	0x080074c7
 8007498:	080074c7 	.word	0x080074c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	2101      	movs	r1, #1
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 f92c 	bl	8008700 <RCCEx_PLL2_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074ac:	e00c      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3324      	adds	r3, #36	; 0x24
 80074b2:	2101      	movs	r1, #1
 80074b4:	4618      	mov	r0, r3
 80074b6:	f001 f9d5 	bl	8008864 <RCCEx_PLL3_Config>
 80074ba:	4603      	mov	r3, r0
 80074bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074be:	e003      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]
      break;
 80074c4:	e000      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80074c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074ce:	4b13      	ldr	r3, [pc, #76]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d2:	f023 0207 	bic.w	r2, r3, #7
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074da:	4910      	ldr	r1, [pc, #64]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	654b      	str	r3, [r1, #84]	; 0x54
 80074e0:	e001      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d040      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	2b05      	cmp	r3, #5
 80074fa:	d827      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	08007553 	.word	0x08007553
 8007508:	08007529 	.word	0x08007529
 800750c:	0800753b 	.word	0x0800753b
 8007510:	08007553 	.word	0x08007553
 8007514:	08007553 	.word	0x08007553
 8007518:	08007553 	.word	0x08007553
 800751c:	58024400 	.word	0x58024400
 8007520:	58024800 	.word	0x58024800
 8007524:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	2101      	movs	r1, #1
 800752e:	4618      	mov	r0, r3
 8007530:	f001 f8e6 	bl	8008700 <RCCEx_PLL2_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007538:	e00c      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	2101      	movs	r1, #1
 8007540:	4618      	mov	r0, r3
 8007542:	f001 f98f 	bl	8008864 <RCCEx_PLL3_Config>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800754a:	e003      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
      break;
 8007550:	e000      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800755a:	4bb2      	ldr	r3, [pc, #712]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800755c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755e:	f023 0207 	bic.w	r2, r3, #7
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	49ae      	ldr	r1, [pc, #696]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800756a:	4313      	orrs	r3, r2
 800756c:	658b      	str	r3, [r1, #88]	; 0x58
 800756e:	e001      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d044      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758a:	d01b      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800758c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007590:	d805      	bhi.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d022      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800759a:	d00a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800759c:	e01b      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800759e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a2:	d01d      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80075a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a8:	d01c      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80075aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075ae:	d01b      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80075b0:	e011      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 f8a1 	bl	8008700 <RCCEx_PLL2_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075c2:	e012      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	2102      	movs	r1, #2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 f94a 	bl	8008864 <RCCEx_PLL3_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075d4:	e009      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	75fb      	strb	r3, [r7, #23]
      break;
 80075da:	e006      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80075dc:	bf00      	nop
 80075de:	e004      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80075e0:	bf00      	nop
 80075e2:	e002      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80075e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075f0:	4b8c      	ldr	r3, [pc, #560]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075fe:	4989      	ldr	r1, [pc, #548]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007600:	4313      	orrs	r3, r2
 8007602:	654b      	str	r3, [r1, #84]	; 0x54
 8007604:	e001      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d044      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800761c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007620:	d01b      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007626:	d805      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d022      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007630:	d00a      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007632:	e01b      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007638:	d01d      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800763a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800763e:	d01c      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007644:	d01b      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007646:	e011      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3304      	adds	r3, #4
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f001 f856 	bl	8008700 <RCCEx_PLL2_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007658:	e012      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3324      	adds	r3, #36	; 0x24
 800765e:	2102      	movs	r1, #2
 8007660:	4618      	mov	r0, r3
 8007662:	f001 f8ff 	bl	8008864 <RCCEx_PLL3_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800766a:	e009      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	75fb      	strb	r3, [r7, #23]
      break;
 8007670:	e006      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007672:	bf00      	nop
 8007674:	e004      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007676:	bf00      	nop
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800767e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007686:	4b67      	ldr	r3, [pc, #412]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007694:	4963      	ldr	r1, [pc, #396]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007696:	4313      	orrs	r3, r2
 8007698:	658b      	str	r3, [r1, #88]	; 0x58
 800769a:	e001      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d044      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b6:	d01b      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80076b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076bc:	d805      	bhi.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d022      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c6:	d00a      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80076c8:	e01b      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80076ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ce:	d01d      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80076d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076d4:	d01c      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80076d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076da:	d01b      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80076dc:	e011      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2100      	movs	r1, #0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 f80b 	bl	8008700 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076ee:	e012      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3324      	adds	r3, #36	; 0x24
 80076f4:	2102      	movs	r1, #2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 f8b4 	bl	8008864 <RCCEx_PLL3_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007700:	e009      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	75fb      	strb	r3, [r7, #23]
      break;
 8007706:	e006      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007708:	bf00      	nop
 800770a:	e004      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800770c:	bf00      	nop
 800770e:	e002      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800771c:	4b41      	ldr	r3, [pc, #260]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800771e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007720:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800772a:	493e      	ldr	r1, [pc, #248]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800772c:	4313      	orrs	r3, r2
 800772e:	658b      	str	r3, [r1, #88]	; 0x58
 8007730:	e001      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774c:	d10a      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3324      	adds	r3, #36	; 0x24
 8007752:	2102      	movs	r1, #2
 8007754:	4618      	mov	r0, r3
 8007756:	f001 f885 	bl	8008864 <RCCEx_PLL3_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007764:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007768:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007772:	492c      	ldr	r1, [pc, #176]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007774:	4313      	orrs	r3, r2
 8007776:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01a      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800778a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778e:	d10a      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3324      	adds	r3, #36	; 0x24
 8007794:	2102      	movs	r1, #2
 8007796:	4618      	mov	r0, r3
 8007798:	f001 f864 	bl	8008864 <RCCEx_PLL3_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077a6:	4b1f      	ldr	r3, [pc, #124]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b4:	491b      	ldr	r1, [pc, #108]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d032      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d0:	d00d      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80077d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d6:	d016      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d111      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 ff8c 	bl	8008700 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077ec:	e00c      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3324      	adds	r3, #36	; 0x24
 80077f2:	2102      	movs	r1, #2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 f835 	bl	8008864 <RCCEx_PLL3_Config>
 80077fa:	4603      	mov	r3, r0
 80077fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077fe:	e003      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	75fb      	strb	r3, [r7, #23]
      break;
 8007804:	e000      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10c      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800780e:	4b05      	ldr	r3, [pc, #20]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007812:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800781c:	4901      	ldr	r1, [pc, #4]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800781e:	4313      	orrs	r3, r2
 8007820:	658b      	str	r3, [r1, #88]	; 0x58
 8007822:	e003      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d02f      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007842:	d00c      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007848:	d015      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784e:	d10f      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007850:	4b71      	ldr	r3, [pc, #452]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	4a70      	ldr	r2, [pc, #448]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800785c:	e00c      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3324      	adds	r3, #36	; 0x24
 8007862:	2101      	movs	r1, #1
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fffd 	bl	8008864 <RCCEx_PLL3_Config>
 800786a:	4603      	mov	r3, r0
 800786c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800786e:	e003      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
      break;
 8007874:	e000      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800787e:	4b66      	ldr	r3, [pc, #408]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800788c:	4962      	ldr	r1, [pc, #392]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800788e:	4313      	orrs	r3, r2
 8007890:	654b      	str	r3, [r1, #84]	; 0x54
 8007892:	e001      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d029      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d007      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80078b2:	e00f      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b4:	4b58      	ldr	r3, [pc, #352]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a57      	ldr	r2, [pc, #348]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078c0:	e00b      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3304      	adds	r3, #4
 80078c6:	2102      	movs	r1, #2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 ff19 	bl	8008700 <RCCEx_PLL2_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078d2:	e002      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75fb      	strb	r3, [r7, #23]
      break;
 80078d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078e0:	4b4d      	ldr	r3, [pc, #308]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ec:	494a      	ldr	r1, [pc, #296]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078f2:	e001      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3324      	adds	r3, #36	; 0x24
 8007908:	2102      	movs	r1, #2
 800790a:	4618      	mov	r0, r3
 800790c:	f000 ffaa 	bl	8008864 <RCCEx_PLL3_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02f      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800792a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792e:	d00c      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007934:	d802      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d011      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800793a:	e00d      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800793c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007940:	d00f      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007946:	d00e      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007948:	e006      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800794a:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	4a32      	ldr	r2, [pc, #200]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007956:	e007      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	75fb      	strb	r3, [r7, #23]
      break;
 800795c:	e004      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800795e:	bf00      	nop
 8007960:	e002      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007962:	bf00      	nop
 8007964:	e000      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800796e:	4b2a      	ldr	r3, [pc, #168]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800797a:	4927      	ldr	r1, [pc, #156]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800797c:	4313      	orrs	r3, r2
 800797e:	654b      	str	r3, [r1, #84]	; 0x54
 8007980:	e001      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007992:	4b21      	ldr	r3, [pc, #132]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007996:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799e:	491e      	ldr	r1, [pc, #120]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079b0:	4b19      	ldr	r3, [pc, #100]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079bc:	4916      	ldr	r1, [pc, #88]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079ce:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079d8:	6113      	str	r3, [r2, #16]
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80079e4:	490c      	ldr	r1, [pc, #48]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da08      	bge.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fe:	4906      	ldr	r1, [pc, #24]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007a04:	7dbb      	ldrb	r3, [r7, #22]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e000      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	58024400 	.word	0x58024400

08007a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b090      	sub	sp, #64	; 0x40
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2a:	d150      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007a2c:	4ba1      	ldr	r3, [pc, #644]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d844      	bhi.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007a3c:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a59 	.word	0x08007a59
 8007a48:	08007a69 	.word	0x08007a69
 8007a4c:	08007a79 	.word	0x08007a79
 8007a50:	08007ac1 	.word	0x08007ac1
 8007a54:	08007a89 	.word	0x08007a89
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fd03 	bl	8008468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a66:	e241      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a68:	f107 0318 	add.w	r3, r7, #24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fa63 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a76:	e239      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a78:	f107 030c 	add.w	r3, r7, #12
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fba7 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a86:	e231      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a88:	4b8a      	ldr	r3, [pc, #552]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a98:	4b87      	ldr	r3, [pc, #540]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a9c:	e226      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aa4:	d102      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007aa6:	4b85      	ldr	r3, [pc, #532]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aaa:	e21f      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab2:	d102      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007ab4:	4b82      	ldr	r3, [pc, #520]	; (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab8:	e218      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007abe:	e215      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ac0:	4b80      	ldr	r3, [pc, #512]	; (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac4:	e212      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aca:	bf00      	nop
 8007acc:	e20e      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad4:	d14f      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007ad6:	4b77      	ldr	r3, [pc, #476]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ada:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	2b80      	cmp	r3, #128	; 0x80
 8007ae4:	d01c      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007ae6:	2b80      	cmp	r3, #128	; 0x80
 8007ae8:	d804      	bhi.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d008      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007aee:	2b40      	cmp	r3, #64	; 0x40
 8007af0:	d00e      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007af2:	e03c      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007af4:	2bc0      	cmp	r3, #192	; 0xc0
 8007af6:	d037      	beq.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afc:	d018      	beq.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007afe:	e036      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fcaf 	bl	8008468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b0e:	e1ed      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b10:	f107 0318 	add.w	r3, r7, #24
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fa0f 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1e:	e1e5      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fb53 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b2e:	e1dd      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b30:	4b60      	ldr	r3, [pc, #384]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b40:	4b5d      	ldr	r3, [pc, #372]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b44:	e1d2      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b4c:	d102      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007b4e:	4b5b      	ldr	r3, [pc, #364]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b52:	e1cb      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b5a:	d102      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007b5c:	4b58      	ldr	r3, [pc, #352]	; (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b60:	e1c4      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b66:	e1c1      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b68:	4b56      	ldr	r3, [pc, #344]	; (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b6c:	e1be      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b72:	bf00      	nop
 8007b74:	e1ba      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b7c:	d153      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007b7e:	4b4d      	ldr	r3, [pc, #308]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007b86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b8e:	d01f      	beq.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b94:	d805      	bhi.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b9e:	d00f      	beq.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007ba0:	e03d      	b.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007ba2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ba6:	d037      	beq.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bac:	d018      	beq.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007bae:	e036      	b.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fc57 	bl	8008468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bbe:	e195      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc0:	f107 0318 	add.w	r3, r7, #24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 f9b7 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bce:	e18d      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd0:	f107 030c 	add.w	r3, r7, #12
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fafb 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bde:	e185      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007be0:	4b34      	ldr	r3, [pc, #208]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d102      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bf0:	4b31      	ldr	r3, [pc, #196]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007bf4:	e17a      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bfc:	d102      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007bfe:	4b2f      	ldr	r3, [pc, #188]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c02:	e173      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0a:	d102      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007c0c:	4b2c      	ldr	r3, [pc, #176]	; (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c10:	e16c      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c16:	e169      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c18:	4b2a      	ldr	r3, [pc, #168]	; (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1c:	e166      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c22:	bf00      	nop
 8007c24:	e162      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c2c:	d15d      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007c2e:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c32:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007c36:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c3e:	d01f      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c44:	d805      	bhi.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c4e:	d00f      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007c50:	e047      	b.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c56:	d041      	beq.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c5c:	d018      	beq.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007c5e:	e040      	b.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fbff 	bl	8008468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c6e:	e13d      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c70:	f107 0318 	add.w	r3, r7, #24
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f95f 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c7e:	e135      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c80:	f107 030c 	add.w	r3, r7, #12
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 faa3 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c8e:	e12d      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c90:	4b08      	ldr	r3, [pc, #32]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ca0:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007ca4:	e122      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cac:	d10c      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007cae:	4b03      	ldr	r3, [pc, #12]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb2:	e11b      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007cb4:	58024400 	.word	0x58024400
 8007cb8:	03d09000 	.word	0x03d09000
 8007cbc:	003d0900 	.word	0x003d0900
 8007cc0:	017d7840 	.word	0x017d7840
 8007cc4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007cd0:	4b89      	ldr	r3, [pc, #548]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd4:	e10a      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cda:	e107      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cdc:	4b87      	ldr	r3, [pc, #540]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ce0:	e104      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ce6:	bf00      	nop
 8007ce8:	e100      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf0:	d153      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007cf2:	4b83      	ldr	r3, [pc, #524]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d02:	d01f      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d08:	d805      	bhi.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d12:	d00f      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007d14:	e03d      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007d16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d1a:	d037      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d20:	d018      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007d22:	e036      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fb9d 	bl	8008468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d32:	e0db      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d34:	f107 0318 	add.w	r3, r7, #24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 f8fd 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d42:	e0d3      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d44:	f107 030c 	add.w	r3, r7, #12
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fa41 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d52:	e0cb      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d54:	4b6a      	ldr	r3, [pc, #424]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d5c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d64:	4b67      	ldr	r3, [pc, #412]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d68:	e0c0      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d70:	d102      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007d72:	4b65      	ldr	r3, [pc, #404]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d76:	e0b9      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7e:	d102      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007d80:	4b5d      	ldr	r3, [pc, #372]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d84:	e0b2      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d8a:	e0af      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d8c:	4b5b      	ldr	r3, [pc, #364]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d90:	e0ac      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d96:	bf00      	nop
 8007d98:	e0a8      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007da0:	d13d      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007da2:	4b57      	ldr	r3, [pc, #348]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007db2:	d00c      	beq.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007db8:	d011      	beq.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d12b      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dbe:	f107 0318 	add.w	r3, r7, #24
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f8b8 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dcc:	e08e      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dce:	f107 030c 	add.w	r3, r7, #12
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f9fc 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ddc:	e086      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dde:	4b48      	ldr	r3, [pc, #288]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007de6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007dee:	4b45      	ldr	r3, [pc, #276]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007df2:	e07b      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dfa:	d102      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007dfc:	4b42      	ldr	r3, [pc, #264]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e00:	e074      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e08:	d102      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007e0a:	4b3b      	ldr	r3, [pc, #236]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0e:	e06d      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e14:	e06a      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1a:	bf00      	nop
 8007e1c:	e066      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e24:	d11f      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007e26:	4b36      	ldr	r3, [pc, #216]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3a:	d008      	beq.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007e3c:	e00f      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fb10 	bl	8008468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e4c:	e04e      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e4e:	f107 0318 	add.w	r3, r7, #24
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 f870 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e5c:	e046      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e62:	bf00      	nop
 8007e64:	e042      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e6c:	d13c      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007e6e:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e72:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007e76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7e:	d01e      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e84:	d805      	bhi.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00d      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e8e:	d00e      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007e90:	e026      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e96:	d01d      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e9c:	d01d      	beq.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007e9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ea2:	d014      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007ea4:	e01c      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ea6:	f000 f831 	bl	8007f0c <HAL_RCCEx_GetD3PCLK1Freq>
 8007eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007eac:	e01e      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eae:	f107 0318 	add.w	r3, r7, #24
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f840 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ebc:	e016      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ebe:	f107 030c 	add.w	r3, r7, #12
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f984 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ecc:	e00e      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007ece:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed2:	e00b      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed8:	e008      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007eda:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ede:	e005      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee4:	bf00      	nop
 8007ee6:	e001      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3740      	adds	r7, #64	; 0x40
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	017d7840 	.word	0x017d7840
 8007efc:	00bb8000 	.word	0x00bb8000
 8007f00:	58024400 	.word	0x58024400
 8007f04:	03d09000 	.word	0x03d09000
 8007f08:	003d0900 	.word	0x003d0900

08007f0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f10:	f7fe fe4a 	bl	8006ba8 <HAL_RCC_GetHCLKFreq>
 8007f14:	4601      	mov	r1, r0
 8007f16:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	091b      	lsrs	r3, r3, #4
 8007f1c:	f003 0307 	and.w	r3, r3, #7
 8007f20:	4a04      	ldr	r2, [pc, #16]	; (8007f34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f22:	5cd3      	ldrb	r3, [r2, r3]
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	58024400 	.word	0x58024400
 8007f34:	0800c884 	.word	0x0800c884

08007f38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b089      	sub	sp, #36	; 0x24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f40:	4b9d      	ldr	r3, [pc, #628]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f4a:	4b9b      	ldr	r3, [pc, #620]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	0b1b      	lsrs	r3, r3, #12
 8007f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f56:	4b98      	ldr	r3, [pc, #608]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	091b      	lsrs	r3, r3, #4
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f62:	4b95      	ldr	r3, [pc, #596]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f66:	08db      	lsrs	r3, r3, #3
 8007f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 810a 	beq.w	800819a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d05a      	beq.n	8008042 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d302      	bcc.n	8007f96 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d078      	beq.n	8008086 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007f94:	e099      	b.n	80080ca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f96:	4b88      	ldr	r3, [pc, #544]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d02d      	beq.n	8007ffe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fa2:	4b85      	ldr	r3, [pc, #532]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	08db      	lsrs	r3, r3, #3
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	4a83      	ldr	r2, [pc, #524]	; (80081bc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007fae:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	ee07 3a90 	vmov	s15, r3
 8007fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fcc:	4b7a      	ldr	r3, [pc, #488]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd4:	ee07 3a90 	vmov	s15, r3
 8007fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ffc:	e087      	b.n	800810e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	ee07 3a90 	vmov	s15, r3
 8008004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008008:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800800c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008010:	4b69      	ldr	r3, [pc, #420]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008018:	ee07 3a90 	vmov	s15, r3
 800801c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008020:	ed97 6a03 	vldr	s12, [r7, #12]
 8008024:	eddf 5a66 	vldr	s11, [pc, #408]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008040:	e065      	b.n	800810e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	ee07 3a90 	vmov	s15, r3
 8008048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008054:	4b58      	ldr	r3, [pc, #352]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805c:	ee07 3a90 	vmov	s15, r3
 8008060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008064:	ed97 6a03 	vldr	s12, [r7, #12]
 8008068:	eddf 5a55 	vldr	s11, [pc, #340]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800806c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008080:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008084:	e043      	b.n	800810e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	ee07 3a90 	vmov	s15, r3
 800808c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008090:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008098:	4b47      	ldr	r3, [pc, #284]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a0:	ee07 3a90 	vmov	s15, r3
 80080a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080c8:	e021      	b.n	800810e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80080d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080dc:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008108:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800810c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800810e:	4b2a      	ldr	r3, [pc, #168]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	0a5b      	lsrs	r3, r3, #9
 8008114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008118:	ee07 3a90 	vmov	s15, r3
 800811c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008124:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008128:	edd7 6a07 	vldr	s13, [r7, #28]
 800812c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008134:	ee17 2a90 	vmov	r2, s15
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800813c:	4b1e      	ldr	r3, [pc, #120]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800813e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008140:	0c1b      	lsrs	r3, r3, #16
 8008142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008156:	edd7 6a07 	vldr	s13, [r7, #28]
 800815a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008162:	ee17 2a90 	vmov	r2, s15
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800816a:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816e:	0e1b      	lsrs	r3, r3, #24
 8008170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008174:	ee07 3a90 	vmov	s15, r3
 8008178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008180:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008184:	edd7 6a07 	vldr	s13, [r7, #28]
 8008188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800818c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008190:	ee17 2a90 	vmov	r2, s15
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008198:	e008      	b.n	80081ac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	609a      	str	r2, [r3, #8]
}
 80081ac:	bf00      	nop
 80081ae:	3724      	adds	r7, #36	; 0x24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	58024400 	.word	0x58024400
 80081bc:	03d09000 	.word	0x03d09000
 80081c0:	46000000 	.word	0x46000000
 80081c4:	4c742400 	.word	0x4c742400
 80081c8:	4a742400 	.word	0x4a742400
 80081cc:	4bbebc20 	.word	0x4bbebc20

080081d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b089      	sub	sp, #36	; 0x24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081d8:	4b9d      	ldr	r3, [pc, #628]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80081e2:	4b9b      	ldr	r3, [pc, #620]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	0d1b      	lsrs	r3, r3, #20
 80081e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081ee:	4b98      	ldr	r3, [pc, #608]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	0a1b      	lsrs	r3, r3, #8
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081fa:	4b95      	ldr	r3, [pc, #596]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	08db      	lsrs	r3, r3, #3
 8008200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 810a 	beq.w	8008432 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d05a      	beq.n	80082da <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008224:	2b01      	cmp	r3, #1
 8008226:	d302      	bcc.n	800822e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008228:	2b02      	cmp	r3, #2
 800822a:	d078      	beq.n	800831e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800822c:	e099      	b.n	8008362 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800822e:	4b88      	ldr	r3, [pc, #544]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d02d      	beq.n	8008296 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800823a:	4b85      	ldr	r3, [pc, #532]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	08db      	lsrs	r3, r3, #3
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	4a83      	ldr	r2, [pc, #524]	; (8008454 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008246:	fa22 f303 	lsr.w	r3, r2, r3
 800824a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008264:	4b7a      	ldr	r3, [pc, #488]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008274:	ed97 6a03 	vldr	s12, [r7, #12]
 8008278:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800827c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008290:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008294:	e087      	b.n	80083a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	ee07 3a90 	vmov	s15, r3
 800829c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800845c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80082a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a8:	4b69      	ldr	r3, [pc, #420]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b0:	ee07 3a90 	vmov	s15, r3
 80082b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80082c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082d8:	e065      	b.n	80083a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	ee07 3a90 	vmov	s15, r3
 80082e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80082e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ec:	4b58      	ldr	r3, [pc, #352]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008300:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008318:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800831c:	e043      	b.n	80083a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008328:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008464 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800832c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008330:	4b47      	ldr	r3, [pc, #284]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008340:	ed97 6a03 	vldr	s12, [r7, #12]
 8008344:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800834c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008360:	e021      	b.n	80083a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	ee07 3a90 	vmov	s15, r3
 8008368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008374:	4b36      	ldr	r3, [pc, #216]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008384:	ed97 6a03 	vldr	s12, [r7, #12]
 8008388:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800838c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083a4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80083a6:	4b2a      	ldr	r3, [pc, #168]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	0a5b      	lsrs	r3, r3, #9
 80083ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083cc:	ee17 2a90 	vmov	r2, s15
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	0c1b      	lsrs	r3, r3, #16
 80083da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fa:	ee17 2a90 	vmov	r2, s15
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008402:	4b13      	ldr	r3, [pc, #76]	; (8008450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	0e1b      	lsrs	r3, r3, #24
 8008408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800841c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008428:	ee17 2a90 	vmov	r2, s15
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008430:	e008      	b.n	8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	609a      	str	r2, [r3, #8]
}
 8008444:	bf00      	nop
 8008446:	3724      	adds	r7, #36	; 0x24
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	58024400 	.word	0x58024400
 8008454:	03d09000 	.word	0x03d09000
 8008458:	46000000 	.word	0x46000000
 800845c:	4c742400 	.word	0x4c742400
 8008460:	4a742400 	.word	0x4a742400
 8008464:	4bbebc20 	.word	0x4bbebc20

08008468 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008468:	b480      	push	{r7}
 800846a:	b089      	sub	sp, #36	; 0x24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008470:	4b9d      	ldr	r3, [pc, #628]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800847a:	4b9b      	ldr	r3, [pc, #620]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	091b      	lsrs	r3, r3, #4
 8008480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008484:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008486:	4b98      	ldr	r3, [pc, #608]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008490:	4b95      	ldr	r3, [pc, #596]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008494:	08db      	lsrs	r3, r3, #3
 8008496:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	fb02 f303 	mul.w	r3, r2, r3
 80084a0:	ee07 3a90 	vmov	s15, r3
 80084a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 810a 	beq.w	80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d05a      	beq.n	8008570 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d302      	bcc.n	80084c4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d078      	beq.n	80085b4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80084c2:	e099      	b.n	80085f8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c4:	4b88      	ldr	r3, [pc, #544]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d02d      	beq.n	800852c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084d0:	4b85      	ldr	r3, [pc, #532]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	08db      	lsrs	r3, r3, #3
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	4a84      	ldr	r2, [pc, #528]	; (80086ec <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fa:	4b7b      	ldr	r3, [pc, #492]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850a:	ed97 6a03 	vldr	s12, [r7, #12]
 800850e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800851e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008526:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800852a:	e087      	b.n	800863c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800853a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853e:	4b6a      	ldr	r3, [pc, #424]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008552:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800856e:	e065      	b.n	800863c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800857e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008582:	4b59      	ldr	r3, [pc, #356]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008592:	ed97 6a03 	vldr	s12, [r7, #12]
 8008596:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800859a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085b2:	e043      	b.n	800863c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c6:	4b48      	ldr	r3, [pc, #288]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f6:	e021      	b.n	800863c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008602:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860a:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861a:	ed97 6a03 	vldr	s12, [r7, #12]
 800861e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800862e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800863a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800863c:	4b2a      	ldr	r3, [pc, #168]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	0a5b      	lsrs	r3, r3, #9
 8008642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008656:	edd7 6a07 	vldr	s13, [r7, #28]
 800865a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008662:	ee17 2a90 	vmov	r2, s15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800866a:	4b1f      	ldr	r3, [pc, #124]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	0c1b      	lsrs	r3, r3, #16
 8008670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008684:	edd7 6a07 	vldr	s13, [r7, #28]
 8008688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008690:	ee17 2a90 	vmov	r2, s15
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008698:	4b13      	ldr	r3, [pc, #76]	; (80086e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	0e1b      	lsrs	r3, r3, #24
 800869e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086be:	ee17 2a90 	vmov	r2, s15
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086c6:	e008      	b.n	80086da <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	609a      	str	r2, [r3, #8]
}
 80086da:	bf00      	nop
 80086dc:	3724      	adds	r7, #36	; 0x24
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	58024400 	.word	0x58024400
 80086ec:	03d09000 	.word	0x03d09000
 80086f0:	46000000 	.word	0x46000000
 80086f4:	4c742400 	.word	0x4c742400
 80086f8:	4a742400 	.word	0x4a742400
 80086fc:	4bbebc20 	.word	0x4bbebc20

08008700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800870e:	4b53      	ldr	r3, [pc, #332]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	2b03      	cmp	r3, #3
 8008718:	d101      	bne.n	800871e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e099      	b.n	8008852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800871e:	4b4f      	ldr	r3, [pc, #316]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a4e      	ldr	r2, [pc, #312]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800872a:	f7f9 fc77 	bl	800201c <HAL_GetTick>
 800872e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008730:	e008      	b.n	8008744 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008732:	f7f9 fc73 	bl	800201c <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d901      	bls.n	8008744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e086      	b.n	8008852 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008744:	4b45      	ldr	r3, [pc, #276]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f0      	bne.n	8008732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008750:	4b42      	ldr	r3, [pc, #264]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	031b      	lsls	r3, r3, #12
 800875e:	493f      	ldr	r1, [pc, #252]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008760:	4313      	orrs	r3, r2
 8008762:	628b      	str	r3, [r1, #40]	; 0x28
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	3b01      	subs	r3, #1
 800876a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	3b01      	subs	r3, #1
 8008774:	025b      	lsls	r3, r3, #9
 8008776:	b29b      	uxth	r3, r3
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	3b01      	subs	r3, #1
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	3b01      	subs	r3, #1
 800878e:	061b      	lsls	r3, r3, #24
 8008790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008794:	4931      	ldr	r1, [pc, #196]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008796:	4313      	orrs	r3, r2
 8008798:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800879a:	4b30      	ldr	r3, [pc, #192]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 800879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	492d      	ldr	r1, [pc, #180]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087ac:	4b2b      	ldr	r3, [pc, #172]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f023 0220 	bic.w	r2, r3, #32
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	4928      	ldr	r1, [pc, #160]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087be:	4b27      	ldr	r3, [pc, #156]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	4a26      	ldr	r2, [pc, #152]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087c4:	f023 0310 	bic.w	r3, r3, #16
 80087c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <RCCEx_PLL2_Config+0x160>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	69d2      	ldr	r2, [r2, #28]
 80087d6:	00d2      	lsls	r2, r2, #3
 80087d8:	4920      	ldr	r1, [pc, #128]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087de:	4b1f      	ldr	r3, [pc, #124]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e2:	4a1e      	ldr	r2, [pc, #120]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087e4:	f043 0310 	orr.w	r3, r3, #16
 80087e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d106      	bne.n	80087fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087f0:	4b1a      	ldr	r3, [pc, #104]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f4:	4a19      	ldr	r2, [pc, #100]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 80087f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087fc:	e00f      	b.n	800881e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d106      	bne.n	8008812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008804:	4b15      	ldr	r3, [pc, #84]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	4a14      	ldr	r2, [pc, #80]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 800880a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800880e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008810:	e005      	b.n	800881e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008812:	4b12      	ldr	r3, [pc, #72]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	4a11      	ldr	r2, [pc, #68]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800881c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800881e:	4b0f      	ldr	r3, [pc, #60]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a0e      	ldr	r2, [pc, #56]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882a:	f7f9 fbf7 	bl	800201c <HAL_GetTick>
 800882e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008830:	e008      	b.n	8008844 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008832:	f7f9 fbf3 	bl	800201c <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e006      	b.n	8008852 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <RCCEx_PLL2_Config+0x15c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f0      	beq.n	8008832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	58024400 	.word	0x58024400
 8008860:	ffff0007 	.word	0xffff0007

08008864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008872:	4b53      	ldr	r3, [pc, #332]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	2b03      	cmp	r3, #3
 800887c:	d101      	bne.n	8008882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e099      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008882:	4b4f      	ldr	r3, [pc, #316]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a4e      	ldr	r2, [pc, #312]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800888c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800888e:	f7f9 fbc5 	bl	800201c <HAL_GetTick>
 8008892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008894:	e008      	b.n	80088a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008896:	f7f9 fbc1 	bl	800201c <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e086      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088a8:	4b45      	ldr	r3, [pc, #276]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f0      	bne.n	8008896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088b4:	4b42      	ldr	r3, [pc, #264]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	051b      	lsls	r3, r3, #20
 80088c2:	493f      	ldr	r1, [pc, #252]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	628b      	str	r3, [r1, #40]	; 0x28
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	025b      	lsls	r3, r3, #9
 80088da:	b29b      	uxth	r3, r3
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088ea:	431a      	orrs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	061b      	lsls	r3, r3, #24
 80088f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088f8:	4931      	ldr	r1, [pc, #196]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088fe:	4b30      	ldr	r3, [pc, #192]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	492d      	ldr	r1, [pc, #180]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800890c:	4313      	orrs	r3, r2
 800890e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008910:	4b2b      	ldr	r3, [pc, #172]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	4928      	ldr	r1, [pc, #160]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008922:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	4a26      	ldr	r2, [pc, #152]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800892c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800892e:	4b24      	ldr	r3, [pc, #144]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008932:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <RCCEx_PLL3_Config+0x160>)
 8008934:	4013      	ands	r3, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	69d2      	ldr	r2, [r2, #28]
 800893a:	00d2      	lsls	r2, r2, #3
 800893c:	4920      	ldr	r1, [pc, #128]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800893e:	4313      	orrs	r3, r2
 8008940:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008942:	4b1f      	ldr	r3, [pc, #124]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	4a1e      	ldr	r2, [pc, #120]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800894c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008954:	4b1a      	ldr	r3, [pc, #104]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	4a19      	ldr	r2, [pc, #100]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800895a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800895e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008960:	e00f      	b.n	8008982 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d106      	bne.n	8008976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008968:	4b15      	ldr	r3, [pc, #84]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	4a14      	ldr	r2, [pc, #80]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800896e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008972:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008974:	e005      	b.n	8008982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008976:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	4a11      	ldr	r2, [pc, #68]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 800897c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008980:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008982:	4b0f      	ldr	r3, [pc, #60]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a0e      	ldr	r2, [pc, #56]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 8008988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800898c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800898e:	f7f9 fb45 	bl	800201c <HAL_GetTick>
 8008992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008994:	e008      	b.n	80089a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008996:	f7f9 fb41 	bl	800201c <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e006      	b.n	80089b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089a8:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <RCCEx_PLL3_Config+0x15c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	58024400 	.word	0x58024400
 80089c4:	ffff0007 	.word	0xffff0007

080089c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e01d      	b.n	8008a16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7f8 ff6a 	bl	80018c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f000 f97c 	bl	8008d04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <HAL_TIM_Base_Start_IT+0x50>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b06      	cmp	r3, #6
 8008a48:	d00b      	beq.n	8008a62 <HAL_TIM_Base_Start_IT+0x42>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a50:	d007      	beq.n	8008a62 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0201 	orr.w	r2, r2, #1
 8008a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	00010007 	.word	0x00010007

08008a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d122      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d11b      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f06f 0202 	mvn.w	r2, #2
 8008aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f905 	bl	8008cc6 <HAL_TIM_IC_CaptureCallback>
 8008abc:	e005      	b.n	8008aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8f7 	bl	8008cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f908 	bl	8008cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0304 	and.w	r3, r3, #4
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	d122      	bne.n	8008b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d11b      	bne.n	8008b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0204 	mvn.w	r2, #4
 8008af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f8db 	bl	8008cc6 <HAL_TIM_IC_CaptureCallback>
 8008b10:	e005      	b.n	8008b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f8cd 	bl	8008cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8de 	bl	8008cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b08      	cmp	r3, #8
 8008b30:	d122      	bne.n	8008b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d11b      	bne.n	8008b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f06f 0208 	mvn.w	r2, #8
 8008b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f003 0303 	and.w	r3, r3, #3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f8b1 	bl	8008cc6 <HAL_TIM_IC_CaptureCallback>
 8008b64:	e005      	b.n	8008b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f8a3 	bl	8008cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f8b4 	bl	8008cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f003 0310 	and.w	r3, r3, #16
 8008b82:	2b10      	cmp	r3, #16
 8008b84:	d122      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d11b      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f06f 0210 	mvn.w	r2, #16
 8008b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f887 	bl	8008cc6 <HAL_TIM_IC_CaptureCallback>
 8008bb8:	e005      	b.n	8008bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f879 	bl	8008cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f88a 	bl	8008cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d10e      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d107      	bne.n	8008bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0201 	mvn.w	r2, #1
 8008bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7f7 ff62 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d10e      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c10:	2b80      	cmp	r3, #128	; 0x80
 8008c12:	d107      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f99c 	bl	8008f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c32:	d10e      	bne.n	8008c52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3e:	2b80      	cmp	r3, #128	; 0x80
 8008c40:	d107      	bne.n	8008c52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f98f 	bl	8008f70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5c:	2b40      	cmp	r3, #64	; 0x40
 8008c5e:	d10e      	bne.n	8008c7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b40      	cmp	r3, #64	; 0x40
 8008c6c:	d107      	bne.n	8008c7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f838 	bl	8008cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f003 0320 	and.w	r3, r3, #32
 8008c88:	2b20      	cmp	r3, #32
 8008c8a:	d10e      	bne.n	8008caa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d107      	bne.n	8008caa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f06f 0220 	mvn.w	r2, #32
 8008ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f94f 	bl	8008f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cba:	bf00      	nop
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cce:	bf00      	nop
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ce2:	bf00      	nop
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b083      	sub	sp, #12
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
	...

08008d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a40      	ldr	r2, [pc, #256]	; (8008e18 <TIM_Base_SetConfig+0x114>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d013      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d22:	d00f      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a3d      	ldr	r2, [pc, #244]	; (8008e1c <TIM_Base_SetConfig+0x118>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00b      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a3c      	ldr	r2, [pc, #240]	; (8008e20 <TIM_Base_SetConfig+0x11c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d007      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a3b      	ldr	r2, [pc, #236]	; (8008e24 <TIM_Base_SetConfig+0x120>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d003      	beq.n	8008d44 <TIM_Base_SetConfig+0x40>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a3a      	ldr	r2, [pc, #232]	; (8008e28 <TIM_Base_SetConfig+0x124>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d108      	bne.n	8008d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a2f      	ldr	r2, [pc, #188]	; (8008e18 <TIM_Base_SetConfig+0x114>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d01f      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d64:	d01b      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a2c      	ldr	r2, [pc, #176]	; (8008e1c <TIM_Base_SetConfig+0x118>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d017      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a2b      	ldr	r2, [pc, #172]	; (8008e20 <TIM_Base_SetConfig+0x11c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d013      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a2a      	ldr	r2, [pc, #168]	; (8008e24 <TIM_Base_SetConfig+0x120>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00f      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a29      	ldr	r2, [pc, #164]	; (8008e28 <TIM_Base_SetConfig+0x124>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00b      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a28      	ldr	r2, [pc, #160]	; (8008e2c <TIM_Base_SetConfig+0x128>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d007      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a27      	ldr	r2, [pc, #156]	; (8008e30 <TIM_Base_SetConfig+0x12c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d003      	beq.n	8008d9e <TIM_Base_SetConfig+0x9a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a26      	ldr	r2, [pc, #152]	; (8008e34 <TIM_Base_SetConfig+0x130>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d108      	bne.n	8008db0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a10      	ldr	r2, [pc, #64]	; (8008e18 <TIM_Base_SetConfig+0x114>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00f      	beq.n	8008dfc <TIM_Base_SetConfig+0xf8>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a12      	ldr	r2, [pc, #72]	; (8008e28 <TIM_Base_SetConfig+0x124>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00b      	beq.n	8008dfc <TIM_Base_SetConfig+0xf8>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <TIM_Base_SetConfig+0x128>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d007      	beq.n	8008dfc <TIM_Base_SetConfig+0xf8>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a10      	ldr	r2, [pc, #64]	; (8008e30 <TIM_Base_SetConfig+0x12c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_Base_SetConfig+0xf8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a0f      	ldr	r2, [pc, #60]	; (8008e34 <TIM_Base_SetConfig+0x130>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d103      	bne.n	8008e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	615a      	str	r2, [r3, #20]
}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	40010000 	.word	0x40010000
 8008e1c:	40000400 	.word	0x40000400
 8008e20:	40000800 	.word	0x40000800
 8008e24:	40000c00 	.word	0x40000c00
 8008e28:	40010400 	.word	0x40010400
 8008e2c:	40014000 	.word	0x40014000
 8008e30:	40014400 	.word	0x40014400
 8008e34:	40014800 	.word	0x40014800

08008e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d101      	bne.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e068      	b.n	8008f22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a2e      	ldr	r2, [pc, #184]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d004      	beq.n	8008e84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a2d      	ldr	r2, [pc, #180]	; (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d108      	bne.n	8008e96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1e      	ldr	r2, [pc, #120]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01d      	beq.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec2:	d018      	beq.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a1b      	ldr	r2, [pc, #108]	; (8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d013      	beq.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1a      	ldr	r2, [pc, #104]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00e      	beq.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a18      	ldr	r2, [pc, #96]	; (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d009      	beq.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a13      	ldr	r2, [pc, #76]	; (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d004      	beq.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a14      	ldr	r2, [pc, #80]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d10c      	bne.n	8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40010000 	.word	0x40010000
 8008f34:	40010400 	.word	0x40010400
 8008f38:	40000400 	.word	0x40000400
 8008f3c:	40000800 	.word	0x40000800
 8008f40:	40000c00 	.word	0x40000c00
 8008f44:	40001800 	.word	0x40001800

08008f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e042      	b.n	800901c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d106      	bne.n	8008fae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7f8 fcb5 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2224      	movs	r2, #36	; 0x24
 8008fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0201 	bic.w	r2, r2, #1
 8008fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fc3a 	bl	8009840 <UART_SetConfig>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d101      	bne.n	8008fd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e022      	b.n	800901c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f002 fdac 	bl	800bb3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0201 	orr.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f002 fe33 	bl	800bc80 <UART_CheckIdleState>
 800901a:	4603      	mov	r3, r0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af02      	add	r7, sp, #8
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	603b      	str	r3, [r7, #0]
 8009030:	4613      	mov	r3, r2
 8009032:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800903a:	2b20      	cmp	r3, #32
 800903c:	f040 8083 	bne.w	8009146 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <HAL_UART_Transmit+0x28>
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e07b      	b.n	8009148 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009056:	2b01      	cmp	r3, #1
 8009058:	d101      	bne.n	800905e <HAL_UART_Transmit+0x3a>
 800905a:	2302      	movs	r3, #2
 800905c:	e074      	b.n	8009148 <HAL_UART_Transmit+0x124>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2221      	movs	r2, #33	; 0x21
 8009072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009076:	f7f8 ffd1 	bl	800201c <HAL_GetTick>
 800907a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	88fa      	ldrh	r2, [r7, #6]
 8009080:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	88fa      	ldrh	r2, [r7, #6]
 8009088:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009094:	d108      	bne.n	80090a8 <HAL_UART_Transmit+0x84>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d104      	bne.n	80090a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	61bb      	str	r3, [r7, #24]
 80090a6:	e003      	b.n	80090b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090ac:	2300      	movs	r3, #0
 80090ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090b0:	e02c      	b.n	800910c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2200      	movs	r2, #0
 80090ba:	2180      	movs	r1, #128	; 0x80
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f002 fe27 	bl	800bd10 <UART_WaitOnFlagUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e03d      	b.n	8009148 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10b      	bne.n	80090ea <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	3302      	adds	r3, #2
 80090e6:	61bb      	str	r3, [r7, #24]
 80090e8:	e007      	b.n	80090fa <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	781a      	ldrb	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	3301      	adds	r3, #1
 80090f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	b29a      	uxth	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009112:	b29b      	uxth	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1cc      	bne.n	80090b2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2200      	movs	r2, #0
 8009120:	2140      	movs	r1, #64	; 0x40
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f002 fdf4 	bl	800bd10 <UART_WaitOnFlagUntilTimeout>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e00a      	b.n	8009148 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2220      	movs	r2, #32
 8009136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	e000      	b.n	8009148 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009146:	2302      	movs	r3, #2
  }
}
 8009148:	4618      	mov	r0, r3
 800914a:	3720      	adds	r7, #32
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009164:	2b20      	cmp	r3, #32
 8009166:	d168      	bne.n	800923a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_UART_Transmit_IT+0x24>
 800916e:	88fb      	ldrh	r3, [r7, #6]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e061      	b.n	800923c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <HAL_UART_Transmit_IT+0x36>
 8009182:	2302      	movs	r3, #2
 8009184:	e05a      	b.n	800923c <HAL_UART_Transmit_IT+0xec>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	88fa      	ldrh	r2, [r7, #6]
 8009198:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	88fa      	ldrh	r2, [r7, #6]
 80091a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2221      	movs	r2, #33	; 0x21
 80091b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c2:	d11c      	bne.n	80091fe <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091cc:	d107      	bne.n	80091de <HAL_UART_Transmit_IT+0x8e>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d103      	bne.n	80091de <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4a1b      	ldr	r2, [pc, #108]	; (8009248 <HAL_UART_Transmit_IT+0xf8>)
 80091da:	671a      	str	r2, [r3, #112]	; 0x70
 80091dc:	e002      	b.n	80091e4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	4a1a      	ldr	r2, [pc, #104]	; (800924c <HAL_UART_Transmit_IT+0xfc>)
 80091e2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80091fa:	609a      	str	r2, [r3, #8]
 80091fc:	e01b      	b.n	8009236 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009206:	d107      	bne.n	8009218 <HAL_UART_Transmit_IT+0xc8>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d103      	bne.n	8009218 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4a0f      	ldr	r2, [pc, #60]	; (8009250 <HAL_UART_Transmit_IT+0x100>)
 8009214:	671a      	str	r2, [r3, #112]	; 0x70
 8009216:	e002      	b.n	800921e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4a0e      	ldr	r2, [pc, #56]	; (8009254 <HAL_UART_Transmit_IT+0x104>)
 800921c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009234:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	e000      	b.n	800923c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800923a:	2302      	movs	r3, #2
  }
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	0800c14f 	.word	0x0800c14f
 800924c:	0800c0b5 	.word	0x0800c0b5
 8009250:	0800c037 	.word	0x0800c037
 8009254:	0800bfc3 	.word	0x0800bfc3

08009258 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800926c:	2b20      	cmp	r3, #32
 800926e:	f040 80bc 	bne.w	80093ea <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <HAL_UART_Receive_IT+0x26>
 8009278:	88fb      	ldrh	r3, [r7, #6]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e0b4      	b.n	80093ec <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_UART_Receive_IT+0x38>
 800928c:	2302      	movs	r3, #2
 800928e:	e0ad      	b.n	80093ec <HAL_UART_Receive_IT+0x194>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	88fa      	ldrh	r2, [r7, #6]
 80092a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	88fa      	ldrh	r2, [r7, #6]
 80092aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092bc:	d10e      	bne.n	80092dc <HAL_UART_Receive_IT+0x84>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <HAL_UART_Receive_IT+0x7a>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092d0:	e02d      	b.n	800932e <HAL_UART_Receive_IT+0xd6>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	22ff      	movs	r2, #255	; 0xff
 80092d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092da:	e028      	b.n	800932e <HAL_UART_Receive_IT+0xd6>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10d      	bne.n	8009300 <HAL_UART_Receive_IT+0xa8>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <HAL_UART_Receive_IT+0x9e>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	22ff      	movs	r2, #255	; 0xff
 80092f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092f4:	e01b      	b.n	800932e <HAL_UART_Receive_IT+0xd6>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	227f      	movs	r2, #127	; 0x7f
 80092fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092fe:	e016      	b.n	800932e <HAL_UART_Receive_IT+0xd6>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009308:	d10d      	bne.n	8009326 <HAL_UART_Receive_IT+0xce>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d104      	bne.n	800931c <HAL_UART_Receive_IT+0xc4>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	227f      	movs	r2, #127	; 0x7f
 8009316:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800931a:	e008      	b.n	800932e <HAL_UART_Receive_IT+0xd6>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	223f      	movs	r2, #63	; 0x3f
 8009320:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009324:	e003      	b.n	800932e <HAL_UART_Receive_IT+0xd6>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2222      	movs	r2, #34	; 0x22
 800933a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f042 0201 	orr.w	r2, r2, #1
 800934c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009356:	d12a      	bne.n	80093ae <HAL_UART_Receive_IT+0x156>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800935e:	88fa      	ldrh	r2, [r7, #6]
 8009360:	429a      	cmp	r2, r3
 8009362:	d324      	bcc.n	80093ae <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800936c:	d107      	bne.n	800937e <HAL_UART_Receive_IT+0x126>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d103      	bne.n	800937e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <HAL_UART_Receive_IT+0x1a0>)
 800937a:	66da      	str	r2, [r3, #108]	; 0x6c
 800937c:	e002      	b.n	8009384 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4a1e      	ldr	r2, [pc, #120]	; (80093fc <HAL_UART_Receive_IT+0x1a4>)
 8009382:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800939a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80093aa:	609a      	str	r2, [r3, #8]
 80093ac:	e01b      	b.n	80093e6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b6:	d107      	bne.n	80093c8 <HAL_UART_Receive_IT+0x170>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d103      	bne.n	80093c8 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4a0f      	ldr	r2, [pc, #60]	; (8009400 <HAL_UART_Receive_IT+0x1a8>)
 80093c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80093c6:	e002      	b.n	80093ce <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4a0e      	ldr	r2, [pc, #56]	; (8009404 <HAL_UART_Receive_IT+0x1ac>)
 80093cc:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80093e4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	e000      	b.n	80093ec <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80093ea:	2302      	movs	r3, #2
  }
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	0800c485 	.word	0x0800c485
 80093fc:	0800c37d 	.word	0x0800c37d
 8009400:	0800c2d1 	.word	0x0800c2d1
 8009404:	0800c227 	.word	0x0800c227

08009408 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800941c:	2b20      	cmp	r3, #32
 800941e:	d170      	bne.n	8009502 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <HAL_UART_Receive_DMA+0x24>
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e069      	b.n	8009504 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_UART_Receive_DMA+0x36>
 800943a:	2302      	movs	r3, #2
 800943c:	e062      	b.n	8009504 <HAL_UART_Receive_DMA+0xfc>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	88fa      	ldrh	r2, [r7, #6]
 8009450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2222      	movs	r2, #34	; 0x22
 8009460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009468:	2b00      	cmp	r3, #0
 800946a:	d02c      	beq.n	80094c6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009470:	4a26      	ldr	r2, [pc, #152]	; (800950c <HAL_UART_Receive_DMA+0x104>)
 8009472:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009478:	4a25      	ldr	r2, [pc, #148]	; (8009510 <HAL_UART_Receive_DMA+0x108>)
 800947a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009480:	4a24      	ldr	r2, [pc, #144]	; (8009514 <HAL_UART_Receive_DMA+0x10c>)
 8009482:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009488:	2200      	movs	r2, #0
 800948a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3324      	adds	r3, #36	; 0x24
 8009496:	4619      	mov	r1, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800949c:	461a      	mov	r2, r3
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	f7fa faa4 	bl	80039ec <HAL_DMA_Start_IT>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00d      	beq.n	80094c6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2210      	movs	r2, #16
 80094ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2220      	movs	r2, #32
 80094be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e01e      	b.n	8009504 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094dc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f042 0201 	orr.w	r2, r2, #1
 80094ec:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094fc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e000      	b.n	8009504 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009502:	2302      	movs	r3, #2
  }
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	0800be95 	.word	0x0800be95
 8009510:	0800befb 	.word	0x0800befb
 8009514:	0800bf17 	.word	0x0800bf17

08009518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009538:	69fa      	ldr	r2, [r7, #28]
 800953a:	f640 030f 	movw	r3, #2063	; 0x80f
 800953e:	4013      	ands	r3, r2
 8009540:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d118      	bne.n	800957a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	2b00      	cmp	r3, #0
 8009550:	d013      	beq.n	800957a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d104      	bne.n	8009566 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d009      	beq.n	800957a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8145 	beq.w	80097fa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	4798      	blx	r3
      }
      return;
 8009578:	e13f      	b.n	80097fa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 80e8 	beq.w	8009752 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	4ba1      	ldr	r3, [pc, #644]	; (800980c <HAL_UART_IRQHandler+0x2f4>)
 8009586:	4013      	ands	r3, r2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	4ba0      	ldr	r3, [pc, #640]	; (8009810 <HAL_UART_IRQHandler+0x2f8>)
 8009590:	4013      	ands	r3, r2
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80dd 	beq.w	8009752 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d010      	beq.n	80095c4 <HAL_UART_IRQHandler+0xac>
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ba:	f043 0201 	orr.w	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d010      	beq.n	80095f0 <HAL_UART_IRQHandler+0xd8>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2202      	movs	r2, #2
 80095de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e6:	f043 0204 	orr.w	r2, r3, #4
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	f003 0304 	and.w	r3, r3, #4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d010      	beq.n	800961c <HAL_UART_IRQHandler+0x104>
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f003 0301 	and.w	r3, r3, #1
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00b      	beq.n	800961c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2204      	movs	r2, #4
 800960a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009612:	f043 0202 	orr.w	r2, r3, #2
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	f003 0308 	and.w	r3, r3, #8
 8009622:	2b00      	cmp	r3, #0
 8009624:	d015      	beq.n	8009652 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b00      	cmp	r3, #0
 800962e:	d104      	bne.n	800963a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	4b76      	ldr	r3, [pc, #472]	; (800980c <HAL_UART_IRQHandler+0x2f4>)
 8009634:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00b      	beq.n	8009652 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2208      	movs	r2, #8
 8009640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009648:	f043 0208 	orr.w	r2, r3, #8
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009658:	2b00      	cmp	r3, #0
 800965a:	d011      	beq.n	8009680 <HAL_UART_IRQHandler+0x168>
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00c      	beq.n	8009680 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800966e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009676:	f043 0220 	orr.w	r2, r3, #32
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 80b9 	beq.w	80097fe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	f003 0320 	and.w	r3, r3, #32
 8009692:	2b00      	cmp	r3, #0
 8009694:	d011      	beq.n	80096ba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	f003 0320 	and.w	r3, r3, #32
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d007      	beq.n	80096ba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096cc:	2b40      	cmp	r3, #64	; 0x40
 80096ce:	d004      	beq.n	80096da <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d031      	beq.n	800973e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f002 fbb6 	bl	800be4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ea:	2b40      	cmp	r3, #64	; 0x40
 80096ec:	d123      	bne.n	8009736 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009702:	2b00      	cmp	r3, #0
 8009704:	d013      	beq.n	800972e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800970a:	4a42      	ldr	r2, [pc, #264]	; (8009814 <HAL_UART_IRQHandler+0x2fc>)
 800970c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009712:	4618      	mov	r0, r3
 8009714:	f7fa fbd4 	bl	8003ec0 <HAL_DMA_Abort_IT>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d017      	beq.n	800974e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972c:	e00f      	b.n	800974e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f87c 	bl	800982c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	e00b      	b.n	800974e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f878 	bl	800982c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973c:	e007      	b.n	800974e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f874 	bl	800982c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800974c:	e057      	b.n	80097fe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974e:	bf00      	nop
    return;
 8009750:	e055      	b.n	80097fe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00d      	beq.n	8009778 <HAL_UART_IRQHandler+0x260>
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d008      	beq.n	8009778 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800976e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f002 ff0b 	bl	800c58c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009776:	e045      	b.n	8009804 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800977e:	2b00      	cmp	r3, #0
 8009780:	d012      	beq.n	80097a8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d008      	beq.n	80097a8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	2b00      	cmp	r3, #0
 800979c:	d031      	beq.n	8009802 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
    }
    return;
 80097a6:	e02c      	b.n	8009802 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d008      	beq.n	80097c4 <HAL_UART_IRQHandler+0x2ac>
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f002 fd18 	bl	800c1f2 <UART_EndTransmit_IT>
    return;
 80097c2:	e01f      	b.n	8009804 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d008      	beq.n	80097e0 <HAL_UART_IRQHandler+0x2c8>
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f002 feeb 	bl	800c5b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097de:	e011      	b.n	8009804 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <HAL_UART_IRQHandler+0x2ec>
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da09      	bge.n	8009804 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f002 fed5 	bl	800c5a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097f6:	bf00      	nop
 80097f8:	e004      	b.n	8009804 <HAL_UART_IRQHandler+0x2ec>
      return;
 80097fa:	bf00      	nop
 80097fc:	e002      	b.n	8009804 <HAL_UART_IRQHandler+0x2ec>
    return;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009802:	bf00      	nop
  }
}
 8009804:	3720      	adds	r7, #32
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	10000001 	.word	0x10000001
 8009810:	04000120 	.word	0x04000120
 8009814:	0800bf97 	.word	0x0800bf97

08009818 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009840:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009844:	b090      	sub	sp, #64	; 0x40
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800984a:	2300      	movs	r3, #0
 800984c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009854:	2300      	movs	r3, #0
 8009856:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	431a      	orrs	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	4313      	orrs	r3, r2
 800986e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009876:	4313      	orrs	r3, r2
 8009878:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	4bc1      	ldr	r3, [pc, #772]	; (8009b88 <UART_SetConfig+0x348>)
 8009882:	4013      	ands	r3, r2
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6812      	ldr	r2, [r2, #0]
 8009888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800988a:	430b      	orrs	r3, r1
 800988c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68da      	ldr	r2, [r3, #12]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4ab7      	ldr	r2, [pc, #732]	; (8009b8c <UART_SetConfig+0x34c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d004      	beq.n	80098be <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098ba:	4313      	orrs	r3, r2
 80098bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689a      	ldr	r2, [r3, #8]
 80098c4:	4bb2      	ldr	r3, [pc, #712]	; (8009b90 <UART_SetConfig+0x350>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6812      	ldr	r2, [r2, #0]
 80098cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098ce:	430b      	orrs	r3, r1
 80098d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	f023 010f 	bic.w	r1, r3, #15
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4aa9      	ldr	r2, [pc, #676]	; (8009b94 <UART_SetConfig+0x354>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d177      	bne.n	80099e2 <UART_SetConfig+0x1a2>
 80098f2:	4ba9      	ldr	r3, [pc, #676]	; (8009b98 <UART_SetConfig+0x358>)
 80098f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098fa:	2b28      	cmp	r3, #40	; 0x28
 80098fc:	d86c      	bhi.n	80099d8 <UART_SetConfig+0x198>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <UART_SetConfig+0xc4>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	080099a9 	.word	0x080099a9
 8009908:	080099d9 	.word	0x080099d9
 800990c:	080099d9 	.word	0x080099d9
 8009910:	080099d9 	.word	0x080099d9
 8009914:	080099d9 	.word	0x080099d9
 8009918:	080099d9 	.word	0x080099d9
 800991c:	080099d9 	.word	0x080099d9
 8009920:	080099d9 	.word	0x080099d9
 8009924:	080099b1 	.word	0x080099b1
 8009928:	080099d9 	.word	0x080099d9
 800992c:	080099d9 	.word	0x080099d9
 8009930:	080099d9 	.word	0x080099d9
 8009934:	080099d9 	.word	0x080099d9
 8009938:	080099d9 	.word	0x080099d9
 800993c:	080099d9 	.word	0x080099d9
 8009940:	080099d9 	.word	0x080099d9
 8009944:	080099b9 	.word	0x080099b9
 8009948:	080099d9 	.word	0x080099d9
 800994c:	080099d9 	.word	0x080099d9
 8009950:	080099d9 	.word	0x080099d9
 8009954:	080099d9 	.word	0x080099d9
 8009958:	080099d9 	.word	0x080099d9
 800995c:	080099d9 	.word	0x080099d9
 8009960:	080099d9 	.word	0x080099d9
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099d9 	.word	0x080099d9
 800996c:	080099d9 	.word	0x080099d9
 8009970:	080099d9 	.word	0x080099d9
 8009974:	080099d9 	.word	0x080099d9
 8009978:	080099d9 	.word	0x080099d9
 800997c:	080099d9 	.word	0x080099d9
 8009980:	080099d9 	.word	0x080099d9
 8009984:	080099c9 	.word	0x080099c9
 8009988:	080099d9 	.word	0x080099d9
 800998c:	080099d9 	.word	0x080099d9
 8009990:	080099d9 	.word	0x080099d9
 8009994:	080099d9 	.word	0x080099d9
 8009998:	080099d9 	.word	0x080099d9
 800999c:	080099d9 	.word	0x080099d9
 80099a0:	080099d9 	.word	0x080099d9
 80099a4:	080099d1 	.word	0x080099d1
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ae:	e233      	b.n	8009e18 <UART_SetConfig+0x5d8>
 80099b0:	2304      	movs	r3, #4
 80099b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099b6:	e22f      	b.n	8009e18 <UART_SetConfig+0x5d8>
 80099b8:	2308      	movs	r3, #8
 80099ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099be:	e22b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 80099c0:	2310      	movs	r3, #16
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	e227      	b.n	8009e18 <UART_SetConfig+0x5d8>
 80099c8:	2320      	movs	r3, #32
 80099ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ce:	e223      	b.n	8009e18 <UART_SetConfig+0x5d8>
 80099d0:	2340      	movs	r3, #64	; 0x40
 80099d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099d6:	e21f      	b.n	8009e18 <UART_SetConfig+0x5d8>
 80099d8:	2380      	movs	r3, #128	; 0x80
 80099da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099de:	bf00      	nop
 80099e0:	e21a      	b.n	8009e18 <UART_SetConfig+0x5d8>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a6d      	ldr	r2, [pc, #436]	; (8009b9c <UART_SetConfig+0x35c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d132      	bne.n	8009a52 <UART_SetConfig+0x212>
 80099ec:	4b6a      	ldr	r3, [pc, #424]	; (8009b98 <UART_SetConfig+0x358>)
 80099ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f0:	f003 0307 	and.w	r3, r3, #7
 80099f4:	2b05      	cmp	r3, #5
 80099f6:	d827      	bhi.n	8009a48 <UART_SetConfig+0x208>
 80099f8:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <UART_SetConfig+0x1c0>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a19 	.word	0x08009a19
 8009a04:	08009a21 	.word	0x08009a21
 8009a08:	08009a29 	.word	0x08009a29
 8009a0c:	08009a31 	.word	0x08009a31
 8009a10:	08009a39 	.word	0x08009a39
 8009a14:	08009a41 	.word	0x08009a41
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a1e:	e1fb      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a20:	2304      	movs	r3, #4
 8009a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a26:	e1f7      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a28:	2308      	movs	r3, #8
 8009a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a2e:	e1f3      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a30:	2310      	movs	r3, #16
 8009a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a36:	e1ef      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a38:	2320      	movs	r3, #32
 8009a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a3e:	e1eb      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a40:	2340      	movs	r3, #64	; 0x40
 8009a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a46:	e1e7      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a48:	2380      	movs	r3, #128	; 0x80
 8009a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a4e:	bf00      	nop
 8009a50:	e1e2      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a52      	ldr	r2, [pc, #328]	; (8009ba0 <UART_SetConfig+0x360>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d132      	bne.n	8009ac2 <UART_SetConfig+0x282>
 8009a5c:	4b4e      	ldr	r3, [pc, #312]	; (8009b98 <UART_SetConfig+0x358>)
 8009a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a60:	f003 0307 	and.w	r3, r3, #7
 8009a64:	2b05      	cmp	r3, #5
 8009a66:	d827      	bhi.n	8009ab8 <UART_SetConfig+0x278>
 8009a68:	a201      	add	r2, pc, #4	; (adr r2, 8009a70 <UART_SetConfig+0x230>)
 8009a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6e:	bf00      	nop
 8009a70:	08009a89 	.word	0x08009a89
 8009a74:	08009a91 	.word	0x08009a91
 8009a78:	08009a99 	.word	0x08009a99
 8009a7c:	08009aa1 	.word	0x08009aa1
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	08009ab1 	.word	0x08009ab1
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a8e:	e1c3      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a90:	2304      	movs	r3, #4
 8009a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a96:	e1bf      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009a98:	2308      	movs	r3, #8
 8009a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a9e:	e1bb      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aa6:	e1b7      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009aa8:	2320      	movs	r3, #32
 8009aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aae:	e1b3      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009ab0:	2340      	movs	r3, #64	; 0x40
 8009ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ab6:	e1af      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009ab8:	2380      	movs	r3, #128	; 0x80
 8009aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009abe:	bf00      	nop
 8009ac0:	e1aa      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a37      	ldr	r2, [pc, #220]	; (8009ba4 <UART_SetConfig+0x364>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d132      	bne.n	8009b32 <UART_SetConfig+0x2f2>
 8009acc:	4b32      	ldr	r3, [pc, #200]	; (8009b98 <UART_SetConfig+0x358>)
 8009ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad0:	f003 0307 	and.w	r3, r3, #7
 8009ad4:	2b05      	cmp	r3, #5
 8009ad6:	d827      	bhi.n	8009b28 <UART_SetConfig+0x2e8>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <UART_SetConfig+0x2a0>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009af9 	.word	0x08009af9
 8009ae4:	08009b01 	.word	0x08009b01
 8009ae8:	08009b09 	.word	0x08009b09
 8009aec:	08009b11 	.word	0x08009b11
 8009af0:	08009b19 	.word	0x08009b19
 8009af4:	08009b21 	.word	0x08009b21
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009afe:	e18b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b00:	2304      	movs	r3, #4
 8009b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b06:	e187      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b0e:	e183      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b10:	2310      	movs	r3, #16
 8009b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b16:	e17f      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b18:	2320      	movs	r3, #32
 8009b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b1e:	e17b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b20:	2340      	movs	r3, #64	; 0x40
 8009b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b26:	e177      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b28:	2380      	movs	r3, #128	; 0x80
 8009b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b2e:	bf00      	nop
 8009b30:	e172      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1c      	ldr	r2, [pc, #112]	; (8009ba8 <UART_SetConfig+0x368>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d144      	bne.n	8009bc6 <UART_SetConfig+0x386>
 8009b3c:	4b16      	ldr	r3, [pc, #88]	; (8009b98 <UART_SetConfig+0x358>)
 8009b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	2b05      	cmp	r3, #5
 8009b46:	d839      	bhi.n	8009bbc <UART_SetConfig+0x37c>
 8009b48:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <UART_SetConfig+0x310>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b69 	.word	0x08009b69
 8009b54:	08009b71 	.word	0x08009b71
 8009b58:	08009b79 	.word	0x08009b79
 8009b5c:	08009b81 	.word	0x08009b81
 8009b60:	08009bad 	.word	0x08009bad
 8009b64:	08009bb5 	.word	0x08009bb5
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b6e:	e153      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b70:	2304      	movs	r3, #4
 8009b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b76:	e14f      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b78:	2308      	movs	r3, #8
 8009b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b7e:	e14b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b80:	2310      	movs	r3, #16
 8009b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b86:	e147      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009b88:	cfff69f3 	.word	0xcfff69f3
 8009b8c:	58000c00 	.word	0x58000c00
 8009b90:	11fff4ff 	.word	0x11fff4ff
 8009b94:	40011000 	.word	0x40011000
 8009b98:	58024400 	.word	0x58024400
 8009b9c:	40004400 	.word	0x40004400
 8009ba0:	40004800 	.word	0x40004800
 8009ba4:	40004c00 	.word	0x40004c00
 8009ba8:	40005000 	.word	0x40005000
 8009bac:	2320      	movs	r3, #32
 8009bae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bb2:	e131      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bba:	e12d      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009bbc:	2380      	movs	r3, #128	; 0x80
 8009bbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bc2:	bf00      	nop
 8009bc4:	e128      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4ac3      	ldr	r2, [pc, #780]	; (8009ed8 <UART_SetConfig+0x698>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d178      	bne.n	8009cc2 <UART_SetConfig+0x482>
 8009bd0:	4bc2      	ldr	r3, [pc, #776]	; (8009edc <UART_SetConfig+0x69c>)
 8009bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bd8:	2b28      	cmp	r3, #40	; 0x28
 8009bda:	d86d      	bhi.n	8009cb8 <UART_SetConfig+0x478>
 8009bdc:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <UART_SetConfig+0x3a4>)
 8009bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be2:	bf00      	nop
 8009be4:	08009c89 	.word	0x08009c89
 8009be8:	08009cb9 	.word	0x08009cb9
 8009bec:	08009cb9 	.word	0x08009cb9
 8009bf0:	08009cb9 	.word	0x08009cb9
 8009bf4:	08009cb9 	.word	0x08009cb9
 8009bf8:	08009cb9 	.word	0x08009cb9
 8009bfc:	08009cb9 	.word	0x08009cb9
 8009c00:	08009cb9 	.word	0x08009cb9
 8009c04:	08009c91 	.word	0x08009c91
 8009c08:	08009cb9 	.word	0x08009cb9
 8009c0c:	08009cb9 	.word	0x08009cb9
 8009c10:	08009cb9 	.word	0x08009cb9
 8009c14:	08009cb9 	.word	0x08009cb9
 8009c18:	08009cb9 	.word	0x08009cb9
 8009c1c:	08009cb9 	.word	0x08009cb9
 8009c20:	08009cb9 	.word	0x08009cb9
 8009c24:	08009c99 	.word	0x08009c99
 8009c28:	08009cb9 	.word	0x08009cb9
 8009c2c:	08009cb9 	.word	0x08009cb9
 8009c30:	08009cb9 	.word	0x08009cb9
 8009c34:	08009cb9 	.word	0x08009cb9
 8009c38:	08009cb9 	.word	0x08009cb9
 8009c3c:	08009cb9 	.word	0x08009cb9
 8009c40:	08009cb9 	.word	0x08009cb9
 8009c44:	08009ca1 	.word	0x08009ca1
 8009c48:	08009cb9 	.word	0x08009cb9
 8009c4c:	08009cb9 	.word	0x08009cb9
 8009c50:	08009cb9 	.word	0x08009cb9
 8009c54:	08009cb9 	.word	0x08009cb9
 8009c58:	08009cb9 	.word	0x08009cb9
 8009c5c:	08009cb9 	.word	0x08009cb9
 8009c60:	08009cb9 	.word	0x08009cb9
 8009c64:	08009ca9 	.word	0x08009ca9
 8009c68:	08009cb9 	.word	0x08009cb9
 8009c6c:	08009cb9 	.word	0x08009cb9
 8009c70:	08009cb9 	.word	0x08009cb9
 8009c74:	08009cb9 	.word	0x08009cb9
 8009c78:	08009cb9 	.word	0x08009cb9
 8009c7c:	08009cb9 	.word	0x08009cb9
 8009c80:	08009cb9 	.word	0x08009cb9
 8009c84:	08009cb1 	.word	0x08009cb1
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c8e:	e0c3      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009c90:	2304      	movs	r3, #4
 8009c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c96:	e0bf      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009c98:	2308      	movs	r3, #8
 8009c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c9e:	e0bb      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009ca0:	2310      	movs	r3, #16
 8009ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ca6:	e0b7      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009ca8:	2320      	movs	r3, #32
 8009caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cae:	e0b3      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009cb0:	2340      	movs	r3, #64	; 0x40
 8009cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cb6:	e0af      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009cb8:	2380      	movs	r3, #128	; 0x80
 8009cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cbe:	bf00      	nop
 8009cc0:	e0aa      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a86      	ldr	r2, [pc, #536]	; (8009ee0 <UART_SetConfig+0x6a0>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d132      	bne.n	8009d32 <UART_SetConfig+0x4f2>
 8009ccc:	4b83      	ldr	r3, [pc, #524]	; (8009edc <UART_SetConfig+0x69c>)
 8009cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	2b05      	cmp	r3, #5
 8009cd6:	d827      	bhi.n	8009d28 <UART_SetConfig+0x4e8>
 8009cd8:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <UART_SetConfig+0x4a0>)
 8009cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cde:	bf00      	nop
 8009ce0:	08009cf9 	.word	0x08009cf9
 8009ce4:	08009d01 	.word	0x08009d01
 8009ce8:	08009d09 	.word	0x08009d09
 8009cec:	08009d11 	.word	0x08009d11
 8009cf0:	08009d19 	.word	0x08009d19
 8009cf4:	08009d21 	.word	0x08009d21
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cfe:	e08b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d00:	2304      	movs	r3, #4
 8009d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d06:	e087      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d0e:	e083      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d10:	2310      	movs	r3, #16
 8009d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d16:	e07f      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d1e:	e07b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d20:	2340      	movs	r3, #64	; 0x40
 8009d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d26:	e077      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d28:	2380      	movs	r3, #128	; 0x80
 8009d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d2e:	bf00      	nop
 8009d30:	e072      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a6b      	ldr	r2, [pc, #428]	; (8009ee4 <UART_SetConfig+0x6a4>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d132      	bne.n	8009da2 <UART_SetConfig+0x562>
 8009d3c:	4b67      	ldr	r3, [pc, #412]	; (8009edc <UART_SetConfig+0x69c>)
 8009d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	2b05      	cmp	r3, #5
 8009d46:	d827      	bhi.n	8009d98 <UART_SetConfig+0x558>
 8009d48:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <UART_SetConfig+0x510>)
 8009d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4e:	bf00      	nop
 8009d50:	08009d69 	.word	0x08009d69
 8009d54:	08009d71 	.word	0x08009d71
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009d89 	.word	0x08009d89
 8009d64:	08009d91 	.word	0x08009d91
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d6e:	e053      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d70:	2304      	movs	r3, #4
 8009d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d76:	e04f      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d7e:	e04b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d80:	2310      	movs	r3, #16
 8009d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d86:	e047      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d8e:	e043      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d90:	2340      	movs	r3, #64	; 0x40
 8009d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d96:	e03f      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009d98:	2380      	movs	r3, #128	; 0x80
 8009d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d9e:	bf00      	nop
 8009da0:	e03a      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a50      	ldr	r2, [pc, #320]	; (8009ee8 <UART_SetConfig+0x6a8>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d132      	bne.n	8009e12 <UART_SetConfig+0x5d2>
 8009dac:	4b4b      	ldr	r3, [pc, #300]	; (8009edc <UART_SetConfig+0x69c>)
 8009dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	2b05      	cmp	r3, #5
 8009db6:	d827      	bhi.n	8009e08 <UART_SetConfig+0x5c8>
 8009db8:	a201      	add	r2, pc, #4	; (adr r2, 8009dc0 <UART_SetConfig+0x580>)
 8009dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbe:	bf00      	nop
 8009dc0:	08009dd9 	.word	0x08009dd9
 8009dc4:	08009de1 	.word	0x08009de1
 8009dc8:	08009de9 	.word	0x08009de9
 8009dcc:	08009df1 	.word	0x08009df1
 8009dd0:	08009df9 	.word	0x08009df9
 8009dd4:	08009e01 	.word	0x08009e01
 8009dd8:	2302      	movs	r3, #2
 8009dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dde:	e01b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009de0:	2304      	movs	r3, #4
 8009de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009de6:	e017      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009de8:	2308      	movs	r3, #8
 8009dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dee:	e013      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009df0:	2310      	movs	r3, #16
 8009df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009df6:	e00f      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009df8:	2320      	movs	r3, #32
 8009dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dfe:	e00b      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009e00:	2340      	movs	r3, #64	; 0x40
 8009e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e06:	e007      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009e08:	2380      	movs	r3, #128	; 0x80
 8009e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e0e:	bf00      	nop
 8009e10:	e002      	b.n	8009e18 <UART_SetConfig+0x5d8>
 8009e12:	2380      	movs	r3, #128	; 0x80
 8009e14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a32      	ldr	r2, [pc, #200]	; (8009ee8 <UART_SetConfig+0x6a8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	f040 86f7 	bne.w	800ac12 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	f000 80c0 	beq.w	8009fae <UART_SetConfig+0x76e>
 8009e2e:	2b08      	cmp	r3, #8
 8009e30:	dc04      	bgt.n	8009e3c <UART_SetConfig+0x5fc>
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d00c      	beq.n	8009e50 <UART_SetConfig+0x610>
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d065      	beq.n	8009f06 <UART_SetConfig+0x6c6>
 8009e3a:	e27a      	b.n	800a332 <UART_SetConfig+0xaf2>
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	f000 81b0 	beq.w	800a1a2 <UART_SetConfig+0x962>
 8009e42:	2b40      	cmp	r3, #64	; 0x40
 8009e44:	f000 821e 	beq.w	800a284 <UART_SetConfig+0xa44>
 8009e48:	2b10      	cmp	r3, #16
 8009e4a:	f000 8104 	beq.w	800a056 <UART_SetConfig+0x816>
 8009e4e:	e270      	b.n	800a332 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009e50:	f7fe f85c 	bl	8007f0c <HAL_RCCEx_GetD3PCLK1Freq>
 8009e54:	4602      	mov	r2, r0
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d04e      	beq.n	8009efc <UART_SetConfig+0x6bc>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d048      	beq.n	8009ef8 <UART_SetConfig+0x6b8>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d042      	beq.n	8009ef4 <UART_SetConfig+0x6b4>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d03c      	beq.n	8009ef0 <UART_SetConfig+0x6b0>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d036      	beq.n	8009eec <UART_SetConfig+0x6ac>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	2b05      	cmp	r3, #5
 8009e84:	d026      	beq.n	8009ed4 <UART_SetConfig+0x694>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	2b06      	cmp	r3, #6
 8009e8c:	d020      	beq.n	8009ed0 <UART_SetConfig+0x690>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b07      	cmp	r3, #7
 8009e94:	d01a      	beq.n	8009ecc <UART_SetConfig+0x68c>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	d014      	beq.n	8009ec8 <UART_SetConfig+0x688>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2b09      	cmp	r3, #9
 8009ea4:	d00e      	beq.n	8009ec4 <UART_SetConfig+0x684>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b0a      	cmp	r3, #10
 8009eac:	d008      	beq.n	8009ec0 <UART_SetConfig+0x680>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	2b0b      	cmp	r3, #11
 8009eb4:	d102      	bne.n	8009ebc <UART_SetConfig+0x67c>
 8009eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eba:	e020      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e01e      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	e01c      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ec4:	2340      	movs	r3, #64	; 0x40
 8009ec6:	e01a      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ec8:	2320      	movs	r3, #32
 8009eca:	e018      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ecc:	2310      	movs	r3, #16
 8009ece:	e016      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ed0:	230c      	movs	r3, #12
 8009ed2:	e014      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ed4:	230a      	movs	r3, #10
 8009ed6:	e012      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ed8:	40011400 	.word	0x40011400
 8009edc:	58024400 	.word	0x58024400
 8009ee0:	40007800 	.word	0x40007800
 8009ee4:	40007c00 	.word	0x40007c00
 8009ee8:	58000c00 	.word	0x58000c00
 8009eec:	2308      	movs	r3, #8
 8009eee:	e006      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ef0:	2306      	movs	r3, #6
 8009ef2:	e004      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	e002      	b.n	8009efe <UART_SetConfig+0x6be>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e000      	b.n	8009efe <UART_SetConfig+0x6be>
 8009efc:	2301      	movs	r3, #1
 8009efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f04:	e219      	b.n	800a33a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f06:	f107 0318 	add.w	r3, r7, #24
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe f814 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009f10:	69fa      	ldr	r2, [r7, #28]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d044      	beq.n	8009fa4 <UART_SetConfig+0x764>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d03e      	beq.n	8009fa0 <UART_SetConfig+0x760>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d038      	beq.n	8009f9c <UART_SetConfig+0x75c>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d032      	beq.n	8009f98 <UART_SetConfig+0x758>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d02c      	beq.n	8009f94 <UART_SetConfig+0x754>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	2b05      	cmp	r3, #5
 8009f40:	d026      	beq.n	8009f90 <UART_SetConfig+0x750>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	2b06      	cmp	r3, #6
 8009f48:	d020      	beq.n	8009f8c <UART_SetConfig+0x74c>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2b07      	cmp	r3, #7
 8009f50:	d01a      	beq.n	8009f88 <UART_SetConfig+0x748>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b08      	cmp	r3, #8
 8009f58:	d014      	beq.n	8009f84 <UART_SetConfig+0x744>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b09      	cmp	r3, #9
 8009f60:	d00e      	beq.n	8009f80 <UART_SetConfig+0x740>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	2b0a      	cmp	r3, #10
 8009f68:	d008      	beq.n	8009f7c <UART_SetConfig+0x73c>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	2b0b      	cmp	r3, #11
 8009f70:	d102      	bne.n	8009f78 <UART_SetConfig+0x738>
 8009f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f76:	e016      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e014      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f7c:	2380      	movs	r3, #128	; 0x80
 8009f7e:	e012      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f80:	2340      	movs	r3, #64	; 0x40
 8009f82:	e010      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f84:	2320      	movs	r3, #32
 8009f86:	e00e      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f88:	2310      	movs	r3, #16
 8009f8a:	e00c      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	e00a      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f90:	230a      	movs	r3, #10
 8009f92:	e008      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f94:	2308      	movs	r3, #8
 8009f96:	e006      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f98:	2306      	movs	r3, #6
 8009f9a:	e004      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	e002      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e000      	b.n	8009fa6 <UART_SetConfig+0x766>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fac:	e1c5      	b.n	800a33a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fae:	f107 030c 	add.w	r3, r7, #12
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe f90c 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d044      	beq.n	800a04c <UART_SetConfig+0x80c>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d03e      	beq.n	800a048 <UART_SetConfig+0x808>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d038      	beq.n	800a044 <UART_SetConfig+0x804>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d032      	beq.n	800a040 <UART_SetConfig+0x800>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d02c      	beq.n	800a03c <UART_SetConfig+0x7fc>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b05      	cmp	r3, #5
 8009fe8:	d026      	beq.n	800a038 <UART_SetConfig+0x7f8>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b06      	cmp	r3, #6
 8009ff0:	d020      	beq.n	800a034 <UART_SetConfig+0x7f4>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b07      	cmp	r3, #7
 8009ff8:	d01a      	beq.n	800a030 <UART_SetConfig+0x7f0>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b08      	cmp	r3, #8
 800a000:	d014      	beq.n	800a02c <UART_SetConfig+0x7ec>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b09      	cmp	r3, #9
 800a008:	d00e      	beq.n	800a028 <UART_SetConfig+0x7e8>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b0a      	cmp	r3, #10
 800a010:	d008      	beq.n	800a024 <UART_SetConfig+0x7e4>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	2b0b      	cmp	r3, #11
 800a018:	d102      	bne.n	800a020 <UART_SetConfig+0x7e0>
 800a01a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a01e:	e016      	b.n	800a04e <UART_SetConfig+0x80e>
 800a020:	2301      	movs	r3, #1
 800a022:	e014      	b.n	800a04e <UART_SetConfig+0x80e>
 800a024:	2380      	movs	r3, #128	; 0x80
 800a026:	e012      	b.n	800a04e <UART_SetConfig+0x80e>
 800a028:	2340      	movs	r3, #64	; 0x40
 800a02a:	e010      	b.n	800a04e <UART_SetConfig+0x80e>
 800a02c:	2320      	movs	r3, #32
 800a02e:	e00e      	b.n	800a04e <UART_SetConfig+0x80e>
 800a030:	2310      	movs	r3, #16
 800a032:	e00c      	b.n	800a04e <UART_SetConfig+0x80e>
 800a034:	230c      	movs	r3, #12
 800a036:	e00a      	b.n	800a04e <UART_SetConfig+0x80e>
 800a038:	230a      	movs	r3, #10
 800a03a:	e008      	b.n	800a04e <UART_SetConfig+0x80e>
 800a03c:	2308      	movs	r3, #8
 800a03e:	e006      	b.n	800a04e <UART_SetConfig+0x80e>
 800a040:	2306      	movs	r3, #6
 800a042:	e004      	b.n	800a04e <UART_SetConfig+0x80e>
 800a044:	2304      	movs	r3, #4
 800a046:	e002      	b.n	800a04e <UART_SetConfig+0x80e>
 800a048:	2302      	movs	r3, #2
 800a04a:	e000      	b.n	800a04e <UART_SetConfig+0x80e>
 800a04c:	2301      	movs	r3, #1
 800a04e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a054:	e171      	b.n	800a33a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a056:	4b7a      	ldr	r3, [pc, #488]	; (800a240 <UART_SetConfig+0xa00>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0320 	and.w	r3, r3, #32
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d054      	beq.n	800a10c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a062:	4b77      	ldr	r3, [pc, #476]	; (800a240 <UART_SetConfig+0xa00>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	08db      	lsrs	r3, r3, #3
 800a068:	f003 0303 	and.w	r3, r3, #3
 800a06c:	4a75      	ldr	r2, [pc, #468]	; (800a244 <UART_SetConfig+0xa04>)
 800a06e:	40da      	lsrs	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	2b00      	cmp	r3, #0
 800a076:	d044      	beq.n	800a102 <UART_SetConfig+0x8c2>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d03e      	beq.n	800a0fe <UART_SetConfig+0x8be>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	2b02      	cmp	r3, #2
 800a086:	d038      	beq.n	800a0fa <UART_SetConfig+0x8ba>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d032      	beq.n	800a0f6 <UART_SetConfig+0x8b6>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b04      	cmp	r3, #4
 800a096:	d02c      	beq.n	800a0f2 <UART_SetConfig+0x8b2>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b05      	cmp	r3, #5
 800a09e:	d026      	beq.n	800a0ee <UART_SetConfig+0x8ae>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	2b06      	cmp	r3, #6
 800a0a6:	d020      	beq.n	800a0ea <UART_SetConfig+0x8aa>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	2b07      	cmp	r3, #7
 800a0ae:	d01a      	beq.n	800a0e6 <UART_SetConfig+0x8a6>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	2b08      	cmp	r3, #8
 800a0b6:	d014      	beq.n	800a0e2 <UART_SetConfig+0x8a2>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b09      	cmp	r3, #9
 800a0be:	d00e      	beq.n	800a0de <UART_SetConfig+0x89e>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	2b0a      	cmp	r3, #10
 800a0c6:	d008      	beq.n	800a0da <UART_SetConfig+0x89a>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	2b0b      	cmp	r3, #11
 800a0ce:	d102      	bne.n	800a0d6 <UART_SetConfig+0x896>
 800a0d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0d4:	e016      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e014      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0da:	2380      	movs	r3, #128	; 0x80
 800a0dc:	e012      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0de:	2340      	movs	r3, #64	; 0x40
 800a0e0:	e010      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0e2:	2320      	movs	r3, #32
 800a0e4:	e00e      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0e6:	2310      	movs	r3, #16
 800a0e8:	e00c      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0ea:	230c      	movs	r3, #12
 800a0ec:	e00a      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0ee:	230a      	movs	r3, #10
 800a0f0:	e008      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0f2:	2308      	movs	r3, #8
 800a0f4:	e006      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0f6:	2306      	movs	r3, #6
 800a0f8:	e004      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0fa:	2304      	movs	r3, #4
 800a0fc:	e002      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a0fe:	2302      	movs	r3, #2
 800a100:	e000      	b.n	800a104 <UART_SetConfig+0x8c4>
 800a102:	2301      	movs	r3, #1
 800a104:	fbb2 f3f3 	udiv	r3, r2, r3
 800a108:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a10a:	e116      	b.n	800a33a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b00      	cmp	r3, #0
 800a112:	d043      	beq.n	800a19c <UART_SetConfig+0x95c>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d03d      	beq.n	800a198 <UART_SetConfig+0x958>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b02      	cmp	r3, #2
 800a122:	d037      	beq.n	800a194 <UART_SetConfig+0x954>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d031      	beq.n	800a190 <UART_SetConfig+0x950>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	2b04      	cmp	r3, #4
 800a132:	d02b      	beq.n	800a18c <UART_SetConfig+0x94c>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	2b05      	cmp	r3, #5
 800a13a:	d025      	beq.n	800a188 <UART_SetConfig+0x948>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b06      	cmp	r3, #6
 800a142:	d01f      	beq.n	800a184 <UART_SetConfig+0x944>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	2b07      	cmp	r3, #7
 800a14a:	d019      	beq.n	800a180 <UART_SetConfig+0x940>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	2b08      	cmp	r3, #8
 800a152:	d013      	beq.n	800a17c <UART_SetConfig+0x93c>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	2b09      	cmp	r3, #9
 800a15a:	d00d      	beq.n	800a178 <UART_SetConfig+0x938>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2b0a      	cmp	r3, #10
 800a162:	d007      	beq.n	800a174 <UART_SetConfig+0x934>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	2b0b      	cmp	r3, #11
 800a16a:	d101      	bne.n	800a170 <UART_SetConfig+0x930>
 800a16c:	4b36      	ldr	r3, [pc, #216]	; (800a248 <UART_SetConfig+0xa08>)
 800a16e:	e016      	b.n	800a19e <UART_SetConfig+0x95e>
 800a170:	4b34      	ldr	r3, [pc, #208]	; (800a244 <UART_SetConfig+0xa04>)
 800a172:	e014      	b.n	800a19e <UART_SetConfig+0x95e>
 800a174:	4b35      	ldr	r3, [pc, #212]	; (800a24c <UART_SetConfig+0xa0c>)
 800a176:	e012      	b.n	800a19e <UART_SetConfig+0x95e>
 800a178:	4b35      	ldr	r3, [pc, #212]	; (800a250 <UART_SetConfig+0xa10>)
 800a17a:	e010      	b.n	800a19e <UART_SetConfig+0x95e>
 800a17c:	4b35      	ldr	r3, [pc, #212]	; (800a254 <UART_SetConfig+0xa14>)
 800a17e:	e00e      	b.n	800a19e <UART_SetConfig+0x95e>
 800a180:	4b35      	ldr	r3, [pc, #212]	; (800a258 <UART_SetConfig+0xa18>)
 800a182:	e00c      	b.n	800a19e <UART_SetConfig+0x95e>
 800a184:	4b35      	ldr	r3, [pc, #212]	; (800a25c <UART_SetConfig+0xa1c>)
 800a186:	e00a      	b.n	800a19e <UART_SetConfig+0x95e>
 800a188:	4b35      	ldr	r3, [pc, #212]	; (800a260 <UART_SetConfig+0xa20>)
 800a18a:	e008      	b.n	800a19e <UART_SetConfig+0x95e>
 800a18c:	4b35      	ldr	r3, [pc, #212]	; (800a264 <UART_SetConfig+0xa24>)
 800a18e:	e006      	b.n	800a19e <UART_SetConfig+0x95e>
 800a190:	4b35      	ldr	r3, [pc, #212]	; (800a268 <UART_SetConfig+0xa28>)
 800a192:	e004      	b.n	800a19e <UART_SetConfig+0x95e>
 800a194:	4b35      	ldr	r3, [pc, #212]	; (800a26c <UART_SetConfig+0xa2c>)
 800a196:	e002      	b.n	800a19e <UART_SetConfig+0x95e>
 800a198:	4b35      	ldr	r3, [pc, #212]	; (800a270 <UART_SetConfig+0xa30>)
 800a19a:	e000      	b.n	800a19e <UART_SetConfig+0x95e>
 800a19c:	4b29      	ldr	r3, [pc, #164]	; (800a244 <UART_SetConfig+0xa04>)
 800a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1a0:	e0cb      	b.n	800a33a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d046      	beq.n	800a238 <UART_SetConfig+0x9f8>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d040      	beq.n	800a234 <UART_SetConfig+0x9f4>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d03a      	beq.n	800a230 <UART_SetConfig+0x9f0>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d034      	beq.n	800a22c <UART_SetConfig+0x9ec>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d02e      	beq.n	800a228 <UART_SetConfig+0x9e8>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b05      	cmp	r3, #5
 800a1d0:	d028      	beq.n	800a224 <UART_SetConfig+0x9e4>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b06      	cmp	r3, #6
 800a1d8:	d022      	beq.n	800a220 <UART_SetConfig+0x9e0>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b07      	cmp	r3, #7
 800a1e0:	d01c      	beq.n	800a21c <UART_SetConfig+0x9dc>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	d016      	beq.n	800a218 <UART_SetConfig+0x9d8>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b09      	cmp	r3, #9
 800a1f0:	d00f      	beq.n	800a212 <UART_SetConfig+0x9d2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	2b0a      	cmp	r3, #10
 800a1f8:	d008      	beq.n	800a20c <UART_SetConfig+0x9cc>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b0b      	cmp	r3, #11
 800a200:	d102      	bne.n	800a208 <UART_SetConfig+0x9c8>
 800a202:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a206:	e018      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a208:	4b13      	ldr	r3, [pc, #76]	; (800a258 <UART_SetConfig+0xa18>)
 800a20a:	e016      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a20c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a210:	e013      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a212:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a216:	e010      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a218:	4b16      	ldr	r3, [pc, #88]	; (800a274 <UART_SetConfig+0xa34>)
 800a21a:	e00e      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <UART_SetConfig+0xa08>)
 800a21e:	e00c      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a220:	4b15      	ldr	r3, [pc, #84]	; (800a278 <UART_SetConfig+0xa38>)
 800a222:	e00a      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a224:	4b15      	ldr	r3, [pc, #84]	; (800a27c <UART_SetConfig+0xa3c>)
 800a226:	e008      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a228:	4b08      	ldr	r3, [pc, #32]	; (800a24c <UART_SetConfig+0xa0c>)
 800a22a:	e006      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a22c:	4b14      	ldr	r3, [pc, #80]	; (800a280 <UART_SetConfig+0xa40>)
 800a22e:	e004      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <UART_SetConfig+0xa10>)
 800a232:	e002      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a234:	4b07      	ldr	r3, [pc, #28]	; (800a254 <UART_SetConfig+0xa14>)
 800a236:	e000      	b.n	800a23a <UART_SetConfig+0x9fa>
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <UART_SetConfig+0xa18>)
 800a23a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a23c:	e07d      	b.n	800a33a <UART_SetConfig+0xafa>
 800a23e:	bf00      	nop
 800a240:	58024400 	.word	0x58024400
 800a244:	03d09000 	.word	0x03d09000
 800a248:	0003d090 	.word	0x0003d090
 800a24c:	0007a120 	.word	0x0007a120
 800a250:	000f4240 	.word	0x000f4240
 800a254:	001e8480 	.word	0x001e8480
 800a258:	003d0900 	.word	0x003d0900
 800a25c:	00516155 	.word	0x00516155
 800a260:	0061a800 	.word	0x0061a800
 800a264:	007a1200 	.word	0x007a1200
 800a268:	00a2c2aa 	.word	0x00a2c2aa
 800a26c:	00f42400 	.word	0x00f42400
 800a270:	01e84800 	.word	0x01e84800
 800a274:	0001e848 	.word	0x0001e848
 800a278:	00051615 	.word	0x00051615
 800a27c:	00061a80 	.word	0x00061a80
 800a280:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d04e      	beq.n	800a32a <UART_SetConfig+0xaea>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	2b01      	cmp	r3, #1
 800a292:	d047      	beq.n	800a324 <UART_SetConfig+0xae4>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d040      	beq.n	800a31e <UART_SetConfig+0xade>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d039      	beq.n	800a318 <UART_SetConfig+0xad8>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d032      	beq.n	800a312 <UART_SetConfig+0xad2>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2b05      	cmp	r3, #5
 800a2b2:	d02b      	beq.n	800a30c <UART_SetConfig+0xacc>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	2b06      	cmp	r3, #6
 800a2ba:	d024      	beq.n	800a306 <UART_SetConfig+0xac6>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	2b07      	cmp	r3, #7
 800a2c2:	d01d      	beq.n	800a300 <UART_SetConfig+0xac0>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	d016      	beq.n	800a2fa <UART_SetConfig+0xaba>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b09      	cmp	r3, #9
 800a2d2:	d00f      	beq.n	800a2f4 <UART_SetConfig+0xab4>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	2b0a      	cmp	r3, #10
 800a2da:	d008      	beq.n	800a2ee <UART_SetConfig+0xaae>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	2b0b      	cmp	r3, #11
 800a2e2:	d101      	bne.n	800a2e8 <UART_SetConfig+0xaa8>
 800a2e4:	2380      	movs	r3, #128	; 0x80
 800a2e6:	e022      	b.n	800a32e <UART_SetConfig+0xaee>
 800a2e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ec:	e01f      	b.n	800a32e <UART_SetConfig+0xaee>
 800a2ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2f2:	e01c      	b.n	800a32e <UART_SetConfig+0xaee>
 800a2f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2f8:	e019      	b.n	800a32e <UART_SetConfig+0xaee>
 800a2fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2fe:	e016      	b.n	800a32e <UART_SetConfig+0xaee>
 800a300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a304:	e013      	b.n	800a32e <UART_SetConfig+0xaee>
 800a306:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a30a:	e010      	b.n	800a32e <UART_SetConfig+0xaee>
 800a30c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a310:	e00d      	b.n	800a32e <UART_SetConfig+0xaee>
 800a312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a316:	e00a      	b.n	800a32e <UART_SetConfig+0xaee>
 800a318:	f241 5355 	movw	r3, #5461	; 0x1555
 800a31c:	e007      	b.n	800a32e <UART_SetConfig+0xaee>
 800a31e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a322:	e004      	b.n	800a32e <UART_SetConfig+0xaee>
 800a324:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a328:	e001      	b.n	800a32e <UART_SetConfig+0xaee>
 800a32a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a32e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a330:	e003      	b.n	800a33a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a338:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f001 83e8 	beq.w	800bb12 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	4613      	mov	r3, r2
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	4413      	add	r3, r2
 800a34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a34e:	429a      	cmp	r2, r3
 800a350:	d305      	bcc.n	800a35e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d904      	bls.n	800a368 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a364:	f001 bbd5 	b.w	800bb12 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a368:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	f000 8154 	beq.w	800a61a <UART_SetConfig+0xdda>
 800a372:	2b08      	cmp	r3, #8
 800a374:	dc06      	bgt.n	800a384 <UART_SetConfig+0xb44>
 800a376:	2b02      	cmp	r3, #2
 800a378:	d00f      	beq.n	800a39a <UART_SetConfig+0xb5a>
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	f000 80ac 	beq.w	800a4d8 <UART_SetConfig+0xc98>
 800a380:	f000 bc30 	b.w	800abe4 <UART_SetConfig+0x13a4>
 800a384:	2b20      	cmp	r3, #32
 800a386:	f000 832d 	beq.w	800a9e4 <UART_SetConfig+0x11a4>
 800a38a:	2b40      	cmp	r3, #64	; 0x40
 800a38c:	f000 83a5 	beq.w	800aada <UART_SetConfig+0x129a>
 800a390:	2b10      	cmp	r3, #16
 800a392:	f000 81e3 	beq.w	800a75c <UART_SetConfig+0xf1c>
 800a396:	f000 bc25 	b.w	800abe4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a39a:	f7fd fdb7 	bl	8007f0c <HAL_RCCEx_GetD3PCLK1Freq>
 800a39e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f04f 0100 	mov.w	r1, #0
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d067      	beq.n	800a480 <UART_SetConfig+0xc40>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d05e      	beq.n	800a476 <UART_SetConfig+0xc36>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d055      	beq.n	800a46c <UART_SetConfig+0xc2c>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d04c      	beq.n	800a462 <UART_SetConfig+0xc22>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d043      	beq.n	800a458 <UART_SetConfig+0xc18>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b05      	cmp	r3, #5
 800a3d6:	d03a      	beq.n	800a44e <UART_SetConfig+0xc0e>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b06      	cmp	r3, #6
 800a3de:	d031      	beq.n	800a444 <UART_SetConfig+0xc04>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b07      	cmp	r3, #7
 800a3e6:	d028      	beq.n	800a43a <UART_SetConfig+0xbfa>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	d01f      	beq.n	800a430 <UART_SetConfig+0xbf0>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b09      	cmp	r3, #9
 800a3f6:	d016      	beq.n	800a426 <UART_SetConfig+0xbe6>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b0a      	cmp	r3, #10
 800a3fe:	d00d      	beq.n	800a41c <UART_SetConfig+0xbdc>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b0b      	cmp	r3, #11
 800a406:	d104      	bne.n	800a412 <UART_SetConfig+0xbd2>
 800a408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a40c:	f04f 0400 	mov.w	r4, #0
 800a410:	e03a      	b.n	800a488 <UART_SetConfig+0xc48>
 800a412:	f04f 0301 	mov.w	r3, #1
 800a416:	f04f 0400 	mov.w	r4, #0
 800a41a:	e035      	b.n	800a488 <UART_SetConfig+0xc48>
 800a41c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a420:	f04f 0400 	mov.w	r4, #0
 800a424:	e030      	b.n	800a488 <UART_SetConfig+0xc48>
 800a426:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a42a:	f04f 0400 	mov.w	r4, #0
 800a42e:	e02b      	b.n	800a488 <UART_SetConfig+0xc48>
 800a430:	f04f 0320 	mov.w	r3, #32
 800a434:	f04f 0400 	mov.w	r4, #0
 800a438:	e026      	b.n	800a488 <UART_SetConfig+0xc48>
 800a43a:	f04f 0310 	mov.w	r3, #16
 800a43e:	f04f 0400 	mov.w	r4, #0
 800a442:	e021      	b.n	800a488 <UART_SetConfig+0xc48>
 800a444:	f04f 030c 	mov.w	r3, #12
 800a448:	f04f 0400 	mov.w	r4, #0
 800a44c:	e01c      	b.n	800a488 <UART_SetConfig+0xc48>
 800a44e:	f04f 030a 	mov.w	r3, #10
 800a452:	f04f 0400 	mov.w	r4, #0
 800a456:	e017      	b.n	800a488 <UART_SetConfig+0xc48>
 800a458:	f04f 0308 	mov.w	r3, #8
 800a45c:	f04f 0400 	mov.w	r4, #0
 800a460:	e012      	b.n	800a488 <UART_SetConfig+0xc48>
 800a462:	f04f 0306 	mov.w	r3, #6
 800a466:	f04f 0400 	mov.w	r4, #0
 800a46a:	e00d      	b.n	800a488 <UART_SetConfig+0xc48>
 800a46c:	f04f 0304 	mov.w	r3, #4
 800a470:	f04f 0400 	mov.w	r4, #0
 800a474:	e008      	b.n	800a488 <UART_SetConfig+0xc48>
 800a476:	f04f 0302 	mov.w	r3, #2
 800a47a:	f04f 0400 	mov.w	r4, #0
 800a47e:	e003      	b.n	800a488 <UART_SetConfig+0xc48>
 800a480:	f04f 0301 	mov.w	r3, #1
 800a484:	f04f 0400 	mov.w	r4, #0
 800a488:	461a      	mov	r2, r3
 800a48a:	4623      	mov	r3, r4
 800a48c:	f7f5 ff24 	bl	80002d8 <__aeabi_uldivmod>
 800a490:	4603      	mov	r3, r0
 800a492:	460c      	mov	r4, r1
 800a494:	4619      	mov	r1, r3
 800a496:	4622      	mov	r2, r4
 800a498:	f04f 0300 	mov.w	r3, #0
 800a49c:	f04f 0400 	mov.w	r4, #0
 800a4a0:	0214      	lsls	r4, r2, #8
 800a4a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a4a6:	020b      	lsls	r3, r1, #8
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6852      	ldr	r2, [r2, #4]
 800a4ac:	0852      	lsrs	r2, r2, #1
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	f04f 0200 	mov.w	r2, #0
 800a4b4:	eb13 0b01 	adds.w	fp, r3, r1
 800a4b8:	eb44 0c02 	adc.w	ip, r4, r2
 800a4bc:	4658      	mov	r0, fp
 800a4be:	4661      	mov	r1, ip
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f04f 0400 	mov.w	r4, #0
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4623      	mov	r3, r4
 800a4cc:	f7f5 ff04 	bl	80002d8 <__aeabi_uldivmod>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4d6:	e389      	b.n	800abec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4d8:	f107 0318 	add.w	r3, r7, #24
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fd fd2b 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f04f 0100 	mov.w	r1, #0
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d067      	beq.n	800a5c2 <UART_SetConfig+0xd82>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d05e      	beq.n	800a5b8 <UART_SetConfig+0xd78>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d055      	beq.n	800a5ae <UART_SetConfig+0xd6e>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	2b03      	cmp	r3, #3
 800a508:	d04c      	beq.n	800a5a4 <UART_SetConfig+0xd64>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d043      	beq.n	800a59a <UART_SetConfig+0xd5a>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	2b05      	cmp	r3, #5
 800a518:	d03a      	beq.n	800a590 <UART_SetConfig+0xd50>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	2b06      	cmp	r3, #6
 800a520:	d031      	beq.n	800a586 <UART_SetConfig+0xd46>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	2b07      	cmp	r3, #7
 800a528:	d028      	beq.n	800a57c <UART_SetConfig+0xd3c>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	2b08      	cmp	r3, #8
 800a530:	d01f      	beq.n	800a572 <UART_SetConfig+0xd32>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	2b09      	cmp	r3, #9
 800a538:	d016      	beq.n	800a568 <UART_SetConfig+0xd28>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	2b0a      	cmp	r3, #10
 800a540:	d00d      	beq.n	800a55e <UART_SetConfig+0xd1e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	2b0b      	cmp	r3, #11
 800a548:	d104      	bne.n	800a554 <UART_SetConfig+0xd14>
 800a54a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a54e:	f04f 0400 	mov.w	r4, #0
 800a552:	e03a      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a554:	f04f 0301 	mov.w	r3, #1
 800a558:	f04f 0400 	mov.w	r4, #0
 800a55c:	e035      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a55e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a562:	f04f 0400 	mov.w	r4, #0
 800a566:	e030      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a568:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a56c:	f04f 0400 	mov.w	r4, #0
 800a570:	e02b      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a572:	f04f 0320 	mov.w	r3, #32
 800a576:	f04f 0400 	mov.w	r4, #0
 800a57a:	e026      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a57c:	f04f 0310 	mov.w	r3, #16
 800a580:	f04f 0400 	mov.w	r4, #0
 800a584:	e021      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a586:	f04f 030c 	mov.w	r3, #12
 800a58a:	f04f 0400 	mov.w	r4, #0
 800a58e:	e01c      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a590:	f04f 030a 	mov.w	r3, #10
 800a594:	f04f 0400 	mov.w	r4, #0
 800a598:	e017      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a59a:	f04f 0308 	mov.w	r3, #8
 800a59e:	f04f 0400 	mov.w	r4, #0
 800a5a2:	e012      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a5a4:	f04f 0306 	mov.w	r3, #6
 800a5a8:	f04f 0400 	mov.w	r4, #0
 800a5ac:	e00d      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a5ae:	f04f 0304 	mov.w	r3, #4
 800a5b2:	f04f 0400 	mov.w	r4, #0
 800a5b6:	e008      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a5b8:	f04f 0302 	mov.w	r3, #2
 800a5bc:	f04f 0400 	mov.w	r4, #0
 800a5c0:	e003      	b.n	800a5ca <UART_SetConfig+0xd8a>
 800a5c2:	f04f 0301 	mov.w	r3, #1
 800a5c6:	f04f 0400 	mov.w	r4, #0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	4623      	mov	r3, r4
 800a5ce:	f7f5 fe83 	bl	80002d8 <__aeabi_uldivmod>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4622      	mov	r2, r4
 800a5da:	f04f 0300 	mov.w	r3, #0
 800a5de:	f04f 0400 	mov.w	r4, #0
 800a5e2:	0214      	lsls	r4, r2, #8
 800a5e4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a5e8:	020b      	lsls	r3, r1, #8
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	6852      	ldr	r2, [r2, #4]
 800a5ee:	0852      	lsrs	r2, r2, #1
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	f04f 0200 	mov.w	r2, #0
 800a5f6:	eb13 0b01 	adds.w	fp, r3, r1
 800a5fa:	eb44 0c02 	adc.w	ip, r4, r2
 800a5fe:	4658      	mov	r0, fp
 800a600:	4661      	mov	r1, ip
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	f04f 0400 	mov.w	r4, #0
 800a60a:	461a      	mov	r2, r3
 800a60c:	4623      	mov	r3, r4
 800a60e:	f7f5 fe63 	bl	80002d8 <__aeabi_uldivmod>
 800a612:	4603      	mov	r3, r0
 800a614:	460c      	mov	r4, r1
 800a616:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a618:	e2e8      	b.n	800abec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a61a:	f107 030c 	add.w	r3, r7, #12
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fd fdd6 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	4618      	mov	r0, r3
 800a628:	f04f 0100 	mov.w	r1, #0
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	d067      	beq.n	800a704 <UART_SetConfig+0xec4>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d05e      	beq.n	800a6fa <UART_SetConfig+0xeba>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b02      	cmp	r3, #2
 800a642:	d055      	beq.n	800a6f0 <UART_SetConfig+0xeb0>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d04c      	beq.n	800a6e6 <UART_SetConfig+0xea6>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b04      	cmp	r3, #4
 800a652:	d043      	beq.n	800a6dc <UART_SetConfig+0xe9c>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b05      	cmp	r3, #5
 800a65a:	d03a      	beq.n	800a6d2 <UART_SetConfig+0xe92>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b06      	cmp	r3, #6
 800a662:	d031      	beq.n	800a6c8 <UART_SetConfig+0xe88>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b07      	cmp	r3, #7
 800a66a:	d028      	beq.n	800a6be <UART_SetConfig+0xe7e>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b08      	cmp	r3, #8
 800a672:	d01f      	beq.n	800a6b4 <UART_SetConfig+0xe74>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b09      	cmp	r3, #9
 800a67a:	d016      	beq.n	800a6aa <UART_SetConfig+0xe6a>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b0a      	cmp	r3, #10
 800a682:	d00d      	beq.n	800a6a0 <UART_SetConfig+0xe60>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b0b      	cmp	r3, #11
 800a68a:	d104      	bne.n	800a696 <UART_SetConfig+0xe56>
 800a68c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a690:	f04f 0400 	mov.w	r4, #0
 800a694:	e03a      	b.n	800a70c <UART_SetConfig+0xecc>
 800a696:	f04f 0301 	mov.w	r3, #1
 800a69a:	f04f 0400 	mov.w	r4, #0
 800a69e:	e035      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6a0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a6a4:	f04f 0400 	mov.w	r4, #0
 800a6a8:	e030      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a6ae:	f04f 0400 	mov.w	r4, #0
 800a6b2:	e02b      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6b4:	f04f 0320 	mov.w	r3, #32
 800a6b8:	f04f 0400 	mov.w	r4, #0
 800a6bc:	e026      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6be:	f04f 0310 	mov.w	r3, #16
 800a6c2:	f04f 0400 	mov.w	r4, #0
 800a6c6:	e021      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6c8:	f04f 030c 	mov.w	r3, #12
 800a6cc:	f04f 0400 	mov.w	r4, #0
 800a6d0:	e01c      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6d2:	f04f 030a 	mov.w	r3, #10
 800a6d6:	f04f 0400 	mov.w	r4, #0
 800a6da:	e017      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6dc:	f04f 0308 	mov.w	r3, #8
 800a6e0:	f04f 0400 	mov.w	r4, #0
 800a6e4:	e012      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6e6:	f04f 0306 	mov.w	r3, #6
 800a6ea:	f04f 0400 	mov.w	r4, #0
 800a6ee:	e00d      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6f0:	f04f 0304 	mov.w	r3, #4
 800a6f4:	f04f 0400 	mov.w	r4, #0
 800a6f8:	e008      	b.n	800a70c <UART_SetConfig+0xecc>
 800a6fa:	f04f 0302 	mov.w	r3, #2
 800a6fe:	f04f 0400 	mov.w	r4, #0
 800a702:	e003      	b.n	800a70c <UART_SetConfig+0xecc>
 800a704:	f04f 0301 	mov.w	r3, #1
 800a708:	f04f 0400 	mov.w	r4, #0
 800a70c:	461a      	mov	r2, r3
 800a70e:	4623      	mov	r3, r4
 800a710:	f7f5 fde2 	bl	80002d8 <__aeabi_uldivmod>
 800a714:	4603      	mov	r3, r0
 800a716:	460c      	mov	r4, r1
 800a718:	4619      	mov	r1, r3
 800a71a:	4622      	mov	r2, r4
 800a71c:	f04f 0300 	mov.w	r3, #0
 800a720:	f04f 0400 	mov.w	r4, #0
 800a724:	0214      	lsls	r4, r2, #8
 800a726:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a72a:	020b      	lsls	r3, r1, #8
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6852      	ldr	r2, [r2, #4]
 800a730:	0852      	lsrs	r2, r2, #1
 800a732:	4611      	mov	r1, r2
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	eb13 0b01 	adds.w	fp, r3, r1
 800a73c:	eb44 0c02 	adc.w	ip, r4, r2
 800a740:	4658      	mov	r0, fp
 800a742:	4661      	mov	r1, ip
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f04f 0400 	mov.w	r4, #0
 800a74c:	461a      	mov	r2, r3
 800a74e:	4623      	mov	r3, r4
 800a750:	f7f5 fdc2 	bl	80002d8 <__aeabi_uldivmod>
 800a754:	4603      	mov	r3, r0
 800a756:	460c      	mov	r4, r1
 800a758:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a75a:	e247      	b.n	800abec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a75c:	4b96      	ldr	r3, [pc, #600]	; (800a9b8 <UART_SetConfig+0x1178>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0320 	and.w	r3, r3, #32
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 80a3 	beq.w	800a8b0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a76a:	4b93      	ldr	r3, [pc, #588]	; (800a9b8 <UART_SetConfig+0x1178>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	08db      	lsrs	r3, r3, #3
 800a770:	f003 0303 	and.w	r3, r3, #3
 800a774:	4a91      	ldr	r2, [pc, #580]	; (800a9bc <UART_SetConfig+0x117c>)
 800a776:	fa22 f303 	lsr.w	r3, r2, r3
 800a77a:	4618      	mov	r0, r3
 800a77c:	f04f 0100 	mov.w	r1, #0
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b00      	cmp	r3, #0
 800a786:	d067      	beq.n	800a858 <UART_SetConfig+0x1018>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d05e      	beq.n	800a84e <UART_SetConfig+0x100e>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b02      	cmp	r3, #2
 800a796:	d055      	beq.n	800a844 <UART_SetConfig+0x1004>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d04c      	beq.n	800a83a <UART_SetConfig+0xffa>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	d043      	beq.n	800a830 <UART_SetConfig+0xff0>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	2b05      	cmp	r3, #5
 800a7ae:	d03a      	beq.n	800a826 <UART_SetConfig+0xfe6>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	2b06      	cmp	r3, #6
 800a7b6:	d031      	beq.n	800a81c <UART_SetConfig+0xfdc>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	2b07      	cmp	r3, #7
 800a7be:	d028      	beq.n	800a812 <UART_SetConfig+0xfd2>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d01f      	beq.n	800a808 <UART_SetConfig+0xfc8>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	2b09      	cmp	r3, #9
 800a7ce:	d016      	beq.n	800a7fe <UART_SetConfig+0xfbe>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	2b0a      	cmp	r3, #10
 800a7d6:	d00d      	beq.n	800a7f4 <UART_SetConfig+0xfb4>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	2b0b      	cmp	r3, #11
 800a7de:	d104      	bne.n	800a7ea <UART_SetConfig+0xfaa>
 800a7e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7e4:	f04f 0400 	mov.w	r4, #0
 800a7e8:	e03a      	b.n	800a860 <UART_SetConfig+0x1020>
 800a7ea:	f04f 0301 	mov.w	r3, #1
 800a7ee:	f04f 0400 	mov.w	r4, #0
 800a7f2:	e035      	b.n	800a860 <UART_SetConfig+0x1020>
 800a7f4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a7f8:	f04f 0400 	mov.w	r4, #0
 800a7fc:	e030      	b.n	800a860 <UART_SetConfig+0x1020>
 800a7fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a802:	f04f 0400 	mov.w	r4, #0
 800a806:	e02b      	b.n	800a860 <UART_SetConfig+0x1020>
 800a808:	f04f 0320 	mov.w	r3, #32
 800a80c:	f04f 0400 	mov.w	r4, #0
 800a810:	e026      	b.n	800a860 <UART_SetConfig+0x1020>
 800a812:	f04f 0310 	mov.w	r3, #16
 800a816:	f04f 0400 	mov.w	r4, #0
 800a81a:	e021      	b.n	800a860 <UART_SetConfig+0x1020>
 800a81c:	f04f 030c 	mov.w	r3, #12
 800a820:	f04f 0400 	mov.w	r4, #0
 800a824:	e01c      	b.n	800a860 <UART_SetConfig+0x1020>
 800a826:	f04f 030a 	mov.w	r3, #10
 800a82a:	f04f 0400 	mov.w	r4, #0
 800a82e:	e017      	b.n	800a860 <UART_SetConfig+0x1020>
 800a830:	f04f 0308 	mov.w	r3, #8
 800a834:	f04f 0400 	mov.w	r4, #0
 800a838:	e012      	b.n	800a860 <UART_SetConfig+0x1020>
 800a83a:	f04f 0306 	mov.w	r3, #6
 800a83e:	f04f 0400 	mov.w	r4, #0
 800a842:	e00d      	b.n	800a860 <UART_SetConfig+0x1020>
 800a844:	f04f 0304 	mov.w	r3, #4
 800a848:	f04f 0400 	mov.w	r4, #0
 800a84c:	e008      	b.n	800a860 <UART_SetConfig+0x1020>
 800a84e:	f04f 0302 	mov.w	r3, #2
 800a852:	f04f 0400 	mov.w	r4, #0
 800a856:	e003      	b.n	800a860 <UART_SetConfig+0x1020>
 800a858:	f04f 0301 	mov.w	r3, #1
 800a85c:	f04f 0400 	mov.w	r4, #0
 800a860:	461a      	mov	r2, r3
 800a862:	4623      	mov	r3, r4
 800a864:	f7f5 fd38 	bl	80002d8 <__aeabi_uldivmod>
 800a868:	4603      	mov	r3, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	4619      	mov	r1, r3
 800a86e:	4622      	mov	r2, r4
 800a870:	f04f 0300 	mov.w	r3, #0
 800a874:	f04f 0400 	mov.w	r4, #0
 800a878:	0214      	lsls	r4, r2, #8
 800a87a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a87e:	020b      	lsls	r3, r1, #8
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6852      	ldr	r2, [r2, #4]
 800a884:	0852      	lsrs	r2, r2, #1
 800a886:	4611      	mov	r1, r2
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	eb13 0b01 	adds.w	fp, r3, r1
 800a890:	eb44 0c02 	adc.w	ip, r4, r2
 800a894:	4658      	mov	r0, fp
 800a896:	4661      	mov	r1, ip
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f04f 0400 	mov.w	r4, #0
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	4623      	mov	r3, r4
 800a8a4:	f7f5 fd18 	bl	80002d8 <__aeabi_uldivmod>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a8ae:	e19d      	b.n	800abec <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d05b      	beq.n	800a970 <UART_SetConfig+0x1130>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d053      	beq.n	800a968 <UART_SetConfig+0x1128>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d04b      	beq.n	800a960 <UART_SetConfig+0x1120>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d043      	beq.n	800a958 <UART_SetConfig+0x1118>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	d03b      	beq.n	800a950 <UART_SetConfig+0x1110>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b05      	cmp	r3, #5
 800a8de:	d033      	beq.n	800a948 <UART_SetConfig+0x1108>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b06      	cmp	r3, #6
 800a8e6:	d02b      	beq.n	800a940 <UART_SetConfig+0x1100>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b07      	cmp	r3, #7
 800a8ee:	d023      	beq.n	800a938 <UART_SetConfig+0x10f8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b08      	cmp	r3, #8
 800a8f6:	d01b      	beq.n	800a930 <UART_SetConfig+0x10f0>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b09      	cmp	r3, #9
 800a8fe:	d013      	beq.n	800a928 <UART_SetConfig+0x10e8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	2b0a      	cmp	r3, #10
 800a906:	d00b      	beq.n	800a920 <UART_SetConfig+0x10e0>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	2b0b      	cmp	r3, #11
 800a90e:	d103      	bne.n	800a918 <UART_SetConfig+0x10d8>
 800a910:	4b2a      	ldr	r3, [pc, #168]	; (800a9bc <UART_SetConfig+0x117c>)
 800a912:	f04f 0400 	mov.w	r4, #0
 800a916:	e02e      	b.n	800a976 <UART_SetConfig+0x1136>
 800a918:	4b29      	ldr	r3, [pc, #164]	; (800a9c0 <UART_SetConfig+0x1180>)
 800a91a:	f04f 0403 	mov.w	r4, #3
 800a91e:	e02a      	b.n	800a976 <UART_SetConfig+0x1136>
 800a920:	4b28      	ldr	r3, [pc, #160]	; (800a9c4 <UART_SetConfig+0x1184>)
 800a922:	f04f 0400 	mov.w	r4, #0
 800a926:	e026      	b.n	800a976 <UART_SetConfig+0x1136>
 800a928:	4b27      	ldr	r3, [pc, #156]	; (800a9c8 <UART_SetConfig+0x1188>)
 800a92a:	f04f 0400 	mov.w	r4, #0
 800a92e:	e022      	b.n	800a976 <UART_SetConfig+0x1136>
 800a930:	4b26      	ldr	r3, [pc, #152]	; (800a9cc <UART_SetConfig+0x118c>)
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	e01e      	b.n	800a976 <UART_SetConfig+0x1136>
 800a938:	4b25      	ldr	r3, [pc, #148]	; (800a9d0 <UART_SetConfig+0x1190>)
 800a93a:	f04f 0400 	mov.w	r4, #0
 800a93e:	e01a      	b.n	800a976 <UART_SetConfig+0x1136>
 800a940:	a419      	add	r4, pc, #100	; (adr r4, 800a9a8 <UART_SetConfig+0x1168>)
 800a942:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a946:	e016      	b.n	800a976 <UART_SetConfig+0x1136>
 800a948:	4b22      	ldr	r3, [pc, #136]	; (800a9d4 <UART_SetConfig+0x1194>)
 800a94a:	f04f 0400 	mov.w	r4, #0
 800a94e:	e012      	b.n	800a976 <UART_SetConfig+0x1136>
 800a950:	4b21      	ldr	r3, [pc, #132]	; (800a9d8 <UART_SetConfig+0x1198>)
 800a952:	f04f 0400 	mov.w	r4, #0
 800a956:	e00e      	b.n	800a976 <UART_SetConfig+0x1136>
 800a958:	a415      	add	r4, pc, #84	; (adr r4, 800a9b0 <UART_SetConfig+0x1170>)
 800a95a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a95e:	e00a      	b.n	800a976 <UART_SetConfig+0x1136>
 800a960:	4b1e      	ldr	r3, [pc, #120]	; (800a9dc <UART_SetConfig+0x119c>)
 800a962:	f04f 0400 	mov.w	r4, #0
 800a966:	e006      	b.n	800a976 <UART_SetConfig+0x1136>
 800a968:	4b1d      	ldr	r3, [pc, #116]	; (800a9e0 <UART_SetConfig+0x11a0>)
 800a96a:	f04f 0401 	mov.w	r4, #1
 800a96e:	e002      	b.n	800a976 <UART_SetConfig+0x1136>
 800a970:	4b13      	ldr	r3, [pc, #76]	; (800a9c0 <UART_SetConfig+0x1180>)
 800a972:	f04f 0403 	mov.w	r4, #3
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	6852      	ldr	r2, [r2, #4]
 800a97a:	0852      	lsrs	r2, r2, #1
 800a97c:	4611      	mov	r1, r2
 800a97e:	f04f 0200 	mov.w	r2, #0
 800a982:	eb13 0b01 	adds.w	fp, r3, r1
 800a986:	eb44 0c02 	adc.w	ip, r4, r2
 800a98a:	4658      	mov	r0, fp
 800a98c:	4661      	mov	r1, ip
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f04f 0400 	mov.w	r4, #0
 800a996:	461a      	mov	r2, r3
 800a998:	4623      	mov	r3, r4
 800a99a:	f7f5 fc9d 	bl	80002d8 <__aeabi_uldivmod>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a9a4:	e122      	b.n	800abec <UART_SetConfig+0x13ac>
 800a9a6:	bf00      	nop
 800a9a8:	51615500 	.word	0x51615500
 800a9ac:	00000000 	.word	0x00000000
 800a9b0:	a2c2aa00 	.word	0xa2c2aa00
 800a9b4:	00000000 	.word	0x00000000
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	03d09000 	.word	0x03d09000
 800a9c0:	d0900000 	.word	0xd0900000
 800a9c4:	07a12000 	.word	0x07a12000
 800a9c8:	0f424000 	.word	0x0f424000
 800a9cc:	1e848000 	.word	0x1e848000
 800a9d0:	3d090000 	.word	0x3d090000
 800a9d4:	61a80000 	.word	0x61a80000
 800a9d8:	7a120000 	.word	0x7a120000
 800a9dc:	f4240000 	.word	0xf4240000
 800a9e0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d05b      	beq.n	800aaa4 <UART_SetConfig+0x1264>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d053      	beq.n	800aa9c <UART_SetConfig+0x125c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d04b      	beq.n	800aa94 <UART_SetConfig+0x1254>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d043      	beq.n	800aa8c <UART_SetConfig+0x124c>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d03b      	beq.n	800aa84 <UART_SetConfig+0x1244>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b05      	cmp	r3, #5
 800aa12:	d033      	beq.n	800aa7c <UART_SetConfig+0x123c>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b06      	cmp	r3, #6
 800aa1a:	d02b      	beq.n	800aa74 <UART_SetConfig+0x1234>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b07      	cmp	r3, #7
 800aa22:	d023      	beq.n	800aa6c <UART_SetConfig+0x122c>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b08      	cmp	r3, #8
 800aa2a:	d01b      	beq.n	800aa64 <UART_SetConfig+0x1224>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b09      	cmp	r3, #9
 800aa32:	d013      	beq.n	800aa5c <UART_SetConfig+0x121c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b0a      	cmp	r3, #10
 800aa3a:	d00b      	beq.n	800aa54 <UART_SetConfig+0x1214>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2b0b      	cmp	r3, #11
 800aa42:	d103      	bne.n	800aa4c <UART_SetConfig+0x120c>
 800aa44:	4bc0      	ldr	r3, [pc, #768]	; (800ad48 <UART_SetConfig+0x1508>)
 800aa46:	f04f 0400 	mov.w	r4, #0
 800aa4a:	e02e      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa4c:	4bbf      	ldr	r3, [pc, #764]	; (800ad4c <UART_SetConfig+0x150c>)
 800aa4e:	f04f 0400 	mov.w	r4, #0
 800aa52:	e02a      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa54:	4bbe      	ldr	r3, [pc, #760]	; (800ad50 <UART_SetConfig+0x1510>)
 800aa56:	f04f 0400 	mov.w	r4, #0
 800aa5a:	e026      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa5c:	4bbd      	ldr	r3, [pc, #756]	; (800ad54 <UART_SetConfig+0x1514>)
 800aa5e:	f04f 0400 	mov.w	r4, #0
 800aa62:	e022      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa64:	4bbc      	ldr	r3, [pc, #752]	; (800ad58 <UART_SetConfig+0x1518>)
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	e01e      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa6c:	4bbb      	ldr	r3, [pc, #748]	; (800ad5c <UART_SetConfig+0x151c>)
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	e01a      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa74:	a4b0      	add	r4, pc, #704	; (adr r4, 800ad38 <UART_SetConfig+0x14f8>)
 800aa76:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa7a:	e016      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa7c:	4bb8      	ldr	r3, [pc, #736]	; (800ad60 <UART_SetConfig+0x1520>)
 800aa7e:	f04f 0400 	mov.w	r4, #0
 800aa82:	e012      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa84:	4bb7      	ldr	r3, [pc, #732]	; (800ad64 <UART_SetConfig+0x1524>)
 800aa86:	f04f 0400 	mov.w	r4, #0
 800aa8a:	e00e      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa8c:	a4ac      	add	r4, pc, #688	; (adr r4, 800ad40 <UART_SetConfig+0x1500>)
 800aa8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa92:	e00a      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa94:	4bb4      	ldr	r3, [pc, #720]	; (800ad68 <UART_SetConfig+0x1528>)
 800aa96:	f04f 0400 	mov.w	r4, #0
 800aa9a:	e006      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aa9c:	4bb3      	ldr	r3, [pc, #716]	; (800ad6c <UART_SetConfig+0x152c>)
 800aa9e:	f04f 0400 	mov.w	r4, #0
 800aaa2:	e002      	b.n	800aaaa <UART_SetConfig+0x126a>
 800aaa4:	4ba9      	ldr	r3, [pc, #676]	; (800ad4c <UART_SetConfig+0x150c>)
 800aaa6:	f04f 0400 	mov.w	r4, #0
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	6852      	ldr	r2, [r2, #4]
 800aaae:	0852      	lsrs	r2, r2, #1
 800aab0:	4611      	mov	r1, r2
 800aab2:	f04f 0200 	mov.w	r2, #0
 800aab6:	eb13 0b01 	adds.w	fp, r3, r1
 800aaba:	eb44 0c02 	adc.w	ip, r4, r2
 800aabe:	4658      	mov	r0, fp
 800aac0:	4661      	mov	r1, ip
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f04f 0400 	mov.w	r4, #0
 800aaca:	461a      	mov	r2, r3
 800aacc:	4623      	mov	r3, r4
 800aace:	f7f5 fc03 	bl	80002d8 <__aeabi_uldivmod>
 800aad2:	4603      	mov	r3, r0
 800aad4:	460c      	mov	r4, r1
 800aad6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aad8:	e088      	b.n	800abec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d064      	beq.n	800abac <UART_SetConfig+0x136c>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d05b      	beq.n	800aba2 <UART_SetConfig+0x1362>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d052      	beq.n	800ab98 <UART_SetConfig+0x1358>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d04a      	beq.n	800ab90 <UART_SetConfig+0x1350>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	d041      	beq.n	800ab86 <UART_SetConfig+0x1346>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	2b05      	cmp	r3, #5
 800ab08:	d039      	beq.n	800ab7e <UART_SetConfig+0x133e>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	2b06      	cmp	r3, #6
 800ab10:	d031      	beq.n	800ab76 <UART_SetConfig+0x1336>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b07      	cmp	r3, #7
 800ab18:	d028      	beq.n	800ab6c <UART_SetConfig+0x132c>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	2b08      	cmp	r3, #8
 800ab20:	d01f      	beq.n	800ab62 <UART_SetConfig+0x1322>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	2b09      	cmp	r3, #9
 800ab28:	d016      	beq.n	800ab58 <UART_SetConfig+0x1318>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	2b0a      	cmp	r3, #10
 800ab30:	d00d      	beq.n	800ab4e <UART_SetConfig+0x130e>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab36:	2b0b      	cmp	r3, #11
 800ab38:	d104      	bne.n	800ab44 <UART_SetConfig+0x1304>
 800ab3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab3e:	f04f 0400 	mov.w	r4, #0
 800ab42:	e037      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab48:	f04f 0400 	mov.w	r4, #0
 800ab4c:	e032      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab52:	f04f 0400 	mov.w	r4, #0
 800ab56:	e02d      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab5c:	f04f 0400 	mov.w	r4, #0
 800ab60:	e028      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab66:	f04f 0400 	mov.w	r4, #0
 800ab6a:	e023      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab70:	f04f 0400 	mov.w	r4, #0
 800ab74:	e01e      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab76:	4b7e      	ldr	r3, [pc, #504]	; (800ad70 <UART_SetConfig+0x1530>)
 800ab78:	f04f 0400 	mov.w	r4, #0
 800ab7c:	e01a      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab7e:	4b7d      	ldr	r3, [pc, #500]	; (800ad74 <UART_SetConfig+0x1534>)
 800ab80:	f04f 0400 	mov.w	r4, #0
 800ab84:	e016      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab8a:	f04f 0400 	mov.w	r4, #0
 800ab8e:	e011      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab90:	4b79      	ldr	r3, [pc, #484]	; (800ad78 <UART_SetConfig+0x1538>)
 800ab92:	f04f 0400 	mov.w	r4, #0
 800ab96:	e00d      	b.n	800abb4 <UART_SetConfig+0x1374>
 800ab98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	e008      	b.n	800abb4 <UART_SetConfig+0x1374>
 800aba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aba6:	f04f 0400 	mov.w	r4, #0
 800abaa:	e003      	b.n	800abb4 <UART_SetConfig+0x1374>
 800abac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abb0:	f04f 0400 	mov.w	r4, #0
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	6852      	ldr	r2, [r2, #4]
 800abb8:	0852      	lsrs	r2, r2, #1
 800abba:	4611      	mov	r1, r2
 800abbc:	f04f 0200 	mov.w	r2, #0
 800abc0:	eb13 0b01 	adds.w	fp, r3, r1
 800abc4:	eb44 0c02 	adc.w	ip, r4, r2
 800abc8:	4658      	mov	r0, fp
 800abca:	4661      	mov	r1, ip
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f04f 0400 	mov.w	r4, #0
 800abd4:	461a      	mov	r2, r3
 800abd6:	4623      	mov	r3, r4
 800abd8:	f7f5 fb7e 	bl	80002d8 <__aeabi_uldivmod>
 800abdc:	4603      	mov	r3, r0
 800abde:	460c      	mov	r4, r1
 800abe0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800abe2:	e003      	b.n	800abec <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800abea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abf2:	d309      	bcc.n	800ac08 <UART_SetConfig+0x13c8>
 800abf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abfa:	d205      	bcs.n	800ac08 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac02:	60da      	str	r2, [r3, #12]
 800ac04:	f000 bf85 	b.w	800bb12 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0e:	f000 bf80 	b.w	800bb12 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac1a:	f040 83da 	bne.w	800b3d2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800ac1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac22:	2b40      	cmp	r3, #64	; 0x40
 800ac24:	f200 83b3 	bhi.w	800b38e <UART_SetConfig+0x1b4e>
 800ac28:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <UART_SetConfig+0x13f0>)
 800ac2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2e:	bf00      	nop
 800ac30:	0800ad7d 	.word	0x0800ad7d
 800ac34:	0800ae35 	.word	0x0800ae35
 800ac38:	0800b38f 	.word	0x0800b38f
 800ac3c:	0800b38f 	.word	0x0800b38f
 800ac40:	0800aeed 	.word	0x0800aeed
 800ac44:	0800b38f 	.word	0x0800b38f
 800ac48:	0800b38f 	.word	0x0800b38f
 800ac4c:	0800b38f 	.word	0x0800b38f
 800ac50:	0800afa9 	.word	0x0800afa9
 800ac54:	0800b38f 	.word	0x0800b38f
 800ac58:	0800b38f 	.word	0x0800b38f
 800ac5c:	0800b38f 	.word	0x0800b38f
 800ac60:	0800b38f 	.word	0x0800b38f
 800ac64:	0800b38f 	.word	0x0800b38f
 800ac68:	0800b38f 	.word	0x0800b38f
 800ac6c:	0800b38f 	.word	0x0800b38f
 800ac70:	0800b065 	.word	0x0800b065
 800ac74:	0800b38f 	.word	0x0800b38f
 800ac78:	0800b38f 	.word	0x0800b38f
 800ac7c:	0800b38f 	.word	0x0800b38f
 800ac80:	0800b38f 	.word	0x0800b38f
 800ac84:	0800b38f 	.word	0x0800b38f
 800ac88:	0800b38f 	.word	0x0800b38f
 800ac8c:	0800b38f 	.word	0x0800b38f
 800ac90:	0800b38f 	.word	0x0800b38f
 800ac94:	0800b38f 	.word	0x0800b38f
 800ac98:	0800b38f 	.word	0x0800b38f
 800ac9c:	0800b38f 	.word	0x0800b38f
 800aca0:	0800b38f 	.word	0x0800b38f
 800aca4:	0800b38f 	.word	0x0800b38f
 800aca8:	0800b38f 	.word	0x0800b38f
 800acac:	0800b38f 	.word	0x0800b38f
 800acb0:	0800b1d7 	.word	0x0800b1d7
 800acb4:	0800b38f 	.word	0x0800b38f
 800acb8:	0800b38f 	.word	0x0800b38f
 800acbc:	0800b38f 	.word	0x0800b38f
 800acc0:	0800b38f 	.word	0x0800b38f
 800acc4:	0800b38f 	.word	0x0800b38f
 800acc8:	0800b38f 	.word	0x0800b38f
 800accc:	0800b38f 	.word	0x0800b38f
 800acd0:	0800b38f 	.word	0x0800b38f
 800acd4:	0800b38f 	.word	0x0800b38f
 800acd8:	0800b38f 	.word	0x0800b38f
 800acdc:	0800b38f 	.word	0x0800b38f
 800ace0:	0800b38f 	.word	0x0800b38f
 800ace4:	0800b38f 	.word	0x0800b38f
 800ace8:	0800b38f 	.word	0x0800b38f
 800acec:	0800b38f 	.word	0x0800b38f
 800acf0:	0800b38f 	.word	0x0800b38f
 800acf4:	0800b38f 	.word	0x0800b38f
 800acf8:	0800b38f 	.word	0x0800b38f
 800acfc:	0800b38f 	.word	0x0800b38f
 800ad00:	0800b38f 	.word	0x0800b38f
 800ad04:	0800b38f 	.word	0x0800b38f
 800ad08:	0800b38f 	.word	0x0800b38f
 800ad0c:	0800b38f 	.word	0x0800b38f
 800ad10:	0800b38f 	.word	0x0800b38f
 800ad14:	0800b38f 	.word	0x0800b38f
 800ad18:	0800b38f 	.word	0x0800b38f
 800ad1c:	0800b38f 	.word	0x0800b38f
 800ad20:	0800b38f 	.word	0x0800b38f
 800ad24:	0800b38f 	.word	0x0800b38f
 800ad28:	0800b38f 	.word	0x0800b38f
 800ad2c:	0800b38f 	.word	0x0800b38f
 800ad30:	0800b2cd 	.word	0x0800b2cd
 800ad34:	f3af 8000 	nop.w
 800ad38:	05161500 	.word	0x05161500
 800ad3c:	00000000 	.word	0x00000000
 800ad40:	0a2c2a00 	.word	0x0a2c2a00
 800ad44:	00000000 	.word	0x00000000
 800ad48:	003d0900 	.word	0x003d0900
 800ad4c:	3d090000 	.word	0x3d090000
 800ad50:	007a1200 	.word	0x007a1200
 800ad54:	00f42400 	.word	0x00f42400
 800ad58:	01e84800 	.word	0x01e84800
 800ad5c:	03d09000 	.word	0x03d09000
 800ad60:	061a8000 	.word	0x061a8000
 800ad64:	07a12000 	.word	0x07a12000
 800ad68:	0f424000 	.word	0x0f424000
 800ad6c:	1e848000 	.word	0x1e848000
 800ad70:	000aaa00 	.word	0x000aaa00
 800ad74:	000ccc00 	.word	0x000ccc00
 800ad78:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7c:	f7fb ff44 	bl	8006c08 <HAL_RCC_GetPCLK1Freq>
 800ad80:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d044      	beq.n	800ae14 <UART_SetConfig+0x15d4>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d03e      	beq.n	800ae10 <UART_SetConfig+0x15d0>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d038      	beq.n	800ae0c <UART_SetConfig+0x15cc>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d032      	beq.n	800ae08 <UART_SetConfig+0x15c8>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d02c      	beq.n	800ae04 <UART_SetConfig+0x15c4>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d026      	beq.n	800ae00 <UART_SetConfig+0x15c0>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b06      	cmp	r3, #6
 800adb8:	d020      	beq.n	800adfc <UART_SetConfig+0x15bc>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	2b07      	cmp	r3, #7
 800adc0:	d01a      	beq.n	800adf8 <UART_SetConfig+0x15b8>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	2b08      	cmp	r3, #8
 800adc8:	d014      	beq.n	800adf4 <UART_SetConfig+0x15b4>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adce:	2b09      	cmp	r3, #9
 800add0:	d00e      	beq.n	800adf0 <UART_SetConfig+0x15b0>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	2b0a      	cmp	r3, #10
 800add8:	d008      	beq.n	800adec <UART_SetConfig+0x15ac>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	2b0b      	cmp	r3, #11
 800ade0:	d102      	bne.n	800ade8 <UART_SetConfig+0x15a8>
 800ade2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ade6:	e016      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800ade8:	2301      	movs	r3, #1
 800adea:	e014      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800adec:	2380      	movs	r3, #128	; 0x80
 800adee:	e012      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800adf0:	2340      	movs	r3, #64	; 0x40
 800adf2:	e010      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800adf4:	2320      	movs	r3, #32
 800adf6:	e00e      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800adf8:	2310      	movs	r3, #16
 800adfa:	e00c      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800adfc:	230c      	movs	r3, #12
 800adfe:	e00a      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800ae00:	230a      	movs	r3, #10
 800ae02:	e008      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800ae04:	2308      	movs	r3, #8
 800ae06:	e006      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800ae08:	2306      	movs	r3, #6
 800ae0a:	e004      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	e002      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800ae10:	2302      	movs	r3, #2
 800ae12:	e000      	b.n	800ae16 <UART_SetConfig+0x15d6>
 800ae14:	2301      	movs	r3, #1
 800ae16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1c:	005a      	lsls	r2, r3, #1
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	085b      	lsrs	r3, r3, #1
 800ae24:	441a      	add	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae32:	e2b0      	b.n	800b396 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae34:	f7fb fefe 	bl	8006c34 <HAL_RCC_GetPCLK2Freq>
 800ae38:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d044      	beq.n	800aecc <UART_SetConfig+0x168c>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d03e      	beq.n	800aec8 <UART_SetConfig+0x1688>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d038      	beq.n	800aec4 <UART_SetConfig+0x1684>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d032      	beq.n	800aec0 <UART_SetConfig+0x1680>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d02c      	beq.n	800aebc <UART_SetConfig+0x167c>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	2b05      	cmp	r3, #5
 800ae68:	d026      	beq.n	800aeb8 <UART_SetConfig+0x1678>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	2b06      	cmp	r3, #6
 800ae70:	d020      	beq.n	800aeb4 <UART_SetConfig+0x1674>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2b07      	cmp	r3, #7
 800ae78:	d01a      	beq.n	800aeb0 <UART_SetConfig+0x1670>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b08      	cmp	r3, #8
 800ae80:	d014      	beq.n	800aeac <UART_SetConfig+0x166c>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b09      	cmp	r3, #9
 800ae88:	d00e      	beq.n	800aea8 <UART_SetConfig+0x1668>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	2b0a      	cmp	r3, #10
 800ae90:	d008      	beq.n	800aea4 <UART_SetConfig+0x1664>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	2b0b      	cmp	r3, #11
 800ae98:	d102      	bne.n	800aea0 <UART_SetConfig+0x1660>
 800ae9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae9e:	e016      	b.n	800aece <UART_SetConfig+0x168e>
 800aea0:	2301      	movs	r3, #1
 800aea2:	e014      	b.n	800aece <UART_SetConfig+0x168e>
 800aea4:	2380      	movs	r3, #128	; 0x80
 800aea6:	e012      	b.n	800aece <UART_SetConfig+0x168e>
 800aea8:	2340      	movs	r3, #64	; 0x40
 800aeaa:	e010      	b.n	800aece <UART_SetConfig+0x168e>
 800aeac:	2320      	movs	r3, #32
 800aeae:	e00e      	b.n	800aece <UART_SetConfig+0x168e>
 800aeb0:	2310      	movs	r3, #16
 800aeb2:	e00c      	b.n	800aece <UART_SetConfig+0x168e>
 800aeb4:	230c      	movs	r3, #12
 800aeb6:	e00a      	b.n	800aece <UART_SetConfig+0x168e>
 800aeb8:	230a      	movs	r3, #10
 800aeba:	e008      	b.n	800aece <UART_SetConfig+0x168e>
 800aebc:	2308      	movs	r3, #8
 800aebe:	e006      	b.n	800aece <UART_SetConfig+0x168e>
 800aec0:	2306      	movs	r3, #6
 800aec2:	e004      	b.n	800aece <UART_SetConfig+0x168e>
 800aec4:	2304      	movs	r3, #4
 800aec6:	e002      	b.n	800aece <UART_SetConfig+0x168e>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e000      	b.n	800aece <UART_SetConfig+0x168e>
 800aecc:	2301      	movs	r3, #1
 800aece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aed0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed4:	005a      	lsls	r2, r3, #1
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	085b      	lsrs	r3, r3, #1
 800aedc:	441a      	add	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aeea:	e254      	b.n	800b396 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeec:	f107 0318 	add.w	r3, r7, #24
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fd f821 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aef6:	69fa      	ldr	r2, [r7, #28]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d044      	beq.n	800af8a <UART_SetConfig+0x174a>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	2b01      	cmp	r3, #1
 800af06:	d03e      	beq.n	800af86 <UART_SetConfig+0x1746>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d038      	beq.n	800af82 <UART_SetConfig+0x1742>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	2b03      	cmp	r3, #3
 800af16:	d032      	beq.n	800af7e <UART_SetConfig+0x173e>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d02c      	beq.n	800af7a <UART_SetConfig+0x173a>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b05      	cmp	r3, #5
 800af26:	d026      	beq.n	800af76 <UART_SetConfig+0x1736>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b06      	cmp	r3, #6
 800af2e:	d020      	beq.n	800af72 <UART_SetConfig+0x1732>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	2b07      	cmp	r3, #7
 800af36:	d01a      	beq.n	800af6e <UART_SetConfig+0x172e>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	2b08      	cmp	r3, #8
 800af3e:	d014      	beq.n	800af6a <UART_SetConfig+0x172a>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	2b09      	cmp	r3, #9
 800af46:	d00e      	beq.n	800af66 <UART_SetConfig+0x1726>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	2b0a      	cmp	r3, #10
 800af4e:	d008      	beq.n	800af62 <UART_SetConfig+0x1722>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b0b      	cmp	r3, #11
 800af56:	d102      	bne.n	800af5e <UART_SetConfig+0x171e>
 800af58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af5c:	e016      	b.n	800af8c <UART_SetConfig+0x174c>
 800af5e:	2301      	movs	r3, #1
 800af60:	e014      	b.n	800af8c <UART_SetConfig+0x174c>
 800af62:	2380      	movs	r3, #128	; 0x80
 800af64:	e012      	b.n	800af8c <UART_SetConfig+0x174c>
 800af66:	2340      	movs	r3, #64	; 0x40
 800af68:	e010      	b.n	800af8c <UART_SetConfig+0x174c>
 800af6a:	2320      	movs	r3, #32
 800af6c:	e00e      	b.n	800af8c <UART_SetConfig+0x174c>
 800af6e:	2310      	movs	r3, #16
 800af70:	e00c      	b.n	800af8c <UART_SetConfig+0x174c>
 800af72:	230c      	movs	r3, #12
 800af74:	e00a      	b.n	800af8c <UART_SetConfig+0x174c>
 800af76:	230a      	movs	r3, #10
 800af78:	e008      	b.n	800af8c <UART_SetConfig+0x174c>
 800af7a:	2308      	movs	r3, #8
 800af7c:	e006      	b.n	800af8c <UART_SetConfig+0x174c>
 800af7e:	2306      	movs	r3, #6
 800af80:	e004      	b.n	800af8c <UART_SetConfig+0x174c>
 800af82:	2304      	movs	r3, #4
 800af84:	e002      	b.n	800af8c <UART_SetConfig+0x174c>
 800af86:	2302      	movs	r3, #2
 800af88:	e000      	b.n	800af8c <UART_SetConfig+0x174c>
 800af8a:	2301      	movs	r3, #1
 800af8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af90:	005a      	lsls	r2, r3, #1
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	085b      	lsrs	r3, r3, #1
 800af98:	441a      	add	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afa6:	e1f6      	b.n	800b396 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afa8:	f107 030c 	add.w	r3, r7, #12
 800afac:	4618      	mov	r0, r3
 800afae:	f7fd f90f 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d044      	beq.n	800b046 <UART_SetConfig+0x1806>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d03e      	beq.n	800b042 <UART_SetConfig+0x1802>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d038      	beq.n	800b03e <UART_SetConfig+0x17fe>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d032      	beq.n	800b03a <UART_SetConfig+0x17fa>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	2b04      	cmp	r3, #4
 800afda:	d02c      	beq.n	800b036 <UART_SetConfig+0x17f6>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe0:	2b05      	cmp	r3, #5
 800afe2:	d026      	beq.n	800b032 <UART_SetConfig+0x17f2>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	2b06      	cmp	r3, #6
 800afea:	d020      	beq.n	800b02e <UART_SetConfig+0x17ee>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff0:	2b07      	cmp	r3, #7
 800aff2:	d01a      	beq.n	800b02a <UART_SetConfig+0x17ea>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	2b08      	cmp	r3, #8
 800affa:	d014      	beq.n	800b026 <UART_SetConfig+0x17e6>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	2b09      	cmp	r3, #9
 800b002:	d00e      	beq.n	800b022 <UART_SetConfig+0x17e2>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	2b0a      	cmp	r3, #10
 800b00a:	d008      	beq.n	800b01e <UART_SetConfig+0x17de>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	2b0b      	cmp	r3, #11
 800b012:	d102      	bne.n	800b01a <UART_SetConfig+0x17da>
 800b014:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b018:	e016      	b.n	800b048 <UART_SetConfig+0x1808>
 800b01a:	2301      	movs	r3, #1
 800b01c:	e014      	b.n	800b048 <UART_SetConfig+0x1808>
 800b01e:	2380      	movs	r3, #128	; 0x80
 800b020:	e012      	b.n	800b048 <UART_SetConfig+0x1808>
 800b022:	2340      	movs	r3, #64	; 0x40
 800b024:	e010      	b.n	800b048 <UART_SetConfig+0x1808>
 800b026:	2320      	movs	r3, #32
 800b028:	e00e      	b.n	800b048 <UART_SetConfig+0x1808>
 800b02a:	2310      	movs	r3, #16
 800b02c:	e00c      	b.n	800b048 <UART_SetConfig+0x1808>
 800b02e:	230c      	movs	r3, #12
 800b030:	e00a      	b.n	800b048 <UART_SetConfig+0x1808>
 800b032:	230a      	movs	r3, #10
 800b034:	e008      	b.n	800b048 <UART_SetConfig+0x1808>
 800b036:	2308      	movs	r3, #8
 800b038:	e006      	b.n	800b048 <UART_SetConfig+0x1808>
 800b03a:	2306      	movs	r3, #6
 800b03c:	e004      	b.n	800b048 <UART_SetConfig+0x1808>
 800b03e:	2304      	movs	r3, #4
 800b040:	e002      	b.n	800b048 <UART_SetConfig+0x1808>
 800b042:	2302      	movs	r3, #2
 800b044:	e000      	b.n	800b048 <UART_SetConfig+0x1808>
 800b046:	2301      	movs	r3, #1
 800b048:	fbb2 f3f3 	udiv	r3, r2, r3
 800b04c:	005a      	lsls	r2, r3, #1
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	441a      	add	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b05e:	b29b      	uxth	r3, r3
 800b060:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b062:	e198      	b.n	800b396 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b064:	4b87      	ldr	r3, [pc, #540]	; (800b284 <UART_SetConfig+0x1a44>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0320 	and.w	r3, r3, #32
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d05e      	beq.n	800b12e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b070:	4b84      	ldr	r3, [pc, #528]	; (800b284 <UART_SetConfig+0x1a44>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	08db      	lsrs	r3, r3, #3
 800b076:	f003 0303 	and.w	r3, r3, #3
 800b07a:	4a83      	ldr	r2, [pc, #524]	; (800b288 <UART_SetConfig+0x1a48>)
 800b07c:	40da      	lsrs	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	2b00      	cmp	r3, #0
 800b084:	d044      	beq.n	800b110 <UART_SetConfig+0x18d0>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d03e      	beq.n	800b10c <UART_SetConfig+0x18cc>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	2b02      	cmp	r3, #2
 800b094:	d038      	beq.n	800b108 <UART_SetConfig+0x18c8>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	d032      	beq.n	800b104 <UART_SetConfig+0x18c4>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d02c      	beq.n	800b100 <UART_SetConfig+0x18c0>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	2b05      	cmp	r3, #5
 800b0ac:	d026      	beq.n	800b0fc <UART_SetConfig+0x18bc>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	2b06      	cmp	r3, #6
 800b0b4:	d020      	beq.n	800b0f8 <UART_SetConfig+0x18b8>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	2b07      	cmp	r3, #7
 800b0bc:	d01a      	beq.n	800b0f4 <UART_SetConfig+0x18b4>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	2b08      	cmp	r3, #8
 800b0c4:	d014      	beq.n	800b0f0 <UART_SetConfig+0x18b0>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ca:	2b09      	cmp	r3, #9
 800b0cc:	d00e      	beq.n	800b0ec <UART_SetConfig+0x18ac>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d2:	2b0a      	cmp	r3, #10
 800b0d4:	d008      	beq.n	800b0e8 <UART_SetConfig+0x18a8>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	2b0b      	cmp	r3, #11
 800b0dc:	d102      	bne.n	800b0e4 <UART_SetConfig+0x18a4>
 800b0de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0e2:	e016      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e014      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b0e8:	2380      	movs	r3, #128	; 0x80
 800b0ea:	e012      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b0ec:	2340      	movs	r3, #64	; 0x40
 800b0ee:	e010      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	e00e      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b0f4:	2310      	movs	r3, #16
 800b0f6:	e00c      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b0f8:	230c      	movs	r3, #12
 800b0fa:	e00a      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b0fc:	230a      	movs	r3, #10
 800b0fe:	e008      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b100:	2308      	movs	r3, #8
 800b102:	e006      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b104:	2306      	movs	r3, #6
 800b106:	e004      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b108:	2304      	movs	r3, #4
 800b10a:	e002      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b10c:	2302      	movs	r3, #2
 800b10e:	e000      	b.n	800b112 <UART_SetConfig+0x18d2>
 800b110:	2301      	movs	r3, #1
 800b112:	fbb2 f3f3 	udiv	r3, r2, r3
 800b116:	005a      	lsls	r2, r3, #1
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	085b      	lsrs	r3, r3, #1
 800b11e:	441a      	add	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	fbb2 f3f3 	udiv	r3, r2, r3
 800b128:	b29b      	uxth	r3, r3
 800b12a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b12c:	e133      	b.n	800b396 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	2b00      	cmp	r3, #0
 800b134:	d043      	beq.n	800b1be <UART_SetConfig+0x197e>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d03d      	beq.n	800b1ba <UART_SetConfig+0x197a>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	2b02      	cmp	r3, #2
 800b144:	d037      	beq.n	800b1b6 <UART_SetConfig+0x1976>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d031      	beq.n	800b1b2 <UART_SetConfig+0x1972>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b04      	cmp	r3, #4
 800b154:	d02b      	beq.n	800b1ae <UART_SetConfig+0x196e>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b05      	cmp	r3, #5
 800b15c:	d025      	beq.n	800b1aa <UART_SetConfig+0x196a>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	2b06      	cmp	r3, #6
 800b164:	d01f      	beq.n	800b1a6 <UART_SetConfig+0x1966>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b07      	cmp	r3, #7
 800b16c:	d019      	beq.n	800b1a2 <UART_SetConfig+0x1962>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b08      	cmp	r3, #8
 800b174:	d013      	beq.n	800b19e <UART_SetConfig+0x195e>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	2b09      	cmp	r3, #9
 800b17c:	d00d      	beq.n	800b19a <UART_SetConfig+0x195a>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2b0a      	cmp	r3, #10
 800b184:	d007      	beq.n	800b196 <UART_SetConfig+0x1956>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b0b      	cmp	r3, #11
 800b18c:	d101      	bne.n	800b192 <UART_SetConfig+0x1952>
 800b18e:	4b3f      	ldr	r3, [pc, #252]	; (800b28c <UART_SetConfig+0x1a4c>)
 800b190:	e016      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b192:	4b3f      	ldr	r3, [pc, #252]	; (800b290 <UART_SetConfig+0x1a50>)
 800b194:	e014      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b196:	4b3f      	ldr	r3, [pc, #252]	; (800b294 <UART_SetConfig+0x1a54>)
 800b198:	e012      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b19a:	4b3f      	ldr	r3, [pc, #252]	; (800b298 <UART_SetConfig+0x1a58>)
 800b19c:	e010      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b19e:	4b3f      	ldr	r3, [pc, #252]	; (800b29c <UART_SetConfig+0x1a5c>)
 800b1a0:	e00e      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b1a2:	4b3f      	ldr	r3, [pc, #252]	; (800b2a0 <UART_SetConfig+0x1a60>)
 800b1a4:	e00c      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b1a6:	4b3f      	ldr	r3, [pc, #252]	; (800b2a4 <UART_SetConfig+0x1a64>)
 800b1a8:	e00a      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b1aa:	4b3f      	ldr	r3, [pc, #252]	; (800b2a8 <UART_SetConfig+0x1a68>)
 800b1ac:	e008      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b1ae:	4b3f      	ldr	r3, [pc, #252]	; (800b2ac <UART_SetConfig+0x1a6c>)
 800b1b0:	e006      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b1b2:	4b3f      	ldr	r3, [pc, #252]	; (800b2b0 <UART_SetConfig+0x1a70>)
 800b1b4:	e004      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b1b6:	4b3f      	ldr	r3, [pc, #252]	; (800b2b4 <UART_SetConfig+0x1a74>)
 800b1b8:	e002      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b1ba:	4b33      	ldr	r3, [pc, #204]	; (800b288 <UART_SetConfig+0x1a48>)
 800b1bc:	e000      	b.n	800b1c0 <UART_SetConfig+0x1980>
 800b1be:	4b34      	ldr	r3, [pc, #208]	; (800b290 <UART_SetConfig+0x1a50>)
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6852      	ldr	r2, [r2, #4]
 800b1c4:	0852      	lsrs	r2, r2, #1
 800b1c6:	441a      	add	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1d4:	e0df      	b.n	800b396 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d045      	beq.n	800b26a <UART_SetConfig+0x1a2a>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d03f      	beq.n	800b266 <UART_SetConfig+0x1a26>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d039      	beq.n	800b262 <UART_SetConfig+0x1a22>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d033      	beq.n	800b25e <UART_SetConfig+0x1a1e>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	d02d      	beq.n	800b25a <UART_SetConfig+0x1a1a>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	2b05      	cmp	r3, #5
 800b204:	d027      	beq.n	800b256 <UART_SetConfig+0x1a16>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	2b06      	cmp	r3, #6
 800b20c:	d021      	beq.n	800b252 <UART_SetConfig+0x1a12>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	2b07      	cmp	r3, #7
 800b214:	d01b      	beq.n	800b24e <UART_SetConfig+0x1a0e>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	2b08      	cmp	r3, #8
 800b21c:	d015      	beq.n	800b24a <UART_SetConfig+0x1a0a>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b222:	2b09      	cmp	r3, #9
 800b224:	d00f      	beq.n	800b246 <UART_SetConfig+0x1a06>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	2b0a      	cmp	r3, #10
 800b22c:	d008      	beq.n	800b240 <UART_SetConfig+0x1a00>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	2b0b      	cmp	r3, #11
 800b234:	d102      	bne.n	800b23c <UART_SetConfig+0x19fc>
 800b236:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b23a:	e017      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b23c:	4b18      	ldr	r3, [pc, #96]	; (800b2a0 <UART_SetConfig+0x1a60>)
 800b23e:	e015      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b240:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b244:	e012      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b246:	4b1c      	ldr	r3, [pc, #112]	; (800b2b8 <UART_SetConfig+0x1a78>)
 800b248:	e010      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b24a:	4b1c      	ldr	r3, [pc, #112]	; (800b2bc <UART_SetConfig+0x1a7c>)
 800b24c:	e00e      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b24e:	4b0f      	ldr	r3, [pc, #60]	; (800b28c <UART_SetConfig+0x1a4c>)
 800b250:	e00c      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b252:	4b1b      	ldr	r3, [pc, #108]	; (800b2c0 <UART_SetConfig+0x1a80>)
 800b254:	e00a      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b256:	4b1b      	ldr	r3, [pc, #108]	; (800b2c4 <UART_SetConfig+0x1a84>)
 800b258:	e008      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b25a:	4b0e      	ldr	r3, [pc, #56]	; (800b294 <UART_SetConfig+0x1a54>)
 800b25c:	e006      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b25e:	4b1a      	ldr	r3, [pc, #104]	; (800b2c8 <UART_SetConfig+0x1a88>)
 800b260:	e004      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b262:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <UART_SetConfig+0x1a58>)
 800b264:	e002      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b266:	4b0d      	ldr	r3, [pc, #52]	; (800b29c <UART_SetConfig+0x1a5c>)
 800b268:	e000      	b.n	800b26c <UART_SetConfig+0x1a2c>
 800b26a:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <UART_SetConfig+0x1a60>)
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	6852      	ldr	r2, [r2, #4]
 800b270:	0852      	lsrs	r2, r2, #1
 800b272:	441a      	add	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b280:	e089      	b.n	800b396 <UART_SetConfig+0x1b56>
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400
 800b288:	03d09000 	.word	0x03d09000
 800b28c:	0007a120 	.word	0x0007a120
 800b290:	07a12000 	.word	0x07a12000
 800b294:	000f4240 	.word	0x000f4240
 800b298:	001e8480 	.word	0x001e8480
 800b29c:	003d0900 	.word	0x003d0900
 800b2a0:	007a1200 	.word	0x007a1200
 800b2a4:	00a2c2aa 	.word	0x00a2c2aa
 800b2a8:	00c35000 	.word	0x00c35000
 800b2ac:	00f42400 	.word	0x00f42400
 800b2b0:	01458554 	.word	0x01458554
 800b2b4:	01e84800 	.word	0x01e84800
 800b2b8:	0001e848 	.word	0x0001e848
 800b2bc:	0003d090 	.word	0x0003d090
 800b2c0:	000a2c2a 	.word	0x000a2c2a
 800b2c4:	000c3500 	.word	0x000c3500
 800b2c8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d04f      	beq.n	800b374 <UART_SetConfig+0x1b34>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d048      	beq.n	800b36e <UART_SetConfig+0x1b2e>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d041      	beq.n	800b368 <UART_SetConfig+0x1b28>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d03a      	beq.n	800b362 <UART_SetConfig+0x1b22>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	2b04      	cmp	r3, #4
 800b2f2:	d033      	beq.n	800b35c <UART_SetConfig+0x1b1c>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f8:	2b05      	cmp	r3, #5
 800b2fa:	d02c      	beq.n	800b356 <UART_SetConfig+0x1b16>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	2b06      	cmp	r3, #6
 800b302:	d025      	beq.n	800b350 <UART_SetConfig+0x1b10>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b308:	2b07      	cmp	r3, #7
 800b30a:	d01e      	beq.n	800b34a <UART_SetConfig+0x1b0a>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	2b08      	cmp	r3, #8
 800b312:	d017      	beq.n	800b344 <UART_SetConfig+0x1b04>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	2b09      	cmp	r3, #9
 800b31a:	d010      	beq.n	800b33e <UART_SetConfig+0x1afe>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	2b0a      	cmp	r3, #10
 800b322:	d009      	beq.n	800b338 <UART_SetConfig+0x1af8>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b328:	2b0b      	cmp	r3, #11
 800b32a:	d102      	bne.n	800b332 <UART_SetConfig+0x1af2>
 800b32c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b330:	e022      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b336:	e01f      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b33c:	e01c      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b33e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b342:	e019      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b348:	e016      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b34a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b34e:	e013      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b350:	f241 5354 	movw	r3, #5460	; 0x1554
 800b354:	e010      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b356:	f641 1398 	movw	r3, #6552	; 0x1998
 800b35a:	e00d      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b35c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b360:	e00a      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b362:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b366:	e007      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b36c:	e004      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b36e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b372:	e001      	b.n	800b378 <UART_SetConfig+0x1b38>
 800b374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	6852      	ldr	r2, [r2, #4]
 800b37c:	0852      	lsrs	r2, r2, #1
 800b37e:	441a      	add	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	fbb2 f3f3 	udiv	r3, r2, r3
 800b388:	b29b      	uxth	r3, r3
 800b38a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b38c:	e003      	b.n	800b396 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b398:	2b0f      	cmp	r3, #15
 800b39a:	d916      	bls.n	800b3ca <UART_SetConfig+0x1b8a>
 800b39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a2:	d212      	bcs.n	800b3ca <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	f023 030f 	bic.w	r3, r3, #15
 800b3ac:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b0:	085b      	lsrs	r3, r3, #1
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	f003 0307 	and.w	r3, r3, #7
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3c6:	60da      	str	r2, [r3, #12]
 800b3c8:	e3a3      	b.n	800bb12 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d0:	e39f      	b.n	800bb12 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b3d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3d6:	2b40      	cmp	r3, #64	; 0x40
 800b3d8:	f200 8388 	bhi.w	800baec <UART_SetConfig+0x22ac>
 800b3dc:	a201      	add	r2, pc, #4	; (adr r2, 800b3e4 <UART_SetConfig+0x1ba4>)
 800b3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e2:	bf00      	nop
 800b3e4:	0800b4e9 	.word	0x0800b4e9
 800b3e8:	0800b59f 	.word	0x0800b59f
 800b3ec:	0800baed 	.word	0x0800baed
 800b3f0:	0800baed 	.word	0x0800baed
 800b3f4:	0800b655 	.word	0x0800b655
 800b3f8:	0800baed 	.word	0x0800baed
 800b3fc:	0800baed 	.word	0x0800baed
 800b400:	0800baed 	.word	0x0800baed
 800b404:	0800b70f 	.word	0x0800b70f
 800b408:	0800baed 	.word	0x0800baed
 800b40c:	0800baed 	.word	0x0800baed
 800b410:	0800baed 	.word	0x0800baed
 800b414:	0800baed 	.word	0x0800baed
 800b418:	0800baed 	.word	0x0800baed
 800b41c:	0800baed 	.word	0x0800baed
 800b420:	0800baed 	.word	0x0800baed
 800b424:	0800b7c9 	.word	0x0800b7c9
 800b428:	0800baed 	.word	0x0800baed
 800b42c:	0800baed 	.word	0x0800baed
 800b430:	0800baed 	.word	0x0800baed
 800b434:	0800baed 	.word	0x0800baed
 800b438:	0800baed 	.word	0x0800baed
 800b43c:	0800baed 	.word	0x0800baed
 800b440:	0800baed 	.word	0x0800baed
 800b444:	0800baed 	.word	0x0800baed
 800b448:	0800baed 	.word	0x0800baed
 800b44c:	0800baed 	.word	0x0800baed
 800b450:	0800baed 	.word	0x0800baed
 800b454:	0800baed 	.word	0x0800baed
 800b458:	0800baed 	.word	0x0800baed
 800b45c:	0800baed 	.word	0x0800baed
 800b460:	0800baed 	.word	0x0800baed
 800b464:	0800b939 	.word	0x0800b939
 800b468:	0800baed 	.word	0x0800baed
 800b46c:	0800baed 	.word	0x0800baed
 800b470:	0800baed 	.word	0x0800baed
 800b474:	0800baed 	.word	0x0800baed
 800b478:	0800baed 	.word	0x0800baed
 800b47c:	0800baed 	.word	0x0800baed
 800b480:	0800baed 	.word	0x0800baed
 800b484:	0800baed 	.word	0x0800baed
 800b488:	0800baed 	.word	0x0800baed
 800b48c:	0800baed 	.word	0x0800baed
 800b490:	0800baed 	.word	0x0800baed
 800b494:	0800baed 	.word	0x0800baed
 800b498:	0800baed 	.word	0x0800baed
 800b49c:	0800baed 	.word	0x0800baed
 800b4a0:	0800baed 	.word	0x0800baed
 800b4a4:	0800baed 	.word	0x0800baed
 800b4a8:	0800baed 	.word	0x0800baed
 800b4ac:	0800baed 	.word	0x0800baed
 800b4b0:	0800baed 	.word	0x0800baed
 800b4b4:	0800baed 	.word	0x0800baed
 800b4b8:	0800baed 	.word	0x0800baed
 800b4bc:	0800baed 	.word	0x0800baed
 800b4c0:	0800baed 	.word	0x0800baed
 800b4c4:	0800baed 	.word	0x0800baed
 800b4c8:	0800baed 	.word	0x0800baed
 800b4cc:	0800baed 	.word	0x0800baed
 800b4d0:	0800baed 	.word	0x0800baed
 800b4d4:	0800baed 	.word	0x0800baed
 800b4d8:	0800baed 	.word	0x0800baed
 800b4dc:	0800baed 	.word	0x0800baed
 800b4e0:	0800baed 	.word	0x0800baed
 800b4e4:	0800ba2d 	.word	0x0800ba2d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4e8:	f7fb fb8e 	bl	8006c08 <HAL_RCC_GetPCLK1Freq>
 800b4ec:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d044      	beq.n	800b580 <UART_SetConfig+0x1d40>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d03e      	beq.n	800b57c <UART_SetConfig+0x1d3c>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	2b02      	cmp	r3, #2
 800b504:	d038      	beq.n	800b578 <UART_SetConfig+0x1d38>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d032      	beq.n	800b574 <UART_SetConfig+0x1d34>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	2b04      	cmp	r3, #4
 800b514:	d02c      	beq.n	800b570 <UART_SetConfig+0x1d30>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	2b05      	cmp	r3, #5
 800b51c:	d026      	beq.n	800b56c <UART_SetConfig+0x1d2c>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	2b06      	cmp	r3, #6
 800b524:	d020      	beq.n	800b568 <UART_SetConfig+0x1d28>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52a:	2b07      	cmp	r3, #7
 800b52c:	d01a      	beq.n	800b564 <UART_SetConfig+0x1d24>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	2b08      	cmp	r3, #8
 800b534:	d014      	beq.n	800b560 <UART_SetConfig+0x1d20>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	2b09      	cmp	r3, #9
 800b53c:	d00e      	beq.n	800b55c <UART_SetConfig+0x1d1c>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	2b0a      	cmp	r3, #10
 800b544:	d008      	beq.n	800b558 <UART_SetConfig+0x1d18>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	2b0b      	cmp	r3, #11
 800b54c:	d102      	bne.n	800b554 <UART_SetConfig+0x1d14>
 800b54e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b552:	e016      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b554:	2301      	movs	r3, #1
 800b556:	e014      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b558:	2380      	movs	r3, #128	; 0x80
 800b55a:	e012      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b55c:	2340      	movs	r3, #64	; 0x40
 800b55e:	e010      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b560:	2320      	movs	r3, #32
 800b562:	e00e      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b564:	2310      	movs	r3, #16
 800b566:	e00c      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b568:	230c      	movs	r3, #12
 800b56a:	e00a      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b56c:	230a      	movs	r3, #10
 800b56e:	e008      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b570:	2308      	movs	r3, #8
 800b572:	e006      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b574:	2306      	movs	r3, #6
 800b576:	e004      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b578:	2304      	movs	r3, #4
 800b57a:	e002      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b57c:	2302      	movs	r3, #2
 800b57e:	e000      	b.n	800b582 <UART_SetConfig+0x1d42>
 800b580:	2301      	movs	r3, #1
 800b582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b584:	fbb2 f2f3 	udiv	r2, r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	085b      	lsrs	r3, r3, #1
 800b58e:	441a      	add	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	fbb2 f3f3 	udiv	r3, r2, r3
 800b598:	b29b      	uxth	r3, r3
 800b59a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b59c:	e2aa      	b.n	800baf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b59e:	f7fb fb49 	bl	8006c34 <HAL_RCC_GetPCLK2Freq>
 800b5a2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d044      	beq.n	800b636 <UART_SetConfig+0x1df6>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d03e      	beq.n	800b632 <UART_SetConfig+0x1df2>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d038      	beq.n	800b62e <UART_SetConfig+0x1dee>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	2b03      	cmp	r3, #3
 800b5c2:	d032      	beq.n	800b62a <UART_SetConfig+0x1dea>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d02c      	beq.n	800b626 <UART_SetConfig+0x1de6>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	2b05      	cmp	r3, #5
 800b5d2:	d026      	beq.n	800b622 <UART_SetConfig+0x1de2>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	2b06      	cmp	r3, #6
 800b5da:	d020      	beq.n	800b61e <UART_SetConfig+0x1dde>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	2b07      	cmp	r3, #7
 800b5e2:	d01a      	beq.n	800b61a <UART_SetConfig+0x1dda>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	2b08      	cmp	r3, #8
 800b5ea:	d014      	beq.n	800b616 <UART_SetConfig+0x1dd6>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f0:	2b09      	cmp	r3, #9
 800b5f2:	d00e      	beq.n	800b612 <UART_SetConfig+0x1dd2>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f8:	2b0a      	cmp	r3, #10
 800b5fa:	d008      	beq.n	800b60e <UART_SetConfig+0x1dce>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	2b0b      	cmp	r3, #11
 800b602:	d102      	bne.n	800b60a <UART_SetConfig+0x1dca>
 800b604:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b608:	e016      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e014      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b60e:	2380      	movs	r3, #128	; 0x80
 800b610:	e012      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b612:	2340      	movs	r3, #64	; 0x40
 800b614:	e010      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b616:	2320      	movs	r3, #32
 800b618:	e00e      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b61a:	2310      	movs	r3, #16
 800b61c:	e00c      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b61e:	230c      	movs	r3, #12
 800b620:	e00a      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b622:	230a      	movs	r3, #10
 800b624:	e008      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b626:	2308      	movs	r3, #8
 800b628:	e006      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b62a:	2306      	movs	r3, #6
 800b62c:	e004      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b62e:	2304      	movs	r3, #4
 800b630:	e002      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b632:	2302      	movs	r3, #2
 800b634:	e000      	b.n	800b638 <UART_SetConfig+0x1df8>
 800b636:	2301      	movs	r3, #1
 800b638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b63a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	085b      	lsrs	r3, r3, #1
 800b644:	441a      	add	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64e:	b29b      	uxth	r3, r3
 800b650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b652:	e24f      	b.n	800baf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b654:	f107 0318 	add.w	r3, r7, #24
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fc fc6d 	bl	8007f38 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b65e:	69fa      	ldr	r2, [r7, #28]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b664:	2b00      	cmp	r3, #0
 800b666:	d044      	beq.n	800b6f2 <UART_SetConfig+0x1eb2>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d03e      	beq.n	800b6ee <UART_SetConfig+0x1eae>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	2b02      	cmp	r3, #2
 800b676:	d038      	beq.n	800b6ea <UART_SetConfig+0x1eaa>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b03      	cmp	r3, #3
 800b67e:	d032      	beq.n	800b6e6 <UART_SetConfig+0x1ea6>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	2b04      	cmp	r3, #4
 800b686:	d02c      	beq.n	800b6e2 <UART_SetConfig+0x1ea2>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b05      	cmp	r3, #5
 800b68e:	d026      	beq.n	800b6de <UART_SetConfig+0x1e9e>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b06      	cmp	r3, #6
 800b696:	d020      	beq.n	800b6da <UART_SetConfig+0x1e9a>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	2b07      	cmp	r3, #7
 800b69e:	d01a      	beq.n	800b6d6 <UART_SetConfig+0x1e96>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b08      	cmp	r3, #8
 800b6a6:	d014      	beq.n	800b6d2 <UART_SetConfig+0x1e92>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ac:	2b09      	cmp	r3, #9
 800b6ae:	d00e      	beq.n	800b6ce <UART_SetConfig+0x1e8e>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2b0a      	cmp	r3, #10
 800b6b6:	d008      	beq.n	800b6ca <UART_SetConfig+0x1e8a>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	2b0b      	cmp	r3, #11
 800b6be:	d102      	bne.n	800b6c6 <UART_SetConfig+0x1e86>
 800b6c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6c4:	e016      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e014      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6ca:	2380      	movs	r3, #128	; 0x80
 800b6cc:	e012      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6ce:	2340      	movs	r3, #64	; 0x40
 800b6d0:	e010      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6d2:	2320      	movs	r3, #32
 800b6d4:	e00e      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6d6:	2310      	movs	r3, #16
 800b6d8:	e00c      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6da:	230c      	movs	r3, #12
 800b6dc:	e00a      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6de:	230a      	movs	r3, #10
 800b6e0:	e008      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6e2:	2308      	movs	r3, #8
 800b6e4:	e006      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6e6:	2306      	movs	r3, #6
 800b6e8:	e004      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	e002      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e000      	b.n	800b6f4 <UART_SetConfig+0x1eb4>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	085b      	lsrs	r3, r3, #1
 800b6fe:	441a      	add	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	fbb2 f3f3 	udiv	r3, r2, r3
 800b708:	b29b      	uxth	r3, r3
 800b70a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b70c:	e1f2      	b.n	800baf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b70e:	f107 030c 	add.w	r3, r7, #12
 800b712:	4618      	mov	r0, r3
 800b714:	f7fc fd5c 	bl	80081d0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d044      	beq.n	800b7ac <UART_SetConfig+0x1f6c>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b726:	2b01      	cmp	r3, #1
 800b728:	d03e      	beq.n	800b7a8 <UART_SetConfig+0x1f68>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d038      	beq.n	800b7a4 <UART_SetConfig+0x1f64>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b736:	2b03      	cmp	r3, #3
 800b738:	d032      	beq.n	800b7a0 <UART_SetConfig+0x1f60>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d02c      	beq.n	800b79c <UART_SetConfig+0x1f5c>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	2b05      	cmp	r3, #5
 800b748:	d026      	beq.n	800b798 <UART_SetConfig+0x1f58>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74e:	2b06      	cmp	r3, #6
 800b750:	d020      	beq.n	800b794 <UART_SetConfig+0x1f54>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	2b07      	cmp	r3, #7
 800b758:	d01a      	beq.n	800b790 <UART_SetConfig+0x1f50>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	2b08      	cmp	r3, #8
 800b760:	d014      	beq.n	800b78c <UART_SetConfig+0x1f4c>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b766:	2b09      	cmp	r3, #9
 800b768:	d00e      	beq.n	800b788 <UART_SetConfig+0x1f48>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	2b0a      	cmp	r3, #10
 800b770:	d008      	beq.n	800b784 <UART_SetConfig+0x1f44>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	2b0b      	cmp	r3, #11
 800b778:	d102      	bne.n	800b780 <UART_SetConfig+0x1f40>
 800b77a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b77e:	e016      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b780:	2301      	movs	r3, #1
 800b782:	e014      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b784:	2380      	movs	r3, #128	; 0x80
 800b786:	e012      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b788:	2340      	movs	r3, #64	; 0x40
 800b78a:	e010      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b78c:	2320      	movs	r3, #32
 800b78e:	e00e      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b790:	2310      	movs	r3, #16
 800b792:	e00c      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b794:	230c      	movs	r3, #12
 800b796:	e00a      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b798:	230a      	movs	r3, #10
 800b79a:	e008      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b79c:	2308      	movs	r3, #8
 800b79e:	e006      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b7a0:	2306      	movs	r3, #6
 800b7a2:	e004      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b7a4:	2304      	movs	r3, #4
 800b7a6:	e002      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e000      	b.n	800b7ae <UART_SetConfig+0x1f6e>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	085b      	lsrs	r3, r3, #1
 800b7b8:	441a      	add	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7c6:	e195      	b.n	800baf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7c8:	4b87      	ldr	r3, [pc, #540]	; (800b9e8 <UART_SetConfig+0x21a8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 0320 	and.w	r3, r3, #32
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d05d      	beq.n	800b890 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7d4:	4b84      	ldr	r3, [pc, #528]	; (800b9e8 <UART_SetConfig+0x21a8>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	08db      	lsrs	r3, r3, #3
 800b7da:	f003 0303 	and.w	r3, r3, #3
 800b7de:	4a83      	ldr	r2, [pc, #524]	; (800b9ec <UART_SetConfig+0x21ac>)
 800b7e0:	40da      	lsrs	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d044      	beq.n	800b874 <UART_SetConfig+0x2034>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d03e      	beq.n	800b870 <UART_SetConfig+0x2030>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d038      	beq.n	800b86c <UART_SetConfig+0x202c>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d032      	beq.n	800b868 <UART_SetConfig+0x2028>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	2b04      	cmp	r3, #4
 800b808:	d02c      	beq.n	800b864 <UART_SetConfig+0x2024>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	2b05      	cmp	r3, #5
 800b810:	d026      	beq.n	800b860 <UART_SetConfig+0x2020>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	2b06      	cmp	r3, #6
 800b818:	d020      	beq.n	800b85c <UART_SetConfig+0x201c>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	2b07      	cmp	r3, #7
 800b820:	d01a      	beq.n	800b858 <UART_SetConfig+0x2018>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	2b08      	cmp	r3, #8
 800b828:	d014      	beq.n	800b854 <UART_SetConfig+0x2014>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	2b09      	cmp	r3, #9
 800b830:	d00e      	beq.n	800b850 <UART_SetConfig+0x2010>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b836:	2b0a      	cmp	r3, #10
 800b838:	d008      	beq.n	800b84c <UART_SetConfig+0x200c>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	2b0b      	cmp	r3, #11
 800b840:	d102      	bne.n	800b848 <UART_SetConfig+0x2008>
 800b842:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b846:	e016      	b.n	800b876 <UART_SetConfig+0x2036>
 800b848:	2301      	movs	r3, #1
 800b84a:	e014      	b.n	800b876 <UART_SetConfig+0x2036>
 800b84c:	2380      	movs	r3, #128	; 0x80
 800b84e:	e012      	b.n	800b876 <UART_SetConfig+0x2036>
 800b850:	2340      	movs	r3, #64	; 0x40
 800b852:	e010      	b.n	800b876 <UART_SetConfig+0x2036>
 800b854:	2320      	movs	r3, #32
 800b856:	e00e      	b.n	800b876 <UART_SetConfig+0x2036>
 800b858:	2310      	movs	r3, #16
 800b85a:	e00c      	b.n	800b876 <UART_SetConfig+0x2036>
 800b85c:	230c      	movs	r3, #12
 800b85e:	e00a      	b.n	800b876 <UART_SetConfig+0x2036>
 800b860:	230a      	movs	r3, #10
 800b862:	e008      	b.n	800b876 <UART_SetConfig+0x2036>
 800b864:	2308      	movs	r3, #8
 800b866:	e006      	b.n	800b876 <UART_SetConfig+0x2036>
 800b868:	2306      	movs	r3, #6
 800b86a:	e004      	b.n	800b876 <UART_SetConfig+0x2036>
 800b86c:	2304      	movs	r3, #4
 800b86e:	e002      	b.n	800b876 <UART_SetConfig+0x2036>
 800b870:	2302      	movs	r3, #2
 800b872:	e000      	b.n	800b876 <UART_SetConfig+0x2036>
 800b874:	2301      	movs	r3, #1
 800b876:	fbb2 f2f3 	udiv	r2, r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	085b      	lsrs	r3, r3, #1
 800b880:	441a      	add	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b88e:	e131      	b.n	800baf4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	2b00      	cmp	r3, #0
 800b896:	d043      	beq.n	800b920 <UART_SetConfig+0x20e0>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d03d      	beq.n	800b91c <UART_SetConfig+0x20dc>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d037      	beq.n	800b918 <UART_SetConfig+0x20d8>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d031      	beq.n	800b914 <UART_SetConfig+0x20d4>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	2b04      	cmp	r3, #4
 800b8b6:	d02b      	beq.n	800b910 <UART_SetConfig+0x20d0>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2b05      	cmp	r3, #5
 800b8be:	d025      	beq.n	800b90c <UART_SetConfig+0x20cc>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	2b06      	cmp	r3, #6
 800b8c6:	d01f      	beq.n	800b908 <UART_SetConfig+0x20c8>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	2b07      	cmp	r3, #7
 800b8ce:	d019      	beq.n	800b904 <UART_SetConfig+0x20c4>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d013      	beq.n	800b900 <UART_SetConfig+0x20c0>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	2b09      	cmp	r3, #9
 800b8de:	d00d      	beq.n	800b8fc <UART_SetConfig+0x20bc>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e4:	2b0a      	cmp	r3, #10
 800b8e6:	d007      	beq.n	800b8f8 <UART_SetConfig+0x20b8>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	2b0b      	cmp	r3, #11
 800b8ee:	d101      	bne.n	800b8f4 <UART_SetConfig+0x20b4>
 800b8f0:	4b3f      	ldr	r3, [pc, #252]	; (800b9f0 <UART_SetConfig+0x21b0>)
 800b8f2:	e016      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b8f4:	4b3d      	ldr	r3, [pc, #244]	; (800b9ec <UART_SetConfig+0x21ac>)
 800b8f6:	e014      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b8f8:	4b3e      	ldr	r3, [pc, #248]	; (800b9f4 <UART_SetConfig+0x21b4>)
 800b8fa:	e012      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b8fc:	4b3e      	ldr	r3, [pc, #248]	; (800b9f8 <UART_SetConfig+0x21b8>)
 800b8fe:	e010      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b900:	4b3e      	ldr	r3, [pc, #248]	; (800b9fc <UART_SetConfig+0x21bc>)
 800b902:	e00e      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b904:	4b3e      	ldr	r3, [pc, #248]	; (800ba00 <UART_SetConfig+0x21c0>)
 800b906:	e00c      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b908:	4b3e      	ldr	r3, [pc, #248]	; (800ba04 <UART_SetConfig+0x21c4>)
 800b90a:	e00a      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b90c:	4b3e      	ldr	r3, [pc, #248]	; (800ba08 <UART_SetConfig+0x21c8>)
 800b90e:	e008      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b910:	4b3e      	ldr	r3, [pc, #248]	; (800ba0c <UART_SetConfig+0x21cc>)
 800b912:	e006      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b914:	4b3e      	ldr	r3, [pc, #248]	; (800ba10 <UART_SetConfig+0x21d0>)
 800b916:	e004      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b918:	4b3e      	ldr	r3, [pc, #248]	; (800ba14 <UART_SetConfig+0x21d4>)
 800b91a:	e002      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b91c:	4b3e      	ldr	r3, [pc, #248]	; (800ba18 <UART_SetConfig+0x21d8>)
 800b91e:	e000      	b.n	800b922 <UART_SetConfig+0x20e2>
 800b920:	4b32      	ldr	r3, [pc, #200]	; (800b9ec <UART_SetConfig+0x21ac>)
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6852      	ldr	r2, [r2, #4]
 800b926:	0852      	lsrs	r2, r2, #1
 800b928:	441a      	add	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b932:	b29b      	uxth	r3, r3
 800b934:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b936:	e0dd      	b.n	800baf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d046      	beq.n	800b9ce <UART_SetConfig+0x218e>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	2b01      	cmp	r3, #1
 800b946:	d040      	beq.n	800b9ca <UART_SetConfig+0x218a>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d03a      	beq.n	800b9c6 <UART_SetConfig+0x2186>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	2b03      	cmp	r3, #3
 800b956:	d034      	beq.n	800b9c2 <UART_SetConfig+0x2182>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	d02e      	beq.n	800b9be <UART_SetConfig+0x217e>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	2b05      	cmp	r3, #5
 800b966:	d028      	beq.n	800b9ba <UART_SetConfig+0x217a>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	2b06      	cmp	r3, #6
 800b96e:	d022      	beq.n	800b9b6 <UART_SetConfig+0x2176>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	2b07      	cmp	r3, #7
 800b976:	d01c      	beq.n	800b9b2 <UART_SetConfig+0x2172>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	2b08      	cmp	r3, #8
 800b97e:	d016      	beq.n	800b9ae <UART_SetConfig+0x216e>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	2b09      	cmp	r3, #9
 800b986:	d00f      	beq.n	800b9a8 <UART_SetConfig+0x2168>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98c:	2b0a      	cmp	r3, #10
 800b98e:	d008      	beq.n	800b9a2 <UART_SetConfig+0x2162>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b994:	2b0b      	cmp	r3, #11
 800b996:	d102      	bne.n	800b99e <UART_SetConfig+0x215e>
 800b998:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b99c:	e018      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b99e:	4b18      	ldr	r3, [pc, #96]	; (800ba00 <UART_SetConfig+0x21c0>)
 800b9a0:	e016      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9a2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b9a6:	e013      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9a8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b9ac:	e010      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9ae:	4b1b      	ldr	r3, [pc, #108]	; (800ba1c <UART_SetConfig+0x21dc>)
 800b9b0:	e00e      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9b2:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <UART_SetConfig+0x21b0>)
 800b9b4:	e00c      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ba20 <UART_SetConfig+0x21e0>)
 800b9b8:	e00a      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9ba:	4b1a      	ldr	r3, [pc, #104]	; (800ba24 <UART_SetConfig+0x21e4>)
 800b9bc:	e008      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9be:	4b0d      	ldr	r3, [pc, #52]	; (800b9f4 <UART_SetConfig+0x21b4>)
 800b9c0:	e006      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9c2:	4b19      	ldr	r3, [pc, #100]	; (800ba28 <UART_SetConfig+0x21e8>)
 800b9c4:	e004      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9c6:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <UART_SetConfig+0x21b8>)
 800b9c8:	e002      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9ca:	4b0c      	ldr	r3, [pc, #48]	; (800b9fc <UART_SetConfig+0x21bc>)
 800b9cc:	e000      	b.n	800b9d0 <UART_SetConfig+0x2190>
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <UART_SetConfig+0x21c0>)
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	6852      	ldr	r2, [r2, #4]
 800b9d4:	0852      	lsrs	r2, r2, #1
 800b9d6:	441a      	add	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9e4:	e086      	b.n	800baf4 <UART_SetConfig+0x22b4>
 800b9e6:	bf00      	nop
 800b9e8:	58024400 	.word	0x58024400
 800b9ec:	03d09000 	.word	0x03d09000
 800b9f0:	0003d090 	.word	0x0003d090
 800b9f4:	0007a120 	.word	0x0007a120
 800b9f8:	000f4240 	.word	0x000f4240
 800b9fc:	001e8480 	.word	0x001e8480
 800ba00:	003d0900 	.word	0x003d0900
 800ba04:	00516155 	.word	0x00516155
 800ba08:	0061a800 	.word	0x0061a800
 800ba0c:	007a1200 	.word	0x007a1200
 800ba10:	00a2c2aa 	.word	0x00a2c2aa
 800ba14:	00f42400 	.word	0x00f42400
 800ba18:	01e84800 	.word	0x01e84800
 800ba1c:	0001e848 	.word	0x0001e848
 800ba20:	00051615 	.word	0x00051615
 800ba24:	00061a80 	.word	0x00061a80
 800ba28:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d04e      	beq.n	800bad2 <UART_SetConfig+0x2292>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d047      	beq.n	800bacc <UART_SetConfig+0x228c>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d040      	beq.n	800bac6 <UART_SetConfig+0x2286>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d039      	beq.n	800bac0 <UART_SetConfig+0x2280>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	d032      	beq.n	800baba <UART_SetConfig+0x227a>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	2b05      	cmp	r3, #5
 800ba5a:	d02b      	beq.n	800bab4 <UART_SetConfig+0x2274>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b06      	cmp	r3, #6
 800ba62:	d024      	beq.n	800baae <UART_SetConfig+0x226e>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba68:	2b07      	cmp	r3, #7
 800ba6a:	d01d      	beq.n	800baa8 <UART_SetConfig+0x2268>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2b08      	cmp	r3, #8
 800ba72:	d016      	beq.n	800baa2 <UART_SetConfig+0x2262>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b09      	cmp	r3, #9
 800ba7a:	d00f      	beq.n	800ba9c <UART_SetConfig+0x225c>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b0a      	cmp	r3, #10
 800ba82:	d008      	beq.n	800ba96 <UART_SetConfig+0x2256>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b0b      	cmp	r3, #11
 800ba8a:	d101      	bne.n	800ba90 <UART_SetConfig+0x2250>
 800ba8c:	2380      	movs	r3, #128	; 0x80
 800ba8e:	e022      	b.n	800bad6 <UART_SetConfig+0x2296>
 800ba90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba94:	e01f      	b.n	800bad6 <UART_SetConfig+0x2296>
 800ba96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba9a:	e01c      	b.n	800bad6 <UART_SetConfig+0x2296>
 800ba9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baa0:	e019      	b.n	800bad6 <UART_SetConfig+0x2296>
 800baa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baa6:	e016      	b.n	800bad6 <UART_SetConfig+0x2296>
 800baa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800baac:	e013      	b.n	800bad6 <UART_SetConfig+0x2296>
 800baae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bab2:	e010      	b.n	800bad6 <UART_SetConfig+0x2296>
 800bab4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bab8:	e00d      	b.n	800bad6 <UART_SetConfig+0x2296>
 800baba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800babe:	e00a      	b.n	800bad6 <UART_SetConfig+0x2296>
 800bac0:	f241 5355 	movw	r3, #5461	; 0x1555
 800bac4:	e007      	b.n	800bad6 <UART_SetConfig+0x2296>
 800bac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800baca:	e004      	b.n	800bad6 <UART_SetConfig+0x2296>
 800bacc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bad0:	e001      	b.n	800bad6 <UART_SetConfig+0x2296>
 800bad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	6852      	ldr	r2, [r2, #4]
 800bada:	0852      	lsrs	r2, r2, #1
 800badc:	441a      	add	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baea:	e003      	b.n	800baf4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800baf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf6:	2b0f      	cmp	r3, #15
 800baf8:	d908      	bls.n	800bb0c <UART_SetConfig+0x22cc>
 800bafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb00:	d204      	bcs.n	800bb0c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb08:	60da      	str	r2, [r3, #12]
 800bb0a:	e002      	b.n	800bb12 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bb2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3740      	adds	r7, #64	; 0x40
 800bb36:	46bd      	mov	sp, r7
 800bb38:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bb3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00a      	beq.n	800bb66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	430a      	orrs	r2, r1
 800bb64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6a:	f003 0302 	and.w	r3, r3, #2
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	430a      	orrs	r2, r1
 800bb86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8c:	f003 0304 	and.w	r3, r3, #4
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00a      	beq.n	800bbaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbae:	f003 0308 	and.w	r3, r3, #8
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd0:	f003 0310 	and.w	r3, r3, #16
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00a      	beq.n	800bbee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	430a      	orrs	r2, r1
 800bbec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf2:	f003 0320 	and.w	r3, r3, #32
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00a      	beq.n	800bc10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	430a      	orrs	r2, r1
 800bc0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d01a      	beq.n	800bc52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	430a      	orrs	r2, r1
 800bc30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc3a:	d10a      	bne.n	800bc52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00a      	beq.n	800bc74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	430a      	orrs	r2, r1
 800bc72:	605a      	str	r2, [r3, #4]
  }
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af02      	add	r7, sp, #8
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bc90:	f7f6 f9c4 	bl	800201c <HAL_GetTick>
 800bc94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	d10e      	bne.n	800bcc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f82c 	bl	800bd10 <UART_WaitOnFlagUntilTimeout>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e022      	b.n	800bd08 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 0304 	and.w	r3, r3, #4
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	d10e      	bne.n	800bcee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f816 	bl	800bd10 <UART_WaitOnFlagUntilTimeout>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e00c      	b.n	800bd08 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2220      	movs	r2, #32
 800bcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	603b      	str	r3, [r7, #0]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd20:	e062      	b.n	800bde8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd28:	d05e      	beq.n	800bde8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd2a:	f7f6 f977 	bl	800201c <HAL_GetTick>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	69ba      	ldr	r2, [r7, #24]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d302      	bcc.n	800bd40 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d11d      	bne.n	800bd7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd4e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	689a      	ldr	r2, [r3, #8]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0201 	bic.w	r2, r2, #1
 800bd5e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2220      	movs	r2, #32
 800bd64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2220      	movs	r2, #32
 800bd6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bd78:	2303      	movs	r3, #3
 800bd7a:	e045      	b.n	800be08 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d02e      	beq.n	800bde8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69db      	ldr	r3, [r3, #28]
 800bd90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd98:	d126      	bne.n	800bde8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bda2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689a      	ldr	r2, [r3, #8]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f022 0201 	bic.w	r2, r2, #1
 800bdc2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2220      	movs	r2, #32
 800bdc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2220      	movs	r2, #32
 800bdd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bde4:	2303      	movs	r3, #3
 800bde6:	e00f      	b.n	800be08 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	69da      	ldr	r2, [r3, #28]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	bf0c      	ite	eq
 800bdf8:	2301      	moveq	r3, #1
 800bdfa:	2300      	movne	r3, #0
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	429a      	cmp	r2, r3
 800be04:	d08d      	beq.n	800bd22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800be26:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	689a      	ldr	r2, [r3, #8]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800be36:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2220      	movs	r2, #32
 800be3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6899      	ldr	r1, [r3, #8]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	4b08      	ldr	r3, [pc, #32]	; (800be90 <UART_EndRxTransfer+0x44>)
 800be70:	400b      	ands	r3, r1
 800be72:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2220      	movs	r2, #32
 800be78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800be82:	bf00      	nop
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	effffffe 	.word	0xeffffffe

0800be94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	69db      	ldr	r3, [r3, #28]
 800bea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beaa:	d01f      	beq.n	800beec <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bec2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689a      	ldr	r2, [r3, #8]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f022 0201 	bic.w	r2, r2, #1
 800bed2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	689a      	ldr	r2, [r3, #8]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bee2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2220      	movs	r2, #32
 800bee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7f4 fc05 	bl	80006fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bef2:	bf00      	nop
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b084      	sub	sp, #16
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f7fd fc85 	bl	8009818 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf0e:	bf00      	nop
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b086      	sub	sp, #24
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf3e:	2b80      	cmp	r3, #128	; 0x80
 800bf40:	d109      	bne.n	800bf56 <UART_DMAError+0x40>
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b21      	cmp	r3, #33	; 0x21
 800bf46:	d106      	bne.n	800bf56 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bf50:	6978      	ldr	r0, [r7, #20]
 800bf52:	f7ff ff5d 	bl	800be10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf60:	2b40      	cmp	r3, #64	; 0x40
 800bf62:	d109      	bne.n	800bf78 <UART_DMAError+0x62>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2b22      	cmp	r3, #34	; 0x22
 800bf68:	d106      	bne.n	800bf78 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bf72:	6978      	ldr	r0, [r7, #20]
 800bf74:	f7ff ff6a 	bl	800be4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf7e:	f043 0210 	orr.w	r2, r3, #16
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf88:	6978      	ldr	r0, [r7, #20]
 800bf8a:	f7fd fc4f 	bl	800982c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf8e:	bf00      	nop
 800bf90:	3718      	adds	r7, #24
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b084      	sub	sp, #16
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f7fd fc39 	bl	800982c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfba:	bf00      	nop
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b083      	sub	sp, #12
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfd0:	2b21      	cmp	r3, #33	; 0x21
 800bfd2:	d12a      	bne.n	800c02a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d110      	bne.n	800c002 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfee:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bffe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c000:	e013      	b.n	800c02a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c012:	1c5a      	adds	r2, r3, #1
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c01e:	b29b      	uxth	r3, r3
 800c020:	3b01      	subs	r3, #1
 800c022:	b29a      	uxth	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c02a:	bf00      	nop
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c036:	b480      	push	{r7}
 800c038:	b085      	sub	sp, #20
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c044:	2b21      	cmp	r3, #33	; 0x21
 800c046:	d12f      	bne.n	800c0a8 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c04e:	b29b      	uxth	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d110      	bne.n	800c076 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c062:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c072:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c074:	e018      	b.n	800c0a8 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c07a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	461a      	mov	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c08a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c090:	1c9a      	adds	r2, r3, #2
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c0a8:	bf00      	nop
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0c2:	2b21      	cmp	r3, #33	; 0x21
 800c0c4:	d13d      	bne.n	800c142 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0cc:	81fb      	strh	r3, [r7, #14]
 800c0ce:	e035      	b.n	800c13c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d111      	bne.n	800c100 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689a      	ldr	r2, [r3, #8]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c0ea:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0fa:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c0fc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c0fe:	e020      	b.n	800c142 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d013      	beq.n	800c136 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c112:	781a      	ldrb	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	3b01      	subs	r3, #1
 800c12e:	b29a      	uxth	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c136:	89fb      	ldrh	r3, [r7, #14]
 800c138:	3b01      	subs	r3, #1
 800c13a:	81fb      	strh	r3, [r7, #14]
 800c13c:	89fb      	ldrh	r3, [r7, #14]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1c6      	bne.n	800c0d0 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c142:	bf00      	nop
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr

0800c14e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c14e:	b480      	push	{r7}
 800c150:	b085      	sub	sp, #20
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c15c:	2b21      	cmp	r3, #33	; 0x21
 800c15e:	d142      	bne.n	800c1e6 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c166:	81fb      	strh	r3, [r7, #14]
 800c168:	e03a      	b.n	800c1e0 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c170:	b29b      	uxth	r3, r3
 800c172:	2b00      	cmp	r3, #0
 800c174:	d111      	bne.n	800c19a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689a      	ldr	r2, [r3, #8]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c184:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c194:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c196:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c198:	e025      	b.n	800c1e6 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d018      	beq.n	800c1da <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ac:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1bc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1c2:	1c9a      	adds	r2, r3, #2
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c1da:	89fb      	ldrh	r3, [r7, #14]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	81fb      	strh	r3, [r7, #14]
 800c1e0:	89fb      	ldrh	r3, [r7, #14]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1c1      	bne.n	800c16a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c1e6:	bf00      	nop
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c208:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2220      	movs	r2, #32
 800c20e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7f4 fa2d 	bl	8000678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c21e:	bf00      	nop
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c234:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c23c:	2b22      	cmp	r3, #34	; 0x22
 800c23e:	d13b      	bne.n	800c2b8 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c246:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c248:	89bb      	ldrh	r3, [r7, #12]
 800c24a:	b2d9      	uxtb	r1, r3
 800c24c:	89fb      	ldrh	r3, [r7, #14]
 800c24e:	b2da      	uxtb	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c254:	400a      	ands	r2, r1
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	3b01      	subs	r3, #1
 800c26e:	b29a      	uxth	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d122      	bne.n	800c2c8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c290:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	689a      	ldr	r2, [r3, #8]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f022 0201 	bic.w	r2, r2, #1
 800c2a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2220      	movs	r2, #32
 800c2a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7f4 fa23 	bl	80006fc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2b6:	e007      	b.n	800c2c8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	699a      	ldr	r2, [r3, #24]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f042 0208 	orr.w	r2, r2, #8
 800c2c6:	619a      	str	r2, [r3, #24]
}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2e6:	2b22      	cmp	r3, #34	; 0x22
 800c2e8:	d13b      	bne.n	800c362 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c2f8:	89ba      	ldrh	r2, [r7, #12]
 800c2fa:	89fb      	ldrh	r3, [r7, #14]
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c308:	1c9a      	adds	r2, r3, #2
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c314:	b29b      	uxth	r3, r3
 800c316:	3b01      	subs	r3, #1
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c326:	b29b      	uxth	r3, r3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d122      	bne.n	800c372 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c33a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689a      	ldr	r2, [r3, #8]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f022 0201 	bic.w	r2, r2, #1
 800c34a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7f4 f9ce 	bl	80006fc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c360:	e007      	b.n	800c372 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	699a      	ldr	r2, [r3, #24]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f042 0208 	orr.w	r2, r2, #8
 800c370:	619a      	str	r2, [r3, #24]
}
 800c372:	bf00      	nop
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
	...

0800c37c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c38a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c392:	2b22      	cmp	r3, #34	; 0x22
 800c394:	d166      	bne.n	800c464 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c39c:	81fb      	strh	r3, [r7, #14]
 800c39e:	e03d      	b.n	800c41c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c3a8:	893b      	ldrh	r3, [r7, #8]
 800c3aa:	b2d9      	uxtb	r1, r3
 800c3ac:	89bb      	ldrh	r3, [r7, #12]
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b4:	400a      	ands	r2, r1
 800c3b6:	b2d2      	uxtb	r2, r2
 800c3b8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3be:	1c5a      	adds	r2, r3, #1
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d119      	bne.n	800c416 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c3f0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6899      	ldr	r1, [r3, #8]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	4b1f      	ldr	r3, [pc, #124]	; (800c47c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c3fe:	400b      	ands	r3, r1
 800c400:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2220      	movs	r2, #32
 800c406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7f4 f973 	bl	80006fc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c416:	89fb      	ldrh	r3, [r7, #14]
 800c418:	3b01      	subs	r3, #1
 800c41a:	81fb      	strh	r3, [r7, #14]
 800c41c:	89fb      	ldrh	r3, [r7, #14]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1be      	bne.n	800c3a0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c428:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c42a:	897b      	ldrh	r3, [r7, #10]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d021      	beq.n	800c474 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c436:	897a      	ldrh	r2, [r7, #10]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d21b      	bcs.n	800c474 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	689a      	ldr	r2, [r3, #8]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c44a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a0c      	ldr	r2, [pc, #48]	; (800c480 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c450:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f042 0220 	orr.w	r2, r2, #32
 800c460:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c462:	e007      	b.n	800c474 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	699a      	ldr	r2, [r3, #24]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f042 0208 	orr.w	r2, r2, #8
 800c472:	619a      	str	r2, [r3, #24]
}
 800c474:	bf00      	nop
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	effffffe 	.word	0xeffffffe
 800c480:	0800c227 	.word	0x0800c227

0800c484 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c492:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c49a:	2b22      	cmp	r3, #34	; 0x22
 800c49c:	d166      	bne.n	800c56c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c4a4:	82fb      	strh	r3, [r7, #22]
 800c4a6:	e03d      	b.n	800c524 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ae:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4b4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c4b6:	8a3a      	ldrh	r2, [r7, #16]
 800c4b8:	8abb      	ldrh	r3, [r7, #20]
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c6:	1c9a      	adds	r2, r3, #2
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d119      	bne.n	800c51e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c4f8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6899      	ldr	r1, [r3, #8]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	4b1f      	ldr	r3, [pc, #124]	; (800c584 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c506:	400b      	ands	r3, r1
 800c508:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2220      	movs	r2, #32
 800c50e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7f4 f8ef 	bl	80006fc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c51e:	8afb      	ldrh	r3, [r7, #22]
 800c520:	3b01      	subs	r3, #1
 800c522:	82fb      	strh	r3, [r7, #22]
 800c524:	8afb      	ldrh	r3, [r7, #22]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1be      	bne.n	800c4a8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c530:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c532:	8a7b      	ldrh	r3, [r7, #18]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d021      	beq.n	800c57c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c53e:	8a7a      	ldrh	r2, [r7, #18]
 800c540:	429a      	cmp	r2, r3
 800c542:	d21b      	bcs.n	800c57c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689a      	ldr	r2, [r3, #8]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c552:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a0c      	ldr	r2, [pc, #48]	; (800c588 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c558:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f042 0220 	orr.w	r2, r2, #32
 800c568:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c56a:	e007      	b.n	800c57c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	699a      	ldr	r2, [r3, #24]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f042 0208 	orr.w	r2, r2, #8
 800c57a:	619a      	str	r2, [r3, #24]
}
 800c57c:	bf00      	nop
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	effffffe 	.word	0xeffffffe
 800c588:	0800c2d1 	.word	0x0800c2d1

0800c58c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c594:	bf00      	nop
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c5a8:	bf00      	nop
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c5bc:	bf00      	nop
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d101      	bne.n	800c5de <HAL_UARTEx_DisableFifoMode+0x16>
 800c5da:	2302      	movs	r3, #2
 800c5dc:	e027      	b.n	800c62e <HAL_UARTEx_DisableFifoMode+0x66>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2224      	movs	r2, #36	; 0x24
 800c5ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f022 0201 	bic.w	r2, r2, #1
 800c604:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c60c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2220      	movs	r2, #32
 800c620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b084      	sub	sp, #16
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d101      	bne.n	800c652 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c64e:	2302      	movs	r3, #2
 800c650:	e02d      	b.n	800c6ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2224      	movs	r2, #36	; 0x24
 800c65e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 0201 	bic.w	r2, r2, #1
 800c678:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	683a      	ldr	r2, [r7, #0]
 800c68a:	430a      	orrs	r2, r1
 800c68c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f850 	bl	800c734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b084      	sub	sp, #16
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d101      	bne.n	800c6ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6ca:	2302      	movs	r3, #2
 800c6cc:	e02d      	b.n	800c72a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2224      	movs	r2, #36	; 0x24
 800c6da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f022 0201 	bic.w	r2, r2, #1
 800c6f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	430a      	orrs	r2, r1
 800c708:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f812 	bl	800c734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2220      	movs	r2, #32
 800c71c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
	...

0800c734 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c734:	b480      	push	{r7}
 800c736:	b089      	sub	sp, #36	; 0x24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c73c:	4a2f      	ldr	r2, [pc, #188]	; (800c7fc <UARTEx_SetNbDataToProcess+0xc8>)
 800c73e:	f107 0314 	add.w	r3, r7, #20
 800c742:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c746:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c74a:	4a2d      	ldr	r2, [pc, #180]	; (800c800 <UARTEx_SetNbDataToProcess+0xcc>)
 800c74c:	f107 030c 	add.w	r3, r7, #12
 800c750:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c754:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d108      	bne.n	800c772 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c770:	e03d      	b.n	800c7ee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c772:	2308      	movs	r3, #8
 800c774:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c776:	2308      	movs	r3, #8
 800c778:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	0e5b      	lsrs	r3, r3, #25
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 0307 	and.w	r3, r3, #7
 800c788:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	0f5b      	lsrs	r3, r3, #29
 800c792:	b2db      	uxtb	r3, r3
 800c794:	f003 0307 	and.w	r3, r3, #7
 800c798:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c79a:	7fbb      	ldrb	r3, [r7, #30]
 800c79c:	7f3a      	ldrb	r2, [r7, #28]
 800c79e:	f107 0120 	add.w	r1, r7, #32
 800c7a2:	440a      	add	r2, r1
 800c7a4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c7a8:	fb02 f303 	mul.w	r3, r2, r3
 800c7ac:	7f3a      	ldrb	r2, [r7, #28]
 800c7ae:	f107 0120 	add.w	r1, r7, #32
 800c7b2:	440a      	add	r2, r1
 800c7b4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c7b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c7c4:	7ffb      	ldrb	r3, [r7, #31]
 800c7c6:	7f7a      	ldrb	r2, [r7, #29]
 800c7c8:	f107 0120 	add.w	r1, r7, #32
 800c7cc:	440a      	add	r2, r1
 800c7ce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c7d2:	fb02 f303 	mul.w	r3, r2, r3
 800c7d6:	7f7a      	ldrb	r2, [r7, #29]
 800c7d8:	f107 0120 	add.w	r1, r7, #32
 800c7dc:	440a      	add	r2, r1
 800c7de:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c7e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7ee:	bf00      	nop
 800c7f0:	3724      	adds	r7, #36	; 0x24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	0800c874 	.word	0x0800c874
 800c800:	0800c87c 	.word	0x0800c87c

0800c804 <__libc_init_array>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	4e0d      	ldr	r6, [pc, #52]	; (800c83c <__libc_init_array+0x38>)
 800c808:	4c0d      	ldr	r4, [pc, #52]	; (800c840 <__libc_init_array+0x3c>)
 800c80a:	1ba4      	subs	r4, r4, r6
 800c80c:	10a4      	asrs	r4, r4, #2
 800c80e:	2500      	movs	r5, #0
 800c810:	42a5      	cmp	r5, r4
 800c812:	d109      	bne.n	800c828 <__libc_init_array+0x24>
 800c814:	4e0b      	ldr	r6, [pc, #44]	; (800c844 <__libc_init_array+0x40>)
 800c816:	4c0c      	ldr	r4, [pc, #48]	; (800c848 <__libc_init_array+0x44>)
 800c818:	f000 f820 	bl	800c85c <_init>
 800c81c:	1ba4      	subs	r4, r4, r6
 800c81e:	10a4      	asrs	r4, r4, #2
 800c820:	2500      	movs	r5, #0
 800c822:	42a5      	cmp	r5, r4
 800c824:	d105      	bne.n	800c832 <__libc_init_array+0x2e>
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c82c:	4798      	blx	r3
 800c82e:	3501      	adds	r5, #1
 800c830:	e7ee      	b.n	800c810 <__libc_init_array+0xc>
 800c832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c836:	4798      	blx	r3
 800c838:	3501      	adds	r5, #1
 800c83a:	e7f2      	b.n	800c822 <__libc_init_array+0x1e>
 800c83c:	0800c8a4 	.word	0x0800c8a4
 800c840:	0800c8a4 	.word	0x0800c8a4
 800c844:	0800c8a4 	.word	0x0800c8a4
 800c848:	0800c8a8 	.word	0x0800c8a8

0800c84c <memset>:
 800c84c:	4402      	add	r2, r0
 800c84e:	4603      	mov	r3, r0
 800c850:	4293      	cmp	r3, r2
 800c852:	d100      	bne.n	800c856 <memset+0xa>
 800c854:	4770      	bx	lr
 800c856:	f803 1b01 	strb.w	r1, [r3], #1
 800c85a:	e7f9      	b.n	800c850 <memset+0x4>

0800c85c <_init>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	bf00      	nop
 800c860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c862:	bc08      	pop	{r3}
 800c864:	469e      	mov	lr, r3
 800c866:	4770      	bx	lr

0800c868 <_fini>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	bf00      	nop
 800c86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86e:	bc08      	pop	{r3}
 800c870:	469e      	mov	lr, r3
 800c872:	4770      	bx	lr
