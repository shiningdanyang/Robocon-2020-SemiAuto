
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd7c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800d014  0800d014  0001d014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d03c  0800d03c  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  0800d03c  0800d03c  0001d03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d044  0800d044  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d044  0800d044  0001d044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d048  0800d048  0001d048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  24000000  0800d04c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  24000038  0800d084  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240008c4  0800d084  000208c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b37  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f27  00000000  00000000  00040b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  00043ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  000450f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003867a  00000000  00000000  00046610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123bb  00000000  00000000  0007ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001739d3  00000000  00000000  00091045  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00204a18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa4  00000000  00000000  00204a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cffc 	.word	0x0800cffc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	0800cffc 	.word	0x0800cffc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
int trackingWait4CompassTx;
int trackingWait4CompassRx;
int trackingWait4SpinalCordTx;
int trackingWait4SpinalCordRx;
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
//	spinalCordTxPacket[0] = 0xAA;
//	spinalCordTxPacket[1] = 0xAA;
//	spinalCordTxPacket[2] = 0xAA;
//	spinalCordTxPacket[3] = 0xAA;
//	spinalCordTxPacket[motorDir] = 0x00;
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4909      	ldr	r1, [pc, #36]	; (8000644 <peripheralUART_Init+0x2c>)
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <peripheralUART_Init+0x30>)
 8000622:	f009 f9e7 	bl	80099f4 <HAL_UART_Receive_IT>
	spinalCordTxPacket[8] = 'z';
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <peripheralUART_Init+0x34>)
 8000628:	227a      	movs	r2, #122	; 0x7a
 800062a:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 800062c:	2201      	movs	r2, #1
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <peripheralUART_Init+0x38>)
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <peripheralUART_Init+0x3c>)
 8000632:	f009 fab7 	bl	8009ba4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000636:	2202      	movs	r2, #2
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <peripheralUART_Init+0x40>)
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <peripheralUART_Init+0x44>)
 800063c:	f009 fab2 	bl	8009ba4 <HAL_UART_Receive_DMA>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2400078c 	.word	0x2400078c
 8000648:	240006d8 	.word	0x240006d8
 800064c:	2400000c 	.word	0x2400000c
 8000650:	24000764 	.word	0x24000764
 8000654:	240001bc 	.word	0x240001bc
 8000658:	24000318 	.word	0x24000318
 800065c:	24000560 	.word	0x24000560

08000660 <HAL_UART_TxCpltCallback>:

//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_UART_TxCpltCallback+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d103      	bne.n	800067c <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt = 1;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_UART_TxCpltCallback+0x68>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 800067a:	e01c      	b.n	80006b6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_UART_TxCpltCallback+0x6c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d103      	bne.n	8000690 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt = 1;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_UART_TxCpltCallback+0x70>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	e012      	b.n	80006b6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_UART_TxCpltCallback+0x74>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d103      	bne.n	80006a4 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_UART_TxCpltCallback+0x78>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
}
 80006a2:	e008      	b.n	80006b6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_UART_TxCpltCallback+0x7c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d102      	bne.n	80006b6 <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <HAL_UART_TxCpltCallback+0x80>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	24000560 	.word	0x24000560
 80006c8:	24000788 	.word	0x24000788
 80006cc:	240001bc 	.word	0x240001bc
 80006d0:	24000330 	.word	0x24000330
 80006d4:	240006d8 	.word	0x240006d8
 80006d8:	240005fe 	.word	0x240005fe
 80006dc:	24000088 	.word	0x24000088
 80006e0:	240006a4 	.word	0x240006a4

080006e4 <HAL_UART_RxCpltCallback>:
int trackingReceiSpinalCord;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_UART_RxCpltCallback+0x7c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d103      	bne.n	8000700 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt = 1;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_UART_RxCpltCallback+0x80>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 80006fe:	e02b      	b.n	8000758 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_UART_RxCpltCallback+0x84>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d103      	bne.n	8000714 <HAL_UART_RxCpltCallback+0x30>
		PS2RxCplt = 1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <HAL_UART_RxCpltCallback+0x88>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
}
 8000712:	e021      	b.n	8000758 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_UART_RxCpltCallback+0x8c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d112      	bne.n	8000746 <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_UART_RxCpltCallback+0x90>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b74      	cmp	r3, #116	; 0x74
 8000726:	d105      	bne.n	8000734 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	2209      	movs	r2, #9
 800072c:	4912      	ldr	r1, [pc, #72]	; (8000778 <HAL_UART_RxCpltCallback+0x94>)
 800072e:	4810      	ldr	r0, [pc, #64]	; (8000770 <HAL_UART_RxCpltCallback+0x8c>)
 8000730:	f009 f846 	bl	80097c0 <HAL_UART_Transmit>
		spinalCordRxCplt = 1;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_UART_RxCpltCallback+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800073a:	2201      	movs	r2, #1
 800073c:	490d      	ldr	r1, [pc, #52]	; (8000774 <HAL_UART_RxCpltCallback+0x90>)
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_UART_RxCpltCallback+0x8c>)
 8000740:	f009 f958 	bl	80099f4 <HAL_UART_Receive_IT>
}
 8000744:	e008      	b.n	8000758 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == manualRobot.Instance)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_UART_RxCpltCallback+0x9c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d102      	bne.n	8000758 <HAL_UART_RxCpltCallback+0x74>
		manualRobotRxCplt = 1;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_UART_RxCpltCallback+0xa0>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000560 	.word	0x24000560
 8000764:	240003e8 	.word	0x240003e8
 8000768:	240001bc 	.word	0x240001bc
 800076c:	24000602 	.word	0x24000602
 8000770:	240006d8 	.word	0x240006d8
 8000774:	2400078c 	.word	0x2400078c
 8000778:	2400000c 	.word	0x2400000c
 800077c:	24000858 	.word	0x24000858
 8000780:	24000088 	.word	0x24000088
 8000784:	24000459 	.word	0x24000459

08000788 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <compassReset+0x24>)
 800078e:	2261      	movs	r2, #97	; 0x61
 8000790:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	4905      	ldr	r1, [pc, #20]	; (80007ac <compassReset+0x24>)
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <compassReset+0x28>)
 8000798:	f009 f8a8 	bl	80098ec <HAL_UART_Transmit_IT>
	wait4CompassTx();
 800079c:	f000 f818 	bl	80007d0 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <compassReset+0x24>)
 80007a2:	227a      	movs	r2, #122	; 0x7a
 80007a4:	701a      	strb	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	24000000 	.word	0x24000000
 80007b0:	24000560 	.word	0x24000560

080007b4 <compassRequest>:
void compassRequest(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	4903      	ldr	r1, [pc, #12]	; (80007c8 <compassRequest+0x14>)
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <compassRequest+0x18>)
 80007be:	f009 f895 	bl	80098ec <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	24000000 	.word	0x24000000
 80007cc:	24000560 	.word	0x24000560

080007d0 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 80007d4:	e004      	b.n	80007e0 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <wait4CompassTx+0x28>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <wait4CompassTx+0x28>)
 80007de:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <wait4CompassTx+0x2c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f6      	beq.n	80007d6 <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <wait4CompassTx+0x2c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	240008bc 	.word	0x240008bc
 80007fc:	24000788 	.word	0x24000788

08000800 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 8000804:	2209      	movs	r2, #9
 8000806:	4904      	ldr	r1, [pc, #16]	; (8000818 <spinalCordTrans+0x18>)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <spinalCordTrans+0x1c>)
 800080a:	f009 f86f 	bl	80098ec <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 800080e:	f000 f807 	bl	8000820 <wait4SpinalCordTx>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2400000c 	.word	0x2400000c
 800081c:	240006d8 	.word	0x240006d8

08000820 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt == 0)
 8000824:	e004      	b.n	8000830 <wait4SpinalCordTx+0x10>
	{
		trackingWait4SpinalCordTx++;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <wait4SpinalCordTx+0x28>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <wait4SpinalCordTx+0x28>)
 800082e:	6013      	str	r3, [r2, #0]
	while(spinalCordTxCplt == 0)
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <wait4SpinalCordTx+0x2c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0f6      	beq.n	8000826 <wait4SpinalCordTx+0x6>
	}
	spinalCordTxCplt = 0;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <wait4SpinalCordTx+0x2c>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	240006c0 	.word	0x240006c0
 800084c:	240005fe 	.word	0x240005fe

08000850 <peripheralADC_Init>:
uint16_t _rollRigtFinalFilter;
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;

void peripheralADC_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_DMA(&roll, (uint32_t*)rollRawValue, 2);
//	HAL_ADC_Start_DMA(&pitch, (uint32_t*)pitchRawValue, 1);
//	HAL_ADC_Start_DMA(&pitch, (uint32_t*)pitchRawValue, 3);
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <readADC>:

void readADC(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
//	HAL_ADC_Start_DMA(&pitch, (uint32_t*)pitchRawValue, 1);
//	leftRawDistance = a_Linear *rollRawValue[rigt] + b_Linear;
//	rigtRawDistance = a_Linear *rollRawValue[left] + b_Linear;
//	pitchRawDistance = a_Linear *pitchRawValue[0] + b_Linear;

	HAL_ADC_Start(&rollLeft);
 8000864:	4832      	ldr	r0, [pc, #200]	; (8000930 <readADC+0xd0>)
 8000866:	f002 f84d 	bl	8002904 <HAL_ADC_Start>
	HAL_ADC_Start(&rollRigt);
 800086a:	4832      	ldr	r0, [pc, #200]	; (8000934 <readADC+0xd4>)
 800086c:	f002 f84a 	bl	8002904 <HAL_ADC_Start>
	HAL_ADC_Start(&pitch);
 8000870:	4831      	ldr	r0, [pc, #196]	; (8000938 <readADC+0xd8>)
 8000872:	f002 f847 	bl	8002904 <HAL_ADC_Start>
	leftRawADC = HAL_ADC_GetValue(&rollLeft);
 8000876:	482e      	ldr	r0, [pc, #184]	; (8000930 <readADC+0xd0>)
 8000878:	f002 f90e 	bl	8002a98 <HAL_ADC_GetValue>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <readADC+0xdc>)
 8000882:	801a      	strh	r2, [r3, #0]
	rigtRawADC = HAL_ADC_GetValue(&rollRigt);
 8000884:	482b      	ldr	r0, [pc, #172]	; (8000934 <readADC+0xd4>)
 8000886:	f002 f907 	bl	8002a98 <HAL_ADC_GetValue>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <readADC+0xe0>)
 8000890:	801a      	strh	r2, [r3, #0]
	pitchRawADC = HAL_ADC_GetValue(&pitch);
 8000892:	4829      	ldr	r0, [pc, #164]	; (8000938 <readADC+0xd8>)
 8000894:	f002 f900 	bl	8002a98 <HAL_ADC_GetValue>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <readADC+0xe4>)
 800089e:	801a      	strh	r2, [r3, #0]
	leftRawDistance = a_Linear *leftRawADC + b_Linear;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <readADC+0xdc>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <readADC+0xe8>)
 80008ae:	ed93 7b00 	vldr	d7, [r3]
 80008b2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008b6:	4b25      	ldr	r3, [pc, #148]	; (800094c <readADC+0xec>)
 80008b8:	ed93 7b00 	vldr	d7, [r3]
 80008bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008c0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008c4:	ee17 3a90 	vmov	r3, s15
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <readADC+0xf0>)
 80008cc:	801a      	strh	r2, [r3, #0]
	rigtRawDistance = a_Linear *rigtRawADC + b_Linear;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <readADC+0xe0>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <readADC+0xe8>)
 80008dc:	ed93 7b00 	vldr	d7, [r3]
 80008e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <readADC+0xec>)
 80008e6:	ed93 7b00 	vldr	d7, [r3]
 80008ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008f2:	ee17 3a90 	vmov	r3, s15
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <readADC+0xf4>)
 80008fa:	801a      	strh	r2, [r3, #0]
	pitchRawDistance = a_Linear *pitchRawADC + b_Linear;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <readADC+0xe4>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <readADC+0xe8>)
 800090a:	ed93 7b00 	vldr	d7, [r3]
 800090e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <readADC+0xec>)
 8000914:	ed93 7b00 	vldr	d7, [r3]
 8000918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800091c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000920:	ee17 3a90 	vmov	r3, s15
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <readADC+0xf8>)
 8000928:	801a      	strh	r2, [r3, #0]
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	240003f4 	.word	0x240003f4
 8000934:	24000250 	.word	0x24000250
 8000938:	24000460 	.word	0x24000460
 800093c:	240008ac 	.word	0x240008ac
 8000940:	2400024c 	.word	0x2400024c
 8000944:	24000118 	.word	0x24000118
 8000948:	24000018 	.word	0x24000018
 800094c:	24000020 	.word	0x24000020
 8000950:	24000080 	.word	0x24000080
 8000954:	24000130 	.word	0x24000130
 8000958:	240008b8 	.word	0x240008b8

0800095c <controlMotor1>:
int trackingControlMotor4;

#define BRAKE_SPEED 100

void controlMotor1(int _speed)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	bfb8      	it	lt
 800096a:	425b      	neglt	r3, r3
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <controlMotor1+0x38>)
 8000970:	701a      	strb	r2, [r3, #0]
	if(_speed>=0)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db03      	blt.n	8000980 <controlMotor1+0x24>
		(spinalCordTxPacket[motor1Dir] = ccw);
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <controlMotor1+0x38>)
 800097a:	2200      	movs	r2, #0
 800097c:	711a      	strb	r2, [r3, #4]
//		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
	else
		(spinalCordTxPacket[motor1Dir] = fcw);
//		spinalCordTxPacket[motorDir] |= (1UL << 0);
//	trackingControlMotor1++;
}
 800097e:	e002      	b.n	8000986 <controlMotor1+0x2a>
		(spinalCordTxPacket[motor1Dir] = fcw);
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <controlMotor1+0x38>)
 8000982:	2201      	movs	r2, #1
 8000984:	711a      	strb	r2, [r3, #4]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	2400000c 	.word	0x2400000c

08000998 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bfb8      	it	lt
 80009a6:	425b      	neglt	r3, r3
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <controlMotor2+0x38>)
 80009ac:	705a      	strb	r2, [r3, #1]
	if(_speed>=0)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db03      	blt.n	80009bc <controlMotor2+0x24>
		(spinalCordTxPacket[motor2Dir] = ccw);
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <controlMotor2+0x38>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	715a      	strb	r2, [r3, #5]
//		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
	else
		(spinalCordTxPacket[motor2Dir] = fcw);
//		spinalCordTxPacket[motorDir] |= (1UL << 1);
//	trackingControlMotor2++;
}
 80009ba:	e002      	b.n	80009c2 <controlMotor2+0x2a>
		(spinalCordTxPacket[motor2Dir] = fcw);
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <controlMotor2+0x38>)
 80009be:	2201      	movs	r2, #1
 80009c0:	715a      	strb	r2, [r3, #5]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2400000c 	.word	0x2400000c

080009d4 <controlMotor3>:
void controlMotor3(int _speed)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <controlMotor3+0x38>)
 80009e8:	709a      	strb	r2, [r3, #2]
	if(_speed>=0)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db03      	blt.n	80009f8 <controlMotor3+0x24>
		(spinalCordTxPacket[motor3Dir] = ccw);
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <controlMotor3+0x38>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	719a      	strb	r2, [r3, #6]
//		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
	else
		(spinalCordTxPacket[motor3Dir] = fcw);
//		spinalCordTxPacket[motorDir] |= (1UL << 2);
//	trackingControlMotor3++;
}
 80009f6:	e002      	b.n	80009fe <controlMotor3+0x2a>
		(spinalCordTxPacket[motor3Dir] = fcw);
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <controlMotor3+0x38>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	719a      	strb	r2, [r3, #6]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2400000c 	.word	0x2400000c

08000a10 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	bfb8      	it	lt
 8000a1e:	425b      	neglt	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <controlMotor4+0x38>)
 8000a24:	70da      	strb	r2, [r3, #3]
	if(_speed>=0)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db03      	blt.n	8000a34 <controlMotor4+0x24>
		(spinalCordTxPacket[motor4Dir] = ccw);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <controlMotor4+0x38>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	71da      	strb	r2, [r3, #7]
//		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
	else
		(spinalCordTxPacket[motor4Dir] = fcw);
//		spinalCordTxPacket[motorDir] |= (1UL << 3);
//	trackingControlMotor4++;
}
 8000a32:	e002      	b.n	8000a3a <controlMotor4+0x2a>
		(spinalCordTxPacket[motor4Dir] = fcw);
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <controlMotor4+0x38>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	71da      	strb	r2, [r3, #7]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	2400000c 	.word	0x2400000c

08000a4c <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f7ff ff83 	bl	800095c <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8000a56:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8000a5a:	f7ff ff9d 	bl	8000998 <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 8000a5e:	2064      	movs	r0, #100	; 0x64
 8000a60:	f7ff ffb8 	bl	80009d4 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8000a64:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8000a68:	f7ff ffd2 	bl	8000a10 <controlMotor4>
	spinalCordTrans();
 8000a6c:	f7ff fec8 	bl	8000800 <spinalCordTrans>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <positionControl_Init+0x1c>)
 8000a7a:	f008 fa31 	bl	8008ee0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&leftArm);
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <positionControl_Init+0x20>)
 8000a80:	f008 fa2e 	bl	8008ee0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&rigtArm);
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <positionControl_Init+0x24>)
 8000a86:	f008 fa2b 	bl	8008ee0 <HAL_TIM_Base_Start_IT>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	24000860 	.word	0x24000860
 8000a94:	240002b8 	.word	0x240002b8
 8000a98:	24000818 	.word	0x24000818

08000a9c <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d16f      	bne.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0xf4>
	{
		if(legEn == 1)
 8000ab0:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d16b      	bne.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0xf4>
		{
			if(legStatus == legInitShoot)
 8000ab8:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d11f      	bne.n	8000b00 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac6:	4837      	ldr	r0, [pc, #220]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ac8:	f005 fb60 	bl	800618c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad0:	4834      	ldr	r0, [pc, #208]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ad2:	f005 fb74 	bl	80061be <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ade:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;												//đếm số xung
 8000ae0:	4b32      	ldr	r3, [pc, #200]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a31      	ldr	r2, [pc, #196]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ae8:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legInitShootPulse)
 8000aea:	4b30      	ldr	r3, [pc, #192]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000af2:	db05      	blt.n	8000b00 <HAL_TIM_PeriodElapsedCallback+0x64>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legReInitShoot)
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d11f      	bne.n	8000b48 <HAL_TIM_PeriodElapsedCallback+0xac>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình chân legDir để lùi
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0e:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b10:	f005 fb3c 	bl	800618c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b18:	4822      	ldr	r0, [pc, #136]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b1a:	f005 fb50 	bl	80061be <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b26:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;												//đếm số xung
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b30:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legReInitShootPulse)
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000b3a:	db05      	blt.n	8000b48 <HAL_TIM_PeriodElapsedCallback+0xac>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d11f      	bne.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0xf4>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b58:	f005 fb18 	bl	800618c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b60:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b62:	f005 fb2c 	bl	80061be <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b6e:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;												//đếm số xung
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b78:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legEndPulse)
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b82:	db05      	blt.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0xf4>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	24000860 	.word	0x24000860
 8000b9c:	240005f8 	.word	0x240005f8
 8000ba0:	2400076c 	.word	0x2400076c
 8000ba4:	58020c00 	.word	0x58020c00
 8000ba8:	240005f0 	.word	0x240005f0
 8000bac:	240006b0 	.word	0x240006b0

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f001 fa7a 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f83a 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 fc72 	bl	80014a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc0:	f000 fc20 	bl	8001404 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bc4:	f000 f8ea 	bl	8000d9c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000bc8:	f000 f9c4 	bl	8000f54 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000bcc:	f000 fb36 	bl	800123c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000bd0:	f000 fb80 	bl	80012d4 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000bd4:	f000 fa22 	bl	800101c <MX_TIM7_Init>
  MX_TIM12_Init();
 8000bd8:	f000 fa58 	bl	800108c <MX_TIM12_Init>
  MX_TIM15_Init();
 8000bdc:	f000 fa90 	bl	8001100 <MX_TIM15_Init>
  MX_UART7_Init();
 8000be0:	f000 fae0 	bl	80011a4 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000be4:	f000 fbc2 	bl	800136c <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8000be8:	f000 f950 	bl	8000e8c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000bec:	f7ff fd14 	bl	8000618 <peripheralUART_Init>
  peripheralADC_Init();
 8000bf0:	f7ff fe2e 	bl	8000850 <peripheralADC_Init>
  delayUs_Init();
 8000bf4:	f7ff fcf0 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000bf8:	f7ff ff3c 	bl	8000a74 <positionControl_Init>
  brake();
 8000bfc:	f7ff ff26 	bl	8000a4c <brake>
//  while(1);
  compassReset();
 8000c00:	f7ff fdc2 	bl	8000788 <compassReset>

//  legEn = 1;
//  legStatus = legInitShoot;
//  leftArmEn = 1;
//  leftArmStatus = leftArmInit;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2101      	movs	r1, #1
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <main+0x78>)
 8000c0a:	f005 fabf 	bl	800618c <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000c0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c12:	f001 fadd 	bl	80021d0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  testPWM();
	  readADC();
 8000c16:	f7ff fe23 	bl	8000860 <readADC>
	  tracking++;
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <main+0x7c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a02      	ldr	r2, [pc, #8]	; (8000c2c <main+0x7c>)
 8000c22:	6013      	str	r3, [r2, #0]
	  readADC();
 8000c24:	e7f7      	b.n	8000c16 <main+0x66>
 8000c26:	bf00      	nop
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	24000680 	.word	0x24000680

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b0cc      	sub	sp, #304	; 0x130
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c3a:	224c      	movs	r2, #76	; 0x4c
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f00c f9d4 	bl	800cfec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c48:	2220      	movs	r2, #32
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00c f9cd 	bl	800cfec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	4618      	mov	r0, r3
 8000c58:	23bc      	movs	r3, #188	; 0xbc
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f00c f9c5 	bl	800cfec <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c62:	2002      	movs	r0, #2
 8000c64:	f005 fac6 	bl	80061f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	4b49      	ldr	r3, [pc, #292]	; (8000d94 <SystemClock_Config+0x164>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <SystemClock_Config+0x164>)
 8000c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <SystemClock_Config+0x164>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <SystemClock_Config+0x168>)
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	4a43      	ldr	r2, [pc, #268]	; (8000d98 <SystemClock_Config+0x168>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c92:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <SystemClock_Config+0x168>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	f003 0201 	and.w	r2, r3, #1
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ca2:	bf00      	nop
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <SystemClock_Config+0x164>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb0:	d1f8      	bne.n	8000ca4 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cbe:	2340      	movs	r3, #64	; 0x40
 8000cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000cd6:	233c      	movs	r3, #60	; 0x3c
 8000cd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 faaf 	bl	8006268 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000d10:	f000 fcde 	bl	80016d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	233f      	movs	r3, #63	; 0x3f
 8000d16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d26:	2308      	movs	r3, #8
 8000d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d2c:	2340      	movs	r3, #64	; 0x40
 8000d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d32:	2340      	movs	r3, #64	; 0x40
 8000d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d46:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 fe63 	bl	8006a18 <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000d58:	f000 fcba 	bl	80016d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	2203      	movs	r2, #3
 8000d62:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	2200      	movs	r2, #0
 8000d6a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	2200      	movs	r2, #0
 8000d72:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f006 f9d1 	bl	8007120 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000d84:	f000 fca4 	bl	80016d0 <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	58024800 	.word	0x58024800
 8000d98:	58000400 	.word	0x58000400

08000d9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000dc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000e20:	f001 fbd0 	bl	80025c4 <HAL_ADC_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e2a:	f000 fc51 	bl	80016d0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000e3a:	f002 faf1 	bl	8003420 <HAL_ADCEx_MultiModeConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e44:	f000 fc44 	bl	80016d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_ADC1_Init+0xec>)
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_ADC1_Init+0xe4>)
 8000e68:	f001 fe24 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000e72:	f000 fc2d 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	240003f4 	.word	0x240003f4
 8000e84:	40022000 	.word	0x40022000
 8000e88:	3ef08000 	.word	0x3ef08000

08000e8c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ea6:	4a29      	ldr	r2, [pc, #164]	; (8000f4c <MX_ADC2_Init+0xc0>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000eac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000f04:	f001 fb5e 	bl	80025c4 <HAL_ADC_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000f0e:	f000 fbdf 	bl	80016d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_ADC2_Init+0xc4>)
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f16:	2306      	movs	r3, #6
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f24:	2304      	movs	r3, #4
 8000f26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_ADC2_Init+0xbc>)
 8000f32:	f001 fdbf 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000f3c:	f000 fbc8 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	24000250 	.word	0x24000250
 8000f4c:	40022100 	.word	0x40022100
 8000f50:	2a000400 	.word	0x2a000400

08000f54 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000f6e:	4a29      	ldr	r2, [pc, #164]	; (8001014 <MX_ADC3_Init+0xc0>)
 8000f70:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000f74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f78:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fca:	4811      	ldr	r0, [pc, #68]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000fcc:	f001 fafa 	bl	80025c4 <HAL_ADC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000fd6:	f000 fb7b 	bl	80016d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_ADC3_Init+0xc4>)
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fde:	2306      	movs	r3, #6
 8000fe0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fe6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fec:	2304      	movs	r3, #4
 8000fee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_ADC3_Init+0xbc>)
 8000ffa:	f001 fd5b 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001004:	f000 fb64 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	24000460 	.word	0x24000460
 8001014:	58026000 	.word	0x58026000
 8001018:	04300002 	.word	0x04300002

0800101c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_TIM7_Init+0x68>)
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <MX_TIM7_Init+0x6c>)
 8001030:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_TIM7_Init+0x68>)
 8001034:	f640 125f 	movw	r2, #2399	; 0x95f
 8001038:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_TIM7_Init+0x68>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_TIM7_Init+0x68>)
 8001042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001046:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_TIM7_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_TIM7_Init+0x68>)
 8001050:	f007 ff1a 	bl	8008e88 <HAL_TIM_Base_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800105a:	f000 fb39 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <MX_TIM7_Init+0x68>)
 800106c:	f008 fab2 	bl	80095d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001076:	f000 fb2b 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	24000860 	.word	0x24000860
 8001088:	40001400 	.word	0x40001400

0800108c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_TIM12_Init+0x6c>)
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <MX_TIM12_Init+0x70>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_TIM12_Init+0x6c>)
 80010a6:	f640 125f 	movw	r2, #2399	; 0x95f
 80010aa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_TIM12_Init+0x6c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_TIM12_Init+0x6c>)
 80010b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_TIM12_Init+0x6c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_TIM12_Init+0x6c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80010c6:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_TIM12_Init+0x6c>)
 80010c8:	f007 fede 	bl	8008e88 <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80010d2:	f000 fafd 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_TIM12_Init+0x6c>)
 80010e2:	f008 f847 	bl	8009174 <HAL_TIM_ConfigClockSource>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80010ec:	f000 faf0 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	24000818 	.word	0x24000818
 80010fc:	40001800 	.word	0x40001800

08001100 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_TIM15_Init+0x9c>)
 8001120:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <MX_TIM15_Init+0xa0>)
 8001122:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_TIM15_Init+0x9c>)
 8001126:	f640 125f 	movw	r2, #2399	; 0x95f
 800112a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_TIM15_Init+0x9c>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_TIM15_Init+0x9c>)
 8001134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001138:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_TIM15_Init+0x9c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_TIM15_Init+0x9c>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_TIM15_Init+0x9c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <MX_TIM15_Init+0x9c>)
 800114e:	f007 fe9b 	bl	8008e88 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001158:	f000 faba 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_TIM15_Init+0x9c>)
 800116a:	f008 f803 	bl	8009174 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001174:	f000 faac 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_TIM15_Init+0x9c>)
 8001186:	f008 fa25 	bl	80095d4 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001190:	f000 fa9e 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	240002b8 	.word	0x240002b8
 80011a0:	40014000 	.word	0x40014000

080011a4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_UART7_Init+0x90>)
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <MX_UART7_Init+0x94>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <MX_UART7_Init+0x90>)
 80011b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011b4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_UART7_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_UART7_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_UART7_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_UART7_Init+0x90>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_UART7_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_UART7_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_UART7_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_UART7_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_UART7_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80011ec:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_UART7_Init+0x90>)
 80011ee:	f008 fa97 	bl	8009720 <HAL_UART_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80011f8:	f000 fa6a 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_UART7_Init+0x90>)
 8001200:	f00b fdeb 	bl	800cdda <HAL_UARTEx_SetTxFifoThreshold>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800120a:	f000 fa61 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <MX_UART7_Init+0x90>)
 8001212:	f00b fe20 	bl	800ce56 <HAL_UARTEx_SetRxFifoThreshold>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800121c:	f000 fa58 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_UART7_Init+0x90>)
 8001222:	f00b fda1 	bl	800cd68 <HAL_UARTEx_DisableFifoMode>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800122c:	f000 fa50 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	24000088 	.word	0x24000088
 8001238:	40007800 	.word	0x40007800

0800123c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <MX_USART1_UART_Init+0x94>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_USART1_UART_Init+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001286:	f008 fa4b 	bl	8009720 <HAL_UART_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001290:	f000 fa1e 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_USART1_UART_Init+0x90>)
 8001298:	f00b fd9f 	bl	800cdda <HAL_UARTEx_SetTxFifoThreshold>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012a2:	f000 fa15 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4808      	ldr	r0, [pc, #32]	; (80012cc <MX_USART1_UART_Init+0x90>)
 80012aa:	f00b fdd4 	bl	800ce56 <HAL_UARTEx_SetRxFifoThreshold>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012b4:	f000 fa0c 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_USART1_UART_Init+0x90>)
 80012ba:	f00b fd55 	bl	800cd68 <HAL_UARTEx_DisableFifoMode>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012c4:	f000 fa04 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	24000560 	.word	0x24000560
 80012d0:	40011000 	.word	0x40011000

080012d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <MX_USART3_UART_Init+0x94>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012e0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80012e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <MX_USART3_UART_Init+0x90>)
 800131e:	f008 f9ff 	bl	8009720 <HAL_UART_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001328:	f000 f9d2 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001330:	f00b fd53 	bl	800cdda <HAL_UARTEx_SetTxFifoThreshold>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800133a:	f000 f9c9 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133e:	2100      	movs	r1, #0
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001342:	f00b fd88 	bl	800ce56 <HAL_UARTEx_SetRxFifoThreshold>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800134c:	f000 f9c0 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001352:	f00b fd09 	bl	800cd68 <HAL_UARTEx_DisableFifoMode>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800135c:	f000 f9b8 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	240001bc 	.word	0x240001bc
 8001368:	40004800 	.word	0x40004800

0800136c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_USART6_UART_Init+0x90>)
 8001372:	4a23      	ldr	r2, [pc, #140]	; (8001400 <MX_USART6_UART_Init+0x94>)
 8001374:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_USART6_UART_Init+0x90>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_USART6_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_USART6_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_USART6_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_USART6_UART_Init+0x90>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_USART6_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_USART6_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_USART6_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_USART6_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_USART6_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <MX_USART6_UART_Init+0x90>)
 80013b6:	f008 f9b3 	bl	8009720 <HAL_UART_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80013c0:	f000 f986 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c4:	2100      	movs	r1, #0
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_USART6_UART_Init+0x90>)
 80013c8:	f00b fd07 	bl	800cdda <HAL_UARTEx_SetTxFifoThreshold>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80013d2:	f000 f97d 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <MX_USART6_UART_Init+0x90>)
 80013da:	f00b fd3c 	bl	800ce56 <HAL_UARTEx_SetRxFifoThreshold>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80013e4:	f000 f974 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_USART6_UART_Init+0x90>)
 80013ea:	f00b fcbd 	bl	800cd68 <HAL_UARTEx_DisableFifoMode>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80013f4:	f000 f96c 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	240006d8 	.word	0x240006d8
 8001400:	40011400 	.word	0x40011400

08001404 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <MX_DMA_Init+0x9c>)
 800140c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001410:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <MX_DMA_Init+0x9c>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MX_DMA_Init+0x9c>)
 800141c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_DMA_Init+0x9c>)
 800142a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <MX_DMA_Init+0x9c>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_DMA_Init+0x9c>)
 800143a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	200b      	movs	r0, #11
 800144c:	f002 f99d 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001450:	200b      	movs	r0, #11
 8001452:	f002 f9b4 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	200c      	movs	r0, #12
 800145c:	f002 f995 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001460:	200c      	movs	r0, #12
 8001462:	f002 f9ac 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	200d      	movs	r0, #13
 800146c:	f002 f98d 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001470:	200d      	movs	r0, #13
 8001472:	f002 f9a4 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	200e      	movs	r0, #14
 800147c:	f002 f985 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001480:	200e      	movs	r0, #14
 8001482:	f002 f99c 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	203a      	movs	r0, #58	; 0x3a
 800148c:	f002 f97d 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001490:	203a      	movs	r0, #58	; 0x3a
 8001492:	f002 f994 	bl	80037be <HAL_NVIC_EnableIRQ>

}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	58024400 	.word	0x58024400

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ba:	4b7f      	ldr	r3, [pc, #508]	; (80016b8 <MX_GPIO_Init+0x214>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	4a7d      	ldr	r2, [pc, #500]	; (80016b8 <MX_GPIO_Init+0x214>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ca:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <MX_GPIO_Init+0x214>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d8:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <MX_GPIO_Init+0x214>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014de:	4a76      	ldr	r2, [pc, #472]	; (80016b8 <MX_GPIO_Init+0x214>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e8:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <MX_GPIO_Init+0x214>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <MX_GPIO_Init+0x214>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	4a6e      	ldr	r2, [pc, #440]	; (80016b8 <MX_GPIO_Init+0x214>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001506:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	4a67      	ldr	r2, [pc, #412]	; (80016b8 <MX_GPIO_Init+0x214>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001524:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001532:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <MX_GPIO_Init+0x214>)
 800153a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001560:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	4a50      	ldr	r2, [pc, #320]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157e:	4b4e      	ldr	r3, [pc, #312]	; (80016b8 <MX_GPIO_Init+0x214>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f240 7104 	movw	r1, #1796	; 0x704
 8001592:	484a      	ldr	r0, [pc, #296]	; (80016bc <MX_GPIO_Init+0x218>)
 8001594:	f004 fdfa 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001598:	2200      	movs	r2, #0
 800159a:	f242 0167 	movw	r1, #8295	; 0x2067
 800159e:	4848      	ldr	r0, [pc, #288]	; (80016c0 <MX_GPIO_Init+0x21c>)
 80015a0:	f004 fdf4 	bl	800618c <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 80015a4:	2200      	movs	r2, #0
 80015a6:	f643 610d 	movw	r1, #15885	; 0x3e0d
 80015aa:	4846      	ldr	r0, [pc, #280]	; (80016c4 <MX_GPIO_Init+0x220>)
 80015ac:	f004 fdee 	bl	800618c <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2182      	movs	r1, #130	; 0x82
 80015b4:	4844      	ldr	r0, [pc, #272]	; (80016c8 <MX_GPIO_Init+0x224>)
 80015b6:	f004 fde9 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80015c0:	4842      	ldr	r0, [pc, #264]	; (80016cc <MX_GPIO_Init+0x228>)
 80015c2:	f004 fde3 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 80015c6:	f240 7304 	movw	r3, #1796	; 0x704
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4837      	ldr	r0, [pc, #220]	; (80016bc <MX_GPIO_Init+0x218>)
 80015e0:	f004 fc24 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80015e4:	f242 0367 	movw	r3, #8295	; 0x2067
 80015e8:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4830      	ldr	r0, [pc, #192]	; (80016c0 <MX_GPIO_Init+0x21c>)
 80015fe:	f004 fc15 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001602:	230d      	movs	r3, #13
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	2301      	movs	r3, #1
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	482a      	ldr	r0, [pc, #168]	; (80016c4 <MX_GPIO_Init+0x220>)
 800161a:	f004 fc07 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	4824      	ldr	r0, [pc, #144]	; (80016c8 <MX_GPIO_Init+0x224>)
 8001636:	f004 fbf9 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 800163a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	481e      	ldr	r0, [pc, #120]	; (80016cc <MX_GPIO_Init+0x228>)
 8001654:	f004 fbea 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4816      	ldr	r0, [pc, #88]	; (80016cc <MX_GPIO_Init+0x228>)
 8001672:	f004 fbdb 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001676:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800167a:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	480d      	ldr	r0, [pc, #52]	; (80016c4 <MX_GPIO_Init+0x220>)
 8001690:	f004 fbcc 	bl	8005e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001694:	2302      	movs	r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <MX_GPIO_Init+0x224>)
 80016ac:	f004 fbbe 	bl	8005e2c <HAL_GPIO_Init>

}
 80016b0:	bf00      	nop
 80016b2:	3730      	adds	r7, #48	; 0x30
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020000 	.word	0x58020000
 80016c0:	58020400 	.word	0x58020400
 80016c4:	58021800 	.word	0x58021800
 80016c8:	58021000 	.word	0x58021000
 80016cc:	58020c00 	.word	0x58020c00

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_MspInit+0x30>)
 80016e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x30>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x30>)
 80016f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	58024400 	.word	0x58024400

08001714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08e      	sub	sp, #56	; 0x38
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a96      	ldr	r2, [pc, #600]	; (800198c <HAL_ADC_MspInit+0x278>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d163      	bne.n	80017fe <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001736:	4b96      	ldr	r3, [pc, #600]	; (8001990 <HAL_ADC_MspInit+0x27c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	4a94      	ldr	r2, [pc, #592]	; (8001990 <HAL_ADC_MspInit+0x27c>)
 800173e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001740:	4b93      	ldr	r3, [pc, #588]	; (8001990 <HAL_ADC_MspInit+0x27c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10e      	bne.n	8001766 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_ADC_MspInit+0x280>)
 800174a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800174e:	4a91      	ldr	r2, [pc, #580]	; (8001994 <HAL_ADC_MspInit+0x280>)
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001758:	4b8e      	ldr	r3, [pc, #568]	; (8001994 <HAL_ADC_MspInit+0x280>)
 800175a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	623b      	str	r3, [r7, #32]
 8001764:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_ADC_MspInit+0x280>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	4a89      	ldr	r2, [pc, #548]	; (8001994 <HAL_ADC_MspInit+0x280>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001776:	4b87      	ldr	r3, [pc, #540]	; (8001994 <HAL_ADC_MspInit+0x280>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001784:	2308      	movs	r3, #8
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001788:	2303      	movs	r3, #3
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4880      	ldr	r0, [pc, #512]	; (8001998 <HAL_ADC_MspInit+0x284>)
 8001798:	f004 fb48 	bl	8005e2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800179c:	4b7f      	ldr	r3, [pc, #508]	; (800199c <HAL_ADC_MspInit+0x288>)
 800179e:	4a80      	ldr	r2, [pc, #512]	; (80019a0 <HAL_ADC_MspInit+0x28c>)
 80017a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017a2:	4b7e      	ldr	r3, [pc, #504]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017a4:	2209      	movs	r2, #9
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a8:	4b7c      	ldr	r3, [pc, #496]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b7b      	ldr	r3, [pc, #492]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b79      	ldr	r3, [pc, #484]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017bc:	4b77      	ldr	r3, [pc, #476]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017c4:	4b75      	ldr	r3, [pc, #468]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017cc:	4b73      	ldr	r3, [pc, #460]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	4b71      	ldr	r3, [pc, #452]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017da:	4b70      	ldr	r3, [pc, #448]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017e0:	486e      	ldr	r0, [pc, #440]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017e2:	f002 f807 	bl	80037f4 <HAL_DMA_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 80017ec:	f7ff ff70 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a6a      	ldr	r2, [pc, #424]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80017f6:	4a69      	ldr	r2, [pc, #420]	; (800199c <HAL_ADC_MspInit+0x288>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80017fc:	e0c1      	b.n	8001982 <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <HAL_ADC_MspInit+0x290>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d163      	bne.n	80018d0 <HAL_ADC_MspInit+0x1bc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001808:	4b61      	ldr	r3, [pc, #388]	; (8001990 <HAL_ADC_MspInit+0x27c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a60      	ldr	r2, [pc, #384]	; (8001990 <HAL_ADC_MspInit+0x27c>)
 8001810:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_ADC_MspInit+0x27c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10e      	bne.n	8001838 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800181a:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <HAL_ADC_MspInit+0x280>)
 800181c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001820:	4a5c      	ldr	r2, [pc, #368]	; (8001994 <HAL_ADC_MspInit+0x280>)
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800182a:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <HAL_ADC_MspInit+0x280>)
 800182c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_ADC_MspInit+0x280>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	4a55      	ldr	r2, [pc, #340]	; (8001994 <HAL_ADC_MspInit+0x280>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001848:	4b52      	ldr	r3, [pc, #328]	; (8001994 <HAL_ADC_MspInit+0x280>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RollRigt_Pin;
 8001856:	2301      	movs	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185a:	2303      	movs	r3, #3
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	484f      	ldr	r0, [pc, #316]	; (80019a8 <HAL_ADC_MspInit+0x294>)
 800186a:	f004 fadf 	bl	8005e2c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800186e:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <HAL_ADC_MspInit+0x298>)
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_ADC_MspInit+0x29c>)
 8001872:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001874:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <HAL_ADC_MspInit+0x298>)
 8001876:	220a      	movs	r2, #10
 8001878:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <HAL_ADC_MspInit+0x298>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001880:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <HAL_ADC_MspInit+0x298>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <HAL_ADC_MspInit+0x298>)
 8001888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_ADC_MspInit+0x298>)
 8001890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001894:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001896:	4b45      	ldr	r3, [pc, #276]	; (80019ac <HAL_ADC_MspInit+0x298>)
 8001898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800189e:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_ADC_MspInit+0x298>)
 80018a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_ADC_MspInit+0x298>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <HAL_ADC_MspInit+0x298>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80018b2:	483e      	ldr	r0, [pc, #248]	; (80019ac <HAL_ADC_MspInit+0x298>)
 80018b4:	f001 ff9e 	bl	80037f4 <HAL_DMA_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 80018be:	f7ff ff07 	bl	80016d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a39      	ldr	r2, [pc, #228]	; (80019ac <HAL_ADC_MspInit+0x298>)
 80018c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80018c8:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_ADC_MspInit+0x298>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018ce:	e058      	b.n	8001982 <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC3)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <HAL_ADC_MspInit+0x2a0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d153      	bne.n	8001982 <HAL_ADC_MspInit+0x26e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_ADC_MspInit+0x280>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	4a2c      	ldr	r2, [pc, #176]	; (8001994 <HAL_ADC_MspInit+0x280>)
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_ADC_MspInit+0x280>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_ADC_MspInit+0x280>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_ADC_MspInit+0x280>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_ADC_MspInit+0x280>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001916:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800191a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800191e:	f000 fc85 	bl	800222c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 8001924:	4a25      	ldr	r2, [pc, #148]	; (80019bc <HAL_ADC_MspInit+0x2a8>)
 8001926:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 800192a:	2273      	movs	r2, #115	; 0x73
 800192c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 800193c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001940:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 8001944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001948:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 800194c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001950:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 8001954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001958:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 8001968:	f001 ff44 	bl	80037f4 <HAL_DMA_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_ADC_MspInit+0x262>
      Error_Handler();
 8001972:	f7ff fead 	bl	80016d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 800197a:	64da      	str	r2, [r3, #76]	; 0x4c
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_ADC_MspInit+0x2a4>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001982:	bf00      	nop
 8001984:	3738      	adds	r7, #56	; 0x38
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000
 8001990:	24000058 	.word	0x24000058
 8001994:	58024400 	.word	0x58024400
 8001998:	58020000 	.word	0x58020000
 800199c:	24000604 	.word	0x24000604
 80019a0:	40020010 	.word	0x40020010
 80019a4:	40022100 	.word	0x40022100
 80019a8:	58020800 	.word	0x58020800
 80019ac:	24000798 	.word	0x24000798
 80019b0:	40020028 	.word	0x40020028
 80019b4:	58026000 	.word	0x58026000
 80019b8:	24000340 	.word	0x24000340
 80019bc:	40020040 	.word	0x40020040

080019c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2b      	ldr	r2, [pc, #172]	; (8001a7c <HAL_TIM_Base_MspInit+0xbc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d117      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 80019d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d8:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 80019e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2037      	movs	r0, #55	; 0x37
 80019f6:	f001 fec8 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019fa:	2037      	movs	r0, #55	; 0x37
 80019fc:	f001 fedf 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a00:	e038      	b.n	8001a74 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_TIM_Base_MspInit+0xc4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d117      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 8001a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 8001a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 8001a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	202b      	movs	r0, #43	; 0x2b
 8001a30:	f001 feab 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001a34:	202b      	movs	r0, #43	; 0x2b
 8001a36:	f001 fec2 	bl	80037be <HAL_NVIC_EnableIRQ>
}
 8001a3a:	e01b      	b.n	8001a74 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_TIM_Base_MspInit+0xc8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d116      	bne.n	8001a74 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 8001a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_TIM_Base_MspInit+0xc0>)
 8001a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	2074      	movs	r0, #116	; 0x74
 8001a6a:	f001 fe8e 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001a6e:	2074      	movs	r0, #116	; 0x74
 8001a70:	f001 fea5 	bl	80037be <HAL_NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40001400 	.word	0x40001400
 8001a80:	58024400 	.word	0x58024400
 8001a84:	40001800 	.word	0x40001800
 8001a88:	40014000 	.word	0x40014000

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b090      	sub	sp, #64	; 0x40
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4aa3      	ldr	r2, [pc, #652]	; (8001d38 <HAL_UART_MspInit+0x2ac>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d136      	bne.n	8001b1c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001aae:	4ba3      	ldr	r3, [pc, #652]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab4:	4aa1      	ldr	r2, [pc, #644]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001aba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001abe:	4b9f      	ldr	r3, [pc, #636]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001acc:	4b9b      	ldr	r3, [pc, #620]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	4a9a      	ldr	r2, [pc, #616]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001ad4:	f043 0320 	orr.w	r3, r3, #32
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001adc:	4b97      	ldr	r3, [pc, #604]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001aea:	23c0      	movs	r3, #192	; 0xc0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001afa:	2307      	movs	r3, #7
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b02:	4619      	mov	r1, r3
 8001b04:	488e      	ldr	r0, [pc, #568]	; (8001d40 <HAL_UART_MspInit+0x2b4>)
 8001b06:	f004 f991 	bl	8005e2c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	2052      	movs	r0, #82	; 0x52
 8001b10:	f001 fe3b 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001b14:	2052      	movs	r0, #82	; 0x52
 8001b16:	f001 fe52 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b1a:	e108      	b.n	8001d2e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a88      	ldr	r2, [pc, #544]	; (8001d44 <HAL_UART_MspInit+0x2b8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d165      	bne.n	8001bf2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b2c:	4a83      	ldr	r2, [pc, #524]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b36:	4b81      	ldr	r3, [pc, #516]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4a:	4a7c      	ldr	r2, [pc, #496]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b54:	4b79      	ldr	r3, [pc, #484]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001b62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b74:	2304      	movs	r3, #4
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4872      	ldr	r0, [pc, #456]	; (8001d48 <HAL_UART_MspInit+0x2bc>)
 8001b80:	f004 f954 	bl	8005e2c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001b84:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001b86:	4a72      	ldr	r2, [pc, #456]	; (8001d50 <HAL_UART_MspInit+0x2c4>)
 8001b88:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001b8a:	4b70      	ldr	r3, [pc, #448]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001b8c:	2229      	movs	r2, #41	; 0x29
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b90:	4b6e      	ldr	r3, [pc, #440]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba4:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001baa:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb8:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bc4:	4861      	ldr	r0, [pc, #388]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001bc6:	f001 fe15 	bl	80037f4 <HAL_DMA_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001bd0:	f7ff fd7e 	bl	80016d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a5d      	ldr	r2, [pc, #372]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001bd8:	679a      	str	r2, [r3, #120]	; 0x78
 8001bda:	4a5c      	ldr	r2, [pc, #368]	; (8001d4c <HAL_UART_MspInit+0x2c0>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2101      	movs	r1, #1
 8001be4:	2025      	movs	r0, #37	; 0x25
 8001be6:	f001 fdd0 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bea:	2025      	movs	r0, #37	; 0x25
 8001bec:	f001 fde7 	bl	80037be <HAL_NVIC_EnableIRQ>
}
 8001bf0:	e09d      	b.n	8001d2e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_UART_MspInit+0x2c8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d15d      	bne.n	8001cb8 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c02:	4a4e      	ldr	r2, [pc, #312]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	4a46      	ldr	r2, [pc, #280]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001c38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c52:	4619      	mov	r1, r3
 8001c54:	483c      	ldr	r0, [pc, #240]	; (8001d48 <HAL_UART_MspInit+0x2bc>)
 8001c56:	f004 f8e9 	bl	8005e2c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c5c:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <HAL_UART_MspInit+0x2d0>)
 8001c5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001c60:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c62:	222d      	movs	r2, #45	; 0x2d
 8001c64:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c66:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c72:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c78:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7a:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c80:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c8c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c9a:	482f      	ldr	r0, [pc, #188]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001c9c:	f001 fdaa 	bl	80037f4 <HAL_DMA_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001ca6:	f7ff fd13 	bl	80016d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001cae:	679a      	str	r2, [r3, #120]	; 0x78
 8001cb0:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <HAL_UART_MspInit+0x2cc>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cb6:	e03a      	b.n	8001d2e <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_UART_MspInit+0x2d4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d135      	bne.n	8001d2e <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001cca:	f043 0320 	orr.w	r3, r3, #32
 8001cce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_UART_MspInit+0x2b0>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d16:	4619      	mov	r1, r3
 8001d18:	4812      	ldr	r0, [pc, #72]	; (8001d64 <HAL_UART_MspInit+0x2d8>)
 8001d1a:	f004 f887 	bl	8005e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2102      	movs	r1, #2
 8001d22:	2047      	movs	r0, #71	; 0x47
 8001d24:	f001 fd31 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d28:	2047      	movs	r0, #71	; 0x47
 8001d2a:	f001 fd48 	bl	80037be <HAL_NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3740      	adds	r7, #64	; 0x40
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40007800 	.word	0x40007800
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	58021400 	.word	0x58021400
 8001d44:	40011000 	.word	0x40011000
 8001d48:	58020400 	.word	0x58020400
 8001d4c:	240004c8 	.word	0x240004c8
 8001d50:	40020058 	.word	0x40020058
 8001d54:	40004800 	.word	0x40004800
 8001d58:	24000134 	.word	0x24000134
 8001d5c:	40020440 	.word	0x40020440
 8001d60:	40011400 	.word	0x40011400
 8001d64:	58020800 	.word	0x58020800

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <SysTick_Handler+0x2c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <SysTick_Handler+0x2c>)
 8001dc6:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SysTick_Handler+0x2c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d904      	bls.n	8001dda <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Handler+0x2c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001dd6:	f7fe fced 	bl	80007b4 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dda:	f000 f9d9 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2400054c 	.word	0x2400054c

08001de8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <DMA1_Stream0_IRQHandler+0x10>)
 8001dee:	f002 fd0b 	bl	8004808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24000604 	.word	0x24000604

08001dfc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
//	leftRawDistance = a_Linear *pitchRawValue[0] + b_Linear;
//	rigtRawDistance = a_Linear *pitchRawValue[1] + b_Linear;
//	pitchRawDistance = a_Linear *pitchRawValue[2] + b_Linear;
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <DMA1_Stream1_IRQHandler+0x10>)
 8001e02:	f002 fd01 	bl	8004808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24000798 	.word	0x24000798

08001e10 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA1_Stream2_IRQHandler+0x10>)
 8001e16:	f002 fcf7 	bl	8004808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	24000340 	.word	0x24000340

08001e24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <DMA1_Stream3_IRQHandler+0x24>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <DMA1_Stream3_IRQHandler+0x24>)
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4313      	orrs	r3, r2
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <DMA1_Stream3_IRQHandler+0x28>)
 8001e3c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e3e:	4804      	ldr	r0, [pc, #16]	; (8001e50 <DMA1_Stream3_IRQHandler+0x2c>)
 8001e40:	f002 fce2 	bl	8004808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	24000318 	.word	0x24000318
 8001e4c:	240003cc 	.word	0x240003cc
 8001e50:	240004c8 	.word	0x240004c8

08001e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <USART1_IRQHandler+0x10>)
 8001e5a:	f007 ff2b 	bl	8009cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	24000560 	.word	0x24000560

08001e68 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001e6e:	f007 f861 	bl	8008f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	24000818 	.word	0x24000818

08001e7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM7_IRQHandler+0x10>)
 8001e82:	f007 f857 	bl	8008f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	24000860 	.word	0x24000860

08001e90 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <DMA2_Stream2_IRQHandler+0xa8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d135      	bne.n	8001f08 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <DMA2_Stream2_IRQHandler+0xac>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	b2d1      	uxtb	r1, r2
 8001ea4:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <DMA2_Stream2_IRQHandler+0xac>)
 8001ea6:	7011      	strb	r1, [r2, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <DMA2_Stream2_IRQHandler+0xb0>)
 8001eac:	7819      	ldrb	r1, [r3, #0]
 8001eae:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <DMA2_Stream2_IRQHandler+0xb4>)
 8001eb0:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <DMA2_Stream2_IRQHandler+0xac>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	d926      	bls.n	8001f08 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <DMA2_Stream2_IRQHandler+0xac>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <DMA2_Stream2_IRQHandler+0xb4>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <DMA2_Stream2_IRQHandler+0xb4>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <DMA2_Stream2_IRQHandler+0xb8>)
 8001eda:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <DMA2_Stream2_IRQHandler+0xb4>)
 8001ede:	789b      	ldrb	r3, [r3, #2]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <DMA2_Stream2_IRQHandler+0xb4>)
 8001ee6:	78db      	ldrb	r3, [r3, #3]
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	4313      	orrs	r3, r2
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <DMA2_Stream2_IRQHandler+0xbc>)
 8001ef0:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <DMA2_Stream2_IRQHandler+0xb4>)
 8001ef4:	791b      	ldrb	r3, [r3, #4]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <DMA2_Stream2_IRQHandler+0xb4>)
 8001efc:	795b      	ldrb	r3, [r3, #5]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <DMA2_Stream2_IRQHandler+0xc0>)
 8001f06:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <DMA2_Stream2_IRQHandler+0xb0>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2baa      	cmp	r3, #170	; 0xaa
 8001f0e:	d106      	bne.n	8001f1e <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	e006      	b.n	8001f2c <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <DMA2_Stream2_IRQHandler+0xc4>)
 8001f2e:	f002 fc6b 	bl	8004808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	24000054 	.word	0x24000054
 8001f3c:	24000458 	.word	0x24000458
 8001f40:	24000764 	.word	0x24000764
 8001f44:	24000310 	.word	0x24000310
 8001f48:	240005fc 	.word	0x240005fc
 8001f4c:	24000600 	.word	0x24000600
 8001f50:	24000778 	.word	0x24000778
 8001f54:	24000134 	.word	0x24000134

08001f58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <USART6_IRQHandler+0x10>)
 8001f5e:	f007 fea9 	bl	8009cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	240006d8 	.word	0x240006d8

08001f6c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <UART7_IRQHandler+0x10>)
 8001f72:	f007 fe9f 	bl	8009cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	24000088 	.word	0x24000088

08001f80 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM15_IRQHandler+0x10>)
 8001f86:	f006 ffd5 	bl	8008f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	240002b8 	.word	0x240002b8

08001f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f98:	4b29      	ldr	r3, [pc, #164]	; (8002040 <SystemInit+0xac>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <SystemInit+0xac>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <SystemInit+0xb0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <SystemInit+0xb0>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <SystemInit+0xb0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <SystemInit+0xb0>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4921      	ldr	r1, [pc, #132]	; (8002044 <SystemInit+0xb0>)
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <SystemInit+0xb4>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <SystemInit+0xb0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <SystemInit+0xb0>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <SystemInit+0xb0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <SystemInit+0xb0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <SystemInit+0xb0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <SystemInit+0xb0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <SystemInit+0xb0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <SystemInit+0xb0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <SystemInit+0xb0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <SystemInit+0xb0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <SystemInit+0xb0>)
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <SystemInit+0xb0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <SystemInit+0xb0>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <SystemInit+0xb0>)
 8002016:	2200      	movs	r2, #0
 8002018:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <SystemInit+0xb8>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <SystemInit+0xbc>)
 8002020:	4013      	ands	r3, r2
 8002022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002026:	d202      	bcs.n	800202e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <SystemInit+0xc0>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SystemInit+0xac>)
 8002030:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002034:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00
 8002044:	58024400 	.word	0x58024400
 8002048:	eaf6ed7f 	.word	0xeaf6ed7f
 800204c:	5c001000 	.word	0x5c001000
 8002050:	ffff0000 	.word	0xffff0000
 8002054:	51008108 	.word	0x51008108

08002058 <Reset_Handler>:
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002090 <LoopFillZerobss+0x14>
 800205c:	2100      	movs	r1, #0
 800205e:	e003      	b.n	8002068 <LoopCopyDataInit>

08002060 <CopyDataInit>:
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <LoopFillZerobss+0x18>)
 8002062:	585b      	ldr	r3, [r3, r1]
 8002064:	5043      	str	r3, [r0, r1]
 8002066:	3104      	adds	r1, #4

08002068 <LoopCopyDataInit>:
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <LoopFillZerobss+0x1c>)
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <LoopFillZerobss+0x20>)
 800206c:	1842      	adds	r2, r0, r1
 800206e:	429a      	cmp	r2, r3
 8002070:	d3f6      	bcc.n	8002060 <CopyDataInit>
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <LoopFillZerobss+0x24>)
 8002074:	e002      	b.n	800207c <LoopFillZerobss>

08002076 <FillZerobss>:
 8002076:	2300      	movs	r3, #0
 8002078:	f842 3b04 	str.w	r3, [r2], #4

0800207c <LoopFillZerobss>:
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <LoopFillZerobss+0x28>)
 800207e:	429a      	cmp	r2, r3
 8002080:	d3f9      	bcc.n	8002076 <FillZerobss>
 8002082:	f7ff ff87 	bl	8001f94 <SystemInit>
 8002086:	f00a ff8d 	bl	800cfa4 <__libc_init_array>
 800208a:	f7fe fd91 	bl	8000bb0 <main>
 800208e:	4770      	bx	lr
 8002090:	24080000 	.word	0x24080000
 8002094:	0800d04c 	.word	0x0800d04c
 8002098:	24000000 	.word	0x24000000
 800209c:	24000038 	.word	0x24000038
 80020a0:	24000038 	.word	0x24000038
 80020a4:	240008c4 	.word	0x240008c4

080020a8 <ADC3_IRQHandler>:
 80020a8:	e7fe      	b.n	80020a8 <ADC3_IRQHandler>
	...

080020ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b2:	2003      	movs	r0, #3
 80020b4:	f001 fb5e 	bl	8003774 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020b8:	f004 fe64 	bl	8006d84 <HAL_RCC_GetSysClockFreq>
 80020bc:	4601      	mov	r1, r0
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_Init+0x68>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	4a13      	ldr	r2, [pc, #76]	; (8002118 <HAL_Init+0x6c>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa21 f303 	lsr.w	r3, r1, r3
 80020d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_Init+0x68>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <HAL_Init+0x6c>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ec:	4a0b      	ldr	r2, [pc, #44]	; (800211c <HAL_Init+0x70>)
 80020ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020f0:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <HAL_Init+0x74>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 f814 	bl	8002124 <HAL_InitTick>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e002      	b.n	800210c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002106:	f7ff faeb 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	58024400 	.word	0x58024400
 8002118:	0800d024 	.word	0x0800d024
 800211c:	2400002c 	.word	0x2400002c
 8002120:	24000028 	.word	0x24000028

08002124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_InitTick+0x60>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e021      	b.n	800217c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_InitTick+0x64>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_InitTick+0x60>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f001 fb43 	bl	80037da <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d80a      	bhi.n	800217a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002164:	2200      	movs	r2, #0
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f001 fb0d 	bl	800378a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <HAL_InitTick+0x68>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	24000034 	.word	0x24000034
 8002188:	24000028 	.word	0x24000028
 800218c:	24000030 	.word	0x24000030

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	24000034 	.word	0x24000034
 80021b4:	240008c0 	.word	0x240008c0

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	240008c0 	.word	0x240008c0

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_Delay+0x40>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	24000034 	.word	0x24000034

08002214 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_GetREVID+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0c1b      	lsrs	r3, r3, #16
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	5c001000 	.word	0x5c001000

0800222c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	43db      	mvns	r3, r3
 800223e:	401a      	ands	r2, r3
 8002240:	4904      	ldr	r1, [pc, #16]	; (8002254 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	58000400 	.word	0x58000400

08002258 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	609a      	str	r2, [r3, #8]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022c0:	b490      	push	{r4, r7}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3360      	adds	r3, #96	; 0x60
 80022d2:	461a      	mov	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	430b      	orrs	r3, r1
 80022ec:	4313      	orrs	r3, r2
 80022ee:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc90      	pop	{r4, r7}
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	611a      	str	r2, [r3, #16]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800232c:	b490      	push	{r4, r7}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3360      	adds	r3, #96	; 0x60
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	6023      	str	r3, [r4, #0]
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bc90      	pop	{r4, r7}
 800235a:	4770      	bx	lr

0800235c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800235c:	b490      	push	{r4, r7}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3330      	adds	r3, #48	; 0x30
 800236c:	461a      	mov	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	4413      	add	r3, r2
 800237a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800237c:	6822      	ldr	r2, [r4, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	211f      	movs	r1, #31
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	401a      	ands	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	f003 011f 	and.w	r1, r3, #31
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc90      	pop	{r4, r7}
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023ae:	b490      	push	{r4, r7}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3314      	adds	r3, #20
 80023be:	461a      	mov	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	0e5b      	lsrs	r3, r3, #25
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	4413      	add	r3, r2
 80023cc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	0d1b      	lsrs	r3, r3, #20
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	2107      	movs	r1, #7
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	401a      	ands	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	0d1b      	lsrs	r3, r3, #20
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc90      	pop	{r4, r7}
 80023fc:	4770      	bx	lr
	...

08002400 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0318 	and.w	r3, r3, #24
 8002422:	4908      	ldr	r1, [pc, #32]	; (8002444 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002424:	40d9      	lsrs	r1, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	400b      	ands	r3, r1
 800242a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800242e:	431a      	orrs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	000fffff 	.word	0x000fffff

08002448 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 031f 	and.w	r3, r3, #31
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002472:	4013      	ands	r3, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6093      	str	r3, [r2, #8]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	5fffffc0 	.word	0x5fffffc0

08002488 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800249c:	d101      	bne.n	80024a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80024be:	4013      	ands	r3, r2
 80024c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	6fffffc0 	.word	0x6fffffc0

080024d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ec:	d101      	bne.n	80024f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <LL_ADC_Enable+0x24>)
 800250e:	4013      	ands	r3, r2
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	7fffffc0 	.word	0x7fffffc0

08002528 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <LL_ADC_IsEnabled+0x18>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <LL_ADC_IsEnabled+0x1a>
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <LL_ADC_REG_StartConversion+0x24>)
 800255e:	4013      	ands	r3, r2
 8002560:	f043 0204 	orr.w	r2, r3, #4
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	7fffffc0 	.word	0x7fffffc0

08002578 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b04      	cmp	r3, #4
 800258a:	d101      	bne.n	8002590 <LL_ADC_REG_IsConversionOngoing+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d101      	bne.n	80025b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e18e      	b.n	80028fc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff f891 	bl	8001714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff3f 	bl	8002488 <LL_ADC_IsDeepPowerDownEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff25 	bl	8002464 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff5a 	bl	80024d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d113      	bne.n	8002652 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff3e 	bl	80024b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002634:	4b9a      	ldr	r3, [pc, #616]	; (80028a0 <HAL_ADC_Init+0x2dc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	4a9a      	ldr	r2, [pc, #616]	; (80028a4 <HAL_ADC_Init+0x2e0>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002644:	e002      	b.n	800264c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3b01      	subs	r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f9      	bne.n	8002646 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff3e 	bl	80024d8 <LL_ADC_IsInternalRegulatorEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10d      	bne.n	800267e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff78 	bl	8002578 <LL_ADC_REG_IsConversionOngoing>
 8002688:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 8129 	bne.w	80028ea <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 8125 	bne.w	80028ea <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026a8:	f043 0202 	orr.w	r2, r3, #2
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff37 	bl	8002528 <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d136      	bne.n	800272e <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a78      	ldr	r2, [pc, #480]	; (80028a8 <HAL_ADC_Init+0x2e4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_ADC_Init+0x110>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a77      	ldr	r2, [pc, #476]	; (80028ac <HAL_ADC_Init+0x2e8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10e      	bne.n	80026f2 <HAL_ADC_Init+0x12e>
 80026d4:	4874      	ldr	r0, [pc, #464]	; (80028a8 <HAL_ADC_Init+0x2e4>)
 80026d6:	f7ff ff27 	bl	8002528 <LL_ADC_IsEnabled>
 80026da:	4604      	mov	r4, r0
 80026dc:	4873      	ldr	r0, [pc, #460]	; (80028ac <HAL_ADC_Init+0x2e8>)
 80026de:	f7ff ff23 	bl	8002528 <LL_ADC_IsEnabled>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4323      	orrs	r3, r4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bf0c      	ite	eq
 80026ea:	2301      	moveq	r3, #1
 80026ec:	2300      	movne	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e008      	b.n	8002704 <HAL_ADC_Init+0x140>
 80026f2:	486f      	ldr	r0, [pc, #444]	; (80028b0 <HAL_ADC_Init+0x2ec>)
 80026f4:	f7ff ff18 	bl	8002528 <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a66      	ldr	r2, [pc, #408]	; (80028a8 <HAL_ADC_Init+0x2e4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_ADC_Init+0x158>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a65      	ldr	r2, [pc, #404]	; (80028ac <HAL_ADC_Init+0x2e8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_ADC_Init+0x15c>
 800271c:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_ADC_Init+0x2f0>)
 800271e:	e000      	b.n	8002722 <HAL_ADC_Init+0x15e>
 8002720:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <HAL_ADC_Init+0x2f4>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f7ff fd95 	bl	8002258 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800272e:	f7ff fd71 	bl	8002214 <HAL_GetREVID>
 8002732:	4602      	mov	r2, r0
 8002734:	f241 0303 	movw	r3, #4099	; 0x1003
 8002738:	429a      	cmp	r2, r3
 800273a:	d914      	bls.n	8002766 <HAL_ADC_Init+0x1a2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b10      	cmp	r3, #16
 8002742:	d110      	bne.n	8002766 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7d5b      	ldrb	r3, [r3, #21]
 8002748:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800274e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002754:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7f1b      	ldrb	r3, [r3, #28]
 800275a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800275c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800275e:	f043 030c 	orr.w	r3, r3, #12
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e00d      	b.n	8002782 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7d5b      	ldrb	r3, [r3, #21]
 800276a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002770:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002776:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7f1b      	ldrb	r3, [r3, #28]
 800277c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7f1b      	ldrb	r3, [r3, #28]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d106      	bne.n	8002798 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	3b01      	subs	r3, #1
 8002790:	045b      	lsls	r3, r3, #17
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_ADC_Init+0x2f8>)
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fed3 	bl	8002578 <LL_ADC_REG_IsConversionOngoing>
 80027d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fee0 	bl	800259e <LL_ADC_INJ_IsConversionOngoing>
 80027de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d14a      	bne.n	800287c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d147      	bne.n	800287c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7d1b      	ldrb	r3, [r3, #20]
 80027f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_ADC_Init+0x2fc>)
 8002802:	4013      	ands	r3, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	69b9      	ldr	r1, [r7, #24]
 800280a:	430b      	orrs	r3, r1
 800280c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002814:	2b01      	cmp	r3, #1
 8002816:	d11b      	bne.n	8002850 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_ADC_Init+0x300>)
 8002826:	4013      	ands	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800282c:	3a01      	subs	r2, #1
 800282e:	0411      	lsls	r1, r2, #16
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002840:	430a      	orrs	r2, r1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0201 	orr.w	r2, r2, #1
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	e007      	b.n	8002860 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fcb4 	bl	80031e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d121      	bne.n	80028c8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f023 010f 	bic.w	r1, r3, #15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	1e5a      	subs	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
 800289c:	e01c      	b.n	80028d8 <HAL_ADC_Init+0x314>
 800289e:	bf00      	nop
 80028a0:	24000028 	.word	0x24000028
 80028a4:	053e2d63 	.word	0x053e2d63
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40022100 	.word	0x40022100
 80028b0:	58026000 	.word	0x58026000
 80028b4:	40022300 	.word	0x40022300
 80028b8:	58026300 	.word	0x58026300
 80028bc:	fff0c003 	.word	0xfff0c003
 80028c0:	ffffbffc 	.word	0xffffbffc
 80028c4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020f 	bic.w	r2, r2, #15
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f023 0303 	bic.w	r3, r3, #3
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
 80028e8:	e007      	b.n	80028fa <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	f043 0210 	orr.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3724      	adds	r7, #36	; 0x24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}

08002904 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5c      	ldr	r2, [pc, #368]	; (8002a84 <HAL_ADC_Start+0x180>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_ADC_Start+0x1c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a5b      	ldr	r2, [pc, #364]	; (8002a88 <HAL_ADC_Start+0x184>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_ADC_Start+0x20>
 8002920:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <HAL_ADC_Start+0x188>)
 8002922:	e000      	b.n	8002926 <HAL_ADC_Start+0x22>
 8002924:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <HAL_ADC_Start+0x18c>)
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fd8e 	bl	8002448 <LL_ADC_GetMultimode>
 800292c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fe20 	bl	8002578 <LL_ADC_REG_IsConversionOngoing>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 809a 	bne.w	8002a74 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_ADC_Start+0x4a>
 800294a:	2302      	movs	r3, #2
 800294c:	e095      	b.n	8002a7a <HAL_ADC_Start+0x176>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fbc0 	bl	80030dc <ADC_Enable>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8081 	bne.w	8002a6a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800296c:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <HAL_ADC_Start+0x190>)
 800296e:	4013      	ands	r3, r2
 8002970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a42      	ldr	r2, [pc, #264]	; (8002a88 <HAL_ADC_Start+0x184>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d002      	beq.n	8002988 <HAL_ADC_Start+0x84>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e000      	b.n	800298a <HAL_ADC_Start+0x86>
 8002988:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <HAL_ADC_Start+0x180>)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4293      	cmp	r3, r2
 8002990:	d002      	beq.n	8002998 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d106      	bne.n	80029c0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f023 0206 	bic.w	r2, r3, #6
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	659a      	str	r2, [r3, #88]	; 0x58
 80029be:	e002      	b.n	80029c6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	221c      	movs	r2, #28
 80029cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2b      	ldr	r2, [pc, #172]	; (8002a88 <HAL_ADC_Start+0x184>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d002      	beq.n	80029e6 <HAL_ADC_Start+0xe2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e000      	b.n	80029e8 <HAL_ADC_Start+0xe4>
 80029e6:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_ADC_Start+0x180>)
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d008      	beq.n	8002a02 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d002      	beq.n	8002a02 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	d114      	bne.n	8002a2c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fd93 	bl	8002550 <LL_ADC_REG_StartConversion>
 8002a2a:	e025      	b.n	8002a78 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <HAL_ADC_Start+0x184>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d002      	beq.n	8002a48 <HAL_ADC_Start+0x144>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e000      	b.n	8002a4a <HAL_ADC_Start+0x146>
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_ADC_Start+0x180>)
 8002a4a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00f      	beq.n	8002a78 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
 8002a68:	e006      	b.n	8002a78 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a72:	e001      	b.n	8002a78 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
 8002a76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40022100 	.word	0x40022100
 8002a8c:	40022300 	.word	0x40022300
 8002a90:	58026300 	.word	0x58026300
 8002a94:	fffff0fe 	.word	0xfffff0fe

08002a98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b099      	sub	sp, #100	; 0x64
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a99      	ldr	r2, [pc, #612]	; (8002d34 <HAL_ADC_ConfigChannel+0x280>)
 8002ace:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x2a>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e2e6      	b.n	80030ac <HAL_ADC_ConfigChannel+0x5f8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fd44 	bl	8002578 <LL_ADC_REG_IsConversionOngoing>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 82cb 	bne.w	800308e <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x62>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2201      	movs	r2, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	e00f      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x82>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2201      	movs	r2, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	69d1      	ldr	r1, [r2, #28]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f7ff fc03 	bl	800235c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fd0c 	bl	8002578 <LL_ADC_REG_IsConversionOngoing>
 8002b60:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fd19 	bl	800259e <LL_ADC_INJ_IsConversionOngoing>
 8002b6c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 80b3 	bne.w	8002cdc <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 80af 	bne.w	8002cdc <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f7ff fc0f 	bl	80023ae <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b90:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_ADC_ConfigChannel+0x284>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x102>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	e01d      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x13e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x128>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	e00a      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x13e>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d027      	beq.n	8002c4c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6919      	ldr	r1, [r3, #16]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0a:	f7ff fb59 	bl	80022c0 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6919      	ldr	r1, [r3, #16]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	7e5b      	ldrb	r3, [r3, #25]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d102      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x170>
 8002c1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c22:	e000      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x172>
 8002c24:	2300      	movs	r3, #0
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7ff fb80 	bl	800232c <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6919      	ldr	r1, [r3, #16]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x18e>
 8002c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x190>
 8002c42:	2300      	movs	r3, #0
 8002c44:	461a      	mov	r2, r3
 8002c46:	f7ff fb58 	bl	80022fa <LL_ADC_SetDataRightShift>
 8002c4a:	e047      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	069b      	lsls	r3, r3, #26
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c92:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	069b      	lsls	r3, r3, #26
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cb6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	069b      	lsls	r3, r3, #26
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cda:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fc21 	bl	8002528 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 81d9 	bne.w	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f7ff fb80 	bl	8002400 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <HAL_ADC_ConfigChannel+0x280>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f040 8101 	bne.w	8002f0e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10f      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x288>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2b09      	cmp	r3, #9
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e016      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x2ae>
 8002d34:	47ff0000 	.word	0x47ff0000
 8002d38:	5c001000 	.word	0x5c001000
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	bf94      	ite	ls
 8002d5c:	2301      	movls	r3, #1
 8002d5e:	2300      	movhi	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d064      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d107      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x2ce>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	0e9b      	lsrs	r3, r3, #26
 8002d78:	3301      	adds	r3, #1
 8002d7a:	069b      	lsls	r3, r3, #26
 8002d7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d80:	e00e      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x2ec>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	069b      	lsls	r3, r3, #26
 8002d9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x30c>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	e010      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x32e>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	ea42 0103 	orr.w	r1, r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x354>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	0e9b      	lsrs	r3, r3, #26
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f003 021f 	and.w	r2, r3, #31
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	051b      	lsls	r3, r3, #20
 8002e06:	e011      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x378>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	e069      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x398>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	069b      	lsls	r3, r3, #26
 8002e46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4a:	e00e      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x3b6>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	61fb      	str	r3, [r7, #28]
  return result;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	069b      	lsls	r3, r3, #26
 8002e66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x3d6>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	e010      	b.n	8002eac <HAL_ADC_ConfigChannel+0x3f8>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	617b      	str	r3, [r7, #20]
  return result;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	ea42 0103 	orr.w	r1, r2, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10d      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x424>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f003 021f 	and.w	r2, r3, #31
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b1e      	subs	r3, #30
 8002ed0:	051b      	lsls	r3, r3, #20
 8002ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	e014      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x44e>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b1e      	subs	r3, #30
 8002efc:	051b      	lsls	r3, r3, #20
 8002efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f02:	430b      	orrs	r3, r1
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	6892      	ldr	r2, [r2, #8]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f7ff fa50 	bl	80023ae <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f280 80c4 	bge.w	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a65      	ldr	r2, [pc, #404]	; (80030b4 <HAL_ADC_ConfigChannel+0x600>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x478>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a64      	ldr	r2, [pc, #400]	; (80030b8 <HAL_ADC_ConfigChannel+0x604>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x47c>
 8002f2c:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_ADC_ConfigChannel+0x608>)
 8002f2e:	e000      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x47e>
 8002f30:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_ADC_ConfigChannel+0x60c>)
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f9b6 	bl	80022a4 <LL_ADC_GetCommonPathInternalCh>
 8002f38:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a5d      	ldr	r2, [pc, #372]	; (80030b4 <HAL_ADC_ConfigChannel+0x600>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d004      	beq.n	8002f4e <HAL_ADC_ConfigChannel+0x49a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5b      	ldr	r2, [pc, #364]	; (80030b8 <HAL_ADC_ConfigChannel+0x604>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10e      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x4b8>
 8002f4e:	4859      	ldr	r0, [pc, #356]	; (80030b4 <HAL_ADC_ConfigChannel+0x600>)
 8002f50:	f7ff faea 	bl	8002528 <LL_ADC_IsEnabled>
 8002f54:	4604      	mov	r4, r0
 8002f56:	4858      	ldr	r0, [pc, #352]	; (80030b8 <HAL_ADC_ConfigChannel+0x604>)
 8002f58:	f7ff fae6 	bl	8002528 <LL_ADC_IsEnabled>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4323      	orrs	r3, r4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e008      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x4ca>
 8002f6c:	4855      	ldr	r0, [pc, #340]	; (80030c4 <HAL_ADC_ConfigChannel+0x610>)
 8002f6e:	f7ff fadb 	bl	8002528 <LL_ADC_IsEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d07b      	beq.n	800307a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a50      	ldr	r2, [pc, #320]	; (80030c8 <HAL_ADC_ConfigChannel+0x614>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d12e      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x536>
 8002f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d129      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a4a      	ldr	r2, [pc, #296]	; (80030c4 <HAL_ADC_ConfigChannel+0x610>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d17f      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a43      	ldr	r2, [pc, #268]	; (80030b4 <HAL_ADC_ConfigChannel+0x600>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x500>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <HAL_ADC_ConfigChannel+0x604>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x504>
 8002fb4:	4a41      	ldr	r2, [pc, #260]	; (80030bc <HAL_ADC_ConfigChannel+0x608>)
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x506>
 8002fb8:	4a41      	ldr	r2, [pc, #260]	; (80030c0 <HAL_ADC_ConfigChannel+0x60c>)
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7ff f95b 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002fc8:	4b40      	ldr	r3, [pc, #256]	; (80030cc <HAL_ADC_ConfigChannel+0x618>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	099b      	lsrs	r3, r3, #6
 8002fce:	4a40      	ldr	r2, [pc, #256]	; (80030d0 <HAL_ADC_ConfigChannel+0x61c>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002fda:	e002      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f9      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe8:	e05a      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a39      	ldr	r2, [pc, #228]	; (80030d4 <HAL_ADC_ConfigChannel+0x620>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d11e      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x57e>
 8002ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d119      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a30      	ldr	r2, [pc, #192]	; (80030c4 <HAL_ADC_ConfigChannel+0x610>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d14b      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a29      	ldr	r2, [pc, #164]	; (80030b4 <HAL_ADC_ConfigChannel+0x600>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_ADC_ConfigChannel+0x568>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_ADC_ConfigChannel+0x604>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x56c>
 800301c:	4a27      	ldr	r2, [pc, #156]	; (80030bc <HAL_ADC_ConfigChannel+0x608>)
 800301e:	e000      	b.n	8003022 <HAL_ADC_ConfigChannel+0x56e>
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <HAL_ADC_ConfigChannel+0x60c>)
 8003022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7ff f927 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003030:	e036      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <HAL_ADC_ConfigChannel+0x624>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d131      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
 800303c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12c      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	; (80030c4 <HAL_ADC_ConfigChannel+0x610>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d127      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_ADC_ConfigChannel+0x600>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_ADC_ConfigChannel+0x5b0>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_ADC_ConfigChannel+0x604>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x5b4>
 8003064:	4a15      	ldr	r2, [pc, #84]	; (80030bc <HAL_ADC_ConfigChannel+0x608>)
 8003066:	e000      	b.n	800306a <HAL_ADC_ConfigChannel+0x5b6>
 8003068:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <HAL_ADC_ConfigChannel+0x60c>)
 800306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7ff f903 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
 8003078:	e012      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800308c:	e008      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3764      	adds	r7, #100	; 0x64
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd90      	pop	{r4, r7, pc}
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40022100 	.word	0x40022100
 80030bc:	40022300 	.word	0x40022300
 80030c0:	58026300 	.word	0x58026300
 80030c4:	58026000 	.word	0x58026000
 80030c8:	cb840000 	.word	0xcb840000
 80030cc:	24000028 	.word	0x24000028
 80030d0:	053e2d63 	.word	0x053e2d63
 80030d4:	c7520000 	.word	0xc7520000
 80030d8:	cfb80000 	.word	0xcfb80000

080030dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fa1d 	bl	8002528 <LL_ADC_IsEnabled>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d167      	bne.n	80031c4 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <ADC_Enable+0xf4>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00d      	beq.n	800311e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f043 0210 	orr.w	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e053      	b.n	80031c6 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f9ec 	bl	8002500 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003128:	f7ff f846 	bl	80021b8 <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <ADC_Enable+0xf8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <ADC_Enable+0x66>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <ADC_Enable+0xfc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <ADC_Enable+0x6a>
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <ADC_Enable+0x100>)
 8003144:	e000      	b.n	8003148 <ADC_Enable+0x6c>
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <ADC_Enable+0x104>)
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff f97d 	bl	8002448 <LL_ADC_GetMultimode>
 800314e:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <ADC_Enable+0xfc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d002      	beq.n	8003160 <ADC_Enable+0x84>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	e000      	b.n	8003162 <ADC_Enable+0x86>
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <ADC_Enable+0xf8>)
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	4293      	cmp	r3, r2
 8003168:	d025      	beq.n	80031b6 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d129      	bne.n	80031c4 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003170:	e021      	b.n	80031b6 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f9d6 	bl	8002528 <LL_ADC_IsEnabled>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f9ba 	bl	8002500 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800318c:	f7ff f814 	bl	80021b8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d90d      	bls.n	80031b6 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e007      	b.n	80031c6 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d1d6      	bne.n	8003172 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	8000003f 	.word	0x8000003f
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40022100 	.word	0x40022100
 80031dc:	40022300 	.word	0x40022300
 80031e0:	58026300 	.word	0x58026300

080031e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a70      	ldr	r2, [pc, #448]	; (80033b4 <ADC_ConfigureBoostMode+0x1d0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <ADC_ConfigureBoostMode+0x1c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6f      	ldr	r2, [pc, #444]	; (80033b8 <ADC_ConfigureBoostMode+0x1d4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d109      	bne.n	8003214 <ADC_ConfigureBoostMode+0x30>
 8003200:	4b6e      	ldr	r3, [pc, #440]	; (80033bc <ADC_ConfigureBoostMode+0x1d8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e008      	b.n	8003226 <ADC_ConfigureBoostMode+0x42>
 8003214:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <ADC_ConfigureBoostMode+0x1dc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01a      	beq.n	8003260 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800322a:	f003 ff1d 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 800322e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003238:	d006      	beq.n	8003248 <ADC_ConfigureBoostMode+0x64>
 800323a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800323e:	d00b      	beq.n	8003258 <ADC_ConfigureBoostMode+0x74>
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d000      	beq.n	8003248 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003246:	e05d      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	60fb      	str	r3, [r7, #12]
        break;
 8003256:	e055      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	60fb      	str	r3, [r7, #12]
        break;
 800325e:	e051      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003260:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003264:	f004 fe3a 	bl	8007edc <HAL_RCCEx_GetPeriphCLKFreq>
 8003268:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003272:	d02a      	beq.n	80032ca <ADC_ConfigureBoostMode+0xe6>
 8003274:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003278:	d813      	bhi.n	80032a2 <ADC_ConfigureBoostMode+0xbe>
 800327a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800327e:	d024      	beq.n	80032ca <ADC_ConfigureBoostMode+0xe6>
 8003280:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003284:	d806      	bhi.n	8003294 <ADC_ConfigureBoostMode+0xb0>
 8003286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800328a:	d01e      	beq.n	80032ca <ADC_ConfigureBoostMode+0xe6>
 800328c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003290:	d01b      	beq.n	80032ca <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003292:	e037      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003298:	d017      	beq.n	80032ca <ADC_ConfigureBoostMode+0xe6>
 800329a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800329e:	d014      	beq.n	80032ca <ADC_ConfigureBoostMode+0xe6>
        break;
 80032a0:	e030      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80032a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032a6:	d021      	beq.n	80032ec <ADC_ConfigureBoostMode+0x108>
 80032a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032ac:	d806      	bhi.n	80032bc <ADC_ConfigureBoostMode+0xd8>
 80032ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032b2:	d013      	beq.n	80032dc <ADC_ConfigureBoostMode+0xf8>
 80032b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b8:	d014      	beq.n	80032e4 <ADC_ConfigureBoostMode+0x100>
        break;
 80032ba:	e023      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80032bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032c0:	d018      	beq.n	80032f4 <ADC_ConfigureBoostMode+0x110>
 80032c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032c6:	d019      	beq.n	80032fc <ADC_ConfigureBoostMode+0x118>
        break;
 80032c8:	e01c      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	60fb      	str	r3, [r7, #12]
        break;
 80032da:	e013      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
      break;
 80032e2:	e00f      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	60fb      	str	r3, [r7, #12]
        break;
 80032ea:	e00b      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	60fb      	str	r3, [r7, #12]
        break;
 80032f2:	e007      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	09db      	lsrs	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
        break;
 80032fa:	e003      	b.n	8003304 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	60fb      	str	r3, [r7, #12]
        break;
 8003302:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003304:	f7fe ff86 	bl	8002214 <HAL_GetREVID>
 8003308:	4602      	mov	r2, r0
 800330a:	f241 0303 	movw	r3, #4099	; 0x1003
 800330e:	429a      	cmp	r2, r3
 8003310:	d815      	bhi.n	800333e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <ADC_ConfigureBoostMode+0x1e0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d908      	bls.n	800332c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003328:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800332a:	e03e      	b.n	80033aa <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800333a:	609a      	str	r2, [r3, #8]
}
 800333c:	e035      	b.n	80033aa <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <ADC_ConfigureBoostMode+0x1e4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d808      	bhi.n	800335e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	e025      	b.n	80033aa <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <ADC_ConfigureBoostMode+0x1e8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d80a      	bhi.n	800337c <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	e016      	b.n	80033aa <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <ADC_ConfigureBoostMode+0x1ec>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d80a      	bhi.n	800339a <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	e007      	b.n	80033aa <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033a8:	609a      	str	r2, [r3, #8]
}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40022100 	.word	0x40022100
 80033bc:	40022300 	.word	0x40022300
 80033c0:	58026300 	.word	0x58026300
 80033c4:	01312d00 	.word	0x01312d00
 80033c8:	005f5e10 	.word	0x005f5e10
 80033cc:	00bebc20 	.word	0x00bebc20
 80033d0:	017d7840 	.word	0x017d7840

080033d4 <LL_ADC_IsEnabled>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <LL_ADC_IsEnabled+0x18>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <LL_ADC_IsEnabled+0x1a>
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_ADC_REG_IsConversionOngoing>:
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d101      	bne.n	8003412 <LL_ADC_REG_IsConversionOngoing+0x18>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b09f      	sub	sp, #124	; 0x7c
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800343a:	2302      	movs	r3, #2
 800343c:	e0ba      	b.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a5c      	ldr	r2, [pc, #368]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d102      	bne.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003450:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	e001      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e09d      	b.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ffbd 	bl	80033fa <LL_ADC_REG_IsConversionOngoing>
 8003480:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff ffb7 	bl	80033fa <LL_ADC_REG_IsConversionOngoing>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d17f      	bne.n	8003592 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003494:	2b00      	cmp	r3, #0
 8003496:	d17c      	bne.n	8003592 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a47      	ldr	r2, [pc, #284]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a46      	ldr	r2, [pc, #280]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80034ac:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034ae:	e000      	b.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80034b0:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d039      	beq.n	8003530 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80034bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a38      	ldr	r2, [pc, #224]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10e      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80034e2:	4836      	ldr	r0, [pc, #216]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80034e4:	f7ff ff76 	bl	80033d4 <LL_ADC_IsEnabled>
 80034e8:	4604      	mov	r4, r0
 80034ea:	4835      	ldr	r0, [pc, #212]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80034ec:	f7ff ff72 	bl	80033d4 <LL_ADC_IsEnabled>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4323      	orrs	r3, r4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e008      	b.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003500:	4832      	ldr	r0, [pc, #200]	; (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003502:	f7ff ff67 	bl	80033d4 <LL_ADC_IsEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d047      	beq.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800351c:	4013      	ands	r3, r2
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6811      	ldr	r1, [r2, #0]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6892      	ldr	r2, [r2, #8]
 8003526:	430a      	orrs	r2, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352e:	e03a      	b.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10e      	bne.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003550:	481a      	ldr	r0, [pc, #104]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003552:	f7ff ff3f 	bl	80033d4 <LL_ADC_IsEnabled>
 8003556:	4604      	mov	r4, r0
 8003558:	4819      	ldr	r0, [pc, #100]	; (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800355a:	f7ff ff3b 	bl	80033d4 <LL_ADC_IsEnabled>
 800355e:	4603      	mov	r3, r0
 8003560:	4323      	orrs	r3, r4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e008      	b.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800356e:	4817      	ldr	r0, [pc, #92]	; (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003570:	f7ff ff30 	bl	80033d4 <LL_ADC_IsEnabled>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800358a:	4013      	ands	r3, r2
 800358c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800358e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003590:	e009      	b.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80035a4:	e000      	b.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	377c      	adds	r7, #124	; 0x7c
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd90      	pop	{r4, r7, pc}
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40022100 	.word	0x40022100
 80035c4:	40022300 	.word	0x40022300
 80035c8:	58026300 	.word	0x58026300
 80035cc:	58026000 	.word	0x58026000
 80035d0:	fffff0e0 	.word	0xfffff0e0

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <__NVIC_SetPriorityGrouping+0x40>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <__NVIC_SetPriorityGrouping+0x40>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00
 8003618:	05fa0000 	.word	0x05fa0000

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db0b      	blt.n	8003662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4907      	ldr	r1, [pc, #28]	; (8003670 <__NVIC_EnableIRQ+0x38>)
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000e100 	.word	0xe000e100

08003674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	6039      	str	r1, [r7, #0]
 800367e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db0a      	blt.n	800369e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	490c      	ldr	r1, [pc, #48]	; (80036c0 <__NVIC_SetPriority+0x4c>)
 800368e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	440b      	add	r3, r1
 8003698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800369c:	e00a      	b.n	80036b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4908      	ldr	r1, [pc, #32]	; (80036c4 <__NVIC_SetPriority+0x50>)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	3b04      	subs	r3, #4
 80036ac:	0112      	lsls	r2, r2, #4
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	440b      	add	r3, r1
 80036b2:	761a      	strb	r2, [r3, #24]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000e100 	.word	0xe000e100
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	bf28      	it	cs
 80036e6:	2304      	movcs	r3, #4
 80036e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d902      	bls.n	80036f8 <NVIC_EncodePriority+0x30>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3b03      	subs	r3, #3
 80036f6:	e000      	b.n	80036fa <NVIC_EncodePriority+0x32>
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	401a      	ands	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003710:	f04f 31ff 	mov.w	r1, #4294967295
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	43d9      	mvns	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	4313      	orrs	r3, r2
         );
}
 8003722:	4618      	mov	r0, r3
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003740:	d301      	bcc.n	8003746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003742:	2301      	movs	r3, #1
 8003744:	e00f      	b.n	8003766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <SysTick_Config+0x40>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374e:	210f      	movs	r1, #15
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	f7ff ff8e 	bl	8003674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <SysTick_Config+0x40>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <SysTick_Config+0x40>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	e000e010 	.word	0xe000e010

08003774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff29 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003798:	f7ff ff40 	bl	800361c <__NVIC_GetPriorityGrouping>
 800379c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7ff ff90 	bl	80036c8 <NVIC_EncodePriority>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff5f 	bl	8003674 <__NVIC_SetPriority>
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff33 	bl	8003638 <__NVIC_EnableIRQ>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ffa4 	bl	8003730 <SysTick_Config>
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037fc:	f7fe fcdc 	bl	80021b8 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e316      	b.n	8003e3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a66      	ldr	r2, [pc, #408]	; (80039ac <HAL_DMA_Init+0x1b8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d04a      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a65      	ldr	r2, [pc, #404]	; (80039b0 <HAL_DMA_Init+0x1bc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d045      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <HAL_DMA_Init+0x1c0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d040      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a62      	ldr	r2, [pc, #392]	; (80039b8 <HAL_DMA_Init+0x1c4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d03b      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a60      	ldr	r2, [pc, #384]	; (80039bc <HAL_DMA_Init+0x1c8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d036      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a5f      	ldr	r2, [pc, #380]	; (80039c0 <HAL_DMA_Init+0x1cc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d031      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a5d      	ldr	r2, [pc, #372]	; (80039c4 <HAL_DMA_Init+0x1d0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02c      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a5c      	ldr	r2, [pc, #368]	; (80039c8 <HAL_DMA_Init+0x1d4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d027      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a5a      	ldr	r2, [pc, #360]	; (80039cc <HAL_DMA_Init+0x1d8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d022      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a59      	ldr	r2, [pc, #356]	; (80039d0 <HAL_DMA_Init+0x1dc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d01d      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a57      	ldr	r2, [pc, #348]	; (80039d4 <HAL_DMA_Init+0x1e0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a56      	ldr	r2, [pc, #344]	; (80039d8 <HAL_DMA_Init+0x1e4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a54      	ldr	r2, [pc, #336]	; (80039dc <HAL_DMA_Init+0x1e8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a53      	ldr	r2, [pc, #332]	; (80039e0 <HAL_DMA_Init+0x1ec>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a51      	ldr	r2, [pc, #324]	; (80039e4 <HAL_DMA_Init+0x1f0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_DMA_Init+0xb8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a50      	ldr	r2, [pc, #320]	; (80039e8 <HAL_DMA_Init+0x1f4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d101      	bne.n	80038b0 <HAL_DMA_Init+0xbc>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_DMA_Init+0xbe>
 80038b0:	2300      	movs	r3, #0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 813b 	beq.w	8003b2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a37      	ldr	r2, [pc, #220]	; (80039ac <HAL_DMA_Init+0x1b8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d04a      	beq.n	8003968 <HAL_DMA_Init+0x174>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a36      	ldr	r2, [pc, #216]	; (80039b0 <HAL_DMA_Init+0x1bc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d045      	beq.n	8003968 <HAL_DMA_Init+0x174>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a34      	ldr	r2, [pc, #208]	; (80039b4 <HAL_DMA_Init+0x1c0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d040      	beq.n	8003968 <HAL_DMA_Init+0x174>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a33      	ldr	r2, [pc, #204]	; (80039b8 <HAL_DMA_Init+0x1c4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d03b      	beq.n	8003968 <HAL_DMA_Init+0x174>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_DMA_Init+0x1c8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d036      	beq.n	8003968 <HAL_DMA_Init+0x174>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a30      	ldr	r2, [pc, #192]	; (80039c0 <HAL_DMA_Init+0x1cc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d031      	beq.n	8003968 <HAL_DMA_Init+0x174>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2e      	ldr	r2, [pc, #184]	; (80039c4 <HAL_DMA_Init+0x1d0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02c      	beq.n	8003968 <HAL_DMA_Init+0x174>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <HAL_DMA_Init+0x1d4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d027      	beq.n	8003968 <HAL_DMA_Init+0x174>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <HAL_DMA_Init+0x1d8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d022      	beq.n	8003968 <HAL_DMA_Init+0x174>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <HAL_DMA_Init+0x1dc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d01d      	beq.n	8003968 <HAL_DMA_Init+0x174>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <HAL_DMA_Init+0x1e0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d018      	beq.n	8003968 <HAL_DMA_Init+0x174>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <HAL_DMA_Init+0x1e4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <HAL_DMA_Init+0x174>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a25      	ldr	r2, [pc, #148]	; (80039dc <HAL_DMA_Init+0x1e8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00e      	beq.n	8003968 <HAL_DMA_Init+0x174>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <HAL_DMA_Init+0x1ec>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_DMA_Init+0x174>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_DMA_Init+0x1f0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_DMA_Init+0x174>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <HAL_DMA_Init+0x1f4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d108      	bne.n	800397a <HAL_DMA_Init+0x186>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e007      	b.n	800398a <HAL_DMA_Init+0x196>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800398a:	e02f      	b.n	80039ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800398c:	f7fe fc14 	bl	80021b8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b05      	cmp	r3, #5
 8003998:	d928      	bls.n	80039ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e246      	b.n	8003e3a <HAL_DMA_Init+0x646>
 80039ac:	40020010 	.word	0x40020010
 80039b0:	40020028 	.word	0x40020028
 80039b4:	40020040 	.word	0x40020040
 80039b8:	40020058 	.word	0x40020058
 80039bc:	40020070 	.word	0x40020070
 80039c0:	40020088 	.word	0x40020088
 80039c4:	400200a0 	.word	0x400200a0
 80039c8:	400200b8 	.word	0x400200b8
 80039cc:	40020410 	.word	0x40020410
 80039d0:	40020428 	.word	0x40020428
 80039d4:	40020440 	.word	0x40020440
 80039d8:	40020458 	.word	0x40020458
 80039dc:	40020470 	.word	0x40020470
 80039e0:	40020488 	.word	0x40020488
 80039e4:	400204a0 	.word	0x400204a0
 80039e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1c8      	bne.n	800398c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <HAL_DMA_Init+0x420>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d107      	bne.n	8003a50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a50:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <HAL_DMA_Init+0x424>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b71      	ldr	r3, [pc, #452]	; (8003c1c <HAL_DMA_Init+0x428>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5c:	d328      	bcc.n	8003ab0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b28      	cmp	r3, #40	; 0x28
 8003a64:	d903      	bls.n	8003a6e <HAL_DMA_Init+0x27a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a6c:	d917      	bls.n	8003a9e <HAL_DMA_Init+0x2aa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b3e      	cmp	r3, #62	; 0x3e
 8003a74:	d903      	bls.n	8003a7e <HAL_DMA_Init+0x28a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b42      	cmp	r3, #66	; 0x42
 8003a7c:	d90f      	bls.n	8003a9e <HAL_DMA_Init+0x2aa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b46      	cmp	r3, #70	; 0x46
 8003a84:	d903      	bls.n	8003a8e <HAL_DMA_Init+0x29a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b48      	cmp	r3, #72	; 0x48
 8003a8c:	d907      	bls.n	8003a9e <HAL_DMA_Init+0x2aa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b4e      	cmp	r3, #78	; 0x4e
 8003a94:	d905      	bls.n	8003aa2 <HAL_DMA_Init+0x2ae>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b52      	cmp	r3, #82	; 0x52
 8003a9c:	d801      	bhi.n	8003aa2 <HAL_DMA_Init+0x2ae>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_DMA_Init+0x2b0>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d117      	bne.n	8003b0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f002 f813 	bl	8005b18 <DMA_CheckFifoParam>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2240      	movs	r2, #64	; 0x40
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e197      	b.n	8003e3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f001 ff4e 	bl	80059b4 <DMA_CalcBaseAndBitshift>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	223f      	movs	r2, #63	; 0x3f
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	e0cd      	b.n	8003cca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a3b      	ldr	r2, [pc, #236]	; (8003c20 <HAL_DMA_Init+0x42c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <HAL_DMA_Init+0x38a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <HAL_DMA_Init+0x430>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01d      	beq.n	8003b7e <HAL_DMA_Init+0x38a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a38      	ldr	r2, [pc, #224]	; (8003c28 <HAL_DMA_Init+0x434>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_DMA_Init+0x38a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a36      	ldr	r2, [pc, #216]	; (8003c2c <HAL_DMA_Init+0x438>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_DMA_Init+0x38a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a35      	ldr	r2, [pc, #212]	; (8003c30 <HAL_DMA_Init+0x43c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_DMA_Init+0x38a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a33      	ldr	r2, [pc, #204]	; (8003c34 <HAL_DMA_Init+0x440>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_DMA_Init+0x38a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a32      	ldr	r2, [pc, #200]	; (8003c38 <HAL_DMA_Init+0x444>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_DMA_Init+0x38a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a30      	ldr	r2, [pc, #192]	; (8003c3c <HAL_DMA_Init+0x448>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_DMA_Init+0x38e>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_DMA_Init+0x390>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8097 	beq.w	8003cb8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <HAL_DMA_Init+0x42c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d021      	beq.n	8003bd8 <HAL_DMA_Init+0x3e4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a22      	ldr	r2, [pc, #136]	; (8003c24 <HAL_DMA_Init+0x430>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01c      	beq.n	8003bd8 <HAL_DMA_Init+0x3e4>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <HAL_DMA_Init+0x434>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d017      	beq.n	8003bd8 <HAL_DMA_Init+0x3e4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <HAL_DMA_Init+0x438>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d012      	beq.n	8003bd8 <HAL_DMA_Init+0x3e4>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <HAL_DMA_Init+0x43c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00d      	beq.n	8003bd8 <HAL_DMA_Init+0x3e4>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <HAL_DMA_Init+0x440>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d008      	beq.n	8003bd8 <HAL_DMA_Init+0x3e4>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1b      	ldr	r2, [pc, #108]	; (8003c38 <HAL_DMA_Init+0x444>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <HAL_DMA_Init+0x3e4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <HAL_DMA_Init+0x448>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_DMA_Init+0x44c>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d020      	beq.n	8003c44 <HAL_DMA_Init+0x450>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b80      	cmp	r3, #128	; 0x80
 8003c08:	d102      	bne.n	8003c10 <HAL_DMA_Init+0x41c>
 8003c0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c0e:	e01a      	b.n	8003c46 <HAL_DMA_Init+0x452>
 8003c10:	2300      	movs	r3, #0
 8003c12:	e018      	b.n	8003c46 <HAL_DMA_Init+0x452>
 8003c14:	fe10803f 	.word	0xfe10803f
 8003c18:	5c001000 	.word	0x5c001000
 8003c1c:	ffff0000 	.word	0xffff0000
 8003c20:	58025408 	.word	0x58025408
 8003c24:	5802541c 	.word	0x5802541c
 8003c28:	58025430 	.word	0x58025430
 8003c2c:	58025444 	.word	0x58025444
 8003c30:	58025458 	.word	0x58025458
 8003c34:	5802546c 	.word	0x5802546c
 8003c38:	58025480 	.word	0x58025480
 8003c3c:	58025494 	.word	0x58025494
 8003c40:	fffe000f 	.word	0xfffe000f
 8003c44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68d2      	ldr	r2, [r2, #12]
 8003c4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b6e      	ldr	r3, [pc, #440]	; (8003e44 <HAL_DMA_Init+0x650>)
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4a6e      	ldr	r2, [pc, #440]	; (8003e48 <HAL_DMA_Init+0x654>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	009a      	lsls	r2, r3, #2
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f001 fe89 	bl	80059b4 <DMA_CalcBaseAndBitshift>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2201      	movs	r2, #1
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e008      	b.n	8003cca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2240      	movs	r2, #64	; 0x40
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0b7      	b.n	8003e3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5f      	ldr	r2, [pc, #380]	; (8003e4c <HAL_DMA_Init+0x658>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d072      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a5d      	ldr	r2, [pc, #372]	; (8003e50 <HAL_DMA_Init+0x65c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d06d      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a5c      	ldr	r2, [pc, #368]	; (8003e54 <HAL_DMA_Init+0x660>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d068      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a5a      	ldr	r2, [pc, #360]	; (8003e58 <HAL_DMA_Init+0x664>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d063      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a59      	ldr	r2, [pc, #356]	; (8003e5c <HAL_DMA_Init+0x668>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d05e      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a57      	ldr	r2, [pc, #348]	; (8003e60 <HAL_DMA_Init+0x66c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d059      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a56      	ldr	r2, [pc, #344]	; (8003e64 <HAL_DMA_Init+0x670>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d054      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a54      	ldr	r2, [pc, #336]	; (8003e68 <HAL_DMA_Init+0x674>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04f      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a53      	ldr	r2, [pc, #332]	; (8003e6c <HAL_DMA_Init+0x678>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d04a      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a51      	ldr	r2, [pc, #324]	; (8003e70 <HAL_DMA_Init+0x67c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d045      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a50      	ldr	r2, [pc, #320]	; (8003e74 <HAL_DMA_Init+0x680>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d040      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a4e      	ldr	r2, [pc, #312]	; (8003e78 <HAL_DMA_Init+0x684>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d03b      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a4d      	ldr	r2, [pc, #308]	; (8003e7c <HAL_DMA_Init+0x688>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d036      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a4b      	ldr	r2, [pc, #300]	; (8003e80 <HAL_DMA_Init+0x68c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d031      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a4a      	ldr	r2, [pc, #296]	; (8003e84 <HAL_DMA_Init+0x690>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d02c      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a48      	ldr	r2, [pc, #288]	; (8003e88 <HAL_DMA_Init+0x694>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d027      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a47      	ldr	r2, [pc, #284]	; (8003e8c <HAL_DMA_Init+0x698>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a45      	ldr	r2, [pc, #276]	; (8003e90 <HAL_DMA_Init+0x69c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a44      	ldr	r2, [pc, #272]	; (8003e94 <HAL_DMA_Init+0x6a0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a42      	ldr	r2, [pc, #264]	; (8003e98 <HAL_DMA_Init+0x6a4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a41      	ldr	r2, [pc, #260]	; (8003e9c <HAL_DMA_Init+0x6a8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3f      	ldr	r2, [pc, #252]	; (8003ea0 <HAL_DMA_Init+0x6ac>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3e      	ldr	r2, [pc, #248]	; (8003ea4 <HAL_DMA_Init+0x6b0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_DMA_Init+0x5c6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3c      	ldr	r2, [pc, #240]	; (8003ea8 <HAL_DMA_Init+0x6b4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_DMA_Init+0x5ca>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_DMA_Init+0x5cc>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d032      	beq.n	8003e2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f001 ff23 	bl	8005c10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d102      	bne.n	8003dd8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <HAL_DMA_Init+0x624>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d80c      	bhi.n	8003e18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f001 ffa0 	bl	8005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	e008      	b.n	8003e2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	a7fdabf8 	.word	0xa7fdabf8
 8003e48:	cccccccd 	.word	0xcccccccd
 8003e4c:	40020010 	.word	0x40020010
 8003e50:	40020028 	.word	0x40020028
 8003e54:	40020040 	.word	0x40020040
 8003e58:	40020058 	.word	0x40020058
 8003e5c:	40020070 	.word	0x40020070
 8003e60:	40020088 	.word	0x40020088
 8003e64:	400200a0 	.word	0x400200a0
 8003e68:	400200b8 	.word	0x400200b8
 8003e6c:	40020410 	.word	0x40020410
 8003e70:	40020428 	.word	0x40020428
 8003e74:	40020440 	.word	0x40020440
 8003e78:	40020458 	.word	0x40020458
 8003e7c:	40020470 	.word	0x40020470
 8003e80:	40020488 	.word	0x40020488
 8003e84:	400204a0 	.word	0x400204a0
 8003e88:	400204b8 	.word	0x400204b8
 8003e8c:	58025408 	.word	0x58025408
 8003e90:	5802541c 	.word	0x5802541c
 8003e94:	58025430 	.word	0x58025430
 8003e98:	58025444 	.word	0x58025444
 8003e9c:	58025458 	.word	0x58025458
 8003ea0:	5802546c 	.word	0x5802546c
 8003ea4:	58025480 	.word	0x58025480
 8003ea8:	58025494 	.word	0x58025494

08003eac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e226      	b.n	8004316 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_Start_IT+0x2a>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e21f      	b.n	8004316 <HAL_DMA_Start_IT+0x46a>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	f040 820a 	bne.w	8004300 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a68      	ldr	r2, [pc, #416]	; (80040a0 <HAL_DMA_Start_IT+0x1f4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d04a      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a66      	ldr	r2, [pc, #408]	; (80040a4 <HAL_DMA_Start_IT+0x1f8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d045      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a65      	ldr	r2, [pc, #404]	; (80040a8 <HAL_DMA_Start_IT+0x1fc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d040      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a63      	ldr	r2, [pc, #396]	; (80040ac <HAL_DMA_Start_IT+0x200>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d03b      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a62      	ldr	r2, [pc, #392]	; (80040b0 <HAL_DMA_Start_IT+0x204>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d036      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a60      	ldr	r2, [pc, #384]	; (80040b4 <HAL_DMA_Start_IT+0x208>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d031      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a5f      	ldr	r2, [pc, #380]	; (80040b8 <HAL_DMA_Start_IT+0x20c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d02c      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5d      	ldr	r2, [pc, #372]	; (80040bc <HAL_DMA_Start_IT+0x210>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d027      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a5c      	ldr	r2, [pc, #368]	; (80040c0 <HAL_DMA_Start_IT+0x214>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5a      	ldr	r2, [pc, #360]	; (80040c4 <HAL_DMA_Start_IT+0x218>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01d      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a59      	ldr	r2, [pc, #356]	; (80040c8 <HAL_DMA_Start_IT+0x21c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a57      	ldr	r2, [pc, #348]	; (80040cc <HAL_DMA_Start_IT+0x220>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a56      	ldr	r2, [pc, #344]	; (80040d0 <HAL_DMA_Start_IT+0x224>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a54      	ldr	r2, [pc, #336]	; (80040d4 <HAL_DMA_Start_IT+0x228>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a53      	ldr	r2, [pc, #332]	; (80040d8 <HAL_DMA_Start_IT+0x22c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_Start_IT+0xee>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a51      	ldr	r2, [pc, #324]	; (80040dc <HAL_DMA_Start_IT+0x230>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d108      	bne.n	8003fac <HAL_DMA_Start_IT+0x100>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e007      	b.n	8003fbc <HAL_DMA_Start_IT+0x110>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f001 fb4a 	bl	800565c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a34      	ldr	r2, [pc, #208]	; (80040a0 <HAL_DMA_Start_IT+0x1f4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d04a      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a33      	ldr	r2, [pc, #204]	; (80040a4 <HAL_DMA_Start_IT+0x1f8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d045      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a31      	ldr	r2, [pc, #196]	; (80040a8 <HAL_DMA_Start_IT+0x1fc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d040      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a30      	ldr	r2, [pc, #192]	; (80040ac <HAL_DMA_Start_IT+0x200>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d03b      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	; (80040b0 <HAL_DMA_Start_IT+0x204>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d036      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2d      	ldr	r2, [pc, #180]	; (80040b4 <HAL_DMA_Start_IT+0x208>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d031      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2b      	ldr	r2, [pc, #172]	; (80040b8 <HAL_DMA_Start_IT+0x20c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02c      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <HAL_DMA_Start_IT+0x210>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d027      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a28      	ldr	r2, [pc, #160]	; (80040c0 <HAL_DMA_Start_IT+0x214>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d022      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a27      	ldr	r2, [pc, #156]	; (80040c4 <HAL_DMA_Start_IT+0x218>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d01d      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <HAL_DMA_Start_IT+0x21c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d018      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a24      	ldr	r2, [pc, #144]	; (80040cc <HAL_DMA_Start_IT+0x220>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <HAL_DMA_Start_IT+0x224>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00e      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <HAL_DMA_Start_IT+0x228>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <HAL_DMA_Start_IT+0x22c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_DMA_Start_IT+0x1bc>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <HAL_DMA_Start_IT+0x230>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_DMA_Start_IT+0x1c0>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_DMA_Start_IT+0x1c2>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d036      	beq.n	80040e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 021e 	bic.w	r2, r3, #30
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0216 	orr.w	r2, r2, #22
 8004084:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d03e      	beq.n	800410c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0208 	orr.w	r2, r2, #8
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e035      	b.n	800410c <HAL_DMA_Start_IT+0x260>
 80040a0:	40020010 	.word	0x40020010
 80040a4:	40020028 	.word	0x40020028
 80040a8:	40020040 	.word	0x40020040
 80040ac:	40020058 	.word	0x40020058
 80040b0:	40020070 	.word	0x40020070
 80040b4:	40020088 	.word	0x40020088
 80040b8:	400200a0 	.word	0x400200a0
 80040bc:	400200b8 	.word	0x400200b8
 80040c0:	40020410 	.word	0x40020410
 80040c4:	40020428 	.word	0x40020428
 80040c8:	40020440 	.word	0x40020440
 80040cc:	40020458 	.word	0x40020458
 80040d0:	40020470 	.word	0x40020470
 80040d4:	40020488 	.word	0x40020488
 80040d8:	400204a0 	.word	0x400204a0
 80040dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 020e 	bic.w	r2, r3, #14
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 020a 	orr.w	r2, r2, #10
 80040f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0204 	orr.w	r2, r2, #4
 800410a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a83      	ldr	r2, [pc, #524]	; (8004320 <HAL_DMA_Start_IT+0x474>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d072      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a82      	ldr	r2, [pc, #520]	; (8004324 <HAL_DMA_Start_IT+0x478>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d06d      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a80      	ldr	r2, [pc, #512]	; (8004328 <HAL_DMA_Start_IT+0x47c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d068      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7f      	ldr	r2, [pc, #508]	; (800432c <HAL_DMA_Start_IT+0x480>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d063      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a7d      	ldr	r2, [pc, #500]	; (8004330 <HAL_DMA_Start_IT+0x484>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d05e      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a7c      	ldr	r2, [pc, #496]	; (8004334 <HAL_DMA_Start_IT+0x488>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d059      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a7a      	ldr	r2, [pc, #488]	; (8004338 <HAL_DMA_Start_IT+0x48c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d054      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a79      	ldr	r2, [pc, #484]	; (800433c <HAL_DMA_Start_IT+0x490>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d04f      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a77      	ldr	r2, [pc, #476]	; (8004340 <HAL_DMA_Start_IT+0x494>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d04a      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a76      	ldr	r2, [pc, #472]	; (8004344 <HAL_DMA_Start_IT+0x498>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d045      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a74      	ldr	r2, [pc, #464]	; (8004348 <HAL_DMA_Start_IT+0x49c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d040      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a73      	ldr	r2, [pc, #460]	; (800434c <HAL_DMA_Start_IT+0x4a0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d03b      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a71      	ldr	r2, [pc, #452]	; (8004350 <HAL_DMA_Start_IT+0x4a4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d036      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a70      	ldr	r2, [pc, #448]	; (8004354 <HAL_DMA_Start_IT+0x4a8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d031      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6e      	ldr	r2, [pc, #440]	; (8004358 <HAL_DMA_Start_IT+0x4ac>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d02c      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6d      	ldr	r2, [pc, #436]	; (800435c <HAL_DMA_Start_IT+0x4b0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d027      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a6b      	ldr	r2, [pc, #428]	; (8004360 <HAL_DMA_Start_IT+0x4b4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d022      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a6a      	ldr	r2, [pc, #424]	; (8004364 <HAL_DMA_Start_IT+0x4b8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d01d      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a68      	ldr	r2, [pc, #416]	; (8004368 <HAL_DMA_Start_IT+0x4bc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a67      	ldr	r2, [pc, #412]	; (800436c <HAL_DMA_Start_IT+0x4c0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a65      	ldr	r2, [pc, #404]	; (8004370 <HAL_DMA_Start_IT+0x4c4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00e      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a64      	ldr	r2, [pc, #400]	; (8004374 <HAL_DMA_Start_IT+0x4c8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a62      	ldr	r2, [pc, #392]	; (8004378 <HAL_DMA_Start_IT+0x4cc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_DMA_Start_IT+0x350>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a61      	ldr	r2, [pc, #388]	; (800437c <HAL_DMA_Start_IT+0x4d0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <HAL_DMA_Start_IT+0x354>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_DMA_Start_IT+0x356>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01a      	beq.n	800423c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004222:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a37      	ldr	r2, [pc, #220]	; (8004320 <HAL_DMA_Start_IT+0x474>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d04a      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a36      	ldr	r2, [pc, #216]	; (8004324 <HAL_DMA_Start_IT+0x478>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d045      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a34      	ldr	r2, [pc, #208]	; (8004328 <HAL_DMA_Start_IT+0x47c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d040      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a33      	ldr	r2, [pc, #204]	; (800432c <HAL_DMA_Start_IT+0x480>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d03b      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a31      	ldr	r2, [pc, #196]	; (8004330 <HAL_DMA_Start_IT+0x484>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d036      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a30      	ldr	r2, [pc, #192]	; (8004334 <HAL_DMA_Start_IT+0x488>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d031      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2e      	ldr	r2, [pc, #184]	; (8004338 <HAL_DMA_Start_IT+0x48c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02c      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2d      	ldr	r2, [pc, #180]	; (800433c <HAL_DMA_Start_IT+0x490>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d027      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2b      	ldr	r2, [pc, #172]	; (8004340 <HAL_DMA_Start_IT+0x494>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d022      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <HAL_DMA_Start_IT+0x498>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d01d      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a28      	ldr	r2, [pc, #160]	; (8004348 <HAL_DMA_Start_IT+0x49c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a27      	ldr	r2, [pc, #156]	; (800434c <HAL_DMA_Start_IT+0x4a0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a25      	ldr	r2, [pc, #148]	; (8004350 <HAL_DMA_Start_IT+0x4a4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a24      	ldr	r2, [pc, #144]	; (8004354 <HAL_DMA_Start_IT+0x4a8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a22      	ldr	r2, [pc, #136]	; (8004358 <HAL_DMA_Start_IT+0x4ac>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_DMA_Start_IT+0x430>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a21      	ldr	r2, [pc, #132]	; (800435c <HAL_DMA_Start_IT+0x4b0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d108      	bne.n	80042ee <HAL_DMA_Start_IT+0x442>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e012      	b.n	8004314 <HAL_DMA_Start_IT+0x468>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e009      	b.n	8004314 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40020010 	.word	0x40020010
 8004324:	40020028 	.word	0x40020028
 8004328:	40020040 	.word	0x40020040
 800432c:	40020058 	.word	0x40020058
 8004330:	40020070 	.word	0x40020070
 8004334:	40020088 	.word	0x40020088
 8004338:	400200a0 	.word	0x400200a0
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	40020440 	.word	0x40020440
 800434c:	40020458 	.word	0x40020458
 8004350:	40020470 	.word	0x40020470
 8004354:	40020488 	.word	0x40020488
 8004358:	400204a0 	.word	0x400204a0
 800435c:	400204b8 	.word	0x400204b8
 8004360:	58025408 	.word	0x58025408
 8004364:	5802541c 	.word	0x5802541c
 8004368:	58025430 	.word	0x58025430
 800436c:	58025444 	.word	0x58025444
 8004370:	58025458 	.word	0x58025458
 8004374:	5802546c 	.word	0x5802546c
 8004378:	58025480 	.word	0x58025480
 800437c:	58025494 	.word	0x58025494

08004380 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e205      	b.n	800479e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d004      	beq.n	80043a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e1fa      	b.n	800479e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a8c      	ldr	r2, [pc, #560]	; (80045e0 <HAL_DMA_Abort_IT+0x260>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d04a      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a8b      	ldr	r2, [pc, #556]	; (80045e4 <HAL_DMA_Abort_IT+0x264>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d045      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a89      	ldr	r2, [pc, #548]	; (80045e8 <HAL_DMA_Abort_IT+0x268>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d040      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a88      	ldr	r2, [pc, #544]	; (80045ec <HAL_DMA_Abort_IT+0x26c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d03b      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a86      	ldr	r2, [pc, #536]	; (80045f0 <HAL_DMA_Abort_IT+0x270>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d036      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a85      	ldr	r2, [pc, #532]	; (80045f4 <HAL_DMA_Abort_IT+0x274>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d031      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a83      	ldr	r2, [pc, #524]	; (80045f8 <HAL_DMA_Abort_IT+0x278>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02c      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a82      	ldr	r2, [pc, #520]	; (80045fc <HAL_DMA_Abort_IT+0x27c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d027      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a80      	ldr	r2, [pc, #512]	; (8004600 <HAL_DMA_Abort_IT+0x280>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7f      	ldr	r2, [pc, #508]	; (8004604 <HAL_DMA_Abort_IT+0x284>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a7d      	ldr	r2, [pc, #500]	; (8004608 <HAL_DMA_Abort_IT+0x288>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7c      	ldr	r2, [pc, #496]	; (800460c <HAL_DMA_Abort_IT+0x28c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a7a      	ldr	r2, [pc, #488]	; (8004610 <HAL_DMA_Abort_IT+0x290>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a79      	ldr	r2, [pc, #484]	; (8004614 <HAL_DMA_Abort_IT+0x294>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a77      	ldr	r2, [pc, #476]	; (8004618 <HAL_DMA_Abort_IT+0x298>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_DMA_Abort_IT+0xc8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a76      	ldr	r2, [pc, #472]	; (800461c <HAL_DMA_Abort_IT+0x29c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_DMA_Abort_IT+0xcc>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_DMA_Abort_IT+0xce>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d065      	beq.n	800451e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2204      	movs	r2, #4
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a60      	ldr	r2, [pc, #384]	; (80045e0 <HAL_DMA_Abort_IT+0x260>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d04a      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a5e      	ldr	r2, [pc, #376]	; (80045e4 <HAL_DMA_Abort_IT+0x264>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d045      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a5d      	ldr	r2, [pc, #372]	; (80045e8 <HAL_DMA_Abort_IT+0x268>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d040      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5b      	ldr	r2, [pc, #364]	; (80045ec <HAL_DMA_Abort_IT+0x26c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d03b      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a5a      	ldr	r2, [pc, #360]	; (80045f0 <HAL_DMA_Abort_IT+0x270>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d036      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <HAL_DMA_Abort_IT+0x274>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d031      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a57      	ldr	r2, [pc, #348]	; (80045f8 <HAL_DMA_Abort_IT+0x278>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d02c      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a55      	ldr	r2, [pc, #340]	; (80045fc <HAL_DMA_Abort_IT+0x27c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d027      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a54      	ldr	r2, [pc, #336]	; (8004600 <HAL_DMA_Abort_IT+0x280>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d022      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_DMA_Abort_IT+0x284>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01d      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a51      	ldr	r2, [pc, #324]	; (8004608 <HAL_DMA_Abort_IT+0x288>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d018      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a4f      	ldr	r2, [pc, #316]	; (800460c <HAL_DMA_Abort_IT+0x28c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a4e      	ldr	r2, [pc, #312]	; (8004610 <HAL_DMA_Abort_IT+0x290>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00e      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a4c      	ldr	r2, [pc, #304]	; (8004614 <HAL_DMA_Abort_IT+0x294>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4b      	ldr	r2, [pc, #300]	; (8004618 <HAL_DMA_Abort_IT+0x298>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_DMA_Abort_IT+0x17a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a49      	ldr	r2, [pc, #292]	; (800461c <HAL_DMA_Abort_IT+0x29c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d108      	bne.n	800450c <HAL_DMA_Abort_IT+0x18c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e147      	b.n	800479c <HAL_DMA_Abort_IT+0x41c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e13e      	b.n	800479c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 020e 	bic.w	r2, r2, #14
 800452c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2b      	ldr	r2, [pc, #172]	; (80045e0 <HAL_DMA_Abort_IT+0x260>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d04a      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a29      	ldr	r2, [pc, #164]	; (80045e4 <HAL_DMA_Abort_IT+0x264>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d045      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a28      	ldr	r2, [pc, #160]	; (80045e8 <HAL_DMA_Abort_IT+0x268>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d040      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <HAL_DMA_Abort_IT+0x26c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d03b      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a25      	ldr	r2, [pc, #148]	; (80045f0 <HAL_DMA_Abort_IT+0x270>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d036      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a23      	ldr	r2, [pc, #140]	; (80045f4 <HAL_DMA_Abort_IT+0x274>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d031      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <HAL_DMA_Abort_IT+0x278>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02c      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a20      	ldr	r2, [pc, #128]	; (80045fc <HAL_DMA_Abort_IT+0x27c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d027      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_DMA_Abort_IT+0x280>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_DMA_Abort_IT+0x284>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <HAL_DMA_Abort_IT+0x288>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d018      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	; (800460c <HAL_DMA_Abort_IT+0x28c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_DMA_Abort_IT+0x290>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <HAL_DMA_Abort_IT+0x294>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <HAL_DMA_Abort_IT+0x298>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_DMA_Abort_IT+0x24e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <HAL_DMA_Abort_IT+0x29c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d128      	bne.n	8004620 <HAL_DMA_Abort_IT+0x2a0>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e027      	b.n	8004630 <HAL_DMA_Abort_IT+0x2b0>
 80045e0:	40020010 	.word	0x40020010
 80045e4:	40020028 	.word	0x40020028
 80045e8:	40020040 	.word	0x40020040
 80045ec:	40020058 	.word	0x40020058
 80045f0:	40020070 	.word	0x40020070
 80045f4:	40020088 	.word	0x40020088
 80045f8:	400200a0 	.word	0x400200a0
 80045fc:	400200b8 	.word	0x400200b8
 8004600:	40020410 	.word	0x40020410
 8004604:	40020428 	.word	0x40020428
 8004608:	40020440 	.word	0x40020440
 800460c:	40020458 	.word	0x40020458
 8004610:	40020470 	.word	0x40020470
 8004614:	40020488 	.word	0x40020488
 8004618:	400204a0 	.word	0x400204a0
 800461c:	400204b8 	.word	0x400204b8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a5c      	ldr	r2, [pc, #368]	; (80047a8 <HAL_DMA_Abort_IT+0x428>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d072      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5b      	ldr	r2, [pc, #364]	; (80047ac <HAL_DMA_Abort_IT+0x42c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d06d      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a59      	ldr	r2, [pc, #356]	; (80047b0 <HAL_DMA_Abort_IT+0x430>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d068      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a58      	ldr	r2, [pc, #352]	; (80047b4 <HAL_DMA_Abort_IT+0x434>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d063      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a56      	ldr	r2, [pc, #344]	; (80047b8 <HAL_DMA_Abort_IT+0x438>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d05e      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a55      	ldr	r2, [pc, #340]	; (80047bc <HAL_DMA_Abort_IT+0x43c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d059      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a53      	ldr	r2, [pc, #332]	; (80047c0 <HAL_DMA_Abort_IT+0x440>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d054      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a52      	ldr	r2, [pc, #328]	; (80047c4 <HAL_DMA_Abort_IT+0x444>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04f      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a50      	ldr	r2, [pc, #320]	; (80047c8 <HAL_DMA_Abort_IT+0x448>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d04a      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a4f      	ldr	r2, [pc, #316]	; (80047cc <HAL_DMA_Abort_IT+0x44c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d045      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a4d      	ldr	r2, [pc, #308]	; (80047d0 <HAL_DMA_Abort_IT+0x450>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d040      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a4c      	ldr	r2, [pc, #304]	; (80047d4 <HAL_DMA_Abort_IT+0x454>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d03b      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a4a      	ldr	r2, [pc, #296]	; (80047d8 <HAL_DMA_Abort_IT+0x458>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d036      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a49      	ldr	r2, [pc, #292]	; (80047dc <HAL_DMA_Abort_IT+0x45c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d031      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a47      	ldr	r2, [pc, #284]	; (80047e0 <HAL_DMA_Abort_IT+0x460>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02c      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a46      	ldr	r2, [pc, #280]	; (80047e4 <HAL_DMA_Abort_IT+0x464>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d027      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a44      	ldr	r2, [pc, #272]	; (80047e8 <HAL_DMA_Abort_IT+0x468>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d022      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a43      	ldr	r2, [pc, #268]	; (80047ec <HAL_DMA_Abort_IT+0x46c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01d      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a41      	ldr	r2, [pc, #260]	; (80047f0 <HAL_DMA_Abort_IT+0x470>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d018      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a40      	ldr	r2, [pc, #256]	; (80047f4 <HAL_DMA_Abort_IT+0x474>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d013      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a3e      	ldr	r2, [pc, #248]	; (80047f8 <HAL_DMA_Abort_IT+0x478>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00e      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <HAL_DMA_Abort_IT+0x47c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a3b      	ldr	r2, [pc, #236]	; (8004800 <HAL_DMA_Abort_IT+0x480>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_DMA_Abort_IT+0x3a0>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3a      	ldr	r2, [pc, #232]	; (8004804 <HAL_DMA_Abort_IT+0x484>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d101      	bne.n	8004724 <HAL_DMA_Abort_IT+0x3a4>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_DMA_Abort_IT+0x3a6>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d028      	beq.n	800477c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004758:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800476c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004770:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800477a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40020010 	.word	0x40020010
 80047ac:	40020028 	.word	0x40020028
 80047b0:	40020040 	.word	0x40020040
 80047b4:	40020058 	.word	0x40020058
 80047b8:	40020070 	.word	0x40020070
 80047bc:	40020088 	.word	0x40020088
 80047c0:	400200a0 	.word	0x400200a0
 80047c4:	400200b8 	.word	0x400200b8
 80047c8:	40020410 	.word	0x40020410
 80047cc:	40020428 	.word	0x40020428
 80047d0:	40020440 	.word	0x40020440
 80047d4:	40020458 	.word	0x40020458
 80047d8:	40020470 	.word	0x40020470
 80047dc:	40020488 	.word	0x40020488
 80047e0:	400204a0 	.word	0x400204a0
 80047e4:	400204b8 	.word	0x400204b8
 80047e8:	58025408 	.word	0x58025408
 80047ec:	5802541c 	.word	0x5802541c
 80047f0:	58025430 	.word	0x58025430
 80047f4:	58025444 	.word	0x58025444
 80047f8:	58025458 	.word	0x58025458
 80047fc:	5802546c 	.word	0x5802546c
 8004800:	58025480 	.word	0x58025480
 8004804:	58025494 	.word	0x58025494

08004808 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004814:	4b67      	ldr	r3, [pc, #412]	; (80049b4 <HAL_DMA_IRQHandler+0x1ac>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a67      	ldr	r2, [pc, #412]	; (80049b8 <HAL_DMA_IRQHandler+0x1b0>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	0a9b      	lsrs	r3, r3, #10
 8004820:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5f      	ldr	r2, [pc, #380]	; (80049bc <HAL_DMA_IRQHandler+0x1b4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d04a      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5d      	ldr	r2, [pc, #372]	; (80049c0 <HAL_DMA_IRQHandler+0x1b8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d045      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5c      	ldr	r2, [pc, #368]	; (80049c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d040      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5a      	ldr	r2, [pc, #360]	; (80049c8 <HAL_DMA_IRQHandler+0x1c0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d03b      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a59      	ldr	r2, [pc, #356]	; (80049cc <HAL_DMA_IRQHandler+0x1c4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d036      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d031      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a56      	ldr	r2, [pc, #344]	; (80049d4 <HAL_DMA_IRQHandler+0x1cc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d02c      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a54      	ldr	r2, [pc, #336]	; (80049d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d027      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a53      	ldr	r2, [pc, #332]	; (80049dc <HAL_DMA_IRQHandler+0x1d4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d022      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a51      	ldr	r2, [pc, #324]	; (80049e0 <HAL_DMA_IRQHandler+0x1d8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01d      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a50      	ldr	r2, [pc, #320]	; (80049e4 <HAL_DMA_IRQHandler+0x1dc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d018      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a4e      	ldr	r2, [pc, #312]	; (80049e8 <HAL_DMA_IRQHandler+0x1e0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a4d      	ldr	r2, [pc, #308]	; (80049ec <HAL_DMA_IRQHandler+0x1e4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a4b      	ldr	r2, [pc, #300]	; (80049f0 <HAL_DMA_IRQHandler+0x1e8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a4a      	ldr	r2, [pc, #296]	; (80049f4 <HAL_DMA_IRQHandler+0x1ec>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_DMA_IRQHandler+0xd2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a48      	ldr	r2, [pc, #288]	; (80049f8 <HAL_DMA_IRQHandler+0x1f0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_DMA_IRQHandler+0xd6>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_DMA_IRQHandler+0xd8>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 842b 	beq.w	800513c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2208      	movs	r2, #8
 80048f0:	409a      	lsls	r2, r3
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80a2 	beq.w	8004a40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2e      	ldr	r2, [pc, #184]	; (80049bc <HAL_DMA_IRQHandler+0x1b4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d04a      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <HAL_DMA_IRQHandler+0x1b8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d045      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2b      	ldr	r2, [pc, #172]	; (80049c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d040      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2a      	ldr	r2, [pc, #168]	; (80049c8 <HAL_DMA_IRQHandler+0x1c0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d03b      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a28      	ldr	r2, [pc, #160]	; (80049cc <HAL_DMA_IRQHandler+0x1c4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d036      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a27      	ldr	r2, [pc, #156]	; (80049d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d031      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a25      	ldr	r2, [pc, #148]	; (80049d4 <HAL_DMA_IRQHandler+0x1cc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d02c      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d027      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a22      	ldr	r2, [pc, #136]	; (80049dc <HAL_DMA_IRQHandler+0x1d4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d022      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <HAL_DMA_IRQHandler+0x1d8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d01d      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_DMA_IRQHandler+0x1dc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d018      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <HAL_DMA_IRQHandler+0x1e0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <HAL_DMA_IRQHandler+0x1e4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00e      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <HAL_DMA_IRQHandler+0x1e8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <HAL_DMA_IRQHandler+0x1ec>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_DMA_IRQHandler+0x194>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_DMA_IRQHandler+0x1f0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d12f      	bne.n	80049fc <HAL_DMA_IRQHandler+0x1f4>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bf14      	ite	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	2300      	moveq	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	e02e      	b.n	8004a10 <HAL_DMA_IRQHandler+0x208>
 80049b2:	bf00      	nop
 80049b4:	24000028 	.word	0x24000028
 80049b8:	1b4e81b5 	.word	0x1b4e81b5
 80049bc:	40020010 	.word	0x40020010
 80049c0:	40020028 	.word	0x40020028
 80049c4:	40020040 	.word	0x40020040
 80049c8:	40020058 	.word	0x40020058
 80049cc:	40020070 	.word	0x40020070
 80049d0:	40020088 	.word	0x40020088
 80049d4:	400200a0 	.word	0x400200a0
 80049d8:	400200b8 	.word	0x400200b8
 80049dc:	40020410 	.word	0x40020410
 80049e0:	40020428 	.word	0x40020428
 80049e4:	40020440 	.word	0x40020440
 80049e8:	40020458 	.word	0x40020458
 80049ec:	40020470 	.word	0x40020470
 80049f0:	40020488 	.word	0x40020488
 80049f4:	400204a0 	.word	0x400204a0
 80049f8:	400204b8 	.word	0x400204b8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d015      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0204 	bic.w	r2, r2, #4
 8004a22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	f043 0201 	orr.w	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d06e      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a69      	ldr	r2, [pc, #420]	; (8004c00 <HAL_DMA_IRQHandler+0x3f8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d04a      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a67      	ldr	r2, [pc, #412]	; (8004c04 <HAL_DMA_IRQHandler+0x3fc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d045      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a66      	ldr	r2, [pc, #408]	; (8004c08 <HAL_DMA_IRQHandler+0x400>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d040      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a64      	ldr	r2, [pc, #400]	; (8004c0c <HAL_DMA_IRQHandler+0x404>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d03b      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a63      	ldr	r2, [pc, #396]	; (8004c10 <HAL_DMA_IRQHandler+0x408>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d036      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a61      	ldr	r2, [pc, #388]	; (8004c14 <HAL_DMA_IRQHandler+0x40c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d031      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a60      	ldr	r2, [pc, #384]	; (8004c18 <HAL_DMA_IRQHandler+0x410>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d02c      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a5e      	ldr	r2, [pc, #376]	; (8004c1c <HAL_DMA_IRQHandler+0x414>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d027      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a5d      	ldr	r2, [pc, #372]	; (8004c20 <HAL_DMA_IRQHandler+0x418>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_DMA_IRQHandler+0x41c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01d      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a5a      	ldr	r2, [pc, #360]	; (8004c28 <HAL_DMA_IRQHandler+0x420>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a58      	ldr	r2, [pc, #352]	; (8004c2c <HAL_DMA_IRQHandler+0x424>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a57      	ldr	r2, [pc, #348]	; (8004c30 <HAL_DMA_IRQHandler+0x428>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a55      	ldr	r2, [pc, #340]	; (8004c34 <HAL_DMA_IRQHandler+0x42c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a54      	ldr	r2, [pc, #336]	; (8004c38 <HAL_DMA_IRQHandler+0x430>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x2ee>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a52      	ldr	r2, [pc, #328]	; (8004c3c <HAL_DMA_IRQHandler+0x434>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10a      	bne.n	8004b0c <HAL_DMA_IRQHandler+0x304>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e003      	b.n	8004b14 <HAL_DMA_IRQHandler+0x30c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	2201      	movs	r2, #1
 8004b22:	409a      	lsls	r2, r3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f043 0202 	orr.w	r2, r3, #2
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 808f 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2c      	ldr	r2, [pc, #176]	; (8004c00 <HAL_DMA_IRQHandler+0x3f8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2a      	ldr	r2, [pc, #168]	; (8004c04 <HAL_DMA_IRQHandler+0x3fc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <HAL_DMA_IRQHandler+0x400>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <HAL_DMA_IRQHandler+0x404>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a26      	ldr	r2, [pc, #152]	; (8004c10 <HAL_DMA_IRQHandler+0x408>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a24      	ldr	r2, [pc, #144]	; (8004c14 <HAL_DMA_IRQHandler+0x40c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a23      	ldr	r2, [pc, #140]	; (8004c18 <HAL_DMA_IRQHandler+0x410>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a21      	ldr	r2, [pc, #132]	; (8004c1c <HAL_DMA_IRQHandler+0x414>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <HAL_DMA_IRQHandler+0x418>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <HAL_DMA_IRQHandler+0x41c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_DMA_IRQHandler+0x420>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <HAL_DMA_IRQHandler+0x424>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <HAL_DMA_IRQHandler+0x428>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <HAL_DMA_IRQHandler+0x42c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <HAL_DMA_IRQHandler+0x430>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_IRQHandler+0x3e2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <HAL_DMA_IRQHandler+0x434>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d12a      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x438>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e023      	b.n	8004c48 <HAL_DMA_IRQHandler+0x440>
 8004c00:	40020010 	.word	0x40020010
 8004c04:	40020028 	.word	0x40020028
 8004c08:	40020040 	.word	0x40020040
 8004c0c:	40020058 	.word	0x40020058
 8004c10:	40020070 	.word	0x40020070
 8004c14:	40020088 	.word	0x40020088
 8004c18:	400200a0 	.word	0x400200a0
 8004c1c:	400200b8 	.word	0x400200b8
 8004c20:	40020410 	.word	0x40020410
 8004c24:	40020428 	.word	0x40020428
 8004c28:	40020440 	.word	0x40020440
 8004c2c:	40020458 	.word	0x40020458
 8004c30:	40020470 	.word	0x40020470
 8004c34:	40020488 	.word	0x40020488
 8004c38:	400204a0 	.word	0x400204a0
 8004c3c:	400204b8 	.word	0x400204b8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00d      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	2204      	movs	r2, #4
 8004c56:	409a      	lsls	r2, r3
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c60:	f043 0204 	orr.w	r2, r3, #4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	2210      	movs	r2, #16
 8004c72:	409a      	lsls	r2, r3
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80a6 	beq.w	8004dca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a85      	ldr	r2, [pc, #532]	; (8004e98 <HAL_DMA_IRQHandler+0x690>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04a      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a83      	ldr	r2, [pc, #524]	; (8004e9c <HAL_DMA_IRQHandler+0x694>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d045      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a82      	ldr	r2, [pc, #520]	; (8004ea0 <HAL_DMA_IRQHandler+0x698>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a80      	ldr	r2, [pc, #512]	; (8004ea4 <HAL_DMA_IRQHandler+0x69c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a7f      	ldr	r2, [pc, #508]	; (8004ea8 <HAL_DMA_IRQHandler+0x6a0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d036      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a7d      	ldr	r2, [pc, #500]	; (8004eac <HAL_DMA_IRQHandler+0x6a4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7c      	ldr	r2, [pc, #496]	; (8004eb0 <HAL_DMA_IRQHandler+0x6a8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d02c      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a7a      	ldr	r2, [pc, #488]	; (8004eb4 <HAL_DMA_IRQHandler+0x6ac>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d027      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a79      	ldr	r2, [pc, #484]	; (8004eb8 <HAL_DMA_IRQHandler+0x6b0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a77      	ldr	r2, [pc, #476]	; (8004ebc <HAL_DMA_IRQHandler+0x6b4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a76      	ldr	r2, [pc, #472]	; (8004ec0 <HAL_DMA_IRQHandler+0x6b8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a74      	ldr	r2, [pc, #464]	; (8004ec4 <HAL_DMA_IRQHandler+0x6bc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a73      	ldr	r2, [pc, #460]	; (8004ec8 <HAL_DMA_IRQHandler+0x6c0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a71      	ldr	r2, [pc, #452]	; (8004ecc <HAL_DMA_IRQHandler+0x6c4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <HAL_DMA_IRQHandler+0x6c8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x516>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	; (8004ed4 <HAL_DMA_IRQHandler+0x6cc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10a      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x52c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e009      	b.n	8004d48 <HAL_DMA_IRQHandler+0x540>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bf14      	ite	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	2300      	moveq	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d03e      	beq.n	8004dca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2210      	movs	r2, #16
 8004d56:	409a      	lsls	r2, r3
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d108      	bne.n	8004d8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d024      	beq.n	8004dca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
 8004d88:	e01f      	b.n	8004dca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01b      	beq.n	8004dca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
 8004d9a:	e016      	b.n	8004dca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d107      	bne.n	8004dba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0208 	bic.w	r2, r2, #8
 8004db8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8110 	beq.w	8005000 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a2c      	ldr	r2, [pc, #176]	; (8004e98 <HAL_DMA_IRQHandler+0x690>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d04a      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <HAL_DMA_IRQHandler+0x694>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d045      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a29      	ldr	r2, [pc, #164]	; (8004ea0 <HAL_DMA_IRQHandler+0x698>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d040      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a28      	ldr	r2, [pc, #160]	; (8004ea4 <HAL_DMA_IRQHandler+0x69c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d03b      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a26      	ldr	r2, [pc, #152]	; (8004ea8 <HAL_DMA_IRQHandler+0x6a0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d036      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a25      	ldr	r2, [pc, #148]	; (8004eac <HAL_DMA_IRQHandler+0x6a4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d031      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <HAL_DMA_IRQHandler+0x6a8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d02c      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <HAL_DMA_IRQHandler+0x6ac>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d027      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <HAL_DMA_IRQHandler+0x6b0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d022      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <HAL_DMA_IRQHandler+0x6b4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d01d      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <HAL_DMA_IRQHandler+0x6b8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d018      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <HAL_DMA_IRQHandler+0x6bc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d013      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <HAL_DMA_IRQHandler+0x6c0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00e      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <HAL_DMA_IRQHandler+0x6c4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d009      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <HAL_DMA_IRQHandler+0x6c8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x678>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <HAL_DMA_IRQHandler+0x6cc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d12b      	bne.n	8004ed8 <HAL_DMA_IRQHandler+0x6d0>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bf14      	ite	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	2300      	moveq	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	e02a      	b.n	8004eec <HAL_DMA_IRQHandler+0x6e4>
 8004e96:	bf00      	nop
 8004e98:	40020010 	.word	0x40020010
 8004e9c:	40020028 	.word	0x40020028
 8004ea0:	40020040 	.word	0x40020040
 8004ea4:	40020058 	.word	0x40020058
 8004ea8:	40020070 	.word	0x40020070
 8004eac:	40020088 	.word	0x40020088
 8004eb0:	400200a0 	.word	0x400200a0
 8004eb4:	400200b8 	.word	0x400200b8
 8004eb8:	40020410 	.word	0x40020410
 8004ebc:	40020428 	.word	0x40020428
 8004ec0:	40020440 	.word	0x40020440
 8004ec4:	40020458 	.word	0x40020458
 8004ec8:	40020470 	.word	0x40020470
 8004ecc:	40020488 	.word	0x40020488
 8004ed0:	400204a0 	.word	0x400204a0
 8004ed4:	400204b8 	.word	0x400204b8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bf14      	ite	ne
 8004ee6:	2301      	movne	r3, #1
 8004ee8:	2300      	moveq	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8087 	beq.w	8005000 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2220      	movs	r2, #32
 8004efc:	409a      	lsls	r2, r3
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d139      	bne.n	8004f82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0216 	bic.w	r2, r2, #22
 8004f1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d103      	bne.n	8004f3e <HAL_DMA_IRQHandler+0x736>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0208 	bic.w	r2, r2, #8
 8004f4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	223f      	movs	r2, #63	; 0x3f
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 834a 	beq.w	800560c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
          }
          return;
 8004f80:	e344      	b.n	800560c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d018      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d108      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02c      	beq.n	8005000 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	4798      	blx	r3
 8004fae:	e027      	b.n	8005000 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d023      	beq.n	8005000 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
 8004fc0:	e01e      	b.n	8005000 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10f      	bne.n	8004ff0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0210 	bic.w	r2, r2, #16
 8004fde:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8306 	beq.w	8005616 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8088 	beq.w	8005128 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2204      	movs	r2, #4
 800501c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a7a      	ldr	r2, [pc, #488]	; (8005210 <HAL_DMA_IRQHandler+0xa08>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d04a      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a79      	ldr	r2, [pc, #484]	; (8005214 <HAL_DMA_IRQHandler+0xa0c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d045      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a77      	ldr	r2, [pc, #476]	; (8005218 <HAL_DMA_IRQHandler+0xa10>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d040      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a76      	ldr	r2, [pc, #472]	; (800521c <HAL_DMA_IRQHandler+0xa14>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d03b      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a74      	ldr	r2, [pc, #464]	; (8005220 <HAL_DMA_IRQHandler+0xa18>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d036      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a73      	ldr	r2, [pc, #460]	; (8005224 <HAL_DMA_IRQHandler+0xa1c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d031      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a71      	ldr	r2, [pc, #452]	; (8005228 <HAL_DMA_IRQHandler+0xa20>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d02c      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a70      	ldr	r2, [pc, #448]	; (800522c <HAL_DMA_IRQHandler+0xa24>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d027      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a6e      	ldr	r2, [pc, #440]	; (8005230 <HAL_DMA_IRQHandler+0xa28>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6d      	ldr	r2, [pc, #436]	; (8005234 <HAL_DMA_IRQHandler+0xa2c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d01d      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a6b      	ldr	r2, [pc, #428]	; (8005238 <HAL_DMA_IRQHandler+0xa30>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a6a      	ldr	r2, [pc, #424]	; (800523c <HAL_DMA_IRQHandler+0xa34>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a68      	ldr	r2, [pc, #416]	; (8005240 <HAL_DMA_IRQHandler+0xa38>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a67      	ldr	r2, [pc, #412]	; (8005244 <HAL_DMA_IRQHandler+0xa3c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a65      	ldr	r2, [pc, #404]	; (8005248 <HAL_DMA_IRQHandler+0xa40>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x8b8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a64      	ldr	r2, [pc, #400]	; (800524c <HAL_DMA_IRQHandler+0xa44>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d108      	bne.n	80050d2 <HAL_DMA_IRQHandler+0x8ca>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e007      	b.n	80050e2 <HAL_DMA_IRQHandler+0x8da>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d307      	bcc.n	80050fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f2      	bne.n	80050e2 <HAL_DMA_IRQHandler+0x8da>
 80050fc:	e000      	b.n	8005100 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80050fe:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2203      	movs	r2, #3
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800511e:	e003      	b.n	8005128 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8272 	beq.w	8005616 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	4798      	blx	r3
 800513a:	e26c      	b.n	8005616 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a43      	ldr	r2, [pc, #268]	; (8005250 <HAL_DMA_IRQHandler+0xa48>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d022      	beq.n	800518c <HAL_DMA_IRQHandler+0x984>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a42      	ldr	r2, [pc, #264]	; (8005254 <HAL_DMA_IRQHandler+0xa4c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d01d      	beq.n	800518c <HAL_DMA_IRQHandler+0x984>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a40      	ldr	r2, [pc, #256]	; (8005258 <HAL_DMA_IRQHandler+0xa50>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_DMA_IRQHandler+0x984>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a3f      	ldr	r2, [pc, #252]	; (800525c <HAL_DMA_IRQHandler+0xa54>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <HAL_DMA_IRQHandler+0x984>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3d      	ldr	r2, [pc, #244]	; (8005260 <HAL_DMA_IRQHandler+0xa58>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_DMA_IRQHandler+0x984>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3c      	ldr	r2, [pc, #240]	; (8005264 <HAL_DMA_IRQHandler+0xa5c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_DMA_IRQHandler+0x984>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3a      	ldr	r2, [pc, #232]	; (8005268 <HAL_DMA_IRQHandler+0xa60>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_DMA_IRQHandler+0x984>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a39      	ldr	r2, [pc, #228]	; (800526c <HAL_DMA_IRQHandler+0xa64>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d101      	bne.n	8005190 <HAL_DMA_IRQHandler+0x988>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <HAL_DMA_IRQHandler+0x98a>
 8005190:	2300      	movs	r3, #0
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 823f 	beq.w	8005616 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2204      	movs	r2, #4
 80051aa:	409a      	lsls	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80cd 	beq.w	8005350 <HAL_DMA_IRQHandler+0xb48>
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80c7 	beq.w	8005350 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2204      	movs	r2, #4
 80051cc:	409a      	lsls	r2, r3
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d049      	beq.n	8005270 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8210 	beq.w	8005610 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051f8:	e20a      	b.n	8005610 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8206 	beq.w	8005610 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800520c:	e200      	b.n	8005610 <HAL_DMA_IRQHandler+0xe08>
 800520e:	bf00      	nop
 8005210:	40020010 	.word	0x40020010
 8005214:	40020028 	.word	0x40020028
 8005218:	40020040 	.word	0x40020040
 800521c:	40020058 	.word	0x40020058
 8005220:	40020070 	.word	0x40020070
 8005224:	40020088 	.word	0x40020088
 8005228:	400200a0 	.word	0x400200a0
 800522c:	400200b8 	.word	0x400200b8
 8005230:	40020410 	.word	0x40020410
 8005234:	40020428 	.word	0x40020428
 8005238:	40020440 	.word	0x40020440
 800523c:	40020458 	.word	0x40020458
 8005240:	40020470 	.word	0x40020470
 8005244:	40020488 	.word	0x40020488
 8005248:	400204a0 	.word	0x400204a0
 800524c:	400204b8 	.word	0x400204b8
 8005250:	58025408 	.word	0x58025408
 8005254:	5802541c 	.word	0x5802541c
 8005258:	58025430 	.word	0x58025430
 800525c:	58025444 	.word	0x58025444
 8005260:	58025458 	.word	0x58025458
 8005264:	5802546c 	.word	0x5802546c
 8005268:	58025480 	.word	0x58025480
 800526c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d160      	bne.n	800533c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a8c      	ldr	r2, [pc, #560]	; (80054b0 <HAL_DMA_IRQHandler+0xca8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d04a      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a8a      	ldr	r2, [pc, #552]	; (80054b4 <HAL_DMA_IRQHandler+0xcac>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d045      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a89      	ldr	r2, [pc, #548]	; (80054b8 <HAL_DMA_IRQHandler+0xcb0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d040      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a87      	ldr	r2, [pc, #540]	; (80054bc <HAL_DMA_IRQHandler+0xcb4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03b      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a86      	ldr	r2, [pc, #536]	; (80054c0 <HAL_DMA_IRQHandler+0xcb8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d036      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a84      	ldr	r2, [pc, #528]	; (80054c4 <HAL_DMA_IRQHandler+0xcbc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a83      	ldr	r2, [pc, #524]	; (80054c8 <HAL_DMA_IRQHandler+0xcc0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d02c      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a81      	ldr	r2, [pc, #516]	; (80054cc <HAL_DMA_IRQHandler+0xcc4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a80      	ldr	r2, [pc, #512]	; (80054d0 <HAL_DMA_IRQHandler+0xcc8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a7e      	ldr	r2, [pc, #504]	; (80054d4 <HAL_DMA_IRQHandler+0xccc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a7d      	ldr	r2, [pc, #500]	; (80054d8 <HAL_DMA_IRQHandler+0xcd0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a7b      	ldr	r2, [pc, #492]	; (80054dc <HAL_DMA_IRQHandler+0xcd4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a7a      	ldr	r2, [pc, #488]	; (80054e0 <HAL_DMA_IRQHandler+0xcd8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a78      	ldr	r2, [pc, #480]	; (80054e4 <HAL_DMA_IRQHandler+0xcdc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a77      	ldr	r2, [pc, #476]	; (80054e8 <HAL_DMA_IRQHandler+0xce0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_DMA_IRQHandler+0xb12>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a75      	ldr	r2, [pc, #468]	; (80054ec <HAL_DMA_IRQHandler+0xce4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <HAL_DMA_IRQHandler+0xb24>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0208 	bic.w	r2, r2, #8
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e007      	b.n	800533c <HAL_DMA_IRQHandler+0xb34>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0204 	bic.w	r2, r2, #4
 800533a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8165 	beq.w	8005610 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800534e:	e15f      	b.n	8005610 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	2202      	movs	r2, #2
 800535a:	409a      	lsls	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80c5 	beq.w	80054f0 <HAL_DMA_IRQHandler+0xce8>
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80bf 	beq.w	80054f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	2202      	movs	r2, #2
 800537c:	409a      	lsls	r2, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d018      	beq.n	80053be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 813a 	beq.w	8005614 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053a8:	e134      	b.n	8005614 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8130 	beq.w	8005614 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053bc:	e12a      	b.n	8005614 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d168      	bne.n	800549a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a38      	ldr	r2, [pc, #224]	; (80054b0 <HAL_DMA_IRQHandler+0xca8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d04a      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a37      	ldr	r2, [pc, #220]	; (80054b4 <HAL_DMA_IRQHandler+0xcac>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d045      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a35      	ldr	r2, [pc, #212]	; (80054b8 <HAL_DMA_IRQHandler+0xcb0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d040      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a34      	ldr	r2, [pc, #208]	; (80054bc <HAL_DMA_IRQHandler+0xcb4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d03b      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a32      	ldr	r2, [pc, #200]	; (80054c0 <HAL_DMA_IRQHandler+0xcb8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d036      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a31      	ldr	r2, [pc, #196]	; (80054c4 <HAL_DMA_IRQHandler+0xcbc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d031      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2f      	ldr	r2, [pc, #188]	; (80054c8 <HAL_DMA_IRQHandler+0xcc0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d02c      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <HAL_DMA_IRQHandler+0xcc4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d027      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2c      	ldr	r2, [pc, #176]	; (80054d0 <HAL_DMA_IRQHandler+0xcc8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d022      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2b      	ldr	r2, [pc, #172]	; (80054d4 <HAL_DMA_IRQHandler+0xccc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d01d      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a29      	ldr	r2, [pc, #164]	; (80054d8 <HAL_DMA_IRQHandler+0xcd0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d018      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a28      	ldr	r2, [pc, #160]	; (80054dc <HAL_DMA_IRQHandler+0xcd4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <HAL_DMA_IRQHandler+0xcd8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a25      	ldr	r2, [pc, #148]	; (80054e4 <HAL_DMA_IRQHandler+0xcdc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a23      	ldr	r2, [pc, #140]	; (80054e8 <HAL_DMA_IRQHandler+0xce0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_DMA_IRQHandler+0xc60>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a22      	ldr	r2, [pc, #136]	; (80054ec <HAL_DMA_IRQHandler+0xce4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d108      	bne.n	800547a <HAL_DMA_IRQHandler+0xc72>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0214 	bic.w	r2, r2, #20
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e007      	b.n	800548a <HAL_DMA_IRQHandler+0xc82>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 020a 	bic.w	r2, r2, #10
 8005488:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80b8 	beq.w	8005614 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ac:	e0b2      	b.n	8005614 <HAL_DMA_IRQHandler+0xe0c>
 80054ae:	bf00      	nop
 80054b0:	40020010 	.word	0x40020010
 80054b4:	40020028 	.word	0x40020028
 80054b8:	40020040 	.word	0x40020040
 80054bc:	40020058 	.word	0x40020058
 80054c0:	40020070 	.word	0x40020070
 80054c4:	40020088 	.word	0x40020088
 80054c8:	400200a0 	.word	0x400200a0
 80054cc:	400200b8 	.word	0x400200b8
 80054d0:	40020410 	.word	0x40020410
 80054d4:	40020428 	.word	0x40020428
 80054d8:	40020440 	.word	0x40020440
 80054dc:	40020458 	.word	0x40020458
 80054e0:	40020470 	.word	0x40020470
 80054e4:	40020488 	.word	0x40020488
 80054e8:	400204a0 	.word	0x400204a0
 80054ec:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	2208      	movs	r2, #8
 80054fa:	409a      	lsls	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8088 	beq.w	8005616 <HAL_DMA_IRQHandler+0xe0e>
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8082 	beq.w	8005616 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a41      	ldr	r2, [pc, #260]	; (800561c <HAL_DMA_IRQHandler+0xe14>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d04a      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a3f      	ldr	r2, [pc, #252]	; (8005620 <HAL_DMA_IRQHandler+0xe18>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d045      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a3e      	ldr	r2, [pc, #248]	; (8005624 <HAL_DMA_IRQHandler+0xe1c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d040      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3c      	ldr	r2, [pc, #240]	; (8005628 <HAL_DMA_IRQHandler+0xe20>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d03b      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a3b      	ldr	r2, [pc, #236]	; (800562c <HAL_DMA_IRQHandler+0xe24>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d036      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a39      	ldr	r2, [pc, #228]	; (8005630 <HAL_DMA_IRQHandler+0xe28>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d031      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a38      	ldr	r2, [pc, #224]	; (8005634 <HAL_DMA_IRQHandler+0xe2c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d02c      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a36      	ldr	r2, [pc, #216]	; (8005638 <HAL_DMA_IRQHandler+0xe30>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d027      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a35      	ldr	r2, [pc, #212]	; (800563c <HAL_DMA_IRQHandler+0xe34>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d022      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a33      	ldr	r2, [pc, #204]	; (8005640 <HAL_DMA_IRQHandler+0xe38>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01d      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a32      	ldr	r2, [pc, #200]	; (8005644 <HAL_DMA_IRQHandler+0xe3c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d018      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a30      	ldr	r2, [pc, #192]	; (8005648 <HAL_DMA_IRQHandler+0xe40>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2f      	ldr	r2, [pc, #188]	; (800564c <HAL_DMA_IRQHandler+0xe44>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <HAL_DMA_IRQHandler+0xe48>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <HAL_DMA_IRQHandler+0xe4c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_DMA_IRQHandler+0xdaa>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2a      	ldr	r2, [pc, #168]	; (8005658 <HAL_DMA_IRQHandler+0xe50>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d108      	bne.n	80055c4 <HAL_DMA_IRQHandler+0xdbc>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 021c 	bic.w	r2, r2, #28
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e007      	b.n	80055d4 <HAL_DMA_IRQHandler+0xdcc>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 020e 	bic.w	r2, r2, #14
 80055d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2201      	movs	r2, #1
 80055de:	409a      	lsls	r2, r3
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
 800560a:	e004      	b.n	8005616 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800560c:	bf00      	nop
 800560e:	e002      	b.n	8005616 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005610:	bf00      	nop
 8005612:	e000      	b.n	8005616 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005614:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005616:	3728      	adds	r7, #40	; 0x28
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8

0800565c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005674:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a84      	ldr	r2, [pc, #528]	; (800588c <DMA_SetConfig+0x230>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d072      	beq.n	8005766 <DMA_SetConfig+0x10a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a82      	ldr	r2, [pc, #520]	; (8005890 <DMA_SetConfig+0x234>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d06d      	beq.n	8005766 <DMA_SetConfig+0x10a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a81      	ldr	r2, [pc, #516]	; (8005894 <DMA_SetConfig+0x238>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d068      	beq.n	8005766 <DMA_SetConfig+0x10a>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a7f      	ldr	r2, [pc, #508]	; (8005898 <DMA_SetConfig+0x23c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d063      	beq.n	8005766 <DMA_SetConfig+0x10a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a7e      	ldr	r2, [pc, #504]	; (800589c <DMA_SetConfig+0x240>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d05e      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a7c      	ldr	r2, [pc, #496]	; (80058a0 <DMA_SetConfig+0x244>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d059      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a7b      	ldr	r2, [pc, #492]	; (80058a4 <DMA_SetConfig+0x248>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d054      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a79      	ldr	r2, [pc, #484]	; (80058a8 <DMA_SetConfig+0x24c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04f      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a78      	ldr	r2, [pc, #480]	; (80058ac <DMA_SetConfig+0x250>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d04a      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a76      	ldr	r2, [pc, #472]	; (80058b0 <DMA_SetConfig+0x254>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d045      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a75      	ldr	r2, [pc, #468]	; (80058b4 <DMA_SetConfig+0x258>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d040      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a73      	ldr	r2, [pc, #460]	; (80058b8 <DMA_SetConfig+0x25c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d03b      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a72      	ldr	r2, [pc, #456]	; (80058bc <DMA_SetConfig+0x260>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d036      	beq.n	8005766 <DMA_SetConfig+0x10a>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a70      	ldr	r2, [pc, #448]	; (80058c0 <DMA_SetConfig+0x264>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <DMA_SetConfig+0x10a>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a6f      	ldr	r2, [pc, #444]	; (80058c4 <DMA_SetConfig+0x268>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d02c      	beq.n	8005766 <DMA_SetConfig+0x10a>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a6d      	ldr	r2, [pc, #436]	; (80058c8 <DMA_SetConfig+0x26c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d027      	beq.n	8005766 <DMA_SetConfig+0x10a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a6c      	ldr	r2, [pc, #432]	; (80058cc <DMA_SetConfig+0x270>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <DMA_SetConfig+0x10a>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a6a      	ldr	r2, [pc, #424]	; (80058d0 <DMA_SetConfig+0x274>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <DMA_SetConfig+0x10a>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a69      	ldr	r2, [pc, #420]	; (80058d4 <DMA_SetConfig+0x278>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <DMA_SetConfig+0x10a>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a67      	ldr	r2, [pc, #412]	; (80058d8 <DMA_SetConfig+0x27c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <DMA_SetConfig+0x10a>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a66      	ldr	r2, [pc, #408]	; (80058dc <DMA_SetConfig+0x280>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <DMA_SetConfig+0x10a>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a64      	ldr	r2, [pc, #400]	; (80058e0 <DMA_SetConfig+0x284>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <DMA_SetConfig+0x10a>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a63      	ldr	r2, [pc, #396]	; (80058e4 <DMA_SetConfig+0x288>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <DMA_SetConfig+0x10a>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a61      	ldr	r2, [pc, #388]	; (80058e8 <DMA_SetConfig+0x28c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d101      	bne.n	800576a <DMA_SetConfig+0x10e>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <DMA_SetConfig+0x110>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005778:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800578a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a3e      	ldr	r2, [pc, #248]	; (800588c <DMA_SetConfig+0x230>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d04a      	beq.n	800582c <DMA_SetConfig+0x1d0>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3d      	ldr	r2, [pc, #244]	; (8005890 <DMA_SetConfig+0x234>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d045      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a3b      	ldr	r2, [pc, #236]	; (8005894 <DMA_SetConfig+0x238>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d040      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a3a      	ldr	r2, [pc, #232]	; (8005898 <DMA_SetConfig+0x23c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d03b      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a38      	ldr	r2, [pc, #224]	; (800589c <DMA_SetConfig+0x240>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d036      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a37      	ldr	r2, [pc, #220]	; (80058a0 <DMA_SetConfig+0x244>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d031      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a35      	ldr	r2, [pc, #212]	; (80058a4 <DMA_SetConfig+0x248>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d02c      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a34      	ldr	r2, [pc, #208]	; (80058a8 <DMA_SetConfig+0x24c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d027      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a32      	ldr	r2, [pc, #200]	; (80058ac <DMA_SetConfig+0x250>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d022      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a31      	ldr	r2, [pc, #196]	; (80058b0 <DMA_SetConfig+0x254>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d01d      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2f      	ldr	r2, [pc, #188]	; (80058b4 <DMA_SetConfig+0x258>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d018      	beq.n	800582c <DMA_SetConfig+0x1d0>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2e      	ldr	r2, [pc, #184]	; (80058b8 <DMA_SetConfig+0x25c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d013      	beq.n	800582c <DMA_SetConfig+0x1d0>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2c      	ldr	r2, [pc, #176]	; (80058bc <DMA_SetConfig+0x260>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00e      	beq.n	800582c <DMA_SetConfig+0x1d0>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2b      	ldr	r2, [pc, #172]	; (80058c0 <DMA_SetConfig+0x264>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d009      	beq.n	800582c <DMA_SetConfig+0x1d0>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <DMA_SetConfig+0x268>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <DMA_SetConfig+0x1d0>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a28      	ldr	r2, [pc, #160]	; (80058c8 <DMA_SetConfig+0x26c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d101      	bne.n	8005830 <DMA_SetConfig+0x1d4>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <DMA_SetConfig+0x1d6>
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d05a      	beq.n	80058ec <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	223f      	movs	r2, #63	; 0x3f
 8005840:	409a      	lsls	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005854:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d108      	bne.n	8005878 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005876:	e087      	b.n	8005988 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	60da      	str	r2, [r3, #12]
}
 8005888:	e07e      	b.n	8005988 <DMA_SetConfig+0x32c>
 800588a:	bf00      	nop
 800588c:	40020010 	.word	0x40020010
 8005890:	40020028 	.word	0x40020028
 8005894:	40020040 	.word	0x40020040
 8005898:	40020058 	.word	0x40020058
 800589c:	40020070 	.word	0x40020070
 80058a0:	40020088 	.word	0x40020088
 80058a4:	400200a0 	.word	0x400200a0
 80058a8:	400200b8 	.word	0x400200b8
 80058ac:	40020410 	.word	0x40020410
 80058b0:	40020428 	.word	0x40020428
 80058b4:	40020440 	.word	0x40020440
 80058b8:	40020458 	.word	0x40020458
 80058bc:	40020470 	.word	0x40020470
 80058c0:	40020488 	.word	0x40020488
 80058c4:	400204a0 	.word	0x400204a0
 80058c8:	400204b8 	.word	0x400204b8
 80058cc:	58025408 	.word	0x58025408
 80058d0:	5802541c 	.word	0x5802541c
 80058d4:	58025430 	.word	0x58025430
 80058d8:	58025444 	.word	0x58025444
 80058dc:	58025458 	.word	0x58025458
 80058e0:	5802546c 	.word	0x5802546c
 80058e4:	58025480 	.word	0x58025480
 80058e8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a28      	ldr	r2, [pc, #160]	; (8005994 <DMA_SetConfig+0x338>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d022      	beq.n	800593c <DMA_SetConfig+0x2e0>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a27      	ldr	r2, [pc, #156]	; (8005998 <DMA_SetConfig+0x33c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d01d      	beq.n	800593c <DMA_SetConfig+0x2e0>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a25      	ldr	r2, [pc, #148]	; (800599c <DMA_SetConfig+0x340>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <DMA_SetConfig+0x2e0>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a24      	ldr	r2, [pc, #144]	; (80059a0 <DMA_SetConfig+0x344>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <DMA_SetConfig+0x2e0>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <DMA_SetConfig+0x348>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <DMA_SetConfig+0x2e0>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <DMA_SetConfig+0x34c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <DMA_SetConfig+0x2e0>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <DMA_SetConfig+0x350>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <DMA_SetConfig+0x2e0>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <DMA_SetConfig+0x354>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <DMA_SetConfig+0x2e4>
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <DMA_SetConfig+0x2e6>
 8005940:	2300      	movs	r3, #0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d020      	beq.n	8005988 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2201      	movs	r2, #1
 8005950:	409a      	lsls	r2, r3
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d108      	bne.n	8005978 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	60da      	str	r2, [r3, #12]
}
 8005976:	e007      	b.n	8005988 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	58025408 	.word	0x58025408
 8005998:	5802541c 	.word	0x5802541c
 800599c:	58025430 	.word	0x58025430
 80059a0:	58025444 	.word	0x58025444
 80059a4:	58025458 	.word	0x58025458
 80059a8:	5802546c 	.word	0x5802546c
 80059ac:	58025480 	.word	0x58025480
 80059b0:	58025494 	.word	0x58025494

080059b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a42      	ldr	r2, [pc, #264]	; (8005acc <DMA_CalcBaseAndBitshift+0x118>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d04a      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a41      	ldr	r2, [pc, #260]	; (8005ad0 <DMA_CalcBaseAndBitshift+0x11c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d045      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3f      	ldr	r2, [pc, #252]	; (8005ad4 <DMA_CalcBaseAndBitshift+0x120>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d040      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3e      	ldr	r2, [pc, #248]	; (8005ad8 <DMA_CalcBaseAndBitshift+0x124>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d03b      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a3c      	ldr	r2, [pc, #240]	; (8005adc <DMA_CalcBaseAndBitshift+0x128>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d036      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3b      	ldr	r2, [pc, #236]	; (8005ae0 <DMA_CalcBaseAndBitshift+0x12c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d031      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a39      	ldr	r2, [pc, #228]	; (8005ae4 <DMA_CalcBaseAndBitshift+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d02c      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a38      	ldr	r2, [pc, #224]	; (8005ae8 <DMA_CalcBaseAndBitshift+0x134>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d027      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a36      	ldr	r2, [pc, #216]	; (8005aec <DMA_CalcBaseAndBitshift+0x138>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d022      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a35      	ldr	r2, [pc, #212]	; (8005af0 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d01d      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a33      	ldr	r2, [pc, #204]	; (8005af4 <DMA_CalcBaseAndBitshift+0x140>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d018      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a32      	ldr	r2, [pc, #200]	; (8005af8 <DMA_CalcBaseAndBitshift+0x144>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d013      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a30      	ldr	r2, [pc, #192]	; (8005afc <DMA_CalcBaseAndBitshift+0x148>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00e      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d009      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <DMA_CalcBaseAndBitshift+0x150>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <DMA_CalcBaseAndBitshift+0xa8>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <DMA_CalcBaseAndBitshift+0x154>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <DMA_CalcBaseAndBitshift+0xac>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <DMA_CalcBaseAndBitshift+0xae>
 8005a60:	2300      	movs	r3, #0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d024      	beq.n	8005ab0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	3b10      	subs	r3, #16
 8005a6e:	4a27      	ldr	r2, [pc, #156]	; (8005b0c <DMA_CalcBaseAndBitshift+0x158>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a80:	5cd3      	ldrb	r3, [r2, r3]
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d908      	bls.n	8005aa0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <DMA_CalcBaseAndBitshift+0x160>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	659a      	str	r2, [r3, #88]	; 0x58
 8005a9e:	e00d      	b.n	8005abc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <DMA_CalcBaseAndBitshift+0x160>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6593      	str	r3, [r2, #88]	; 0x58
 8005aae:	e005      	b.n	8005abc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40020010 	.word	0x40020010
 8005ad0:	40020028 	.word	0x40020028
 8005ad4:	40020040 	.word	0x40020040
 8005ad8:	40020058 	.word	0x40020058
 8005adc:	40020070 	.word	0x40020070
 8005ae0:	40020088 	.word	0x40020088
 8005ae4:	400200a0 	.word	0x400200a0
 8005ae8:	400200b8 	.word	0x400200b8
 8005aec:	40020410 	.word	0x40020410
 8005af0:	40020428 	.word	0x40020428
 8005af4:	40020440 	.word	0x40020440
 8005af8:	40020458 	.word	0x40020458
 8005afc:	40020470 	.word	0x40020470
 8005b00:	40020488 	.word	0x40020488
 8005b04:	400204a0 	.word	0x400204a0
 8005b08:	400204b8 	.word	0x400204b8
 8005b0c:	aaaaaaab 	.word	0xaaaaaaab
 8005b10:	0800d034 	.word	0x0800d034
 8005b14:	fffffc00 	.word	0xfffffc00

08005b18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d120      	bne.n	8005b6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d858      	bhi.n	8005be6 <DMA_CheckFifoParam+0xce>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <DMA_CheckFifoParam+0x24>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b4d 	.word	0x08005b4d
 8005b40:	08005b5f 	.word	0x08005b5f
 8005b44:	08005b4d 	.word	0x08005b4d
 8005b48:	08005be7 	.word	0x08005be7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d048      	beq.n	8005bea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b5c:	e045      	b.n	8005bea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b66:	d142      	bne.n	8005bee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b6c:	e03f      	b.n	8005bee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b76:	d123      	bne.n	8005bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d838      	bhi.n	8005bf2 <DMA_CheckFifoParam+0xda>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <DMA_CheckFifoParam+0x70>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005b9f 	.word	0x08005b9f
 8005b90:	08005b99 	.word	0x08005b99
 8005b94:	08005bb1 	.word	0x08005bb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b9c:	e030      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d025      	beq.n	8005bf6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bae:	e022      	b.n	8005bf6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bb8:	d11f      	bne.n	8005bfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bbe:	e01c      	b.n	8005bfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d902      	bls.n	8005bce <DMA_CheckFifoParam+0xb6>
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d003      	beq.n	8005bd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005bcc:	e018      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bd2:	e015      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
    break;
 8005be4:	e00b      	b.n	8005bfe <DMA_CheckFifoParam+0xe6>
        break;
 8005be6:	bf00      	nop
 8005be8:	e00a      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
        break;
 8005bea:	bf00      	nop
 8005bec:	e008      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
        break;
 8005bee:	bf00      	nop
 8005bf0:	e006      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
        break;
 8005bf2:	bf00      	nop
 8005bf4:	e004      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
        break;
 8005bf6:	bf00      	nop
 8005bf8:	e002      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
        break;
 8005bfa:	bf00      	nop
 8005bfc:	e000      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
    break;
 8005bfe:	bf00      	nop
    }
  }

  return status;
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop

08005c10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a38      	ldr	r2, [pc, #224]	; (8005d04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a36      	ldr	r2, [pc, #216]	; (8005d08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01d      	beq.n	8005c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a35      	ldr	r2, [pc, #212]	; (8005d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a33      	ldr	r2, [pc, #204]	; (8005d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a32      	ldr	r2, [pc, #200]	; (8005d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a30      	ldr	r2, [pc, #192]	; (8005d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2f      	ldr	r2, [pc, #188]	; (8005d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2d      	ldr	r2, [pc, #180]	; (8005d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01a      	beq.n	8005cae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	3b08      	subs	r3, #8
 8005c80:	4a28      	ldr	r2, [pc, #160]	; (8005d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005cac:	e024      	b.n	8005cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	3b10      	subs	r3, #16
 8005cb6:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d806      	bhi.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d902      	bls.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	461a      	mov	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ce8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 031f 	and.w	r3, r3, #31
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cf8:	bf00      	nop
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	58025408 	.word	0x58025408
 8005d08:	5802541c 	.word	0x5802541c
 8005d0c:	58025430 	.word	0x58025430
 8005d10:	58025444 	.word	0x58025444
 8005d14:	58025458 	.word	0x58025458
 8005d18:	5802546c 	.word	0x5802546c
 8005d1c:	58025480 	.word	0x58025480
 8005d20:	58025494 	.word	0x58025494
 8005d24:	cccccccd 	.word	0xcccccccd
 8005d28:	16009600 	.word	0x16009600
 8005d2c:	58025880 	.word	0x58025880
 8005d30:	aaaaaaab 	.word	0xaaaaaaab
 8005d34:	400204b8 	.word	0x400204b8
 8005d38:	4002040f 	.word	0x4002040f
 8005d3c:	10008200 	.word	0x10008200
 8005d40:	40020880 	.word	0x40020880

08005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d04a      	beq.n	8005df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d847      	bhi.n	8005df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a24      	ldr	r2, [pc, #144]	; (8005e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a21      	ldr	r2, [pc, #132]	; (8005e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d101      	bne.n	8005db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4b17      	ldr	r3, [pc, #92]	; (8005e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005dcc:	671a      	str	r2, [r3, #112]	; 0x70
 8005dce:	e009      	b.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005de2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	2201      	movs	r2, #1
 8005dea:	409a      	lsls	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	58025408 	.word	0x58025408
 8005e00:	5802541c 	.word	0x5802541c
 8005e04:	58025430 	.word	0x58025430
 8005e08:	58025444 	.word	0x58025444
 8005e0c:	58025458 	.word	0x58025458
 8005e10:	5802546c 	.word	0x5802546c
 8005e14:	58025480 	.word	0x58025480
 8005e18:	58025494 	.word	0x58025494
 8005e1c:	1600963f 	.word	0x1600963f
 8005e20:	58025940 	.word	0x58025940
 8005e24:	1000823f 	.word	0x1000823f
 8005e28:	40020940 	.word	0x40020940

08005e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b089      	sub	sp, #36	; 0x24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e3a:	4b89      	ldr	r3, [pc, #548]	; (8006060 <HAL_GPIO_Init+0x234>)
 8005e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e3e:	e194      	b.n	800616a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	2101      	movs	r1, #1
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8186 	beq.w	8006164 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d00b      	beq.n	8005e78 <HAL_GPIO_Init+0x4c>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d007      	beq.n	8005e78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e6c:	2b11      	cmp	r3, #17
 8005e6e:	d003      	beq.n	8005e78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b12      	cmp	r3, #18
 8005e76:	d130      	bne.n	8005eda <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	2203      	movs	r2, #3
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eae:	2201      	movs	r2, #1
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f003 0201 	and.w	r2, r3, #1
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d003      	beq.n	8005f1a <HAL_GPIO_Init+0xee>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b12      	cmp	r3, #18
 8005f18:	d123      	bne.n	8005f62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	08da      	lsrs	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3208      	adds	r2, #8
 8005f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	220f      	movs	r2, #15
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	43db      	mvns	r3, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	08da      	lsrs	r2, r3, #3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3208      	adds	r2, #8
 8005f5c:	69b9      	ldr	r1, [r7, #24]
 8005f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43db      	mvns	r3, r3
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4013      	ands	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f003 0203 	and.w	r2, r3, #3
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80e0 	beq.w	8006164 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fa4:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <HAL_GPIO_Init+0x238>)
 8005fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005faa:	4a2e      	ldr	r2, [pc, #184]	; (8006064 <HAL_GPIO_Init+0x238>)
 8005fac:	f043 0302 	orr.w	r3, r3, #2
 8005fb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <HAL_GPIO_Init+0x238>)
 8005fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fc2:	4a29      	ldr	r2, [pc, #164]	; (8006068 <HAL_GPIO_Init+0x23c>)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	089b      	lsrs	r3, r3, #2
 8005fc8:	3302      	adds	r3, #2
 8005fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	220f      	movs	r2, #15
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a20      	ldr	r2, [pc, #128]	; (800606c <HAL_GPIO_Init+0x240>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d052      	beq.n	8006094 <HAL_GPIO_Init+0x268>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_GPIO_Init+0x244>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d031      	beq.n	800605a <HAL_GPIO_Init+0x22e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a1e      	ldr	r2, [pc, #120]	; (8006074 <HAL_GPIO_Init+0x248>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02b      	beq.n	8006056 <HAL_GPIO_Init+0x22a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a1d      	ldr	r2, [pc, #116]	; (8006078 <HAL_GPIO_Init+0x24c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d025      	beq.n	8006052 <HAL_GPIO_Init+0x226>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a1c      	ldr	r2, [pc, #112]	; (800607c <HAL_GPIO_Init+0x250>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <HAL_GPIO_Init+0x222>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1b      	ldr	r2, [pc, #108]	; (8006080 <HAL_GPIO_Init+0x254>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d019      	beq.n	800604a <HAL_GPIO_Init+0x21e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a1a      	ldr	r2, [pc, #104]	; (8006084 <HAL_GPIO_Init+0x258>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_GPIO_Init+0x21a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_GPIO_Init+0x25c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00d      	beq.n	8006042 <HAL_GPIO_Init+0x216>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_GPIO_Init+0x260>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d007      	beq.n	800603e <HAL_GPIO_Init+0x212>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a17      	ldr	r2, [pc, #92]	; (8006090 <HAL_GPIO_Init+0x264>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d101      	bne.n	800603a <HAL_GPIO_Init+0x20e>
 8006036:	2309      	movs	r3, #9
 8006038:	e02d      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 800603a:	230a      	movs	r3, #10
 800603c:	e02b      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 800603e:	2308      	movs	r3, #8
 8006040:	e029      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 8006042:	2307      	movs	r3, #7
 8006044:	e027      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 8006046:	2306      	movs	r3, #6
 8006048:	e025      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 800604a:	2305      	movs	r3, #5
 800604c:	e023      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 800604e:	2304      	movs	r3, #4
 8006050:	e021      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 8006052:	2303      	movs	r3, #3
 8006054:	e01f      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 8006056:	2302      	movs	r3, #2
 8006058:	e01d      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 800605a:	2301      	movs	r3, #1
 800605c:	e01b      	b.n	8006096 <HAL_GPIO_Init+0x26a>
 800605e:	bf00      	nop
 8006060:	58000080 	.word	0x58000080
 8006064:	58024400 	.word	0x58024400
 8006068:	58000400 	.word	0x58000400
 800606c:	58020000 	.word	0x58020000
 8006070:	58020400 	.word	0x58020400
 8006074:	58020800 	.word	0x58020800
 8006078:	58020c00 	.word	0x58020c00
 800607c:	58021000 	.word	0x58021000
 8006080:	58021400 	.word	0x58021400
 8006084:	58021800 	.word	0x58021800
 8006088:	58021c00 	.word	0x58021c00
 800608c:	58022000 	.word	0x58022000
 8006090:	58022400 	.word	0x58022400
 8006094:	2300      	movs	r3, #0
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	f002 0203 	and.w	r2, r2, #3
 800609c:	0092      	lsls	r2, r2, #2
 800609e:	4093      	lsls	r3, r2
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060a6:	4938      	ldr	r1, [pc, #224]	; (8006188 <HAL_GPIO_Init+0x35c>)
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	089b      	lsrs	r3, r3, #2
 80060ac:	3302      	adds	r3, #2
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	43db      	mvns	r3, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800612e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	43db      	mvns	r3, r3
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800615c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	3301      	adds	r3, #1
 8006168:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f ae63 	bne.w	8005e40 <HAL_GPIO_Init+0x14>
  }
}
 800617a:	bf00      	nop
 800617c:	3724      	adds	r7, #36	; 0x24
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	58000400 	.word	0x58000400

0800618c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	807b      	strh	r3, [r7, #2]
 8006198:	4613      	mov	r3, r2
 800619a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800619c:	787b      	ldrb	r3, [r7, #1]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061a2:	887a      	ldrh	r2, [r7, #2]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061a8:	e003      	b.n	80061b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061aa:	887b      	ldrh	r3, [r7, #2]
 80061ac:	041a      	lsls	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	619a      	str	r2, [r3, #24]
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	887b      	ldrh	r3, [r7, #2]
 80061d0:	401a      	ands	r2, r3
 80061d2:	887b      	ldrh	r3, [r7, #2]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d104      	bne.n	80061e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061d8:	887b      	ldrh	r3, [r7, #2]
 80061da:	041a      	lsls	r2, r3, #16
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80061e0:	e002      	b.n	80061e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	619a      	str	r2, [r3, #24]
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80061fc:	4b19      	ldr	r3, [pc, #100]	; (8006264 <HAL_PWREx_ConfigSupply+0x70>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b04      	cmp	r3, #4
 8006206:	d00a      	beq.n	800621e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006208:	4b16      	ldr	r3, [pc, #88]	; (8006264 <HAL_PWREx_ConfigSupply+0x70>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d001      	beq.n	800621a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e01f      	b.n	800625a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e01d      	b.n	800625a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800621e:	4b11      	ldr	r3, [pc, #68]	; (8006264 <HAL_PWREx_ConfigSupply+0x70>)
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f023 0207 	bic.w	r2, r3, #7
 8006226:	490f      	ldr	r1, [pc, #60]	; (8006264 <HAL_PWREx_ConfigSupply+0x70>)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4313      	orrs	r3, r2
 800622c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800622e:	f7fb ffc3 	bl	80021b8 <HAL_GetTick>
 8006232:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006234:	e009      	b.n	800624a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006236:	f7fb ffbf 	bl	80021b8 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006244:	d901      	bls.n	800624a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e007      	b.n	800625a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <HAL_PWREx_ConfigSupply+0x70>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006256:	d1ee      	bne.n	8006236 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	58024800 	.word	0x58024800

08006268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08c      	sub	sp, #48	; 0x30
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e3c4      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8087 	beq.w	8006396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006288:	4ba2      	ldr	r3, [pc, #648]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006292:	4ba0      	ldr	r3, [pc, #640]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	2b10      	cmp	r3, #16
 800629c:	d007      	beq.n	80062ae <HAL_RCC_OscConfig+0x46>
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	2b18      	cmp	r3, #24
 80062a2:	d110      	bne.n	80062c6 <HAL_RCC_OscConfig+0x5e>
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d10b      	bne.n	80062c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ae:	4b99      	ldr	r3, [pc, #612]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d06c      	beq.n	8006394 <HAL_RCC_OscConfig+0x12c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d168      	bne.n	8006394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e39e      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ce:	d106      	bne.n	80062de <HAL_RCC_OscConfig+0x76>
 80062d0:	4b90      	ldr	r3, [pc, #576]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a8f      	ldr	r2, [pc, #572]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e02e      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x98>
 80062e6:	4b8b      	ldr	r3, [pc, #556]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a8a      	ldr	r2, [pc, #552]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b88      	ldr	r3, [pc, #544]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a87      	ldr	r2, [pc, #540]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e01d      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006308:	d10c      	bne.n	8006324 <HAL_RCC_OscConfig+0xbc>
 800630a:	4b82      	ldr	r3, [pc, #520]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a81      	ldr	r2, [pc, #516]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b7f      	ldr	r3, [pc, #508]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a7e      	ldr	r2, [pc, #504]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800631c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e00b      	b.n	800633c <HAL_RCC_OscConfig+0xd4>
 8006324:	4b7b      	ldr	r3, [pc, #492]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a7a      	ldr	r2, [pc, #488]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b78      	ldr	r3, [pc, #480]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a77      	ldr	r2, [pc, #476]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800633a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006344:	f7fb ff38 	bl	80021b8 <HAL_GetTick>
 8006348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634c:	f7fb ff34 	bl	80021b8 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e352      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800635e:	4b6d      	ldr	r3, [pc, #436]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0xe4>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fb ff24 	bl	80021b8 <HAL_GetTick>
 8006370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006374:	f7fb ff20 	bl	80021b8 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e33e      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006386:	4b63      	ldr	r3, [pc, #396]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x10c>
 8006392:	e000      	b.n	8006396 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8092 	beq.w	80064c8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063a4:	4b5b      	ldr	r3, [pc, #364]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063ae:	4b59      	ldr	r3, [pc, #356]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_RCC_OscConfig+0x162>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	2b18      	cmp	r3, #24
 80063be:	d12d      	bne.n	800641c <HAL_RCC_OscConfig+0x1b4>
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d128      	bne.n	800641c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ca:	4b52      	ldr	r3, [pc, #328]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <HAL_RCC_OscConfig+0x17a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e310      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e2:	f7fb ff17 	bl	8002214 <HAL_GetREVID>
 80063e6:	4602      	mov	r2, r0
 80063e8:	f241 0303 	movw	r3, #4099	; 0x1003
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d80a      	bhi.n	8006406 <HAL_RCC_OscConfig+0x19e>
 80063f0:	4b48      	ldr	r3, [pc, #288]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	031b      	lsls	r3, r3, #12
 80063fe:	4945      	ldr	r1, [pc, #276]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006400:	4313      	orrs	r3, r2
 8006402:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006404:	e060      	b.n	80064c8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006406:	4b43      	ldr	r3, [pc, #268]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	061b      	lsls	r3, r3, #24
 8006414:	493f      	ldr	r1, [pc, #252]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006416:	4313      	orrs	r3, r2
 8006418:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800641a:	e055      	b.n	80064c8 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d038      	beq.n	8006496 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006424:	4b3b      	ldr	r3, [pc, #236]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f023 0219 	bic.w	r2, r3, #25
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4938      	ldr	r1, [pc, #224]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006432:	4313      	orrs	r3, r2
 8006434:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006436:	f7fb febf 	bl	80021b8 <HAL_GetTick>
 800643a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800643e:	f7fb febb 	bl	80021b8 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e2d9      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006450:	4b30      	ldr	r3, [pc, #192]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645c:	f7fb feda 	bl	8002214 <HAL_GetREVID>
 8006460:	4602      	mov	r2, r0
 8006462:	f241 0303 	movw	r3, #4099	; 0x1003
 8006466:	429a      	cmp	r2, r3
 8006468:	d80a      	bhi.n	8006480 <HAL_RCC_OscConfig+0x218>
 800646a:	4b2a      	ldr	r3, [pc, #168]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	031b      	lsls	r3, r3, #12
 8006478:	4926      	ldr	r1, [pc, #152]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800647a:	4313      	orrs	r3, r2
 800647c:	604b      	str	r3, [r1, #4]
 800647e:	e023      	b.n	80064c8 <HAL_RCC_OscConfig+0x260>
 8006480:	4b24      	ldr	r3, [pc, #144]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	061b      	lsls	r3, r3, #24
 800648e:	4921      	ldr	r1, [pc, #132]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006490:	4313      	orrs	r3, r2
 8006492:	604b      	str	r3, [r1, #4]
 8006494:	e018      	b.n	80064c8 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006496:	4b1f      	ldr	r3, [pc, #124]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1e      	ldr	r2, [pc, #120]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fb fe89 	bl	80021b8 <HAL_GetTick>
 80064a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064aa:	f7fb fe85 	bl	80021b8 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e2a3      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064bc:	4b15      	ldr	r3, [pc, #84]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8091 	beq.w	80065f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064e0:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d007      	beq.n	80064fc <HAL_RCC_OscConfig+0x294>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	2b18      	cmp	r3, #24
 80064f0:	d12f      	bne.n	8006552 <HAL_RCC_OscConfig+0x2ea>
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d12a      	bne.n	8006552 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <HAL_RCC_OscConfig+0x2b0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d003      	beq.n	8006518 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e277      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
 8006514:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006518:	f7fb fe7c 	bl	8002214 <HAL_GetREVID>
 800651c:	4602      	mov	r2, r0
 800651e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006522:	429a      	cmp	r2, r3
 8006524:	d80a      	bhi.n	800653c <HAL_RCC_OscConfig+0x2d4>
 8006526:	4ba2      	ldr	r3, [pc, #648]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	069b      	lsls	r3, r3, #26
 8006534:	499e      	ldr	r1, [pc, #632]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006536:	4313      	orrs	r3, r2
 8006538:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800653a:	e05d      	b.n	80065f8 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800653c:	4b9c      	ldr	r3, [pc, #624]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	061b      	lsls	r3, r3, #24
 800654a:	4999      	ldr	r1, [pc, #612]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800654c:	4313      	orrs	r3, r2
 800654e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006550:	e052      	b.n	80065f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d035      	beq.n	80065c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800655a:	4b95      	ldr	r3, [pc, #596]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a94      	ldr	r2, [pc, #592]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006566:	f7fb fe27 	bl	80021b8 <HAL_GetTick>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800656e:	f7fb fe23 	bl	80021b8 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e241      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006580:	4b8b      	ldr	r3, [pc, #556]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800658c:	f7fb fe42 	bl	8002214 <HAL_GetREVID>
 8006590:	4602      	mov	r2, r0
 8006592:	f241 0303 	movw	r3, #4099	; 0x1003
 8006596:	429a      	cmp	r2, r3
 8006598:	d80a      	bhi.n	80065b0 <HAL_RCC_OscConfig+0x348>
 800659a:	4b85      	ldr	r3, [pc, #532]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	069b      	lsls	r3, r3, #26
 80065a8:	4981      	ldr	r1, [pc, #516]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	604b      	str	r3, [r1, #4]
 80065ae:	e023      	b.n	80065f8 <HAL_RCC_OscConfig+0x390>
 80065b0:	4b7f      	ldr	r3, [pc, #508]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	061b      	lsls	r3, r3, #24
 80065be:	497c      	ldr	r1, [pc, #496]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60cb      	str	r3, [r1, #12]
 80065c4:	e018      	b.n	80065f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065c6:	4b7a      	ldr	r3, [pc, #488]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a79      	ldr	r2, [pc, #484]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80065cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d2:	f7fb fdf1 	bl	80021b8 <HAL_GetTick>
 80065d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80065da:	f7fb fded 	bl	80021b8 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e20b      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065ec:	4b70      	ldr	r3, [pc, #448]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f0      	bne.n	80065da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d036      	beq.n	8006672 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d019      	beq.n	8006640 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800660c:	4b68      	ldr	r3, [pc, #416]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800660e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006610:	4a67      	ldr	r2, [pc, #412]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7fb fdce 	bl	80021b8 <HAL_GetTick>
 800661c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006620:	f7fb fdca 	bl	80021b8 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e1e8      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006632:	4b5f      	ldr	r3, [pc, #380]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x3b8>
 800663e:	e018      	b.n	8006672 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006640:	4b5b      	ldr	r3, [pc, #364]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006644:	4a5a      	ldr	r2, [pc, #360]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664c:	f7fb fdb4 	bl	80021b8 <HAL_GetTick>
 8006650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006654:	f7fb fdb0 	bl	80021b8 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e1ce      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006666:	4b52      	ldr	r3, [pc, #328]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d036      	beq.n	80066ec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d019      	beq.n	80066ba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006686:	4b4a      	ldr	r3, [pc, #296]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a49      	ldr	r2, [pc, #292]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800668c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006690:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006692:	f7fb fd91 	bl	80021b8 <HAL_GetTick>
 8006696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800669a:	f7fb fd8d 	bl	80021b8 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e1ab      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066ac:	4b40      	ldr	r3, [pc, #256]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x432>
 80066b8:	e018      	b.n	80066ec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066ba:	4b3d      	ldr	r3, [pc, #244]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a3c      	ldr	r2, [pc, #240]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80066c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066c6:	f7fb fd77 	bl	80021b8 <HAL_GetTick>
 80066ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80066ce:	f7fb fd73 	bl	80021b8 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e191      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066e0:	4b33      	ldr	r3, [pc, #204]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f0      	bne.n	80066ce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8086 	beq.w	8006806 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066fa:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <HAL_RCC_OscConfig+0x54c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a2d      	ldr	r2, [pc, #180]	; (80067b4 <HAL_RCC_OscConfig+0x54c>)
 8006700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006704:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006706:	f7fb fd57 	bl	80021b8 <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800670e:	f7fb fd53 	bl	80021b8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b64      	cmp	r3, #100	; 0x64
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e171      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006720:	4b24      	ldr	r3, [pc, #144]	; (80067b4 <HAL_RCC_OscConfig+0x54c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d106      	bne.n	8006742 <HAL_RCC_OscConfig+0x4da>
 8006734:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006738:	4a1d      	ldr	r2, [pc, #116]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	6713      	str	r3, [r2, #112]	; 0x70
 8006740:	e02d      	b.n	800679e <HAL_RCC_OscConfig+0x536>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10c      	bne.n	8006764 <HAL_RCC_OscConfig+0x4fc>
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4a18      	ldr	r2, [pc, #96]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
 8006756:	4b16      	ldr	r3, [pc, #88]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	4a15      	ldr	r2, [pc, #84]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800675c:	f023 0304 	bic.w	r3, r3, #4
 8006760:	6713      	str	r3, [r2, #112]	; 0x70
 8006762:	e01c      	b.n	800679e <HAL_RCC_OscConfig+0x536>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b05      	cmp	r3, #5
 800676a:	d10c      	bne.n	8006786 <HAL_RCC_OscConfig+0x51e>
 800676c:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006770:	4a0f      	ldr	r2, [pc, #60]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006772:	f043 0304 	orr.w	r3, r3, #4
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
 8006778:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	4a0c      	ldr	r2, [pc, #48]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6713      	str	r3, [r2, #112]	; 0x70
 8006784:	e00b      	b.n	800679e <HAL_RCC_OscConfig+0x536>
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	6713      	str	r3, [r2, #112]	; 0x70
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	4a06      	ldr	r2, [pc, #24]	; (80067b0 <HAL_RCC_OscConfig+0x548>)
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01a      	beq.n	80067dc <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fb fd07 	bl	80021b8 <HAL_GetTick>
 80067aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ac:	e00f      	b.n	80067ce <HAL_RCC_OscConfig+0x566>
 80067ae:	bf00      	nop
 80067b0:	58024400 	.word	0x58024400
 80067b4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b8:	f7fb fcfe 	bl	80021b8 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e11a      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ce:	4b8f      	ldr	r3, [pc, #572]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80067d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0ee      	beq.n	80067b8 <HAL_RCC_OscConfig+0x550>
 80067da:	e014      	b.n	8006806 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fb fcec 	bl	80021b8 <HAL_GetTick>
 80067e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067e2:	e00a      	b.n	80067fa <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067e4:	f7fb fce8 	bl	80021b8 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e104      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067fa:	4b84      	ldr	r3, [pc, #528]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1ee      	bne.n	80067e4 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80f9 	beq.w	8006a02 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006810:	4b7e      	ldr	r3, [pc, #504]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006818:	2b18      	cmp	r3, #24
 800681a:	f000 80b4 	beq.w	8006986 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	2b02      	cmp	r3, #2
 8006824:	f040 8095 	bne.w	8006952 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006828:	4b78      	ldr	r3, [pc, #480]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a77      	ldr	r2, [pc, #476]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 800682e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fb fcc0 	bl	80021b8 <HAL_GetTick>
 8006838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800683c:	f7fb fcbc 	bl	80021b8 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e0da      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800684e:	4b6f      	ldr	r3, [pc, #444]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800685a:	4b6c      	ldr	r3, [pc, #432]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 800685c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800685e:	4b6c      	ldr	r3, [pc, #432]	; (8006a10 <HAL_RCC_OscConfig+0x7a8>)
 8006860:	4013      	ands	r3, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800686a:	0112      	lsls	r2, r2, #4
 800686c:	430a      	orrs	r2, r1
 800686e:	4967      	ldr	r1, [pc, #412]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006870:	4313      	orrs	r3, r2
 8006872:	628b      	str	r3, [r1, #40]	; 0x28
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	3b01      	subs	r3, #1
 800687a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	3b01      	subs	r3, #1
 8006884:	025b      	lsls	r3, r3, #9
 8006886:	b29b      	uxth	r3, r3
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	3b01      	subs	r3, #1
 8006890:	041b      	lsls	r3, r3, #16
 8006892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689c:	3b01      	subs	r3, #1
 800689e:	061b      	lsls	r3, r3, #24
 80068a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068a4:	4959      	ldr	r1, [pc, #356]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80068aa:	4b58      	ldr	r3, [pc, #352]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	4a57      	ldr	r2, [pc, #348]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068b6:	4b55      	ldr	r3, [pc, #340]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ba:	4b56      	ldr	r3, [pc, #344]	; (8006a14 <HAL_RCC_OscConfig+0x7ac>)
 80068bc:	4013      	ands	r3, r2
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068c2:	00d2      	lsls	r2, r2, #3
 80068c4:	4951      	ldr	r1, [pc, #324]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068ca:	4b50      	ldr	r3, [pc, #320]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	f023 020c 	bic.w	r2, r3, #12
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	494d      	ldr	r1, [pc, #308]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80068dc:	4b4b      	ldr	r3, [pc, #300]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	f023 0202 	bic.w	r2, r3, #2
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e8:	4948      	ldr	r1, [pc, #288]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068ee:	4b47      	ldr	r3, [pc, #284]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	4a46      	ldr	r2, [pc, #280]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fa:	4b44      	ldr	r3, [pc, #272]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	4a43      	ldr	r2, [pc, #268]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006904:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006906:	4b41      	ldr	r3, [pc, #260]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	4a40      	ldr	r2, [pc, #256]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 800690c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006912:	4b3e      	ldr	r3, [pc, #248]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	4a3d      	ldr	r2, [pc, #244]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800691e:	4b3b      	ldr	r3, [pc, #236]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a3a      	ldr	r2, [pc, #232]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692a:	f7fb fc45 	bl	80021b8 <HAL_GetTick>
 800692e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006932:	f7fb fc41 	bl	80021b8 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e05f      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006944:	4b31      	ldr	r3, [pc, #196]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0f0      	beq.n	8006932 <HAL_RCC_OscConfig+0x6ca>
 8006950:	e057      	b.n	8006a02 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006952:	4b2e      	ldr	r3, [pc, #184]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2d      	ldr	r2, [pc, #180]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800695c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fb fc2b 	bl	80021b8 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006966:	f7fb fc27 	bl	80021b8 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e045      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006978:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f0      	bne.n	8006966 <HAL_RCC_OscConfig+0x6fe>
 8006984:	e03d      	b.n	8006a02 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006986:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800698c:	4b1f      	ldr	r3, [pc, #124]	; (8006a0c <HAL_RCC_OscConfig+0x7a4>)
 800698e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006990:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	2b01      	cmp	r3, #1
 8006998:	d031      	beq.n	80069fe <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f003 0203 	and.w	r2, r3, #3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d12a      	bne.n	80069fe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	091b      	lsrs	r3, r3, #4
 80069ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d122      	bne.n	80069fe <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d11a      	bne.n	80069fe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	0a5b      	lsrs	r3, r3, #9
 80069cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d111      	bne.n	80069fe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	0c1b      	lsrs	r3, r3, #16
 80069de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d108      	bne.n	80069fe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	0e1b      	lsrs	r3, r3, #24
 80069f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d001      	beq.n	8006a02 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3730      	adds	r7, #48	; 0x30
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	fffffc0c 	.word	0xfffffc0c
 8006a14:	ffff0007 	.word	0xffff0007

08006a18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e19c      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b8a      	ldr	r3, [pc, #552]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d910      	bls.n	8006a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b87      	ldr	r3, [pc, #540]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f023 020f 	bic.w	r2, r3, #15
 8006a42:	4985      	ldr	r1, [pc, #532]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a4a:	4b83      	ldr	r3, [pc, #524]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d001      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e184      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d010      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	4b7b      	ldr	r3, [pc, #492]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d908      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a78:	4b78      	ldr	r3, [pc, #480]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	4975      	ldr	r1, [pc, #468]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d010      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	4b70      	ldr	r3, [pc, #448]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d908      	bls.n	8006ab8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006aa6:	4b6d      	ldr	r3, [pc, #436]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	496a      	ldr	r1, [pc, #424]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d010      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	4b64      	ldr	r3, [pc, #400]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d908      	bls.n	8006ae6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ad4:	4b61      	ldr	r3, [pc, #388]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	495e      	ldr	r1, [pc, #376]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d010      	beq.n	8006b14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	4b59      	ldr	r3, [pc, #356]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d908      	bls.n	8006b14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b02:	4b56      	ldr	r3, [pc, #344]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	4953      	ldr	r1, [pc, #332]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d010      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	4b4d      	ldr	r3, [pc, #308]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d908      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b30:	4b4a      	ldr	r3, [pc, #296]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f023 020f 	bic.w	r2, r3, #15
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4947      	ldr	r1, [pc, #284]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d055      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b4e:	4b43      	ldr	r3, [pc, #268]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	4940      	ldr	r1, [pc, #256]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d107      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b68:	4b3c      	ldr	r3, [pc, #240]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d121      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0f6      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d107      	bne.n	8006b90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b80:	4b36      	ldr	r3, [pc, #216]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d115      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0ea      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b98:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0de      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ba8:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0d6      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bb8:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f023 0207 	bic.w	r2, r3, #7
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4925      	ldr	r1, [pc, #148]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bca:	f7fb faf5 	bl	80021b8 <HAL_GetTick>
 8006bce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd0:	e00a      	b.n	8006be8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd2:	f7fb faf1 	bl	80021b8 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e0be      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d1eb      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d010      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d208      	bcs.n	8006c28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	f023 020f 	bic.w	r2, r3, #15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	490e      	ldr	r1, [pc, #56]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d214      	bcs.n	8006c60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c36:	4b08      	ldr	r3, [pc, #32]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 020f 	bic.w	r2, r3, #15
 8006c3e:	4906      	ldr	r1, [pc, #24]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d005      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e086      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
 8006c58:	52002000 	.word	0x52002000
 8006c5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d010      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	4b3f      	ldr	r3, [pc, #252]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d208      	bcs.n	8006c8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c7c:	4b3c      	ldr	r3, [pc, #240]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	4939      	ldr	r1, [pc, #228]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d010      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	4b34      	ldr	r3, [pc, #208]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d208      	bcs.n	8006cbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006caa:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	492e      	ldr	r1, [pc, #184]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d010      	beq.n	8006cea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	4b28      	ldr	r3, [pc, #160]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d208      	bcs.n	8006cea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cd8:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	4922      	ldr	r1, [pc, #136]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d208      	bcs.n	8006d18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d06:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	4917      	ldr	r1, [pc, #92]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d18:	f000 f834 	bl	8006d84 <HAL_RCC_GetSysClockFreq>
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	0a1b      	lsrs	r3, r3, #8
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	4a12      	ldr	r2, [pc, #72]	; (8006d74 <HAL_RCC_ClockConfig+0x35c>)
 8006d2a:	5cd3      	ldrb	r3, [r2, r3]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	fa21 f303 	lsr.w	r3, r1, r3
 8006d34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d36:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	4a0d      	ldr	r2, [pc, #52]	; (8006d74 <HAL_RCC_ClockConfig+0x35c>)
 8006d40:	5cd3      	ldrb	r3, [r2, r3]
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <HAL_RCC_ClockConfig+0x360>)
 8006d4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <HAL_RCC_ClockConfig+0x364>)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <HAL_RCC_ClockConfig+0x368>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fb f9e2 	bl	8002124 <HAL_InitTick>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	58024400 	.word	0x58024400
 8006d74:	0800d024 	.word	0x0800d024
 8006d78:	2400002c 	.word	0x2400002c
 8006d7c:	24000028 	.word	0x24000028
 8006d80:	24000030 	.word	0x24000030

08006d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b089      	sub	sp, #36	; 0x24
 8006d88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d8a:	4baf      	ldr	r3, [pc, #700]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d92:	2b18      	cmp	r3, #24
 8006d94:	f200 814e 	bhi.w	8007034 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006d98:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9e:	bf00      	nop
 8006da0:	08006e05 	.word	0x08006e05
 8006da4:	08007035 	.word	0x08007035
 8006da8:	08007035 	.word	0x08007035
 8006dac:	08007035 	.word	0x08007035
 8006db0:	08007035 	.word	0x08007035
 8006db4:	08007035 	.word	0x08007035
 8006db8:	08007035 	.word	0x08007035
 8006dbc:	08007035 	.word	0x08007035
 8006dc0:	08006e2b 	.word	0x08006e2b
 8006dc4:	08007035 	.word	0x08007035
 8006dc8:	08007035 	.word	0x08007035
 8006dcc:	08007035 	.word	0x08007035
 8006dd0:	08007035 	.word	0x08007035
 8006dd4:	08007035 	.word	0x08007035
 8006dd8:	08007035 	.word	0x08007035
 8006ddc:	08007035 	.word	0x08007035
 8006de0:	08006e31 	.word	0x08006e31
 8006de4:	08007035 	.word	0x08007035
 8006de8:	08007035 	.word	0x08007035
 8006dec:	08007035 	.word	0x08007035
 8006df0:	08007035 	.word	0x08007035
 8006df4:	08007035 	.word	0x08007035
 8006df8:	08007035 	.word	0x08007035
 8006dfc:	08007035 	.word	0x08007035
 8006e00:	08006e37 	.word	0x08006e37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e04:	4b90      	ldr	r3, [pc, #576]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e10:	4b8d      	ldr	r3, [pc, #564]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	08db      	lsrs	r3, r3, #3
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	4a8c      	ldr	r2, [pc, #560]	; (800704c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006e22:	e10a      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e24:	4b89      	ldr	r3, [pc, #548]	; (800704c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006e26:	61bb      	str	r3, [r7, #24]
    break;
 8006e28:	e107      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006e2a:	4b89      	ldr	r3, [pc, #548]	; (8007050 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006e2c:	61bb      	str	r3, [r7, #24]
    break;
 8006e2e:	e104      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006e30:	4b88      	ldr	r3, [pc, #544]	; (8007054 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006e32:	61bb      	str	r3, [r7, #24]
    break;
 8006e34:	e101      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e36:	4b84      	ldr	r3, [pc, #528]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006e40:	4b81      	ldr	r3, [pc, #516]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	091b      	lsrs	r3, r3, #4
 8006e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e4c:	4b7e      	ldr	r3, [pc, #504]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006e56:	4b7c      	ldr	r3, [pc, #496]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5a:	08db      	lsrs	r3, r3, #3
 8006e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	fb02 f303 	mul.w	r3, r2, r3
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80da 	beq.w	800702e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d05a      	beq.n	8006f36 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d302      	bcc.n	8006e8a <HAL_RCC_GetSysClockFreq+0x106>
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d078      	beq.n	8006f7a <HAL_RCC_GetSysClockFreq+0x1f6>
 8006e88:	e099      	b.n	8006fbe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e8a:	4b6f      	ldr	r3, [pc, #444]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d02d      	beq.n	8006ef2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e96:	4b6c      	ldr	r3, [pc, #432]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	08db      	lsrs	r3, r3, #3
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	4a6a      	ldr	r2, [pc, #424]	; (800704c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec0:	4b61      	ldr	r3, [pc, #388]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec8:	ee07 3a90 	vmov	s15, r3
 8006ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006ef0:	e087      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800705c <HAL_RCC_GetSysClockFreq+0x2d8>
 8006f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f04:	4b50      	ldr	r3, [pc, #320]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f14:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f18:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f34:	e065      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	ee07 3a90 	vmov	s15, r3
 8006f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f40:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007060 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f48:	4b3f      	ldr	r3, [pc, #252]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f58:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f78:	e043      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f84:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007064 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8c:	4b2e      	ldr	r3, [pc, #184]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fa0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fbc:	e021      	b.n	8007002 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	ee07 3a90 	vmov	s15, r3
 8006fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007060 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd0:	4b1d      	ldr	r3, [pc, #116]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd8:	ee07 3a90 	vmov	s15, r3
 8006fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fe4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007058 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007000:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007002:	4b11      	ldr	r3, [pc, #68]	; (8007048 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	0a5b      	lsrs	r3, r3, #9
 8007008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700c:	3301      	adds	r3, #1
 800700e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800701a:	edd7 6a07 	vldr	s13, [r7, #28]
 800701e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007026:	ee17 3a90 	vmov	r3, s15
 800702a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800702c:	e005      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
    break;
 8007032:	e002      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007036:	61bb      	str	r3, [r7, #24]
    break;
 8007038:	bf00      	nop
  }

  return sysclockfreq;
 800703a:	69bb      	ldr	r3, [r7, #24]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3724      	adds	r7, #36	; 0x24
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	003d0900 	.word	0x003d0900
 8007054:	017d7840 	.word	0x017d7840
 8007058:	46000000 	.word	0x46000000
 800705c:	4c742400 	.word	0x4c742400
 8007060:	4a742400 	.word	0x4a742400
 8007064:	4bbebc20 	.word	0x4bbebc20

08007068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800706e:	f7ff fe89 	bl	8006d84 <HAL_RCC_GetSysClockFreq>
 8007072:	4601      	mov	r1, r0
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	4a0f      	ldr	r2, [pc, #60]	; (80070bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007080:	5cd3      	ldrb	r3, [r2, r3]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	fa21 f303 	lsr.w	r3, r1, r3
 800708a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	4a09      	ldr	r2, [pc, #36]	; (80070bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	fa22 f303 	lsr.w	r3, r2, r3
 80070a2:	4a07      	ldr	r2, [pc, #28]	; (80070c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070a6:	4a07      	ldr	r2, [pc, #28]	; (80070c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070ac:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070ae:	681b      	ldr	r3, [r3, #0]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	58024400 	.word	0x58024400
 80070bc:	0800d024 	.word	0x0800d024
 80070c0:	2400002c 	.word	0x2400002c
 80070c4:	24000028 	.word	0x24000028

080070c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80070cc:	f7ff ffcc 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070d0:	4601      	mov	r1, r0
 80070d2:	4b06      	ldr	r3, [pc, #24]	; (80070ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	091b      	lsrs	r3, r3, #4
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070de:	5cd3      	ldrb	r3, [r2, r3]
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	58024400 	.word	0x58024400
 80070f0:	0800d024 	.word	0x0800d024

080070f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070f8:	f7ff ffb6 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070fc:	4601      	mov	r1, r0
 80070fe:	4b06      	ldr	r3, [pc, #24]	; (8007118 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	4a04      	ldr	r2, [pc, #16]	; (800711c <HAL_RCC_GetPCLK2Freq+0x28>)
 800710a:	5cd3      	ldrb	r3, [r2, r3]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007114:	4618      	mov	r0, r3
 8007116:	bd80      	pop	{r7, pc}
 8007118:	58024400 	.word	0x58024400
 800711c:	0800d024 	.word	0x0800d024

08007120 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007128:	2300      	movs	r3, #0
 800712a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800712c:	2300      	movs	r3, #0
 800712e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d03d      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007144:	d013      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800714a:	d802      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d007      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007150:	e01f      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007156:	d013      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007158:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800715c:	d01c      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800715e:	e018      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007160:	4baf      	ldr	r3, [pc, #700]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	4aae      	ldr	r2, [pc, #696]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800716c:	e015      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3304      	adds	r3, #4
 8007172:	2102      	movs	r1, #2
 8007174:	4618      	mov	r0, r3
 8007176:	f001 fd23 	bl	8008bc0 <RCCEx_PLL2_Config>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800717e:	e00c      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3324      	adds	r3, #36	; 0x24
 8007184:	2102      	movs	r1, #2
 8007186:	4618      	mov	r0, r3
 8007188:	f001 fdcc 	bl	8008d24 <RCCEx_PLL3_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007190:	e003      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	75fb      	strb	r3, [r7, #23]
      break;
 8007196:	e000      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071a0:	4b9f      	ldr	r3, [pc, #636]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ac:	499c      	ldr	r1, [pc, #624]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	650b      	str	r3, [r1, #80]	; 0x50
 80071b2:	e001      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d03d      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d826      	bhi.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80071cc:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	080071e9 	.word	0x080071e9
 80071d8:	080071f7 	.word	0x080071f7
 80071dc:	08007209 	.word	0x08007209
 80071e0:	08007221 	.word	0x08007221
 80071e4:	08007221 	.word	0x08007221
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e8:	4b8d      	ldr	r3, [pc, #564]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	4a8c      	ldr	r2, [pc, #560]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071f4:	e015      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3304      	adds	r3, #4
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 fcdf 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007206:	e00c      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3324      	adds	r3, #36	; 0x24
 800720c:	2100      	movs	r1, #0
 800720e:	4618      	mov	r0, r3
 8007210:	f001 fd88 	bl	8008d24 <RCCEx_PLL3_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007218:	e003      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	75fb      	strb	r3, [r7, #23]
      break;
 800721e:	e000      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007228:	4b7d      	ldr	r3, [pc, #500]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800722a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722c:	f023 0207 	bic.w	r2, r3, #7
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007234:	497a      	ldr	r1, [pc, #488]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007236:	4313      	orrs	r3, r2
 8007238:	650b      	str	r3, [r1, #80]	; 0x50
 800723a:	e001      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007248:	2b00      	cmp	r3, #0
 800724a:	d03e      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007250:	2b80      	cmp	r3, #128	; 0x80
 8007252:	d01c      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007254:	2b80      	cmp	r3, #128	; 0x80
 8007256:	d804      	bhi.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d008      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d00d      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007260:	e01e      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007262:	2bc0      	cmp	r3, #192	; 0xc0
 8007264:	d01f      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726a:	d01e      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800726c:	e018      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800726e:	4b6c      	ldr	r3, [pc, #432]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	4a6b      	ldr	r2, [pc, #428]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800727a:	e017      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fc9c 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800728c:	e00e      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3324      	adds	r3, #36	; 0x24
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f001 fd45 	bl	8008d24 <RCCEx_PLL3_Config>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800729e:	e005      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	75fb      	strb	r3, [r7, #23]
      break;
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80072aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072b2:	4b5b      	ldr	r3, [pc, #364]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072be:	4958      	ldr	r1, [pc, #352]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	650b      	str	r3, [r1, #80]	; 0x50
 80072c4:	e001      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d044      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072e0:	d01f      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80072e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072e6:	d805      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072f0:	d00e      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80072f2:	e01f      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80072f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072f8:	d01f      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80072fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072fe:	d01e      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007300:	e018      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007302:	4b47      	ldr	r3, [pc, #284]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	4a46      	ldr	r2, [pc, #280]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800730c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800730e:	e017      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	2100      	movs	r1, #0
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fc52 	bl	8008bc0 <RCCEx_PLL2_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007320:	e00e      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3324      	adds	r3, #36	; 0x24
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f001 fcfb 	bl	8008d24 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007332:	e005      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	75fb      	strb	r3, [r7, #23]
      break;
 8007338:	e002      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800733e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007346:	4b36      	ldr	r3, [pc, #216]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007354:	4932      	ldr	r1, [pc, #200]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007356:	4313      	orrs	r3, r2
 8007358:	658b      	str	r3, [r1, #88]	; 0x58
 800735a:	e001      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007368:	2b00      	cmp	r3, #0
 800736a:	d044      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007376:	d01f      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800737c:	d805      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007382:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007386:	d00e      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007388:	e01f      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800738a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800738e:	d01f      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007394:	d01e      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007396:	e018      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007398:	4b21      	ldr	r3, [pc, #132]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a20      	ldr	r2, [pc, #128]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800739e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073a4:	e017      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fc07 	bl	8008bc0 <RCCEx_PLL2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073b6:	e00e      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3324      	adds	r3, #36	; 0x24
 80073bc:	2100      	movs	r1, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 fcb0 	bl	8008d24 <RCCEx_PLL3_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073c8:	e005      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
      break;
 80073ce:	e002      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80073d0:	bf00      	nop
 80073d2:	e000      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80073d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073dc:	4b10      	ldr	r3, [pc, #64]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073ea:	490d      	ldr	r1, [pc, #52]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	658b      	str	r3, [r1, #88]	; 0x58
 80073f0:	e001      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d035      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007406:	2b10      	cmp	r3, #16
 8007408:	d00c      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800740a:	2b10      	cmp	r3, #16
 800740c:	d802      	bhi.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d01b      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007412:	e017      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007414:	2b20      	cmp	r3, #32
 8007416:	d00c      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007418:	2b30      	cmp	r3, #48	; 0x30
 800741a:	d018      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800741c:	e012      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800741e:	bf00      	nop
 8007420:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007424:	4baf      	ldr	r3, [pc, #700]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	4aae      	ldr	r2, [pc, #696]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800742a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800742e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007430:	e00e      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3304      	adds	r3, #4
 8007436:	2102      	movs	r1, #2
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fbc1 	bl	8008bc0 <RCCEx_PLL2_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007442:	e005      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	75fb      	strb	r3, [r7, #23]
      break;
 8007448:	e002      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800744a:	bf00      	nop
 800744c:	e000      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800744e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007456:	4ba3      	ldr	r3, [pc, #652]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007462:	49a0      	ldr	r1, [pc, #640]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007464:	4313      	orrs	r3, r2
 8007466:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007468:	e001      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d042      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007482:	d01f      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007488:	d805      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800748e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007492:	d00e      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007494:	e01f      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800749a:	d01f      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800749c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074a0:	d01e      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80074a2:	e018      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a4:	4b8f      	ldr	r3, [pc, #572]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	4a8e      	ldr	r2, [pc, #568]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074b0:	e017      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3304      	adds	r3, #4
 80074b6:	2100      	movs	r1, #0
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 fb81 	bl	8008bc0 <RCCEx_PLL2_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074c2:	e00e      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3324      	adds	r3, #36	; 0x24
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fc2a 	bl	8008d24 <RCCEx_PLL3_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074d4:	e005      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
      break;
 80074da:	e002      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80074dc:	bf00      	nop
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80074e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074e8:	4b7e      	ldr	r3, [pc, #504]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f4:	497b      	ldr	r1, [pc, #492]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	650b      	str	r3, [r1, #80]	; 0x50
 80074fa:	e001      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d042      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007514:	d01b      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800751a:	d805      	bhi.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d022      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007524:	d00a      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007526:	e01b      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800752c:	d01d      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800752e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007532:	d01c      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007534:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007538:	d01b      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800753a:	e011      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3304      	adds	r3, #4
 8007540:	2101      	movs	r1, #1
 8007542:	4618      	mov	r0, r3
 8007544:	f001 fb3c 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800754c:	e012      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3324      	adds	r3, #36	; 0x24
 8007552:	2101      	movs	r1, #1
 8007554:	4618      	mov	r0, r3
 8007556:	f001 fbe5 	bl	8008d24 <RCCEx_PLL3_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800755e:	e009      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	75fb      	strb	r3, [r7, #23]
      break;
 8007564:	e006      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007566:	bf00      	nop
 8007568:	e004      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800756a:	bf00      	nop
 800756c:	e002      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800756e:	bf00      	nop
 8007570:	e000      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800757a:	4b5a      	ldr	r3, [pc, #360]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800757c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007586:	4957      	ldr	r1, [pc, #348]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007588:	4313      	orrs	r3, r2
 800758a:	650b      	str	r3, [r1, #80]	; 0x50
 800758c:	e001      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d044      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a8:	d01b      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80075aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ae:	d805      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d022      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80075b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075b8:	d00a      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80075ba:	e01b      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80075bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c0:	d01d      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80075c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075c6:	d01c      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80075c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075cc:	d01b      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075ce:	e011      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	2101      	movs	r1, #1
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 faf2 	bl	8008bc0 <RCCEx_PLL2_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80075e0:	e012      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3324      	adds	r3, #36	; 0x24
 80075e6:	2101      	movs	r1, #1
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fb9b 	bl	8008d24 <RCCEx_PLL3_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80075f2:	e009      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	75fb      	strb	r3, [r7, #23]
      break;
 80075f8:	e006      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80075fa:	bf00      	nop
 80075fc:	e004      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800760e:	4b35      	ldr	r3, [pc, #212]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007612:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800761c:	4931      	ldr	r1, [pc, #196]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	658b      	str	r3, [r1, #88]	; 0x58
 8007622:	e001      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d02d      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800763c:	d005      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800763e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007642:	d009      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d013      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007648:	e00f      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764a:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	4a25      	ldr	r2, [pc, #148]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007656:	e00c      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3304      	adds	r3, #4
 800765c:	2101      	movs	r1, #1
 800765e:	4618      	mov	r0, r3
 8007660:	f001 faae 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007668:	e003      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
      break;
 800766e:	e000      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007678:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800767a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007684:	4917      	ldr	r1, [pc, #92]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007686:	4313      	orrs	r3, r2
 8007688:	650b      	str	r3, [r1, #80]	; 0x50
 800768a:	e001      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d035      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d81b      	bhi.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076a4:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076bd 	.word	0x080076bd
 80076b4:	080076cb 	.word	0x080076cb
 80076b8:	080076e9 	.word	0x080076e9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	4a08      	ldr	r2, [pc, #32]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076c8:	e00f      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3304      	adds	r3, #4
 80076ce:	2102      	movs	r1, #2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fa75 	bl	8008bc0 <RCCEx_PLL2_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076da:	e006      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
      break;
 80076e0:	e003      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80076e2:	bf00      	nop
 80076e4:	58024400 	.word	0x58024400
      break;
 80076e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d109      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076f0:	4bba      	ldr	r3, [pc, #744]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f4:	f023 0203 	bic.w	r2, r3, #3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fc:	49b7      	ldr	r1, [pc, #732]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007702:	e001      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 8086 	beq.w	8007822 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007716:	4bb2      	ldr	r3, [pc, #712]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4ab1      	ldr	r2, [pc, #708]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800771c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007720:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007722:	f7fa fd49 	bl	80021b8 <HAL_GetTick>
 8007726:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007728:	e009      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800772a:	f7fa fd45 	bl	80021b8 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b64      	cmp	r3, #100	; 0x64
 8007736:	d902      	bls.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	75fb      	strb	r3, [r7, #23]
        break;
 800773c:	e005      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800773e:	4ba8      	ldr	r3, [pc, #672]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0ef      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d166      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007750:	4ba2      	ldr	r3, [pc, #648]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800775a:	4053      	eors	r3, r2
 800775c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007760:	2b00      	cmp	r3, #0
 8007762:	d013      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007764:	4b9d      	ldr	r3, [pc, #628]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800776e:	4b9b      	ldr	r3, [pc, #620]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007772:	4a9a      	ldr	r2, [pc, #616]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007778:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800777a:	4b98      	ldr	r3, [pc, #608]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	4a97      	ldr	r2, [pc, #604]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007784:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007786:	4a95      	ldr	r2, [pc, #596]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007796:	d115      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007798:	f7fa fd0e 	bl	80021b8 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800779e:	e00b      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077a0:	f7fa fd0a 	bl	80021b8 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d902      	bls.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	75fb      	strb	r3, [r7, #23]
            break;
 80077b6:	e005      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077b8:	4b88      	ldr	r3, [pc, #544]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0ed      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d126      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d8:	d10d      	bne.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80077da:	4b80      	ldr	r3, [pc, #512]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077e8:	0919      	lsrs	r1, r3, #4
 80077ea:	4b7e      	ldr	r3, [pc, #504]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80077ec:	400b      	ands	r3, r1
 80077ee:	497b      	ldr	r1, [pc, #492]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	610b      	str	r3, [r1, #16]
 80077f4:	e005      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80077f6:	4b79      	ldr	r3, [pc, #484]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	4a78      	ldr	r2, [pc, #480]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007800:	6113      	str	r3, [r2, #16]
 8007802:	4b76      	ldr	r3, [pc, #472]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007804:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800780c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007810:	4972      	ldr	r1, [pc, #456]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007812:	4313      	orrs	r3, r2
 8007814:	670b      	str	r3, [r1, #112]	; 0x70
 8007816:	e004      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	75bb      	strb	r3, [r7, #22]
 800781c:	e001      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d07d      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007832:	2b28      	cmp	r3, #40	; 0x28
 8007834:	d866      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	0800790b 	.word	0x0800790b
 8007840:	08007905 	.word	0x08007905
 8007844:	08007905 	.word	0x08007905
 8007848:	08007905 	.word	0x08007905
 800784c:	08007905 	.word	0x08007905
 8007850:	08007905 	.word	0x08007905
 8007854:	08007905 	.word	0x08007905
 8007858:	08007905 	.word	0x08007905
 800785c:	080078e1 	.word	0x080078e1
 8007860:	08007905 	.word	0x08007905
 8007864:	08007905 	.word	0x08007905
 8007868:	08007905 	.word	0x08007905
 800786c:	08007905 	.word	0x08007905
 8007870:	08007905 	.word	0x08007905
 8007874:	08007905 	.word	0x08007905
 8007878:	08007905 	.word	0x08007905
 800787c:	080078f3 	.word	0x080078f3
 8007880:	08007905 	.word	0x08007905
 8007884:	08007905 	.word	0x08007905
 8007888:	08007905 	.word	0x08007905
 800788c:	08007905 	.word	0x08007905
 8007890:	08007905 	.word	0x08007905
 8007894:	08007905 	.word	0x08007905
 8007898:	08007905 	.word	0x08007905
 800789c:	0800790b 	.word	0x0800790b
 80078a0:	08007905 	.word	0x08007905
 80078a4:	08007905 	.word	0x08007905
 80078a8:	08007905 	.word	0x08007905
 80078ac:	08007905 	.word	0x08007905
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007905 	.word	0x08007905
 80078b8:	08007905 	.word	0x08007905
 80078bc:	0800790b 	.word	0x0800790b
 80078c0:	08007905 	.word	0x08007905
 80078c4:	08007905 	.word	0x08007905
 80078c8:	08007905 	.word	0x08007905
 80078cc:	08007905 	.word	0x08007905
 80078d0:	08007905 	.word	0x08007905
 80078d4:	08007905 	.word	0x08007905
 80078d8:	08007905 	.word	0x08007905
 80078dc:	0800790b 	.word	0x0800790b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	2101      	movs	r1, #1
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 f96a 	bl	8008bc0 <RCCEx_PLL2_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80078f0:	e00c      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3324      	adds	r3, #36	; 0x24
 80078f6:	2101      	movs	r1, #1
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 fa13 	bl	8008d24 <RCCEx_PLL3_Config>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007902:	e003      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	e000      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800790a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007912:	4b32      	ldr	r3, [pc, #200]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007916:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800791e:	492f      	ldr	r1, [pc, #188]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007920:	4313      	orrs	r3, r2
 8007922:	654b      	str	r3, [r1, #84]	; 0x54
 8007924:	e001      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d037      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793a:	2b05      	cmp	r3, #5
 800793c:	d820      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	08007987 	.word	0x08007987
 8007948:	0800795d 	.word	0x0800795d
 800794c:	0800796f 	.word	0x0800796f
 8007950:	08007987 	.word	0x08007987
 8007954:	08007987 	.word	0x08007987
 8007958:	08007987 	.word	0x08007987
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3304      	adds	r3, #4
 8007960:	2101      	movs	r1, #1
 8007962:	4618      	mov	r0, r3
 8007964:	f001 f92c 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800796c:	e00c      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3324      	adds	r3, #36	; 0x24
 8007972:	2101      	movs	r1, #1
 8007974:	4618      	mov	r0, r3
 8007976:	f001 f9d5 	bl	8008d24 <RCCEx_PLL3_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800797e:	e003      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
      break;
 8007984:	e000      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800798e:	4b13      	ldr	r3, [pc, #76]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007992:	f023 0207 	bic.w	r2, r3, #7
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799a:	4910      	ldr	r1, [pc, #64]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800799c:	4313      	orrs	r3, r2
 800799e:	654b      	str	r3, [r1, #84]	; 0x54
 80079a0:	e001      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d040      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	d827      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	08007a13 	.word	0x08007a13
 80079c8:	080079e9 	.word	0x080079e9
 80079cc:	080079fb 	.word	0x080079fb
 80079d0:	08007a13 	.word	0x08007a13
 80079d4:	08007a13 	.word	0x08007a13
 80079d8:	08007a13 	.word	0x08007a13
 80079dc:	58024400 	.word	0x58024400
 80079e0:	58024800 	.word	0x58024800
 80079e4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	2101      	movs	r1, #1
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 f8e6 	bl	8008bc0 <RCCEx_PLL2_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80079f8:	e00c      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3324      	adds	r3, #36	; 0x24
 80079fe:	2101      	movs	r1, #1
 8007a00:	4618      	mov	r0, r3
 8007a02:	f001 f98f 	bl	8008d24 <RCCEx_PLL3_Config>
 8007a06:	4603      	mov	r3, r0
 8007a08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a0a:	e003      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a10:	e000      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a1a:	4bb2      	ldr	r3, [pc, #712]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1e:	f023 0207 	bic.w	r2, r3, #7
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a28:	49ae      	ldr	r1, [pc, #696]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a2e:	e001      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d044      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a4a:	d01b      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a50:	d805      	bhi.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d022      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a5a:	d00a      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007a5c:	e01b      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a62:	d01d      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a68:	d01c      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a6e:	d01b      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007a70:	e011      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3304      	adds	r3, #4
 8007a76:	2100      	movs	r1, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f001 f8a1 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a82:	e012      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3324      	adds	r3, #36	; 0x24
 8007a88:	2102      	movs	r1, #2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 f94a 	bl	8008d24 <RCCEx_PLL3_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a94:	e009      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9a:	e006      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e004      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007aa0:	bf00      	nop
 8007aa2:	e002      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ab0:	4b8c      	ldr	r3, [pc, #560]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007abe:	4989      	ldr	r1, [pc, #548]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	654b      	str	r3, [r1, #84]	; 0x54
 8007ac4:	e001      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d044      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae0:	d01b      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae6:	d805      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d022      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af0:	d00a      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007af2:	e01b      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af8:	d01d      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007afa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007afe:	d01c      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b04:	d01b      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007b06:	e011      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 f856 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b18:	e012      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3324      	adds	r3, #36	; 0x24
 8007b1e:	2102      	movs	r1, #2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 f8ff 	bl	8008d24 <RCCEx_PLL3_Config>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b2a:	e009      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b30:	e006      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b32:	bf00      	nop
 8007b34:	e004      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b36:	bf00      	nop
 8007b38:	e002      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e000      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b46:	4b67      	ldr	r3, [pc, #412]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b54:	4963      	ldr	r1, [pc, #396]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	658b      	str	r3, [r1, #88]	; 0x58
 8007b5a:	e001      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d044      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b76:	d01b      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b7c:	d805      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d022      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b86:	d00a      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007b88:	e01b      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8e:	d01d      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007b90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b94:	d01c      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007b96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b9a:	d01b      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007b9c:	e011      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 f80b 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007bae:	e012      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3324      	adds	r3, #36	; 0x24
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f001 f8b4 	bl	8008d24 <RCCEx_PLL3_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007bc0:	e009      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc6:	e006      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bc8:	bf00      	nop
 8007bca:	e004      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bcc:	bf00      	nop
 8007bce:	e002      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bd0:	bf00      	nop
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bdc:	4b41      	ldr	r3, [pc, #260]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bea:	493e      	ldr	r1, [pc, #248]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	658b      	str	r3, [r1, #88]	; 0x58
 8007bf0:	e001      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d01a      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0c:	d10a      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3324      	adds	r3, #36	; 0x24
 8007c12:	2102      	movs	r1, #2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 f885 	bl	8008d24 <RCCEx_PLL3_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c24:	4b2f      	ldr	r3, [pc, #188]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c32:	492c      	ldr	r1, [pc, #176]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	d10a      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3324      	adds	r3, #36	; 0x24
 8007c54:	2102      	movs	r1, #2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f001 f864 	bl	8008d24 <RCCEx_PLL3_Config>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c66:	4b1f      	ldr	r3, [pc, #124]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c74:	491b      	ldr	r1, [pc, #108]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d032      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c90:	d00d      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c96:	d016      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d111      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 ff8c 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007cac:	e00c      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3324      	adds	r3, #36	; 0x24
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 f835 	bl	8008d24 <RCCEx_PLL3_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007cbe:	e003      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc4:	e000      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10c      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cdc:	4901      	ldr	r1, [pc, #4]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ce2:	e003      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007ce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d02f      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d02:	d00c      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007d04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d08:	d015      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d0e:	d10f      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d10:	4b71      	ldr	r3, [pc, #452]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	4a70      	ldr	r2, [pc, #448]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d1c:	e00c      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3324      	adds	r3, #36	; 0x24
 8007d22:	2101      	movs	r1, #1
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fffd 	bl	8008d24 <RCCEx_PLL3_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d2e:	e003      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]
      break;
 8007d34:	e000      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d3e:	4b66      	ldr	r3, [pc, #408]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d4c:	4962      	ldr	r1, [pc, #392]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	654b      	str	r3, [r1, #84]	; 0x54
 8007d52:	e001      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d029      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d70:	d007      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007d72:	e00f      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d74:	4b58      	ldr	r3, [pc, #352]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	4a57      	ldr	r2, [pc, #348]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d80:	e00b      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3304      	adds	r3, #4
 8007d86:	2102      	movs	r1, #2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 ff19 	bl	8008bc0 <RCCEx_PLL2_Config>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d92:	e002      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]
      break;
 8007d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007da0:	4b4d      	ldr	r3, [pc, #308]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dac:	494a      	ldr	r1, [pc, #296]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007db2:	e001      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3324      	adds	r3, #36	; 0x24
 8007dc8:	2102      	movs	r1, #2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 ffaa 	bl	8008d24 <RCCEx_PLL3_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d02f      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dee:	d00c      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df4:	d802      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d011      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007dfa:	e00d      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e00:	d00f      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e06:	d00e      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007e08:	e006      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0a:	4b33      	ldr	r3, [pc, #204]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	4a32      	ldr	r2, [pc, #200]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e16:	e007      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e1c:	e004      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e1e:	bf00      	nop
 8007e20:	e002      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e22:	bf00      	nop
 8007e24:	e000      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d109      	bne.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e2e:	4b2a      	ldr	r3, [pc, #168]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e3a:	4927      	ldr	r1, [pc, #156]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	654b      	str	r3, [r1, #84]	; 0x54
 8007e40:	e001      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d008      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e52:	4b21      	ldr	r3, [pc, #132]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5e:	491e      	ldr	r1, [pc, #120]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d008      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e70:	4b19      	ldr	r3, [pc, #100]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e7c:	4916      	ldr	r1, [pc, #88]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00d      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	4a11      	ldr	r2, [pc, #68]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e98:	6113      	str	r3, [r2, #16]
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ea4:	490c      	ldr	r1, [pc, #48]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da08      	bge.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ebe:	4906      	ldr	r1, [pc, #24]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007ec4:	7dbb      	ldrb	r3, [r7, #22]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e000      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	58024400 	.word	0x58024400

08007edc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b090      	sub	sp, #64	; 0x40
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eea:	d150      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007eec:	4ba1      	ldr	r3, [pc, #644]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef0:	f003 0307 	and.w	r3, r3, #7
 8007ef4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d844      	bhi.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007efc:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f19 	.word	0x08007f19
 8007f08:	08007f29 	.word	0x08007f29
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	08007f81 	.word	0x08007f81
 8007f14:	08007f49 	.word	0x08007f49
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fd03 	bl	8008928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f26:	e241      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f28:	f107 0318 	add.w	r3, r7, #24
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 fa63 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f36:	e239      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f38:	f107 030c 	add.w	r3, r7, #12
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fba7 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f46:	e231      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f48:	4b8a      	ldr	r3, [pc, #552]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f58:	4b87      	ldr	r3, [pc, #540]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007f5c:	e226      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f64:	d102      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007f66:	4b85      	ldr	r3, [pc, #532]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6a:	e21f      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f72:	d102      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007f74:	4b82      	ldr	r3, [pc, #520]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f78:	e218      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f7e:	e215      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f80:	4b80      	ldr	r3, [pc, #512]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f84:	e212      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f8a:	bf00      	nop
 8007f8c:	e20e      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f94:	d14f      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007f96:	4b77      	ldr	r3, [pc, #476]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007f9e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	2b80      	cmp	r3, #128	; 0x80
 8007fa4:	d01c      	beq.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d804      	bhi.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007fb2:	e03c      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007fb4:	2bc0      	cmp	r3, #192	; 0xc0
 8007fb6:	d037      	beq.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fbc:	d018      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007fbe:	e036      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fcaf 	bl	8008928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fce:	e1ed      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd0:	f107 0318 	add.w	r3, r7, #24
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fa0f 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fde:	e1e5      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe0:	f107 030c 	add.w	r3, r7, #12
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fb53 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fee:	e1dd      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ff0:	4b60      	ldr	r3, [pc, #384]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008000:	4b5d      	ldr	r3, [pc, #372]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008004:	e1d2      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800800c:	d102      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800800e:	4b5b      	ldr	r3, [pc, #364]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008012:	e1cb      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801a:	d102      	bne.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800801c:	4b58      	ldr	r3, [pc, #352]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008020:	e1c4      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008026:	e1c1      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008028:	4b56      	ldr	r3, [pc, #344]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800802c:	e1be      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008032:	bf00      	nop
 8008034:	e1ba      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803c:	d153      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800803e:	4b4d      	ldr	r3, [pc, #308]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008042:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008046:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800804e:	d01f      	beq.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008054:	d805      	bhi.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800805a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800805e:	d00f      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008060:	e03d      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008062:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008066:	d037      	beq.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800806c:	d018      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800806e:	e036      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fc57 	bl	8008928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800807e:	e195      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008080:	f107 0318 	add.w	r3, r7, #24
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f9b7 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800808e:	e18d      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008090:	f107 030c 	add.w	r3, r7, #12
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fafb 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800809e:	e185      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080a0:	4b34      	ldr	r3, [pc, #208]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80080aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80080b0:	4b31      	ldr	r3, [pc, #196]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80080b4:	e17a      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80080b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080bc:	d102      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80080be:	4b2f      	ldr	r3, [pc, #188]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c2:	e173      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80080c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ca:	d102      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80080cc:	4b2c      	ldr	r3, [pc, #176]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d0:	e16c      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d6:	e169      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80080d8:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080dc:	e166      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e2:	bf00      	nop
 80080e4:	e162      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ec:	d15d      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80080ee:	4b21      	ldr	r3, [pc, #132]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80080f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080fe:	d01f      	beq.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008104:	d805      	bhi.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800810a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800810e:	d00f      	beq.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008110:	e047      	b.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008112:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008116:	d041      	beq.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800811c:	d018      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800811e:	e040      	b.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008124:	4618      	mov	r0, r3
 8008126:	f000 fbff 	bl	8008928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800812e:	e13d      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008130:	f107 0318 	add.w	r3, r7, #24
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f95f 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800813e:	e135      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008140:	f107 030c 	add.w	r3, r7, #12
 8008144:	4618      	mov	r0, r3
 8008146:	f000 faa3 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800814e:	e12d      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008150:	4b08      	ldr	r3, [pc, #32]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008158:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008160:	4b05      	ldr	r3, [pc, #20]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008164:	e122      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800816c:	d10c      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800816e:	4b03      	ldr	r3, [pc, #12]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008172:	e11b      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008174:	58024400 	.word	0x58024400
 8008178:	03d09000 	.word	0x03d09000
 800817c:	003d0900 	.word	0x003d0900
 8008180:	017d7840 	.word	0x017d7840
 8008184:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800818e:	d102      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008190:	4b89      	ldr	r3, [pc, #548]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008194:	e10a      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800819a:	e107      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800819c:	4b87      	ldr	r3, [pc, #540]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a0:	e104      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a6:	bf00      	nop
 80081a8:	e100      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b0:	d153      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80081b2:	4b83      	ldr	r3, [pc, #524]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80081b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80081ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c2:	d01f      	beq.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80081c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c8:	d805      	bhi.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d2:	d00f      	beq.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80081d4:	e03d      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80081d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081da:	d037      	beq.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80081dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081e0:	d018      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80081e2:	e036      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fb9d 	bl	8008928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081f2:	e0db      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f4:	f107 0318 	add.w	r3, r7, #24
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 f8fd 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008202:	e0d3      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fa41 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008212:	e0cb      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008214:	4b6a      	ldr	r3, [pc, #424]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800821c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008224:	4b67      	ldr	r3, [pc, #412]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008228:	e0c0      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800822a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008230:	d102      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008232:	4b65      	ldr	r3, [pc, #404]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008236:	e0b9      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800823e:	d102      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008240:	4b5d      	ldr	r3, [pc, #372]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008244:	e0b2      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800824a:	e0af      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800824c:	4b5b      	ldr	r3, [pc, #364]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008250:	e0ac      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008256:	bf00      	nop
 8008258:	e0a8      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008260:	d13d      	bne.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008262:	4b57      	ldr	r3, [pc, #348]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800826a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008272:	d00c      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008278:	d011      	beq.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d12b      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800827e:	f107 0318 	add.w	r3, r7, #24
 8008282:	4618      	mov	r0, r3
 8008284:	f000 f8b8 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828c:	e08e      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800828e:	f107 030c 	add.w	r3, r7, #12
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f9fc 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829c:	e086      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800829e:	4b48      	ldr	r3, [pc, #288]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80082a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80082a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80082ae:	4b45      	ldr	r3, [pc, #276]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80082b2:	e07b      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80082b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ba:	d102      	bne.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80082bc:	4b42      	ldr	r3, [pc, #264]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082c0:	e074      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80082c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c8:	d102      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80082ca:	4b3b      	ldr	r3, [pc, #236]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ce:	e06d      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d4:	e06a      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082da:	bf00      	nop
 80082dc:	e066      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e4:	d11f      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80082e6:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80082e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80082f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fa:	d008      	beq.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80082fc:	e00f      	b.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fb10 	bl	8008928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800830c:	e04e      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800830e:	f107 0318 	add.w	r3, r7, #24
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f870 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800831c:	e046      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008322:	bf00      	nop
 8008324:	e042      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800832c:	d13c      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800832e:	4b24      	ldr	r3, [pc, #144]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008332:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008336:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800833e:	d01e      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008344:	d805      	bhi.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00d      	beq.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800834a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800834e:	d00e      	beq.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008350:	e026      	b.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008356:	d01d      	beq.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800835c:	d01d      	beq.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800835e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008362:	d014      	beq.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008364:	e01c      	b.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008366:	f000 f831 	bl	80083cc <HAL_RCCEx_GetD3PCLK1Freq>
 800836a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800836c:	e01e      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800836e:	f107 0318 	add.w	r3, r7, #24
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f840 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800837c:	e016      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800837e:	f107 030c 	add.w	r3, r7, #12
 8008382:	4618      	mov	r0, r3
 8008384:	f000 f984 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800838c:	e00e      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800838e:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008392:	e00b      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008394:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008398:	e008      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800839a:	4b07      	ldr	r3, [pc, #28]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800839e:	e005      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a4:	bf00      	nop
 80083a6:	e001      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80083ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3740      	adds	r7, #64	; 0x40
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	017d7840 	.word	0x017d7840
 80083bc:	00bb8000 	.word	0x00bb8000
 80083c0:	58024400 	.word	0x58024400
 80083c4:	03d09000 	.word	0x03d09000
 80083c8:	003d0900 	.word	0x003d0900

080083cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80083d0:	f7fe fe4a 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80083d4:	4601      	mov	r1, r0
 80083d6:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	091b      	lsrs	r3, r3, #4
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	4a04      	ldr	r2, [pc, #16]	; (80083f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80083e2:	5cd3      	ldrb	r3, [r2, r3]
 80083e4:	f003 031f 	and.w	r3, r3, #31
 80083e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	58024400 	.word	0x58024400
 80083f4:	0800d024 	.word	0x0800d024

080083f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	; 0x24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008400:	4b9d      	ldr	r3, [pc, #628]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	f003 0303 	and.w	r3, r3, #3
 8008408:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800840a:	4b9b      	ldr	r3, [pc, #620]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	0b1b      	lsrs	r3, r3, #12
 8008410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008414:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008416:	4b98      	ldr	r3, [pc, #608]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	091b      	lsrs	r3, r3, #4
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008422:	4b95      	ldr	r3, [pc, #596]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	08db      	lsrs	r3, r3, #3
 8008428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	fb02 f303 	mul.w	r3, r2, r3
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 810a 	beq.w	800865a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d05a      	beq.n	8008502 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800844c:	2b01      	cmp	r3, #1
 800844e:	d302      	bcc.n	8008456 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008450:	2b02      	cmp	r3, #2
 8008452:	d078      	beq.n	8008546 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008454:	e099      	b.n	800858a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008456:	4b88      	ldr	r3, [pc, #544]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	d02d      	beq.n	80084be <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008462:	4b85      	ldr	r3, [pc, #532]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	08db      	lsrs	r3, r3, #3
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	4a83      	ldr	r2, [pc, #524]	; (800867c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800846e:	fa22 f303 	lsr.w	r3, r2, r3
 8008472:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848c:	4b7a      	ldr	r3, [pc, #488]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849c:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008680 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80084a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084bc:	e087      	b.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	ee07 3a90 	vmov	s15, r3
 80084c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80084cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d0:	4b69      	ldr	r3, [pc, #420]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008680 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80084e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008500:	e065      	b.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008514:	4b58      	ldr	r3, [pc, #352]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851c:	ee07 3a90 	vmov	s15, r3
 8008520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008524:	ed97 6a03 	vldr	s12, [r7, #12]
 8008528:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008680 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800852c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008540:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008544:	e043      	b.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008550:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800868c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008558:	4b47      	ldr	r3, [pc, #284]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008560:	ee07 3a90 	vmov	s15, r3
 8008564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008568:	ed97 6a03 	vldr	s12, [r7, #12]
 800856c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008680 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800857c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008584:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008588:	e021      	b.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008594:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008688 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859c:	4b36      	ldr	r3, [pc, #216]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008680 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085cc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80085ce:	4b2a      	ldr	r3, [pc, #168]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d2:	0a5b      	lsrs	r3, r3, #9
 80085d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f4:	ee17 2a90 	vmov	r2, s15
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80085fc:	4b1e      	ldr	r3, [pc, #120]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	0c1b      	lsrs	r3, r3, #16
 8008602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008616:	edd7 6a07 	vldr	s13, [r7, #28]
 800861a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008622:	ee17 2a90 	vmov	r2, s15
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800862a:	4b13      	ldr	r3, [pc, #76]	; (8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862e:	0e1b      	lsrs	r3, r3, #24
 8008630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008640:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008644:	edd7 6a07 	vldr	s13, [r7, #28]
 8008648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800864c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008650:	ee17 2a90 	vmov	r2, s15
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008658:	e008      	b.n	800866c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	609a      	str	r2, [r3, #8]
}
 800866c:	bf00      	nop
 800866e:	3724      	adds	r7, #36	; 0x24
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	58024400 	.word	0x58024400
 800867c:	03d09000 	.word	0x03d09000
 8008680:	46000000 	.word	0x46000000
 8008684:	4c742400 	.word	0x4c742400
 8008688:	4a742400 	.word	0x4a742400
 800868c:	4bbebc20 	.word	0x4bbebc20

08008690 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008690:	b480      	push	{r7}
 8008692:	b089      	sub	sp, #36	; 0x24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008698:	4b9d      	ldr	r3, [pc, #628]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80086a2:	4b9b      	ldr	r3, [pc, #620]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	0d1b      	lsrs	r3, r3, #20
 80086a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80086ae:	4b98      	ldr	r3, [pc, #608]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	0a1b      	lsrs	r3, r3, #8
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80086ba:	4b95      	ldr	r3, [pc, #596]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	08db      	lsrs	r3, r3, #3
 80086c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	fb02 f303 	mul.w	r3, r2, r3
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 810a 	beq.w	80088f2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d05a      	beq.n	800879a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d302      	bcc.n	80086ee <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d078      	beq.n	80087de <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80086ec:	e099      	b.n	8008822 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ee:	4b88      	ldr	r3, [pc, #544]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d02d      	beq.n	8008756 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086fa:	4b85      	ldr	r3, [pc, #532]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	08db      	lsrs	r3, r3, #3
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	4a83      	ldr	r2, [pc, #524]	; (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008706:	fa22 f303 	lsr.w	r3, r2, r3
 800870a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	ee07 3a90 	vmov	s15, r3
 800871c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008724:	4b7a      	ldr	r3, [pc, #488]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008734:	ed97 6a03 	vldr	s12, [r7, #12]
 8008738:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800873c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008750:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008754:	e087      	b.n	8008866 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008760:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800891c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008768:	4b69      	ldr	r3, [pc, #420]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008770:	ee07 3a90 	vmov	s15, r3
 8008774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008778:	ed97 6a03 	vldr	s12, [r7, #12]
 800877c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800878c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008798:	e065      	b.n	8008866 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80087a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ac:	4b58      	ldr	r3, [pc, #352]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80087c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087dc:	e043      	b.n	8008866 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008924 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80087ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f0:	4b47      	ldr	r3, [pc, #284]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008800:	ed97 6a03 	vldr	s12, [r7, #12]
 8008804:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008820:	e021      	b.n	8008866 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008834:	4b36      	ldr	r3, [pc, #216]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883c:	ee07 3a90 	vmov	s15, r3
 8008840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008844:	ed97 6a03 	vldr	s12, [r7, #12]
 8008848:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800884c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008864:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008866:	4b2a      	ldr	r3, [pc, #168]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	0a5b      	lsrs	r3, r3, #9
 800886c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800887c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008880:	edd7 6a07 	vldr	s13, [r7, #28]
 8008884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888c:	ee17 2a90 	vmov	r2, s15
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008894:	4b1e      	ldr	r3, [pc, #120]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	0c1b      	lsrs	r3, r3, #16
 800889a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ba:	ee17 2a90 	vmov	r2, s15
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80088c2:	4b13      	ldr	r3, [pc, #76]	; (8008910 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	0e1b      	lsrs	r3, r3, #24
 80088c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80088e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e8:	ee17 2a90 	vmov	r2, s15
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80088f0:	e008      	b.n	8008904 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	609a      	str	r2, [r3, #8]
}
 8008904:	bf00      	nop
 8008906:	3724      	adds	r7, #36	; 0x24
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	58024400 	.word	0x58024400
 8008914:	03d09000 	.word	0x03d09000
 8008918:	46000000 	.word	0x46000000
 800891c:	4c742400 	.word	0x4c742400
 8008920:	4a742400 	.word	0x4a742400
 8008924:	4bbebc20 	.word	0x4bbebc20

08008928 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008928:	b480      	push	{r7}
 800892a:	b089      	sub	sp, #36	; 0x24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008930:	4b9d      	ldr	r3, [pc, #628]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800893a:	4b9b      	ldr	r3, [pc, #620]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	091b      	lsrs	r3, r3, #4
 8008940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008944:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008946:	4b98      	ldr	r3, [pc, #608]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008950:	4b95      	ldr	r3, [pc, #596]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008954:	08db      	lsrs	r3, r3, #3
 8008956:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	fb02 f303 	mul.w	r3, r2, r3
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008968:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 810a 	beq.w	8008b88 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d05a      	beq.n	8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800897a:	2b01      	cmp	r3, #1
 800897c:	d302      	bcc.n	8008984 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800897e:	2b02      	cmp	r3, #2
 8008980:	d078      	beq.n	8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008982:	e099      	b.n	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008984:	4b88      	ldr	r3, [pc, #544]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0320 	and.w	r3, r3, #32
 800898c:	2b00      	cmp	r3, #0
 800898e:	d02d      	beq.n	80089ec <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008990:	4b85      	ldr	r3, [pc, #532]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	08db      	lsrs	r3, r3, #3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	4a84      	ldr	r2, [pc, #528]	; (8008bac <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
 80089a0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b7b      	ldr	r3, [pc, #492]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80089ea:	e087      	b.n	8008afc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b6a      	ldr	r3, [pc, #424]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a2e:	e065      	b.n	8008afc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b59      	ldr	r3, [pc, #356]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a72:	e043      	b.n	8008afc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b48      	ldr	r3, [pc, #288]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ab6:	e021      	b.n	8008afc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b37      	ldr	r3, [pc, #220]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008afa:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008afc:	4b2a      	ldr	r3, [pc, #168]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	0a5b      	lsrs	r3, r3, #9
 8008b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b22:	ee17 2a90 	vmov	r2, s15
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008b2a:	4b1f      	ldr	r3, [pc, #124]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2e:	0c1b      	lsrs	r3, r3, #16
 8008b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b34:	ee07 3a90 	vmov	s15, r3
 8008b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b50:	ee17 2a90 	vmov	r2, s15
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008b58:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5c:	0e1b      	lsrs	r3, r3, #24
 8008b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b7e:	ee17 2a90 	vmov	r2, s15
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008b86:	e008      	b.n	8008b9a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	609a      	str	r2, [r3, #8]
}
 8008b9a:	bf00      	nop
 8008b9c:	3724      	adds	r7, #36	; 0x24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	58024400 	.word	0x58024400
 8008bac:	03d09000 	.word	0x03d09000
 8008bb0:	46000000 	.word	0x46000000
 8008bb4:	4c742400 	.word	0x4c742400
 8008bb8:	4a742400 	.word	0x4a742400
 8008bbc:	4bbebc20 	.word	0x4bbebc20

08008bc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bce:	4b53      	ldr	r3, [pc, #332]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	f003 0303 	and.w	r3, r3, #3
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d101      	bne.n	8008bde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e099      	b.n	8008d12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008bde:	4b4f      	ldr	r3, [pc, #316]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a4e      	ldr	r2, [pc, #312]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008be4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bea:	f7f9 fae5 	bl	80021b8 <HAL_GetTick>
 8008bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bf0:	e008      	b.n	8008c04 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008bf2:	f7f9 fae1 	bl	80021b8 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d901      	bls.n	8008c04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e086      	b.n	8008d12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c04:	4b45      	ldr	r3, [pc, #276]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1f0      	bne.n	8008bf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c10:	4b42      	ldr	r3, [pc, #264]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	031b      	lsls	r3, r3, #12
 8008c1e:	493f      	ldr	r1, [pc, #252]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	628b      	str	r3, [r1, #40]	; 0x28
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	025b      	lsls	r3, r3, #9
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	041b      	lsls	r3, r3, #16
 8008c42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	061b      	lsls	r3, r3, #24
 8008c50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c54:	4931      	ldr	r1, [pc, #196]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c5a:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	492d      	ldr	r1, [pc, #180]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c6c:	4b2b      	ldr	r3, [pc, #172]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	f023 0220 	bic.w	r2, r3, #32
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	4928      	ldr	r1, [pc, #160]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c7e:	4b27      	ldr	r3, [pc, #156]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c82:	4a26      	ldr	r2, [pc, #152]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c84:	f023 0310 	bic.w	r3, r3, #16
 8008c88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c8a:	4b24      	ldr	r3, [pc, #144]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c8e:	4b24      	ldr	r3, [pc, #144]	; (8008d20 <RCCEx_PLL2_Config+0x160>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	69d2      	ldr	r2, [r2, #28]
 8008c96:	00d2      	lsls	r2, r2, #3
 8008c98:	4920      	ldr	r1, [pc, #128]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c9e:	4b1f      	ldr	r3, [pc, #124]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca2:	4a1e      	ldr	r2, [pc, #120]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008ca4:	f043 0310 	orr.w	r3, r3, #16
 8008ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	4a19      	ldr	r2, [pc, #100]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cbc:	e00f      	b.n	8008cde <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d106      	bne.n	8008cd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008cc4:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	4a14      	ldr	r2, [pc, #80]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cd0:	e005      	b.n	8008cde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008cd2:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	4a11      	ldr	r2, [pc, #68]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008cde:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a0e      	ldr	r2, [pc, #56]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cea:	f7f9 fa65 	bl	80021b8 <HAL_GetTick>
 8008cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cf0:	e008      	b.n	8008d04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008cf2:	f7f9 fa61 	bl	80021b8 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e006      	b.n	8008d12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d04:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <RCCEx_PLL2_Config+0x15c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	ffff0007 	.word	0xffff0007

08008d24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d32:	4b53      	ldr	r3, [pc, #332]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d101      	bne.n	8008d42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e099      	b.n	8008e76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d42:	4b4f      	ldr	r3, [pc, #316]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a4e      	ldr	r2, [pc, #312]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d4e:	f7f9 fa33 	bl	80021b8 <HAL_GetTick>
 8008d52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d54:	e008      	b.n	8008d68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d56:	f7f9 fa2f 	bl	80021b8 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d901      	bls.n	8008d68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e086      	b.n	8008e76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d68:	4b45      	ldr	r3, [pc, #276]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f0      	bne.n	8008d56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d74:	4b42      	ldr	r3, [pc, #264]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	051b      	lsls	r3, r3, #20
 8008d82:	493f      	ldr	r1, [pc, #252]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	628b      	str	r3, [r1, #40]	; 0x28
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	025b      	lsls	r3, r3, #9
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	041b      	lsls	r3, r3, #16
 8008da6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	061b      	lsls	r3, r3, #24
 8008db4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008db8:	4931      	ldr	r1, [pc, #196]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008dbe:	4b30      	ldr	r3, [pc, #192]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	492d      	ldr	r1, [pc, #180]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008dd0:	4b2b      	ldr	r3, [pc, #172]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	4928      	ldr	r1, [pc, #160]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008de2:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de6:	4a26      	ldr	r2, [pc, #152]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008dee:	4b24      	ldr	r3, [pc, #144]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008df2:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <RCCEx_PLL3_Config+0x160>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	69d2      	ldr	r2, [r2, #28]
 8008dfa:	00d2      	lsls	r2, r2, #3
 8008dfc:	4920      	ldr	r1, [pc, #128]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e02:	4b1f      	ldr	r3, [pc, #124]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d106      	bne.n	8008e22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e14:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e20:	e00f      	b.n	8008e42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d106      	bne.n	8008e36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e28:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	4a14      	ldr	r2, [pc, #80]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e34:	e005      	b.n	8008e42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e36:	4b12      	ldr	r3, [pc, #72]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e42:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a0e      	ldr	r2, [pc, #56]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e4e:	f7f9 f9b3 	bl	80021b8 <HAL_GetTick>
 8008e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e54:	e008      	b.n	8008e68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e56:	f7f9 f9af 	bl	80021b8 <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d901      	bls.n	8008e68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e006      	b.n	8008e76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e68:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <RCCEx_PLL3_Config+0x15c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0f0      	beq.n	8008e56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	58024400 	.word	0x58024400
 8008e84:	ffff0007 	.word	0xffff0007

08008e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e01d      	b.n	8008ed6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7f8 fd86 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	f000 fa4c 	bl	8009364 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <HAL_TIM_Base_Start_IT+0x50>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b06      	cmp	r3, #6
 8008f08:	d00b      	beq.n	8008f22 <HAL_TIM_Base_Start_IT+0x42>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f10:	d007      	beq.n	8008f22 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0201 	orr.w	r2, r2, #1
 8008f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	00010007 	.word	0x00010007

08008f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d122      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d11b      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f06f 0202 	mvn.w	r2, #2
 8008f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f9d6 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008f7c:	e005      	b.n	8008f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f9c8 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f9d9 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f003 0304 	and.w	r3, r3, #4
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d122      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d11b      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f06f 0204 	mvn.w	r2, #4
 8008fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f9ac 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8008fd0:	e005      	b.n	8008fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f99e 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f9af 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	f003 0308 	and.w	r3, r3, #8
 8008fee:	2b08      	cmp	r3, #8
 8008ff0:	d122      	bne.n	8009038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f003 0308 	and.w	r3, r3, #8
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d11b      	bne.n	8009038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f06f 0208 	mvn.w	r2, #8
 8009008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2204      	movs	r2, #4
 800900e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f982 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8009024:	e005      	b.n	8009032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f974 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f985 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	f003 0310 	and.w	r3, r3, #16
 8009042:	2b10      	cmp	r3, #16
 8009044:	d122      	bne.n	800908c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f003 0310 	and.w	r3, r3, #16
 8009050:	2b10      	cmp	r3, #16
 8009052:	d11b      	bne.n	800908c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f06f 0210 	mvn.w	r2, #16
 800905c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2208      	movs	r2, #8
 8009062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f958 	bl	8009328 <HAL_TIM_IC_CaptureCallback>
 8009078:	e005      	b.n	8009086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f94a 	bl	8009314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f95b 	bl	800933c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b01      	cmp	r3, #1
 8009098:	d10e      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d107      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f06f 0201 	mvn.w	r2, #1
 80090b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7f7 fcf2 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c2:	2b80      	cmp	r3, #128	; 0x80
 80090c4:	d10e      	bne.n	80090e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d0:	2b80      	cmp	r3, #128	; 0x80
 80090d2:	d107      	bne.n	80090e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fb0a 	bl	80096f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f2:	d10e      	bne.n	8009112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fe:	2b80      	cmp	r3, #128	; 0x80
 8009100:	d107      	bne.n	8009112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800910a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fafd 	bl	800970c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b40      	cmp	r3, #64	; 0x40
 800911e:	d10e      	bne.n	800913e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b40      	cmp	r3, #64	; 0x40
 800912c:	d107      	bne.n	800913e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f909 	bl	8009350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f003 0320 	and.w	r3, r3, #32
 8009148:	2b20      	cmp	r3, #32
 800914a:	d10e      	bne.n	800916a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b20      	cmp	r3, #32
 8009158:	d107      	bne.n	800916a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f06f 0220 	mvn.w	r2, #32
 8009162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fabd 	bl	80096e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_TIM_ConfigClockSource+0x18>
 8009188:	2302      	movs	r3, #2
 800918a:	e0b7      	b.n	80092fc <HAL_TIM_ConfigClockSource+0x188>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4b57      	ldr	r3, [pc, #348]	; (8009304 <HAL_TIM_ConfigClockSource+0x190>)
 80091a8:	4013      	ands	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b70      	cmp	r3, #112	; 0x70
 80091c2:	d02e      	beq.n	8009222 <HAL_TIM_ConfigClockSource+0xae>
 80091c4:	2b70      	cmp	r3, #112	; 0x70
 80091c6:	d812      	bhi.n	80091ee <HAL_TIM_ConfigClockSource+0x7a>
 80091c8:	2b30      	cmp	r3, #48	; 0x30
 80091ca:	f000 8084 	beq.w	80092d6 <HAL_TIM_ConfigClockSource+0x162>
 80091ce:	2b30      	cmp	r3, #48	; 0x30
 80091d0:	d806      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x6c>
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d07f      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x162>
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	d07d      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x162>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d07b      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80091de:	e084      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80091e0:	2b50      	cmp	r3, #80	; 0x50
 80091e2:	d048      	beq.n	8009276 <HAL_TIM_ConfigClockSource+0x102>
 80091e4:	2b60      	cmp	r3, #96	; 0x60
 80091e6:	d056      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0x122>
 80091e8:	2b40      	cmp	r3, #64	; 0x40
 80091ea:	d064      	beq.n	80092b6 <HAL_TIM_ConfigClockSource+0x142>
      break;
 80091ec:	e07d      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80091ee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091f2:	d070      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x162>
 80091f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091f8:	d809      	bhi.n	800920e <HAL_TIM_ConfigClockSource+0x9a>
 80091fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091fe:	d027      	beq.n	8009250 <HAL_TIM_ConfigClockSource+0xdc>
 8009200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009204:	d067      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x162>
 8009206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920a:	d06d      	beq.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800920c:	e06d      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800920e:	4a3e      	ldr	r2, [pc, #248]	; (8009308 <HAL_TIM_ConfigClockSource+0x194>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d060      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x162>
 8009214:	4a3d      	ldr	r2, [pc, #244]	; (800930c <HAL_TIM_ConfigClockSource+0x198>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d05d      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x162>
 800921a:	4a3d      	ldr	r2, [pc, #244]	; (8009310 <HAL_TIM_ConfigClockSource+0x19c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d05a      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8009220:	e063      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	6899      	ldr	r1, [r3, #8]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f000 f9af 	bl	8009594 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009244:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	609a      	str	r2, [r3, #8]
      break;
 800924e:	e04c      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6818      	ldr	r0, [r3, #0]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	6899      	ldr	r1, [r3, #8]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f000 f998 	bl	8009594 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009272:	609a      	str	r2, [r3, #8]
      break;
 8009274:	e039      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	6859      	ldr	r1, [r3, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	461a      	mov	r2, r3
 8009284:	f000 f908 	bl	8009498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2150      	movs	r1, #80	; 0x50
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f962 	bl	8009558 <TIM_ITRx_SetConfig>
      break;
 8009294:	e029      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	6859      	ldr	r1, [r3, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	461a      	mov	r2, r3
 80092a4:	f000 f927 	bl	80094f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2160      	movs	r1, #96	; 0x60
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f952 	bl	8009558 <TIM_ITRx_SetConfig>
      break;
 80092b4:	e019      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	6859      	ldr	r1, [r3, #4]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	461a      	mov	r2, r3
 80092c4:	f000 f8e8 	bl	8009498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2140      	movs	r1, #64	; 0x40
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f942 	bl	8009558 <TIM_ITRx_SetConfig>
      break;
 80092d4:	e009      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4619      	mov	r1, r3
 80092e0:	4610      	mov	r0, r2
 80092e2:	f000 f939 	bl	8009558 <TIM_ITRx_SetConfig>
      break;
 80092e6:	e000      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x176>
      break;
 80092e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	ffceff88 	.word	0xffceff88
 8009308:	00100030 	.word	0x00100030
 800930c:	00100040 	.word	0x00100040
 8009310:	00100020 	.word	0x00100020

08009314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a40      	ldr	r2, [pc, #256]	; (8009478 <TIM_Base_SetConfig+0x114>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d013      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009382:	d00f      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a3d      	ldr	r2, [pc, #244]	; (800947c <TIM_Base_SetConfig+0x118>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00b      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a3c      	ldr	r2, [pc, #240]	; (8009480 <TIM_Base_SetConfig+0x11c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d007      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a3b      	ldr	r2, [pc, #236]	; (8009484 <TIM_Base_SetConfig+0x120>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d003      	beq.n	80093a4 <TIM_Base_SetConfig+0x40>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a3a      	ldr	r2, [pc, #232]	; (8009488 <TIM_Base_SetConfig+0x124>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d108      	bne.n	80093b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a2f      	ldr	r2, [pc, #188]	; (8009478 <TIM_Base_SetConfig+0x114>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d01f      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c4:	d01b      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a2c      	ldr	r2, [pc, #176]	; (800947c <TIM_Base_SetConfig+0x118>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d017      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a2b      	ldr	r2, [pc, #172]	; (8009480 <TIM_Base_SetConfig+0x11c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a2a      	ldr	r2, [pc, #168]	; (8009484 <TIM_Base_SetConfig+0x120>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00f      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a29      	ldr	r2, [pc, #164]	; (8009488 <TIM_Base_SetConfig+0x124>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d00b      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a28      	ldr	r2, [pc, #160]	; (800948c <TIM_Base_SetConfig+0x128>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d007      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a27      	ldr	r2, [pc, #156]	; (8009490 <TIM_Base_SetConfig+0x12c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <TIM_Base_SetConfig+0x9a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a26      	ldr	r2, [pc, #152]	; (8009494 <TIM_Base_SetConfig+0x130>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d108      	bne.n	8009410 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a10      	ldr	r2, [pc, #64]	; (8009478 <TIM_Base_SetConfig+0x114>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00f      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a12      	ldr	r2, [pc, #72]	; (8009488 <TIM_Base_SetConfig+0x124>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d00b      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a11      	ldr	r2, [pc, #68]	; (800948c <TIM_Base_SetConfig+0x128>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d007      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a10      	ldr	r2, [pc, #64]	; (8009490 <TIM_Base_SetConfig+0x12c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d003      	beq.n	800945c <TIM_Base_SetConfig+0xf8>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a0f      	ldr	r2, [pc, #60]	; (8009494 <TIM_Base_SetConfig+0x130>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d103      	bne.n	8009464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	615a      	str	r2, [r3, #20]
}
 800946a:	bf00      	nop
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	40010000 	.word	0x40010000
 800947c:	40000400 	.word	0x40000400
 8009480:	40000800 	.word	0x40000800
 8009484:	40000c00 	.word	0x40000c00
 8009488:	40010400 	.word	0x40010400
 800948c:	40014000 	.word	0x40014000
 8009490:	40014400 	.word	0x40014400
 8009494:	40014800 	.word	0x40014800

08009498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	f023 0201 	bic.w	r2, r3, #1
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f023 030a 	bic.w	r3, r3, #10
 80094d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4313      	orrs	r3, r2
 80094dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	621a      	str	r2, [r3, #32]
}
 80094ea:	bf00      	nop
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b087      	sub	sp, #28
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	f023 0210 	bic.w	r2, r3, #16
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	031b      	lsls	r3, r3, #12
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4313      	orrs	r3, r2
 800953c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	621a      	str	r2, [r3, #32]
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
	...

08009558 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <TIM_ITRx_SetConfig+0x38>)
 800956c:	4013      	ands	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	f043 0307 	orr.w	r3, r3, #7
 800957a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	609a      	str	r2, [r3, #8]
}
 8009582:	bf00      	nop
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	ffcfff8f 	.word	0xffcfff8f

08009594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	021a      	lsls	r2, r3, #8
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	431a      	orrs	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	4313      	orrs	r3, r2
 80095c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	609a      	str	r2, [r3, #8]
}
 80095c8:	bf00      	nop
 80095ca:	371c      	adds	r7, #28
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d101      	bne.n	80095ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095e8:	2302      	movs	r3, #2
 80095ea:	e068      	b.n	80096be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a2e      	ldr	r2, [pc, #184]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d004      	beq.n	8009620 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a2d      	ldr	r2, [pc, #180]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d108      	bne.n	8009632 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009626:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4313      	orrs	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009638:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01d      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965e:	d018      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1b      	ldr	r2, [pc, #108]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d013      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a1a      	ldr	r2, [pc, #104]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00e      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a18      	ldr	r2, [pc, #96]	; (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d009      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a13      	ldr	r2, [pc, #76]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d004      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a14      	ldr	r2, [pc, #80]	; (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d10c      	bne.n	80096ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	40010000 	.word	0x40010000
 80096d0:	40010400 	.word	0x40010400
 80096d4:	40000400 	.word	0x40000400
 80096d8:	40000800 	.word	0x40000800
 80096dc:	40000c00 	.word	0x40000c00
 80096e0:	40001800 	.word	0x40001800

080096e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e042      	b.n	80097b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009738:	2b00      	cmp	r3, #0
 800973a:	d106      	bne.n	800974a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7f8 f9a1 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2224      	movs	r2, #36	; 0x24
 800974e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0201 	bic.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fc3c 	bl	8009fe0 <UART_SetConfig>
 8009768:	4603      	mov	r3, r0
 800976a:	2b01      	cmp	r3, #1
 800976c:	d101      	bne.n	8009772 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e022      	b.n	80097b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f002 fdae 	bl	800c2dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800978e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689a      	ldr	r2, [r3, #8]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800979e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 0201 	orr.w	r2, r2, #1
 80097ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f002 fe35 	bl	800c420 <UART_CheckIdleState>
 80097b6:	4603      	mov	r3, r0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08a      	sub	sp, #40	; 0x28
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	4613      	mov	r3, r2
 80097ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097d6:	2b20      	cmp	r3, #32
 80097d8:	f040 8083 	bne.w	80098e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <HAL_UART_Transmit+0x28>
 80097e2:	88fb      	ldrh	r3, [r7, #6]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e07b      	b.n	80098e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d101      	bne.n	80097fa <HAL_UART_Transmit+0x3a>
 80097f6:	2302      	movs	r3, #2
 80097f8:	e074      	b.n	80098e4 <HAL_UART_Transmit+0x124>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2221      	movs	r2, #33	; 0x21
 800980e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009812:	f7f8 fcd1 	bl	80021b8 <HAL_GetTick>
 8009816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	88fa      	ldrh	r2, [r7, #6]
 800981c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009830:	d108      	bne.n	8009844 <HAL_UART_Transmit+0x84>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d104      	bne.n	8009844 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	e003      	b.n	800984c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009848:	2300      	movs	r3, #0
 800984a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800984c:	e02c      	b.n	80098a8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2200      	movs	r2, #0
 8009856:	2180      	movs	r1, #128	; 0x80
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f002 fe29 	bl	800c4b0 <UART_WaitOnFlagUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e03d      	b.n	80098e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10b      	bne.n	8009886 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800987c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	3302      	adds	r3, #2
 8009882:	61bb      	str	r3, [r7, #24]
 8009884:	e007      	b.n	8009896 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	3301      	adds	r3, #1
 8009894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800989c:	b29b      	uxth	r3, r3
 800989e:	3b01      	subs	r3, #1
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1cc      	bne.n	800984e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2200      	movs	r2, #0
 80098bc:	2140      	movs	r1, #64	; 0x40
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f002 fdf6 	bl	800c4b0 <UART_WaitOnFlagUntilTimeout>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e00a      	b.n	80098e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	e000      	b.n	80098e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80098e2:	2302      	movs	r3, #2
  }
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009900:	2b20      	cmp	r3, #32
 8009902:	d168      	bne.n	80099d6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <HAL_UART_Transmit_IT+0x24>
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e061      	b.n	80099d8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d101      	bne.n	8009922 <HAL_UART_Transmit_IT+0x36>
 800991e:	2302      	movs	r3, #2
 8009920:	e05a      	b.n	80099d8 <HAL_UART_Transmit_IT+0xec>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	88fa      	ldrh	r2, [r7, #6]
 800993c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2221      	movs	r2, #33	; 0x21
 8009952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800995a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800995e:	d11c      	bne.n	800999a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009968:	d107      	bne.n	800997a <HAL_UART_Transmit_IT+0x8e>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d103      	bne.n	800997a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4a1b      	ldr	r2, [pc, #108]	; (80099e4 <HAL_UART_Transmit_IT+0xf8>)
 8009976:	671a      	str	r2, [r3, #112]	; 0x70
 8009978:	e002      	b.n	8009980 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4a1a      	ldr	r2, [pc, #104]	; (80099e8 <HAL_UART_Transmit_IT+0xfc>)
 800997e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009996:	609a      	str	r2, [r3, #8]
 8009998:	e01b      	b.n	80099d2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a2:	d107      	bne.n	80099b4 <HAL_UART_Transmit_IT+0xc8>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d103      	bne.n	80099b4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4a0f      	ldr	r2, [pc, #60]	; (80099ec <HAL_UART_Transmit_IT+0x100>)
 80099b0:	671a      	str	r2, [r3, #112]	; 0x70
 80099b2:	e002      	b.n	80099ba <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4a0e      	ldr	r2, [pc, #56]	; (80099f0 <HAL_UART_Transmit_IT+0x104>)
 80099b8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099d0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	e000      	b.n	80099d8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80099d6:	2302      	movs	r3, #2
  }
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	0800c8ef 	.word	0x0800c8ef
 80099e8:	0800c855 	.word	0x0800c855
 80099ec:	0800c7d7 	.word	0x0800c7d7
 80099f0:	0800c763 	.word	0x0800c763

080099f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a08:	2b20      	cmp	r3, #32
 8009a0a:	f040 80bc 	bne.w	8009b86 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <HAL_UART_Receive_IT+0x26>
 8009a14:	88fb      	ldrh	r3, [r7, #6]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e0b4      	b.n	8009b88 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_UART_Receive_IT+0x38>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e0ad      	b.n	8009b88 <HAL_UART_Receive_IT+0x194>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	88fa      	ldrh	r2, [r7, #6]
 8009a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	88fa      	ldrh	r2, [r7, #6]
 8009a46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a58:	d10e      	bne.n	8009a78 <HAL_UART_Receive_IT+0x84>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d105      	bne.n	8009a6e <HAL_UART_Receive_IT+0x7a>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009a68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a6c:	e02d      	b.n	8009aca <HAL_UART_Receive_IT+0xd6>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	22ff      	movs	r2, #255	; 0xff
 8009a72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a76:	e028      	b.n	8009aca <HAL_UART_Receive_IT+0xd6>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10d      	bne.n	8009a9c <HAL_UART_Receive_IT+0xa8>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d104      	bne.n	8009a92 <HAL_UART_Receive_IT+0x9e>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	22ff      	movs	r2, #255	; 0xff
 8009a8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a90:	e01b      	b.n	8009aca <HAL_UART_Receive_IT+0xd6>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	227f      	movs	r2, #127	; 0x7f
 8009a96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a9a:	e016      	b.n	8009aca <HAL_UART_Receive_IT+0xd6>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aa4:	d10d      	bne.n	8009ac2 <HAL_UART_Receive_IT+0xce>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <HAL_UART_Receive_IT+0xc4>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	227f      	movs	r2, #127	; 0x7f
 8009ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009ab6:	e008      	b.n	8009aca <HAL_UART_Receive_IT+0xd6>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	223f      	movs	r2, #63	; 0x3f
 8009abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009ac0:	e003      	b.n	8009aca <HAL_UART_Receive_IT+0xd6>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2222      	movs	r2, #34	; 0x22
 8009ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 0201 	orr.w	r2, r2, #1
 8009ae8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af2:	d12a      	bne.n	8009b4a <HAL_UART_Receive_IT+0x156>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009afa:	88fa      	ldrh	r2, [r7, #6]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d324      	bcc.n	8009b4a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b08:	d107      	bne.n	8009b1a <HAL_UART_Receive_IT+0x126>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d103      	bne.n	8009b1a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4a1f      	ldr	r2, [pc, #124]	; (8009b94 <HAL_UART_Receive_IT+0x1a0>)
 8009b16:	66da      	str	r2, [r3, #108]	; 0x6c
 8009b18:	e002      	b.n	8009b20 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	4a1e      	ldr	r2, [pc, #120]	; (8009b98 <HAL_UART_Receive_IT+0x1a4>)
 8009b1e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b36:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689a      	ldr	r2, [r3, #8]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009b46:	609a      	str	r2, [r3, #8]
 8009b48:	e01b      	b.n	8009b82 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b52:	d107      	bne.n	8009b64 <HAL_UART_Receive_IT+0x170>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d103      	bne.n	8009b64 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4a0f      	ldr	r2, [pc, #60]	; (8009b9c <HAL_UART_Receive_IT+0x1a8>)
 8009b60:	66da      	str	r2, [r3, #108]	; 0x6c
 8009b62:	e002      	b.n	8009b6a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4a0e      	ldr	r2, [pc, #56]	; (8009ba0 <HAL_UART_Receive_IT+0x1ac>)
 8009b68:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009b80:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e000      	b.n	8009b88 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009b86:	2302      	movs	r3, #2
  }
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	0800cc25 	.word	0x0800cc25
 8009b98:	0800cb1d 	.word	0x0800cb1d
 8009b9c:	0800ca71 	.word	0x0800ca71
 8009ba0:	0800c9c7 	.word	0x0800c9c7

08009ba4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bb8:	2b20      	cmp	r3, #32
 8009bba:	d170      	bne.n	8009c9e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <HAL_UART_Receive_DMA+0x24>
 8009bc2:	88fb      	ldrh	r3, [r7, #6]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e069      	b.n	8009ca0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_UART_Receive_DMA+0x36>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e062      	b.n	8009ca0 <HAL_UART_Receive_DMA+0xfc>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	88fa      	ldrh	r2, [r7, #6]
 8009bec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2222      	movs	r2, #34	; 0x22
 8009bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d02c      	beq.n	8009c62 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c0c:	4a26      	ldr	r2, [pc, #152]	; (8009ca8 <HAL_UART_Receive_DMA+0x104>)
 8009c0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c14:	4a25      	ldr	r2, [pc, #148]	; (8009cac <HAL_UART_Receive_DMA+0x108>)
 8009c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c1c:	4a24      	ldr	r2, [pc, #144]	; (8009cb0 <HAL_UART_Receive_DMA+0x10c>)
 8009c1e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c24:	2200      	movs	r2, #0
 8009c26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3324      	adds	r3, #36	; 0x24
 8009c32:	4619      	mov	r1, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c38:	461a      	mov	r2, r3
 8009c3a:	88fb      	ldrh	r3, [r7, #6]
 8009c3c:	f7fa f936 	bl	8003eac <HAL_DMA_Start_IT>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00d      	beq.n	8009c62 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2210      	movs	r2, #16
 8009c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2220      	movs	r2, #32
 8009c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e01e      	b.n	8009ca0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c78:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	689a      	ldr	r2, [r3, #8]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f042 0201 	orr.w	r2, r2, #1
 8009c88:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c98:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e000      	b.n	8009ca0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009c9e:	2302      	movs	r3, #2
  }
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	0800c635 	.word	0x0800c635
 8009cac:	0800c69b 	.word	0x0800c69b
 8009cb0:	0800c6b7 	.word	0x0800c6b7

08009cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009cd4:	69fa      	ldr	r2, [r7, #28]
 8009cd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009cda:	4013      	ands	r3, r2
 8009cdc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d118      	bne.n	8009d16 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d013      	beq.n	8009d16 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	f003 0320 	and.w	r3, r3, #32
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d104      	bne.n	8009d02 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d009      	beq.n	8009d16 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 8145 	beq.w	8009f96 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	4798      	blx	r3
      }
      return;
 8009d14:	e13f      	b.n	8009f96 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80e8 	beq.w	8009eee <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	4ba1      	ldr	r3, [pc, #644]	; (8009fa8 <HAL_UART_IRQHandler+0x2f4>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d105      	bne.n	8009d34 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	4ba0      	ldr	r3, [pc, #640]	; (8009fac <HAL_UART_IRQHandler+0x2f8>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 80dd 	beq.w	8009eee <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d010      	beq.n	8009d60 <HAL_UART_IRQHandler+0xac>
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00b      	beq.n	8009d60 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d56:	f043 0201 	orr.w	r2, r3, #1
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d010      	beq.n	8009d8c <HAL_UART_IRQHandler+0xd8>
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2202      	movs	r2, #2
 8009d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d82:	f043 0204 	orr.w	r2, r3, #4
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f003 0304 	and.w	r3, r3, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d010      	beq.n	8009db8 <HAL_UART_IRQHandler+0x104>
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2204      	movs	r2, #4
 8009da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dae:	f043 0202 	orr.w	r2, r3, #2
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	f003 0308 	and.w	r3, r3, #8
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d015      	beq.n	8009dee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	f003 0320 	and.w	r3, r3, #32
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d104      	bne.n	8009dd6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	4b76      	ldr	r3, [pc, #472]	; (8009fa8 <HAL_UART_IRQHandler+0x2f4>)
 8009dd0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00b      	beq.n	8009dee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2208      	movs	r2, #8
 8009ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de4:	f043 0208 	orr.w	r2, r3, #8
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d011      	beq.n	8009e1c <HAL_UART_IRQHandler+0x168>
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00c      	beq.n	8009e1c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e12:	f043 0220 	orr.w	r2, r3, #32
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 80b9 	beq.w	8009f9a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	f003 0320 	and.w	r3, r3, #32
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d104      	bne.n	8009e46 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d007      	beq.n	8009e56 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e68:	2b40      	cmp	r3, #64	; 0x40
 8009e6a:	d004      	beq.n	8009e76 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d031      	beq.n	8009eda <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f002 fbb8 	bl	800c5ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e86:	2b40      	cmp	r3, #64	; 0x40
 8009e88:	d123      	bne.n	8009ed2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d013      	beq.n	8009eca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ea6:	4a42      	ldr	r2, [pc, #264]	; (8009fb0 <HAL_UART_IRQHandler+0x2fc>)
 8009ea8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fa fa66 	bl	8004380 <HAL_DMA_Abort_IT>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d017      	beq.n	8009eea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec8:	e00f      	b.n	8009eea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f87c 	bl	8009fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed0:	e00b      	b.n	8009eea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f878 	bl	8009fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed8:	e007      	b.n	8009eea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f874 	bl	8009fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009ee8:	e057      	b.n	8009f9a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eea:	bf00      	nop
    return;
 8009eec:	e055      	b.n	8009f9a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00d      	beq.n	8009f14 <HAL_UART_IRQHandler+0x260>
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d008      	beq.n	8009f14 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f002 ff0d 	bl	800cd2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f12:	e045      	b.n	8009fa0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d012      	beq.n	8009f44 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d104      	bne.n	8009f32 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d031      	beq.n	8009f9e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
    }
    return;
 8009f42:	e02c      	b.n	8009f9e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d008      	beq.n	8009f60 <HAL_UART_IRQHandler+0x2ac>
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d003      	beq.n	8009f60 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f002 fd1a 	bl	800c992 <UART_EndTransmit_IT>
    return;
 8009f5e:	e01f      	b.n	8009fa0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d008      	beq.n	8009f7c <HAL_UART_IRQHandler+0x2c8>
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d003      	beq.n	8009f7c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f002 feed 	bl	800cd54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f7a:	e011      	b.n	8009fa0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00c      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x2ec>
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	da09      	bge.n	8009fa0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f002 fed7 	bl	800cd40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f92:	bf00      	nop
 8009f94:	e004      	b.n	8009fa0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009f96:	bf00      	nop
 8009f98:	e002      	b.n	8009fa0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009f9a:	bf00      	nop
 8009f9c:	e000      	b.n	8009fa0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009f9e:	bf00      	nop
  }
}
 8009fa0:	3720      	adds	r7, #32
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	10000001 	.word	0x10000001
 8009fac:	04000120 	.word	0x04000120
 8009fb0:	0800c737 	.word	0x0800c737

08009fb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	0000      	movs	r0, r0
	...

08009fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fe0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009fe4:	b090      	sub	sp, #64	; 0x40
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	431a      	orrs	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a016:	4313      	orrs	r3, r2
 800a018:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	4bc1      	ldr	r3, [pc, #772]	; (800a328 <UART_SetConfig+0x348>)
 800a022:	4013      	ands	r3, r2
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a02a:	430b      	orrs	r3, r1
 800a02c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4ab7      	ldr	r2, [pc, #732]	; (800a32c <UART_SetConfig+0x34c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d004      	beq.n	800a05e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a05a:	4313      	orrs	r3, r2
 800a05c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	689a      	ldr	r2, [r3, #8]
 800a064:	4bb2      	ldr	r3, [pc, #712]	; (800a330 <UART_SetConfig+0x350>)
 800a066:	4013      	ands	r3, r2
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6812      	ldr	r2, [r2, #0]
 800a06c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a06e:	430b      	orrs	r3, r1
 800a070:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	f023 010f 	bic.w	r1, r3, #15
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4aa9      	ldr	r2, [pc, #676]	; (800a334 <UART_SetConfig+0x354>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d177      	bne.n	800a182 <UART_SetConfig+0x1a2>
 800a092:	4ba9      	ldr	r3, [pc, #676]	; (800a338 <UART_SetConfig+0x358>)
 800a094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a09a:	2b28      	cmp	r3, #40	; 0x28
 800a09c:	d86c      	bhi.n	800a178 <UART_SetConfig+0x198>
 800a09e:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <UART_SetConfig+0xc4>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a149 	.word	0x0800a149
 800a0a8:	0800a179 	.word	0x0800a179
 800a0ac:	0800a179 	.word	0x0800a179
 800a0b0:	0800a179 	.word	0x0800a179
 800a0b4:	0800a179 	.word	0x0800a179
 800a0b8:	0800a179 	.word	0x0800a179
 800a0bc:	0800a179 	.word	0x0800a179
 800a0c0:	0800a179 	.word	0x0800a179
 800a0c4:	0800a151 	.word	0x0800a151
 800a0c8:	0800a179 	.word	0x0800a179
 800a0cc:	0800a179 	.word	0x0800a179
 800a0d0:	0800a179 	.word	0x0800a179
 800a0d4:	0800a179 	.word	0x0800a179
 800a0d8:	0800a179 	.word	0x0800a179
 800a0dc:	0800a179 	.word	0x0800a179
 800a0e0:	0800a179 	.word	0x0800a179
 800a0e4:	0800a159 	.word	0x0800a159
 800a0e8:	0800a179 	.word	0x0800a179
 800a0ec:	0800a179 	.word	0x0800a179
 800a0f0:	0800a179 	.word	0x0800a179
 800a0f4:	0800a179 	.word	0x0800a179
 800a0f8:	0800a179 	.word	0x0800a179
 800a0fc:	0800a179 	.word	0x0800a179
 800a100:	0800a179 	.word	0x0800a179
 800a104:	0800a161 	.word	0x0800a161
 800a108:	0800a179 	.word	0x0800a179
 800a10c:	0800a179 	.word	0x0800a179
 800a110:	0800a179 	.word	0x0800a179
 800a114:	0800a179 	.word	0x0800a179
 800a118:	0800a179 	.word	0x0800a179
 800a11c:	0800a179 	.word	0x0800a179
 800a120:	0800a179 	.word	0x0800a179
 800a124:	0800a169 	.word	0x0800a169
 800a128:	0800a179 	.word	0x0800a179
 800a12c:	0800a179 	.word	0x0800a179
 800a130:	0800a179 	.word	0x0800a179
 800a134:	0800a179 	.word	0x0800a179
 800a138:	0800a179 	.word	0x0800a179
 800a13c:	0800a179 	.word	0x0800a179
 800a140:	0800a179 	.word	0x0800a179
 800a144:	0800a171 	.word	0x0800a171
 800a148:	2301      	movs	r3, #1
 800a14a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a14e:	e233      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a150:	2304      	movs	r3, #4
 800a152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a156:	e22f      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a158:	2308      	movs	r3, #8
 800a15a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a15e:	e22b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a160:	2310      	movs	r3, #16
 800a162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a166:	e227      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a168:	2320      	movs	r3, #32
 800a16a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a16e:	e223      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a170:	2340      	movs	r3, #64	; 0x40
 800a172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a176:	e21f      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a178:	2380      	movs	r3, #128	; 0x80
 800a17a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a17e:	bf00      	nop
 800a180:	e21a      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a6d      	ldr	r2, [pc, #436]	; (800a33c <UART_SetConfig+0x35c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d132      	bne.n	800a1f2 <UART_SetConfig+0x212>
 800a18c:	4b6a      	ldr	r3, [pc, #424]	; (800a338 <UART_SetConfig+0x358>)
 800a18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a190:	f003 0307 	and.w	r3, r3, #7
 800a194:	2b05      	cmp	r3, #5
 800a196:	d827      	bhi.n	800a1e8 <UART_SetConfig+0x208>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <UART_SetConfig+0x1c0>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1b9 	.word	0x0800a1b9
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1d9 	.word	0x0800a1d9
 800a1b4:	0800a1e1 	.word	0x0800a1e1
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1be:	e1fb      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1c6:	e1f7      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ce:	e1f3      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1d6:	e1ef      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a1d8:	2320      	movs	r3, #32
 800a1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1de:	e1eb      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a1e0:	2340      	movs	r3, #64	; 0x40
 800a1e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1e6:	e1e7      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a1e8:	2380      	movs	r3, #128	; 0x80
 800a1ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ee:	bf00      	nop
 800a1f0:	e1e2      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a52      	ldr	r2, [pc, #328]	; (800a340 <UART_SetConfig+0x360>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d132      	bne.n	800a262 <UART_SetConfig+0x282>
 800a1fc:	4b4e      	ldr	r3, [pc, #312]	; (800a338 <UART_SetConfig+0x358>)
 800a1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a200:	f003 0307 	and.w	r3, r3, #7
 800a204:	2b05      	cmp	r3, #5
 800a206:	d827      	bhi.n	800a258 <UART_SetConfig+0x278>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <UART_SetConfig+0x230>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a229 	.word	0x0800a229
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a239 	.word	0x0800a239
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a251 	.word	0x0800a251
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a22e:	e1c3      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a230:	2304      	movs	r3, #4
 800a232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a236:	e1bf      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a238:	2308      	movs	r3, #8
 800a23a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a23e:	e1bb      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a240:	2310      	movs	r3, #16
 800a242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a246:	e1b7      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a248:	2320      	movs	r3, #32
 800a24a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a24e:	e1b3      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a250:	2340      	movs	r3, #64	; 0x40
 800a252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a256:	e1af      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a258:	2380      	movs	r3, #128	; 0x80
 800a25a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a25e:	bf00      	nop
 800a260:	e1aa      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a37      	ldr	r2, [pc, #220]	; (800a344 <UART_SetConfig+0x364>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d132      	bne.n	800a2d2 <UART_SetConfig+0x2f2>
 800a26c:	4b32      	ldr	r3, [pc, #200]	; (800a338 <UART_SetConfig+0x358>)
 800a26e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	2b05      	cmp	r3, #5
 800a276:	d827      	bhi.n	800a2c8 <UART_SetConfig+0x2e8>
 800a278:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <UART_SetConfig+0x2a0>)
 800a27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27e:	bf00      	nop
 800a280:	0800a299 	.word	0x0800a299
 800a284:	0800a2a1 	.word	0x0800a2a1
 800a288:	0800a2a9 	.word	0x0800a2a9
 800a28c:	0800a2b1 	.word	0x0800a2b1
 800a290:	0800a2b9 	.word	0x0800a2b9
 800a294:	0800a2c1 	.word	0x0800a2c1
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a29e:	e18b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2a6:	e187      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ae:	e183      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2b6:	e17f      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a2b8:	2320      	movs	r3, #32
 800a2ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2be:	e17b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a2c0:	2340      	movs	r3, #64	; 0x40
 800a2c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2c6:	e177      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a2c8:	2380      	movs	r3, #128	; 0x80
 800a2ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ce:	bf00      	nop
 800a2d0:	e172      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a1c      	ldr	r2, [pc, #112]	; (800a348 <UART_SetConfig+0x368>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d144      	bne.n	800a366 <UART_SetConfig+0x386>
 800a2dc:	4b16      	ldr	r3, [pc, #88]	; (800a338 <UART_SetConfig+0x358>)
 800a2de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	2b05      	cmp	r3, #5
 800a2e6:	d839      	bhi.n	800a35c <UART_SetConfig+0x37c>
 800a2e8:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <UART_SetConfig+0x310>)
 800a2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ee:	bf00      	nop
 800a2f0:	0800a309 	.word	0x0800a309
 800a2f4:	0800a311 	.word	0x0800a311
 800a2f8:	0800a319 	.word	0x0800a319
 800a2fc:	0800a321 	.word	0x0800a321
 800a300:	0800a34d 	.word	0x0800a34d
 800a304:	0800a355 	.word	0x0800a355
 800a308:	2300      	movs	r3, #0
 800a30a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a30e:	e153      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a310:	2304      	movs	r3, #4
 800a312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a316:	e14f      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a318:	2308      	movs	r3, #8
 800a31a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a31e:	e14b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a320:	2310      	movs	r3, #16
 800a322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a326:	e147      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a328:	cfff69f3 	.word	0xcfff69f3
 800a32c:	58000c00 	.word	0x58000c00
 800a330:	11fff4ff 	.word	0x11fff4ff
 800a334:	40011000 	.word	0x40011000
 800a338:	58024400 	.word	0x58024400
 800a33c:	40004400 	.word	0x40004400
 800a340:	40004800 	.word	0x40004800
 800a344:	40004c00 	.word	0x40004c00
 800a348:	40005000 	.word	0x40005000
 800a34c:	2320      	movs	r3, #32
 800a34e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a352:	e131      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a35a:	e12d      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a35c:	2380      	movs	r3, #128	; 0x80
 800a35e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a362:	bf00      	nop
 800a364:	e128      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4ac3      	ldr	r2, [pc, #780]	; (800a678 <UART_SetConfig+0x698>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d178      	bne.n	800a462 <UART_SetConfig+0x482>
 800a370:	4bc2      	ldr	r3, [pc, #776]	; (800a67c <UART_SetConfig+0x69c>)
 800a372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a378:	2b28      	cmp	r3, #40	; 0x28
 800a37a:	d86d      	bhi.n	800a458 <UART_SetConfig+0x478>
 800a37c:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <UART_SetConfig+0x3a4>)
 800a37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a382:	bf00      	nop
 800a384:	0800a429 	.word	0x0800a429
 800a388:	0800a459 	.word	0x0800a459
 800a38c:	0800a459 	.word	0x0800a459
 800a390:	0800a459 	.word	0x0800a459
 800a394:	0800a459 	.word	0x0800a459
 800a398:	0800a459 	.word	0x0800a459
 800a39c:	0800a459 	.word	0x0800a459
 800a3a0:	0800a459 	.word	0x0800a459
 800a3a4:	0800a431 	.word	0x0800a431
 800a3a8:	0800a459 	.word	0x0800a459
 800a3ac:	0800a459 	.word	0x0800a459
 800a3b0:	0800a459 	.word	0x0800a459
 800a3b4:	0800a459 	.word	0x0800a459
 800a3b8:	0800a459 	.word	0x0800a459
 800a3bc:	0800a459 	.word	0x0800a459
 800a3c0:	0800a459 	.word	0x0800a459
 800a3c4:	0800a439 	.word	0x0800a439
 800a3c8:	0800a459 	.word	0x0800a459
 800a3cc:	0800a459 	.word	0x0800a459
 800a3d0:	0800a459 	.word	0x0800a459
 800a3d4:	0800a459 	.word	0x0800a459
 800a3d8:	0800a459 	.word	0x0800a459
 800a3dc:	0800a459 	.word	0x0800a459
 800a3e0:	0800a459 	.word	0x0800a459
 800a3e4:	0800a441 	.word	0x0800a441
 800a3e8:	0800a459 	.word	0x0800a459
 800a3ec:	0800a459 	.word	0x0800a459
 800a3f0:	0800a459 	.word	0x0800a459
 800a3f4:	0800a459 	.word	0x0800a459
 800a3f8:	0800a459 	.word	0x0800a459
 800a3fc:	0800a459 	.word	0x0800a459
 800a400:	0800a459 	.word	0x0800a459
 800a404:	0800a449 	.word	0x0800a449
 800a408:	0800a459 	.word	0x0800a459
 800a40c:	0800a459 	.word	0x0800a459
 800a410:	0800a459 	.word	0x0800a459
 800a414:	0800a459 	.word	0x0800a459
 800a418:	0800a459 	.word	0x0800a459
 800a41c:	0800a459 	.word	0x0800a459
 800a420:	0800a459 	.word	0x0800a459
 800a424:	0800a451 	.word	0x0800a451
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a42e:	e0c3      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a430:	2304      	movs	r3, #4
 800a432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a436:	e0bf      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a438:	2308      	movs	r3, #8
 800a43a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a43e:	e0bb      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a440:	2310      	movs	r3, #16
 800a442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a446:	e0b7      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a448:	2320      	movs	r3, #32
 800a44a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a44e:	e0b3      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a450:	2340      	movs	r3, #64	; 0x40
 800a452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a456:	e0af      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a458:	2380      	movs	r3, #128	; 0x80
 800a45a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a45e:	bf00      	nop
 800a460:	e0aa      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a86      	ldr	r2, [pc, #536]	; (800a680 <UART_SetConfig+0x6a0>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d132      	bne.n	800a4d2 <UART_SetConfig+0x4f2>
 800a46c:	4b83      	ldr	r3, [pc, #524]	; (800a67c <UART_SetConfig+0x69c>)
 800a46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	2b05      	cmp	r3, #5
 800a476:	d827      	bhi.n	800a4c8 <UART_SetConfig+0x4e8>
 800a478:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <UART_SetConfig+0x4a0>)
 800a47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47e:	bf00      	nop
 800a480:	0800a499 	.word	0x0800a499
 800a484:	0800a4a1 	.word	0x0800a4a1
 800a488:	0800a4a9 	.word	0x0800a4a9
 800a48c:	0800a4b1 	.word	0x0800a4b1
 800a490:	0800a4b9 	.word	0x0800a4b9
 800a494:	0800a4c1 	.word	0x0800a4c1
 800a498:	2300      	movs	r3, #0
 800a49a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a49e:	e08b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a4a0:	2304      	movs	r3, #4
 800a4a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4a6:	e087      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a4a8:	2308      	movs	r3, #8
 800a4aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ae:	e083      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a4b0:	2310      	movs	r3, #16
 800a4b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4b6:	e07f      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a4b8:	2320      	movs	r3, #32
 800a4ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4be:	e07b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a4c0:	2340      	movs	r3, #64	; 0x40
 800a4c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4c6:	e077      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a4c8:	2380      	movs	r3, #128	; 0x80
 800a4ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ce:	bf00      	nop
 800a4d0:	e072      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a6b      	ldr	r2, [pc, #428]	; (800a684 <UART_SetConfig+0x6a4>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d132      	bne.n	800a542 <UART_SetConfig+0x562>
 800a4dc:	4b67      	ldr	r3, [pc, #412]	; (800a67c <UART_SetConfig+0x69c>)
 800a4de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e0:	f003 0307 	and.w	r3, r3, #7
 800a4e4:	2b05      	cmp	r3, #5
 800a4e6:	d827      	bhi.n	800a538 <UART_SetConfig+0x558>
 800a4e8:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <UART_SetConfig+0x510>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a509 	.word	0x0800a509
 800a4f4:	0800a511 	.word	0x0800a511
 800a4f8:	0800a519 	.word	0x0800a519
 800a4fc:	0800a521 	.word	0x0800a521
 800a500:	0800a529 	.word	0x0800a529
 800a504:	0800a531 	.word	0x0800a531
 800a508:	2300      	movs	r3, #0
 800a50a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a50e:	e053      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a510:	2304      	movs	r3, #4
 800a512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a516:	e04f      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a518:	2308      	movs	r3, #8
 800a51a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a51e:	e04b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a520:	2310      	movs	r3, #16
 800a522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a526:	e047      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a528:	2320      	movs	r3, #32
 800a52a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a52e:	e043      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a530:	2340      	movs	r3, #64	; 0x40
 800a532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a536:	e03f      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a538:	2380      	movs	r3, #128	; 0x80
 800a53a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a53e:	bf00      	nop
 800a540:	e03a      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a50      	ldr	r2, [pc, #320]	; (800a688 <UART_SetConfig+0x6a8>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d132      	bne.n	800a5b2 <UART_SetConfig+0x5d2>
 800a54c:	4b4b      	ldr	r3, [pc, #300]	; (800a67c <UART_SetConfig+0x69c>)
 800a54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a550:	f003 0307 	and.w	r3, r3, #7
 800a554:	2b05      	cmp	r3, #5
 800a556:	d827      	bhi.n	800a5a8 <UART_SetConfig+0x5c8>
 800a558:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <UART_SetConfig+0x580>)
 800a55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55e:	bf00      	nop
 800a560:	0800a579 	.word	0x0800a579
 800a564:	0800a581 	.word	0x0800a581
 800a568:	0800a589 	.word	0x0800a589
 800a56c:	0800a591 	.word	0x0800a591
 800a570:	0800a599 	.word	0x0800a599
 800a574:	0800a5a1 	.word	0x0800a5a1
 800a578:	2302      	movs	r3, #2
 800a57a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a57e:	e01b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a580:	2304      	movs	r3, #4
 800a582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a586:	e017      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a588:	2308      	movs	r3, #8
 800a58a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a58e:	e013      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a590:	2310      	movs	r3, #16
 800a592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a596:	e00f      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a598:	2320      	movs	r3, #32
 800a59a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a59e:	e00b      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5a6:	e007      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a5a8:	2380      	movs	r3, #128	; 0x80
 800a5aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5ae:	bf00      	nop
 800a5b0:	e002      	b.n	800a5b8 <UART_SetConfig+0x5d8>
 800a5b2:	2380      	movs	r3, #128	; 0x80
 800a5b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a32      	ldr	r2, [pc, #200]	; (800a688 <UART_SetConfig+0x6a8>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	f040 86f7 	bne.w	800b3b2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a5c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a5c8:	2b08      	cmp	r3, #8
 800a5ca:	f000 80c0 	beq.w	800a74e <UART_SetConfig+0x76e>
 800a5ce:	2b08      	cmp	r3, #8
 800a5d0:	dc04      	bgt.n	800a5dc <UART_SetConfig+0x5fc>
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d00c      	beq.n	800a5f0 <UART_SetConfig+0x610>
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d065      	beq.n	800a6a6 <UART_SetConfig+0x6c6>
 800a5da:	e27a      	b.n	800aad2 <UART_SetConfig+0xaf2>
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	f000 81b0 	beq.w	800a942 <UART_SetConfig+0x962>
 800a5e2:	2b40      	cmp	r3, #64	; 0x40
 800a5e4:	f000 821e 	beq.w	800aa24 <UART_SetConfig+0xa44>
 800a5e8:	2b10      	cmp	r3, #16
 800a5ea:	f000 8104 	beq.w	800a7f6 <UART_SetConfig+0x816>
 800a5ee:	e270      	b.n	800aad2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a5f0:	f7fd feec 	bl	80083cc <HAL_RCCEx_GetD3PCLK1Freq>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d04e      	beq.n	800a69c <UART_SetConfig+0x6bc>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	2b01      	cmp	r3, #1
 800a604:	d048      	beq.n	800a698 <UART_SetConfig+0x6b8>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d042      	beq.n	800a694 <UART_SetConfig+0x6b4>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	2b03      	cmp	r3, #3
 800a614:	d03c      	beq.n	800a690 <UART_SetConfig+0x6b0>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	d036      	beq.n	800a68c <UART_SetConfig+0x6ac>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a622:	2b05      	cmp	r3, #5
 800a624:	d026      	beq.n	800a674 <UART_SetConfig+0x694>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	2b06      	cmp	r3, #6
 800a62c:	d020      	beq.n	800a670 <UART_SetConfig+0x690>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	2b07      	cmp	r3, #7
 800a634:	d01a      	beq.n	800a66c <UART_SetConfig+0x68c>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63a:	2b08      	cmp	r3, #8
 800a63c:	d014      	beq.n	800a668 <UART_SetConfig+0x688>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a642:	2b09      	cmp	r3, #9
 800a644:	d00e      	beq.n	800a664 <UART_SetConfig+0x684>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64a:	2b0a      	cmp	r3, #10
 800a64c:	d008      	beq.n	800a660 <UART_SetConfig+0x680>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a652:	2b0b      	cmp	r3, #11
 800a654:	d102      	bne.n	800a65c <UART_SetConfig+0x67c>
 800a656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a65a:	e020      	b.n	800a69e <UART_SetConfig+0x6be>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e01e      	b.n	800a69e <UART_SetConfig+0x6be>
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	e01c      	b.n	800a69e <UART_SetConfig+0x6be>
 800a664:	2340      	movs	r3, #64	; 0x40
 800a666:	e01a      	b.n	800a69e <UART_SetConfig+0x6be>
 800a668:	2320      	movs	r3, #32
 800a66a:	e018      	b.n	800a69e <UART_SetConfig+0x6be>
 800a66c:	2310      	movs	r3, #16
 800a66e:	e016      	b.n	800a69e <UART_SetConfig+0x6be>
 800a670:	230c      	movs	r3, #12
 800a672:	e014      	b.n	800a69e <UART_SetConfig+0x6be>
 800a674:	230a      	movs	r3, #10
 800a676:	e012      	b.n	800a69e <UART_SetConfig+0x6be>
 800a678:	40011400 	.word	0x40011400
 800a67c:	58024400 	.word	0x58024400
 800a680:	40007800 	.word	0x40007800
 800a684:	40007c00 	.word	0x40007c00
 800a688:	58000c00 	.word	0x58000c00
 800a68c:	2308      	movs	r3, #8
 800a68e:	e006      	b.n	800a69e <UART_SetConfig+0x6be>
 800a690:	2306      	movs	r3, #6
 800a692:	e004      	b.n	800a69e <UART_SetConfig+0x6be>
 800a694:	2304      	movs	r3, #4
 800a696:	e002      	b.n	800a69e <UART_SetConfig+0x6be>
 800a698:	2302      	movs	r3, #2
 800a69a:	e000      	b.n	800a69e <UART_SetConfig+0x6be>
 800a69c:	2301      	movs	r3, #1
 800a69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6a4:	e219      	b.n	800aada <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6a6:	f107 0318 	add.w	r3, r7, #24
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fd fea4 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a6b0:	69fa      	ldr	r2, [r7, #28]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d044      	beq.n	800a744 <UART_SetConfig+0x764>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d03e      	beq.n	800a740 <UART_SetConfig+0x760>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d038      	beq.n	800a73c <UART_SetConfig+0x75c>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d032      	beq.n	800a738 <UART_SetConfig+0x758>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d02c      	beq.n	800a734 <UART_SetConfig+0x754>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b05      	cmp	r3, #5
 800a6e0:	d026      	beq.n	800a730 <UART_SetConfig+0x750>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	2b06      	cmp	r3, #6
 800a6e8:	d020      	beq.n	800a72c <UART_SetConfig+0x74c>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	2b07      	cmp	r3, #7
 800a6f0:	d01a      	beq.n	800a728 <UART_SetConfig+0x748>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	2b08      	cmp	r3, #8
 800a6f8:	d014      	beq.n	800a724 <UART_SetConfig+0x744>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	2b09      	cmp	r3, #9
 800a700:	d00e      	beq.n	800a720 <UART_SetConfig+0x740>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b0a      	cmp	r3, #10
 800a708:	d008      	beq.n	800a71c <UART_SetConfig+0x73c>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	2b0b      	cmp	r3, #11
 800a710:	d102      	bne.n	800a718 <UART_SetConfig+0x738>
 800a712:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a716:	e016      	b.n	800a746 <UART_SetConfig+0x766>
 800a718:	2301      	movs	r3, #1
 800a71a:	e014      	b.n	800a746 <UART_SetConfig+0x766>
 800a71c:	2380      	movs	r3, #128	; 0x80
 800a71e:	e012      	b.n	800a746 <UART_SetConfig+0x766>
 800a720:	2340      	movs	r3, #64	; 0x40
 800a722:	e010      	b.n	800a746 <UART_SetConfig+0x766>
 800a724:	2320      	movs	r3, #32
 800a726:	e00e      	b.n	800a746 <UART_SetConfig+0x766>
 800a728:	2310      	movs	r3, #16
 800a72a:	e00c      	b.n	800a746 <UART_SetConfig+0x766>
 800a72c:	230c      	movs	r3, #12
 800a72e:	e00a      	b.n	800a746 <UART_SetConfig+0x766>
 800a730:	230a      	movs	r3, #10
 800a732:	e008      	b.n	800a746 <UART_SetConfig+0x766>
 800a734:	2308      	movs	r3, #8
 800a736:	e006      	b.n	800a746 <UART_SetConfig+0x766>
 800a738:	2306      	movs	r3, #6
 800a73a:	e004      	b.n	800a746 <UART_SetConfig+0x766>
 800a73c:	2304      	movs	r3, #4
 800a73e:	e002      	b.n	800a746 <UART_SetConfig+0x766>
 800a740:	2302      	movs	r3, #2
 800a742:	e000      	b.n	800a746 <UART_SetConfig+0x766>
 800a744:	2301      	movs	r3, #1
 800a746:	fbb2 f3f3 	udiv	r3, r2, r3
 800a74a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a74c:	e1c5      	b.n	800aada <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a74e:	f107 030c 	add.w	r3, r7, #12
 800a752:	4618      	mov	r0, r3
 800a754:	f7fd ff9c 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d044      	beq.n	800a7ec <UART_SetConfig+0x80c>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b01      	cmp	r3, #1
 800a768:	d03e      	beq.n	800a7e8 <UART_SetConfig+0x808>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d038      	beq.n	800a7e4 <UART_SetConfig+0x804>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b03      	cmp	r3, #3
 800a778:	d032      	beq.n	800a7e0 <UART_SetConfig+0x800>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d02c      	beq.n	800a7dc <UART_SetConfig+0x7fc>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b05      	cmp	r3, #5
 800a788:	d026      	beq.n	800a7d8 <UART_SetConfig+0x7f8>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b06      	cmp	r3, #6
 800a790:	d020      	beq.n	800a7d4 <UART_SetConfig+0x7f4>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b07      	cmp	r3, #7
 800a798:	d01a      	beq.n	800a7d0 <UART_SetConfig+0x7f0>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b08      	cmp	r3, #8
 800a7a0:	d014      	beq.n	800a7cc <UART_SetConfig+0x7ec>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b09      	cmp	r3, #9
 800a7a8:	d00e      	beq.n	800a7c8 <UART_SetConfig+0x7e8>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	2b0a      	cmp	r3, #10
 800a7b0:	d008      	beq.n	800a7c4 <UART_SetConfig+0x7e4>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	2b0b      	cmp	r3, #11
 800a7b8:	d102      	bne.n	800a7c0 <UART_SetConfig+0x7e0>
 800a7ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7be:	e016      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e014      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7c4:	2380      	movs	r3, #128	; 0x80
 800a7c6:	e012      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7c8:	2340      	movs	r3, #64	; 0x40
 800a7ca:	e010      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7cc:	2320      	movs	r3, #32
 800a7ce:	e00e      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7d0:	2310      	movs	r3, #16
 800a7d2:	e00c      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	e00a      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7d8:	230a      	movs	r3, #10
 800a7da:	e008      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7dc:	2308      	movs	r3, #8
 800a7de:	e006      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7e0:	2306      	movs	r3, #6
 800a7e2:	e004      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	e002      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e000      	b.n	800a7ee <UART_SetConfig+0x80e>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7f4:	e171      	b.n	800aada <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f6:	4b7a      	ldr	r3, [pc, #488]	; (800a9e0 <UART_SetConfig+0xa00>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 0320 	and.w	r3, r3, #32
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d054      	beq.n	800a8ac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a802:	4b77      	ldr	r3, [pc, #476]	; (800a9e0 <UART_SetConfig+0xa00>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	08db      	lsrs	r3, r3, #3
 800a808:	f003 0303 	and.w	r3, r3, #3
 800a80c:	4a75      	ldr	r2, [pc, #468]	; (800a9e4 <UART_SetConfig+0xa04>)
 800a80e:	40da      	lsrs	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	d044      	beq.n	800a8a2 <UART_SetConfig+0x8c2>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d03e      	beq.n	800a89e <UART_SetConfig+0x8be>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	2b02      	cmp	r3, #2
 800a826:	d038      	beq.n	800a89a <UART_SetConfig+0x8ba>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d032      	beq.n	800a896 <UART_SetConfig+0x8b6>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	2b04      	cmp	r3, #4
 800a836:	d02c      	beq.n	800a892 <UART_SetConfig+0x8b2>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b05      	cmp	r3, #5
 800a83e:	d026      	beq.n	800a88e <UART_SetConfig+0x8ae>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	2b06      	cmp	r3, #6
 800a846:	d020      	beq.n	800a88a <UART_SetConfig+0x8aa>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84c:	2b07      	cmp	r3, #7
 800a84e:	d01a      	beq.n	800a886 <UART_SetConfig+0x8a6>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	2b08      	cmp	r3, #8
 800a856:	d014      	beq.n	800a882 <UART_SetConfig+0x8a2>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2b09      	cmp	r3, #9
 800a85e:	d00e      	beq.n	800a87e <UART_SetConfig+0x89e>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	2b0a      	cmp	r3, #10
 800a866:	d008      	beq.n	800a87a <UART_SetConfig+0x89a>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	2b0b      	cmp	r3, #11
 800a86e:	d102      	bne.n	800a876 <UART_SetConfig+0x896>
 800a870:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a874:	e016      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a876:	2301      	movs	r3, #1
 800a878:	e014      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a87a:	2380      	movs	r3, #128	; 0x80
 800a87c:	e012      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a87e:	2340      	movs	r3, #64	; 0x40
 800a880:	e010      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a882:	2320      	movs	r3, #32
 800a884:	e00e      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a886:	2310      	movs	r3, #16
 800a888:	e00c      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a88a:	230c      	movs	r3, #12
 800a88c:	e00a      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a88e:	230a      	movs	r3, #10
 800a890:	e008      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a892:	2308      	movs	r3, #8
 800a894:	e006      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a896:	2306      	movs	r3, #6
 800a898:	e004      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a89a:	2304      	movs	r3, #4
 800a89c:	e002      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a89e:	2302      	movs	r3, #2
 800a8a0:	e000      	b.n	800a8a4 <UART_SetConfig+0x8c4>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a8aa:	e116      	b.n	800aada <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d043      	beq.n	800a93c <UART_SetConfig+0x95c>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d03d      	beq.n	800a938 <UART_SetConfig+0x958>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d037      	beq.n	800a934 <UART_SetConfig+0x954>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d031      	beq.n	800a930 <UART_SetConfig+0x950>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b04      	cmp	r3, #4
 800a8d2:	d02b      	beq.n	800a92c <UART_SetConfig+0x94c>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2b05      	cmp	r3, #5
 800a8da:	d025      	beq.n	800a928 <UART_SetConfig+0x948>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b06      	cmp	r3, #6
 800a8e2:	d01f      	beq.n	800a924 <UART_SetConfig+0x944>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	2b07      	cmp	r3, #7
 800a8ea:	d019      	beq.n	800a920 <UART_SetConfig+0x940>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d013      	beq.n	800a91c <UART_SetConfig+0x93c>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	2b09      	cmp	r3, #9
 800a8fa:	d00d      	beq.n	800a918 <UART_SetConfig+0x938>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b0a      	cmp	r3, #10
 800a902:	d007      	beq.n	800a914 <UART_SetConfig+0x934>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	2b0b      	cmp	r3, #11
 800a90a:	d101      	bne.n	800a910 <UART_SetConfig+0x930>
 800a90c:	4b36      	ldr	r3, [pc, #216]	; (800a9e8 <UART_SetConfig+0xa08>)
 800a90e:	e016      	b.n	800a93e <UART_SetConfig+0x95e>
 800a910:	4b34      	ldr	r3, [pc, #208]	; (800a9e4 <UART_SetConfig+0xa04>)
 800a912:	e014      	b.n	800a93e <UART_SetConfig+0x95e>
 800a914:	4b35      	ldr	r3, [pc, #212]	; (800a9ec <UART_SetConfig+0xa0c>)
 800a916:	e012      	b.n	800a93e <UART_SetConfig+0x95e>
 800a918:	4b35      	ldr	r3, [pc, #212]	; (800a9f0 <UART_SetConfig+0xa10>)
 800a91a:	e010      	b.n	800a93e <UART_SetConfig+0x95e>
 800a91c:	4b35      	ldr	r3, [pc, #212]	; (800a9f4 <UART_SetConfig+0xa14>)
 800a91e:	e00e      	b.n	800a93e <UART_SetConfig+0x95e>
 800a920:	4b35      	ldr	r3, [pc, #212]	; (800a9f8 <UART_SetConfig+0xa18>)
 800a922:	e00c      	b.n	800a93e <UART_SetConfig+0x95e>
 800a924:	4b35      	ldr	r3, [pc, #212]	; (800a9fc <UART_SetConfig+0xa1c>)
 800a926:	e00a      	b.n	800a93e <UART_SetConfig+0x95e>
 800a928:	4b35      	ldr	r3, [pc, #212]	; (800aa00 <UART_SetConfig+0xa20>)
 800a92a:	e008      	b.n	800a93e <UART_SetConfig+0x95e>
 800a92c:	4b35      	ldr	r3, [pc, #212]	; (800aa04 <UART_SetConfig+0xa24>)
 800a92e:	e006      	b.n	800a93e <UART_SetConfig+0x95e>
 800a930:	4b35      	ldr	r3, [pc, #212]	; (800aa08 <UART_SetConfig+0xa28>)
 800a932:	e004      	b.n	800a93e <UART_SetConfig+0x95e>
 800a934:	4b35      	ldr	r3, [pc, #212]	; (800aa0c <UART_SetConfig+0xa2c>)
 800a936:	e002      	b.n	800a93e <UART_SetConfig+0x95e>
 800a938:	4b35      	ldr	r3, [pc, #212]	; (800aa10 <UART_SetConfig+0xa30>)
 800a93a:	e000      	b.n	800a93e <UART_SetConfig+0x95e>
 800a93c:	4b29      	ldr	r3, [pc, #164]	; (800a9e4 <UART_SetConfig+0xa04>)
 800a93e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a940:	e0cb      	b.n	800aada <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	2b00      	cmp	r3, #0
 800a948:	d046      	beq.n	800a9d8 <UART_SetConfig+0x9f8>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d040      	beq.n	800a9d4 <UART_SetConfig+0x9f4>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	2b02      	cmp	r3, #2
 800a958:	d03a      	beq.n	800a9d0 <UART_SetConfig+0x9f0>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d034      	beq.n	800a9cc <UART_SetConfig+0x9ec>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	2b04      	cmp	r3, #4
 800a968:	d02e      	beq.n	800a9c8 <UART_SetConfig+0x9e8>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	2b05      	cmp	r3, #5
 800a970:	d028      	beq.n	800a9c4 <UART_SetConfig+0x9e4>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	2b06      	cmp	r3, #6
 800a978:	d022      	beq.n	800a9c0 <UART_SetConfig+0x9e0>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	2b07      	cmp	r3, #7
 800a980:	d01c      	beq.n	800a9bc <UART_SetConfig+0x9dc>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	2b08      	cmp	r3, #8
 800a988:	d016      	beq.n	800a9b8 <UART_SetConfig+0x9d8>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	2b09      	cmp	r3, #9
 800a990:	d00f      	beq.n	800a9b2 <UART_SetConfig+0x9d2>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b0a      	cmp	r3, #10
 800a998:	d008      	beq.n	800a9ac <UART_SetConfig+0x9cc>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	2b0b      	cmp	r3, #11
 800a9a0:	d102      	bne.n	800a9a8 <UART_SetConfig+0x9c8>
 800a9a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a9a6:	e018      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9a8:	4b13      	ldr	r3, [pc, #76]	; (800a9f8 <UART_SetConfig+0xa18>)
 800a9aa:	e016      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a9b0:	e013      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a9b6:	e010      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9b8:	4b16      	ldr	r3, [pc, #88]	; (800aa14 <UART_SetConfig+0xa34>)
 800a9ba:	e00e      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <UART_SetConfig+0xa08>)
 800a9be:	e00c      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9c0:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <UART_SetConfig+0xa38>)
 800a9c2:	e00a      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9c4:	4b15      	ldr	r3, [pc, #84]	; (800aa1c <UART_SetConfig+0xa3c>)
 800a9c6:	e008      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9c8:	4b08      	ldr	r3, [pc, #32]	; (800a9ec <UART_SetConfig+0xa0c>)
 800a9ca:	e006      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9cc:	4b14      	ldr	r3, [pc, #80]	; (800aa20 <UART_SetConfig+0xa40>)
 800a9ce:	e004      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9d0:	4b07      	ldr	r3, [pc, #28]	; (800a9f0 <UART_SetConfig+0xa10>)
 800a9d2:	e002      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9d4:	4b07      	ldr	r3, [pc, #28]	; (800a9f4 <UART_SetConfig+0xa14>)
 800a9d6:	e000      	b.n	800a9da <UART_SetConfig+0x9fa>
 800a9d8:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <UART_SetConfig+0xa18>)
 800a9da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9dc:	e07d      	b.n	800aada <UART_SetConfig+0xafa>
 800a9de:	bf00      	nop
 800a9e0:	58024400 	.word	0x58024400
 800a9e4:	03d09000 	.word	0x03d09000
 800a9e8:	0003d090 	.word	0x0003d090
 800a9ec:	0007a120 	.word	0x0007a120
 800a9f0:	000f4240 	.word	0x000f4240
 800a9f4:	001e8480 	.word	0x001e8480
 800a9f8:	003d0900 	.word	0x003d0900
 800a9fc:	00516155 	.word	0x00516155
 800aa00:	0061a800 	.word	0x0061a800
 800aa04:	007a1200 	.word	0x007a1200
 800aa08:	00a2c2aa 	.word	0x00a2c2aa
 800aa0c:	00f42400 	.word	0x00f42400
 800aa10:	01e84800 	.word	0x01e84800
 800aa14:	0001e848 	.word	0x0001e848
 800aa18:	00051615 	.word	0x00051615
 800aa1c:	00061a80 	.word	0x00061a80
 800aa20:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d04e      	beq.n	800aaca <UART_SetConfig+0xaea>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d047      	beq.n	800aac4 <UART_SetConfig+0xae4>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d040      	beq.n	800aabe <UART_SetConfig+0xade>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d039      	beq.n	800aab8 <UART_SetConfig+0xad8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	2b04      	cmp	r3, #4
 800aa4a:	d032      	beq.n	800aab2 <UART_SetConfig+0xad2>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	2b05      	cmp	r3, #5
 800aa52:	d02b      	beq.n	800aaac <UART_SetConfig+0xacc>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	2b06      	cmp	r3, #6
 800aa5a:	d024      	beq.n	800aaa6 <UART_SetConfig+0xac6>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	d01d      	beq.n	800aaa0 <UART_SetConfig+0xac0>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d016      	beq.n	800aa9a <UART_SetConfig+0xaba>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa70:	2b09      	cmp	r3, #9
 800aa72:	d00f      	beq.n	800aa94 <UART_SetConfig+0xab4>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	2b0a      	cmp	r3, #10
 800aa7a:	d008      	beq.n	800aa8e <UART_SetConfig+0xaae>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	2b0b      	cmp	r3, #11
 800aa82:	d101      	bne.n	800aa88 <UART_SetConfig+0xaa8>
 800aa84:	2380      	movs	r3, #128	; 0x80
 800aa86:	e022      	b.n	800aace <UART_SetConfig+0xaee>
 800aa88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa8c:	e01f      	b.n	800aace <UART_SetConfig+0xaee>
 800aa8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa92:	e01c      	b.n	800aace <UART_SetConfig+0xaee>
 800aa94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa98:	e019      	b.n	800aace <UART_SetConfig+0xaee>
 800aa9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9e:	e016      	b.n	800aace <UART_SetConfig+0xaee>
 800aaa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aaa4:	e013      	b.n	800aace <UART_SetConfig+0xaee>
 800aaa6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800aaaa:	e010      	b.n	800aace <UART_SetConfig+0xaee>
 800aaac:	f640 43cc 	movw	r3, #3276	; 0xccc
 800aab0:	e00d      	b.n	800aace <UART_SetConfig+0xaee>
 800aab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aab6:	e00a      	b.n	800aace <UART_SetConfig+0xaee>
 800aab8:	f241 5355 	movw	r3, #5461	; 0x1555
 800aabc:	e007      	b.n	800aace <UART_SetConfig+0xaee>
 800aabe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aac2:	e004      	b.n	800aace <UART_SetConfig+0xaee>
 800aac4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aac8:	e001      	b.n	800aace <UART_SetConfig+0xaee>
 800aaca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aad0:	e003      	b.n	800aada <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800aad8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f001 83e8 	beq.w	800c2b2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	4613      	mov	r3, r2
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	4413      	add	r3, r2
 800aaec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d305      	bcc.n	800aafe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d904      	bls.n	800ab08 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab04:	f001 bbd5 	b.w	800c2b2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800ab08:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	f000 8154 	beq.w	800adba <UART_SetConfig+0xdda>
 800ab12:	2b08      	cmp	r3, #8
 800ab14:	dc06      	bgt.n	800ab24 <UART_SetConfig+0xb44>
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d00f      	beq.n	800ab3a <UART_SetConfig+0xb5a>
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	f000 80ac 	beq.w	800ac78 <UART_SetConfig+0xc98>
 800ab20:	f000 bc30 	b.w	800b384 <UART_SetConfig+0x13a4>
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	f000 832d 	beq.w	800b184 <UART_SetConfig+0x11a4>
 800ab2a:	2b40      	cmp	r3, #64	; 0x40
 800ab2c:	f000 83a5 	beq.w	800b27a <UART_SetConfig+0x129a>
 800ab30:	2b10      	cmp	r3, #16
 800ab32:	f000 81e3 	beq.w	800aefc <UART_SetConfig+0xf1c>
 800ab36:	f000 bc25 	b.w	800b384 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab3a:	f7fd fc47 	bl	80083cc <HAL_RCCEx_GetD3PCLK1Freq>
 800ab3e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	4618      	mov	r0, r3
 800ab44:	f04f 0100 	mov.w	r1, #0
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d067      	beq.n	800ac20 <UART_SetConfig+0xc40>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d05e      	beq.n	800ac16 <UART_SetConfig+0xc36>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d055      	beq.n	800ac0c <UART_SetConfig+0xc2c>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	d04c      	beq.n	800ac02 <UART_SetConfig+0xc22>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b04      	cmp	r3, #4
 800ab6e:	d043      	beq.n	800abf8 <UART_SetConfig+0xc18>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b05      	cmp	r3, #5
 800ab76:	d03a      	beq.n	800abee <UART_SetConfig+0xc0e>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b06      	cmp	r3, #6
 800ab7e:	d031      	beq.n	800abe4 <UART_SetConfig+0xc04>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	2b07      	cmp	r3, #7
 800ab86:	d028      	beq.n	800abda <UART_SetConfig+0xbfa>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b08      	cmp	r3, #8
 800ab8e:	d01f      	beq.n	800abd0 <UART_SetConfig+0xbf0>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d016      	beq.n	800abc6 <UART_SetConfig+0xbe6>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b0a      	cmp	r3, #10
 800ab9e:	d00d      	beq.n	800abbc <UART_SetConfig+0xbdc>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b0b      	cmp	r3, #11
 800aba6:	d104      	bne.n	800abb2 <UART_SetConfig+0xbd2>
 800aba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abac:	f04f 0400 	mov.w	r4, #0
 800abb0:	e03a      	b.n	800ac28 <UART_SetConfig+0xc48>
 800abb2:	f04f 0301 	mov.w	r3, #1
 800abb6:	f04f 0400 	mov.w	r4, #0
 800abba:	e035      	b.n	800ac28 <UART_SetConfig+0xc48>
 800abbc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800abc0:	f04f 0400 	mov.w	r4, #0
 800abc4:	e030      	b.n	800ac28 <UART_SetConfig+0xc48>
 800abc6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800abca:	f04f 0400 	mov.w	r4, #0
 800abce:	e02b      	b.n	800ac28 <UART_SetConfig+0xc48>
 800abd0:	f04f 0320 	mov.w	r3, #32
 800abd4:	f04f 0400 	mov.w	r4, #0
 800abd8:	e026      	b.n	800ac28 <UART_SetConfig+0xc48>
 800abda:	f04f 0310 	mov.w	r3, #16
 800abde:	f04f 0400 	mov.w	r4, #0
 800abe2:	e021      	b.n	800ac28 <UART_SetConfig+0xc48>
 800abe4:	f04f 030c 	mov.w	r3, #12
 800abe8:	f04f 0400 	mov.w	r4, #0
 800abec:	e01c      	b.n	800ac28 <UART_SetConfig+0xc48>
 800abee:	f04f 030a 	mov.w	r3, #10
 800abf2:	f04f 0400 	mov.w	r4, #0
 800abf6:	e017      	b.n	800ac28 <UART_SetConfig+0xc48>
 800abf8:	f04f 0308 	mov.w	r3, #8
 800abfc:	f04f 0400 	mov.w	r4, #0
 800ac00:	e012      	b.n	800ac28 <UART_SetConfig+0xc48>
 800ac02:	f04f 0306 	mov.w	r3, #6
 800ac06:	f04f 0400 	mov.w	r4, #0
 800ac0a:	e00d      	b.n	800ac28 <UART_SetConfig+0xc48>
 800ac0c:	f04f 0304 	mov.w	r3, #4
 800ac10:	f04f 0400 	mov.w	r4, #0
 800ac14:	e008      	b.n	800ac28 <UART_SetConfig+0xc48>
 800ac16:	f04f 0302 	mov.w	r3, #2
 800ac1a:	f04f 0400 	mov.w	r4, #0
 800ac1e:	e003      	b.n	800ac28 <UART_SetConfig+0xc48>
 800ac20:	f04f 0301 	mov.w	r3, #1
 800ac24:	f04f 0400 	mov.w	r4, #0
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4623      	mov	r3, r4
 800ac2c:	f7f5 fb54 	bl	80002d8 <__aeabi_uldivmod>
 800ac30:	4603      	mov	r3, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	4619      	mov	r1, r3
 800ac36:	4622      	mov	r2, r4
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	0214      	lsls	r4, r2, #8
 800ac42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac46:	020b      	lsls	r3, r1, #8
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	6852      	ldr	r2, [r2, #4]
 800ac4c:	0852      	lsrs	r2, r2, #1
 800ac4e:	4611      	mov	r1, r2
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	eb13 0b01 	adds.w	fp, r3, r1
 800ac58:	eb44 0c02 	adc.w	ip, r4, r2
 800ac5c:	4658      	mov	r0, fp
 800ac5e:	4661      	mov	r1, ip
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	f04f 0400 	mov.w	r4, #0
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	f7f5 fb34 	bl	80002d8 <__aeabi_uldivmod>
 800ac70:	4603      	mov	r3, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac76:	e389      	b.n	800b38c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac78:	f107 0318 	add.w	r3, r7, #24
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fd fbbb 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f04f 0100 	mov.w	r1, #0
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d067      	beq.n	800ad62 <UART_SetConfig+0xd82>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d05e      	beq.n	800ad58 <UART_SetConfig+0xd78>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d055      	beq.n	800ad4e <UART_SetConfig+0xd6e>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	d04c      	beq.n	800ad44 <UART_SetConfig+0xd64>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	2b04      	cmp	r3, #4
 800acb0:	d043      	beq.n	800ad3a <UART_SetConfig+0xd5a>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	d03a      	beq.n	800ad30 <UART_SetConfig+0xd50>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	2b06      	cmp	r3, #6
 800acc0:	d031      	beq.n	800ad26 <UART_SetConfig+0xd46>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc6:	2b07      	cmp	r3, #7
 800acc8:	d028      	beq.n	800ad1c <UART_SetConfig+0xd3c>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acce:	2b08      	cmp	r3, #8
 800acd0:	d01f      	beq.n	800ad12 <UART_SetConfig+0xd32>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	2b09      	cmp	r3, #9
 800acd8:	d016      	beq.n	800ad08 <UART_SetConfig+0xd28>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	2b0a      	cmp	r3, #10
 800ace0:	d00d      	beq.n	800acfe <UART_SetConfig+0xd1e>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	2b0b      	cmp	r3, #11
 800ace8:	d104      	bne.n	800acf4 <UART_SetConfig+0xd14>
 800acea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acee:	f04f 0400 	mov.w	r4, #0
 800acf2:	e03a      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800acf4:	f04f 0301 	mov.w	r3, #1
 800acf8:	f04f 0400 	mov.w	r4, #0
 800acfc:	e035      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800acfe:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ad02:	f04f 0400 	mov.w	r4, #0
 800ad06:	e030      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad08:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ad0c:	f04f 0400 	mov.w	r4, #0
 800ad10:	e02b      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad12:	f04f 0320 	mov.w	r3, #32
 800ad16:	f04f 0400 	mov.w	r4, #0
 800ad1a:	e026      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad1c:	f04f 0310 	mov.w	r3, #16
 800ad20:	f04f 0400 	mov.w	r4, #0
 800ad24:	e021      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad26:	f04f 030c 	mov.w	r3, #12
 800ad2a:	f04f 0400 	mov.w	r4, #0
 800ad2e:	e01c      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad30:	f04f 030a 	mov.w	r3, #10
 800ad34:	f04f 0400 	mov.w	r4, #0
 800ad38:	e017      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad3a:	f04f 0308 	mov.w	r3, #8
 800ad3e:	f04f 0400 	mov.w	r4, #0
 800ad42:	e012      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad44:	f04f 0306 	mov.w	r3, #6
 800ad48:	f04f 0400 	mov.w	r4, #0
 800ad4c:	e00d      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad4e:	f04f 0304 	mov.w	r3, #4
 800ad52:	f04f 0400 	mov.w	r4, #0
 800ad56:	e008      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad58:	f04f 0302 	mov.w	r3, #2
 800ad5c:	f04f 0400 	mov.w	r4, #0
 800ad60:	e003      	b.n	800ad6a <UART_SetConfig+0xd8a>
 800ad62:	f04f 0301 	mov.w	r3, #1
 800ad66:	f04f 0400 	mov.w	r4, #0
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	f7f5 fab3 	bl	80002d8 <__aeabi_uldivmod>
 800ad72:	4603      	mov	r3, r0
 800ad74:	460c      	mov	r4, r1
 800ad76:	4619      	mov	r1, r3
 800ad78:	4622      	mov	r2, r4
 800ad7a:	f04f 0300 	mov.w	r3, #0
 800ad7e:	f04f 0400 	mov.w	r4, #0
 800ad82:	0214      	lsls	r4, r2, #8
 800ad84:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ad88:	020b      	lsls	r3, r1, #8
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	6852      	ldr	r2, [r2, #4]
 800ad8e:	0852      	lsrs	r2, r2, #1
 800ad90:	4611      	mov	r1, r2
 800ad92:	f04f 0200 	mov.w	r2, #0
 800ad96:	eb13 0b01 	adds.w	fp, r3, r1
 800ad9a:	eb44 0c02 	adc.w	ip, r4, r2
 800ad9e:	4658      	mov	r0, fp
 800ada0:	4661      	mov	r1, ip
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f04f 0400 	mov.w	r4, #0
 800adaa:	461a      	mov	r2, r3
 800adac:	4623      	mov	r3, r4
 800adae:	f7f5 fa93 	bl	80002d8 <__aeabi_uldivmod>
 800adb2:	4603      	mov	r3, r0
 800adb4:	460c      	mov	r4, r1
 800adb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800adb8:	e2e8      	b.n	800b38c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adba:	f107 030c 	add.w	r3, r7, #12
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fd fc66 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f04f 0100 	mov.w	r1, #0
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b00      	cmp	r3, #0
 800add2:	d067      	beq.n	800aea4 <UART_SetConfig+0xec4>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b01      	cmp	r3, #1
 800adda:	d05e      	beq.n	800ae9a <UART_SetConfig+0xeba>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d055      	beq.n	800ae90 <UART_SetConfig+0xeb0>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	2b03      	cmp	r3, #3
 800adea:	d04c      	beq.n	800ae86 <UART_SetConfig+0xea6>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	d043      	beq.n	800ae7c <UART_SetConfig+0xe9c>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	2b05      	cmp	r3, #5
 800adfa:	d03a      	beq.n	800ae72 <UART_SetConfig+0xe92>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	2b06      	cmp	r3, #6
 800ae02:	d031      	beq.n	800ae68 <UART_SetConfig+0xe88>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	2b07      	cmp	r3, #7
 800ae0a:	d028      	beq.n	800ae5e <UART_SetConfig+0xe7e>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	2b08      	cmp	r3, #8
 800ae12:	d01f      	beq.n	800ae54 <UART_SetConfig+0xe74>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	2b09      	cmp	r3, #9
 800ae1a:	d016      	beq.n	800ae4a <UART_SetConfig+0xe6a>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae20:	2b0a      	cmp	r3, #10
 800ae22:	d00d      	beq.n	800ae40 <UART_SetConfig+0xe60>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	2b0b      	cmp	r3, #11
 800ae2a:	d104      	bne.n	800ae36 <UART_SetConfig+0xe56>
 800ae2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae30:	f04f 0400 	mov.w	r4, #0
 800ae34:	e03a      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae36:	f04f 0301 	mov.w	r3, #1
 800ae3a:	f04f 0400 	mov.w	r4, #0
 800ae3e:	e035      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae40:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ae44:	f04f 0400 	mov.w	r4, #0
 800ae48:	e030      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ae4e:	f04f 0400 	mov.w	r4, #0
 800ae52:	e02b      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae54:	f04f 0320 	mov.w	r3, #32
 800ae58:	f04f 0400 	mov.w	r4, #0
 800ae5c:	e026      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae5e:	f04f 0310 	mov.w	r3, #16
 800ae62:	f04f 0400 	mov.w	r4, #0
 800ae66:	e021      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae68:	f04f 030c 	mov.w	r3, #12
 800ae6c:	f04f 0400 	mov.w	r4, #0
 800ae70:	e01c      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae72:	f04f 030a 	mov.w	r3, #10
 800ae76:	f04f 0400 	mov.w	r4, #0
 800ae7a:	e017      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae7c:	f04f 0308 	mov.w	r3, #8
 800ae80:	f04f 0400 	mov.w	r4, #0
 800ae84:	e012      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae86:	f04f 0306 	mov.w	r3, #6
 800ae8a:	f04f 0400 	mov.w	r4, #0
 800ae8e:	e00d      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae90:	f04f 0304 	mov.w	r3, #4
 800ae94:	f04f 0400 	mov.w	r4, #0
 800ae98:	e008      	b.n	800aeac <UART_SetConfig+0xecc>
 800ae9a:	f04f 0302 	mov.w	r3, #2
 800ae9e:	f04f 0400 	mov.w	r4, #0
 800aea2:	e003      	b.n	800aeac <UART_SetConfig+0xecc>
 800aea4:	f04f 0301 	mov.w	r3, #1
 800aea8:	f04f 0400 	mov.w	r4, #0
 800aeac:	461a      	mov	r2, r3
 800aeae:	4623      	mov	r3, r4
 800aeb0:	f7f5 fa12 	bl	80002d8 <__aeabi_uldivmod>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4622      	mov	r2, r4
 800aebc:	f04f 0300 	mov.w	r3, #0
 800aec0:	f04f 0400 	mov.w	r4, #0
 800aec4:	0214      	lsls	r4, r2, #8
 800aec6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aeca:	020b      	lsls	r3, r1, #8
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	6852      	ldr	r2, [r2, #4]
 800aed0:	0852      	lsrs	r2, r2, #1
 800aed2:	4611      	mov	r1, r2
 800aed4:	f04f 0200 	mov.w	r2, #0
 800aed8:	eb13 0b01 	adds.w	fp, r3, r1
 800aedc:	eb44 0c02 	adc.w	ip, r4, r2
 800aee0:	4658      	mov	r0, fp
 800aee2:	4661      	mov	r1, ip
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f04f 0400 	mov.w	r4, #0
 800aeec:	461a      	mov	r2, r3
 800aeee:	4623      	mov	r3, r4
 800aef0:	f7f5 f9f2 	bl	80002d8 <__aeabi_uldivmod>
 800aef4:	4603      	mov	r3, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aefa:	e247      	b.n	800b38c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aefc:	4b96      	ldr	r3, [pc, #600]	; (800b158 <UART_SetConfig+0x1178>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0320 	and.w	r3, r3, #32
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 80a3 	beq.w	800b050 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af0a:	4b93      	ldr	r3, [pc, #588]	; (800b158 <UART_SetConfig+0x1178>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	08db      	lsrs	r3, r3, #3
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	4a91      	ldr	r2, [pc, #580]	; (800b15c <UART_SetConfig+0x117c>)
 800af16:	fa22 f303 	lsr.w	r3, r2, r3
 800af1a:	4618      	mov	r0, r3
 800af1c:	f04f 0100 	mov.w	r1, #0
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	d067      	beq.n	800aff8 <UART_SetConfig+0x1018>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d05e      	beq.n	800afee <UART_SetConfig+0x100e>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	2b02      	cmp	r3, #2
 800af36:	d055      	beq.n	800afe4 <UART_SetConfig+0x1004>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	2b03      	cmp	r3, #3
 800af3e:	d04c      	beq.n	800afda <UART_SetConfig+0xffa>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	2b04      	cmp	r3, #4
 800af46:	d043      	beq.n	800afd0 <UART_SetConfig+0xff0>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	2b05      	cmp	r3, #5
 800af4e:	d03a      	beq.n	800afc6 <UART_SetConfig+0xfe6>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b06      	cmp	r3, #6
 800af56:	d031      	beq.n	800afbc <UART_SetConfig+0xfdc>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	2b07      	cmp	r3, #7
 800af5e:	d028      	beq.n	800afb2 <UART_SetConfig+0xfd2>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	2b08      	cmp	r3, #8
 800af66:	d01f      	beq.n	800afa8 <UART_SetConfig+0xfc8>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	2b09      	cmp	r3, #9
 800af6e:	d016      	beq.n	800af9e <UART_SetConfig+0xfbe>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	2b0a      	cmp	r3, #10
 800af76:	d00d      	beq.n	800af94 <UART_SetConfig+0xfb4>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7c:	2b0b      	cmp	r3, #11
 800af7e:	d104      	bne.n	800af8a <UART_SetConfig+0xfaa>
 800af80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af84:	f04f 0400 	mov.w	r4, #0
 800af88:	e03a      	b.n	800b000 <UART_SetConfig+0x1020>
 800af8a:	f04f 0301 	mov.w	r3, #1
 800af8e:	f04f 0400 	mov.w	r4, #0
 800af92:	e035      	b.n	800b000 <UART_SetConfig+0x1020>
 800af94:	f04f 0380 	mov.w	r3, #128	; 0x80
 800af98:	f04f 0400 	mov.w	r4, #0
 800af9c:	e030      	b.n	800b000 <UART_SetConfig+0x1020>
 800af9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800afa2:	f04f 0400 	mov.w	r4, #0
 800afa6:	e02b      	b.n	800b000 <UART_SetConfig+0x1020>
 800afa8:	f04f 0320 	mov.w	r3, #32
 800afac:	f04f 0400 	mov.w	r4, #0
 800afb0:	e026      	b.n	800b000 <UART_SetConfig+0x1020>
 800afb2:	f04f 0310 	mov.w	r3, #16
 800afb6:	f04f 0400 	mov.w	r4, #0
 800afba:	e021      	b.n	800b000 <UART_SetConfig+0x1020>
 800afbc:	f04f 030c 	mov.w	r3, #12
 800afc0:	f04f 0400 	mov.w	r4, #0
 800afc4:	e01c      	b.n	800b000 <UART_SetConfig+0x1020>
 800afc6:	f04f 030a 	mov.w	r3, #10
 800afca:	f04f 0400 	mov.w	r4, #0
 800afce:	e017      	b.n	800b000 <UART_SetConfig+0x1020>
 800afd0:	f04f 0308 	mov.w	r3, #8
 800afd4:	f04f 0400 	mov.w	r4, #0
 800afd8:	e012      	b.n	800b000 <UART_SetConfig+0x1020>
 800afda:	f04f 0306 	mov.w	r3, #6
 800afde:	f04f 0400 	mov.w	r4, #0
 800afe2:	e00d      	b.n	800b000 <UART_SetConfig+0x1020>
 800afe4:	f04f 0304 	mov.w	r3, #4
 800afe8:	f04f 0400 	mov.w	r4, #0
 800afec:	e008      	b.n	800b000 <UART_SetConfig+0x1020>
 800afee:	f04f 0302 	mov.w	r3, #2
 800aff2:	f04f 0400 	mov.w	r4, #0
 800aff6:	e003      	b.n	800b000 <UART_SetConfig+0x1020>
 800aff8:	f04f 0301 	mov.w	r3, #1
 800affc:	f04f 0400 	mov.w	r4, #0
 800b000:	461a      	mov	r2, r3
 800b002:	4623      	mov	r3, r4
 800b004:	f7f5 f968 	bl	80002d8 <__aeabi_uldivmod>
 800b008:	4603      	mov	r3, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	4619      	mov	r1, r3
 800b00e:	4622      	mov	r2, r4
 800b010:	f04f 0300 	mov.w	r3, #0
 800b014:	f04f 0400 	mov.w	r4, #0
 800b018:	0214      	lsls	r4, r2, #8
 800b01a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b01e:	020b      	lsls	r3, r1, #8
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	6852      	ldr	r2, [r2, #4]
 800b024:	0852      	lsrs	r2, r2, #1
 800b026:	4611      	mov	r1, r2
 800b028:	f04f 0200 	mov.w	r2, #0
 800b02c:	eb13 0b01 	adds.w	fp, r3, r1
 800b030:	eb44 0c02 	adc.w	ip, r4, r2
 800b034:	4658      	mov	r0, fp
 800b036:	4661      	mov	r1, ip
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f04f 0400 	mov.w	r4, #0
 800b040:	461a      	mov	r2, r3
 800b042:	4623      	mov	r3, r4
 800b044:	f7f5 f948 	bl	80002d8 <__aeabi_uldivmod>
 800b048:	4603      	mov	r3, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800b04e:	e19d      	b.n	800b38c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b054:	2b00      	cmp	r3, #0
 800b056:	d05b      	beq.n	800b110 <UART_SetConfig+0x1130>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d053      	beq.n	800b108 <UART_SetConfig+0x1128>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	2b02      	cmp	r3, #2
 800b066:	d04b      	beq.n	800b100 <UART_SetConfig+0x1120>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d043      	beq.n	800b0f8 <UART_SetConfig+0x1118>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b074:	2b04      	cmp	r3, #4
 800b076:	d03b      	beq.n	800b0f0 <UART_SetConfig+0x1110>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07c:	2b05      	cmp	r3, #5
 800b07e:	d033      	beq.n	800b0e8 <UART_SetConfig+0x1108>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b084:	2b06      	cmp	r3, #6
 800b086:	d02b      	beq.n	800b0e0 <UART_SetConfig+0x1100>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08c:	2b07      	cmp	r3, #7
 800b08e:	d023      	beq.n	800b0d8 <UART_SetConfig+0x10f8>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b094:	2b08      	cmp	r3, #8
 800b096:	d01b      	beq.n	800b0d0 <UART_SetConfig+0x10f0>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	2b09      	cmp	r3, #9
 800b09e:	d013      	beq.n	800b0c8 <UART_SetConfig+0x10e8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	2b0a      	cmp	r3, #10
 800b0a6:	d00b      	beq.n	800b0c0 <UART_SetConfig+0x10e0>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	2b0b      	cmp	r3, #11
 800b0ae:	d103      	bne.n	800b0b8 <UART_SetConfig+0x10d8>
 800b0b0:	4b2a      	ldr	r3, [pc, #168]	; (800b15c <UART_SetConfig+0x117c>)
 800b0b2:	f04f 0400 	mov.w	r4, #0
 800b0b6:	e02e      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0b8:	4b29      	ldr	r3, [pc, #164]	; (800b160 <UART_SetConfig+0x1180>)
 800b0ba:	f04f 0403 	mov.w	r4, #3
 800b0be:	e02a      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0c0:	4b28      	ldr	r3, [pc, #160]	; (800b164 <UART_SetConfig+0x1184>)
 800b0c2:	f04f 0400 	mov.w	r4, #0
 800b0c6:	e026      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0c8:	4b27      	ldr	r3, [pc, #156]	; (800b168 <UART_SetConfig+0x1188>)
 800b0ca:	f04f 0400 	mov.w	r4, #0
 800b0ce:	e022      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0d0:	4b26      	ldr	r3, [pc, #152]	; (800b16c <UART_SetConfig+0x118c>)
 800b0d2:	f04f 0400 	mov.w	r4, #0
 800b0d6:	e01e      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0d8:	4b25      	ldr	r3, [pc, #148]	; (800b170 <UART_SetConfig+0x1190>)
 800b0da:	f04f 0400 	mov.w	r4, #0
 800b0de:	e01a      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0e0:	a419      	add	r4, pc, #100	; (adr r4, 800b148 <UART_SetConfig+0x1168>)
 800b0e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b0e6:	e016      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0e8:	4b22      	ldr	r3, [pc, #136]	; (800b174 <UART_SetConfig+0x1194>)
 800b0ea:	f04f 0400 	mov.w	r4, #0
 800b0ee:	e012      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0f0:	4b21      	ldr	r3, [pc, #132]	; (800b178 <UART_SetConfig+0x1198>)
 800b0f2:	f04f 0400 	mov.w	r4, #0
 800b0f6:	e00e      	b.n	800b116 <UART_SetConfig+0x1136>
 800b0f8:	a415      	add	r4, pc, #84	; (adr r4, 800b150 <UART_SetConfig+0x1170>)
 800b0fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b0fe:	e00a      	b.n	800b116 <UART_SetConfig+0x1136>
 800b100:	4b1e      	ldr	r3, [pc, #120]	; (800b17c <UART_SetConfig+0x119c>)
 800b102:	f04f 0400 	mov.w	r4, #0
 800b106:	e006      	b.n	800b116 <UART_SetConfig+0x1136>
 800b108:	4b1d      	ldr	r3, [pc, #116]	; (800b180 <UART_SetConfig+0x11a0>)
 800b10a:	f04f 0401 	mov.w	r4, #1
 800b10e:	e002      	b.n	800b116 <UART_SetConfig+0x1136>
 800b110:	4b13      	ldr	r3, [pc, #76]	; (800b160 <UART_SetConfig+0x1180>)
 800b112:	f04f 0403 	mov.w	r4, #3
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	6852      	ldr	r2, [r2, #4]
 800b11a:	0852      	lsrs	r2, r2, #1
 800b11c:	4611      	mov	r1, r2
 800b11e:	f04f 0200 	mov.w	r2, #0
 800b122:	eb13 0b01 	adds.w	fp, r3, r1
 800b126:	eb44 0c02 	adc.w	ip, r4, r2
 800b12a:	4658      	mov	r0, fp
 800b12c:	4661      	mov	r1, ip
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f04f 0400 	mov.w	r4, #0
 800b136:	461a      	mov	r2, r3
 800b138:	4623      	mov	r3, r4
 800b13a:	f7f5 f8cd 	bl	80002d8 <__aeabi_uldivmod>
 800b13e:	4603      	mov	r3, r0
 800b140:	460c      	mov	r4, r1
 800b142:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b144:	e122      	b.n	800b38c <UART_SetConfig+0x13ac>
 800b146:	bf00      	nop
 800b148:	51615500 	.word	0x51615500
 800b14c:	00000000 	.word	0x00000000
 800b150:	a2c2aa00 	.word	0xa2c2aa00
 800b154:	00000000 	.word	0x00000000
 800b158:	58024400 	.word	0x58024400
 800b15c:	03d09000 	.word	0x03d09000
 800b160:	d0900000 	.word	0xd0900000
 800b164:	07a12000 	.word	0x07a12000
 800b168:	0f424000 	.word	0x0f424000
 800b16c:	1e848000 	.word	0x1e848000
 800b170:	3d090000 	.word	0x3d090000
 800b174:	61a80000 	.word	0x61a80000
 800b178:	7a120000 	.word	0x7a120000
 800b17c:	f4240000 	.word	0xf4240000
 800b180:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d05b      	beq.n	800b244 <UART_SetConfig+0x1264>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b190:	2b01      	cmp	r3, #1
 800b192:	d053      	beq.n	800b23c <UART_SetConfig+0x125c>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d04b      	beq.n	800b234 <UART_SetConfig+0x1254>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d043      	beq.n	800b22c <UART_SetConfig+0x124c>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d03b      	beq.n	800b224 <UART_SetConfig+0x1244>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	2b05      	cmp	r3, #5
 800b1b2:	d033      	beq.n	800b21c <UART_SetConfig+0x123c>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	2b06      	cmp	r3, #6
 800b1ba:	d02b      	beq.n	800b214 <UART_SetConfig+0x1234>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	2b07      	cmp	r3, #7
 800b1c2:	d023      	beq.n	800b20c <UART_SetConfig+0x122c>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d01b      	beq.n	800b204 <UART_SetConfig+0x1224>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	2b09      	cmp	r3, #9
 800b1d2:	d013      	beq.n	800b1fc <UART_SetConfig+0x121c>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	2b0a      	cmp	r3, #10
 800b1da:	d00b      	beq.n	800b1f4 <UART_SetConfig+0x1214>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	2b0b      	cmp	r3, #11
 800b1e2:	d103      	bne.n	800b1ec <UART_SetConfig+0x120c>
 800b1e4:	4bc0      	ldr	r3, [pc, #768]	; (800b4e8 <UART_SetConfig+0x1508>)
 800b1e6:	f04f 0400 	mov.w	r4, #0
 800b1ea:	e02e      	b.n	800b24a <UART_SetConfig+0x126a>
 800b1ec:	4bbf      	ldr	r3, [pc, #764]	; (800b4ec <UART_SetConfig+0x150c>)
 800b1ee:	f04f 0400 	mov.w	r4, #0
 800b1f2:	e02a      	b.n	800b24a <UART_SetConfig+0x126a>
 800b1f4:	4bbe      	ldr	r3, [pc, #760]	; (800b4f0 <UART_SetConfig+0x1510>)
 800b1f6:	f04f 0400 	mov.w	r4, #0
 800b1fa:	e026      	b.n	800b24a <UART_SetConfig+0x126a>
 800b1fc:	4bbd      	ldr	r3, [pc, #756]	; (800b4f4 <UART_SetConfig+0x1514>)
 800b1fe:	f04f 0400 	mov.w	r4, #0
 800b202:	e022      	b.n	800b24a <UART_SetConfig+0x126a>
 800b204:	4bbc      	ldr	r3, [pc, #752]	; (800b4f8 <UART_SetConfig+0x1518>)
 800b206:	f04f 0400 	mov.w	r4, #0
 800b20a:	e01e      	b.n	800b24a <UART_SetConfig+0x126a>
 800b20c:	4bbb      	ldr	r3, [pc, #748]	; (800b4fc <UART_SetConfig+0x151c>)
 800b20e:	f04f 0400 	mov.w	r4, #0
 800b212:	e01a      	b.n	800b24a <UART_SetConfig+0x126a>
 800b214:	a4b0      	add	r4, pc, #704	; (adr r4, 800b4d8 <UART_SetConfig+0x14f8>)
 800b216:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b21a:	e016      	b.n	800b24a <UART_SetConfig+0x126a>
 800b21c:	4bb8      	ldr	r3, [pc, #736]	; (800b500 <UART_SetConfig+0x1520>)
 800b21e:	f04f 0400 	mov.w	r4, #0
 800b222:	e012      	b.n	800b24a <UART_SetConfig+0x126a>
 800b224:	4bb7      	ldr	r3, [pc, #732]	; (800b504 <UART_SetConfig+0x1524>)
 800b226:	f04f 0400 	mov.w	r4, #0
 800b22a:	e00e      	b.n	800b24a <UART_SetConfig+0x126a>
 800b22c:	a4ac      	add	r4, pc, #688	; (adr r4, 800b4e0 <UART_SetConfig+0x1500>)
 800b22e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b232:	e00a      	b.n	800b24a <UART_SetConfig+0x126a>
 800b234:	4bb4      	ldr	r3, [pc, #720]	; (800b508 <UART_SetConfig+0x1528>)
 800b236:	f04f 0400 	mov.w	r4, #0
 800b23a:	e006      	b.n	800b24a <UART_SetConfig+0x126a>
 800b23c:	4bb3      	ldr	r3, [pc, #716]	; (800b50c <UART_SetConfig+0x152c>)
 800b23e:	f04f 0400 	mov.w	r4, #0
 800b242:	e002      	b.n	800b24a <UART_SetConfig+0x126a>
 800b244:	4ba9      	ldr	r3, [pc, #676]	; (800b4ec <UART_SetConfig+0x150c>)
 800b246:	f04f 0400 	mov.w	r4, #0
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	6852      	ldr	r2, [r2, #4]
 800b24e:	0852      	lsrs	r2, r2, #1
 800b250:	4611      	mov	r1, r2
 800b252:	f04f 0200 	mov.w	r2, #0
 800b256:	eb13 0b01 	adds.w	fp, r3, r1
 800b25a:	eb44 0c02 	adc.w	ip, r4, r2
 800b25e:	4658      	mov	r0, fp
 800b260:	4661      	mov	r1, ip
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f04f 0400 	mov.w	r4, #0
 800b26a:	461a      	mov	r2, r3
 800b26c:	4623      	mov	r3, r4
 800b26e:	f7f5 f833 	bl	80002d8 <__aeabi_uldivmod>
 800b272:	4603      	mov	r3, r0
 800b274:	460c      	mov	r4, r1
 800b276:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b278:	e088      	b.n	800b38c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d064      	beq.n	800b34c <UART_SetConfig+0x136c>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2b01      	cmp	r3, #1
 800b288:	d05b      	beq.n	800b342 <UART_SetConfig+0x1362>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d052      	beq.n	800b338 <UART_SetConfig+0x1358>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	2b03      	cmp	r3, #3
 800b298:	d04a      	beq.n	800b330 <UART_SetConfig+0x1350>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b04      	cmp	r3, #4
 800b2a0:	d041      	beq.n	800b326 <UART_SetConfig+0x1346>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	2b05      	cmp	r3, #5
 800b2a8:	d039      	beq.n	800b31e <UART_SetConfig+0x133e>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	2b06      	cmp	r3, #6
 800b2b0:	d031      	beq.n	800b316 <UART_SetConfig+0x1336>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	2b07      	cmp	r3, #7
 800b2b8:	d028      	beq.n	800b30c <UART_SetConfig+0x132c>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2be:	2b08      	cmp	r3, #8
 800b2c0:	d01f      	beq.n	800b302 <UART_SetConfig+0x1322>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c6:	2b09      	cmp	r3, #9
 800b2c8:	d016      	beq.n	800b2f8 <UART_SetConfig+0x1318>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	2b0a      	cmp	r3, #10
 800b2d0:	d00d      	beq.n	800b2ee <UART_SetConfig+0x130e>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d6:	2b0b      	cmp	r3, #11
 800b2d8:	d104      	bne.n	800b2e4 <UART_SetConfig+0x1304>
 800b2da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2de:	f04f 0400 	mov.w	r4, #0
 800b2e2:	e037      	b.n	800b354 <UART_SetConfig+0x1374>
 800b2e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2e8:	f04f 0400 	mov.w	r4, #0
 800b2ec:	e032      	b.n	800b354 <UART_SetConfig+0x1374>
 800b2ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b2f2:	f04f 0400 	mov.w	r4, #0
 800b2f6:	e02d      	b.n	800b354 <UART_SetConfig+0x1374>
 800b2f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2fc:	f04f 0400 	mov.w	r4, #0
 800b300:	e028      	b.n	800b354 <UART_SetConfig+0x1374>
 800b302:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b306:	f04f 0400 	mov.w	r4, #0
 800b30a:	e023      	b.n	800b354 <UART_SetConfig+0x1374>
 800b30c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b310:	f04f 0400 	mov.w	r4, #0
 800b314:	e01e      	b.n	800b354 <UART_SetConfig+0x1374>
 800b316:	4b7e      	ldr	r3, [pc, #504]	; (800b510 <UART_SetConfig+0x1530>)
 800b318:	f04f 0400 	mov.w	r4, #0
 800b31c:	e01a      	b.n	800b354 <UART_SetConfig+0x1374>
 800b31e:	4b7d      	ldr	r3, [pc, #500]	; (800b514 <UART_SetConfig+0x1534>)
 800b320:	f04f 0400 	mov.w	r4, #0
 800b324:	e016      	b.n	800b354 <UART_SetConfig+0x1374>
 800b326:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b32a:	f04f 0400 	mov.w	r4, #0
 800b32e:	e011      	b.n	800b354 <UART_SetConfig+0x1374>
 800b330:	4b79      	ldr	r3, [pc, #484]	; (800b518 <UART_SetConfig+0x1538>)
 800b332:	f04f 0400 	mov.w	r4, #0
 800b336:	e00d      	b.n	800b354 <UART_SetConfig+0x1374>
 800b338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b33c:	f04f 0400 	mov.w	r4, #0
 800b340:	e008      	b.n	800b354 <UART_SetConfig+0x1374>
 800b342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b346:	f04f 0400 	mov.w	r4, #0
 800b34a:	e003      	b.n	800b354 <UART_SetConfig+0x1374>
 800b34c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b350:	f04f 0400 	mov.w	r4, #0
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	6852      	ldr	r2, [r2, #4]
 800b358:	0852      	lsrs	r2, r2, #1
 800b35a:	4611      	mov	r1, r2
 800b35c:	f04f 0200 	mov.w	r2, #0
 800b360:	eb13 0b01 	adds.w	fp, r3, r1
 800b364:	eb44 0c02 	adc.w	ip, r4, r2
 800b368:	4658      	mov	r0, fp
 800b36a:	4661      	mov	r1, ip
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	f04f 0400 	mov.w	r4, #0
 800b374:	461a      	mov	r2, r3
 800b376:	4623      	mov	r3, r4
 800b378:	f7f4 ffae 	bl	80002d8 <__aeabi_uldivmod>
 800b37c:	4603      	mov	r3, r0
 800b37e:	460c      	mov	r4, r1
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b382:	e003      	b.n	800b38c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b38a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b392:	d309      	bcc.n	800b3a8 <UART_SetConfig+0x13c8>
 800b394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b39a:	d205      	bcs.n	800b3a8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3a2:	60da      	str	r2, [r3, #12]
 800b3a4:	f000 bf85 	b.w	800c2b2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ae:	f000 bf80 	b.w	800c2b2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ba:	f040 83da 	bne.w	800bb72 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b3be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3c2:	2b40      	cmp	r3, #64	; 0x40
 800b3c4:	f200 83b3 	bhi.w	800bb2e <UART_SetConfig+0x1b4e>
 800b3c8:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <UART_SetConfig+0x13f0>)
 800b3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ce:	bf00      	nop
 800b3d0:	0800b51d 	.word	0x0800b51d
 800b3d4:	0800b5d5 	.word	0x0800b5d5
 800b3d8:	0800bb2f 	.word	0x0800bb2f
 800b3dc:	0800bb2f 	.word	0x0800bb2f
 800b3e0:	0800b68d 	.word	0x0800b68d
 800b3e4:	0800bb2f 	.word	0x0800bb2f
 800b3e8:	0800bb2f 	.word	0x0800bb2f
 800b3ec:	0800bb2f 	.word	0x0800bb2f
 800b3f0:	0800b749 	.word	0x0800b749
 800b3f4:	0800bb2f 	.word	0x0800bb2f
 800b3f8:	0800bb2f 	.word	0x0800bb2f
 800b3fc:	0800bb2f 	.word	0x0800bb2f
 800b400:	0800bb2f 	.word	0x0800bb2f
 800b404:	0800bb2f 	.word	0x0800bb2f
 800b408:	0800bb2f 	.word	0x0800bb2f
 800b40c:	0800bb2f 	.word	0x0800bb2f
 800b410:	0800b805 	.word	0x0800b805
 800b414:	0800bb2f 	.word	0x0800bb2f
 800b418:	0800bb2f 	.word	0x0800bb2f
 800b41c:	0800bb2f 	.word	0x0800bb2f
 800b420:	0800bb2f 	.word	0x0800bb2f
 800b424:	0800bb2f 	.word	0x0800bb2f
 800b428:	0800bb2f 	.word	0x0800bb2f
 800b42c:	0800bb2f 	.word	0x0800bb2f
 800b430:	0800bb2f 	.word	0x0800bb2f
 800b434:	0800bb2f 	.word	0x0800bb2f
 800b438:	0800bb2f 	.word	0x0800bb2f
 800b43c:	0800bb2f 	.word	0x0800bb2f
 800b440:	0800bb2f 	.word	0x0800bb2f
 800b444:	0800bb2f 	.word	0x0800bb2f
 800b448:	0800bb2f 	.word	0x0800bb2f
 800b44c:	0800bb2f 	.word	0x0800bb2f
 800b450:	0800b977 	.word	0x0800b977
 800b454:	0800bb2f 	.word	0x0800bb2f
 800b458:	0800bb2f 	.word	0x0800bb2f
 800b45c:	0800bb2f 	.word	0x0800bb2f
 800b460:	0800bb2f 	.word	0x0800bb2f
 800b464:	0800bb2f 	.word	0x0800bb2f
 800b468:	0800bb2f 	.word	0x0800bb2f
 800b46c:	0800bb2f 	.word	0x0800bb2f
 800b470:	0800bb2f 	.word	0x0800bb2f
 800b474:	0800bb2f 	.word	0x0800bb2f
 800b478:	0800bb2f 	.word	0x0800bb2f
 800b47c:	0800bb2f 	.word	0x0800bb2f
 800b480:	0800bb2f 	.word	0x0800bb2f
 800b484:	0800bb2f 	.word	0x0800bb2f
 800b488:	0800bb2f 	.word	0x0800bb2f
 800b48c:	0800bb2f 	.word	0x0800bb2f
 800b490:	0800bb2f 	.word	0x0800bb2f
 800b494:	0800bb2f 	.word	0x0800bb2f
 800b498:	0800bb2f 	.word	0x0800bb2f
 800b49c:	0800bb2f 	.word	0x0800bb2f
 800b4a0:	0800bb2f 	.word	0x0800bb2f
 800b4a4:	0800bb2f 	.word	0x0800bb2f
 800b4a8:	0800bb2f 	.word	0x0800bb2f
 800b4ac:	0800bb2f 	.word	0x0800bb2f
 800b4b0:	0800bb2f 	.word	0x0800bb2f
 800b4b4:	0800bb2f 	.word	0x0800bb2f
 800b4b8:	0800bb2f 	.word	0x0800bb2f
 800b4bc:	0800bb2f 	.word	0x0800bb2f
 800b4c0:	0800bb2f 	.word	0x0800bb2f
 800b4c4:	0800bb2f 	.word	0x0800bb2f
 800b4c8:	0800bb2f 	.word	0x0800bb2f
 800b4cc:	0800bb2f 	.word	0x0800bb2f
 800b4d0:	0800ba6d 	.word	0x0800ba6d
 800b4d4:	f3af 8000 	nop.w
 800b4d8:	05161500 	.word	0x05161500
 800b4dc:	00000000 	.word	0x00000000
 800b4e0:	0a2c2a00 	.word	0x0a2c2a00
 800b4e4:	00000000 	.word	0x00000000
 800b4e8:	003d0900 	.word	0x003d0900
 800b4ec:	3d090000 	.word	0x3d090000
 800b4f0:	007a1200 	.word	0x007a1200
 800b4f4:	00f42400 	.word	0x00f42400
 800b4f8:	01e84800 	.word	0x01e84800
 800b4fc:	03d09000 	.word	0x03d09000
 800b500:	061a8000 	.word	0x061a8000
 800b504:	07a12000 	.word	0x07a12000
 800b508:	0f424000 	.word	0x0f424000
 800b50c:	1e848000 	.word	0x1e848000
 800b510:	000aaa00 	.word	0x000aaa00
 800b514:	000ccc00 	.word	0x000ccc00
 800b518:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b51c:	f7fb fdd4 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 800b520:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	2b00      	cmp	r3, #0
 800b528:	d044      	beq.n	800b5b4 <UART_SetConfig+0x15d4>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d03e      	beq.n	800b5b0 <UART_SetConfig+0x15d0>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	2b02      	cmp	r3, #2
 800b538:	d038      	beq.n	800b5ac <UART_SetConfig+0x15cc>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	2b03      	cmp	r3, #3
 800b540:	d032      	beq.n	800b5a8 <UART_SetConfig+0x15c8>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	2b04      	cmp	r3, #4
 800b548:	d02c      	beq.n	800b5a4 <UART_SetConfig+0x15c4>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d026      	beq.n	800b5a0 <UART_SetConfig+0x15c0>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	2b06      	cmp	r3, #6
 800b558:	d020      	beq.n	800b59c <UART_SetConfig+0x15bc>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	2b07      	cmp	r3, #7
 800b560:	d01a      	beq.n	800b598 <UART_SetConfig+0x15b8>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b566:	2b08      	cmp	r3, #8
 800b568:	d014      	beq.n	800b594 <UART_SetConfig+0x15b4>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56e:	2b09      	cmp	r3, #9
 800b570:	d00e      	beq.n	800b590 <UART_SetConfig+0x15b0>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b576:	2b0a      	cmp	r3, #10
 800b578:	d008      	beq.n	800b58c <UART_SetConfig+0x15ac>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57e:	2b0b      	cmp	r3, #11
 800b580:	d102      	bne.n	800b588 <UART_SetConfig+0x15a8>
 800b582:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b586:	e016      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b588:	2301      	movs	r3, #1
 800b58a:	e014      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b58c:	2380      	movs	r3, #128	; 0x80
 800b58e:	e012      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b590:	2340      	movs	r3, #64	; 0x40
 800b592:	e010      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b594:	2320      	movs	r3, #32
 800b596:	e00e      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b598:	2310      	movs	r3, #16
 800b59a:	e00c      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b59c:	230c      	movs	r3, #12
 800b59e:	e00a      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b5a0:	230a      	movs	r3, #10
 800b5a2:	e008      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b5a4:	2308      	movs	r3, #8
 800b5a6:	e006      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b5a8:	2306      	movs	r3, #6
 800b5aa:	e004      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	e002      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	e000      	b.n	800b5b6 <UART_SetConfig+0x15d6>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5bc:	005a      	lsls	r2, r3, #1
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	085b      	lsrs	r3, r3, #1
 800b5c4:	441a      	add	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5d2:	e2b0      	b.n	800bb36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5d4:	f7fb fd8e 	bl	80070f4 <HAL_RCC_GetPCLK2Freq>
 800b5d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d044      	beq.n	800b66c <UART_SetConfig+0x168c>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d03e      	beq.n	800b668 <UART_SetConfig+0x1688>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d038      	beq.n	800b664 <UART_SetConfig+0x1684>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d032      	beq.n	800b660 <UART_SetConfig+0x1680>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	2b04      	cmp	r3, #4
 800b600:	d02c      	beq.n	800b65c <UART_SetConfig+0x167c>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b606:	2b05      	cmp	r3, #5
 800b608:	d026      	beq.n	800b658 <UART_SetConfig+0x1678>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	2b06      	cmp	r3, #6
 800b610:	d020      	beq.n	800b654 <UART_SetConfig+0x1674>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	2b07      	cmp	r3, #7
 800b618:	d01a      	beq.n	800b650 <UART_SetConfig+0x1670>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61e:	2b08      	cmp	r3, #8
 800b620:	d014      	beq.n	800b64c <UART_SetConfig+0x166c>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b626:	2b09      	cmp	r3, #9
 800b628:	d00e      	beq.n	800b648 <UART_SetConfig+0x1668>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62e:	2b0a      	cmp	r3, #10
 800b630:	d008      	beq.n	800b644 <UART_SetConfig+0x1664>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	2b0b      	cmp	r3, #11
 800b638:	d102      	bne.n	800b640 <UART_SetConfig+0x1660>
 800b63a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b63e:	e016      	b.n	800b66e <UART_SetConfig+0x168e>
 800b640:	2301      	movs	r3, #1
 800b642:	e014      	b.n	800b66e <UART_SetConfig+0x168e>
 800b644:	2380      	movs	r3, #128	; 0x80
 800b646:	e012      	b.n	800b66e <UART_SetConfig+0x168e>
 800b648:	2340      	movs	r3, #64	; 0x40
 800b64a:	e010      	b.n	800b66e <UART_SetConfig+0x168e>
 800b64c:	2320      	movs	r3, #32
 800b64e:	e00e      	b.n	800b66e <UART_SetConfig+0x168e>
 800b650:	2310      	movs	r3, #16
 800b652:	e00c      	b.n	800b66e <UART_SetConfig+0x168e>
 800b654:	230c      	movs	r3, #12
 800b656:	e00a      	b.n	800b66e <UART_SetConfig+0x168e>
 800b658:	230a      	movs	r3, #10
 800b65a:	e008      	b.n	800b66e <UART_SetConfig+0x168e>
 800b65c:	2308      	movs	r3, #8
 800b65e:	e006      	b.n	800b66e <UART_SetConfig+0x168e>
 800b660:	2306      	movs	r3, #6
 800b662:	e004      	b.n	800b66e <UART_SetConfig+0x168e>
 800b664:	2304      	movs	r3, #4
 800b666:	e002      	b.n	800b66e <UART_SetConfig+0x168e>
 800b668:	2302      	movs	r3, #2
 800b66a:	e000      	b.n	800b66e <UART_SetConfig+0x168e>
 800b66c:	2301      	movs	r3, #1
 800b66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b670:	fbb2 f3f3 	udiv	r3, r2, r3
 800b674:	005a      	lsls	r2, r3, #1
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	085b      	lsrs	r3, r3, #1
 800b67c:	441a      	add	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	fbb2 f3f3 	udiv	r3, r2, r3
 800b686:	b29b      	uxth	r3, r3
 800b688:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b68a:	e254      	b.n	800bb36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b68c:	f107 0318 	add.w	r3, r7, #24
 800b690:	4618      	mov	r0, r3
 800b692:	f7fc feb1 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b696:	69fa      	ldr	r2, [r7, #28]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d044      	beq.n	800b72a <UART_SetConfig+0x174a>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d03e      	beq.n	800b726 <UART_SetConfig+0x1746>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d038      	beq.n	800b722 <UART_SetConfig+0x1742>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d032      	beq.n	800b71e <UART_SetConfig+0x173e>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	d02c      	beq.n	800b71a <UART_SetConfig+0x173a>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	2b05      	cmp	r3, #5
 800b6c6:	d026      	beq.n	800b716 <UART_SetConfig+0x1736>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	2b06      	cmp	r3, #6
 800b6ce:	d020      	beq.n	800b712 <UART_SetConfig+0x1732>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d4:	2b07      	cmp	r3, #7
 800b6d6:	d01a      	beq.n	800b70e <UART_SetConfig+0x172e>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d014      	beq.n	800b70a <UART_SetConfig+0x172a>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e4:	2b09      	cmp	r3, #9
 800b6e6:	d00e      	beq.n	800b706 <UART_SetConfig+0x1726>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ec:	2b0a      	cmp	r3, #10
 800b6ee:	d008      	beq.n	800b702 <UART_SetConfig+0x1722>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	2b0b      	cmp	r3, #11
 800b6f6:	d102      	bne.n	800b6fe <UART_SetConfig+0x171e>
 800b6f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6fc:	e016      	b.n	800b72c <UART_SetConfig+0x174c>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e014      	b.n	800b72c <UART_SetConfig+0x174c>
 800b702:	2380      	movs	r3, #128	; 0x80
 800b704:	e012      	b.n	800b72c <UART_SetConfig+0x174c>
 800b706:	2340      	movs	r3, #64	; 0x40
 800b708:	e010      	b.n	800b72c <UART_SetConfig+0x174c>
 800b70a:	2320      	movs	r3, #32
 800b70c:	e00e      	b.n	800b72c <UART_SetConfig+0x174c>
 800b70e:	2310      	movs	r3, #16
 800b710:	e00c      	b.n	800b72c <UART_SetConfig+0x174c>
 800b712:	230c      	movs	r3, #12
 800b714:	e00a      	b.n	800b72c <UART_SetConfig+0x174c>
 800b716:	230a      	movs	r3, #10
 800b718:	e008      	b.n	800b72c <UART_SetConfig+0x174c>
 800b71a:	2308      	movs	r3, #8
 800b71c:	e006      	b.n	800b72c <UART_SetConfig+0x174c>
 800b71e:	2306      	movs	r3, #6
 800b720:	e004      	b.n	800b72c <UART_SetConfig+0x174c>
 800b722:	2304      	movs	r3, #4
 800b724:	e002      	b.n	800b72c <UART_SetConfig+0x174c>
 800b726:	2302      	movs	r3, #2
 800b728:	e000      	b.n	800b72c <UART_SetConfig+0x174c>
 800b72a:	2301      	movs	r3, #1
 800b72c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b730:	005a      	lsls	r2, r3, #1
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	085b      	lsrs	r3, r3, #1
 800b738:	441a      	add	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b742:	b29b      	uxth	r3, r3
 800b744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b746:	e1f6      	b.n	800bb36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b748:	f107 030c 	add.w	r3, r7, #12
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fc ff9f 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d044      	beq.n	800b7e6 <UART_SetConfig+0x1806>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b760:	2b01      	cmp	r3, #1
 800b762:	d03e      	beq.n	800b7e2 <UART_SetConfig+0x1802>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d038      	beq.n	800b7de <UART_SetConfig+0x17fe>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	2b03      	cmp	r3, #3
 800b772:	d032      	beq.n	800b7da <UART_SetConfig+0x17fa>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	2b04      	cmp	r3, #4
 800b77a:	d02c      	beq.n	800b7d6 <UART_SetConfig+0x17f6>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b780:	2b05      	cmp	r3, #5
 800b782:	d026      	beq.n	800b7d2 <UART_SetConfig+0x17f2>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	2b06      	cmp	r3, #6
 800b78a:	d020      	beq.n	800b7ce <UART_SetConfig+0x17ee>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b790:	2b07      	cmp	r3, #7
 800b792:	d01a      	beq.n	800b7ca <UART_SetConfig+0x17ea>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b798:	2b08      	cmp	r3, #8
 800b79a:	d014      	beq.n	800b7c6 <UART_SetConfig+0x17e6>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	2b09      	cmp	r3, #9
 800b7a2:	d00e      	beq.n	800b7c2 <UART_SetConfig+0x17e2>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	2b0a      	cmp	r3, #10
 800b7aa:	d008      	beq.n	800b7be <UART_SetConfig+0x17de>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	2b0b      	cmp	r3, #11
 800b7b2:	d102      	bne.n	800b7ba <UART_SetConfig+0x17da>
 800b7b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7b8:	e016      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e014      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7be:	2380      	movs	r3, #128	; 0x80
 800b7c0:	e012      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7c2:	2340      	movs	r3, #64	; 0x40
 800b7c4:	e010      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7c6:	2320      	movs	r3, #32
 800b7c8:	e00e      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7ca:	2310      	movs	r3, #16
 800b7cc:	e00c      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	e00a      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7d2:	230a      	movs	r3, #10
 800b7d4:	e008      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7d6:	2308      	movs	r3, #8
 800b7d8:	e006      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7da:	2306      	movs	r3, #6
 800b7dc:	e004      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7de:	2304      	movs	r3, #4
 800b7e0:	e002      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	e000      	b.n	800b7e8 <UART_SetConfig+0x1808>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ec:	005a      	lsls	r2, r3, #1
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	085b      	lsrs	r3, r3, #1
 800b7f4:	441a      	add	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b802:	e198      	b.n	800bb36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b804:	4b87      	ldr	r3, [pc, #540]	; (800ba24 <UART_SetConfig+0x1a44>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 0320 	and.w	r3, r3, #32
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d05e      	beq.n	800b8ce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b810:	4b84      	ldr	r3, [pc, #528]	; (800ba24 <UART_SetConfig+0x1a44>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	08db      	lsrs	r3, r3, #3
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	4a83      	ldr	r2, [pc, #524]	; (800ba28 <UART_SetConfig+0x1a48>)
 800b81c:	40da      	lsrs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	2b00      	cmp	r3, #0
 800b824:	d044      	beq.n	800b8b0 <UART_SetConfig+0x18d0>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d03e      	beq.n	800b8ac <UART_SetConfig+0x18cc>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	2b02      	cmp	r3, #2
 800b834:	d038      	beq.n	800b8a8 <UART_SetConfig+0x18c8>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d032      	beq.n	800b8a4 <UART_SetConfig+0x18c4>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	2b04      	cmp	r3, #4
 800b844:	d02c      	beq.n	800b8a0 <UART_SetConfig+0x18c0>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	d026      	beq.n	800b89c <UART_SetConfig+0x18bc>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	2b06      	cmp	r3, #6
 800b854:	d020      	beq.n	800b898 <UART_SetConfig+0x18b8>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	2b07      	cmp	r3, #7
 800b85c:	d01a      	beq.n	800b894 <UART_SetConfig+0x18b4>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b08      	cmp	r3, #8
 800b864:	d014      	beq.n	800b890 <UART_SetConfig+0x18b0>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	2b09      	cmp	r3, #9
 800b86c:	d00e      	beq.n	800b88c <UART_SetConfig+0x18ac>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	2b0a      	cmp	r3, #10
 800b874:	d008      	beq.n	800b888 <UART_SetConfig+0x18a8>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	2b0b      	cmp	r3, #11
 800b87c:	d102      	bne.n	800b884 <UART_SetConfig+0x18a4>
 800b87e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b882:	e016      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b884:	2301      	movs	r3, #1
 800b886:	e014      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b888:	2380      	movs	r3, #128	; 0x80
 800b88a:	e012      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b88c:	2340      	movs	r3, #64	; 0x40
 800b88e:	e010      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b890:	2320      	movs	r3, #32
 800b892:	e00e      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b894:	2310      	movs	r3, #16
 800b896:	e00c      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b898:	230c      	movs	r3, #12
 800b89a:	e00a      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b89c:	230a      	movs	r3, #10
 800b89e:	e008      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b8a0:	2308      	movs	r3, #8
 800b8a2:	e006      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b8a4:	2306      	movs	r3, #6
 800b8a6:	e004      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b8a8:	2304      	movs	r3, #4
 800b8aa:	e002      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	e000      	b.n	800b8b2 <UART_SetConfig+0x18d2>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b6:	005a      	lsls	r2, r3, #1
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	085b      	lsrs	r3, r3, #1
 800b8be:	441a      	add	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b8cc:	e133      	b.n	800bb36 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d043      	beq.n	800b95e <UART_SetConfig+0x197e>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d03d      	beq.n	800b95a <UART_SetConfig+0x197a>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d037      	beq.n	800b956 <UART_SetConfig+0x1976>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d031      	beq.n	800b952 <UART_SetConfig+0x1972>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b04      	cmp	r3, #4
 800b8f4:	d02b      	beq.n	800b94e <UART_SetConfig+0x196e>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2b05      	cmp	r3, #5
 800b8fc:	d025      	beq.n	800b94a <UART_SetConfig+0x196a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b06      	cmp	r3, #6
 800b904:	d01f      	beq.n	800b946 <UART_SetConfig+0x1966>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	2b07      	cmp	r3, #7
 800b90c:	d019      	beq.n	800b942 <UART_SetConfig+0x1962>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	2b08      	cmp	r3, #8
 800b914:	d013      	beq.n	800b93e <UART_SetConfig+0x195e>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	2b09      	cmp	r3, #9
 800b91c:	d00d      	beq.n	800b93a <UART_SetConfig+0x195a>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	2b0a      	cmp	r3, #10
 800b924:	d007      	beq.n	800b936 <UART_SetConfig+0x1956>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92a:	2b0b      	cmp	r3, #11
 800b92c:	d101      	bne.n	800b932 <UART_SetConfig+0x1952>
 800b92e:	4b3f      	ldr	r3, [pc, #252]	; (800ba2c <UART_SetConfig+0x1a4c>)
 800b930:	e016      	b.n	800b960 <UART_SetConfig+0x1980>
 800b932:	4b3f      	ldr	r3, [pc, #252]	; (800ba30 <UART_SetConfig+0x1a50>)
 800b934:	e014      	b.n	800b960 <UART_SetConfig+0x1980>
 800b936:	4b3f      	ldr	r3, [pc, #252]	; (800ba34 <UART_SetConfig+0x1a54>)
 800b938:	e012      	b.n	800b960 <UART_SetConfig+0x1980>
 800b93a:	4b3f      	ldr	r3, [pc, #252]	; (800ba38 <UART_SetConfig+0x1a58>)
 800b93c:	e010      	b.n	800b960 <UART_SetConfig+0x1980>
 800b93e:	4b3f      	ldr	r3, [pc, #252]	; (800ba3c <UART_SetConfig+0x1a5c>)
 800b940:	e00e      	b.n	800b960 <UART_SetConfig+0x1980>
 800b942:	4b3f      	ldr	r3, [pc, #252]	; (800ba40 <UART_SetConfig+0x1a60>)
 800b944:	e00c      	b.n	800b960 <UART_SetConfig+0x1980>
 800b946:	4b3f      	ldr	r3, [pc, #252]	; (800ba44 <UART_SetConfig+0x1a64>)
 800b948:	e00a      	b.n	800b960 <UART_SetConfig+0x1980>
 800b94a:	4b3f      	ldr	r3, [pc, #252]	; (800ba48 <UART_SetConfig+0x1a68>)
 800b94c:	e008      	b.n	800b960 <UART_SetConfig+0x1980>
 800b94e:	4b3f      	ldr	r3, [pc, #252]	; (800ba4c <UART_SetConfig+0x1a6c>)
 800b950:	e006      	b.n	800b960 <UART_SetConfig+0x1980>
 800b952:	4b3f      	ldr	r3, [pc, #252]	; (800ba50 <UART_SetConfig+0x1a70>)
 800b954:	e004      	b.n	800b960 <UART_SetConfig+0x1980>
 800b956:	4b3f      	ldr	r3, [pc, #252]	; (800ba54 <UART_SetConfig+0x1a74>)
 800b958:	e002      	b.n	800b960 <UART_SetConfig+0x1980>
 800b95a:	4b33      	ldr	r3, [pc, #204]	; (800ba28 <UART_SetConfig+0x1a48>)
 800b95c:	e000      	b.n	800b960 <UART_SetConfig+0x1980>
 800b95e:	4b34      	ldr	r3, [pc, #208]	; (800ba30 <UART_SetConfig+0x1a50>)
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	6852      	ldr	r2, [r2, #4]
 800b964:	0852      	lsrs	r2, r2, #1
 800b966:	441a      	add	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b970:	b29b      	uxth	r3, r3
 800b972:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b974:	e0df      	b.n	800bb36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d045      	beq.n	800ba0a <UART_SetConfig+0x1a2a>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	2b01      	cmp	r3, #1
 800b984:	d03f      	beq.n	800ba06 <UART_SetConfig+0x1a26>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d039      	beq.n	800ba02 <UART_SetConfig+0x1a22>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	2b03      	cmp	r3, #3
 800b994:	d033      	beq.n	800b9fe <UART_SetConfig+0x1a1e>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99a:	2b04      	cmp	r3, #4
 800b99c:	d02d      	beq.n	800b9fa <UART_SetConfig+0x1a1a>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a2:	2b05      	cmp	r3, #5
 800b9a4:	d027      	beq.n	800b9f6 <UART_SetConfig+0x1a16>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	2b06      	cmp	r3, #6
 800b9ac:	d021      	beq.n	800b9f2 <UART_SetConfig+0x1a12>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	2b07      	cmp	r3, #7
 800b9b4:	d01b      	beq.n	800b9ee <UART_SetConfig+0x1a0e>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	d015      	beq.n	800b9ea <UART_SetConfig+0x1a0a>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	2b09      	cmp	r3, #9
 800b9c4:	d00f      	beq.n	800b9e6 <UART_SetConfig+0x1a06>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ca:	2b0a      	cmp	r3, #10
 800b9cc:	d008      	beq.n	800b9e0 <UART_SetConfig+0x1a00>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	2b0b      	cmp	r3, #11
 800b9d4:	d102      	bne.n	800b9dc <UART_SetConfig+0x19fc>
 800b9d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b9da:	e017      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9dc:	4b18      	ldr	r3, [pc, #96]	; (800ba40 <UART_SetConfig+0x1a60>)
 800b9de:	e015      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b9e4:	e012      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9e6:	4b1c      	ldr	r3, [pc, #112]	; (800ba58 <UART_SetConfig+0x1a78>)
 800b9e8:	e010      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9ea:	4b1c      	ldr	r3, [pc, #112]	; (800ba5c <UART_SetConfig+0x1a7c>)
 800b9ec:	e00e      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ba2c <UART_SetConfig+0x1a4c>)
 800b9f0:	e00c      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9f2:	4b1b      	ldr	r3, [pc, #108]	; (800ba60 <UART_SetConfig+0x1a80>)
 800b9f4:	e00a      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9f6:	4b1b      	ldr	r3, [pc, #108]	; (800ba64 <UART_SetConfig+0x1a84>)
 800b9f8:	e008      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9fa:	4b0e      	ldr	r3, [pc, #56]	; (800ba34 <UART_SetConfig+0x1a54>)
 800b9fc:	e006      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800b9fe:	4b1a      	ldr	r3, [pc, #104]	; (800ba68 <UART_SetConfig+0x1a88>)
 800ba00:	e004      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800ba02:	4b0d      	ldr	r3, [pc, #52]	; (800ba38 <UART_SetConfig+0x1a58>)
 800ba04:	e002      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800ba06:	4b0d      	ldr	r3, [pc, #52]	; (800ba3c <UART_SetConfig+0x1a5c>)
 800ba08:	e000      	b.n	800ba0c <UART_SetConfig+0x1a2c>
 800ba0a:	4b0d      	ldr	r3, [pc, #52]	; (800ba40 <UART_SetConfig+0x1a60>)
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	6852      	ldr	r2, [r2, #4]
 800ba10:	0852      	lsrs	r2, r2, #1
 800ba12:	441a      	add	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba20:	e089      	b.n	800bb36 <UART_SetConfig+0x1b56>
 800ba22:	bf00      	nop
 800ba24:	58024400 	.word	0x58024400
 800ba28:	03d09000 	.word	0x03d09000
 800ba2c:	0007a120 	.word	0x0007a120
 800ba30:	07a12000 	.word	0x07a12000
 800ba34:	000f4240 	.word	0x000f4240
 800ba38:	001e8480 	.word	0x001e8480
 800ba3c:	003d0900 	.word	0x003d0900
 800ba40:	007a1200 	.word	0x007a1200
 800ba44:	00a2c2aa 	.word	0x00a2c2aa
 800ba48:	00c35000 	.word	0x00c35000
 800ba4c:	00f42400 	.word	0x00f42400
 800ba50:	01458554 	.word	0x01458554
 800ba54:	01e84800 	.word	0x01e84800
 800ba58:	0001e848 	.word	0x0001e848
 800ba5c:	0003d090 	.word	0x0003d090
 800ba60:	000a2c2a 	.word	0x000a2c2a
 800ba64:	000c3500 	.word	0x000c3500
 800ba68:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d04f      	beq.n	800bb14 <UART_SetConfig+0x1b34>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d048      	beq.n	800bb0e <UART_SetConfig+0x1b2e>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d041      	beq.n	800bb08 <UART_SetConfig+0x1b28>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d03a      	beq.n	800bb02 <UART_SetConfig+0x1b22>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	d033      	beq.n	800bafc <UART_SetConfig+0x1b1c>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	2b05      	cmp	r3, #5
 800ba9a:	d02c      	beq.n	800baf6 <UART_SetConfig+0x1b16>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	2b06      	cmp	r3, #6
 800baa2:	d025      	beq.n	800baf0 <UART_SetConfig+0x1b10>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	2b07      	cmp	r3, #7
 800baaa:	d01e      	beq.n	800baea <UART_SetConfig+0x1b0a>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	2b08      	cmp	r3, #8
 800bab2:	d017      	beq.n	800bae4 <UART_SetConfig+0x1b04>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	2b09      	cmp	r3, #9
 800baba:	d010      	beq.n	800bade <UART_SetConfig+0x1afe>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	2b0a      	cmp	r3, #10
 800bac2:	d009      	beq.n	800bad8 <UART_SetConfig+0x1af8>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	2b0b      	cmp	r3, #11
 800baca:	d102      	bne.n	800bad2 <UART_SetConfig+0x1af2>
 800bacc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bad0:	e022      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bad6:	e01f      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800badc:	e01c      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bae2:	e019      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bae8:	e016      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800baea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baee:	e013      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800baf0:	f241 5354 	movw	r3, #5460	; 0x1554
 800baf4:	e010      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800baf6:	f641 1398 	movw	r3, #6552	; 0x1998
 800bafa:	e00d      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bafc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb00:	e00a      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bb02:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800bb06:	e007      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bb08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb0c:	e004      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bb0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb12:	e001      	b.n	800bb18 <UART_SetConfig+0x1b38>
 800bb14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	6852      	ldr	r2, [r2, #4]
 800bb1c:	0852      	lsrs	r2, r2, #1
 800bb1e:	441a      	add	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb2c:	e003      	b.n	800bb36 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bb34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb38:	2b0f      	cmp	r3, #15
 800bb3a:	d916      	bls.n	800bb6a <UART_SetConfig+0x1b8a>
 800bb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb42:	d212      	bcs.n	800bb6a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	f023 030f 	bic.w	r3, r3, #15
 800bb4c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb50:	085b      	lsrs	r3, r3, #1
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	f003 0307 	and.w	r3, r3, #7
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bb66:	60da      	str	r2, [r3, #12]
 800bb68:	e3a3      	b.n	800c2b2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb70:	e39f      	b.n	800c2b2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800bb72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bb76:	2b40      	cmp	r3, #64	; 0x40
 800bb78:	f200 8388 	bhi.w	800c28c <UART_SetConfig+0x22ac>
 800bb7c:	a201      	add	r2, pc, #4	; (adr r2, 800bb84 <UART_SetConfig+0x1ba4>)
 800bb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb82:	bf00      	nop
 800bb84:	0800bc89 	.word	0x0800bc89
 800bb88:	0800bd3f 	.word	0x0800bd3f
 800bb8c:	0800c28d 	.word	0x0800c28d
 800bb90:	0800c28d 	.word	0x0800c28d
 800bb94:	0800bdf5 	.word	0x0800bdf5
 800bb98:	0800c28d 	.word	0x0800c28d
 800bb9c:	0800c28d 	.word	0x0800c28d
 800bba0:	0800c28d 	.word	0x0800c28d
 800bba4:	0800beaf 	.word	0x0800beaf
 800bba8:	0800c28d 	.word	0x0800c28d
 800bbac:	0800c28d 	.word	0x0800c28d
 800bbb0:	0800c28d 	.word	0x0800c28d
 800bbb4:	0800c28d 	.word	0x0800c28d
 800bbb8:	0800c28d 	.word	0x0800c28d
 800bbbc:	0800c28d 	.word	0x0800c28d
 800bbc0:	0800c28d 	.word	0x0800c28d
 800bbc4:	0800bf69 	.word	0x0800bf69
 800bbc8:	0800c28d 	.word	0x0800c28d
 800bbcc:	0800c28d 	.word	0x0800c28d
 800bbd0:	0800c28d 	.word	0x0800c28d
 800bbd4:	0800c28d 	.word	0x0800c28d
 800bbd8:	0800c28d 	.word	0x0800c28d
 800bbdc:	0800c28d 	.word	0x0800c28d
 800bbe0:	0800c28d 	.word	0x0800c28d
 800bbe4:	0800c28d 	.word	0x0800c28d
 800bbe8:	0800c28d 	.word	0x0800c28d
 800bbec:	0800c28d 	.word	0x0800c28d
 800bbf0:	0800c28d 	.word	0x0800c28d
 800bbf4:	0800c28d 	.word	0x0800c28d
 800bbf8:	0800c28d 	.word	0x0800c28d
 800bbfc:	0800c28d 	.word	0x0800c28d
 800bc00:	0800c28d 	.word	0x0800c28d
 800bc04:	0800c0d9 	.word	0x0800c0d9
 800bc08:	0800c28d 	.word	0x0800c28d
 800bc0c:	0800c28d 	.word	0x0800c28d
 800bc10:	0800c28d 	.word	0x0800c28d
 800bc14:	0800c28d 	.word	0x0800c28d
 800bc18:	0800c28d 	.word	0x0800c28d
 800bc1c:	0800c28d 	.word	0x0800c28d
 800bc20:	0800c28d 	.word	0x0800c28d
 800bc24:	0800c28d 	.word	0x0800c28d
 800bc28:	0800c28d 	.word	0x0800c28d
 800bc2c:	0800c28d 	.word	0x0800c28d
 800bc30:	0800c28d 	.word	0x0800c28d
 800bc34:	0800c28d 	.word	0x0800c28d
 800bc38:	0800c28d 	.word	0x0800c28d
 800bc3c:	0800c28d 	.word	0x0800c28d
 800bc40:	0800c28d 	.word	0x0800c28d
 800bc44:	0800c28d 	.word	0x0800c28d
 800bc48:	0800c28d 	.word	0x0800c28d
 800bc4c:	0800c28d 	.word	0x0800c28d
 800bc50:	0800c28d 	.word	0x0800c28d
 800bc54:	0800c28d 	.word	0x0800c28d
 800bc58:	0800c28d 	.word	0x0800c28d
 800bc5c:	0800c28d 	.word	0x0800c28d
 800bc60:	0800c28d 	.word	0x0800c28d
 800bc64:	0800c28d 	.word	0x0800c28d
 800bc68:	0800c28d 	.word	0x0800c28d
 800bc6c:	0800c28d 	.word	0x0800c28d
 800bc70:	0800c28d 	.word	0x0800c28d
 800bc74:	0800c28d 	.word	0x0800c28d
 800bc78:	0800c28d 	.word	0x0800c28d
 800bc7c:	0800c28d 	.word	0x0800c28d
 800bc80:	0800c28d 	.word	0x0800c28d
 800bc84:	0800c1cd 	.word	0x0800c1cd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc88:	f7fb fa1e 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 800bc8c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d044      	beq.n	800bd20 <UART_SetConfig+0x1d40>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d03e      	beq.n	800bd1c <UART_SetConfig+0x1d3c>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d038      	beq.n	800bd18 <UART_SetConfig+0x1d38>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d032      	beq.n	800bd14 <UART_SetConfig+0x1d34>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d02c      	beq.n	800bd10 <UART_SetConfig+0x1d30>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcba:	2b05      	cmp	r3, #5
 800bcbc:	d026      	beq.n	800bd0c <UART_SetConfig+0x1d2c>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc2:	2b06      	cmp	r3, #6
 800bcc4:	d020      	beq.n	800bd08 <UART_SetConfig+0x1d28>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcca:	2b07      	cmp	r3, #7
 800bccc:	d01a      	beq.n	800bd04 <UART_SetConfig+0x1d24>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd2:	2b08      	cmp	r3, #8
 800bcd4:	d014      	beq.n	800bd00 <UART_SetConfig+0x1d20>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcda:	2b09      	cmp	r3, #9
 800bcdc:	d00e      	beq.n	800bcfc <UART_SetConfig+0x1d1c>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	2b0a      	cmp	r3, #10
 800bce4:	d008      	beq.n	800bcf8 <UART_SetConfig+0x1d18>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcea:	2b0b      	cmp	r3, #11
 800bcec:	d102      	bne.n	800bcf4 <UART_SetConfig+0x1d14>
 800bcee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcf2:	e016      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e014      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bcf8:	2380      	movs	r3, #128	; 0x80
 800bcfa:	e012      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bcfc:	2340      	movs	r3, #64	; 0x40
 800bcfe:	e010      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd00:	2320      	movs	r3, #32
 800bd02:	e00e      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd04:	2310      	movs	r3, #16
 800bd06:	e00c      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd08:	230c      	movs	r3, #12
 800bd0a:	e00a      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd0c:	230a      	movs	r3, #10
 800bd0e:	e008      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd10:	2308      	movs	r3, #8
 800bd12:	e006      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd14:	2306      	movs	r3, #6
 800bd16:	e004      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd18:	2304      	movs	r3, #4
 800bd1a:	e002      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e000      	b.n	800bd22 <UART_SetConfig+0x1d42>
 800bd20:	2301      	movs	r3, #1
 800bd22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd24:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	085b      	lsrs	r3, r3, #1
 800bd2e:	441a      	add	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd3c:	e2aa      	b.n	800c294 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd3e:	f7fb f9d9 	bl	80070f4 <HAL_RCC_GetPCLK2Freq>
 800bd42:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d044      	beq.n	800bdd6 <UART_SetConfig+0x1df6>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d03e      	beq.n	800bdd2 <UART_SetConfig+0x1df2>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d038      	beq.n	800bdce <UART_SetConfig+0x1dee>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d032      	beq.n	800bdca <UART_SetConfig+0x1dea>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd68:	2b04      	cmp	r3, #4
 800bd6a:	d02c      	beq.n	800bdc6 <UART_SetConfig+0x1de6>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd70:	2b05      	cmp	r3, #5
 800bd72:	d026      	beq.n	800bdc2 <UART_SetConfig+0x1de2>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd78:	2b06      	cmp	r3, #6
 800bd7a:	d020      	beq.n	800bdbe <UART_SetConfig+0x1dde>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd80:	2b07      	cmp	r3, #7
 800bd82:	d01a      	beq.n	800bdba <UART_SetConfig+0x1dda>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd88:	2b08      	cmp	r3, #8
 800bd8a:	d014      	beq.n	800bdb6 <UART_SetConfig+0x1dd6>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd90:	2b09      	cmp	r3, #9
 800bd92:	d00e      	beq.n	800bdb2 <UART_SetConfig+0x1dd2>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd98:	2b0a      	cmp	r3, #10
 800bd9a:	d008      	beq.n	800bdae <UART_SetConfig+0x1dce>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	2b0b      	cmp	r3, #11
 800bda2:	d102      	bne.n	800bdaa <UART_SetConfig+0x1dca>
 800bda4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bda8:	e016      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e014      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdae:	2380      	movs	r3, #128	; 0x80
 800bdb0:	e012      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdb2:	2340      	movs	r3, #64	; 0x40
 800bdb4:	e010      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdb6:	2320      	movs	r3, #32
 800bdb8:	e00e      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdba:	2310      	movs	r3, #16
 800bdbc:	e00c      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdbe:	230c      	movs	r3, #12
 800bdc0:	e00a      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdc2:	230a      	movs	r3, #10
 800bdc4:	e008      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdc6:	2308      	movs	r3, #8
 800bdc8:	e006      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdca:	2306      	movs	r3, #6
 800bdcc:	e004      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdce:	2304      	movs	r3, #4
 800bdd0:	e002      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	e000      	b.n	800bdd8 <UART_SetConfig+0x1df8>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdda:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	085b      	lsrs	r3, r3, #1
 800bde4:	441a      	add	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdf2:	e24f      	b.n	800c294 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdf4:	f107 0318 	add.w	r3, r7, #24
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fc fafd 	bl	80083f8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdfe:	69fa      	ldr	r2, [r7, #28]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	2b00      	cmp	r3, #0
 800be06:	d044      	beq.n	800be92 <UART_SetConfig+0x1eb2>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d03e      	beq.n	800be8e <UART_SetConfig+0x1eae>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be14:	2b02      	cmp	r3, #2
 800be16:	d038      	beq.n	800be8a <UART_SetConfig+0x1eaa>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d032      	beq.n	800be86 <UART_SetConfig+0x1ea6>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	2b04      	cmp	r3, #4
 800be26:	d02c      	beq.n	800be82 <UART_SetConfig+0x1ea2>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2c:	2b05      	cmp	r3, #5
 800be2e:	d026      	beq.n	800be7e <UART_SetConfig+0x1e9e>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	2b06      	cmp	r3, #6
 800be36:	d020      	beq.n	800be7a <UART_SetConfig+0x1e9a>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	2b07      	cmp	r3, #7
 800be3e:	d01a      	beq.n	800be76 <UART_SetConfig+0x1e96>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	2b08      	cmp	r3, #8
 800be46:	d014      	beq.n	800be72 <UART_SetConfig+0x1e92>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4c:	2b09      	cmp	r3, #9
 800be4e:	d00e      	beq.n	800be6e <UART_SetConfig+0x1e8e>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be54:	2b0a      	cmp	r3, #10
 800be56:	d008      	beq.n	800be6a <UART_SetConfig+0x1e8a>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	2b0b      	cmp	r3, #11
 800be5e:	d102      	bne.n	800be66 <UART_SetConfig+0x1e86>
 800be60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be64:	e016      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be66:	2301      	movs	r3, #1
 800be68:	e014      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be6a:	2380      	movs	r3, #128	; 0x80
 800be6c:	e012      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be6e:	2340      	movs	r3, #64	; 0x40
 800be70:	e010      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be72:	2320      	movs	r3, #32
 800be74:	e00e      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be76:	2310      	movs	r3, #16
 800be78:	e00c      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be7a:	230c      	movs	r3, #12
 800be7c:	e00a      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be7e:	230a      	movs	r3, #10
 800be80:	e008      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be82:	2308      	movs	r3, #8
 800be84:	e006      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be86:	2306      	movs	r3, #6
 800be88:	e004      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be8a:	2304      	movs	r3, #4
 800be8c:	e002      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be8e:	2302      	movs	r3, #2
 800be90:	e000      	b.n	800be94 <UART_SetConfig+0x1eb4>
 800be92:	2301      	movs	r3, #1
 800be94:	fbb2 f2f3 	udiv	r2, r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	085b      	lsrs	r3, r3, #1
 800be9e:	441a      	add	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800beac:	e1f2      	b.n	800c294 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beae:	f107 030c 	add.w	r3, r7, #12
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fc fbec 	bl	8008690 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d044      	beq.n	800bf4c <UART_SetConfig+0x1f6c>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d03e      	beq.n	800bf48 <UART_SetConfig+0x1f68>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d038      	beq.n	800bf44 <UART_SetConfig+0x1f64>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d032      	beq.n	800bf40 <UART_SetConfig+0x1f60>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bede:	2b04      	cmp	r3, #4
 800bee0:	d02c      	beq.n	800bf3c <UART_SetConfig+0x1f5c>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee6:	2b05      	cmp	r3, #5
 800bee8:	d026      	beq.n	800bf38 <UART_SetConfig+0x1f58>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	2b06      	cmp	r3, #6
 800bef0:	d020      	beq.n	800bf34 <UART_SetConfig+0x1f54>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	2b07      	cmp	r3, #7
 800bef8:	d01a      	beq.n	800bf30 <UART_SetConfig+0x1f50>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	2b08      	cmp	r3, #8
 800bf00:	d014      	beq.n	800bf2c <UART_SetConfig+0x1f4c>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d00e      	beq.n	800bf28 <UART_SetConfig+0x1f48>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	2b0a      	cmp	r3, #10
 800bf10:	d008      	beq.n	800bf24 <UART_SetConfig+0x1f44>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf16:	2b0b      	cmp	r3, #11
 800bf18:	d102      	bne.n	800bf20 <UART_SetConfig+0x1f40>
 800bf1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf1e:	e016      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf20:	2301      	movs	r3, #1
 800bf22:	e014      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf24:	2380      	movs	r3, #128	; 0x80
 800bf26:	e012      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf28:	2340      	movs	r3, #64	; 0x40
 800bf2a:	e010      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf2c:	2320      	movs	r3, #32
 800bf2e:	e00e      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf30:	2310      	movs	r3, #16
 800bf32:	e00c      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf34:	230c      	movs	r3, #12
 800bf36:	e00a      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf38:	230a      	movs	r3, #10
 800bf3a:	e008      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf3c:	2308      	movs	r3, #8
 800bf3e:	e006      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf40:	2306      	movs	r3, #6
 800bf42:	e004      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf44:	2304      	movs	r3, #4
 800bf46:	e002      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	e000      	b.n	800bf4e <UART_SetConfig+0x1f6e>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	085b      	lsrs	r3, r3, #1
 800bf58:	441a      	add	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf66:	e195      	b.n	800c294 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf68:	4b87      	ldr	r3, [pc, #540]	; (800c188 <UART_SetConfig+0x21a8>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 0320 	and.w	r3, r3, #32
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d05d      	beq.n	800c030 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf74:	4b84      	ldr	r3, [pc, #528]	; (800c188 <UART_SetConfig+0x21a8>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	08db      	lsrs	r3, r3, #3
 800bf7a:	f003 0303 	and.w	r3, r3, #3
 800bf7e:	4a83      	ldr	r2, [pc, #524]	; (800c18c <UART_SetConfig+0x21ac>)
 800bf80:	40da      	lsrs	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d044      	beq.n	800c014 <UART_SetConfig+0x2034>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d03e      	beq.n	800c010 <UART_SetConfig+0x2030>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d038      	beq.n	800c00c <UART_SetConfig+0x202c>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	d032      	beq.n	800c008 <UART_SetConfig+0x2028>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	2b04      	cmp	r3, #4
 800bfa8:	d02c      	beq.n	800c004 <UART_SetConfig+0x2024>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	d026      	beq.n	800c000 <UART_SetConfig+0x2020>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb6:	2b06      	cmp	r3, #6
 800bfb8:	d020      	beq.n	800bffc <UART_SetConfig+0x201c>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbe:	2b07      	cmp	r3, #7
 800bfc0:	d01a      	beq.n	800bff8 <UART_SetConfig+0x2018>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc6:	2b08      	cmp	r3, #8
 800bfc8:	d014      	beq.n	800bff4 <UART_SetConfig+0x2014>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	d00e      	beq.n	800bff0 <UART_SetConfig+0x2010>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd6:	2b0a      	cmp	r3, #10
 800bfd8:	d008      	beq.n	800bfec <UART_SetConfig+0x200c>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfde:	2b0b      	cmp	r3, #11
 800bfe0:	d102      	bne.n	800bfe8 <UART_SetConfig+0x2008>
 800bfe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfe6:	e016      	b.n	800c016 <UART_SetConfig+0x2036>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e014      	b.n	800c016 <UART_SetConfig+0x2036>
 800bfec:	2380      	movs	r3, #128	; 0x80
 800bfee:	e012      	b.n	800c016 <UART_SetConfig+0x2036>
 800bff0:	2340      	movs	r3, #64	; 0x40
 800bff2:	e010      	b.n	800c016 <UART_SetConfig+0x2036>
 800bff4:	2320      	movs	r3, #32
 800bff6:	e00e      	b.n	800c016 <UART_SetConfig+0x2036>
 800bff8:	2310      	movs	r3, #16
 800bffa:	e00c      	b.n	800c016 <UART_SetConfig+0x2036>
 800bffc:	230c      	movs	r3, #12
 800bffe:	e00a      	b.n	800c016 <UART_SetConfig+0x2036>
 800c000:	230a      	movs	r3, #10
 800c002:	e008      	b.n	800c016 <UART_SetConfig+0x2036>
 800c004:	2308      	movs	r3, #8
 800c006:	e006      	b.n	800c016 <UART_SetConfig+0x2036>
 800c008:	2306      	movs	r3, #6
 800c00a:	e004      	b.n	800c016 <UART_SetConfig+0x2036>
 800c00c:	2304      	movs	r3, #4
 800c00e:	e002      	b.n	800c016 <UART_SetConfig+0x2036>
 800c010:	2302      	movs	r3, #2
 800c012:	e000      	b.n	800c016 <UART_SetConfig+0x2036>
 800c014:	2301      	movs	r3, #1
 800c016:	fbb2 f2f3 	udiv	r2, r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	085b      	lsrs	r3, r3, #1
 800c020:	441a      	add	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	fbb2 f3f3 	udiv	r3, r2, r3
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800c02e:	e131      	b.n	800c294 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	d043      	beq.n	800c0c0 <UART_SetConfig+0x20e0>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d03d      	beq.n	800c0bc <UART_SetConfig+0x20dc>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b02      	cmp	r3, #2
 800c046:	d037      	beq.n	800c0b8 <UART_SetConfig+0x20d8>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b03      	cmp	r3, #3
 800c04e:	d031      	beq.n	800c0b4 <UART_SetConfig+0x20d4>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	2b04      	cmp	r3, #4
 800c056:	d02b      	beq.n	800c0b0 <UART_SetConfig+0x20d0>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	2b05      	cmp	r3, #5
 800c05e:	d025      	beq.n	800c0ac <UART_SetConfig+0x20cc>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	2b06      	cmp	r3, #6
 800c066:	d01f      	beq.n	800c0a8 <UART_SetConfig+0x20c8>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	2b07      	cmp	r3, #7
 800c06e:	d019      	beq.n	800c0a4 <UART_SetConfig+0x20c4>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	2b08      	cmp	r3, #8
 800c076:	d013      	beq.n	800c0a0 <UART_SetConfig+0x20c0>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	2b09      	cmp	r3, #9
 800c07e:	d00d      	beq.n	800c09c <UART_SetConfig+0x20bc>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	2b0a      	cmp	r3, #10
 800c086:	d007      	beq.n	800c098 <UART_SetConfig+0x20b8>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	2b0b      	cmp	r3, #11
 800c08e:	d101      	bne.n	800c094 <UART_SetConfig+0x20b4>
 800c090:	4b3f      	ldr	r3, [pc, #252]	; (800c190 <UART_SetConfig+0x21b0>)
 800c092:	e016      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c094:	4b3d      	ldr	r3, [pc, #244]	; (800c18c <UART_SetConfig+0x21ac>)
 800c096:	e014      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c098:	4b3e      	ldr	r3, [pc, #248]	; (800c194 <UART_SetConfig+0x21b4>)
 800c09a:	e012      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c09c:	4b3e      	ldr	r3, [pc, #248]	; (800c198 <UART_SetConfig+0x21b8>)
 800c09e:	e010      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0a0:	4b3e      	ldr	r3, [pc, #248]	; (800c19c <UART_SetConfig+0x21bc>)
 800c0a2:	e00e      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0a4:	4b3e      	ldr	r3, [pc, #248]	; (800c1a0 <UART_SetConfig+0x21c0>)
 800c0a6:	e00c      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0a8:	4b3e      	ldr	r3, [pc, #248]	; (800c1a4 <UART_SetConfig+0x21c4>)
 800c0aa:	e00a      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0ac:	4b3e      	ldr	r3, [pc, #248]	; (800c1a8 <UART_SetConfig+0x21c8>)
 800c0ae:	e008      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0b0:	4b3e      	ldr	r3, [pc, #248]	; (800c1ac <UART_SetConfig+0x21cc>)
 800c0b2:	e006      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0b4:	4b3e      	ldr	r3, [pc, #248]	; (800c1b0 <UART_SetConfig+0x21d0>)
 800c0b6:	e004      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0b8:	4b3e      	ldr	r3, [pc, #248]	; (800c1b4 <UART_SetConfig+0x21d4>)
 800c0ba:	e002      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0bc:	4b3e      	ldr	r3, [pc, #248]	; (800c1b8 <UART_SetConfig+0x21d8>)
 800c0be:	e000      	b.n	800c0c2 <UART_SetConfig+0x20e2>
 800c0c0:	4b32      	ldr	r3, [pc, #200]	; (800c18c <UART_SetConfig+0x21ac>)
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	6852      	ldr	r2, [r2, #4]
 800c0c6:	0852      	lsrs	r2, r2, #1
 800c0c8:	441a      	add	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0d6:	e0dd      	b.n	800c294 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d046      	beq.n	800c16e <UART_SetConfig+0x218e>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d040      	beq.n	800c16a <UART_SetConfig+0x218a>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d03a      	beq.n	800c166 <UART_SetConfig+0x2186>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d034      	beq.n	800c162 <UART_SetConfig+0x2182>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d02e      	beq.n	800c15e <UART_SetConfig+0x217e>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	2b05      	cmp	r3, #5
 800c106:	d028      	beq.n	800c15a <UART_SetConfig+0x217a>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10c:	2b06      	cmp	r3, #6
 800c10e:	d022      	beq.n	800c156 <UART_SetConfig+0x2176>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	2b07      	cmp	r3, #7
 800c116:	d01c      	beq.n	800c152 <UART_SetConfig+0x2172>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11c:	2b08      	cmp	r3, #8
 800c11e:	d016      	beq.n	800c14e <UART_SetConfig+0x216e>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c124:	2b09      	cmp	r3, #9
 800c126:	d00f      	beq.n	800c148 <UART_SetConfig+0x2168>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	2b0a      	cmp	r3, #10
 800c12e:	d008      	beq.n	800c142 <UART_SetConfig+0x2162>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c134:	2b0b      	cmp	r3, #11
 800c136:	d102      	bne.n	800c13e <UART_SetConfig+0x215e>
 800c138:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c13c:	e018      	b.n	800c170 <UART_SetConfig+0x2190>
 800c13e:	4b18      	ldr	r3, [pc, #96]	; (800c1a0 <UART_SetConfig+0x21c0>)
 800c140:	e016      	b.n	800c170 <UART_SetConfig+0x2190>
 800c142:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c146:	e013      	b.n	800c170 <UART_SetConfig+0x2190>
 800c148:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c14c:	e010      	b.n	800c170 <UART_SetConfig+0x2190>
 800c14e:	4b1b      	ldr	r3, [pc, #108]	; (800c1bc <UART_SetConfig+0x21dc>)
 800c150:	e00e      	b.n	800c170 <UART_SetConfig+0x2190>
 800c152:	4b0f      	ldr	r3, [pc, #60]	; (800c190 <UART_SetConfig+0x21b0>)
 800c154:	e00c      	b.n	800c170 <UART_SetConfig+0x2190>
 800c156:	4b1a      	ldr	r3, [pc, #104]	; (800c1c0 <UART_SetConfig+0x21e0>)
 800c158:	e00a      	b.n	800c170 <UART_SetConfig+0x2190>
 800c15a:	4b1a      	ldr	r3, [pc, #104]	; (800c1c4 <UART_SetConfig+0x21e4>)
 800c15c:	e008      	b.n	800c170 <UART_SetConfig+0x2190>
 800c15e:	4b0d      	ldr	r3, [pc, #52]	; (800c194 <UART_SetConfig+0x21b4>)
 800c160:	e006      	b.n	800c170 <UART_SetConfig+0x2190>
 800c162:	4b19      	ldr	r3, [pc, #100]	; (800c1c8 <UART_SetConfig+0x21e8>)
 800c164:	e004      	b.n	800c170 <UART_SetConfig+0x2190>
 800c166:	4b0c      	ldr	r3, [pc, #48]	; (800c198 <UART_SetConfig+0x21b8>)
 800c168:	e002      	b.n	800c170 <UART_SetConfig+0x2190>
 800c16a:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <UART_SetConfig+0x21bc>)
 800c16c:	e000      	b.n	800c170 <UART_SetConfig+0x2190>
 800c16e:	4b0c      	ldr	r3, [pc, #48]	; (800c1a0 <UART_SetConfig+0x21c0>)
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	6852      	ldr	r2, [r2, #4]
 800c174:	0852      	lsrs	r2, r2, #1
 800c176:	441a      	add	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c180:	b29b      	uxth	r3, r3
 800c182:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c184:	e086      	b.n	800c294 <UART_SetConfig+0x22b4>
 800c186:	bf00      	nop
 800c188:	58024400 	.word	0x58024400
 800c18c:	03d09000 	.word	0x03d09000
 800c190:	0003d090 	.word	0x0003d090
 800c194:	0007a120 	.word	0x0007a120
 800c198:	000f4240 	.word	0x000f4240
 800c19c:	001e8480 	.word	0x001e8480
 800c1a0:	003d0900 	.word	0x003d0900
 800c1a4:	00516155 	.word	0x00516155
 800c1a8:	0061a800 	.word	0x0061a800
 800c1ac:	007a1200 	.word	0x007a1200
 800c1b0:	00a2c2aa 	.word	0x00a2c2aa
 800c1b4:	00f42400 	.word	0x00f42400
 800c1b8:	01e84800 	.word	0x01e84800
 800c1bc:	0001e848 	.word	0x0001e848
 800c1c0:	00051615 	.word	0x00051615
 800c1c4:	00061a80 	.word	0x00061a80
 800c1c8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d04e      	beq.n	800c272 <UART_SetConfig+0x2292>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d047      	beq.n	800c26c <UART_SetConfig+0x228c>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d040      	beq.n	800c266 <UART_SetConfig+0x2286>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e8:	2b03      	cmp	r3, #3
 800c1ea:	d039      	beq.n	800c260 <UART_SetConfig+0x2280>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d032      	beq.n	800c25a <UART_SetConfig+0x227a>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f8:	2b05      	cmp	r3, #5
 800c1fa:	d02b      	beq.n	800c254 <UART_SetConfig+0x2274>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c200:	2b06      	cmp	r3, #6
 800c202:	d024      	beq.n	800c24e <UART_SetConfig+0x226e>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c208:	2b07      	cmp	r3, #7
 800c20a:	d01d      	beq.n	800c248 <UART_SetConfig+0x2268>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c210:	2b08      	cmp	r3, #8
 800c212:	d016      	beq.n	800c242 <UART_SetConfig+0x2262>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c218:	2b09      	cmp	r3, #9
 800c21a:	d00f      	beq.n	800c23c <UART_SetConfig+0x225c>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	2b0a      	cmp	r3, #10
 800c222:	d008      	beq.n	800c236 <UART_SetConfig+0x2256>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c228:	2b0b      	cmp	r3, #11
 800c22a:	d101      	bne.n	800c230 <UART_SetConfig+0x2250>
 800c22c:	2380      	movs	r3, #128	; 0x80
 800c22e:	e022      	b.n	800c276 <UART_SetConfig+0x2296>
 800c230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c234:	e01f      	b.n	800c276 <UART_SetConfig+0x2296>
 800c236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c23a:	e01c      	b.n	800c276 <UART_SetConfig+0x2296>
 800c23c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c240:	e019      	b.n	800c276 <UART_SetConfig+0x2296>
 800c242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c246:	e016      	b.n	800c276 <UART_SetConfig+0x2296>
 800c248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c24c:	e013      	b.n	800c276 <UART_SetConfig+0x2296>
 800c24e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c252:	e010      	b.n	800c276 <UART_SetConfig+0x2296>
 800c254:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c258:	e00d      	b.n	800c276 <UART_SetConfig+0x2296>
 800c25a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c25e:	e00a      	b.n	800c276 <UART_SetConfig+0x2296>
 800c260:	f241 5355 	movw	r3, #5461	; 0x1555
 800c264:	e007      	b.n	800c276 <UART_SetConfig+0x2296>
 800c266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c26a:	e004      	b.n	800c276 <UART_SetConfig+0x2296>
 800c26c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c270:	e001      	b.n	800c276 <UART_SetConfig+0x2296>
 800c272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	6852      	ldr	r2, [r2, #4]
 800c27a:	0852      	lsrs	r2, r2, #1
 800c27c:	441a      	add	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	fbb2 f3f3 	udiv	r3, r2, r3
 800c286:	b29b      	uxth	r3, r3
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c28a:	e003      	b.n	800c294 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c296:	2b0f      	cmp	r3, #15
 800c298:	d908      	bls.n	800c2ac <UART_SetConfig+0x22cc>
 800c29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2a0:	d204      	bcs.n	800c2ac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2a8:	60da      	str	r2, [r3, #12]
 800c2aa:	e002      	b.n	800c2b2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c2ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3740      	adds	r7, #64	; 0x40
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c2dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e8:	f003 0301 	and.w	r3, r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00a      	beq.n	800c306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30a:	f003 0302 	and.w	r3, r3, #2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00a      	beq.n	800c328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	430a      	orrs	r2, r1
 800c326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32c:	f003 0304 	and.w	r3, r3, #4
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00a      	beq.n	800c34a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34e:	f003 0308 	and.w	r3, r3, #8
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00a      	beq.n	800c36c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	430a      	orrs	r2, r1
 800c36a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c370:	f003 0310 	and.w	r3, r3, #16
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00a      	beq.n	800c38e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	430a      	orrs	r2, r1
 800c38c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00a      	beq.n	800c3b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	430a      	orrs	r2, r1
 800c3ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d01a      	beq.n	800c3f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3da:	d10a      	bne.n	800c3f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	430a      	orrs	r2, r1
 800c3f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	430a      	orrs	r2, r1
 800c412:	605a      	str	r2, [r3, #4]
  }
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af02      	add	r7, sp, #8
 800c426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c430:	f7f5 fec2 	bl	80021b8 <HAL_GetTick>
 800c434:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0308 	and.w	r3, r3, #8
 800c440:	2b08      	cmp	r3, #8
 800c442:	d10e      	bne.n	800c462 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 f82c 	bl	800c4b0 <UART_WaitOnFlagUntilTimeout>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c45e:	2303      	movs	r3, #3
 800c460:	e022      	b.n	800c4a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 0304 	and.w	r3, r3, #4
 800c46c:	2b04      	cmp	r3, #4
 800c46e:	d10e      	bne.n	800c48e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f816 	bl	800c4b0 <UART_WaitOnFlagUntilTimeout>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e00c      	b.n	800c4a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2220      	movs	r2, #32
 800c492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2220      	movs	r2, #32
 800c49a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4c0:	e062      	b.n	800c588 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c8:	d05e      	beq.n	800c588 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4ca:	f7f5 fe75 	bl	80021b8 <HAL_GetTick>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	69ba      	ldr	r2, [r7, #24]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d302      	bcc.n	800c4e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d11d      	bne.n	800c51c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	689a      	ldr	r2, [r3, #8]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0201 	bic.w	r2, r2, #1
 800c4fe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2220      	movs	r2, #32
 800c504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2220      	movs	r2, #32
 800c50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e045      	b.n	800c5a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 0304 	and.w	r3, r3, #4
 800c526:	2b00      	cmp	r3, #0
 800c528:	d02e      	beq.n	800c588 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c538:	d126      	bne.n	800c588 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c542:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c552:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	689a      	ldr	r2, [r3, #8]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f022 0201 	bic.w	r2, r2, #1
 800c562:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2220      	movs	r2, #32
 800c568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2220      	movs	r2, #32
 800c570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2220      	movs	r2, #32
 800c578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c584:	2303      	movs	r3, #3
 800c586:	e00f      	b.n	800c5a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	69da      	ldr	r2, [r3, #28]
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	4013      	ands	r3, r2
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	429a      	cmp	r2, r3
 800c596:	bf0c      	ite	eq
 800c598:	2301      	moveq	r3, #1
 800c59a:	2300      	movne	r3, #0
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	461a      	mov	r2, r3
 800c5a0:	79fb      	ldrb	r3, [r7, #7]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d08d      	beq.n	800c4c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c5c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	689a      	ldr	r2, [r3, #8]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c5d6:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c602:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6899      	ldr	r1, [r3, #8]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	4b08      	ldr	r3, [pc, #32]	; (800c630 <UART_EndRxTransfer+0x44>)
 800c610:	400b      	ands	r3, r1
 800c612:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2220      	movs	r2, #32
 800c618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c622:	bf00      	nop
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	effffffe 	.word	0xeffffffe

0800c634 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c640:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	69db      	ldr	r3, [r3, #28]
 800c646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c64a:	d01f      	beq.n	800c68c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c662:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	689a      	ldr	r2, [r3, #8]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 0201 	bic.w	r2, r2, #1
 800c672:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	689a      	ldr	r2, [r3, #8]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c682:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2220      	movs	r2, #32
 800c688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f7f4 f829 	bl	80006e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b084      	sub	sp, #16
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f7fd fc83 	bl	8009fb4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ae:	bf00      	nop
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b086      	sub	sp, #24
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6de:	2b80      	cmp	r3, #128	; 0x80
 800c6e0:	d109      	bne.n	800c6f6 <UART_DMAError+0x40>
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	2b21      	cmp	r3, #33	; 0x21
 800c6e6:	d106      	bne.n	800c6f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c6f0:	6978      	ldr	r0, [r7, #20]
 800c6f2:	f7ff ff5d 	bl	800c5b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c700:	2b40      	cmp	r3, #64	; 0x40
 800c702:	d109      	bne.n	800c718 <UART_DMAError+0x62>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b22      	cmp	r3, #34	; 0x22
 800c708:	d106      	bne.n	800c718 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c712:	6978      	ldr	r0, [r7, #20]
 800c714:	f7ff ff6a 	bl	800c5ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c71e:	f043 0210 	orr.w	r2, r3, #16
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c728:	6978      	ldr	r0, [r7, #20]
 800c72a:	f7fd fc4d 	bl	8009fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c72e:	bf00      	nop
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b084      	sub	sp, #16
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f7fd fc37 	bl	8009fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c75a:	bf00      	nop
 800c75c:	3710      	adds	r7, #16
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c762:	b480      	push	{r7}
 800c764:	b083      	sub	sp, #12
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c770:	2b21      	cmp	r3, #33	; 0x21
 800c772:	d12a      	bne.n	800c7ca <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d110      	bne.n	800c7a2 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c78e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c79e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c7a0:	e013      	b.n	800c7ca <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a6:	781a      	ldrb	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b2:	1c5a      	adds	r2, r3, #1
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c7ca:	bf00      	nop
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b085      	sub	sp, #20
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7e4:	2b21      	cmp	r3, #33	; 0x21
 800c7e6:	d12f      	bne.n	800c848 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d110      	bne.n	800c816 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c802:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c812:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c814:	e018      	b.n	800c848 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c81a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	461a      	mov	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c82a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c830:	1c9a      	adds	r2, r3, #2
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	3b01      	subs	r3, #1
 800c840:	b29a      	uxth	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c848:	bf00      	nop
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c862:	2b21      	cmp	r3, #33	; 0x21
 800c864:	d13d      	bne.n	800c8e2 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c86c:	81fb      	strh	r3, [r7, #14]
 800c86e:	e035      	b.n	800c8dc <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c876:	b29b      	uxth	r3, r3
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d111      	bne.n	800c8a0 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	689a      	ldr	r2, [r3, #8]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c88a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c89a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c89c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c89e:	e020      	b.n	800c8e2 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d013      	beq.n	800c8d6 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8b2:	781a      	ldrb	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c8d6:	89fb      	ldrh	r3, [r7, #14]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	81fb      	strh	r3, [r7, #14]
 800c8dc:	89fb      	ldrh	r3, [r7, #14]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1c6      	bne.n	800c870 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c8e2:	bf00      	nop
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b085      	sub	sp, #20
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8fc:	2b21      	cmp	r3, #33	; 0x21
 800c8fe:	d142      	bne.n	800c986 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c906:	81fb      	strh	r3, [r7, #14]
 800c908:	e03a      	b.n	800c980 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c910:	b29b      	uxth	r3, r3
 800c912:	2b00      	cmp	r3, #0
 800c914:	d111      	bne.n	800c93a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	689a      	ldr	r2, [r3, #8]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c924:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c934:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c936:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c938:	e025      	b.n	800c986 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c944:	2b00      	cmp	r3, #0
 800c946:	d018      	beq.n	800c97a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c94c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	881b      	ldrh	r3, [r3, #0]
 800c952:	461a      	mov	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c95c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c962:	1c9a      	adds	r2, r3, #2
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c96e:	b29b      	uxth	r3, r3
 800c970:	3b01      	subs	r3, #1
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c97a:	89fb      	ldrh	r3, [r7, #14]
 800c97c:	3b01      	subs	r3, #1
 800c97e:	81fb      	strh	r3, [r7, #14]
 800c980:	89fb      	ldrh	r3, [r7, #14]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1c1      	bne.n	800c90a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c986:	bf00      	nop
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b082      	sub	sp, #8
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7f3 fe51 	bl	8000660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9be:	bf00      	nop
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9d4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9dc:	2b22      	cmp	r3, #34	; 0x22
 800c9de:	d13b      	bne.n	800ca58 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c9e8:	89bb      	ldrh	r3, [r7, #12]
 800c9ea:	b2d9      	uxtb	r1, r3
 800c9ec:	89fb      	ldrh	r3, [r7, #14]
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f4:	400a      	ands	r2, r1
 800c9f6:	b2d2      	uxtb	r2, r2
 800c9f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9fe:	1c5a      	adds	r2, r3, #1
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d122      	bne.n	800ca68 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca30:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	689a      	ldr	r2, [r3, #8]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f022 0201 	bic.w	r2, r2, #1
 800ca40:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2220      	movs	r2, #32
 800ca46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7f3 fe47 	bl	80006e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca56:	e007      	b.n	800ca68 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	699a      	ldr	r2, [r3, #24]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f042 0208 	orr.w	r2, r2, #8
 800ca66:	619a      	str	r2, [r3, #24]
}
 800ca68:	bf00      	nop
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca7e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca86:	2b22      	cmp	r3, #34	; 0x22
 800ca88:	d13b      	bne.n	800cb02 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca90:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca96:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ca98:	89ba      	ldrh	r2, [r7, #12]
 800ca9a:	89fb      	ldrh	r3, [r7, #14]
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caa8:	1c9a      	adds	r2, r3, #2
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	3b01      	subs	r3, #1
 800cab8:	b29a      	uxth	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d122      	bne.n	800cb12 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cada:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	689a      	ldr	r2, [r3, #8]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f022 0201 	bic.w	r2, r2, #1
 800caea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2220      	movs	r2, #32
 800caf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7f3 fdf2 	bl	80006e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb00:	e007      	b.n	800cb12 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	699a      	ldr	r2, [r3, #24]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f042 0208 	orr.w	r2, r2, #8
 800cb10:	619a      	str	r2, [r3, #24]
}
 800cb12:	bf00      	nop
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
	...

0800cb1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb2a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb32:	2b22      	cmp	r3, #34	; 0x22
 800cb34:	d166      	bne.n	800cc04 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb3c:	81fb      	strh	r3, [r7, #14]
 800cb3e:	e03d      	b.n	800cbbc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb46:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cb48:	893b      	ldrh	r3, [r7, #8]
 800cb4a:	b2d9      	uxtb	r1, r3
 800cb4c:	89bb      	ldrh	r3, [r7, #12]
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb54:	400a      	ands	r2, r1
 800cb56:	b2d2      	uxtb	r2, r2
 800cb58:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d119      	bne.n	800cbb6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb90:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6899      	ldr	r1, [r3, #8]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	4b1f      	ldr	r3, [pc, #124]	; (800cc1c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800cb9e:	400b      	ands	r3, r1
 800cba0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2220      	movs	r2, #32
 800cba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7f3 fd97 	bl	80006e4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cbb6:	89fb      	ldrh	r3, [r7, #14]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	81fb      	strh	r3, [r7, #14]
 800cbbc:	89fb      	ldrh	r3, [r7, #14]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1be      	bne.n	800cb40 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbc8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cbca:	897b      	ldrh	r3, [r7, #10]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d021      	beq.n	800cc14 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbd6:	897a      	ldrh	r2, [r7, #10]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d21b      	bcs.n	800cc14 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	689a      	ldr	r2, [r3, #8]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cbea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a0c      	ldr	r2, [pc, #48]	; (800cc20 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800cbf0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f042 0220 	orr.w	r2, r2, #32
 800cc00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc02:	e007      	b.n	800cc14 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	699a      	ldr	r2, [r3, #24]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f042 0208 	orr.w	r2, r2, #8
 800cc12:	619a      	str	r2, [r3, #24]
}
 800cc14:	bf00      	nop
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	effffffe 	.word	0xeffffffe
 800cc20:	0800c9c7 	.word	0x0800c9c7

0800cc24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc32:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc3a:	2b22      	cmp	r3, #34	; 0x22
 800cc3c:	d166      	bne.n	800cd0c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc44:	82fb      	strh	r3, [r7, #22]
 800cc46:	e03d      	b.n	800ccc4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc54:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cc56:	8a3a      	ldrh	r2, [r7, #16]
 800cc58:	8abb      	ldrh	r3, [r7, #20]
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc66:	1c9a      	adds	r2, r3, #2
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	3b01      	subs	r3, #1
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d119      	bne.n	800ccbe <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc98:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6899      	ldr	r1, [r3, #8]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	4b1f      	ldr	r3, [pc, #124]	; (800cd24 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800cca6:	400b      	ands	r3, r1
 800cca8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2220      	movs	r2, #32
 800ccae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7f3 fd13 	bl	80006e4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ccbe:	8afb      	ldrh	r3, [r7, #22]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	82fb      	strh	r3, [r7, #22]
 800ccc4:	8afb      	ldrh	r3, [r7, #22]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1be      	bne.n	800cc48 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccd0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ccd2:	8a7b      	ldrh	r3, [r7, #18]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d021      	beq.n	800cd1c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ccde:	8a7a      	ldrh	r2, [r7, #18]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d21b      	bcs.n	800cd1c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	689a      	ldr	r2, [r3, #8]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ccf2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4a0c      	ldr	r2, [pc, #48]	; (800cd28 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800ccf8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f042 0220 	orr.w	r2, r2, #32
 800cd08:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd0a:	e007      	b.n	800cd1c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	699a      	ldr	r2, [r3, #24]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f042 0208 	orr.w	r2, r2, #8
 800cd1a:	619a      	str	r2, [r3, #24]
}
 800cd1c:	bf00      	nop
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	effffffe 	.word	0xeffffffe
 800cd28:	0800ca71 	.word	0x0800ca71

0800cd2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd34:	bf00      	nop
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d101      	bne.n	800cd7e <HAL_UARTEx_DisableFifoMode+0x16>
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	e027      	b.n	800cdce <HAL_UARTEx_DisableFifoMode+0x66>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2224      	movs	r2, #36	; 0x24
 800cd8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f022 0201 	bic.w	r2, r2, #1
 800cda4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cdac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2220      	movs	r2, #32
 800cdc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b084      	sub	sp, #16
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d101      	bne.n	800cdf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cdee:	2302      	movs	r3, #2
 800cdf0:	e02d      	b.n	800ce4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2224      	movs	r2, #36	; 0x24
 800cdfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f022 0201 	bic.w	r2, r2, #1
 800ce18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	430a      	orrs	r2, r1
 800ce2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f850 	bl	800ced4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2220      	movs	r2, #32
 800ce40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b084      	sub	sp, #16
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d101      	bne.n	800ce6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce6a:	2302      	movs	r3, #2
 800ce6c:	e02d      	b.n	800ceca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2224      	movs	r2, #36	; 0x24
 800ce7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f022 0201 	bic.w	r2, r2, #1
 800ce94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	430a      	orrs	r2, r1
 800cea8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 f812 	bl	800ced4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2220      	movs	r2, #32
 800cebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cec8:	2300      	movs	r3, #0
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
	...

0800ced4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b089      	sub	sp, #36	; 0x24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cedc:	4a2f      	ldr	r2, [pc, #188]	; (800cf9c <UARTEx_SetNbDataToProcess+0xc8>)
 800cede:	f107 0314 	add.w	r3, r7, #20
 800cee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cee6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ceea:	4a2d      	ldr	r2, [pc, #180]	; (800cfa0 <UARTEx_SetNbDataToProcess+0xcc>)
 800ceec:	f107 030c 	add.w	r3, r7, #12
 800cef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cef4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d108      	bne.n	800cf12 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf10:	e03d      	b.n	800cf8e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf12:	2308      	movs	r3, #8
 800cf14:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf16:	2308      	movs	r3, #8
 800cf18:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	0e5b      	lsrs	r3, r3, #25
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	f003 0307 	and.w	r3, r3, #7
 800cf28:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	0f5b      	lsrs	r3, r3, #29
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	f003 0307 	and.w	r3, r3, #7
 800cf38:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cf3a:	7fbb      	ldrb	r3, [r7, #30]
 800cf3c:	7f3a      	ldrb	r2, [r7, #28]
 800cf3e:	f107 0120 	add.w	r1, r7, #32
 800cf42:	440a      	add	r2, r1
 800cf44:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cf48:	fb02 f303 	mul.w	r3, r2, r3
 800cf4c:	7f3a      	ldrb	r2, [r7, #28]
 800cf4e:	f107 0120 	add.w	r1, r7, #32
 800cf52:	440a      	add	r2, r1
 800cf54:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cf58:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cf64:	7ffb      	ldrb	r3, [r7, #31]
 800cf66:	7f7a      	ldrb	r2, [r7, #29]
 800cf68:	f107 0120 	add.w	r1, r7, #32
 800cf6c:	440a      	add	r2, r1
 800cf6e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cf72:	fb02 f303 	mul.w	r3, r2, r3
 800cf76:	7f7a      	ldrb	r2, [r7, #29]
 800cf78:	f107 0120 	add.w	r1, r7, #32
 800cf7c:	440a      	add	r2, r1
 800cf7e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cf82:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cf8e:	bf00      	nop
 800cf90:	3724      	adds	r7, #36	; 0x24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	0800d014 	.word	0x0800d014
 800cfa0:	0800d01c 	.word	0x0800d01c

0800cfa4 <__libc_init_array>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	4e0d      	ldr	r6, [pc, #52]	; (800cfdc <__libc_init_array+0x38>)
 800cfa8:	4c0d      	ldr	r4, [pc, #52]	; (800cfe0 <__libc_init_array+0x3c>)
 800cfaa:	1ba4      	subs	r4, r4, r6
 800cfac:	10a4      	asrs	r4, r4, #2
 800cfae:	2500      	movs	r5, #0
 800cfb0:	42a5      	cmp	r5, r4
 800cfb2:	d109      	bne.n	800cfc8 <__libc_init_array+0x24>
 800cfb4:	4e0b      	ldr	r6, [pc, #44]	; (800cfe4 <__libc_init_array+0x40>)
 800cfb6:	4c0c      	ldr	r4, [pc, #48]	; (800cfe8 <__libc_init_array+0x44>)
 800cfb8:	f000 f820 	bl	800cffc <_init>
 800cfbc:	1ba4      	subs	r4, r4, r6
 800cfbe:	10a4      	asrs	r4, r4, #2
 800cfc0:	2500      	movs	r5, #0
 800cfc2:	42a5      	cmp	r5, r4
 800cfc4:	d105      	bne.n	800cfd2 <__libc_init_array+0x2e>
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfcc:	4798      	blx	r3
 800cfce:	3501      	adds	r5, #1
 800cfd0:	e7ee      	b.n	800cfb0 <__libc_init_array+0xc>
 800cfd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfd6:	4798      	blx	r3
 800cfd8:	3501      	adds	r5, #1
 800cfda:	e7f2      	b.n	800cfc2 <__libc_init_array+0x1e>
 800cfdc:	0800d044 	.word	0x0800d044
 800cfe0:	0800d044 	.word	0x0800d044
 800cfe4:	0800d044 	.word	0x0800d044
 800cfe8:	0800d048 	.word	0x0800d048

0800cfec <memset>:
 800cfec:	4402      	add	r2, r0
 800cfee:	4603      	mov	r3, r0
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d100      	bne.n	800cff6 <memset+0xa>
 800cff4:	4770      	bx	lr
 800cff6:	f803 1b01 	strb.w	r1, [r3], #1
 800cffa:	e7f9      	b.n	800cff0 <memset+0x4>

0800cffc <_init>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	bf00      	nop
 800d000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d002:	bc08      	pop	{r3}
 800d004:	469e      	mov	lr, r3
 800d006:	4770      	bx	lr

0800d008 <_fini>:
 800d008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00a:	bf00      	nop
 800d00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d00e:	bc08      	pop	{r3}
 800d010:	469e      	mov	lr, r3
 800d012:	4770      	bx	lr
