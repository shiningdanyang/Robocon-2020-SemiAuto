
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001116c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08011410  08011410  00021410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118d8  080118d8  00030170  2**0
                  CONTENTS
  4 .ARM          00000008  080118d8  080118d8  000218d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118e0  080118e0  00030170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118e0  080118e0  000218e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118e4  080118e4  000218e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  24000000  080118e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c6c  24000170  08011a58  00030170  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000ddc  08011a58  00030ddc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002253a  00000000  00000000  0003019e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003458  00000000  00000000  000526d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b0  00000000  00000000  00055b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  000571e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003933b  00000000  00000000  00058770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013443  00000000  00000000  00091aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017595e  00000000  00000000  000a4eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021a84c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000673c  00000000  00000000  0021a8c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000170 	.word	0x24000170
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080113f4 	.word	0x080113f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000174 	.word	0x24000174
 80002dc:	080113f4 	.word	0x080113f4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <delayUs_Init+0x38>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10e      	bne.n	80006ae <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delayUs_Init+0x38>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <delayUs_Init+0x38>)
 8000696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800069a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <delayUs_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <delayUs_Init+0x3c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <delayUs_Init+0x3c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
    }
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000edf0 	.word	0xe000edf0
 80006bc:	e0001000 	.word	0xe0001000

080006c0 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <delayUs+0x40>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <delayUs+0x44>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <delayUs+0x48>)
 80006d4:	fba2 2303 	umull	r2, r3, r2, r3
 80006d8:	0c9a      	lsrs	r2, r3, #18
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	fb02 f303 	mul.w	r3, r2, r3
 80006e0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80006e2:	bf00      	nop
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <delayUs+0x40>)
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d8f8      	bhi.n	80006e4 <delayUs+0x24>
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0001000 	.word	0xe0001000
 8000704:	240000f8 	.word	0x240000f8
 8000708:	431bde83 	.word	0x431bde83

0800070c <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <peripheralUART_Init+0x50>)
 8000712:	22aa      	movs	r2, #170	; 0xaa
 8000714:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <peripheralUART_Init+0x50>)
 8000718:	22aa      	movs	r2, #170	; 0xaa
 800071a:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <peripheralUART_Init+0x50>)
 800071e:	22aa      	movs	r2, #170	; 0xaa
 8000720:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <peripheralUART_Init+0x50>)
 8000724:	22aa      	movs	r2, #170	; 0xaa
 8000726:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <peripheralUART_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	490b      	ldr	r1, [pc, #44]	; (8000760 <peripheralUART_Init+0x54>)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <peripheralUART_Init+0x58>)
 8000734:	f00b ff30 	bl	800c598 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	490b      	ldr	r1, [pc, #44]	; (8000768 <peripheralUART_Init+0x5c>)
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <peripheralUART_Init+0x60>)
 800073e:	f00c f803 	bl	800c748 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000742:	2202      	movs	r2, #2
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <peripheralUART_Init+0x64>)
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <peripheralUART_Init+0x68>)
 8000748:	f00b fffe 	bl	800c748 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&zmanual, zmanualRxPacket, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	490a      	ldr	r1, [pc, #40]	; (8000778 <peripheralUART_Init+0x6c>)
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <peripheralUART_Init+0x70>)
 8000752:	f00b fff9 	bl	800c748 <HAL_UART_Receive_DMA>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000014 	.word	0x24000014
 8000760:	24000cd8 	.word	0x24000cd8
 8000764:	24000c0c 	.word	0x24000c0c
 8000768:	24000c98 	.word	0x24000c98
 800076c:	24000374 	.word	0x24000374
 8000770:	24000840 	.word	0x24000840
 8000774:	24000af8 	.word	0x24000af8
 8000778:	24000910 	.word	0x24000910
 800077c:	2400021c 	.word	0x2400021c

08000780 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_TxCpltCallback+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d103      	bne.n	800079c <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_UART_TxCpltCallback+0x68>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 800079a:	e01c      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_UART_TxCpltCallback+0x6c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d103      	bne.n	80007b0 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_TxCpltCallback+0x70>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
}
 80007ae:	e012      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_UART_TxCpltCallback+0x74>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d103      	bne.n	80007c4 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_UART_TxCpltCallback+0x78>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	e008      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_UART_TxCpltCallback+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d102      	bne.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_UART_TxCpltCallback+0x80>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	24000af8 	.word	0x24000af8
 80007e8:	2400040f 	.word	0x2400040f
 80007ec:	24000374 	.word	0x24000374
 80007f0:	24000bea 	.word	0x24000bea
 80007f4:	24000c0c 	.word	0x24000c0c
 80007f8:	24000928 	.word	0x24000928
 80007fc:	2400021c 	.word	0x2400021c
 8000800:	240002d1 	.word	0x240002d1

08000804 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_UART_RxCpltCallback+0x7c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d103      	bne.n	8000820 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_UART_RxCpltCallback+0x80>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 800081e:	e02b      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_RxCpltCallback+0x84>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d103      	bne.n	8000834 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_UART_RxCpltCallback+0x88>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	e021      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d112      	bne.n	8000866 <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_RxCpltCallback+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b74      	cmp	r3, #116	; 0x74
 8000846:	d105      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2209      	movs	r2, #9
 800084c:	4912      	ldr	r1, [pc, #72]	; (8000898 <HAL_UART_RxCpltCallback+0x94>)
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 8000850:	f00b fd88 	bl	800c364 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_RxCpltCallback+0x98>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	490d      	ldr	r1, [pc, #52]	; (8000894 <HAL_UART_RxCpltCallback+0x90>)
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 8000860:	f00b fe9a 	bl	800c598 <HAL_UART_Receive_IT>
}
 8000864:	e008      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_UART_RxCpltCallback+0x9c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d102      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000af8 	.word	0x24000af8
 8000884:	240001da 	.word	0x240001da
 8000888:	24000374 	.word	0x24000374
 800088c:	24000bea 	.word	0x24000bea
 8000890:	24000c0c 	.word	0x24000c0c
 8000894:	24000cd8 	.word	0x24000cd8
 8000898:	24000014 	.word	0x24000014
 800089c:	24000d60 	.word	0x24000d60
 80008a0:	2400021c 	.word	0x2400021c
 80008a4:	24000bf0 	.word	0x24000bf0

080008a8 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <compassReset+0x24>)
 80008ae:	2261      	movs	r2, #97	; 0x61
 80008b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	4905      	ldr	r1, [pc, #20]	; (80008cc <compassReset+0x24>)
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <compassReset+0x28>)
 80008b8:	f00b fdea 	bl	800c490 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 80008bc:	f000 f818 	bl	80008f0 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <compassReset+0x24>)
 80008c2:	227a      	movs	r2, #122	; 0x7a
 80008c4:	701a      	strb	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	24000000 	.word	0x24000000
 80008d0:	24000af8 	.word	0x24000af8

080008d4 <compassRequest>:
void compassRequest(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	4903      	ldr	r1, [pc, #12]	; (80008e8 <compassRequest+0x14>)
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <compassRequest+0x18>)
 80008de:	f00b fdd7 	bl	800c490 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	24000000 	.word	0x24000000
 80008ec:	24000af8 	.word	0x24000af8

080008f0 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 80008f4:	bf00      	nop
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <wait4CompassTx+0x20>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0fb      	beq.n	80008f6 <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <wait4CompassTx+0x20>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2400040f 	.word	0x2400040f

08000914 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 8000918:	2209      	movs	r2, #9
 800091a:	4904      	ldr	r1, [pc, #16]	; (800092c <spinalCordTrans+0x18>)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <spinalCordTrans+0x1c>)
 800091e:	f00b fdb7 	bl	800c490 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000922:	f000 f807 	bl	8000934 <wait4SpinalCordTx>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	24000014 	.word	0x24000014
 8000930:	24000c0c 	.word	0x24000c0c

08000934 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 8000938:	bf00      	nop
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <wait4SpinalCordTx+0x20>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0fb      	beq.n	800093a <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <wait4SpinalCordTx+0x20>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	24000928 	.word	0x24000928

08000958 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e01f      	b.n	80009a8 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000974:	2b00      	cmp	r3, #0
 8000976:	d005      	beq.n	8000984 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000978:	2201      	movs	r2, #1
 800097a:	2120      	movs	r1, #32
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <SendByteSPI+0x60>)
 800097e:	f008 fb45 	bl	800900c <HAL_GPIO_WritePin>
 8000982:	e004      	b.n	800098e <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8000984:	2200      	movs	r2, #0
 8000986:	2120      	movs	r1, #32
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <SendByteSPI+0x60>)
 800098a:	f008 fb3f 	bl	800900c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <SendByteSPI+0x60>)
 8000994:	f008 fb3a 	bl	800900c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000998:	2201      	movs	r2, #1
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <SendByteSPI+0x60>)
 800099e:	f008 fb35 	bl	800900c <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b07      	cmp	r3, #7
 80009ac:	dddc      	ble.n	8000968 <SendByteSPI+0x10>

	}
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	58021800 	.word	0x58021800

080009bc <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	480f      	ldr	r0, [pc, #60]	; (8000a0c <ST7920_SendCmd+0x50>)
 80009ce:	f008 fb1d 	bl	800900c <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 80009d2:	20f8      	movs	r0, #248	; 0xf8
 80009d4:	f7ff ffc0 	bl	8000958 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f023 030f 	bic.w	r3, r3, #15
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffb9 	bl	8000958 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffb3 	bl	8000958 <SendByteSPI>
	delayUs(50);
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f7ff fe64 	bl	80006c0 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <ST7920_SendCmd+0x50>)
 8000a00:	f008 fb04 	bl	800900c <HAL_GPIO_WritePin>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58021800 	.word	0x58021800

08000a10 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <ST7920_SendData+0x50>)
 8000a22:	f008 faf3 	bl	800900c <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000a26:	20fa      	movs	r0, #250	; 0xfa
 8000a28:	f7ff ff96 	bl	8000958 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f023 030f 	bic.w	r3, r3, #15
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff8f 	bl	8000958 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff89 	bl	8000958 <SendByteSPI>
	delayUs(50);
 8000a46:	2032      	movs	r0, #50	; 0x32
 8000a48:	f7ff fe3a 	bl	80006c0 <delayUs>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <ST7920_SendData+0x50>)
 8000a54:	f008 fada 	bl	800900c <HAL_GPIO_WritePin>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58021800 	.word	0x58021800

08000a64 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
    switch (row)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d81e      	bhi.n	8000ab4 <ST7920_SendString+0x50>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <ST7920_SendString+0x18>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000a8d 	.word	0x08000a8d
 8000a80:	08000a97 	.word	0x08000a97
 8000a84:	08000aa1 	.word	0x08000aa1
 8000a88:	08000aab 	.word	0x08000aab
    {
        case 0:
            col |= 0x80;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	60bb      	str	r3, [r7, #8]
            break;
 8000a94:	e013      	b.n	8000abe <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000a9c:	60bb      	str	r3, [r7, #8]
            break;
 8000a9e:	e00e      	b.n	8000abe <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000aa6:	60bb      	str	r3, [r7, #8]
            break;
 8000aa8:	e009      	b.n	8000abe <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8000ab0:	60bb      	str	r3, [r7, #8]
            break;
 8000ab2:	e004      	b.n	8000abe <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aba:	60bb      	str	r3, [r7, #8]
            break;
 8000abc:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff7a 	bl	80009bc <ST7920_SendCmd>

    while (*string)
 8000ac8:	e006      	b.n	8000ad8 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff9c 	bl	8000a10 <ST7920_SendData>
    while (*string)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f4      	bne.n	8000aca <ST7920_SendString+0x66>
    	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <ST7920_Clear>:
}



void ST7920_Clear()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <ST7920_Clear+0x8c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d134      	bne.n	8000b60 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	e02d      	b.n	8000b58 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b1f      	cmp	r3, #31
 8000b00:	d80a      	bhi.n	8000b18 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff56 	bl	80009bc <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	f7ff ff53 	bl	80009bc <ST7920_SendCmd>
 8000b16:	e00d      	b.n	8000b34 <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	3b20      	subs	r3, #32
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff47 	bl	80009bc <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000b2e:	2088      	movs	r0, #136	; 0x88
 8000b30:	f7ff ff44 	bl	80009bc <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	e008      	b.n	8000b4c <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff68 	bl	8000a10 <ST7920_SendData>
				ST7920_SendData(0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ff65 	bl	8000a10 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d9f3      	bls.n	8000b3a <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	3301      	adds	r3, #1
 8000b56:	71bb      	strb	r3, [r7, #6]
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5c:	d9ce      	bls.n	8000afc <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8000b5e:	e005      	b.n	8000b6c <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff2b 	bl	80009bc <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8000b66:	2002      	movs	r0, #2
 8000b68:	f003 ffa2 	bl	8004ab0 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2400018d 	.word	0x2400018d

08000b78 <ST7920_Init>:


void ST7920_Init (void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <ST7920_Init+0x7c>)
 8000b82:	f008 fa43 	bl	800900c <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000b86:	200a      	movs	r0, #10
 8000b88:	f003 ff92 	bl	8004ab0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <ST7920_Init+0x7c>)
 8000b92:	f008 fa3b 	bl	800900c <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000b96:	2032      	movs	r0, #50	; 0x32
 8000b98:	f003 ff8a 	bl	8004ab0 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000b9c:	2030      	movs	r0, #48	; 0x30
 8000b9e:	f7ff ff0d 	bl	80009bc <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000ba2:	206e      	movs	r0, #110	; 0x6e
 8000ba4:	f7ff fd8c 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000ba8:	2030      	movs	r0, #48	; 0x30
 8000baa:	f7ff ff07 	bl	80009bc <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000bae:	2028      	movs	r0, #40	; 0x28
 8000bb0:	f7ff fd86 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000bb4:	2008      	movs	r0, #8
 8000bb6:	f7ff ff01 	bl	80009bc <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000bba:	206e      	movs	r0, #110	; 0x6e
 8000bbc:	f7ff fd80 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fefb 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f003 ff72 	bl	8004ab0 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f7ff fef5 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f003 ff6c 	bl	8004ab0 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f7ff feef 	bl	80009bc <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000bde:	2001      	movs	r0, #1
 8000be0:	f003 ff66 	bl	8004ab0 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000be4:	2002      	movs	r0, #2
 8000be6:	f7ff fee9 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000bea:	2001      	movs	r0, #1
 8000bec:	f003 ff60 	bl	8004ab0 <HAL_Delay>

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58021800 	.word	0x58021800

08000bf8 <peripheralADC_Init>:
//uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
//uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	4903      	ldr	r1, [pc, #12]	; (8000c0c <peripheralADC_Init+0x14>)
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <peripheralADC_Init+0x18>)
 8000c02:	f004 fb15 	bl	8005230 <HAL_ADC_Start_DMA>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	24000cf4 	.word	0x24000cf4
 8000c10:	240009e8 	.word	0x240009e8

08000c14 <controlMotor1>:
#ifdef SPINAL_CORD_MODE_ONEWAY



void controlMotor1(int _speed)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2bfa      	cmp	r3, #250	; 0xfa
 8000c20:	dd02      	ble.n	8000c28 <controlMotor1+0x14>
		_speed = 250;
 8000c22:	23fa      	movs	r3, #250	; 0xfa
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e010      	b.n	8000c4a <controlMotor1+0x36>
	else if(_speed<-250)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000c2e:	da03      	bge.n	8000c38 <controlMotor1+0x24>
		_speed = -250;
 8000c30:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e008      	b.n	8000c4a <controlMotor1+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	dc05      	bgt.n	8000c4a <controlMotor1+0x36>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f113 0f02 	cmn.w	r3, #2
 8000c44:	db01      	blt.n	8000c4a <controlMotor1+0x36>
		_speed = 3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bfb8      	it	lt
 8000c50:	425b      	neglt	r3, r3
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <controlMotor1+0x74>)
 8000c56:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db07      	blt.n	8000c6e <controlMotor1+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <controlMotor1+0x74>)
 8000c60:	7a1b      	ldrb	r3, [r3, #8]
 8000c62:	f023 0301 	bic.w	r3, r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <controlMotor1+0x74>)
 8000c6a:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 8000c6c:	e006      	b.n	8000c7c <controlMotor1+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <controlMotor1+0x74>)
 8000c70:	7a1b      	ldrb	r3, [r3, #8]
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <controlMotor1+0x74>)
 8000c7a:	721a      	strb	r2, [r3, #8]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	24000014 	.word	0x24000014

08000c8c <controlMotor2>:
void controlMotor2(int _speed)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2bfa      	cmp	r3, #250	; 0xfa
 8000c98:	dd02      	ble.n	8000ca0 <controlMotor2+0x14>
		_speed = 250;
 8000c9a:	23fa      	movs	r3, #250	; 0xfa
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	e010      	b.n	8000cc2 <controlMotor2+0x36>
	else if(_speed<-250)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000ca6:	da03      	bge.n	8000cb0 <controlMotor2+0x24>
		_speed = -250;
 8000ca8:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	e008      	b.n	8000cc2 <controlMotor2+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	dc05      	bgt.n	8000cc2 <controlMotor2+0x36>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f113 0f02 	cmn.w	r3, #2
 8000cbc:	db01      	blt.n	8000cc2 <controlMotor2+0x36>
		_speed = 3;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bfb8      	it	lt
 8000cc8:	425b      	neglt	r3, r3
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <controlMotor2+0x74>)
 8000cce:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db07      	blt.n	8000ce6 <controlMotor2+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <controlMotor2+0x74>)
 8000cd8:	7a1b      	ldrb	r3, [r3, #8]
 8000cda:	f023 0302 	bic.w	r3, r3, #2
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <controlMotor2+0x74>)
 8000ce2:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 8000ce4:	e006      	b.n	8000cf4 <controlMotor2+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <controlMotor2+0x74>)
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <controlMotor2+0x74>)
 8000cf2:	721a      	strb	r2, [r3, #8]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	24000014 	.word	0x24000014

08000d04 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2bfa      	cmp	r3, #250	; 0xfa
 8000d10:	dd02      	ble.n	8000d18 <controlMotor3+0x14>
		_speed = 250;
 8000d12:	23fa      	movs	r3, #250	; 0xfa
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e010      	b.n	8000d3a <controlMotor3+0x36>
	else if(_speed<-250)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000d1e:	da03      	bge.n	8000d28 <controlMotor3+0x24>
		_speed = -250;
 8000d20:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	e008      	b.n	8000d3a <controlMotor3+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dc05      	bgt.n	8000d3a <controlMotor3+0x36>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f113 0f02 	cmn.w	r3, #2
 8000d34:	db01      	blt.n	8000d3a <controlMotor3+0x36>
		_speed = 3;
 8000d36:	2303      	movs	r3, #3
 8000d38:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bfb8      	it	lt
 8000d40:	425b      	neglt	r3, r3
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <controlMotor3+0x74>)
 8000d46:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db07      	blt.n	8000d5e <controlMotor3+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <controlMotor3+0x74>)
 8000d50:	7a1b      	ldrb	r3, [r3, #8]
 8000d52:	f023 0304 	bic.w	r3, r3, #4
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <controlMotor3+0x74>)
 8000d5a:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 8000d5c:	e006      	b.n	8000d6c <controlMotor3+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <controlMotor3+0x74>)
 8000d60:	7a1b      	ldrb	r3, [r3, #8]
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <controlMotor3+0x74>)
 8000d6a:	721a      	strb	r2, [r3, #8]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	24000014 	.word	0x24000014

08000d7c <controlMotor4>:
void controlMotor4(int _speed)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2bfa      	cmp	r3, #250	; 0xfa
 8000d88:	dd02      	ble.n	8000d90 <controlMotor4+0x14>
		_speed = 250;
 8000d8a:	23fa      	movs	r3, #250	; 0xfa
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	e010      	b.n	8000db2 <controlMotor4+0x36>
	else if(_speed<-250)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000d96:	da03      	bge.n	8000da0 <controlMotor4+0x24>
		_speed = -250;
 8000d98:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	e008      	b.n	8000db2 <controlMotor4+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	dc05      	bgt.n	8000db2 <controlMotor4+0x36>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f113 0f02 	cmn.w	r3, #2
 8000dac:	db01      	blt.n	8000db2 <controlMotor4+0x36>
		_speed = 3;
 8000dae:	2303      	movs	r3, #3
 8000db0:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bfb8      	it	lt
 8000db8:	425b      	neglt	r3, r3
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <controlMotor4+0x74>)
 8000dbe:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db07      	blt.n	8000dd6 <controlMotor4+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <controlMotor4+0x74>)
 8000dc8:	7a1b      	ldrb	r3, [r3, #8]
 8000dca:	f023 0308 	bic.w	r3, r3, #8
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <controlMotor4+0x74>)
 8000dd2:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 8000dd4:	e006      	b.n	8000de4 <controlMotor4+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <controlMotor4+0x74>)
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <controlMotor4+0x74>)
 8000de2:	721a      	strb	r2, [r3, #8]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	24000014 	.word	0x24000014
 8000df4:	00000000 	.word	0x00000000

08000df8 <PIDyaw>:
  }
}
#endif

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <PIDyaw+0x120>)
 8000e12:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8000e14:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <PIDyaw+0x120>)
 8000e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <PIDyaw+0x124>)
 8000e24:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000e28:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <PIDyaw+0x120>)
 8000e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <PIDyaw+0x128>)
 8000e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e40:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <PIDyaw+0x12c>)
 8000e42:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <PIDyaw+0x120>)
 8000e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e54:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <PIDyaw+0x130>)
 8000e56:	ed93 7b00 	vldr	d7, [r3]
 8000e5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <PIDyaw+0x130>)
 8000e60:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 8000e64:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <PIDyaw+0x134>)
 8000e66:	ed93 6b00 	vldr	d6, [r3]
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <PIDyaw+0x124>)
 8000e6c:	ed93 7b00 	vldr	d7, [r3]
 8000e70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <PIDyaw+0x138>)
 8000e76:	ed93 5b00 	vldr	d5, [r3]
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <PIDyaw+0x12c>)
 8000e7c:	ed93 7b00 	vldr	d7, [r3]
 8000e80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <PIDyaw+0x13c>)
 8000e8a:	ed93 5b00 	vldr	d5, [r3]
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <PIDyaw+0x130>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <PIDyaw+0x140>)
 8000e9e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <PIDyaw+0x140>)
 8000ea4:	ed93 7b00 	vldr	d7, [r3]
 8000ea8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000f08 <PIDyaw+0x110>
 8000eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	dd05      	ble.n	8000ec2 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000eb6:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <PIDyaw+0x140>)
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	4c1f      	ldr	r4, [pc, #124]	; (8000f3c <PIDyaw+0x144>)
 8000ebe:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <PIDyaw+0x140>)
 8000ec4:	ed93 7b00 	vldr	d7, [r3]
 8000ec8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000f10 <PIDyaw+0x118>
 8000ecc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	d505      	bpl.n	8000ee2 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <PIDyaw+0x140>)
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	4c18      	ldr	r4, [pc, #96]	; (8000f40 <PIDyaw+0x148>)
 8000ede:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <PIDyaw+0x120>)
 8000ee4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <PIDyaw+0x128>)
 8000eea:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <PIDyaw+0x140>)
 8000eee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ef2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ef6:	eeb0 0b47 	vmov.f64	d0, d7
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc90      	pop	{r4, r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	405e0000 	.word	0x405e0000
 8000f10:	00000000 	.word	0x00000000
 8000f14:	c05e0000 	.word	0xc05e0000
 8000f18:	24000900 	.word	0x24000900
 8000f1c:	24000920 	.word	0x24000920
 8000f20:	24000370 	.word	0x24000370
 8000f24:	240001f8 	.word	0x240001f8
 8000f28:	240008f8 	.word	0x240008f8
 8000f2c:	24000028 	.word	0x24000028
 8000f30:	24000030 	.word	0x24000030
 8000f34:	24000038 	.word	0x24000038
 8000f38:	24000c00 	.word	0x24000c00
 8000f3c:	405e0000 	.word	0x405e0000
 8000f40:	c05e0000 	.word	0xc05e0000

08000f44 <PIDroR>:

double PIDroR(int _roRValue, int _roRSetpoint)
{
 8000f44:	b490      	push	{r4, r7}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	roRError = _roRSetpoint - _roRValue;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b44      	ldr	r3, [pc, #272]	; (8001070 <PIDroR+0x12c>)
 8000f5e:	801a      	strh	r2, [r3, #0]
	roRP = roRError;
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <PIDroR+0x12c>)
 8000f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <PIDroR+0x130>)
 8000f70:	ed83 7b00 	vstr	d7, [r3]
	roRD = roRError - roRPreError;
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <PIDroR+0x12c>)
 8000f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <PIDroR+0x134>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <PIDroR+0x138>)
 8000f8e:	ed83 7b00 	vstr	d7, [r3]
	roRI = roRError + roRI;
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <PIDroR+0x12c>)
 8000f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <PIDroR+0x13c>)
 8000fa2:	ed93 7b00 	vldr	d7, [r3]
 8000fa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000faa:	4b35      	ldr	r3, [pc, #212]	; (8001080 <PIDroR+0x13c>)
 8000fac:	ed83 7b00 	vstr	d7, [r3]
	roRPID = roRKp*roRP + roRKd*roRD + roRKi*roRI;
 8000fb0:	4b34      	ldr	r3, [pc, #208]	; (8001084 <PIDroR+0x140>)
 8000fb2:	ed93 6b00 	vldr	d6, [r3]
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <PIDroR+0x130>)
 8000fb8:	ed93 7b00 	vldr	d7, [r3]
 8000fbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <PIDroR+0x144>)
 8000fc2:	ed93 5b00 	vldr	d5, [r3]
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <PIDroR+0x138>)
 8000fc8:	ed93 7b00 	vldr	d7, [r3]
 8000fcc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <PIDroR+0x148>)
 8000fd6:	ed93 5b00 	vldr	d5, [r3]
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <PIDroR+0x13c>)
 8000fdc:	ed93 7b00 	vldr	d7, [r3]
 8000fe0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <PIDroR+0x14c>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
	if(roRPID > MAX_ROR_PID)
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <PIDroR+0x150>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <PIDroR+0x14c>)
 8000ffc:	ed93 7b00 	vldr	d7, [r3]
 8001000:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	d508      	bpl.n	800101c <PIDroR+0xd8>
	{
		roRPID = MAX_ROR_PID;
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <PIDroR+0x150>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <PIDroR+0x14c>)
 8001018:	ed83 7b00 	vstr	d7, [r3]
	}
	if(roRPID < MIN_ROR_PID)
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <PIDroR+0x150>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	425b      	negs	r3, r3
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <PIDroR+0x14c>)
 800102c:	ed93 7b00 	vldr	d7, [r3]
 8001030:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	dd09      	ble.n	800104e <PIDroR+0x10a>
	{
		roRPID = MIN_ROR_PID;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <PIDroR+0x150>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	425b      	negs	r3, r3
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <PIDroR+0x14c>)
 800104a:	ed83 7b00 	vstr	d7, [r3]
	}
	roRPreError = roRError;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <PIDroR+0x12c>)
 8001050:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <PIDroR+0x134>)
 8001056:	801a      	strh	r2, [r3, #0]
	return roRPID;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <PIDroR+0x14c>)
 800105a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800105e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001062:	eeb0 0b47 	vmov.f64	d0, d7
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bc90      	pop	{r4, r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	24000d70 	.word	0x24000d70
 8001074:	24000ae8 	.word	0x24000ae8
 8001078:	240001f0 	.word	0x240001f0
 800107c:	24000d58 	.word	0x24000d58
 8001080:	24000850 	.word	0x24000850
 8001084:	24000048 	.word	0x24000048
 8001088:	24000cc0 	.word	0x24000cc0
 800108c:	24000050 	.word	0x24000050
 8001090:	24000418 	.word	0x24000418
 8001094:	24000040 	.word	0x24000040

08001098 <PIDpit>:
	roLPreError = roLError;
	return roLPID;
}

double PIDpit(int _pitValue, int _pitSetpoint)
{
 8001098:	b490      	push	{r4, r7}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	pitError = _pitSetpoint - _pitValue;
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <PIDpit+0x118>)
 80010b2:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 80010b6:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <PIDpit+0x118>)
 80010b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010bc:	4a3d      	ldr	r2, [pc, #244]	; (80011b4 <PIDpit+0x11c>)
 80010be:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <PIDpit+0x118>)
 80010c4:	ed93 6b00 	vldr	d6, [r3]
 80010c8:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <PIDpit+0x120>)
 80010ca:	ed93 7b00 	vldr	d7, [r3]
 80010ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <PIDpit+0x124>)
 80010d4:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <PIDpit+0x118>)
 80010da:	ed93 6b00 	vldr	d6, [r3]
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <PIDpit+0x128>)
 80010e0:	ed93 7b00 	vldr	d7, [r3]
 80010e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <PIDpit+0x128>)
 80010ea:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <PIDpit+0x12c>)
 80010f0:	ed93 6b00 	vldr	d6, [r3]
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <PIDpit+0x11c>)
 80010f6:	ed93 7b00 	vldr	d7, [r3]
 80010fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <PIDpit+0x130>)
 8001100:	ed93 5b00 	vldr	d5, [r3]
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <PIDpit+0x124>)
 8001106:	ed93 7b00 	vldr	d7, [r3]
 800110a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800110e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <PIDpit+0x134>)
 8001114:	ed93 5b00 	vldr	d5, [r3]
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <PIDpit+0x128>)
 800111a:	ed93 7b00 	vldr	d7, [r3]
 800111e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001122:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <PIDpit+0x138>)
 8001128:	ed83 7b00 	vstr	d7, [r3]
	if(pitPID > MAX_PIT_PID)
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <PIDpit+0x13c>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <PIDpit+0x138>)
 800113a:	ed93 7b00 	vldr	d7, [r3]
 800113e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d508      	bpl.n	800115a <PIDpit+0xc2>
	{
		pitPID = MAX_PIT_PID;
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <PIDpit+0x13c>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <PIDpit+0x138>)
 8001156:	ed83 7b00 	vstr	d7, [r3]
	}
	if(pitPID < MIN_PIT_PID)
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <PIDpit+0x13c>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	425b      	negs	r3, r3
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <PIDpit+0x138>)
 800116a:	ed93 7b00 	vldr	d7, [r3]
 800116e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001176:	dd09      	ble.n	800118c <PIDpit+0xf4>
	{
		pitPID = MIN_PIT_PID;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <PIDpit+0x13c>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	425b      	negs	r3, r3
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <PIDpit+0x138>)
 8001188:	ed83 7b00 	vstr	d7, [r3]
	}
	pitPreError = pitError;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <PIDpit+0x118>)
 800118e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <PIDpit+0x120>)
 8001194:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <PIDpit+0x138>)
 800119a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800119e:	ec44 3b17 	vmov	d7, r3, r4
}
 80011a2:	eeb0 0b47 	vmov.f64	d0, d7
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc90      	pop	{r4, r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	24000420 	.word	0x24000420
 80011b4:	24000ad0 	.word	0x24000ad0
 80011b8:	240001e8 	.word	0x240001e8
 80011bc:	240002d8 	.word	0x240002d8
 80011c0:	24000938 	.word	0x24000938
 80011c4:	24000060 	.word	0x24000060
 80011c8:	24000428 	.word	0x24000428
 80011cc:	24000068 	.word	0x24000068
 80011d0:	24000bc0 	.word	0x24000bc0
 80011d4:	2400005a 	.word	0x2400005a

080011d8 <roR_pit_yaw_mixSpeed>:
	controlMotor4(_motor4Speed);
	spinalCordTrans();
}

void roR_pit_yaw_mixSpeed(void)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	ed2d 8b02 	vpush	{d8}
 80011de:	b08d      	sub	sp, #52	; 0x34
 80011e0:	af00      	add	r7, sp, #0
	double _roR_pit_speed = sqrt(roRPID*roRPID + pitPID*pitPID);
 80011e2:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <roR_pit_yaw_mixSpeed+0x1e0>)
 80011e4:	ed93 6b00 	vldr	d6, [r3]
 80011e8:	4b73      	ldr	r3, [pc, #460]	; (80013b8 <roR_pit_yaw_mixSpeed+0x1e0>)
 80011ea:	ed93 7b00 	vldr	d7, [r3]
 80011ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011f2:	4b72      	ldr	r3, [pc, #456]	; (80013bc <roR_pit_yaw_mixSpeed+0x1e4>)
 80011f4:	ed93 5b00 	vldr	d5, [r3]
 80011f8:	4b70      	ldr	r3, [pc, #448]	; (80013bc <roR_pit_yaw_mixSpeed+0x1e4>)
 80011fa:	ed93 7b00 	vldr	d7, [r3]
 80011fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001202:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001206:	eeb0 0b47 	vmov.f64	d0, d7
 800120a:	f00f f915 	bl	8010438 <sqrt>
 800120e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roR_pit_dir = atan2(-roRPID, pitPID);
 8001212:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <roR_pit_yaw_mixSpeed+0x1e0>)
 8001214:	ed93 7b00 	vldr	d7, [r3]
 8001218:	eeb1 7b47 	vneg.f64	d7, d7
 800121c:	4b67      	ldr	r3, [pc, #412]	; (80013bc <roR_pit_yaw_mixSpeed+0x1e4>)
 800121e:	ed93 6b00 	vldr	d6, [r3]
 8001222:	eeb0 1b46 	vmov.f64	d1, d6
 8001226:	eeb0 0b47 	vmov.f64	d0, d7
 800122a:	f00f f901 	bl	8010430 <atan2>
 800122e:	ed87 0b08 	vstr	d0, [r7, #32]
//	double _motor1Speed = yawPID + -(_roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0);
//	double _motor2Speed = yawPID + -(_roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0);
//	double _motor3Speed = yawPID +   _roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0;
//	double _motor4Speed = yawPID +   _roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0;

	double _motor1Speed = yawPID*factorYawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 - _roR_pit_dir) + 0.0);
 8001232:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <roR_pit_yaw_mixSpeed+0x1e8>)
 8001234:	ed93 6b00 	vldr	d6, [r3]
 8001238:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <roR_pit_yaw_mixSpeed+0x1ec>)
 800123a:	ed93 7b00 	vldr	d7, [r3]
 800123e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001242:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80013a0 <roR_pit_yaw_mixSpeed+0x1c8>
 8001246:	ed97 7b08 	vldr	d7, [r7, #32]
 800124a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800124e:	eeb0 0b47 	vmov.f64	d0, d7
 8001252:	f00f f8b1 	bl	80103b8 <cos>
 8001256:	eeb0 6b40 	vmov.f64	d6, d0
 800125a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800125e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001262:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80013a8 <roR_pit_yaw_mixSpeed+0x1d0>
 8001266:	ee37 7b06 	vadd.f64	d7, d7, d6
 800126a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800126e:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID*factorYawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 + _roR_pit_dir) - 0.0);
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <roR_pit_yaw_mixSpeed+0x1e8>)
 8001274:	ed93 6b00 	vldr	d6, [r3]
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <roR_pit_yaw_mixSpeed+0x1ec>)
 800127a:	ed93 7b00 	vldr	d7, [r3]
 800127e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001282:	ed97 7b08 	vldr	d7, [r7, #32]
 8001286:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80013a0 <roR_pit_yaw_mixSpeed+0x1c8>
 800128a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800128e:	eeb0 0b47 	vmov.f64	d0, d7
 8001292:	f00f f891 	bl	80103b8 <cos>
 8001296:	eeb0 6b40 	vmov.f64	d6, d0
 800129a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800129e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80012a6:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID*factorYawPID +  _roR_pit_speed *cos(    M_PI/4.0 + _roR_pit_dir) + 0.0;
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <roR_pit_yaw_mixSpeed+0x1e8>)
 80012ac:	ed93 6b00 	vldr	d6, [r3]
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <roR_pit_yaw_mixSpeed+0x1ec>)
 80012b2:	ed93 7b00 	vldr	d7, [r3]
 80012b6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80012ba:	ed97 7b08 	vldr	d7, [r7, #32]
 80012be:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80013b0 <roR_pit_yaw_mixSpeed+0x1d8>
 80012c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012c6:	eeb0 0b47 	vmov.f64	d0, d7
 80012ca:	f00f f875 	bl	80103b8 <cos>
 80012ce:	eeb0 6b40 	vmov.f64	d6, d0
 80012d2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80012d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012da:	ee38 7b07 	vadd.f64	d7, d8, d7
 80012de:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80013a8 <roR_pit_yaw_mixSpeed+0x1d0>
 80012e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012e6:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID*factorYawPID +  _roR_pit_speed *cos(    M_PI/4.0 - _roR_pit_dir) - 0.0;
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <roR_pit_yaw_mixSpeed+0x1e8>)
 80012ec:	ed93 6b00 	vldr	d6, [r3]
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <roR_pit_yaw_mixSpeed+0x1ec>)
 80012f2:	ed93 7b00 	vldr	d7, [r3]
 80012f6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80012fa:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80013b0 <roR_pit_yaw_mixSpeed+0x1d8>
 80012fe:	ed97 7b08 	vldr	d7, [r7, #32]
 8001302:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001306:	eeb0 0b47 	vmov.f64	d0, d7
 800130a:	f00f f855 	bl	80103b8 <cos>
 800130e:	eeb0 6b40 	vmov.f64	d6, d0
 8001312:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001316:	ee26 7b07 	vmul.f64	d7, d6, d7
 800131a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800131e:	ed87 7b00 	vstr	d7, [r7]
//	b = 1.0 - _motor3Speed;
//	absSpeed = _roR_pit_speed;
//	dir = _roR_pit_dir;
//	cos_ = cos(3*M_PI/4 - _roR_pit_dir);
//	motor1_debug = absSpeed*cos_;
	motor1Speed_ = _motor1Speed;
 8001322:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <roR_pit_yaw_mixSpeed+0x1f0>)
 8001324:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001328:	e9c2 3400 	strd	r3, r4, [r2]
	motor2Speed_ = _motor2Speed;
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <roR_pit_yaw_mixSpeed+0x1f4>)
 800132e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001332:	e9c2 3400 	strd	r3, r4, [r2]
	motor3Speed_ = _motor3Speed;
 8001336:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <roR_pit_yaw_mixSpeed+0x1f8>)
 8001338:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800133c:	e9c2 3400 	strd	r3, r4, [r2]
	motor4Speed_ = _motor4Speed;
 8001340:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <roR_pit_yaw_mixSpeed+0x1fc>)
 8001342:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001346:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 800134a:	ed97 7b06 	vldr	d7, [r7, #24]
 800134e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001352:	ee17 0a90 	vmov	r0, s15
 8001356:	f7ff fc5d 	bl	8000c14 <controlMotor1>
	controlMotor2(_motor2Speed);
 800135a:	ed97 7b04 	vldr	d7, [r7, #16]
 800135e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001362:	ee17 0a90 	vmov	r0, s15
 8001366:	f7ff fc91 	bl	8000c8c <controlMotor2>
	controlMotor3(_motor3Speed);
 800136a:	ed97 7b02 	vldr	d7, [r7, #8]
 800136e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001372:	ee17 0a90 	vmov	r0, s15
 8001376:	f7ff fcc5 	bl	8000d04 <controlMotor3>
	controlMotor4(_motor4Speed);
 800137a:	ed97 7b00 	vldr	d7, [r7]
 800137e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001382:	ee17 0a90 	vmov	r0, s15
 8001386:	f7ff fcf9 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 800138a:	f7ff fac3 	bl	8000914 <spinalCordTrans>
}
 800138e:	bf00      	nop
 8001390:	3734      	adds	r7, #52	; 0x34
 8001392:	46bd      	mov	sp, r7
 8001394:	ecbd 8b02 	vpop	{d8}
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	7f3321d2 	.word	0x7f3321d2
 80013a4:	4002d97c 	.word	0x4002d97c
	...
 80013b0:	54442d18 	.word	0x54442d18
 80013b4:	3fe921fb 	.word	0x3fe921fb
 80013b8:	24000418 	.word	0x24000418
 80013bc:	24000bc0 	.word	0x24000bc0
 80013c0:	24000c00 	.word	0x24000c00
 80013c4:	24000078 	.word	0x24000078
 80013c8:	240001e0 	.word	0x240001e0
 80013cc:	24000cd0 	.word	0x24000cd0
 80013d0:	24000bc8 	.word	0x24000bc8
 80013d4:	24000908 	.word	0x24000908

080013d8 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 80013dc:	2003      	movs	r0, #3
 80013de:	f7ff fc19 	bl	8000c14 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 80013e2:	f06f 0002 	mvn.w	r0, #2
 80013e6:	f7ff fc51 	bl	8000c8c <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 80013ea:	2003      	movs	r0, #3
 80013ec:	f7ff fc8a 	bl	8000d04 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 80013f0:	f06f 0002 	mvn.w	r0, #2
 80013f4:	f7ff fcc2 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 80013f8:	f7ff fa8c 	bl	8000914 <spinalCordTrans>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <roR_Pit_Yaw_GoTo>:
	roL_pit_yaw_mixSpeed();
}


void roR_Pit_Yaw_GoTo(uint32_t posRoR, uint32_t posPit, uint32_t posYaw)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
	PIDyaw(compassData, posYaw);
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <roR_Pit_Yaw_GoTo+0x58>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f7ff fced 	bl	8000df8 <PIDyaw>
	PIDroR(rigtDistance, posRoR);
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <roR_Pit_Yaw_GoTo+0x5c>)
 8001420:	ed93 7b00 	vldr	d7, [r3]
 8001424:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4619      	mov	r1, r3
 800142c:	ee17 0a90 	vmov	r0, s15
 8001430:	f7ff fd88 	bl	8000f44 <PIDroR>
	PIDpit(pitchDistance, posPit);
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <roR_Pit_Yaw_GoTo+0x60>)
 8001436:	ed93 7b00 	vldr	d7, [r3]
 800143a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4619      	mov	r1, r3
 8001442:	ee17 0a90 	vmov	r0, s15
 8001446:	f7ff fe27 	bl	8001098 <PIDpit>
	roR_pit_yaw_mixSpeed();
 800144a:	f7ff fec5 	bl	80011d8 <roR_pit_yaw_mixSpeed>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	24000918 	.word	0x24000918
 800145c:	24000958 	.word	0x24000958
 8001460:	24000ce8 	.word	0x24000ce8

08001464 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <positionControl_Init+0x18>)
 800146a:	f00a fc79 	bl	800bd60 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <positionControl_Init+0x1c>)
 8001474:	f007 fdca 	bl	800900c <HAL_GPIO_WritePin>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24000cfc 	.word	0x24000cfc
 8001480:	58021000 	.word	0x58021000

08001484 <legShoot>:
//
void legShoot()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 800148a:	2032      	movs	r0, #50	; 0x32
 800148c:	f003 fb10 	bl	8004ab0 <HAL_Delay>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);	//enable legEn Pin
 8001490:	2200      	movs	r2, #0
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	4818      	ldr	r0, [pc, #96]	; (80014f8 <legShoot+0x74>)
 8001496:	f007 fdb9 	bl	800900c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a0:	4816      	ldr	r0, [pc, #88]	; (80014fc <legShoot+0x78>)
 80014a2:	f007 fdb3 	bl	800900c <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 80014a6:	2032      	movs	r0, #50	; 0x32
 80014a8:	f003 fb02 	bl	8004ab0 <HAL_Delay>
	  for(int i = 0; i < LEG_PUL_SHOOT; ++i)
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	e019      	b.n	80014e6 <legShoot+0x62>
	  {
		  HAL_GPIO_WritePin(legPul_GPIO_Port, legPul_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b8:	4810      	ldr	r0, [pc, #64]	; (80014fc <legShoot+0x78>)
 80014ba:	f007 fda7 	bl	800900c <HAL_GPIO_WritePin>
		  delayUs(LEG_DELAYUS_SHOOT);
 80014be:	2064      	movs	r0, #100	; 0x64
 80014c0:	f7ff f8fe 	bl	80006c0 <delayUs>
		  HAL_GPIO_WritePin(legPul_GPIO_Port, legPul_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <legShoot+0x78>)
 80014cc:	f007 fd9e 	bl	800900c <HAL_GPIO_WritePin>
		  delayUs(LEG_DELAYUS_SHOOT);
 80014d0:	2064      	movs	r0, #100	; 0x64
 80014d2:	f7ff f8f5 	bl	80006c0 <delayUs>
		  trackingLegShoot++;
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <legShoot+0x7c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <legShoot+0x7c>)
 80014de:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < LEG_PUL_SHOOT; ++i)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3301      	adds	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f640 2227 	movw	r2, #2599	; 0xa27
 80014ec:	4293      	cmp	r3, r2
 80014ee:	dde0      	ble.n	80014b2 <legShoot+0x2e>
	  }
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	58021000 	.word	0x58021000
 80014fc:	58020c00 	.word	0x58020c00
 8001500:	24000964 	.word	0x24000964

08001504 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d16e      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d16a      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d11e      	bne.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800152e:	4837      	ldr	r0, [pc, #220]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001530:	f007 fd6c 	bl	800900c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001538:	4834      	ldr	r0, [pc, #208]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800153a:	f007 fd80 	bl	800903e <HAL_GPIO_TogglePin>
				trackingLeg++;
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a32      	ldr	r2, [pc, #200]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001546:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001550:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2bc7      	cmp	r3, #199	; 0xc7
 8001558:	dd05      	ble.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d11f      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001574:	4825      	ldr	r0, [pc, #148]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001576:	f007 fd49 	bl	800900c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 800157a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157e:	4823      	ldr	r0, [pc, #140]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001580:	f007 fd5d 	bl	800903e <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	4a21      	ldr	r2, [pc, #132]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800158c:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001596:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80015a0:	db05      	blt.n	80015ae <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d11f      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015be:	f007 fd25 	bl	800900c <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80015c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80015c8:	f007 fd39 	bl	800903e <HAL_GPIO_TogglePin>
				trackingLeg++;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015d4:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015de:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80015e8:	db05      	blt.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000cfc 	.word	0x24000cfc
 8001604:	24000b98 	.word	0x24000b98
 8001608:	24000ca8 	.word	0x24000ca8
 800160c:	58020c00 	.word	0x58020c00
 8001610:	24000b88 	.word	0x24000b88
 8001614:	24000bec 	.word	0x24000bec

08001618 <GetSector>:
void solveDT50_Left(uint16_t a1, uint16_t a2);
void solveDT50_Rigt(uint16_t a1, uint16_t a2);
void solveDT50_Pitch(uint16_t a1, uint16_t a2);

uint32_t GetSector(uint32_t Address)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]

  if(((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a50      	ldr	r2, [pc, #320]	; (8001768 <GetSector+0x150>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d803      	bhi.n	8001634 <GetSector+0x1c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001632:	d207      	bcs.n	8001644 <GetSector+0x2c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a4d      	ldr	r2, [pc, #308]	; (800176c <GetSector+0x154>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d806      	bhi.n	800164a <GetSector+0x32>
     ((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001642:	d302      	bcc.n	800164a <GetSector+0x32>
  {
    sector = FLASH_SECTOR_0;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e086      	b.n	8001758 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a48      	ldr	r2, [pc, #288]	; (8001770 <GetSector+0x158>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d803      	bhi.n	800165a <GetSector+0x42>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a44      	ldr	r2, [pc, #272]	; (8001768 <GetSector+0x150>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d807      	bhi.n	800166a <GetSector+0x52>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a45      	ldr	r2, [pc, #276]	; (8001774 <GetSector+0x15c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d806      	bhi.n	8001670 <GetSector+0x58>
          ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a41      	ldr	r2, [pc, #260]	; (800176c <GetSector+0x154>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d902      	bls.n	8001670 <GetSector+0x58>
  {
    sector = FLASH_SECTOR_1;
 800166a:	2301      	movs	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e073      	b.n	8001758 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a41      	ldr	r2, [pc, #260]	; (8001778 <GetSector+0x160>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d803      	bhi.n	8001680 <GetSector+0x68>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <GetSector+0x158>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d807      	bhi.n	8001690 <GetSector+0x78>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a3e      	ldr	r2, [pc, #248]	; (800177c <GetSector+0x164>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d806      	bhi.n	8001696 <GetSector+0x7e>
          ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3a      	ldr	r2, [pc, #232]	; (8001774 <GetSector+0x15c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d902      	bls.n	8001696 <GetSector+0x7e>
  {
    sector = FLASH_SECTOR_2;
 8001690:	2302      	movs	r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e060      	b.n	8001758 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a39      	ldr	r2, [pc, #228]	; (8001780 <GetSector+0x168>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d803      	bhi.n	80016a6 <GetSector+0x8e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a35      	ldr	r2, [pc, #212]	; (8001778 <GetSector+0x160>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d807      	bhi.n	80016b6 <GetSector+0x9e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a36      	ldr	r2, [pc, #216]	; (8001784 <GetSector+0x16c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d806      	bhi.n	80016bc <GetSector+0xa4>
          ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <GetSector+0x164>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d902      	bls.n	80016bc <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
 80016b6:	2303      	movs	r3, #3
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e04d      	b.n	8001758 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <GetSector+0x170>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d803      	bhi.n	80016cc <GetSector+0xb4>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a2e      	ldr	r2, [pc, #184]	; (8001780 <GetSector+0x168>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d807      	bhi.n	80016dc <GetSector+0xc4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a2f      	ldr	r2, [pc, #188]	; (800178c <GetSector+0x174>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d806      	bhi.n	80016e2 <GetSector+0xca>
          ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a2b      	ldr	r2, [pc, #172]	; (8001784 <GetSector+0x16c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d902      	bls.n	80016e2 <GetSector+0xca>
  {
    sector = FLASH_SECTOR_4;
 80016dc:	2304      	movs	r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e03a      	b.n	8001758 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <GetSector+0x178>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d803      	bhi.n	80016f2 <GetSector+0xda>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a26      	ldr	r2, [pc, #152]	; (8001788 <GetSector+0x170>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d807      	bhi.n	8001702 <GetSector+0xea>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a27      	ldr	r2, [pc, #156]	; (8001794 <GetSector+0x17c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d806      	bhi.n	8001708 <GetSector+0xf0>
          ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a23      	ldr	r2, [pc, #140]	; (800178c <GetSector+0x174>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d902      	bls.n	8001708 <GetSector+0xf0>
  {
    sector = FLASH_SECTOR_5;
 8001702:	2305      	movs	r3, #5
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e027      	b.n	8001758 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a23      	ldr	r2, [pc, #140]	; (8001798 <GetSector+0x180>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d803      	bhi.n	8001718 <GetSector+0x100>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <GetSector+0x178>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d807      	bhi.n	8001728 <GetSector+0x110>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a20      	ldr	r2, [pc, #128]	; (800179c <GetSector+0x184>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d806      	bhi.n	800172e <GetSector+0x116>
          ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <GetSector+0x17c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d902      	bls.n	800172e <GetSector+0x116>
  {
    sector = FLASH_SECTOR_6;
 8001728:	2306      	movs	r3, #6
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e014      	b.n	8001758 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001734:	d203      	bcs.n	800173e <GetSector+0x126>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <GetSector+0x180>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d807      	bhi.n	800174e <GetSector+0x136>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <GetSector+0x188>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d806      	bhi.n	8001754 <GetSector+0x13c>
          ((Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <GetSector+0x184>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d902      	bls.n	8001754 <GetSector+0x13c>
  {
     sector = FLASH_SECTOR_7;
 800174e:	2307      	movs	r3, #7
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	e001      	b.n	8001758 <GetSector+0x140>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 8001754:	2307      	movs	r3, #7
 8001756:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8001758:	68fb      	ldr	r3, [r7, #12]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	0801ffff 	.word	0x0801ffff
 800176c:	0811ffff 	.word	0x0811ffff
 8001770:	0803ffff 	.word	0x0803ffff
 8001774:	0813ffff 	.word	0x0813ffff
 8001778:	0805ffff 	.word	0x0805ffff
 800177c:	0815ffff 	.word	0x0815ffff
 8001780:	0807ffff 	.word	0x0807ffff
 8001784:	0817ffff 	.word	0x0817ffff
 8001788:	0809ffff 	.word	0x0809ffff
 800178c:	0819ffff 	.word	0x0819ffff
 8001790:	080bffff 	.word	0x080bffff
 8001794:	081bffff 	.word	0x081bffff
 8001798:	080dffff 	.word	0x080dffff
 800179c:	081dffff 	.word	0x081dffff
 80017a0:	081ffffe 	.word	0x081ffffe

080017a4 <writeFLASH>:

void writeFLASH()
{
 80017a4:	b598      	push	{r3, r4, r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	FlashWord[0] = (adcLeft_2000<<0)|(adcLeft_1000<<16);
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <writeFLASH+0x108>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <writeFLASH+0x10c>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	4313      	orrs	r3, r2
 80017b6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017ba:	4a3e      	ldr	r2, [pc, #248]	; (80018b4 <writeFLASH+0x110>)
 80017bc:	e9c2 3400 	strd	r3, r4, [r2]
	FlashWord[1] = (adcPitc_2000<<0)|(adcPitc_1000<<16);
 80017c0:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <writeFLASH+0x114>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <writeFLASH+0x118>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	4313      	orrs	r3, r2
 80017ce:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017d2:	4a38      	ldr	r2, [pc, #224]	; (80018b4 <writeFLASH+0x110>)
 80017d4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	FlashWord[2] = (adcRigt_2000<<0)|(adcRigt_1000<<16);
 80017d8:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <writeFLASH+0x11c>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <writeFLASH+0x120>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	041b      	lsls	r3, r3, #16
 80017e4:	4313      	orrs	r3, r2
 80017e6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017ea:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <writeFLASH+0x110>)
 80017ec:	e9c2 3404 	strd	r3, r4, [r2, #16]
	FlashWord[3] = 0xFFFFFFFF;
 80017f0:	4a30      	ldr	r2, [pc, #192]	; (80018b4 <writeFLASH+0x110>)
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	f04f 0400 	mov.w	r4, #0
 80017fa:	e9c2 3406 	strd	r3, r4, [r2, #24]
//	FlashWord[0] = 0;
//	FlashWord[1] = 0;
//	FlashWord[2] = 0;

	HAL_FLASH_Unlock();
 80017fe:	f006 ffcb 	bl	8008798 <HAL_FLASH_Unlock>
	FirstSector = GetSector(FLASH_USER_START_ADDR);
 8001802:	4831      	ldr	r0, [pc, #196]	; (80018c8 <writeFLASH+0x124>)
 8001804:	f7ff ff08 	bl	8001618 <GetSector>
 8001808:	4602      	mov	r2, r0
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <writeFLASH+0x128>)
 800180c:	601a      	str	r2, [r3, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 800180e:	4830      	ldr	r0, [pc, #192]	; (80018d0 <writeFLASH+0x12c>)
 8001810:	f7ff ff02 	bl	8001618 <GetSector>
 8001814:	4602      	mov	r2, r0
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <writeFLASH+0x128>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	3301      	adds	r3, #1
 800181e:	4a2d      	ldr	r2, [pc, #180]	; (80018d4 <writeFLASH+0x130>)
 8001820:	6013      	str	r3, [r2, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <writeFLASH+0x134>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <writeFLASH+0x134>)
 800182a:	2220      	movs	r2, #32
 800182c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks         = FLASH_BANK_2;
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <writeFLASH+0x134>)
 8001830:	2202      	movs	r2, #2
 8001832:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector        = FirstSector;
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <writeFLASH+0x128>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <writeFLASH+0x134>)
 800183a:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <writeFLASH+0x130>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <writeFLASH+0x134>)
 8001842:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001844:	4925      	ldr	r1, [pc, #148]	; (80018dc <writeFLASH+0x138>)
 8001846:	4824      	ldr	r0, [pc, #144]	; (80018d8 <writeFLASH+0x134>)
 8001848:	f007 f8a6 	bl	8008998 <HAL_FLASHEx_Erase>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <writeFLASH+0xbe>
	  user can call function 'HAL_FLASH_GetError()'
	*/
	/* Infinite loop */
		while (1)
		{
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001852:	2102      	movs	r1, #2
 8001854:	4822      	ldr	r0, [pc, #136]	; (80018e0 <writeFLASH+0x13c>)
 8001856:	f007 fbf2 	bl	800903e <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800185a:	2064      	movs	r0, #100	; 0x64
 800185c:	f003 f928 	bl	8004ab0 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001860:	e7f7      	b.n	8001852 <writeFLASH+0xae>
		}
	}

	Address = FLASH_USER_START_ADDR;
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <writeFLASH+0x140>)
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <writeFLASH+0x124>)
 8001866:	601a      	str	r2, [r3, #0]

	while (Address < FLASH_USER_END_ADDR)
 8001868:	e017      	b.n	800189a <writeFLASH+0xf6>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)FlashWord)) == HAL_OK)
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <writeFLASH+0x140>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <writeFLASH+0x110>)
 8001870:	4619      	mov	r1, r3
 8001872:	2001      	movs	r0, #1
 8001874:	f006 ff0e 	bl	8008694 <HAL_FLASH_Program>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <writeFLASH+0xe6>
		{
			Address = Address + 32; /* increment for the next Flash word*/
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <writeFLASH+0x140>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3320      	adds	r3, #32
 8001884:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <writeFLASH+0x140>)
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e007      	b.n	800189a <writeFLASH+0xf6>
		{
		  /* Error occurred while writing data in Flash memory.
			 User can add here some code to deal with this error */
		  while (1)
		  {
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800188a:	2102      	movs	r1, #2
 800188c:	4814      	ldr	r0, [pc, #80]	; (80018e0 <writeFLASH+0x13c>)
 800188e:	f007 fbd6 	bl	800903e <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001892:	2064      	movs	r0, #100	; 0x64
 8001894:	f003 f90c 	bl	8004ab0 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001898:	e7f7      	b.n	800188a <writeFLASH+0xe6>
	while (Address < FLASH_USER_END_ADDR)
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <writeFLASH+0x140>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <writeFLASH+0x144>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d9e2      	bls.n	800186a <writeFLASH+0xc6>
		  }
		}
	}
	HAL_FLASH_Lock();
 80018a4:	f006 ffb2 	bl	800880c <HAL_FLASH_Lock>
}
 80018a8:	bf00      	nop
 80018aa:	bd98      	pop	{r3, r4, r7, pc}
 80018ac:	24000082 	.word	0x24000082
 80018b0:	24000080 	.word	0x24000080
 80018b4:	240002a8 	.word	0x240002a8
 80018b8:	24000086 	.word	0x24000086
 80018bc:	24000084 	.word	0x24000084
 80018c0:	2400008a 	.word	0x2400008a
 80018c4:	24000088 	.word	0x24000088
 80018c8:	081e0000 	.word	0x081e0000
 80018cc:	24000190 	.word	0x24000190
 80018d0:	081ffffe 	.word	0x081ffffe
 80018d4:	24000194 	.word	0x24000194
 80018d8:	24000940 	.word	0x24000940
 80018dc:	2400019c 	.word	0x2400019c
 80018e0:	58021000 	.word	0x58021000
 80018e4:	24000198 	.word	0x24000198
 80018e8:	081ffffd 	.word	0x081ffffd

080018ec <readFLASH>:

void readFLASH()
{
 80018ec:	b598      	push	{r3, r4, r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	Address = FLASH_USER_START_ADDR;
 80018f0:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <readFLASH+0xec>)
 80018f2:	4a3a      	ldr	r2, [pc, #232]	; (80019dc <readFLASH+0xf0>)
 80018f4:	601a      	str	r2, [r3, #0]
	MemoryProgramStatus = 0x0;
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <readFLASH+0xf4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

	DT50Left = *(uint64_t*) FLASH_USER_START_ADDR;
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <readFLASH+0xf0>)
 80018fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001902:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <readFLASH+0xf8>)
 8001904:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Left_2000 = (DT50Left>>0)&0xFFFF;
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <readFLASH+0xf8>)
 800190a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <readFLASH+0xfc>)
 8001912:	801a      	strh	r2, [r3, #0]
	DT50Left_1000 = (DT50Left>>16)&0xFFFF;
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <readFLASH+0xf8>)
 8001916:	e9d3 1200 	ldrd	r1, r2, [r3]
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	f04f 0400 	mov.w	r4, #0
 8001922:	0c0b      	lsrs	r3, r1, #16
 8001924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001928:	0c14      	lsrs	r4, r2, #16
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <readFLASH+0x100>)
 800192e:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001930:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Pitc = *(uint64_t*) (FLASH_USER_START_ADDR+8);
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <readFLASH+0x104>)
 8001936:	e9d3 3400 	ldrd	r3, r4, [r3]
 800193a:	4a2e      	ldr	r2, [pc, #184]	; (80019f4 <readFLASH+0x108>)
 800193c:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Pitc_2000 = (DT50Pitc>>0)&0xFFFF;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <readFLASH+0x108>)
 8001942:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <readFLASH+0x10c>)
 800194a:	801a      	strh	r2, [r3, #0]
	DT50Pitc_1000 = (DT50Pitc>>16)&0xFFFF;
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <readFLASH+0x108>)
 800194e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	f04f 0400 	mov.w	r4, #0
 800195a:	0c0b      	lsrs	r3, r1, #16
 800195c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001960:	0c14      	lsrs	r4, r2, #16
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <readFLASH+0x110>)
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Rigt = *(uint64_t*) (FLASH_USER_START_ADDR+16);
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <readFLASH+0x114>)
 800196e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001972:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <readFLASH+0x118>)
 8001974:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Rigt_2000 = (DT50Rigt>>0)&0xFFFF;
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <readFLASH+0x118>)
 800197a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <readFLASH+0x11c>)
 8001982:	801a      	strh	r2, [r3, #0]
	DT50Rigt_1000 = (DT50Rigt>>16)&0xFFFF;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <readFLASH+0x118>)
 8001986:	e9d3 1200 	ldrd	r1, r2, [r3]
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f04f 0400 	mov.w	r4, #0
 8001992:	0c0b      	lsrs	r3, r1, #16
 8001994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001998:	0c14      	lsrs	r4, r2, #16
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <readFLASH+0x120>)
 800199e:	801a      	strh	r2, [r3, #0]
 80019a0:	f3bf 8f4f 	dsb	sy
	__DSB();

	solveDT50_Left(DT50Left_1000, DT50Left_2000);
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <readFLASH+0x100>)
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <readFLASH+0xfc>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	4610      	mov	r0, r2
 80019b0:	f000 fa20 	bl	8001df4 <solveDT50_Left>
	solveDT50_Pitch(DT50Pitc_1000, DT50Pitc_2000);
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <readFLASH+0x110>)
 80019b6:	881a      	ldrh	r2, [r3, #0]
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <readFLASH+0x10c>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 fab4 	bl	8001f2c <solveDT50_Pitch>
	solveDT50_Rigt(DT50Rigt_1000, DT50Rigt_2000);
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <readFLASH+0x120>)
 80019c6:	881a      	ldrh	r2, [r3, #0]
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <readFLASH+0x11c>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f000 fb48 	bl	8002064 <solveDT50_Rigt>
//		MemoryProgramStatus++;
//	  }
//	  Address +=8;
//		}
//	}
}
 80019d4:	bf00      	nop
 80019d6:	bd98      	pop	{r3, r4, r7, pc}
 80019d8:	24000198 	.word	0x24000198
 80019dc:	081e0000 	.word	0x081e0000
 80019e0:	240001a0 	.word	0x240001a0
 80019e4:	240001a8 	.word	0x240001a8
 80019e8:	24000c08 	.word	0x24000c08
 80019ec:	24000b9e 	.word	0x24000b9e
 80019f0:	081e0008 	.word	0x081e0008
 80019f4:	240001b0 	.word	0x240001b0
 80019f8:	24000858 	.word	0x24000858
 80019fc:	24000ce6 	.word	0x24000ce6
 8001a00:	081e0010 	.word	0x081e0010
 8001a04:	240001b8 	.word	0x240001b8
 8001a08:	24000834 	.word	0x24000834
 8001a0c:	24000870 	.word	0x24000870

08001a10 <getSample>:
void getSample()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b096      	sub	sp, #88	; 0x58
 8001a14:	af00      	add	r7, sp, #0
	int sumADC_Left, sumADC_Pitc, sumADC_Rigt;

	//lấy mẫu left 1000
	sumADC_Left = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	657b      	str	r3, [r7, #84]	; 0x54
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001a1a:	e014      	b.n	8001a46 <getSample+0x36>
	{
		ST7920_SendString(0,4, "LEFT 1");
 8001a1c:	4aba      	ldr	r2, [pc, #744]	; (8001d08 <getSample+0x2f8>)
 8001a1e:	2104      	movs	r1, #4
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff f81f 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2102      	movs	r1, #2
 8001a2a:	48b8      	ldr	r0, [pc, #736]	; (8001d0c <getSample+0x2fc>)
 8001a2c:	f007 faee 	bl	800900c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001a30:	2064      	movs	r0, #100	; 0x64
 8001a32:	f003 f83d 	bl	8004ab0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2102      	movs	r1, #2
 8001a3a:	48b4      	ldr	r0, [pc, #720]	; (8001d0c <getSample+0x2fc>)
 8001a3c:	f007 fae6 	bl	800900c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001a40:	2064      	movs	r0, #100	; 0x64
 8001a42:	f003 f835 	bl	8004ab0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4a:	48b0      	ldr	r0, [pc, #704]	; (8001d0c <getSample+0x2fc>)
 8001a4c:	f007 fac6 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0e2      	beq.n	8001a1c <getSample+0xc>
	}
	//đã gạt phải
	for(int i = 0; i < 100; ++i)
 8001a56:	2300      	movs	r3, #0
 8001a58:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a5a:	e010      	b.n	8001a7e <getSample+0x6e>
	{
		HAL_Delay(10);
 8001a5c:	200a      	movs	r0, #10
 8001a5e:	f003 f827 	bl	8004ab0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001a62:	2201      	movs	r2, #1
 8001a64:	2102      	movs	r1, #2
 8001a66:	48a9      	ldr	r0, [pc, #676]	; (8001d0c <getSample+0x2fc>)
 8001a68:	f007 fad0 	bl	800900c <HAL_GPIO_WritePin>
		sumADC_Left += adc3Value[_left];
 8001a6c:	4ba8      	ldr	r3, [pc, #672]	; (8001d10 <getSample+0x300>)
 8001a6e:	885b      	ldrh	r3, [r3, #2]
 8001a70:	461a      	mov	r2, r3
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	4413      	add	r3, r2
 8001a76:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < 100; ++i)
 8001a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a80:	2b63      	cmp	r3, #99	; 0x63
 8001a82:	ddeb      	ble.n	8001a5c <getSample+0x4c>
	}
	adcLeft_1000 = sumADC_Left/100;
 8001a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a86:	4aa3      	ldr	r2, [pc, #652]	; (8001d14 <getSample+0x304>)
 8001a88:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8c:	1152      	asrs	r2, r2, #5
 8001a8e:	17db      	asrs	r3, r3, #31
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4ba0      	ldr	r3, [pc, #640]	; (8001d18 <getSample+0x308>)
 8001a96:	801a      	strh	r2, [r3, #0]
	char snum_left1000[5];
	sprintf(snum_left1000, "%d", adcLeft_1000);
 8001a98:	4b9f      	ldr	r3, [pc, #636]	; (8001d18 <getSample+0x308>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa2:	499e      	ldr	r1, [pc, #632]	; (8001d1c <getSample+0x30c>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00e f87f 	bl	800fba8 <siprintf>
//	itoa(adcLeft_1000, snum_left1000, 5);
	ST7920_SendString(1,0, snum_left1000);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7fe ffd6 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu left 2000
	sumADC_Left = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	657b      	str	r3, [r7, #84]	; 0x54
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001abc:	e009      	b.n	8001ad2 <getSample+0xc2>
	{
		ST7920_SendString(0,4, "LEFT 2");
 8001abe:	4a98      	ldr	r2, [pc, #608]	; (8001d20 <getSample+0x310>)
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7fe ffce 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2102      	movs	r1, #2
 8001acc:	488f      	ldr	r0, [pc, #572]	; (8001d0c <getSample+0x2fc>)
 8001ace:	f007 fa9d 	bl	800900c <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad6:	488d      	ldr	r0, [pc, #564]	; (8001d0c <getSample+0x2fc>)
 8001ad8:	f007 fa80 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d0ed      	beq.n	8001abe <getSample+0xae>
	}
	//đã gạt trái
	HAL_Delay(100);
 8001ae2:	2064      	movs	r0, #100	; 0x64
 8001ae4:	f002 ffe4 	bl	8004ab0 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	; 0x44
 8001aec:	e010      	b.n	8001b10 <getSample+0x100>
	{
		HAL_Delay(10);
 8001aee:	200a      	movs	r0, #10
 8001af0:	f002 ffde 	bl	8004ab0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2102      	movs	r1, #2
 8001af8:	4884      	ldr	r0, [pc, #528]	; (8001d0c <getSample+0x2fc>)
 8001afa:	f007 fa87 	bl	800900c <HAL_GPIO_WritePin>
		sumADC_Left += adc3Value[_left];
 8001afe:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <getSample+0x300>)
 8001b00:	885b      	ldrh	r3, [r3, #2]
 8001b02:	461a      	mov	r2, r3
 8001b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b06:	4413      	add	r3, r2
 8001b08:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < 100; ++i)
 8001b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b12:	2b63      	cmp	r3, #99	; 0x63
 8001b14:	ddeb      	ble.n	8001aee <getSample+0xde>
	}
	adcLeft_2000 = sumADC_Left/100;
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	4a7e      	ldr	r2, [pc, #504]	; (8001d14 <getSample+0x304>)
 8001b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b1e:	1152      	asrs	r2, r2, #5
 8001b20:	17db      	asrs	r3, r3, #31
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b7f      	ldr	r3, [pc, #508]	; (8001d24 <getSample+0x314>)
 8001b28:	801a      	strh	r2, [r3, #0]
	char snum_left2000[5];
	sprintf(snum_left2000, "%d", adcLeft_2000);
 8001b2a:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <getSample+0x314>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4979      	ldr	r1, [pc, #484]	; (8001d1c <getSample+0x30c>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f00e f836 	bl	800fba8 <siprintf>
//	itoa(adcLeft_2000, snum_left2000, 5);
	ST7920_SendString(1,5, snum_left2000);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	461a      	mov	r2, r3
 8001b42:	2105      	movs	r1, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7fe ff8d 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu pitc 1000
	sumADC_Pitc = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	653b      	str	r3, [r7, #80]	; 0x50
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001b4e:	e009      	b.n	8001b64 <getSample+0x154>
	{
		ST7920_SendString(0,4, "PITC 1");
 8001b50:	4a75      	ldr	r2, [pc, #468]	; (8001d28 <getSample+0x318>)
 8001b52:	2104      	movs	r1, #4
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7fe ff85 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	486b      	ldr	r0, [pc, #428]	; (8001d0c <getSample+0x2fc>)
 8001b60:	f007 fa54 	bl	800900c <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b68:	4868      	ldr	r0, [pc, #416]	; (8001d0c <getSample+0x2fc>)
 8001b6a:	f007 fa37 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ed      	beq.n	8001b50 <getSample+0x140>
	}
	//đã gạt phải
	HAL_Delay(100);
 8001b74:	2064      	movs	r0, #100	; 0x64
 8001b76:	f002 ff9b 	bl	8004ab0 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8001b7e:	e010      	b.n	8001ba2 <getSample+0x192>
	{
		HAL_Delay(10);
 8001b80:	200a      	movs	r0, #10
 8001b82:	f002 ff95 	bl	8004ab0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2102      	movs	r1, #2
 8001b8a:	4860      	ldr	r0, [pc, #384]	; (8001d0c <getSample+0x2fc>)
 8001b8c:	f007 fa3e 	bl	800900c <HAL_GPIO_WritePin>
		sumADC_Pitc += adc3Value[_pitc];
 8001b90:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <getSample+0x300>)
 8001b92:	889b      	ldrh	r3, [r3, #4]
 8001b94:	461a      	mov	r2, r3
 8001b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b98:	4413      	add	r3, r2
 8001b9a:	653b      	str	r3, [r7, #80]	; 0x50
	for(int i = 0; i < 100; ++i)
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba4:	2b63      	cmp	r3, #99	; 0x63
 8001ba6:	ddeb      	ble.n	8001b80 <getSample+0x170>
	}
	adcPitc_1000 = sumADC_Pitc/100;
 8001ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001baa:	4a5a      	ldr	r2, [pc, #360]	; (8001d14 <getSample+0x304>)
 8001bac:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb0:	1152      	asrs	r2, r2, #5
 8001bb2:	17db      	asrs	r3, r3, #31
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <getSample+0x31c>)
 8001bba:	801a      	strh	r2, [r3, #0]
	char snum_pitc1000[5];
	sprintf(snum_pitc1000, "%d", adcPitc_1000);
 8001bbc:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <getSample+0x31c>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4955      	ldr	r1, [pc, #340]	; (8001d1c <getSample+0x30c>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00d ffed 	bl	800fba8 <siprintf>
//	itoa(adcPitc_1000, snum_pitc1000, 5);
	ST7920_SendString(2,0, snum_pitc1000);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f7fe ff44 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu pitc 2000
	sumADC_Pitc = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	653b      	str	r3, [r7, #80]	; 0x50
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001be0:	e009      	b.n	8001bf6 <getSample+0x1e6>
	{
		ST7920_SendString(0,4, "PITC 2");
 8001be2:	4a53      	ldr	r2, [pc, #332]	; (8001d30 <getSample+0x320>)
 8001be4:	2104      	movs	r1, #4
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7fe ff3c 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2102      	movs	r1, #2
 8001bf0:	4846      	ldr	r0, [pc, #280]	; (8001d0c <getSample+0x2fc>)
 8001bf2:	f007 fa0b 	bl	800900c <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfa:	4844      	ldr	r0, [pc, #272]	; (8001d0c <getSample+0x2fc>)
 8001bfc:	f007 f9ee 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d0ed      	beq.n	8001be2 <getSample+0x1d2>
	}
	//đã gạt trái
	HAL_Delay(100);
 8001c06:	2064      	movs	r0, #100	; 0x64
 8001c08:	f002 ff52 	bl	8004ab0 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c10:	e010      	b.n	8001c34 <getSample+0x224>
	{
		HAL_Delay(10);
 8001c12:	200a      	movs	r0, #10
 8001c14:	f002 ff4c 	bl	8004ab0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	483b      	ldr	r0, [pc, #236]	; (8001d0c <getSample+0x2fc>)
 8001c1e:	f007 f9f5 	bl	800900c <HAL_GPIO_WritePin>
		sumADC_Pitc += adc3Value[_pitc];
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <getSample+0x300>)
 8001c24:	889b      	ldrh	r3, [r3, #4]
 8001c26:	461a      	mov	r2, r3
 8001c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2a:	4413      	add	r3, r2
 8001c2c:	653b      	str	r3, [r7, #80]	; 0x50
	for(int i = 0; i < 100; ++i)
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c30:	3301      	adds	r3, #1
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c36:	2b63      	cmp	r3, #99	; 0x63
 8001c38:	ddeb      	ble.n	8001c12 <getSample+0x202>
	}
	adcPitc_2000 = sumADC_Pitc/100;
 8001c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3c:	4a35      	ldr	r2, [pc, #212]	; (8001d14 <getSample+0x304>)
 8001c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c42:	1152      	asrs	r2, r2, #5
 8001c44:	17db      	asrs	r3, r3, #31
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <getSample+0x324>)
 8001c4c:	801a      	strh	r2, [r3, #0]
	char snum_pitc2000[5];
	sprintf(snum_pitc2000, "%d", adcPitc_2000);
 8001c4e:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <getSample+0x324>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4930      	ldr	r1, [pc, #192]	; (8001d1c <getSample+0x30c>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00d ffa4 	bl	800fba8 <siprintf>
//	itoa(adcPitc_1000, snum_pitc2000, 5);
	ST7920_SendString(2,5, snum_pitc2000);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	461a      	mov	r2, r3
 8001c66:	2105      	movs	r1, #5
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f7fe fefb 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu rigt 1000
	sumADC_Rigt = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001c72:	e009      	b.n	8001c88 <getSample+0x278>
	{
		ST7920_SendString(0,4, "RIGT 1");
 8001c74:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <getSample+0x328>)
 8001c76:	2104      	movs	r1, #4
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7fe fef3 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2102      	movs	r1, #2
 8001c82:	4822      	ldr	r0, [pc, #136]	; (8001d0c <getSample+0x2fc>)
 8001c84:	f007 f9c2 	bl	800900c <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001c88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8c:	481f      	ldr	r0, [pc, #124]	; (8001d0c <getSample+0x2fc>)
 8001c8e:	f007 f9a5 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ed      	beq.n	8001c74 <getSample+0x264>
	}
	//đã gạt phải
	HAL_Delay(100);
 8001c98:	2064      	movs	r0, #100	; 0x64
 8001c9a:	f002 ff09 	bl	8004ab0 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca2:	e010      	b.n	8001cc6 <getSample+0x2b6>
	{
		HAL_Delay(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f002 ff03 	bl	8004ab0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2102      	movs	r1, #2
 8001cae:	4817      	ldr	r0, [pc, #92]	; (8001d0c <getSample+0x2fc>)
 8001cb0:	f007 f9ac 	bl	800900c <HAL_GPIO_WritePin>
		sumADC_Rigt += adc3Value[_rigt];
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <getSample+0x300>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cbc:	4413      	add	r3, r2
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i = 0; i < 100; ++i)
 8001cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc8:	2b63      	cmp	r3, #99	; 0x63
 8001cca:	ddeb      	ble.n	8001ca4 <getSample+0x294>
	}
	adcRigt_1000 = sumADC_Rigt/100;
 8001ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <getSample+0x304>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	1152      	asrs	r2, r2, #5
 8001cd6:	17db      	asrs	r3, r3, #31
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <getSample+0x32c>)
 8001cde:	801a      	strh	r2, [r3, #0]
	char snum_rigt1000[5];
	sprintf(snum_rigt1000, "%d", adcRigt_1000);
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <getSample+0x32c>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	490c      	ldr	r1, [pc, #48]	; (8001d1c <getSample+0x30c>)
 8001cec:	4618      	mov	r0, r3
 8001cee:	f00d ff5b 	bl	800fba8 <siprintf>
//	itoa(adcRigt_1000, snum_rigt1000, 5);
	ST7920_SendString(3,0, snum_rigt1000);
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	f7fe feb2 	bl	8000a64 <ST7920_SendString>


	//lấy mẫu rigt 2000
	sumADC_Rigt = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001d04:	e026      	b.n	8001d54 <getSample+0x344>
 8001d06:	bf00      	nop
 8001d08:	08011410 	.word	0x08011410
 8001d0c:	58021000 	.word	0x58021000
 8001d10:	24000cf4 	.word	0x24000cf4
 8001d14:	51eb851f 	.word	0x51eb851f
 8001d18:	24000080 	.word	0x24000080
 8001d1c:	08011418 	.word	0x08011418
 8001d20:	0801141c 	.word	0x0801141c
 8001d24:	24000082 	.word	0x24000082
 8001d28:	08011424 	.word	0x08011424
 8001d2c:	24000084 	.word	0x24000084
 8001d30:	0801142c 	.word	0x0801142c
 8001d34:	24000086 	.word	0x24000086
 8001d38:	08011434 	.word	0x08011434
 8001d3c:	24000088 	.word	0x24000088
	{
		ST7920_SendString(0,4, "RIGT 2");
 8001d40:	4a26      	ldr	r2, [pc, #152]	; (8001ddc <getSample+0x3cc>)
 8001d42:	2104      	movs	r1, #4
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7fe fe8d 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	4824      	ldr	r0, [pc, #144]	; (8001de0 <getSample+0x3d0>)
 8001d50:	f007 f95c 	bl	800900c <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d58:	4821      	ldr	r0, [pc, #132]	; (8001de0 <getSample+0x3d0>)
 8001d5a:	f007 f93f 	bl	8008fdc <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d0ed      	beq.n	8001d40 <getSample+0x330>
	}
	HAL_Delay(100);
 8001d64:	2064      	movs	r0, #100	; 0x64
 8001d66:	f002 fea3 	bl	8004ab0 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6e:	e010      	b.n	8001d92 <getSample+0x382>
	{
		HAL_Delay(10);
 8001d70:	200a      	movs	r0, #10
 8001d72:	f002 fe9d 	bl	8004ab0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4819      	ldr	r0, [pc, #100]	; (8001de0 <getSample+0x3d0>)
 8001d7c:	f007 f946 	bl	800900c <HAL_GPIO_WritePin>
		sumADC_Rigt += adc3Value[_rigt];
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <getSample+0x3d4>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d88:	4413      	add	r3, r2
 8001d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i = 0; i < 100; ++i)
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	3301      	adds	r3, #1
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
 8001d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d94:	2b63      	cmp	r3, #99	; 0x63
 8001d96:	ddeb      	ble.n	8001d70 <getSample+0x360>
	}
	adcRigt_2000 = sumADC_Rigt/100;
 8001d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <getSample+0x3d8>)
 8001d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001da0:	1152      	asrs	r2, r2, #5
 8001da2:	17db      	asrs	r3, r3, #31
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <getSample+0x3dc>)
 8001daa:	801a      	strh	r2, [r3, #0]
	char snum_rigt2000[5];
	sprintf(snum_rigt2000, "%d", adcRigt_2000);
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <getSample+0x3dc>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <getSample+0x3e0>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00d fef6 	bl	800fba8 <siprintf>
//	itoa(adcRigt_2000, snum_rigt2000, 5);
	ST7920_SendString(3,5, snum_rigt2000);
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2105      	movs	r1, #5
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	f7fe fe4e 	bl	8000a64 <ST7920_SendString>

	HAL_Delay(500);
 8001dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dcc:	f002 fe70 	bl	8004ab0 <HAL_Delay>
	//ghi vào flash
	writeFLASH();
 8001dd0:	f7ff fce8 	bl	80017a4 <writeFLASH>
}
 8001dd4:	bf00      	nop
 8001dd6:	3758      	adds	r7, #88	; 0x58
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	0801143c 	.word	0x0801143c
 8001de0:	58021000 	.word	0x58021000
 8001de4:	24000cf4 	.word	0x24000cf4
 8001de8:	51eb851f 	.word	0x51eb851f
 8001dec:	2400008a 	.word	0x2400008a
 8001df0:	08011418 	.word	0x08011418

08001df4 <solveDT50_Left>:

void solveDT50_Left(uint16_t a1, uint16_t a2)
{
 8001df4:	b490      	push	{r4, r7}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	80fb      	strh	r3, [r7, #6]
 8001e00:	4613      	mov	r3, r2
 8001e02:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8001e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e10:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8001e12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e16:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03d      	beq.n	8001e9a <solveDT50_Left+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8001e1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	fb02 f203 	mul.w	r2, r2, r3
 8001e26:	88bb      	ldrh	r3, [r7, #4]
 8001e28:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e32:	88f9      	ldrh	r1, [r7, #6]
 8001e34:	fb01 f103 	mul.w	r1, r1, r3
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001e3c:	fb00 f303 	mul.w	r3, r0, r3
 8001e40:	1acb      	subs	r3, r1, r3
 8001e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e4e:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8001e52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001e66:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e6e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e80:	ed87 7b02 	vstr	d7, [r7, #8]
    aLeft_Linear = x;	//
 8001e84:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <solveDT50_Left+0x130>)
 8001e86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e8a:	e9c2 3400 	strd	r3, r4, [r2]
    bLeft_Linear = y;	//
 8001e8e:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <solveDT50_Left+0x134>)
 8001e90:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e94:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aLeft_Linear = x;	//
    bLeft_Linear = y;	//
  }
}
 8001e98:	e03f      	b.n	8001f1a <solveDT50_Left+0x126>
  else if ( a2 != 0 )
 8001e9a:	88bb      	ldrh	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d03c      	beq.n	8001f1a <solveDT50_Left+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8001ea0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ea2:	88ba      	ldrh	r2, [r7, #4]
 8001ea4:	fb02 f203 	mul.w	r2, r2, r3
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	1ad2      	subs	r2, r2, r3
 8001eb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eb4:	88b9      	ldrh	r1, [r7, #4]
 8001eb6:	fb01 f103 	mul.w	r1, r1, r3
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001ebe:	fb00 f303 	mul.w	r3, r0, r3
 8001ec2:	1acb      	subs	r3, r1, r3
 8001ec4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ed0:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 8001ed4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ede:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001ee8:	ed97 7b08 	vldr	d7, [r7, #32]
 8001eec:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ef0:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001efe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f02:	ed87 7b06 	vstr	d7, [r7, #24]
    aLeft_Linear = x;	//
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <solveDT50_Left+0x130>)
 8001f08:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f0c:	e9c2 3400 	strd	r3, r4, [r2]
    bLeft_Linear = y;	//
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <solveDT50_Left+0x134>)
 8001f12:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001f16:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001f1a:	bf00      	nop
 8001f1c:	3730      	adds	r7, #48	; 0x30
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc90      	pop	{r4, r7}
 8001f22:	4770      	bx	lr
 8001f24:	24000ca0 	.word	0x24000ca0
 8001f28:	24000868 	.word	0x24000868

08001f2c <solveDT50_Pitch>:

void solveDT50_Pitch(uint16_t a1, uint16_t a2)
{
 8001f2c:	b490      	push	{r4, r7}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	460a      	mov	r2, r1
 8001f36:	80fb      	strh	r3, [r7, #6]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8001f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f48:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8001f4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f4e:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03d      	beq.n	8001fd2 <solveDT50_Pitch+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8001f56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f58:	88fa      	ldrh	r2, [r7, #6]
 8001f5a:	fb02 f203 	mul.w	r2, r2, r3
 8001f5e:	88bb      	ldrh	r3, [r7, #4]
 8001f60:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	1ad2      	subs	r2, r2, r3
 8001f68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f6a:	88f9      	ldrh	r1, [r7, #6]
 8001f6c:	fb01 f103 	mul.w	r1, r1, r3
 8001f70:	88bb      	ldrh	r3, [r7, #4]
 8001f72:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001f74:	fb00 f303 	mul.w	r3, r0, r3
 8001f78:	1acb      	subs	r3, r1, r3
 8001f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f86:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8001f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001f9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fa2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fa6:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001fb4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fb8:	ed87 7b02 	vstr	d7, [r7, #8]
    aPitch_Linear = x;	//
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <solveDT50_Pitch+0x130>)
 8001fbe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001fc2:	e9c2 3400 	strd	r3, r4, [r2]
    bPitch_Linear = y;	//
 8001fc6:	4a26      	ldr	r2, [pc, #152]	; (8002060 <solveDT50_Pitch+0x134>)
 8001fc8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fcc:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aPitch_Linear = x;	//
    bPitch_Linear = y;	//
  }
}
 8001fd0:	e03f      	b.n	8002052 <solveDT50_Pitch+0x126>
  else if ( a2 != 0 )
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d03c      	beq.n	8002052 <solveDT50_Pitch+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8001fd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fda:	88ba      	ldrh	r2, [r7, #4]
 8001fdc:	fb02 f203 	mul.w	r2, r2, r3
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	1ad2      	subs	r2, r2, r3
 8001fea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fec:	88b9      	ldrh	r1, [r7, #4]
 8001fee:	fb01 f103 	mul.w	r1, r1, r3
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001ff6:	fb00 f303 	mul.w	r3, r0, r3
 8001ffa:	1acb      	subs	r3, r1, r3
 8001ffc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002008:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 800200c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002016:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002020:	ed97 7b08 	vldr	d7, [r7, #32]
 8002024:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002028:	ee36 5b47 	vsub.f64	d5, d6, d7
 800202c:	88bb      	ldrh	r3, [r7, #4]
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002036:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800203a:	ed87 7b06 	vstr	d7, [r7, #24]
    aPitch_Linear = x;	//
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <solveDT50_Pitch+0x130>)
 8002040:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002044:	e9c2 3400 	strd	r3, r4, [r2]
    bPitch_Linear = y;	//
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <solveDT50_Pitch+0x134>)
 800204a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800204e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002052:	bf00      	nop
 8002054:	3730      	adds	r7, #48	; 0x30
 8002056:	46bd      	mov	sp, r7
 8002058:	bc90      	pop	{r4, r7}
 800205a:	4770      	bx	lr
 800205c:	24000ac8 	.word	0x24000ac8
 8002060:	24000cb0 	.word	0x24000cb0

08002064 <solveDT50_Rigt>:

void solveDT50_Rigt(uint16_t a1, uint16_t a2)
{
 8002064:	b490      	push	{r4, r7}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	80fb      	strh	r3, [r7, #6]
 8002070:	4613      	mov	r3, r2
 8002072:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 800207c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002080:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8002082:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002086:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03d      	beq.n	800210a <solveDT50_Rigt+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 800208e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	fb02 f203 	mul.w	r2, r2, r3
 8002096:	88bb      	ldrh	r3, [r7, #4]
 8002098:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	1ad2      	subs	r2, r2, r3
 80020a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020a2:	88f9      	ldrh	r1, [r7, #6]
 80020a4:	fb01 f103 	mul.w	r1, r1, r3
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 80020ac:	fb00 f303 	mul.w	r3, r0, r3
 80020b0:	1acb      	subs	r3, r1, r3
 80020b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020be:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 80020c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80020d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80020da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80020de:	ee36 5b47 	vsub.f64	d5, d6, d7
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020f0:	ed87 7b02 	vstr	d7, [r7, #8]
    aRigt_Linear = x;	//
 80020f4:	4a27      	ldr	r2, [pc, #156]	; (8002194 <solveDT50_Rigt+0x130>)
 80020f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020fa:	e9c2 3400 	strd	r3, r4, [r2]
    bRigt_Linear = y;	//
 80020fe:	4a26      	ldr	r2, [pc, #152]	; (8002198 <solveDT50_Rigt+0x134>)
 8002100:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002104:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aRigt_Linear = x;	//
    bRigt_Linear = y;	//
  }
}
 8002108:	e03f      	b.n	800218a <solveDT50_Rigt+0x126>
  else if ( a2 != 0 )
 800210a:	88bb      	ldrh	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d03c      	beq.n	800218a <solveDT50_Rigt+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8002110:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002112:	88ba      	ldrh	r2, [r7, #4]
 8002114:	fb02 f203 	mul.w	r2, r2, r3
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	1ad2      	subs	r2, r2, r3
 8002122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002124:	88b9      	ldrh	r1, [r7, #4]
 8002126:	fb01 f103 	mul.w	r1, r1, r3
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 800212e:	fb00 f303 	mul.w	r3, r0, r3
 8002132:	1acb      	subs	r3, r1, r3
 8002134:	fb92 f3f3 	sdiv	r3, r2, r3
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002140:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 8002144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800214e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002158:	ed97 7b08 	vldr	d7, [r7, #32]
 800215c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002160:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002164:	88bb      	ldrh	r3, [r7, #4]
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800216e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002172:	ed87 7b06 	vstr	d7, [r7, #24]
    aRigt_Linear = x;	//
 8002176:	4a07      	ldr	r2, [pc, #28]	; (8002194 <solveDT50_Rigt+0x130>)
 8002178:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800217c:	e9c2 3400 	strd	r3, r4, [r2]
    bRigt_Linear = y;	//
 8002180:	4a05      	ldr	r2, [pc, #20]	; (8002198 <solveDT50_Rigt+0x134>)
 8002182:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002186:	e9c2 3400 	strd	r3, r4, [r2]
}
 800218a:	bf00      	nop
 800218c:	3730      	adds	r7, #48	; 0x30
 800218e:	46bd      	mov	sp, r7
 8002190:	bc90      	pop	{r4, r7}
 8002192:	4770      	bx	lr
 8002194:	24000400 	.word	0x24000400
 8002198:	24000210 	.word	0x24000210

0800219c <cylinder_Init>:

#define putQ(PUTQ_STATUS) (HAL_GPIO_WritePin(putQ_GPIO_Port, putQ_Pin, PUTQ_STATUS))
#define putE(PUTE_STATUS) (HAL_GPIO_WritePin(putE_GPIO_Port, putE_Pin, PUTE_STATUS))

void cylinder_Init()
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	gripperE(GRIPPERE_CLOSE);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a6:	4810      	ldr	r0, [pc, #64]	; (80021e8 <cylinder_Init+0x4c>)
 80021a8:	f006 ff30 	bl	800900c <HAL_GPIO_WritePin>
	gripperQ(GRIPPERQ_CLOSE);
 80021ac:	2200      	movs	r2, #0
 80021ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <cylinder_Init+0x4c>)
 80021b4:	f006 ff2a 	bl	800900c <HAL_GPIO_WritePin>
	putQ(PUTQ_UP);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2120      	movs	r1, #32
 80021bc:	480b      	ldr	r0, [pc, #44]	; (80021ec <cylinder_Init+0x50>)
 80021be:	f006 ff25 	bl	800900c <HAL_GPIO_WritePin>
	putE(PUTE_UP);
 80021c2:	2201      	movs	r2, #1
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	4809      	ldr	r0, [pc, #36]	; (80021ec <cylinder_Init+0x50>)
 80021c8:	f006 ff20 	bl	800900c <HAL_GPIO_WritePin>
	passArm(PASSARM_UP);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2104      	movs	r1, #4
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <cylinder_Init+0x4c>)
 80021d2:	f006 ff1b 	bl	800900c <HAL_GPIO_WritePin>
	passHand(PASSHAND_OPEN);
 80021d6:	2201      	movs	r2, #1
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <cylinder_Init+0x4c>)
 80021de:	f006 ff15 	bl	800900c <HAL_GPIO_WritePin>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	58020000 	.word	0x58020000
 80021ec:	58020400 	.word	0x58020400

080021f0 <wait4SelectMode>:
uint16_t ball1[4] = {1156,1156,330,600};

uint16_t ball_temp[4] = {0,0,0,0};

void wait4SelectMode()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	  ST7920_Clear();
 80021f4:	f7fe fc78 	bl	8000ae8 <ST7920_Clear>
	  while((btn_Q == 1)&&(btn_E == 1)&&(btn_C == 1)&&(btn_Z == 1)&&(btn_Sta == 1)&&(btn_W == 1))	//khi chưa chọn vị trí
 80021f8:	e00e      	b.n	8002218 <wait4SelectMode+0x28>
	  {
		  ST7920_SendString(0,0, "QECZ:Ball");
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <wait4SelectMode+0x154>)
 80021fc:	2100      	movs	r1, #0
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fc30 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(1,0, "W:load");
 8002204:	4a50      	ldr	r2, [pc, #320]	; (8002348 <wait4SelectMode+0x158>)
 8002206:	2100      	movs	r1, #0
 8002208:	2001      	movs	r0, #1
 800220a:	f7fe fc2b 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(2,0, "Sta:Shoot");
 800220e:	4a4f      	ldr	r2, [pc, #316]	; (800234c <wait4SelectMode+0x15c>)
 8002210:	2100      	movs	r1, #0
 8002212:	2002      	movs	r0, #2
 8002214:	f7fe fc26 	bl	8000a64 <ST7920_SendString>
	  while((btn_Q == 1)&&(btn_E == 1)&&(btn_C == 1)&&(btn_Z == 1)&&(btn_Sta == 1)&&(btn_W == 1))	//khi chưa chọn vị trí
 8002218:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <wait4SelectMode+0x160>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d113      	bne.n	8002248 <wait4SelectMode+0x58>
 8002220:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <wait4SelectMode+0x164>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10f      	bne.n	8002248 <wait4SelectMode+0x58>
 8002228:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <wait4SelectMode+0x168>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10b      	bne.n	8002248 <wait4SelectMode+0x58>
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <wait4SelectMode+0x16c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <wait4SelectMode+0x58>
 8002238:	4b49      	ldr	r3, [pc, #292]	; (8002360 <wait4SelectMode+0x170>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d103      	bne.n	8002248 <wait4SelectMode+0x58>
 8002240:	4b48      	ldr	r3, [pc, #288]	; (8002364 <wait4SelectMode+0x174>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d0d8      	beq.n	80021fa <wait4SelectMode+0xa>
	  }
	  ST7920_Clear();
 8002248:	f7fe fc4e 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(1,0, 	 "      ");
 800224c:	4a46      	ldr	r2, [pc, #280]	; (8002368 <wait4SelectMode+0x178>)
 800224e:	2100      	movs	r1, #0
 8002250:	2001      	movs	r0, #1
 8002252:	f7fe fc07 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(1,0, "RUNNING");
 8002256:	4a45      	ldr	r2, [pc, #276]	; (800236c <wait4SelectMode+0x17c>)
 8002258:	2100      	movs	r1, #0
 800225a:	2001      	movs	r0, #1
 800225c:	f7fe fc02 	bl	8000a64 <ST7920_SendString>
	  if(btn_Sta == 0)
 8002260:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <wait4SelectMode+0x170>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10d      	bne.n	8002284 <wait4SelectMode+0x94>
	  {
		  startMode = TO_SHOOT;
 8002268:	4b41      	ldr	r3, [pc, #260]	; (8002370 <wait4SelectMode+0x180>)
 800226a:	2205      	movs	r2, #5
 800226c:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 800226e:	4a41      	ldr	r2, [pc, #260]	; (8002374 <wait4SelectMode+0x184>)
 8002270:	2100      	movs	r1, #0
 8002272:	2003      	movs	r0, #3
 8002274:	f7fe fbf6 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "TO SHOOT");
 8002278:	4a3f      	ldr	r2, [pc, #252]	; (8002378 <wait4SelectMode+0x188>)
 800227a:	2100      	movs	r1, #0
 800227c:	2003      	movs	r0, #3
 800227e:	f7fe fbf1 	bl	8000a64 <ST7920_SendString>
 8002282:	e058      	b.n	8002336 <wait4SelectMode+0x146>
	  }
	  else if(btn_E == 0)	//lấy ball2
 8002284:	4b33      	ldr	r3, [pc, #204]	; (8002354 <wait4SelectMode+0x164>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <wait4SelectMode+0xb8>
	  {
		  startMode = BALL2;
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <wait4SelectMode+0x180>)
 800228e:	2202      	movs	r2, #2
 8002290:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 8002292:	4a38      	ldr	r2, [pc, #224]	; (8002374 <wait4SelectMode+0x184>)
 8002294:	2100      	movs	r1, #0
 8002296:	2003      	movs	r0, #3
 8002298:	f7fe fbe4 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "BALL2");
 800229c:	4a37      	ldr	r2, [pc, #220]	; (800237c <wait4SelectMode+0x18c>)
 800229e:	2100      	movs	r1, #0
 80022a0:	2003      	movs	r0, #3
 80022a2:	f7fe fbdf 	bl	8000a64 <ST7920_SendString>
 80022a6:	e046      	b.n	8002336 <wait4SelectMode+0x146>
	  }
	  else if(btn_C == 0)	//lấy ball3
 80022a8:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <wait4SelectMode+0x168>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <wait4SelectMode+0xdc>
	  {
		  startMode = BALL3;
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <wait4SelectMode+0x180>)
 80022b2:	2203      	movs	r2, #3
 80022b4:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 80022b6:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <wait4SelectMode+0x184>)
 80022b8:	2100      	movs	r1, #0
 80022ba:	2003      	movs	r0, #3
 80022bc:	f7fe fbd2 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "BALL3");
 80022c0:	4a2f      	ldr	r2, [pc, #188]	; (8002380 <wait4SelectMode+0x190>)
 80022c2:	2100      	movs	r1, #0
 80022c4:	2003      	movs	r0, #3
 80022c6:	f7fe fbcd 	bl	8000a64 <ST7920_SendString>
 80022ca:	e034      	b.n	8002336 <wait4SelectMode+0x146>
	  }
	  else if(btn_Z == 0)	//lấy ball4
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <wait4SelectMode+0x16c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <wait4SelectMode+0x100>
	  {
		  startMode = BALL4;
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <wait4SelectMode+0x180>)
 80022d6:	2204      	movs	r2, #4
 80022d8:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 80022da:	4a26      	ldr	r2, [pc, #152]	; (8002374 <wait4SelectMode+0x184>)
 80022dc:	2100      	movs	r1, #0
 80022de:	2003      	movs	r0, #3
 80022e0:	f7fe fbc0 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "BALL4");
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <wait4SelectMode+0x194>)
 80022e6:	2100      	movs	r1, #0
 80022e8:	2003      	movs	r0, #3
 80022ea:	f7fe fbbb 	bl	8000a64 <ST7920_SendString>
 80022ee:	e022      	b.n	8002336 <wait4SelectMode+0x146>
	  }
	  else if(btn_Q == 0)	//lấy ball1
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <wait4SelectMode+0x160>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <wait4SelectMode+0x124>
	  {
		  startMode = BALL1;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <wait4SelectMode+0x180>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <wait4SelectMode+0x184>)
 8002300:	2100      	movs	r1, #0
 8002302:	2003      	movs	r0, #3
 8002304:	f7fe fbae 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "BALL1");
 8002308:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <wait4SelectMode+0x198>)
 800230a:	2100      	movs	r1, #0
 800230c:	2003      	movs	r0, #3
 800230e:	f7fe fba9 	bl	8000a64 <ST7920_SendString>
 8002312:	e010      	b.n	8002336 <wait4SelectMode+0x146>
	  }
	  else if(btn_W == 0)	//về vị trí load ball
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <wait4SelectMode+0x174>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10c      	bne.n	8002336 <wait4SelectMode+0x146>
	  {
		  startMode = LOAD_BALL;
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <wait4SelectMode+0x180>)
 800231e:	2206      	movs	r2, #6
 8002320:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "         ");
 8002322:	4a14      	ldr	r2, [pc, #80]	; (8002374 <wait4SelectMode+0x184>)
 8002324:	2100      	movs	r1, #0
 8002326:	2003      	movs	r0, #3
 8002328:	f7fe fb9c 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3,0, "LOAD BALL");
 800232c:	4a17      	ldr	r2, [pc, #92]	; (800238c <wait4SelectMode+0x19c>)
 800232e:	2100      	movs	r1, #0
 8002330:	2003      	movs	r0, #3
 8002332:	f7fe fb97 	bl	8000a64 <ST7920_SendString>
	  }
	  ST7920_SendString(2,0, "START");
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <wait4SelectMode+0x1a0>)
 8002338:	2100      	movs	r1, #0
 800233a:	2002      	movs	r0, #2
 800233c:	f7fe fb92 	bl	8000a64 <ST7920_SendString>
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	08011444 	.word	0x08011444
 8002348:	08011450 	.word	0x08011450
 800234c:	08011458 	.word	0x08011458
 8002350:	24000beb 	.word	0x24000beb
 8002354:	24000410 	.word	0x24000410
 8002358:	24000d3c 	.word	0x24000d3c
 800235c:	24000cc8 	.word	0x24000cc8
 8002360:	24000bd6 	.word	0x24000bd6
 8002364:	24000905 	.word	0x24000905
 8002368:	08011464 	.word	0x08011464
 800236c:	0801146c 	.word	0x0801146c
 8002370:	24000ba0 	.word	0x24000ba0
 8002374:	08011474 	.word	0x08011474
 8002378:	08011480 	.word	0x08011480
 800237c:	0801148c 	.word	0x0801148c
 8002380:	08011494 	.word	0x08011494
 8002384:	0801149c 	.word	0x0801149c
 8002388:	080114a4 	.word	0x080114a4
 800238c:	080114ac 	.word	0x080114ac
 8002390:	080114b8 	.word	0x080114b8
 8002394:	00000000 	.word	0x00000000

08002398 <goToBallRigt>:

void goToBallRigt(uint16_t *ball)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	ed2d 8b04 	vpush	{d8-d9}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	  startTime = HAL_GetTick();
 80023a4:	f002 fb78 	bl	8004a98 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <goToBallRigt+0x188>)
 80023ac:	601a      	str	r2, [r3, #0]
	  if(ball!=ball1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a5c      	ldr	r2, [pc, #368]	; (8002524 <goToBallRigt+0x18c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00a      	beq.n	80023cc <goToBallRigt+0x34>
	  {
		  passArm(PASSARM_DOWN);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2104      	movs	r1, #4
 80023ba:	485b      	ldr	r0, [pc, #364]	; (8002528 <goToBallRigt+0x190>)
 80023bc:	f006 fe26 	bl	800900c <HAL_GPIO_WritePin>
		  passHand(PASSHAND_OPEN);
 80023c0:	2201      	movs	r2, #1
 80023c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023c6:	4858      	ldr	r0, [pc, #352]	; (8002528 <goToBallRigt+0x190>)
 80023c8:	f006 fe20 	bl	800900c <HAL_GPIO_WritePin>

//	  while(btn_Sel!=0)	//di chuyển tới vị trí BALL1
//	  {
//		  roR_Pit_Yaw_GoTo(ball[_Rigt], ball[_PitcWait], 0);
//	  }
	  ST7920_Clear();
 80023cc:	f7fe fb8c 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(2, 0, "Btn_Sel waiting");
 80023d0:	4a56      	ldr	r2, [pc, #344]	; (800252c <goToBallRigt+0x194>)
 80023d2:	2100      	movs	r1, #0
 80023d4:	2002      	movs	r0, #2
 80023d6:	f7fe fb45 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "autoTuning");
 80023da:	4a55      	ldr	r2, [pc, #340]	; (8002530 <goToBallRigt+0x198>)
 80023dc:	2100      	movs	r1, #0
 80023de:	2003      	movs	r0, #3
 80023e0:	f7fe fb40 	bl	8000a64 <ST7920_SendString>
	  while(((abs(rigtDistance-ball[_Rigt])>10)||(abs(pitchDistance-ball[_PitcWait])>10))&&btn_Sel==1)
 80023e4:	e056      	b.n	8002494 <goToBallRigt+0xfc>
	  {
		  roR_Pit_Yaw_GoTo(ball[_Rigt], ball[_PitcWait], 0);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3306      	adds	r3, #6
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7ff f803 	bl	8001400 <roR_Pit_Yaw_GoTo>
		  if((abs(rigtDistance-ball[_Rigt])<10)&&(abs(pitchDistance-ball[_PitcWait])<10))
 80023fa:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <goToBallRigt+0x19c>)
 80023fc:	ed93 6b00 	vldr	d6, [r3]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800240c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002410:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002414:	ee17 3a90 	vmov	r3, s15
 8002418:	f113 0f09 	cmn.w	r3, #9
 800241c:	db3a      	blt.n	8002494 <goToBallRigt+0xfc>
 800241e:	4b45      	ldr	r3, [pc, #276]	; (8002534 <goToBallRigt+0x19c>)
 8002420:	ed93 6b00 	vldr	d6, [r3]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002430:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002434:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	2b09      	cmp	r3, #9
 800243e:	dc29      	bgt.n	8002494 <goToBallRigt+0xfc>
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <goToBallRigt+0x1a0>)
 8002442:	ed93 6b00 	vldr	d6, [r3]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3306      	adds	r3, #6
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002454:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002458:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800245c:	ee17 3a90 	vmov	r3, s15
 8002460:	f113 0f09 	cmn.w	r3, #9
 8002464:	db16      	blt.n	8002494 <goToBallRigt+0xfc>
 8002466:	4b34      	ldr	r3, [pc, #208]	; (8002538 <goToBallRigt+0x1a0>)
 8002468:	ed93 6b00 	vldr	d6, [r3]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3306      	adds	r3, #6
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800247a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800247e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002482:	ee17 3a90 	vmov	r3, s15
 8002486:	2b09      	cmp	r3, #9
 8002488:	dc04      	bgt.n	8002494 <goToBallRigt+0xfc>
		  {
			  brake();
 800248a:	f7fe ffa5 	bl	80013d8 <brake>
			  HAL_Delay(DEBOUNCE_MOVING_TIME);
 800248e:	2064      	movs	r0, #100	; 0x64
 8002490:	f002 fb0e 	bl	8004ab0 <HAL_Delay>
	  while(((abs(rigtDistance-ball[_Rigt])>10)||(abs(pitchDistance-ball[_PitcWait])>10))&&btn_Sel==1)
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <goToBallRigt+0x19c>)
 8002496:	ed93 6b00 	vldr	d6, [r3]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80024ae:	ee17 3a90 	vmov	r3, s15
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bfb8      	it	lt
 80024b6:	425b      	neglt	r3, r3
 80024b8:	2b0a      	cmp	r3, #10
 80024ba:	dc14      	bgt.n	80024e6 <goToBallRigt+0x14e>
 80024bc:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <goToBallRigt+0x1a0>)
 80024be:	ed93 6b00 	vldr	d6, [r3]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3306      	adds	r3, #6
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80024d8:	ee17 3a90 	vmov	r3, s15
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bfb8      	it	lt
 80024e0:	425b      	neglt	r3, r3
 80024e2:	2b0a      	cmp	r3, #10
 80024e4:	dd04      	ble.n	80024f0 <goToBallRigt+0x158>
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <goToBallRigt+0x1a4>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	f43f af7b 	beq.w	80023e6 <goToBallRigt+0x4e>
		  }
	  }
	  passArm(PASSARM_DOWN);
 80024f0:	2201      	movs	r2, #1
 80024f2:	2104      	movs	r1, #4
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <goToBallRigt+0x190>)
 80024f6:	f006 fd89 	bl	800900c <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 80024fa:	2201      	movs	r2, #1
 80024fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002500:	4809      	ldr	r0, [pc, #36]	; (8002528 <goToBallRigt+0x190>)
 8002502:	f006 fd83 	bl	800900c <HAL_GPIO_WritePin>
	  ST7920_Clear();
 8002506:	f7fe faef 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(2, 0, "Btn_X waiting");
 800250a:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <goToBallRigt+0x1a8>)
 800250c:	2100      	movs	r1, #0
 800250e:	2002      	movs	r0, #2
 8002510:	f7fe faa8 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "manualTuning");
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <goToBallRigt+0x1ac>)
 8002516:	2100      	movs	r1, #0
 8002518:	2003      	movs	r0, #3
 800251a:	f7fe faa3 	bl	8000a64 <ST7920_SendString>
	  while(btn_X == 1)	//ch�? nhấn nút X -> tinh chỉnh
 800251e:	e140      	b.n	80027a2 <goToBallRigt+0x40a>
 8002520:	24000d40 	.word	0x24000d40
 8002524:	240000a4 	.word	0x240000a4
 8002528:	58020000 	.word	0x58020000
 800252c:	080114c0 	.word	0x080114c0
 8002530:	080114d0 	.word	0x080114d0
 8002534:	24000958 	.word	0x24000958
 8002538:	24000ce8 	.word	0x24000ce8
 800253c:	24000904 	.word	0x24000904
 8002540:	080114dc 	.word	0x080114dc
 8002544:	080114ec 	.word	0x080114ec
	  {
		  PIDyaw(compassData, 0);
 8002548:	4bc1      	ldr	r3, [pc, #772]	; (8002850 <goToBallRigt+0x4b8>)
 800254a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fc51 	bl	8000df8 <PIDyaw>
		  leftVer = !btn_leftUp - !btn_leftDown;
 8002556:	4bbf      	ldr	r3, [pc, #764]	; (8002854 <goToBallRigt+0x4bc>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	b29a      	uxth	r2, r3
 8002566:	4bbc      	ldr	r3, [pc, #752]	; (8002858 <goToBallRigt+0x4c0>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	b29b      	uxth	r3, r3
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	b29b      	uxth	r3, r3
 800257a:	b21a      	sxth	r2, r3
 800257c:	4bb7      	ldr	r3, [pc, #732]	; (800285c <goToBallRigt+0x4c4>)
 800257e:	801a      	strh	r2, [r3, #0]
		  leftHor = -!btn_leftLeft + !btn_leftRigt;
 8002580:	4bb7      	ldr	r3, [pc, #732]	; (8002860 <goToBallRigt+0x4c8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	b29a      	uxth	r2, r3
 8002590:	4bb4      	ldr	r3, [pc, #720]	; (8002864 <goToBallRigt+0x4cc>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	b29b      	uxth	r3, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	4bb0      	ldr	r3, [pc, #704]	; (8002868 <goToBallRigt+0x4d0>)
 80025a8:	801a      	strh	r2, [r3, #0]
		  _dir = atan2(leftHor, -leftVer);
 80025aa:	4baf      	ldr	r3, [pc, #700]	; (8002868 <goToBallRigt+0x4d0>)
 80025ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80025b8:	4ba8      	ldr	r3, [pc, #672]	; (800285c <goToBallRigt+0x4c4>)
 80025ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025be:	425b      	negs	r3, r3
 80025c0:	ee06 3a90 	vmov	s13, r3
 80025c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80025c8:	eeb0 1b46 	vmov.f64	d1, d6
 80025cc:	eeb0 0b47 	vmov.f64	d0, d7
 80025d0:	f00d ff2e 	bl	8010430 <atan2>
 80025d4:	eeb0 7b40 	vmov.f64	d7, d0
 80025d8:	4ba4      	ldr	r3, [pc, #656]	; (800286c <goToBallRigt+0x4d4>)
 80025da:	ed83 7b00 	vstr	d7, [r3]
		  _controlSpeed = sqrt(leftVer*leftVer + leftHor*leftHor);
 80025de:	4b9f      	ldr	r3, [pc, #636]	; (800285c <goToBallRigt+0x4c4>)
 80025e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b9d      	ldr	r3, [pc, #628]	; (800285c <goToBallRigt+0x4c4>)
 80025e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ec:	fb03 f202 	mul.w	r2, r3, r2
 80025f0:	4b9d      	ldr	r3, [pc, #628]	; (8002868 <goToBallRigt+0x4d0>)
 80025f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4b9b      	ldr	r3, [pc, #620]	; (8002868 <goToBallRigt+0x4d0>)
 80025fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025fe:	fb03 f301 	mul.w	r3, r3, r1
 8002602:	4413      	add	r3, r2
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800260c:	eeb0 0b47 	vmov.f64	d0, d7
 8002610:	f00d ff12 	bl	8010438 <sqrt>
 8002614:	eeb0 7b40 	vmov.f64	d7, d0
 8002618:	4b95      	ldr	r3, [pc, #596]	; (8002870 <goToBallRigt+0x4d8>)
 800261a:	ed83 7b00 	vstr	d7, [r3]
		  _motor1Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 800261e:	4b95      	ldr	r3, [pc, #596]	; (8002874 <goToBallRigt+0x4dc>)
 8002620:	ed93 6b00 	vldr	d6, [r3]
 8002624:	4b94      	ldr	r3, [pc, #592]	; (8002878 <goToBallRigt+0x4e0>)
 8002626:	ed93 7b00 	vldr	d7, [r3]
 800262a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800262e:	4b93      	ldr	r3, [pc, #588]	; (800287c <goToBallRigt+0x4e4>)
 8002630:	ed93 6b00 	vldr	d6, [r3]
 8002634:	4b8e      	ldr	r3, [pc, #568]	; (8002870 <goToBallRigt+0x4d8>)
 8002636:	ed93 7b00 	vldr	d7, [r3]
 800263a:	ee26 9b07 	vmul.f64	d9, d6, d7
 800263e:	4b8b      	ldr	r3, [pc, #556]	; (800286c <goToBallRigt+0x4d4>)
 8002640:	ed93 7b00 	vldr	d7, [r3]
 8002644:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8002838 <goToBallRigt+0x4a0>
 8002648:	ee36 7b47 	vsub.f64	d7, d6, d7
 800264c:	eeb0 0b47 	vmov.f64	d0, d7
 8002650:	f00d feb2 	bl	80103b8 <cos>
 8002654:	eeb0 7b40 	vmov.f64	d7, d0
 8002658:	ee29 7b07 	vmul.f64	d7, d9, d7
 800265c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8002840 <goToBallRigt+0x4a8>
 8002660:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002664:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002668:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800266c:	ee17 3a90 	vmov	r3, s15
 8002670:	b21a      	sxth	r2, r3
 8002672:	4b83      	ldr	r3, [pc, #524]	; (8002880 <goToBallRigt+0x4e8>)
 8002674:	801a      	strh	r2, [r3, #0]
		  _motor2Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 8002676:	4b7f      	ldr	r3, [pc, #508]	; (8002874 <goToBallRigt+0x4dc>)
 8002678:	ed93 6b00 	vldr	d6, [r3]
 800267c:	4b7e      	ldr	r3, [pc, #504]	; (8002878 <goToBallRigt+0x4e0>)
 800267e:	ed93 7b00 	vldr	d7, [r3]
 8002682:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002686:	4b7d      	ldr	r3, [pc, #500]	; (800287c <goToBallRigt+0x4e4>)
 8002688:	ed93 6b00 	vldr	d6, [r3]
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <goToBallRigt+0x4d8>)
 800268e:	ed93 7b00 	vldr	d7, [r3]
 8002692:	ee26 9b07 	vmul.f64	d9, d6, d7
 8002696:	4b75      	ldr	r3, [pc, #468]	; (800286c <goToBallRigt+0x4d4>)
 8002698:	ed93 7b00 	vldr	d7, [r3]
 800269c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8002838 <goToBallRigt+0x4a0>
 80026a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026a4:	eeb0 0b47 	vmov.f64	d0, d7
 80026a8:	f00d fe86 	bl	80103b8 <cos>
 80026ac:	eeb0 7b40 	vmov.f64	d7, d0
 80026b0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80026b4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80026b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80026bc:	ee17 3a90 	vmov	r3, s15
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b70      	ldr	r3, [pc, #448]	; (8002884 <goToBallRigt+0x4ec>)
 80026c4:	801a      	strh	r2, [r3, #0]
		  _motor3Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 80026c6:	4b6b      	ldr	r3, [pc, #428]	; (8002874 <goToBallRigt+0x4dc>)
 80026c8:	ed93 6b00 	vldr	d6, [r3]
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <goToBallRigt+0x4e0>)
 80026ce:	ed93 7b00 	vldr	d7, [r3]
 80026d2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80026d6:	4b69      	ldr	r3, [pc, #420]	; (800287c <goToBallRigt+0x4e4>)
 80026d8:	ed93 6b00 	vldr	d6, [r3]
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <goToBallRigt+0x4d8>)
 80026de:	ed93 7b00 	vldr	d7, [r3]
 80026e2:	ee26 9b07 	vmul.f64	d9, d6, d7
 80026e6:	4b61      	ldr	r3, [pc, #388]	; (800286c <goToBallRigt+0x4d4>)
 80026e8:	ed93 7b00 	vldr	d7, [r3]
 80026ec:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002848 <goToBallRigt+0x4b0>
 80026f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026f4:	eeb0 0b47 	vmov.f64	d0, d7
 80026f8:	f00d fe5e 	bl	80103b8 <cos>
 80026fc:	eeb0 7b40 	vmov.f64	d7, d0
 8002700:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002704:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002708:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8002840 <goToBallRigt+0x4a8>
 800270c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002710:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002714:	ee17 3a90 	vmov	r3, s15
 8002718:	b21a      	sxth	r2, r3
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <goToBallRigt+0x4f0>)
 800271c:	801a      	strh	r2, [r3, #0]
		  _motor4Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 800271e:	4b55      	ldr	r3, [pc, #340]	; (8002874 <goToBallRigt+0x4dc>)
 8002720:	ed93 6b00 	vldr	d6, [r3]
 8002724:	4b54      	ldr	r3, [pc, #336]	; (8002878 <goToBallRigt+0x4e0>)
 8002726:	ed93 7b00 	vldr	d7, [r3]
 800272a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800272e:	4b53      	ldr	r3, [pc, #332]	; (800287c <goToBallRigt+0x4e4>)
 8002730:	ed93 6b00 	vldr	d6, [r3]
 8002734:	4b4e      	ldr	r3, [pc, #312]	; (8002870 <goToBallRigt+0x4d8>)
 8002736:	ed93 7b00 	vldr	d7, [r3]
 800273a:	ee26 9b07 	vmul.f64	d9, d6, d7
 800273e:	4b4b      	ldr	r3, [pc, #300]	; (800286c <goToBallRigt+0x4d4>)
 8002740:	ed93 7b00 	vldr	d7, [r3]
 8002744:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8002848 <goToBallRigt+0x4b0>
 8002748:	ee36 7b47 	vsub.f64	d7, d6, d7
 800274c:	eeb0 0b47 	vmov.f64	d0, d7
 8002750:	f00d fe32 	bl	80103b8 <cos>
 8002754:	eeb0 7b40 	vmov.f64	d7, d0
 8002758:	ee29 7b07 	vmul.f64	d7, d9, d7
 800275c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002760:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002764:	ee17 3a90 	vmov	r3, s15
 8002768:	b21a      	sxth	r2, r3
 800276a:	4b48      	ldr	r3, [pc, #288]	; (800288c <goToBallRigt+0x4f4>)
 800276c:	801a      	strh	r2, [r3, #0]
		  controlMotor1(_motor1Speed);
 800276e:	4b44      	ldr	r3, [pc, #272]	; (8002880 <goToBallRigt+0x4e8>)
 8002770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fa4d 	bl	8000c14 <controlMotor1>
		  controlMotor2(_motor2Speed);
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <goToBallRigt+0x4ec>)
 800277c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fa83 	bl	8000c8c <controlMotor2>
		  controlMotor3(_motor3Speed);
 8002786:	4b40      	ldr	r3, [pc, #256]	; (8002888 <goToBallRigt+0x4f0>)
 8002788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fab9 	bl	8000d04 <controlMotor3>
		  controlMotor4(_motor4Speed);
 8002792:	4b3e      	ldr	r3, [pc, #248]	; (800288c <goToBallRigt+0x4f4>)
 8002794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe faef 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 800279e:	f7fe f8b9 	bl	8000914 <spinalCordTrans>
	  while(btn_X == 1)	//ch�? nhấn nút X -> tinh chỉnh
 80027a2:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <goToBallRigt+0x4f8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	f43f aece 	beq.w	8002548 <goToBallRigt+0x1b0>
	  }
	  passArm(PASSARM_DOWN);
 80027ac:	2201      	movs	r2, #1
 80027ae:	2104      	movs	r1, #4
 80027b0:	4838      	ldr	r0, [pc, #224]	; (8002894 <goToBallRigt+0x4fc>)
 80027b2:	f006 fc2b 	bl	800900c <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 80027b6:	2201      	movs	r2, #1
 80027b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027bc:	4835      	ldr	r0, [pc, #212]	; (8002894 <goToBallRigt+0x4fc>)
 80027be:	f006 fc25 	bl	800900c <HAL_GPIO_WritePin>
	  ball_temp[_Rigt] = rigtDistance;
 80027c2:	4b35      	ldr	r3, [pc, #212]	; (8002898 <goToBallRigt+0x500>)
 80027c4:	ed93 7b00 	vldr	d7, [r3]
 80027c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027cc:	ee17 3a90 	vmov	r3, s15
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b32      	ldr	r3, [pc, #200]	; (800289c <goToBallRigt+0x504>)
 80027d4:	801a      	strh	r2, [r3, #0]
	  startTime = HAL_GetTick();
 80027d6:	f002 f95f 	bl	8004a98 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <goToBallRigt+0x508>)
 80027de:	601a      	str	r2, [r3, #0]
//	  while(HAL_GetTick()-startTime < 1000)	//di chuyển vào vị trí lấy ball1
//	  {
//		  roR_Pit_Yaw_GoTo(ball_temp[_Rigt], ball[_Pitc], 0);
//	  }
//	  while(((abs(rigtDistance-ball_temp[_Rigt])>100)||(abs(pitchDistance-ball[_Pitc])>100))&&((HAL_GetTick()-startTime)<2000))
	  while(((HAL_GetTick()-startTime)<2000))
 80027e0:	e009      	b.n	80027f6 <goToBallRigt+0x45e>
	  {
		  roR_Pit_Yaw_GoTo(ball[_Rigt], ball[_Pitc], 0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe fe05 	bl	8001400 <roR_Pit_Yaw_GoTo>
	  while(((HAL_GetTick()-startTime)<2000))
 80027f6:	f002 f94f 	bl	8004a98 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <goToBallRigt+0x508>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002806:	d3ec      	bcc.n	80027e2 <goToBallRigt+0x44a>
//		  {
//			  brake();
//			  HAL_Delay(DEBOUNCE_MOVING_TIME);
//		  }
	  }
	  brake();
 8002808:	f7fe fde6 	bl	80013d8 <brake>
//	  HAL_Delay(500);
	  passHand(PASSHAND_CLOSE);	//gắp bóng
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002812:	4820      	ldr	r0, [pc, #128]	; (8002894 <goToBallRigt+0x4fc>)
 8002814:	f006 fbfa 	bl	800900c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002818:	2064      	movs	r0, #100	; 0x64
 800281a:	f002 f949 	bl	8004ab0 <HAL_Delay>
	  ST7920_Clear();
 800281e:	f7fe f963 	bl	8000ae8 <ST7920_Clear>
	  ST7920_SendString(2, 0, "btn_D waiting");
 8002822:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <goToBallRigt+0x50c>)
 8002824:	2100      	movs	r1, #0
 8002826:	2002      	movs	r0, #2
 8002828:	f7fe f91c 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(3, 0, "readyToPass");
 800282c:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <goToBallRigt+0x510>)
 800282e:	2100      	movs	r1, #0
 8002830:	2003      	movs	r0, #3
 8002832:	f7fe f917 	bl	8000a64 <ST7920_SendString>
	  while(zmanualRxPacket[0] != 'D'&&btn_D!=0)	//chờ manual nhấn nút
 8002836:	e043      	b.n	80028c0 <goToBallRigt+0x528>
 8002838:	7f3321d2 	.word	0x7f3321d2
 800283c:	4002d97c 	.word	0x4002d97c
	...
 8002848:	54442d18 	.word	0x54442d18
 800284c:	3fe921fb 	.word	0x3fe921fb
 8002850:	24000918 	.word	0x24000918
 8002854:	24000cb8 	.word	0x24000cb8
 8002858:	24000bb0 	.word	0x24000bb0
 800285c:	24000be8 	.word	0x24000be8
 8002860:	24000ba1 	.word	0x24000ba1
 8002864:	2400040d 	.word	0x2400040d
 8002868:	24000836 	.word	0x24000836
 800286c:	24000878 	.word	0x24000878
 8002870:	24000b90 	.word	0x24000b90
 8002874:	24000c00 	.word	0x24000c00
 8002878:	24000078 	.word	0x24000078
 800287c:	24000070 	.word	0x24000070
 8002880:	24000ae2 	.word	0x24000ae2
 8002884:	24000bd8 	.word	0x24000bd8
 8002888:	24000cbc 	.word	0x24000cbc
 800288c:	2400040a 	.word	0x2400040a
 8002890:	240001d9 	.word	0x240001d9
 8002894:	58020000 	.word	0x58020000
 8002898:	24000958 	.word	0x24000958
 800289c:	240001c0 	.word	0x240001c0
 80028a0:	24000d40 	.word	0x24000d40
 80028a4:	080114fc 	.word	0x080114fc
 80028a8:	0801150c 	.word	0x0801150c
	  {
		  roR_Pit_Yaw_GoTo(ball_temp[_Rigt], ball[_PitcWait], 0);
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <goToBallRigt+0x57c>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3306      	adds	r3, #6
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe fda0 	bl	8001400 <roR_Pit_Yaw_GoTo>
	  while(zmanualRxPacket[0] != 'D'&&btn_D!=0)	//chờ manual nhấn nút
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <goToBallRigt+0x580>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b44      	cmp	r3, #68	; 0x44
 80028c6:	d003      	beq.n	80028d0 <goToBallRigt+0x538>
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <goToBallRigt+0x584>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ed      	bne.n	80028ac <goToBallRigt+0x514>
	  }
	  brake();
 80028d0:	f7fe fd82 	bl	80013d8 <brake>
	  passArm(PASSARM_UP);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2104      	movs	r1, #4
 80028d8:	4811      	ldr	r0, [pc, #68]	; (8002920 <goToBallRigt+0x588>)
 80028da:	f006 fb97 	bl	800900c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80028de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028e2:	f002 f8e5 	bl	8004ab0 <HAL_Delay>
	  passArm(PASSARM_DOWN);
 80028e6:	2201      	movs	r2, #1
 80028e8:	2104      	movs	r1, #4
 80028ea:	480d      	ldr	r0, [pc, #52]	; (8002920 <goToBallRigt+0x588>)
 80028ec:	f006 fb8e 	bl	800900c <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 80028f0:	2201      	movs	r2, #1
 80028f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f6:	480a      	ldr	r0, [pc, #40]	; (8002920 <goToBallRigt+0x588>)
 80028f8:	f006 fb88 	bl	800900c <HAL_GPIO_WritePin>
	  startMode = 0;
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <goToBallRigt+0x58c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
	  ball_temp[_Rigt] = 0;
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <goToBallRigt+0x57c>)
 8002904:	2200      	movs	r2, #0
 8002906:	801a      	strh	r2, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	ecbd 8b04 	vpop	{d8-d9}
 8002912:	bd80      	pop	{r7, pc}
 8002914:	240001c0 	.word	0x240001c0
 8002918:	24000910 	.word	0x24000910
 800291c:	2400040e 	.word	0x2400040e
 8002920:	58020000 	.word	0x58020000
 8002924:	24000ba0 	.word	0x24000ba0

08002928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	ed2d 8b04 	vpush	{d8-d9}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002930:	f002 f82c 	bl	800498c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002934:	f000 fd2c 	bl	8003390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002938:	f001 f814 	bl	8003964 <MX_GPIO_Init>
  MX_DMA_Init();
 800293c:	f000 ffca 	bl	80038d4 <MX_DMA_Init>
  MX_ADC3_Init();
 8002940:	f000 fddc 	bl	80034fc <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8002944:	f000 fee2 	bl	800370c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002948:	f000 ff2c 	bl	80037a4 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800294c:	f000 fe5a 	bl	8003604 <MX_TIM7_Init>
  MX_UART7_Init();
 8002950:	f000 fe90 	bl	8003674 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8002954:	f000 ff72 	bl	800383c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8002958:	f7fd fe92 	bl	8000680 <delayUs_Init>
  peripheralUART_Init();
 800295c:	f7fd fed6 	bl	800070c <peripheralUART_Init>
  peripheralADC_Init();
 8002960:	f7fe f94a 	bl	8000bf8 <peripheralADC_Init>
  positionControl_Init();
 8002964:	f7fe fd7e 	bl	8001464 <positionControl_Init>
  cylinder_Init();
 8002968:	f7ff fc18 	bl	800219c <cylinder_Init>
  ST7920_Init();
 800296c:	f7fe f904 	bl	8000b78 <ST7920_Init>
  brake();
 8002970:	f7fe fd32 	bl	80013d8 <brake>
  compassReset();
 8002974:	f7fd ff98 	bl	80008a8 <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002978:	2200      	movs	r2, #0
 800297a:	2101      	movs	r1, #1
 800297c:	48c1      	ldr	r0, [pc, #772]	; (8002c84 <main+0x35c>)
 800297e:	f006 fb45 	bl	800900c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8002982:	2201      	movs	r2, #1
 8002984:	2102      	movs	r1, #2
 8002986:	48c0      	ldr	r0, [pc, #768]	; (8002c88 <main+0x360>)
 8002988:	f006 fb40 	bl	800900c <HAL_GPIO_WritePin>

  if(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//nếu như gạt phải khởi động
 800298c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002990:	48bd      	ldr	r0, [pc, #756]	; (8002c88 <main+0x360>)
 8002992:	f006 fb23 	bl	8008fdc <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d137      	bne.n	8002a0c <main+0xe4>
  {
	  ST7920_SendString(0,0, "SAMPLE:");
 800299c:	4abb      	ldr	r2, [pc, #748]	; (8002c8c <main+0x364>)
 800299e:	2100      	movs	r1, #0
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe f85f 	bl	8000a64 <ST7920_SendString>
	  getSample();
 80029a6:	f7ff f833 	bl	8001a10 <getSample>
	  while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//ch�? gạt phải
 80029aa:	e00e      	b.n	80029ca <main+0xa2>
	  {
		  ST7920_SendString(0,0, "PLEASE SWITCH");
 80029ac:	4ab8      	ldr	r2, [pc, #736]	; (8002c90 <main+0x368>)
 80029ae:	2100      	movs	r1, #0
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe f857 	bl	8000a64 <ST7920_SendString>
		  HAL_Delay(1000);
 80029b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ba:	f002 f879 	bl	8004ab0 <HAL_Delay>
		  ST7920_Clear();
 80029be:	f7fe f893 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(1000);
 80029c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029c6:	f002 f873 	bl	8004ab0 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//ch�? gạt phải
 80029ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ce:	48ae      	ldr	r0, [pc, #696]	; (8002c88 <main+0x360>)
 80029d0:	f006 fb04 	bl	8008fdc <HAL_GPIO_ReadPin>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0e8      	beq.n	80029ac <main+0x84>
	  }
	  while(1)
	  {
		  tracking++;
 80029da:	4bae      	ldr	r3, [pc, #696]	; (8002c94 <main+0x36c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	4aac      	ldr	r2, [pc, #688]	; (8002c94 <main+0x36c>)
 80029e2:	6013      	str	r3, [r2, #0]
		  ST7920_SendString(0,0, "PLEASE RESET");
 80029e4:	4aac      	ldr	r2, [pc, #688]	; (8002c98 <main+0x370>)
 80029e6:	2100      	movs	r1, #0
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fe f83b 	bl	8000a64 <ST7920_SendString>
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80029ee:	2102      	movs	r1, #2
 80029f0:	48a5      	ldr	r0, [pc, #660]	; (8002c88 <main+0x360>)
 80029f2:	f006 fb24 	bl	800903e <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80029f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029fa:	f002 f859 	bl	8004ab0 <HAL_Delay>
		  ST7920_Clear();
 80029fe:	f7fe f873 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(500);
 8002a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a06:	f002 f853 	bl	8004ab0 <HAL_Delay>
		  tracking++;
 8002a0a:	e7e6      	b.n	80029da <main+0xb2>
	  }
  }
  else	// nếu như gạt trái HAL_Read == 1
  {
	  ST7920_SendString(0,0, "FREE MODE");
 8002a0c:	4aa3      	ldr	r2, [pc, #652]	; (8002c9c <main+0x374>)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe f827 	bl	8000a64 <ST7920_SendString>
	  tracking = 148;
 8002a16:	4b9f      	ldr	r3, [pc, #636]	; (8002c94 <main+0x36c>)
 8002a18:	2294      	movs	r2, #148	; 0x94
 8002a1a:	601a      	str	r2, [r3, #0]
	  readFLASH();
 8002a1c:	f7fe ff66 	bl	80018ec <readFLASH>
	  tracking = 150;
 8002a20:	4b9c      	ldr	r3, [pc, #624]	; (8002c94 <main+0x36c>)
 8002a22:	2296      	movs	r2, #150	; 0x96
 8002a24:	601a      	str	r2, [r3, #0]
  }
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4897      	ldr	r0, [pc, #604]	; (8002c88 <main+0x360>)
 8002a2c:	f006 faee 	bl	800900c <HAL_GPIO_WritePin>
  HAL_Delay(INIT_TIME);
 8002a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a34:	f002 f83c 	bl	8004ab0 <HAL_Delay>
  if(btn_Sta == 0)
 8002a38:	4b99      	ldr	r3, [pc, #612]	; (8002ca0 <main+0x378>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d114      	bne.n	8002a6a <main+0x142>
  {
	  while(1)
	  {
		  ST7920_SendString(0, 0, "disconBluetooth");
 8002a40:	4a98      	ldr	r2, [pc, #608]	; (8002ca4 <main+0x37c>)
 8002a42:	2100      	movs	r1, #0
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe f80d 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(1, 0, "pleaseReset");
 8002a4a:	4a97      	ldr	r2, [pc, #604]	; (8002ca8 <main+0x380>)
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f7fe f808 	bl	8000a64 <ST7920_SendString>
		  HAL_Delay(500);
 8002a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a58:	f002 f82a 	bl	8004ab0 <HAL_Delay>
		  ST7920_Clear();
 8002a5c:	f7fe f844 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(500);
 8002a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a64:	f002 f824 	bl	8004ab0 <HAL_Delay>
		  ST7920_SendString(0, 0, "disconBluetooth");
 8002a68:	e7ea      	b.n	8002a40 <main+0x118>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  wait4SelectMode();
 8002a6a:	f7ff fbc1 	bl	80021f0 <wait4SelectMode>
	  if(startMode == TO_SHOOT)
 8002a6e:	4b8f      	ldr	r3, [pc, #572]	; (8002cac <main+0x384>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	f040 81fb 	bne.w	8002e6e <main+0x546>
	  {
		  MAX_PIT_PID = 250;
 8002a78:	4b8d      	ldr	r3, [pc, #564]	; (8002cb0 <main+0x388>)
 8002a7a:	22fa      	movs	r2, #250	; 0xfa
 8002a7c:	801a      	strh	r2, [r3, #0]
		  MAX_ROL_PID = 250;
 8002a7e:	4b8d      	ldr	r3, [pc, #564]	; (8002cb4 <main+0x38c>)
 8002a80:	22fa      	movs	r2, #250	; 0xfa
 8002a82:	801a      	strh	r2, [r3, #0]
		  MAX_ROR_PID = 250;
 8002a84:	4b8c      	ldr	r3, [pc, #560]	; (8002cb8 <main+0x390>)
 8002a86:	22fa      	movs	r2, #250	; 0xfa
 8002a88:	801a      	strh	r2, [r3, #0]
		  passArm(PASSARM_UP);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	488b      	ldr	r0, [pc, #556]	; (8002cbc <main+0x394>)
 8002a90:	f006 fabc 	bl	800900c <HAL_GPIO_WritePin>
		  passHand(PASSHAND_OPEN);
 8002a94:	2201      	movs	r2, #1
 8002a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a9a:	4888      	ldr	r0, [pc, #544]	; (8002cbc <main+0x394>)
 8002a9c:	f006 fab6 	bl	800900c <HAL_GPIO_WritePin>
		  startTime = HAL_GetTick();
 8002aa0:	f001 fffa 	bl	8004a98 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b86      	ldr	r3, [pc, #536]	; (8002cc0 <main+0x398>)
 8002aa8:	601a      	str	r2, [r3, #0]
		  ST7920_SendString(0,0, "btn_Sel waiting");
 8002aaa:	4a86      	ldr	r2, [pc, #536]	; (8002cc4 <main+0x39c>)
 8002aac:	2100      	movs	r1, #0
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fd ffd8 	bl	8000a64 <ST7920_SendString>
		  while((btn_Sel==1))	//khi còn thành
 8002ab4:	e006      	b.n	8002ac4 <main+0x19c>
		  {
			  roR_Pit_Yaw_GoTo(700, 4000, -900);
 8002ab6:	4a84      	ldr	r2, [pc, #528]	; (8002cc8 <main+0x3a0>)
 8002ab8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002abc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002ac0:	f7fe fc9e 	bl	8001400 <roR_Pit_Yaw_GoTo>
		  while((btn_Sel==1))	//khi còn thành
 8002ac4:	4b81      	ldr	r3, [pc, #516]	; (8002ccc <main+0x3a4>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d0f4      	beq.n	8002ab6 <main+0x18e>
		  }
		  ST7920_SendString(0,0, "btn_X   waiting");
 8002acc:	4a80      	ldr	r2, [pc, #512]	; (8002cd0 <main+0x3a8>)
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7fd ffc7 	bl	8000a64 <ST7920_SendString>
		  brake();
 8002ad6:	f7fe fc7f 	bl	80013d8 <brake>
//		  while(1);
//		  while((btn_X==1))	//đi chéo
//		  {
//			  roR_Pit_Yaw_GoTo(500, 3000, -900);
//		  }
		  startTime = HAL_GetTick();
 8002ada:	f001 ffdd 	bl	8004a98 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b77      	ldr	r3, [pc, #476]	; (8002cc0 <main+0x398>)
 8002ae2:	601a      	str	r2, [r3, #0]
//		  while(HAL_GetTick()-startTime < 3000)
		  while((btn_X==1))	//đi chéo
 8002ae4:	e006      	b.n	8002af4 <main+0x1cc>
		  {
			  roR_Pit_Yaw_GoTo(800, 2000, -900);
 8002ae6:	4a78      	ldr	r2, [pc, #480]	; (8002cc8 <main+0x3a0>)
 8002ae8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002aec:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002af0:	f7fe fc86 	bl	8001400 <roR_Pit_Yaw_GoTo>
		  while((btn_X==1))	//đi chéo
 8002af4:	4b77      	ldr	r3, [pc, #476]	; (8002cd4 <main+0x3ac>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d0f4      	beq.n	8002ae6 <main+0x1be>
		  }
		  ST7920_Clear();
 8002afc:	f7fd fff4 	bl	8000ae8 <ST7920_Clear>
		  ST7920_SendString(0, 0, "ready2Put Q");
 8002b00:	4a75      	ldr	r2, [pc, #468]	; (8002cd8 <main+0x3b0>)
 8002b02:	2100      	movs	r1, #0
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fd ffad 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(1, 0, "AIMING");
 8002b0a:	4a74      	ldr	r2, [pc, #464]	; (8002cdc <main+0x3b4>)
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7fd ffa8 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(2, 0, "btn_Q waiting");
 8002b14:	4a72      	ldr	r2, [pc, #456]	; (8002ce0 <main+0x3b8>)
 8002b16:	2100      	movs	r1, #0
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f7fd ffa3 	bl	8000a64 <ST7920_SendString>
		  while(btn_Q!=0)	//khi chưa nhấn nút Q;
 8002b1e:	e046      	b.n	8002bae <main+0x286>
		  {
			  if((btn_leftLeft==1)&&(btn_leftRigt==1))	//khi chưa nhấn 2 nút < và >
 8002b20:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <main+0x3bc>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <main+0x20e>
 8002b28:	4b6f      	ldr	r3, [pc, #444]	; (8002ce8 <main+0x3c0>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d102      	bne.n	8002b36 <main+0x20e>
			  {
				  brake();
 8002b30:	f7fe fc52 	bl	80013d8 <brake>
 8002b34:	e03b      	b.n	8002bae <main+0x286>
			  }
			  else if((btn_leftLeft==0)&&(btn_leftRigt==0))	//khi nhấn < + >
 8002b36:	4b6b      	ldr	r3, [pc, #428]	; (8002ce4 <main+0x3bc>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <main+0x224>
 8002b3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <main+0x3c0>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <main+0x224>
			  {
				  brake();
 8002b46:	f7fe fc47 	bl	80013d8 <brake>
 8002b4a:	e030      	b.n	8002bae <main+0x286>
			  }
			  else if((btn_leftLeft==0)&&(btn_leftRigt==1))	//khi nhấn <
 8002b4c:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <main+0x3bc>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d116      	bne.n	8002b82 <main+0x25a>
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <main+0x3c0>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d112      	bne.n	8002b82 <main+0x25a>
			  {
				  controlMotor1(turnSpeed);
 8002b5c:	f06f 0013 	mvn.w	r0, #19
 8002b60:	f7fe f858 	bl	8000c14 <controlMotor1>
				  controlMotor2(turnSpeed);
 8002b64:	f06f 0013 	mvn.w	r0, #19
 8002b68:	f7fe f890 	bl	8000c8c <controlMotor2>
				  controlMotor3(turnSpeed);
 8002b6c:	f06f 0013 	mvn.w	r0, #19
 8002b70:	f7fe f8c8 	bl	8000d04 <controlMotor3>
				  controlMotor4(turnSpeed);
 8002b74:	f06f 0013 	mvn.w	r0, #19
 8002b78:	f7fe f900 	bl	8000d7c <controlMotor4>
				  spinalCordTrans();
 8002b7c:	f7fd feca 	bl	8000914 <spinalCordTrans>
 8002b80:	e015      	b.n	8002bae <main+0x286>
			  }
			  else if((btn_leftLeft==1)&&(btn_leftRigt==0))	//khi nhấn >
 8002b82:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <main+0x3bc>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d111      	bne.n	8002bae <main+0x286>
 8002b8a:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <main+0x3c0>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <main+0x286>
			  {
				  controlMotor1(-turnSpeed);
 8002b92:	2014      	movs	r0, #20
 8002b94:	f7fe f83e 	bl	8000c14 <controlMotor1>
				  controlMotor2(-turnSpeed);
 8002b98:	2014      	movs	r0, #20
 8002b9a:	f7fe f877 	bl	8000c8c <controlMotor2>
				  controlMotor3(-turnSpeed);
 8002b9e:	2014      	movs	r0, #20
 8002ba0:	f7fe f8b0 	bl	8000d04 <controlMotor3>
				  controlMotor4(-turnSpeed);
 8002ba4:	2014      	movs	r0, #20
 8002ba6:	f7fe f8e9 	bl	8000d7c <controlMotor4>
				  spinalCordTrans();
 8002baa:	f7fd feb3 	bl	8000914 <spinalCordTrans>
		  while(btn_Q!=0)	//khi chưa nhấn nút Q;
 8002bae:	4b4f      	ldr	r3, [pc, #316]	; (8002cec <main+0x3c4>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1b4      	bne.n	8002b20 <main+0x1f8>
			  }
		  }
		  ST7920_SendString(2,0,"              ");
 8002bb6:	4a4e      	ldr	r2, [pc, #312]	; (8002cf0 <main+0x3c8>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2002      	movs	r0, #2
 8002bbc:	f7fd ff52 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(2,0,"PUTTING Q");
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	; (8002cf4 <main+0x3cc>)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f7fd ff4d 	bl	8000a64 <ST7920_SendString>
		  putQ(PUTQ_DOWN);//hạ putQ
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2120      	movs	r1, #32
 8002bce:	482d      	ldr	r0, [pc, #180]	; (8002c84 <main+0x35c>)
 8002bd0:	f006 fa1c 	bl	800900c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);//ch�? ...s
 8002bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bd8:	f001 ff6a 	bl	8004ab0 <HAL_Delay>
		  gripperQ(GRIPPERQ_OPEN);//mở gripperQ
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002be2:	4836      	ldr	r0, [pc, #216]	; (8002cbc <main+0x394>)
 8002be4:	f006 fa12 	bl	800900c <HAL_GPIO_WritePin>
		  HAL_Delay(500);//ch�? ...s
 8002be8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bec:	f001 ff60 	bl	8004ab0 <HAL_Delay>
		  while((btn_A==1)&&(btn_E==1))
 8002bf0:	e00e      	b.n	8002c10 <main+0x2e8>
		  {
			  ST7920_SendString(1, 0, "                ");
 8002bf2:	4a41      	ldr	r2, [pc, #260]	; (8002cf8 <main+0x3d0>)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f7fd ff34 	bl	8000a64 <ST7920_SendString>
			  ST7920_SendString(2, 0, "                ");
 8002bfc:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <main+0x3d0>)
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2002      	movs	r0, #2
 8002c02:	f7fd ff2f 	bl	8000a64 <ST7920_SendString>
			  ST7920_SendString(2, 0, "A or E");
 8002c06:	4a3d      	ldr	r2, [pc, #244]	; (8002cfc <main+0x3d4>)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2002      	movs	r0, #2
 8002c0c:	f7fd ff2a 	bl	8000a64 <ST7920_SendString>
		  while((btn_A==1)&&(btn_E==1))
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <main+0x3d8>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d103      	bne.n	8002c20 <main+0x2f8>
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <main+0x3dc>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d0e8      	beq.n	8002bf2 <main+0x2ca>
		  }
		  if(btn_A == 0)
 8002c20:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <main+0x3d8>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10c      	bne.n	8002c42 <main+0x31a>
		  {
			  ST7920_Clear();
 8002c28:	f7fd ff5e 	bl	8000ae8 <ST7920_Clear>
			  ST7920_SendString(0,0,"SHOOT!!!!");
 8002c2c:	4a36      	ldr	r2, [pc, #216]	; (8002d08 <main+0x3e0>)
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fd ff17 	bl	8000a64 <ST7920_SendString>
			  legShoot();//shoot
 8002c36:	f7fe fc25 	bl	8001484 <legShoot>
			  HAL_Delay(500);
 8002c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c3e:	f001 ff37 	bl	8004ab0 <HAL_Delay>
		  }
		  else if(btn_E == 0)
		  {
		  }
		  putQ(PUTQ_UP);//nâng putQ
 8002c42:	2201      	movs	r2, #1
 8002c44:	2120      	movs	r1, #32
 8002c46:	480f      	ldr	r0, [pc, #60]	; (8002c84 <main+0x35c>)
 8002c48:	f006 f9e0 	bl	800900c <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8002c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c50:	f001 ff2e 	bl	8004ab0 <HAL_Delay>
		  gripperQ(GRIPPERQ_CLOSE);//đóng gripperQ
 8002c54:	2200      	movs	r2, #0
 8002c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c5a:	4818      	ldr	r0, [pc, #96]	; (8002cbc <main+0x394>)
 8002c5c:	f006 f9d6 	bl	800900c <HAL_GPIO_WritePin>
//		  HAL_Delay(1000);//ch�? ...s
		  ST7920_Clear();
 8002c60:	f7fd ff42 	bl	8000ae8 <ST7920_Clear>
		  ST7920_SendString(0, 0, "ready2Put E");
 8002c64:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <main+0x3e4>)
 8002c66:	2100      	movs	r1, #0
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fd fefb 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(1, 0, "AIMING");
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <main+0x3b4>)
 8002c70:	2100      	movs	r1, #0
 8002c72:	2001      	movs	r0, #1
 8002c74:	f7fd fef6 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(2, 0, "btn_E waiting");
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <main+0x3e8>)
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f7fd fef1 	bl	8000a64 <ST7920_SendString>
		  while(btn_E==1)	//khi chưa nhấn E
 8002c82:	e08e      	b.n	8002da2 <main+0x47a>
 8002c84:	58020400 	.word	0x58020400
 8002c88:	58021000 	.word	0x58021000
 8002c8c:	08011518 	.word	0x08011518
 8002c90:	08011520 	.word	0x08011520
 8002c94:	24000bbc 	.word	0x24000bbc
 8002c98:	08011530 	.word	0x08011530
 8002c9c:	08011540 	.word	0x08011540
 8002ca0:	24000bd6 	.word	0x24000bd6
 8002ca4:	0801154c 	.word	0x0801154c
 8002ca8:	0801155c 	.word	0x0801155c
 8002cac:	24000ba0 	.word	0x24000ba0
 8002cb0:	2400005a 	.word	0x2400005a
 8002cb4:	24000058 	.word	0x24000058
 8002cb8:	24000040 	.word	0x24000040
 8002cbc:	58020000 	.word	0x58020000
 8002cc0:	24000d40 	.word	0x24000d40
 8002cc4:	08011568 	.word	0x08011568
 8002cc8:	fffffc7c 	.word	0xfffffc7c
 8002ccc:	24000904 	.word	0x24000904
 8002cd0:	08011578 	.word	0x08011578
 8002cd4:	240001d9 	.word	0x240001d9
 8002cd8:	08011588 	.word	0x08011588
 8002cdc:	08011594 	.word	0x08011594
 8002ce0:	0801159c 	.word	0x0801159c
 8002ce4:	2400040d 	.word	0x2400040d
 8002ce8:	24000ba1 	.word	0x24000ba1
 8002cec:	24000beb 	.word	0x24000beb
 8002cf0:	080115ac 	.word	0x080115ac
 8002cf4:	080115bc 	.word	0x080115bc
 8002cf8:	080115c8 	.word	0x080115c8
 8002cfc:	080115dc 	.word	0x080115dc
 8002d00:	24000bb4 	.word	0x24000bb4
 8002d04:	24000410 	.word	0x24000410
 8002d08:	080115e4 	.word	0x080115e4
 8002d0c:	080115f0 	.word	0x080115f0
 8002d10:	080115fc 	.word	0x080115fc
		  {

			  if((btn_leftLeft==1)&&(btn_leftRigt==1))	//khi chưa nhấn 2 nút < và >
 8002d14:	4bb8      	ldr	r3, [pc, #736]	; (8002ff8 <main+0x6d0>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d106      	bne.n	8002d2a <main+0x402>
 8002d1c:	4bb7      	ldr	r3, [pc, #732]	; (8002ffc <main+0x6d4>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d102      	bne.n	8002d2a <main+0x402>
			  {
				  brake();
 8002d24:	f7fe fb58 	bl	80013d8 <brake>
 8002d28:	e03b      	b.n	8002da2 <main+0x47a>
			  }
			  else if((btn_leftLeft==0)&&(btn_leftRigt==0))	//khi nhấn < + >
 8002d2a:	4bb3      	ldr	r3, [pc, #716]	; (8002ff8 <main+0x6d0>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <main+0x418>
 8002d32:	4bb2      	ldr	r3, [pc, #712]	; (8002ffc <main+0x6d4>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <main+0x418>
			  {
				  brake();
 8002d3a:	f7fe fb4d 	bl	80013d8 <brake>
 8002d3e:	e030      	b.n	8002da2 <main+0x47a>
			  }
			  else if((btn_leftLeft==0)&&(btn_leftRigt==1))	//khi nhấn <
 8002d40:	4bad      	ldr	r3, [pc, #692]	; (8002ff8 <main+0x6d0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <main+0x44e>
 8002d48:	4bac      	ldr	r3, [pc, #688]	; (8002ffc <main+0x6d4>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d112      	bne.n	8002d76 <main+0x44e>
			  {
				  controlMotor1(turnSpeed);
 8002d50:	f06f 0013 	mvn.w	r0, #19
 8002d54:	f7fd ff5e 	bl	8000c14 <controlMotor1>
				  controlMotor2(turnSpeed);
 8002d58:	f06f 0013 	mvn.w	r0, #19
 8002d5c:	f7fd ff96 	bl	8000c8c <controlMotor2>
				  controlMotor3(turnSpeed);
 8002d60:	f06f 0013 	mvn.w	r0, #19
 8002d64:	f7fd ffce 	bl	8000d04 <controlMotor3>
				  controlMotor4(turnSpeed);
 8002d68:	f06f 0013 	mvn.w	r0, #19
 8002d6c:	f7fe f806 	bl	8000d7c <controlMotor4>
				  spinalCordTrans();
 8002d70:	f7fd fdd0 	bl	8000914 <spinalCordTrans>
 8002d74:	e015      	b.n	8002da2 <main+0x47a>
			  }
			  else if((btn_leftLeft==1)&&(btn_leftRigt==0))	//khi nhấn >
 8002d76:	4ba0      	ldr	r3, [pc, #640]	; (8002ff8 <main+0x6d0>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d111      	bne.n	8002da2 <main+0x47a>
 8002d7e:	4b9f      	ldr	r3, [pc, #636]	; (8002ffc <main+0x6d4>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <main+0x47a>
			  {
				  controlMotor1(-turnSpeed);
 8002d86:	2014      	movs	r0, #20
 8002d88:	f7fd ff44 	bl	8000c14 <controlMotor1>
				  controlMotor2(-turnSpeed);
 8002d8c:	2014      	movs	r0, #20
 8002d8e:	f7fd ff7d 	bl	8000c8c <controlMotor2>
				  controlMotor3(-turnSpeed);
 8002d92:	2014      	movs	r0, #20
 8002d94:	f7fd ffb6 	bl	8000d04 <controlMotor3>
				  controlMotor4(-turnSpeed);
 8002d98:	2014      	movs	r0, #20
 8002d9a:	f7fd ffef 	bl	8000d7c <controlMotor4>
				  spinalCordTrans();
 8002d9e:	f7fd fdb9 	bl	8000914 <spinalCordTrans>
		  while(btn_E==1)	//khi chưa nhấn E
 8002da2:	4b97      	ldr	r3, [pc, #604]	; (8003000 <main+0x6d8>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d0b4      	beq.n	8002d14 <main+0x3ec>
			  }
		  }
		  ST7920_SendString(2,0,"              ");
 8002daa:	4a96      	ldr	r2, [pc, #600]	; (8003004 <main+0x6dc>)
 8002dac:	2100      	movs	r1, #0
 8002dae:	2002      	movs	r0, #2
 8002db0:	f7fd fe58 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(2,0,"PUTTING E");
 8002db4:	4a94      	ldr	r2, [pc, #592]	; (8003008 <main+0x6e0>)
 8002db6:	2100      	movs	r1, #0
 8002db8:	2002      	movs	r0, #2
 8002dba:	f7fd fe53 	bl	8000a64 <ST7920_SendString>
	  	  putE(PUTE_DOWN);//hạ putE
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2140      	movs	r1, #64	; 0x40
 8002dc2:	4892      	ldr	r0, [pc, #584]	; (800300c <main+0x6e4>)
 8002dc4:	f006 f922 	bl	800900c <HAL_GPIO_WritePin>
	  	  HAL_Delay(1000);//ch�? ...s
 8002dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dcc:	f001 fe70 	bl	8004ab0 <HAL_Delay>
	  	  gripperE(GRIPPERE_OPEN);//mở gripperE
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dd6:	488e      	ldr	r0, [pc, #568]	; (8003010 <main+0x6e8>)
 8002dd8:	f006 f918 	bl	800900c <HAL_GPIO_WritePin>
//		  HAL_Delay(500);//ch�? ...s
	  	  while((btn_A == 1)&&(btn_Q == 1))
 8002ddc:	e00e      	b.n	8002dfc <main+0x4d4>
	  	  {
			  ST7920_SendString(1, 0, "                ");
 8002dde:	4a8d      	ldr	r2, [pc, #564]	; (8003014 <main+0x6ec>)
 8002de0:	2100      	movs	r1, #0
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7fd fe3e 	bl	8000a64 <ST7920_SendString>
			  ST7920_SendString(2, 0, "                ");
 8002de8:	4a8a      	ldr	r2, [pc, #552]	; (8003014 <main+0x6ec>)
 8002dea:	2100      	movs	r1, #0
 8002dec:	2002      	movs	r0, #2
 8002dee:	f7fd fe39 	bl	8000a64 <ST7920_SendString>
			  ST7920_SendString(2, 0, "A or E");
 8002df2:	4a89      	ldr	r2, [pc, #548]	; (8003018 <main+0x6f0>)
 8002df4:	2100      	movs	r1, #0
 8002df6:	2002      	movs	r0, #2
 8002df8:	f7fd fe34 	bl	8000a64 <ST7920_SendString>
	  	  while((btn_A == 1)&&(btn_Q == 1))
 8002dfc:	4b87      	ldr	r3, [pc, #540]	; (800301c <main+0x6f4>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d103      	bne.n	8002e0c <main+0x4e4>
 8002e04:	4b86      	ldr	r3, [pc, #536]	; (8003020 <main+0x6f8>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d0e8      	beq.n	8002dde <main+0x4b6>
	  	  }
	  	  if(btn_A == 0)
 8002e0c:	4b83      	ldr	r3, [pc, #524]	; (800301c <main+0x6f4>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10c      	bne.n	8002e2e <main+0x506>
		  {
	  		  ST7920_Clear();
 8002e14:	f7fd fe68 	bl	8000ae8 <ST7920_Clear>
	  		  ST7920_SendString(0,0,"SHOOT!!!!");
 8002e18:	4a82      	ldr	r2, [pc, #520]	; (8003024 <main+0x6fc>)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fd fe21 	bl	8000a64 <ST7920_SendString>
			  legShoot();//shoot
 8002e22:	f7fe fb2f 	bl	8001484 <legShoot>
			  HAL_Delay(500);
 8002e26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e2a:	f001 fe41 	bl	8004ab0 <HAL_Delay>
		  }
		  else if(btn_E == 0)
		  {
		  }
	  	  ST7920_Clear();
 8002e2e:	f7fd fe5b 	bl	8000ae8 <ST7920_Clear>
	  	  ST7920_SendString(0,0,"SHOOTED");
 8002e32:	4a7d      	ldr	r2, [pc, #500]	; (8003028 <main+0x700>)
 8002e34:	2100      	movs	r1, #0
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fd fe14 	bl	8000a64 <ST7920_SendString>
		  putE(PUTE_UP);//nâng putE
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2140      	movs	r1, #64	; 0x40
 8002e40:	4872      	ldr	r0, [pc, #456]	; (800300c <main+0x6e4>)
 8002e42:	f006 f8e3 	bl	800900c <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8002e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e4a:	f001 fe31 	bl	8004ab0 <HAL_Delay>
		  gripperE(GRIPPERE_CLOSE);//đóng gripperE
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e54:	486e      	ldr	r0, [pc, #440]	; (8003010 <main+0x6e8>)
 8002e56:	f006 f8d9 	bl	800900c <HAL_GPIO_WritePin>
		  MAX_PIT_PID = 100;
 8002e5a:	4b74      	ldr	r3, [pc, #464]	; (800302c <main+0x704>)
 8002e5c:	2264      	movs	r2, #100	; 0x64
 8002e5e:	801a      	strh	r2, [r3, #0]
		  MAX_ROL_PID = 100;
 8002e60:	4b73      	ldr	r3, [pc, #460]	; (8003030 <main+0x708>)
 8002e62:	2264      	movs	r2, #100	; 0x64
 8002e64:	801a      	strh	r2, [r3, #0]
		  MAX_ROR_PID = 100;
 8002e66:	4b73      	ldr	r3, [pc, #460]	; (8003034 <main+0x70c>)
 8002e68:	2264      	movs	r2, #100	; 0x64
 8002e6a:	801a      	strh	r2, [r3, #0]
 8002e6c:	e5fd      	b.n	8002a6a <main+0x142>
	  }
	  else if(startMode == BALL1)
 8002e6e:	4b72      	ldr	r3, [pc, #456]	; (8003038 <main+0x710>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d103      	bne.n	8002e7e <main+0x556>
	  {
		  goToBallRigt(ball1);
 8002e76:	4871      	ldr	r0, [pc, #452]	; (800303c <main+0x714>)
 8002e78:	f7ff fa8e 	bl	8002398 <goToBallRigt>
 8002e7c:	e5f5      	b.n	8002a6a <main+0x142>
	  }
	  else if(startMode == BALL2)
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <main+0x710>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <main+0x566>
	  {
		  goToBallRigt(ball2);
 8002e86:	486e      	ldr	r0, [pc, #440]	; (8003040 <main+0x718>)
 8002e88:	f7ff fa86 	bl	8002398 <goToBallRigt>
 8002e8c:	e5ed      	b.n	8002a6a <main+0x142>
	  }
	  else if(startMode == BALL3)
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <main+0x710>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d103      	bne.n	8002e9e <main+0x576>
	  {
		  goToBallRigt(ball3);
 8002e96:	486b      	ldr	r0, [pc, #428]	; (8003044 <main+0x71c>)
 8002e98:	f7ff fa7e 	bl	8002398 <goToBallRigt>
 8002e9c:	e5e5      	b.n	8002a6a <main+0x142>
	  }
	  else if(startMode == BALL4)
 8002e9e:	4b66      	ldr	r3, [pc, #408]	; (8003038 <main+0x710>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d103      	bne.n	8002eae <main+0x586>
	  {
		  goToBallRigt(ball4);
 8002ea6:	4868      	ldr	r0, [pc, #416]	; (8003048 <main+0x720>)
 8002ea8:	f7ff fa76 	bl	8002398 <goToBallRigt>
 8002eac:	e5dd      	b.n	8002a6a <main+0x142>
	  }
	  else if(startMode == LOAD_BALL)	//v�? vị trí load ball
 8002eae:	4b62      	ldr	r3, [pc, #392]	; (8003038 <main+0x710>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	f47f add9 	bne.w	8002a6a <main+0x142>
	  {
		  passArm(PASSARM_UP);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2104      	movs	r1, #4
 8002ebc:	4854      	ldr	r0, [pc, #336]	; (8003010 <main+0x6e8>)
 8002ebe:	f006 f8a5 	bl	800900c <HAL_GPIO_WritePin>
		  startTime = HAL_GetTick();
 8002ec2:	f001 fde9 	bl	8004a98 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b60      	ldr	r3, [pc, #384]	; (800304c <main+0x724>)
 8002eca:	601a      	str	r2, [r3, #0]
		  while(HAL_GetTick()-startTime<2000)
 8002ecc:	e006      	b.n	8002edc <main+0x5b4>
		  {
			  roR_Pit_Yaw_GoTo(600, 500, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ed4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002ed8:	f7fe fa92 	bl	8001400 <roR_Pit_Yaw_GoTo>
		  while(HAL_GetTick()-startTime<2000)
 8002edc:	f001 fddc 	bl	8004a98 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b5a      	ldr	r3, [pc, #360]	; (800304c <main+0x724>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002eec:	d3ef      	bcc.n	8002ece <main+0x5a6>
		  }
		  ST7920_SendString(3, 0, "                ");
 8002eee:	4a49      	ldr	r2, [pc, #292]	; (8003014 <main+0x6ec>)
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	f7fd fdb6 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3, 0, "returning2-900d");
 8002ef8:	4a55      	ldr	r2, [pc, #340]	; (8003050 <main+0x728>)
 8002efa:	2100      	movs	r1, #0
 8002efc:	2003      	movs	r0, #3
 8002efe:	f7fd fdb1 	bl	8000a64 <ST7920_SendString>
		  startTime = HAL_GetTick();
 8002f02:	f001 fdc9 	bl	8004a98 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <main+0x724>)
 8002f0a:	601a      	str	r2, [r3, #0]
		  while(((compassData-(-900))>=10)&&((HAL_GetTick()-startTime)<800))//chưa đủ góc->hiệu chỉnh xoay đến -900
 8002f0c:	e040      	b.n	8002f90 <main+0x668>
		  {
			  PIDyaw(compassData, -900);
 8002f0e:	4b51      	ldr	r3, [pc, #324]	; (8003054 <main+0x72c>)
 8002f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f14:	4950      	ldr	r1, [pc, #320]	; (8003058 <main+0x730>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd ff6e 	bl	8000df8 <PIDyaw>
			  controlMotor1(yawPID);
 8002f1c:	4b4f      	ldr	r3, [pc, #316]	; (800305c <main+0x734>)
 8002f1e:	ed93 7b00 	vldr	d7, [r3]
 8002f22:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002f26:	ee17 0a90 	vmov	r0, s15
 8002f2a:	f7fd fe73 	bl	8000c14 <controlMotor1>
			  controlMotor2(yawPID);
 8002f2e:	4b4b      	ldr	r3, [pc, #300]	; (800305c <main+0x734>)
 8002f30:	ed93 7b00 	vldr	d7, [r3]
 8002f34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002f38:	ee17 0a90 	vmov	r0, s15
 8002f3c:	f7fd fea6 	bl	8000c8c <controlMotor2>
			  controlMotor3(yawPID);
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <main+0x734>)
 8002f42:	ed93 7b00 	vldr	d7, [r3]
 8002f46:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002f4a:	ee17 0a90 	vmov	r0, s15
 8002f4e:	f7fd fed9 	bl	8000d04 <controlMotor3>
			  controlMotor4(yawPID);
 8002f52:	4b42      	ldr	r3, [pc, #264]	; (800305c <main+0x734>)
 8002f54:	ed93 7b00 	vldr	d7, [r3]
 8002f58:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002f5c:	ee17 0a90 	vmov	r0, s15
 8002f60:	f7fd ff0c 	bl	8000d7c <controlMotor4>
			  spinalCordTrans();
 8002f64:	f7fd fcd6 	bl	8000914 <spinalCordTrans>
			  if(abs(compassData-(-900))<10)
 8002f68:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <main+0x72c>)
 8002f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6e:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002f72:	f113 0f09 	cmn.w	r3, #9
 8002f76:	db0b      	blt.n	8002f90 <main+0x668>
 8002f78:	4b36      	ldr	r3, [pc, #216]	; (8003054 <main+0x72c>)
 8002f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7e:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002f82:	2b09      	cmp	r3, #9
 8002f84:	dc04      	bgt.n	8002f90 <main+0x668>
			  {
				  brake();
 8002f86:	f7fe fa27 	bl	80013d8 <brake>
				  HAL_Delay(DEBOUNCE_MOVING_TIME);
 8002f8a:	2064      	movs	r0, #100	; 0x64
 8002f8c:	f001 fd90 	bl	8004ab0 <HAL_Delay>
		  while(((compassData-(-900))>=10)&&((HAL_GetTick()-startTime)<800))//chưa đủ góc->hiệu chỉnh xoay đến -900
 8002f90:	4b30      	ldr	r3, [pc, #192]	; (8003054 <main+0x72c>)
 8002f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f96:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002f9a:	2b09      	cmp	r3, #9
 8002f9c:	dd08      	ble.n	8002fb0 <main+0x688>
 8002f9e:	f001 fd7b 	bl	8004a98 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <main+0x724>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002fae:	d3ae      	bcc.n	8002f0e <main+0x5e6>
			  }
		  }
		  ST7920_Clear();
 8002fb0:	f7fd fd9a 	bl	8000ae8 <ST7920_Clear>

		  ST7920_SendString(2, 0, "Sel");
 8002fb4:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <main+0x738>)
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f7fd fd53 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3, 0, "autTningStaPoint");
 8002fbe:	4a29      	ldr	r2, [pc, #164]	; (8003064 <main+0x73c>)
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f7fd fd4e 	bl	8000a64 <ST7920_SendString>
		  while(btn_Sel!= 0)//chưa nhấn nút Sel -> hiệu chỉnh tự động
 8002fc8:	e005      	b.n	8002fd6 <main+0x6ae>
		  {
			  roR_Pit_Yaw_GoTo(350, 250, -900);
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <main+0x730>)
 8002fcc:	21fa      	movs	r1, #250	; 0xfa
 8002fce:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002fd2:	f7fe fa15 	bl	8001400 <roR_Pit_Yaw_GoTo>
		  while(btn_Sel!= 0)//chưa nhấn nút Sel -> hiệu chỉnh tự động
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <main+0x740>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f5      	bne.n	8002fca <main+0x6a2>
		  }
		  ST7920_Clear();
 8002fde:	f7fd fd83 	bl	8000ae8 <ST7920_Clear>
		  ST7920_SendString(2, 0, "btnX ");
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <main+0x744>)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	f7fd fd3c 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3, 0, "manualTuning");
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <main+0x748>)
 8002fee:	2100      	movs	r1, #0
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	f7fd fd37 	bl	8000a64 <ST7920_SendString>
		  while(btn_X!=0)//chưa nhấn nút X	->hiệu chỉnh vị trí
 8002ff6:	e16a      	b.n	80032ce <main+0x9a6>
 8002ff8:	2400040d 	.word	0x2400040d
 8002ffc:	24000ba1 	.word	0x24000ba1
 8003000:	24000410 	.word	0x24000410
 8003004:	080115ac 	.word	0x080115ac
 8003008:	0801160c 	.word	0x0801160c
 800300c:	58020400 	.word	0x58020400
 8003010:	58020000 	.word	0x58020000
 8003014:	080115c8 	.word	0x080115c8
 8003018:	080115dc 	.word	0x080115dc
 800301c:	24000bb4 	.word	0x24000bb4
 8003020:	24000beb 	.word	0x24000beb
 8003024:	080115e4 	.word	0x080115e4
 8003028:	08011618 	.word	0x08011618
 800302c:	2400005a 	.word	0x2400005a
 8003030:	24000058 	.word	0x24000058
 8003034:	24000040 	.word	0x24000040
 8003038:	24000ba0 	.word	0x24000ba0
 800303c:	240000a4 	.word	0x240000a4
 8003040:	2400009c 	.word	0x2400009c
 8003044:	24000094 	.word	0x24000094
 8003048:	2400008c 	.word	0x2400008c
 800304c:	24000d40 	.word	0x24000d40
 8003050:	08011620 	.word	0x08011620
 8003054:	24000918 	.word	0x24000918
 8003058:	fffffc7c 	.word	0xfffffc7c
 800305c:	24000c00 	.word	0x24000c00
 8003060:	08011630 	.word	0x08011630
 8003064:	08011634 	.word	0x08011634
 8003068:	24000904 	.word	0x24000904
 800306c:	08011648 	.word	0x08011648
 8003070:	080114ec 	.word	0x080114ec
		  {
			  PIDyaw(compassData, -900);
 8003074:	4bb0      	ldr	r3, [pc, #704]	; (8003338 <main+0xa10>)
 8003076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307a:	49b0      	ldr	r1, [pc, #704]	; (800333c <main+0xa14>)
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd febb 	bl	8000df8 <PIDyaw>
			  leftVer = !btn_leftUp - !btn_leftDown;
 8003082:	4baf      	ldr	r3, [pc, #700]	; (8003340 <main+0xa18>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	b29a      	uxth	r2, r3
 8003092:	4bac      	ldr	r3, [pc, #688]	; (8003344 <main+0xa1c>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf0c      	ite	eq
 800309a:	2301      	moveq	r3, #1
 800309c:	2300      	movne	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	b21a      	sxth	r2, r3
 80030a8:	4ba7      	ldr	r3, [pc, #668]	; (8003348 <main+0xa20>)
 80030aa:	801a      	strh	r2, [r3, #0]
			  leftHor = -!btn_leftLeft + !btn_leftRigt;
 80030ac:	4ba7      	ldr	r3, [pc, #668]	; (800334c <main+0xa24>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4ba4      	ldr	r3, [pc, #656]	; (8003350 <main+0xa28>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	b21a      	sxth	r2, r3
 80030d2:	4ba0      	ldr	r3, [pc, #640]	; (8003354 <main+0xa2c>)
 80030d4:	801a      	strh	r2, [r3, #0]
			  _dir = atan2(leftHor, -leftVer);
 80030d6:	4b9f      	ldr	r3, [pc, #636]	; (8003354 <main+0xa2c>)
 80030d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80030e4:	4b98      	ldr	r3, [pc, #608]	; (8003348 <main+0xa20>)
 80030e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ea:	425b      	negs	r3, r3
 80030ec:	ee06 3a90 	vmov	s13, r3
 80030f0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80030f4:	eeb0 1b46 	vmov.f64	d1, d6
 80030f8:	eeb0 0b47 	vmov.f64	d0, d7
 80030fc:	f00d f998 	bl	8010430 <atan2>
 8003100:	eeb0 7b40 	vmov.f64	d7, d0
 8003104:	4b94      	ldr	r3, [pc, #592]	; (8003358 <main+0xa30>)
 8003106:	ed83 7b00 	vstr	d7, [r3]
			  _controlSpeed = sqrt(leftVer*leftVer + leftHor*leftHor);
 800310a:	4b8f      	ldr	r3, [pc, #572]	; (8003348 <main+0xa20>)
 800310c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003110:	461a      	mov	r2, r3
 8003112:	4b8d      	ldr	r3, [pc, #564]	; (8003348 <main+0xa20>)
 8003114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003118:	fb03 f202 	mul.w	r2, r3, r2
 800311c:	4b8d      	ldr	r3, [pc, #564]	; (8003354 <main+0xa2c>)
 800311e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003122:	4619      	mov	r1, r3
 8003124:	4b8b      	ldr	r3, [pc, #556]	; (8003354 <main+0xa2c>)
 8003126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312a:	fb03 f301 	mul.w	r3, r3, r1
 800312e:	4413      	add	r3, r2
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003138:	eeb0 0b47 	vmov.f64	d0, d7
 800313c:	f00d f97c 	bl	8010438 <sqrt>
 8003140:	eeb0 7b40 	vmov.f64	d7, d0
 8003144:	4b85      	ldr	r3, [pc, #532]	; (800335c <main+0xa34>)
 8003146:	ed83 7b00 	vstr	d7, [r3]
			  _motor1Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 800314a:	4b85      	ldr	r3, [pc, #532]	; (8003360 <main+0xa38>)
 800314c:	ed93 6b00 	vldr	d6, [r3]
 8003150:	4b84      	ldr	r3, [pc, #528]	; (8003364 <main+0xa3c>)
 8003152:	ed93 7b00 	vldr	d7, [r3]
 8003156:	ee26 8b07 	vmul.f64	d8, d6, d7
 800315a:	4b83      	ldr	r3, [pc, #524]	; (8003368 <main+0xa40>)
 800315c:	ed93 6b00 	vldr	d6, [r3]
 8003160:	4b7e      	ldr	r3, [pc, #504]	; (800335c <main+0xa34>)
 8003162:	ed93 7b00 	vldr	d7, [r3]
 8003166:	ee26 9b07 	vmul.f64	d9, d6, d7
 800316a:	4b7b      	ldr	r3, [pc, #492]	; (8003358 <main+0xa30>)
 800316c:	ed93 7b00 	vldr	d7, [r3]
 8003170:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8003320 <main+0x9f8>
 8003174:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003178:	eeb0 0b47 	vmov.f64	d0, d7
 800317c:	f00d f91c 	bl	80103b8 <cos>
 8003180:	eeb0 7b40 	vmov.f64	d7, d0
 8003184:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003188:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8003328 <main+0xa00>
 800318c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003190:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003194:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003198:	ee17 3a90 	vmov	r3, s15
 800319c:	b21a      	sxth	r2, r3
 800319e:	4b73      	ldr	r3, [pc, #460]	; (800336c <main+0xa44>)
 80031a0:	801a      	strh	r2, [r3, #0]
			  _motor2Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 80031a2:	4b6f      	ldr	r3, [pc, #444]	; (8003360 <main+0xa38>)
 80031a4:	ed93 6b00 	vldr	d6, [r3]
 80031a8:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <main+0xa3c>)
 80031aa:	ed93 7b00 	vldr	d7, [r3]
 80031ae:	ee26 8b07 	vmul.f64	d8, d6, d7
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <main+0xa40>)
 80031b4:	ed93 6b00 	vldr	d6, [r3]
 80031b8:	4b68      	ldr	r3, [pc, #416]	; (800335c <main+0xa34>)
 80031ba:	ed93 7b00 	vldr	d7, [r3]
 80031be:	ee26 9b07 	vmul.f64	d9, d6, d7
 80031c2:	4b65      	ldr	r3, [pc, #404]	; (8003358 <main+0xa30>)
 80031c4:	ed93 7b00 	vldr	d7, [r3]
 80031c8:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8003320 <main+0x9f8>
 80031cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031d0:	eeb0 0b47 	vmov.f64	d0, d7
 80031d4:	f00d f8f0 	bl	80103b8 <cos>
 80031d8:	eeb0 7b40 	vmov.f64	d7, d0
 80031dc:	ee29 7b07 	vmul.f64	d7, d9, d7
 80031e0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80031e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80031e8:	ee17 3a90 	vmov	r3, s15
 80031ec:	b21a      	sxth	r2, r3
 80031ee:	4b60      	ldr	r3, [pc, #384]	; (8003370 <main+0xa48>)
 80031f0:	801a      	strh	r2, [r3, #0]
			  _motor3Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 80031f2:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <main+0xa38>)
 80031f4:	ed93 6b00 	vldr	d6, [r3]
 80031f8:	4b5a      	ldr	r3, [pc, #360]	; (8003364 <main+0xa3c>)
 80031fa:	ed93 7b00 	vldr	d7, [r3]
 80031fe:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003202:	4b59      	ldr	r3, [pc, #356]	; (8003368 <main+0xa40>)
 8003204:	ed93 6b00 	vldr	d6, [r3]
 8003208:	4b54      	ldr	r3, [pc, #336]	; (800335c <main+0xa34>)
 800320a:	ed93 7b00 	vldr	d7, [r3]
 800320e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8003212:	4b51      	ldr	r3, [pc, #324]	; (8003358 <main+0xa30>)
 8003214:	ed93 7b00 	vldr	d7, [r3]
 8003218:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8003330 <main+0xa08>
 800321c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003220:	eeb0 0b47 	vmov.f64	d0, d7
 8003224:	f00d f8c8 	bl	80103b8 <cos>
 8003228:	eeb0 7b40 	vmov.f64	d7, d0
 800322c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003230:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003234:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8003328 <main+0xa00>
 8003238:	ee37 7b06 	vadd.f64	d7, d7, d6
 800323c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003240:	ee17 3a90 	vmov	r3, s15
 8003244:	b21a      	sxth	r2, r3
 8003246:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <main+0xa4c>)
 8003248:	801a      	strh	r2, [r3, #0]
			  _motor4Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 800324a:	4b45      	ldr	r3, [pc, #276]	; (8003360 <main+0xa38>)
 800324c:	ed93 6b00 	vldr	d6, [r3]
 8003250:	4b44      	ldr	r3, [pc, #272]	; (8003364 <main+0xa3c>)
 8003252:	ed93 7b00 	vldr	d7, [r3]
 8003256:	ee26 8b07 	vmul.f64	d8, d6, d7
 800325a:	4b43      	ldr	r3, [pc, #268]	; (8003368 <main+0xa40>)
 800325c:	ed93 6b00 	vldr	d6, [r3]
 8003260:	4b3e      	ldr	r3, [pc, #248]	; (800335c <main+0xa34>)
 8003262:	ed93 7b00 	vldr	d7, [r3]
 8003266:	ee26 9b07 	vmul.f64	d9, d6, d7
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <main+0xa30>)
 800326c:	ed93 7b00 	vldr	d7, [r3]
 8003270:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8003330 <main+0xa08>
 8003274:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003278:	eeb0 0b47 	vmov.f64	d0, d7
 800327c:	f00d f89c 	bl	80103b8 <cos>
 8003280:	eeb0 7b40 	vmov.f64	d7, d0
 8003284:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003288:	ee38 7b07 	vadd.f64	d7, d8, d7
 800328c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003290:	ee17 3a90 	vmov	r3, s15
 8003294:	b21a      	sxth	r2, r3
 8003296:	4b38      	ldr	r3, [pc, #224]	; (8003378 <main+0xa50>)
 8003298:	801a      	strh	r2, [r3, #0]
			  controlMotor1(_motor1Speed);
 800329a:	4b34      	ldr	r3, [pc, #208]	; (800336c <main+0xa44>)
 800329c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fcb7 	bl	8000c14 <controlMotor1>
			  controlMotor2(_motor2Speed);
 80032a6:	4b32      	ldr	r3, [pc, #200]	; (8003370 <main+0xa48>)
 80032a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fced 	bl	8000c8c <controlMotor2>
			  controlMotor3(_motor3Speed);
 80032b2:	4b30      	ldr	r3, [pc, #192]	; (8003374 <main+0xa4c>)
 80032b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fd23 	bl	8000d04 <controlMotor3>
			  controlMotor4(_motor4Speed);
 80032be:	4b2e      	ldr	r3, [pc, #184]	; (8003378 <main+0xa50>)
 80032c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd fd59 	bl	8000d7c <controlMotor4>
			  spinalCordTrans();
 80032ca:	f7fd fb23 	bl	8000914 <spinalCordTrans>
		  while(btn_X!=0)//chưa nhấn nút X	->hiệu chỉnh vị trí
 80032ce:	4b2b      	ldr	r3, [pc, #172]	; (800337c <main+0xa54>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f47f aece 	bne.w	8003074 <main+0x74c>
		  }
		  brake();
 80032d8:	f7fe f87e 	bl	80013d8 <brake>
		  ST7920_Clear();
 80032dc:	f7fd fc04 	bl	8000ae8 <ST7920_Clear>
		  ST7920_SendString(2, 0, "Sel");
 80032e0:	4a27      	ldr	r2, [pc, #156]	; (8003380 <main+0xa58>)
 80032e2:	2100      	movs	r1, #0
 80032e4:	2002      	movs	r0, #2
 80032e6:	f7fd fbbd 	bl	8000a64 <ST7920_SendString>
		  ST7920_SendString(3, 0, "loadingBall");
 80032ea:	4a26      	ldr	r2, [pc, #152]	; (8003384 <main+0xa5c>)
 80032ec:	2100      	movs	r1, #0
 80032ee:	2003      	movs	r0, #3
 80032f0:	f7fd fbb8 	bl	8000a64 <ST7920_SendString>
	  	  while(btn_Sel == 1)	//khi chưa nhấn nút Sel
 80032f4:	e00b      	b.n	800330e <main+0x9e6>
	  	  {
	  		  gripperE(GRIPPERE_CLOSE);
 80032f6:	2200      	movs	r2, #0
 80032f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032fc:	4822      	ldr	r0, [pc, #136]	; (8003388 <main+0xa60>)
 80032fe:	f005 fe85 	bl	800900c <HAL_GPIO_WritePin>
	  		  gripperQ(GRIPPERQ_CLOSE);
 8003302:	2200      	movs	r2, #0
 8003304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003308:	481f      	ldr	r0, [pc, #124]	; (8003388 <main+0xa60>)
 800330a:	f005 fe7f 	bl	800900c <HAL_GPIO_WritePin>
	  	  while(btn_Sel == 1)	//khi chưa nhấn nút Sel
 800330e:	4b1f      	ldr	r3, [pc, #124]	; (800338c <main+0xa64>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d0ef      	beq.n	80032f6 <main+0x9ce>
	  wait4SelectMode();
 8003316:	f7ff bba8 	b.w	8002a6a <main+0x142>
 800331a:	bf00      	nop
 800331c:	f3af 8000 	nop.w
 8003320:	7f3321d2 	.word	0x7f3321d2
 8003324:	4002d97c 	.word	0x4002d97c
	...
 8003330:	54442d18 	.word	0x54442d18
 8003334:	3fe921fb 	.word	0x3fe921fb
 8003338:	24000918 	.word	0x24000918
 800333c:	fffffc7c 	.word	0xfffffc7c
 8003340:	24000cb8 	.word	0x24000cb8
 8003344:	24000bb0 	.word	0x24000bb0
 8003348:	24000be8 	.word	0x24000be8
 800334c:	24000ba1 	.word	0x24000ba1
 8003350:	2400040d 	.word	0x2400040d
 8003354:	24000836 	.word	0x24000836
 8003358:	24000878 	.word	0x24000878
 800335c:	24000b90 	.word	0x24000b90
 8003360:	24000c00 	.word	0x24000c00
 8003364:	24000078 	.word	0x24000078
 8003368:	24000070 	.word	0x24000070
 800336c:	24000ae2 	.word	0x24000ae2
 8003370:	24000bd8 	.word	0x24000bd8
 8003374:	24000cbc 	.word	0x24000cbc
 8003378:	2400040a 	.word	0x2400040a
 800337c:	240001d9 	.word	0x240001d9
 8003380:	08011630 	.word	0x08011630
 8003384:	08011650 	.word	0x08011650
 8003388:	58020000 	.word	0x58020000
 800338c:	24000904 	.word	0x24000904

08003390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b0cc      	sub	sp, #304	; 0x130
 8003394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003396:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800339a:	224c      	movs	r2, #76	; 0x4c
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f00c fbfa 	bl	800fb98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033a8:	2220      	movs	r2, #32
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f00c fbf3 	bl	800fb98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033b2:	f107 0308 	add.w	r3, r7, #8
 80033b6:	4618      	mov	r0, r3
 80033b8:	23bc      	movs	r3, #188	; 0xbc
 80033ba:	461a      	mov	r2, r3
 80033bc:	2100      	movs	r1, #0
 80033be:	f00c fbeb 	bl	800fb98 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80033c2:	2002      	movs	r0, #2
 80033c4:	f005 fe56 	bl	8009074 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	4b49      	ldr	r3, [pc, #292]	; (80034f4 <SystemClock_Config+0x164>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	4a48      	ldr	r2, [pc, #288]	; (80034f4 <SystemClock_Config+0x164>)
 80033d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033d8:	6193      	str	r3, [r2, #24]
 80033da:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <SystemClock_Config+0x164>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4b44      	ldr	r3, [pc, #272]	; (80034f8 <SystemClock_Config+0x168>)
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	4a43      	ldr	r2, [pc, #268]	; (80034f8 <SystemClock_Config+0x168>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033f2:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <SystemClock_Config+0x168>)
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	f003 0201 	and.w	r2, r3, #1
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003402:	bf00      	nop
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <SystemClock_Config+0x164>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003410:	d1f8      	bne.n	8003404 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003412:	2302      	movs	r3, #2
 8003414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003418:	2301      	movs	r3, #1
 800341a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800341e:	2340      	movs	r3, #64	; 0x40
 8003420:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003424:	2302      	movs	r3, #2
 8003426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003430:	2304      	movs	r3, #4
 8003432:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003436:	233c      	movs	r3, #60	; 0x3c
 8003438:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800343c:	2302      	movs	r3, #2
 800343e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003442:	2302      	movs	r3, #2
 8003444:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003448:	2302      	movs	r3, #2
 800344a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800344e:	230c      	movs	r3, #12
 8003450:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003460:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003464:	4618      	mov	r0, r3
 8003466:	f005 fe3f 	bl	80090e8 <HAL_RCC_OscConfig>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003470:	f000 fbd8 	bl	8003c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003474:	233f      	movs	r3, #63	; 0x3f
 8003476:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800347a:	2303      	movs	r3, #3
 800347c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003486:	2308      	movs	r3, #8
 8003488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800348c:	2340      	movs	r3, #64	; 0x40
 800348e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003492:	2340      	movs	r3, #64	; 0x40
 8003494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800349c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80034a0:	2340      	movs	r3, #64	; 0x40
 80034a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80034a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80034aa:	2104      	movs	r1, #4
 80034ac:	4618      	mov	r0, r3
 80034ae:	f006 f9f3 	bl	8009898 <HAL_RCC_ClockConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80034b8:	f000 fbb4 	bl	8003c24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	2203      	movs	r2, #3
 80034c2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034c4:	f107 0308 	add.w	r3, r7, #8
 80034c8:	2200      	movs	r2, #0
 80034ca:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	2200      	movs	r2, #0
 80034d2:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	4618      	mov	r0, r3
 80034da:	f006 fd61 	bl	8009fa0 <HAL_RCCEx_PeriphCLKConfig>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 80034e4:	f000 fb9e 	bl	8003c24 <Error_Handler>
  }
}
 80034e8:	bf00      	nop
 80034ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	58024800 	.word	0x58024800
 80034f8:	58000400 	.word	0x58000400

080034fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	611a      	str	r2, [r3, #16]
 8003510:	615a      	str	r2, [r3, #20]
 8003512:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003516:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <MX_ADC3_Init+0xf8>)
 8003518:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800351a:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <MX_ADC3_Init+0xf4>)
 800351c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003520:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003522:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003524:	2208      	movs	r2, #8
 8003526:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003528:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <MX_ADC3_Init+0xf4>)
 800352a:	2201      	movs	r2, #1
 800352c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800352e:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003530:	2204      	movs	r2, #4
 8003532:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003534:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003536:	2200      	movs	r2, #0
 8003538:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800353a:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <MX_ADC3_Init+0xf4>)
 800353c:	2201      	movs	r2, #1
 800353e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003542:	2203      	movs	r2, #3
 8003544:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800354c:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <MX_ADC3_Init+0xf4>)
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003552:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003554:	2200      	movs	r2, #0
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <MX_ADC3_Init+0xf4>)
 800355a:	2203      	movs	r2, #3
 800355c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003564:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003566:	2200      	movs	r2, #0
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <MX_ADC3_Init+0xf4>)
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003572:	481f      	ldr	r0, [pc, #124]	; (80035f0 <MX_ADC3_Init+0xf4>)
 8003574:	f001 fcbc 	bl	8004ef0 <HAL_ADC_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800357e:	f000 fb51 	bl	8003c24 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003582:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <MX_ADC3_Init+0xfc>)
 8003584:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003586:	2306      	movs	r3, #6
 8003588:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800358a:	2306      	movs	r3, #6
 800358c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800358e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003592:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003594:	2304      	movs	r3, #4
 8003596:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800359c:	1d3b      	adds	r3, r7, #4
 800359e:	4619      	mov	r1, r3
 80035a0:	4813      	ldr	r0, [pc, #76]	; (80035f0 <MX_ADC3_Init+0xf4>)
 80035a2:	f001 ff27 	bl	80053f4 <HAL_ADC_ConfigChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80035ac:	f000 fb3a 	bl	8003c24 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <MX_ADC3_Init+0x100>)
 80035b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80035b4:	230c      	movs	r3, #12
 80035b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <MX_ADC3_Init+0xf4>)
 80035be:	f001 ff19 	bl	80053f4 <HAL_ADC_ConfigChannel>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80035c8:	f000 fb2c 	bl	8003c24 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <MX_ADC3_Init+0x104>)
 80035ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80035d0:	2312      	movs	r3, #18
 80035d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <MX_ADC3_Init+0xf4>)
 80035da:	f001 ff0b 	bl	80053f4 <HAL_ADC_ConfigChannel>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80035e4:	f000 fb1e 	bl	8003c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	240009e8 	.word	0x240009e8
 80035f4:	58026000 	.word	0x58026000
 80035f8:	04300002 	.word	0x04300002
 80035fc:	2a000400 	.word	0x2a000400
 8003600:	2e300800 	.word	0x2e300800

08003604 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003614:	4b15      	ldr	r3, [pc, #84]	; (800366c <MX_TIM7_Init+0x68>)
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <MX_TIM7_Init+0x6c>)
 8003618:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <MX_TIM7_Init+0x68>)
 800361c:	f640 125f 	movw	r2, #2399	; 0x95f
 8003620:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <MX_TIM7_Init+0x68>)
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8003628:	4b10      	ldr	r3, [pc, #64]	; (800366c <MX_TIM7_Init+0x68>)
 800362a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800362e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003630:	4b0e      	ldr	r3, [pc, #56]	; (800366c <MX_TIM7_Init+0x68>)
 8003632:	2200      	movs	r2, #0
 8003634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003636:	480d      	ldr	r0, [pc, #52]	; (800366c <MX_TIM7_Init+0x68>)
 8003638:	f008 fb66 	bl	800bd08 <HAL_TIM_Base_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003642:	f000 faef 	bl	8003c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4806      	ldr	r0, [pc, #24]	; (800366c <MX_TIM7_Init+0x68>)
 8003654:	f008 fd90 	bl	800c178 <HAL_TIMEx_MasterConfigSynchronization>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800365e:	f000 fae1 	bl	8003c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	24000cfc 	.word	0x24000cfc
 8003670:	40001400 	.word	0x40001400

08003674 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003678:	4b22      	ldr	r3, [pc, #136]	; (8003704 <MX_UART7_Init+0x90>)
 800367a:	4a23      	ldr	r2, [pc, #140]	; (8003708 <MX_UART7_Init+0x94>)
 800367c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800367e:	4b21      	ldr	r3, [pc, #132]	; (8003704 <MX_UART7_Init+0x90>)
 8003680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003684:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003686:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <MX_UART7_Init+0x90>)
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <MX_UART7_Init+0x90>)
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <MX_UART7_Init+0x90>)
 8003694:	2200      	movs	r2, #0
 8003696:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <MX_UART7_Init+0x90>)
 800369a:	220c      	movs	r2, #12
 800369c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <MX_UART7_Init+0x90>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <MX_UART7_Init+0x90>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <MX_UART7_Init+0x90>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <MX_UART7_Init+0x90>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <MX_UART7_Init+0x90>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80036bc:	4811      	ldr	r0, [pc, #68]	; (8003704 <MX_UART7_Init+0x90>)
 80036be:	f008 fe01 	bl	800c2c4 <HAL_UART_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80036c8:	f000 faac 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036cc:	2100      	movs	r1, #0
 80036ce:	480d      	ldr	r0, [pc, #52]	; (8003704 <MX_UART7_Init+0x90>)
 80036d0:	f00c f953 	bl	800f97a <HAL_UARTEx_SetTxFifoThreshold>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80036da:	f000 faa3 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036de:	2100      	movs	r1, #0
 80036e0:	4808      	ldr	r0, [pc, #32]	; (8003704 <MX_UART7_Init+0x90>)
 80036e2:	f00c f988 	bl	800f9f6 <HAL_UARTEx_SetRxFifoThreshold>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80036ec:	f000 fa9a 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80036f0:	4804      	ldr	r0, [pc, #16]	; (8003704 <MX_UART7_Init+0x90>)
 80036f2:	f00c f909 	bl	800f908 <HAL_UARTEx_DisableFifoMode>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80036fc:	f000 fa92 	bl	8003c24 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	bd80      	pop	{r7, pc}
 8003704:	2400021c 	.word	0x2400021c
 8003708:	40007800 	.word	0x40007800

0800370c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003712:	4a23      	ldr	r2, [pc, #140]	; (80037a0 <MX_USART1_UART_Init+0x94>)
 8003714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800371c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <MX_USART1_UART_Init+0x90>)
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003732:	220c      	movs	r2, #12
 8003734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <MX_USART1_UART_Init+0x90>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003742:	4b16      	ldr	r3, [pc, #88]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003744:	2200      	movs	r2, #0
 8003746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003748:	4b14      	ldr	r3, [pc, #80]	; (800379c <MX_USART1_UART_Init+0x90>)
 800374a:	2200      	movs	r2, #0
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003754:	4811      	ldr	r0, [pc, #68]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003756:	f008 fdb5 	bl	800c2c4 <HAL_UART_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003760:	f000 fa60 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003764:	2100      	movs	r1, #0
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <MX_USART1_UART_Init+0x90>)
 8003768:	f00c f907 	bl	800f97a <HAL_UARTEx_SetTxFifoThreshold>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003772:	f000 fa57 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003776:	2100      	movs	r1, #0
 8003778:	4808      	ldr	r0, [pc, #32]	; (800379c <MX_USART1_UART_Init+0x90>)
 800377a:	f00c f93c 	bl	800f9f6 <HAL_UARTEx_SetRxFifoThreshold>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003784:	f000 fa4e 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003788:	4804      	ldr	r0, [pc, #16]	; (800379c <MX_USART1_UART_Init+0x90>)
 800378a:	f00c f8bd 	bl	800f908 <HAL_UARTEx_DisableFifoMode>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003794:	f000 fa46 	bl	8003c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}
 800379c:	24000af8 	.word	0x24000af8
 80037a0:	40011000 	.word	0x40011000

080037a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037aa:	4a23      	ldr	r2, [pc, #140]	; (8003838 <MX_USART3_UART_Init+0x94>)
 80037ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80037ae:	4b21      	ldr	r3, [pc, #132]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037b0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80037b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037b6:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037c2:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037ca:	220c      	movs	r2, #12
 80037cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ce:	4b19      	ldr	r3, [pc, #100]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037da:	4b16      	ldr	r3, [pc, #88]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037dc:	2200      	movs	r2, #0
 80037de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037ec:	4811      	ldr	r0, [pc, #68]	; (8003834 <MX_USART3_UART_Init+0x90>)
 80037ee:	f008 fd69 	bl	800c2c4 <HAL_UART_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80037f8:	f000 fa14 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037fc:	2100      	movs	r1, #0
 80037fe:	480d      	ldr	r0, [pc, #52]	; (8003834 <MX_USART3_UART_Init+0x90>)
 8003800:	f00c f8bb 	bl	800f97a <HAL_UARTEx_SetTxFifoThreshold>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800380a:	f000 fa0b 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800380e:	2100      	movs	r1, #0
 8003810:	4808      	ldr	r0, [pc, #32]	; (8003834 <MX_USART3_UART_Init+0x90>)
 8003812:	f00c f8f0 	bl	800f9f6 <HAL_UARTEx_SetRxFifoThreshold>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800381c:	f000 fa02 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003820:	4804      	ldr	r0, [pc, #16]	; (8003834 <MX_USART3_UART_Init+0x90>)
 8003822:	f00c f871 	bl	800f908 <HAL_UARTEx_DisableFifoMode>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800382c:	f000 f9fa 	bl	8003c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	24000374 	.word	0x24000374
 8003838:	40004800 	.word	0x40004800

0800383c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003840:	4b22      	ldr	r3, [pc, #136]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003842:	4a23      	ldr	r2, [pc, #140]	; (80038d0 <MX_USART6_UART_Init+0x94>)
 8003844:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003846:	4b21      	ldr	r3, [pc, #132]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800384c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800384e:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003856:	2200      	movs	r2, #0
 8003858:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <MX_USART6_UART_Init+0x90>)
 800385c:	2200      	movs	r2, #0
 800385e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003862:	220c      	movs	r2, #12
 8003864:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003868:	2200      	movs	r2, #0
 800386a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <MX_USART6_UART_Init+0x90>)
 800386e:	2200      	movs	r2, #0
 8003870:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003874:	2200      	movs	r2, #0
 8003876:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <MX_USART6_UART_Init+0x90>)
 800387a:	2200      	movs	r2, #0
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003880:	2200      	movs	r2, #0
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003884:	4811      	ldr	r0, [pc, #68]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003886:	f008 fd1d 	bl	800c2c4 <HAL_UART_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003890:	f000 f9c8 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003894:	2100      	movs	r1, #0
 8003896:	480d      	ldr	r0, [pc, #52]	; (80038cc <MX_USART6_UART_Init+0x90>)
 8003898:	f00c f86f 	bl	800f97a <HAL_UARTEx_SetTxFifoThreshold>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80038a2:	f000 f9bf 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038a6:	2100      	movs	r1, #0
 80038a8:	4808      	ldr	r0, [pc, #32]	; (80038cc <MX_USART6_UART_Init+0x90>)
 80038aa:	f00c f8a4 	bl	800f9f6 <HAL_UARTEx_SetRxFifoThreshold>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80038b4:	f000 f9b6 	bl	8003c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80038b8:	4804      	ldr	r0, [pc, #16]	; (80038cc <MX_USART6_UART_Init+0x90>)
 80038ba:	f00c f825 	bl	800f908 <HAL_UARTEx_DisableFifoMode>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80038c4:	f000 f9ae 	bl	8003c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	24000c0c 	.word	0x24000c0c
 80038d0:	40011400 	.word	0x40011400

080038d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <MX_DMA_Init+0x8c>)
 80038dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038e0:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <MX_DMA_Init+0x8c>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <MX_DMA_Init+0x8c>)
 80038ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <MX_DMA_Init+0x8c>)
 80038fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <MX_DMA_Init+0x8c>)
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <MX_DMA_Init+0x8c>)
 800390a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2100      	movs	r1, #0
 800391a:	200b      	movs	r0, #11
 800391c:	f002 fb69 	bl	8005ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003920:	200b      	movs	r0, #11
 8003922:	f002 fb80 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	2100      	movs	r1, #0
 800392a:	200d      	movs	r0, #13
 800392c:	f002 fb61 	bl	8005ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003930:	200d      	movs	r0, #13
 8003932:	f002 fb78 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	200e      	movs	r0, #14
 800393c:	f002 fb59 	bl	8005ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003940:	200e      	movs	r0, #14
 8003942:	f002 fb70 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	203a      	movs	r0, #58	; 0x3a
 800394c:	f002 fb51 	bl	8005ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003950:	203a      	movs	r0, #58	; 0x3a
 8003952:	f002 fb68 	bl	8006026 <HAL_NVIC_EnableIRQ>

}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	58024400 	.word	0x58024400

08003964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	; 0x30
 8003968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396a:	f107 031c 	add.w	r3, r7, #28
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800397a:	4ba3      	ldr	r3, [pc, #652]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 800397c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003980:	4aa1      	ldr	r2, [pc, #644]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800398a:	4b9f      	ldr	r3, [pc, #636]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 800398c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003998:	4b9b      	ldr	r3, [pc, #620]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 800399a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399e:	4a9a      	ldr	r2, [pc, #616]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039a0:	f043 0320 	orr.w	r3, r3, #32
 80039a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039a8:	4b97      	ldr	r3, [pc, #604]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	4b94      	ldr	r3, [pc, #592]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039bc:	4a92      	ldr	r2, [pc, #584]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039c6:	4b90      	ldr	r3, [pc, #576]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d4:	4b8c      	ldr	r3, [pc, #560]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039da:	4a8b      	ldr	r2, [pc, #556]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039e4:	4b88      	ldr	r3, [pc, #544]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039f2:	4b85      	ldr	r3, [pc, #532]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f8:	4a83      	ldr	r2, [pc, #524]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 80039fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a02:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 8003a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a10:	4b7d      	ldr	r3, [pc, #500]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 8003a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a16:	4a7c      	ldr	r2, [pc, #496]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 8003a18:	f043 0310 	orr.w	r3, r3, #16
 8003a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a20:	4b79      	ldr	r3, [pc, #484]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2e:	4b76      	ldr	r3, [pc, #472]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 8003a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a34:	4a74      	ldr	r2, [pc, #464]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 8003a36:	f043 0308 	orr.w	r3, r3, #8
 8003a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a3e:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <MX_GPIO_Init+0x2a4>)
 8003a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, passArm_Pin|gripperQ_Pin|gripperE_Pin|passHand_Pin, GPIO_PIN_RESET);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f240 7104 	movw	r1, #1796	; 0x704
 8003a52:	486e      	ldr	r0, [pc, #440]	; (8003c0c <MX_GPIO_Init+0x2a8>)
 8003a54:	f005 fada 	bl	800900c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2110      	movs	r1, #16
 8003a5c:	486c      	ldr	r0, [pc, #432]	; (8003c10 <MX_GPIO_Init+0x2ac>)
 8003a5e:	f005 fad5 	bl	800900c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8003a62:	2200      	movs	r2, #0
 8003a64:	f242 01e7 	movw	r1, #8423	; 0x20e7
 8003a68:	486a      	ldr	r0, [pc, #424]	; (8003c14 <MX_GPIO_Init+0x2b0>)
 8003a6a:	f005 facf 	bl	800900c <HAL_GPIO_WritePin>
                          |putQ_Pin|putE_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f643 717d 	movw	r1, #16253	; 0x3f7d
 8003a74:	4868      	ldr	r0, [pc, #416]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003a76:	f005 fac9 	bl	800900c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|leftArmDir_Pin 
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2182      	movs	r1, #130	; 0x82
 8003a7e:	4867      	ldr	r0, [pc, #412]	; (8003c1c <MX_GPIO_Init+0x2b8>)
 8003a80:	f005 fac4 	bl	800900c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 8003a8a:	4865      	ldr	r0, [pc, #404]	; (8003c20 <MX_GPIO_Init+0x2bc>)
 8003a8c:	f005 fabe 	bl	800900c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : flashButton_Pin */
  GPIO_InitStruct.Pin = flashButton_Pin;
 8003a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(flashButton_GPIO_Port, &GPIO_InitStruct);
 8003a9e:	f107 031c 	add.w	r3, r7, #28
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	485a      	ldr	r0, [pc, #360]	; (8003c10 <MX_GPIO_Init+0x2ac>)
 8003aa6:	f005 f8e9 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab6:	f107 031c 	add.w	r3, r7, #28
 8003aba:	4619      	mov	r1, r3
 8003abc:	4853      	ldr	r0, [pc, #332]	; (8003c0c <MX_GPIO_Init+0x2a8>)
 8003abe:	f005 f8dd 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : passArm_Pin gripperQ_Pin gripperE_Pin passHand_Pin */
  GPIO_InitStruct.Pin = passArm_Pin|gripperQ_Pin|gripperE_Pin|passHand_Pin;
 8003ac2:	f240 7304 	movw	r3, #1796	; 0x704
 8003ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad4:	f107 031c 	add.w	r3, r7, #28
 8003ad8:	4619      	mov	r1, r3
 8003ada:	484c      	ldr	r0, [pc, #304]	; (8003c0c <MX_GPIO_Init+0x2a8>)
 8003adc:	f005 f8ce 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af0:	f107 031c 	add.w	r3, r7, #28
 8003af4:	4619      	mov	r1, r3
 8003af6:	4846      	ldr	r0, [pc, #280]	; (8003c10 <MX_GPIO_Init+0x2ac>)
 8003af8:	f005 f8c0 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           putQ_Pin putE_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8003afc:	f242 03e7 	movw	r3, #8423	; 0x20e7
 8003b00:	61fb      	str	r3, [r7, #28]
                          |putQ_Pin|putE_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b02:	2301      	movs	r3, #1
 8003b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0e:	f107 031c 	add.w	r3, r7, #28
 8003b12:	4619      	mov	r1, r3
 8003b14:	483f      	ldr	r0, [pc, #252]	; (8003c14 <MX_GPIO_Init+0x2b0>)
 8003b16:	f005 f8b1 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8003b1a:	230d      	movs	r3, #13
 8003b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b22:	2301      	movs	r3, #1
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b26:	2300      	movs	r3, #0
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4839      	ldr	r0, [pc, #228]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003b32:	f005 f8a3 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b42:	2300      	movs	r3, #0
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4833      	ldr	r0, [pc, #204]	; (8003c1c <MX_GPIO_Init+0x2b8>)
 8003b4e:	f005 f895 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : flashSwitch_Pin */
  GPIO_InitStruct.Pin = flashSwitch_Pin;
 8003b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(flashSwitch_GPIO_Port, &GPIO_InitStruct);
 8003b60:	f107 031c 	add.w	r3, r7, #28
 8003b64:	4619      	mov	r1, r3
 8003b66:	482d      	ldr	r0, [pc, #180]	; (8003c1c <MX_GPIO_Init+0x2b8>)
 8003b68:	f005 f888 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8003b6c:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8003b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b72:	2301      	movs	r3, #1
 8003b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b7e:	f107 031c 	add.w	r3, r7, #28
 8003b82:	4619      	mov	r1, r3
 8003b84:	4826      	ldr	r0, [pc, #152]	; (8003c20 <MX_GPIO_Init+0x2bc>)
 8003b86:	f005 f879 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8003b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b90:	2301      	movs	r3, #1
 8003b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8003b9c:	f107 031c 	add.w	r3, r7, #28
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	481f      	ldr	r0, [pc, #124]	; (8003c20 <MX_GPIO_Init+0x2bc>)
 8003ba4:	f005 f86a 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8003ba8:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8003bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4815      	ldr	r0, [pc, #84]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003bc2:	f005 f85b 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8003bc6:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8003bca:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	4619      	mov	r1, r3
 8003bde:	480e      	ldr	r0, [pc, #56]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003be0:	f005 f84c 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8003be4:	2302      	movs	r3, #2
 8003be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be8:	2301      	movs	r3, #1
 8003bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8003bf4:	f107 031c 	add.w	r3, r7, #28
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4808      	ldr	r0, [pc, #32]	; (8003c1c <MX_GPIO_Init+0x2b8>)
 8003bfc:	f005 f83e 	bl	8008c7c <HAL_GPIO_Init>

}
 8003c00:	bf00      	nop
 8003c02:	3730      	adds	r7, #48	; 0x30
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	58020000 	.word	0x58020000
 8003c10:	58020800 	.word	0x58020800
 8003c14:	58020400 	.word	0x58020400
 8003c18:	58021800 	.word	0x58021800
 8003c1c:	58021000 	.word	0x58021000
 8003c20:	58020c00 	.word	0x58020c00

08003c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <HAL_MspInit+0x30>)
 8003c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c40:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <HAL_MspInit+0x30>)
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_MspInit+0x30>)
 8003c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	58024400 	.word	0x58024400

08003c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	f107 0314 	add.w	r3, r7, #20
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a33      	ldr	r2, [pc, #204]	; (8003d54 <HAL_ADC_MspInit+0xec>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d15f      	bne.n	8003d4a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003c8a:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_ADC_MspInit+0xf0>)
 8003c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c90:	4a31      	ldr	r2, [pc, #196]	; (8003d58 <HAL_ADC_MspInit+0xf0>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_ADC_MspInit+0xf0>)
 8003c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_ADC_MspInit+0xf0>)
 8003caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cae:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <HAL_ADC_MspInit+0xf0>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_ADC_MspInit+0xf0>)
 8003cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd2:	f107 0314 	add.w	r3, r7, #20
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4820      	ldr	r0, [pc, #128]	; (8003d5c <HAL_ADC_MspInit+0xf4>)
 8003cda:	f004 ffcf 	bl	8008c7c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003cde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003ce2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003ce6:	f000 ff11 	bl	8004b0c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_ADC_MspInit+0xfc>)
 8003cee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003cf2:	2273      	movs	r2, #115	; 0x73
 8003cf4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d08:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d10:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d18:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d20:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d28:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003d2e:	480c      	ldr	r0, [pc, #48]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d30:	f002 f994 	bl	800605c <HAL_DMA_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8003d3a:	f7ff ff73 	bl	8003c24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d42:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d44:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <HAL_ADC_MspInit+0xf8>)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003d4a:	bf00      	nop
 8003d4c:	3728      	adds	r7, #40	; 0x28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	58026000 	.word	0x58026000
 8003d58:	58024400 	.word	0x58024400
 8003d5c:	58020800 	.word	0x58020800
 8003d60:	24000880 	.word	0x24000880
 8003d64:	40020040 	.word	0x40020040

08003d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <HAL_TIM_Base_MspInit+0x48>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d116      	bne.n	8003da8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d82:	f043 0320 	orr.w	r3, r3, #32
 8003d86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	2037      	movs	r0, #55	; 0x37
 8003d9e:	f002 f928 	bl	8005ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003da2:	2037      	movs	r0, #55	; 0x37
 8003da4:	f002 f93f 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40001400 	.word	0x40001400
 8003db4:	58024400 	.word	0x58024400

08003db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b090      	sub	sp, #64	; 0x40
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a9a      	ldr	r2, [pc, #616]	; (8004040 <HAL_UART_MspInit+0x288>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d164      	bne.n	8003ea4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003dda:	4b9a      	ldr	r3, [pc, #616]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003de0:	4a98      	ldr	r2, [pc, #608]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dea:	4b96      	ldr	r3, [pc, #600]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003df0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003df8:	4b92      	ldr	r3, [pc, #584]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dfe:	4a91      	ldr	r2, [pc, #580]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003e00:	f043 0320 	orr.w	r3, r3, #32
 8003e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e08:	4b8e      	ldr	r3, [pc, #568]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8003e16:	23c0      	movs	r3, #192	; 0xc0
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e22:	2300      	movs	r3, #0
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003e26:	2307      	movs	r3, #7
 8003e28:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4885      	ldr	r0, [pc, #532]	; (8004048 <HAL_UART_MspInit+0x290>)
 8003e32:	f004 ff23 	bl	8008c7c <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream0;
 8003e36:	4b85      	ldr	r3, [pc, #532]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e38:	4a85      	ldr	r2, [pc, #532]	; (8004050 <HAL_UART_MspInit+0x298>)
 8003e3a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8003e3c:	4b83      	ldr	r3, [pc, #524]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e3e:	224f      	movs	r2, #79	; 0x4f
 8003e40:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e42:	4b82      	ldr	r3, [pc, #520]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e48:	4b80      	ldr	r3, [pc, #512]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e4e:	4b7f      	ldr	r3, [pc, #508]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e54:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e5c:	4b7b      	ldr	r3, [pc, #492]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8003e62:	4b7a      	ldr	r3, [pc, #488]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e68:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e6a:	4b78      	ldr	r3, [pc, #480]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e70:	4b76      	ldr	r3, [pc, #472]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8003e76:	4875      	ldr	r0, [pc, #468]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e78:	f002 f8f0 	bl	800605c <HAL_DMA_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003e82:	f7ff fecf 	bl	8003c24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a70      	ldr	r2, [pc, #448]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e8a:	679a      	str	r2, [r3, #120]	; 0x78
 8003e8c:	4a6f      	ldr	r2, [pc, #444]	; (800404c <HAL_UART_MspInit+0x294>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	2104      	movs	r1, #4
 8003e96:	2052      	movs	r0, #82	; 0x52
 8003e98:	f002 f8ab 	bl	8005ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003e9c:	2052      	movs	r0, #82	; 0x52
 8003e9e:	f002 f8c2 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003ea2:	e120      	b.n	80040e6 <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6a      	ldr	r2, [pc, #424]	; (8004054 <HAL_UART_MspInit+0x29c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d165      	bne.n	8003f7a <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003eae:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003eb4:	4a63      	ldr	r2, [pc, #396]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003eb6:	f043 0310 	orr.w	r3, r3, #16
 8003eba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ebe:	4b61      	ldr	r3, [pc, #388]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ecc:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ed2:	4a5c      	ldr	r2, [pc, #368]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003edc:	4b59      	ldr	r3, [pc, #356]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8003eea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003efc:	2304      	movs	r3, #4
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f04:	4619      	mov	r1, r3
 8003f06:	4854      	ldr	r0, [pc, #336]	; (8004058 <HAL_UART_MspInit+0x2a0>)
 8003f08:	f004 feb8 	bl	8008c7c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f0e:	4a54      	ldr	r2, [pc, #336]	; (8004060 <HAL_UART_MspInit+0x2a8>)
 8003f10:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003f12:	4b52      	ldr	r3, [pc, #328]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f14:	2229      	movs	r2, #41	; 0x29
 8003f16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f1e:	4b4f      	ldr	r3, [pc, #316]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f24:	4b4d      	ldr	r3, [pc, #308]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f2c:	4b4b      	ldr	r3, [pc, #300]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f32:	4b4a      	ldr	r3, [pc, #296]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f38:	4b48      	ldr	r3, [pc, #288]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f46:	4b45      	ldr	r3, [pc, #276]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f4c:	4843      	ldr	r0, [pc, #268]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f4e:	f002 f885 	bl	800605c <HAL_DMA_Init>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8003f58:	f7ff fe64 	bl	8003c24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f60:	679a      	str	r2, [r3, #120]	; 0x78
 8003f62:	4a3e      	ldr	r2, [pc, #248]	; (800405c <HAL_UART_MspInit+0x2a4>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	2025      	movs	r0, #37	; 0x25
 8003f6e:	f002 f840 	bl	8005ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f72:	2025      	movs	r0, #37	; 0x25
 8003f74:	f002 f857 	bl	8006026 <HAL_NVIC_EnableIRQ>
}
 8003f78:	e0b5      	b.n	80040e6 <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART3)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a39      	ldr	r2, [pc, #228]	; (8004064 <HAL_UART_MspInit+0x2ac>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d175      	bne.n	8004070 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f8a:	4a2e      	ldr	r2, [pc, #184]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f94:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa2:	4b28      	ldr	r3, [pc, #160]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa8:	4a26      	ldr	r2, [pc, #152]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003faa:	f043 0302 	orr.w	r3, r3, #2
 8003fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <HAL_UART_MspInit+0x28c>)
 8003fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8003fc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fd2:	2307      	movs	r3, #7
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fda:	4619      	mov	r1, r3
 8003fdc:	481e      	ldr	r0, [pc, #120]	; (8004058 <HAL_UART_MspInit+0x2a0>)
 8003fde:	f004 fe4d 	bl	8008c7c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8003fe4:	4a21      	ldr	r2, [pc, #132]	; (800406c <HAL_UART_MspInit+0x2b4>)
 8003fe6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8003fea:	222d      	movs	r2, #45	; 0x2d
 8003fec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fee:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ff4:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8003ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004000:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004002:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8004004:	2200      	movs	r2, #0
 8004006:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004008:	4b17      	ldr	r3, [pc, #92]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 800400a:	2200      	movs	r2, #0
 800400c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8004010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004014:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8004018:	2200      	movs	r2, #0
 800401a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800401c:	4b12      	ldr	r3, [pc, #72]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 800401e:	2200      	movs	r2, #0
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004022:	4811      	ldr	r0, [pc, #68]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8004024:	f002 f81a 	bl	800605c <HAL_DMA_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 800402e:	f7ff fdf9 	bl	8003c24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 8004036:	679a      	str	r2, [r3, #120]	; 0x78
 8004038:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <HAL_UART_MspInit+0x2b0>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800403e:	e052      	b.n	80040e6 <HAL_UART_MspInit+0x32e>
 8004040:	40007800 	.word	0x40007800
 8004044:	58024400 	.word	0x58024400
 8004048:	58021400 	.word	0x58021400
 800404c:	24000968 	.word	0x24000968
 8004050:	40020010 	.word	0x40020010
 8004054:	40011000 	.word	0x40011000
 8004058:	58020400 	.word	0x58020400
 800405c:	24000a50 	.word	0x24000a50
 8004060:	40020058 	.word	0x40020058
 8004064:	40004800 	.word	0x40004800
 8004068:	240002f0 	.word	0x240002f0
 800406c:	40020440 	.word	0x40020440
  else if(huart->Instance==USART6)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_UART_MspInit+0x338>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d135      	bne.n	80040e6 <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800407a:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <HAL_UART_MspInit+0x33c>)
 800407c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_UART_MspInit+0x33c>)
 8004082:	f043 0320 	orr.w	r3, r3, #32
 8004086:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <HAL_UART_MspInit+0x33c>)
 800408c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004098:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_UART_MspInit+0x33c>)
 800409a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_UART_MspInit+0x33c>)
 80040a0:	f043 0304 	orr.w	r3, r3, #4
 80040a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_UART_MspInit+0x33c>)
 80040aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 80040b6:	23c0      	movs	r3, #192	; 0xc0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ba:	2302      	movs	r3, #2
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c2:	2300      	movs	r3, #0
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80040c6:	2307      	movs	r3, #7
 80040c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ce:	4619      	mov	r1, r3
 80040d0:	4809      	ldr	r0, [pc, #36]	; (80040f8 <HAL_UART_MspInit+0x340>)
 80040d2:	f004 fdd3 	bl	8008c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 80040d6:	2200      	movs	r2, #0
 80040d8:	2102      	movs	r1, #2
 80040da:	2047      	movs	r0, #71	; 0x47
 80040dc:	f001 ff89 	bl	8005ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80040e0:	2047      	movs	r0, #71	; 0x47
 80040e2:	f001 ffa0 	bl	8006026 <HAL_NVIC_EnableIRQ>
}
 80040e6:	bf00      	nop
 80040e8:	3740      	adds	r7, #64	; 0x40
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40011400 	.word	0x40011400
 80040f4:	58024400 	.word	0x58024400
 80040f8:	58020800 	.word	0x58020800

080040fc <kalmanFilter_Pitch>:
double P_Rigt = 2;         //covariance estimation (err_estimate)
double R_Rigt = 2;         //covariance of the observation noise (err_measure)
double Q_Rigt = 0.0009;    //process variance

double kalmanFilter_Pitch(double mea)
{
 80040fc:	b490      	push	{r4, r7}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Pitch = P_Pitch /(P_Pitch + R_Pitch);
 8004106:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <kalmanFilter_Pitch+0xb4>)
 8004108:	ed93 5b00 	vldr	d5, [r3]
 800410c:	4b28      	ldr	r3, [pc, #160]	; (80041b0 <kalmanFilter_Pitch+0xb4>)
 800410e:	ed93 6b00 	vldr	d6, [r3]
 8004112:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <kalmanFilter_Pitch+0xb8>)
 8004114:	ed93 7b00 	vldr	d7, [r3]
 8004118:	ee36 6b07 	vadd.f64	d6, d6, d7
 800411c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <kalmanFilter_Pitch+0xbc>)
 8004122:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k] = x_Pitch[k-1] + kalmanGain_Pitch *(mea - x_Pitch[k-1]);
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <kalmanFilter_Pitch+0xc0>)
 8004128:	ed93 6b00 	vldr	d6, [r3]
 800412c:	4b23      	ldr	r3, [pc, #140]	; (80041bc <kalmanFilter_Pitch+0xc0>)
 800412e:	ed93 7b00 	vldr	d7, [r3]
 8004132:	ed97 5b00 	vldr	d5, [r7]
 8004136:	ee35 5b47 	vsub.f64	d5, d5, d7
 800413a:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <kalmanFilter_Pitch+0xbc>)
 800413c:	ed93 7b00 	vldr	d7, [r3]
 8004140:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004144:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004148:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <kalmanFilter_Pitch+0xc0>)
 800414a:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Pitch =  (1.0 - kalmanGain_Pitch) *P_Pitch + fabs(x_Pitch[k-1]-x_Pitch[k]) *Q_Pitch;
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <kalmanFilter_Pitch+0xbc>)
 8004150:	ed93 7b00 	vldr	d7, [r3]
 8004154:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004158:	ee36 6b47 	vsub.f64	d6, d6, d7
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <kalmanFilter_Pitch+0xb4>)
 800415e:	ed93 7b00 	vldr	d7, [r3]
 8004162:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <kalmanFilter_Pitch+0xc0>)
 8004168:	ed93 5b00 	vldr	d5, [r3]
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <kalmanFilter_Pitch+0xc0>)
 800416e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004172:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004176:	eeb0 5bc7 	vabs.f64	d5, d7
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <kalmanFilter_Pitch+0xc4>)
 800417c:	ed93 7b00 	vldr	d7, [r3]
 8004180:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004184:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <kalmanFilter_Pitch+0xb4>)
 800418a:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k-1] = x_Pitch[k];
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <kalmanFilter_Pitch+0xc0>)
 8004190:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004194:	4a09      	ldr	r2, [pc, #36]	; (80041bc <kalmanFilter_Pitch+0xc0>)
 8004196:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Pitch[k];
 800419a:	4b08      	ldr	r3, [pc, #32]	; (80041bc <kalmanFilter_Pitch+0xc0>)
 800419c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80041a0:	ec44 3b17 	vmov	d7, r3, r4
}
 80041a4:	eeb0 0b47 	vmov.f64	d0, d7
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc90      	pop	{r4, r7}
 80041ae:	4770      	bx	lr
 80041b0:	240000b0 	.word	0x240000b0
 80041b4:	240000b8 	.word	0x240000b8
 80041b8:	24000d48 	.word	0x24000d48
 80041bc:	24000d78 	.word	0x24000d78
 80041c0:	240000c0 	.word	0x240000c0

080041c4 <kalmanFilter_Left>:

double kalmanFilter_Left(double mea)
{
 80041c4:	b490      	push	{r4, r7}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Left = P_Left /(P_Left + R_Left);
 80041ce:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <kalmanFilter_Left+0xb4>)
 80041d0:	ed93 5b00 	vldr	d5, [r3]
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <kalmanFilter_Left+0xb4>)
 80041d6:	ed93 6b00 	vldr	d6, [r3]
 80041da:	4b28      	ldr	r3, [pc, #160]	; (800427c <kalmanFilter_Left+0xb8>)
 80041dc:	ed93 7b00 	vldr	d7, [r3]
 80041e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80041e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <kalmanFilter_Left+0xbc>)
 80041ea:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k] = x_Left[k-1] + kalmanGain_Left *(mea - x_Left[k-1]);
 80041ee:	4b25      	ldr	r3, [pc, #148]	; (8004284 <kalmanFilter_Left+0xc0>)
 80041f0:	ed93 6b00 	vldr	d6, [r3]
 80041f4:	4b23      	ldr	r3, [pc, #140]	; (8004284 <kalmanFilter_Left+0xc0>)
 80041f6:	ed93 7b00 	vldr	d7, [r3]
 80041fa:	ed97 5b00 	vldr	d5, [r7]
 80041fe:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004202:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <kalmanFilter_Left+0xbc>)
 8004204:	ed93 7b00 	vldr	d7, [r3]
 8004208:	ee25 7b07 	vmul.f64	d7, d5, d7
 800420c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <kalmanFilter_Left+0xc0>)
 8004212:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Left =  (1.0 - kalmanGain_Left) *P_Left + fabs(x_Left[k-1]-x_Left[k]) *Q_Left;
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <kalmanFilter_Left+0xbc>)
 8004218:	ed93 7b00 	vldr	d7, [r3]
 800421c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004220:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <kalmanFilter_Left+0xb4>)
 8004226:	ed93 7b00 	vldr	d7, [r3]
 800422a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <kalmanFilter_Left+0xc0>)
 8004230:	ed93 5b00 	vldr	d5, [r3]
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <kalmanFilter_Left+0xc0>)
 8004236:	ed93 7b02 	vldr	d7, [r3, #8]
 800423a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800423e:	eeb0 5bc7 	vabs.f64	d5, d7
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <kalmanFilter_Left+0xc4>)
 8004244:	ed93 7b00 	vldr	d7, [r3]
 8004248:	ee25 7b07 	vmul.f64	d7, d5, d7
 800424c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <kalmanFilter_Left+0xb4>)
 8004252:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k-1] = x_Left[k];
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <kalmanFilter_Left+0xc0>)
 8004258:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800425c:	4a09      	ldr	r2, [pc, #36]	; (8004284 <kalmanFilter_Left+0xc0>)
 800425e:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Left[k];
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <kalmanFilter_Left+0xc0>)
 8004264:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004268:	ec44 3b17 	vmov	d7, r3, r4
}
 800426c:	eeb0 0b47 	vmov.f64	d0, d7
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bc90      	pop	{r4, r7}
 8004276:	4770      	bx	lr
 8004278:	240000c8 	.word	0x240000c8
 800427c:	240000d0 	.word	0x240000d0
 8004280:	24000d90 	.word	0x24000d90
 8004284:	24000d98 	.word	0x24000d98
 8004288:	240000d8 	.word	0x240000d8

0800428c <kalmanFilter_Rigt>:

double kalmanFilter_Rigt(double mea)
{
 800428c:	b490      	push	{r4, r7}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Rigt = P_Rigt /(P_Rigt + R_Rigt);
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <kalmanFilter_Rigt+0xb4>)
 8004298:	ed93 5b00 	vldr	d5, [r3]
 800429c:	4b28      	ldr	r3, [pc, #160]	; (8004340 <kalmanFilter_Rigt+0xb4>)
 800429e:	ed93 6b00 	vldr	d6, [r3]
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <kalmanFilter_Rigt+0xb8>)
 80042a4:	ed93 7b00 	vldr	d7, [r3]
 80042a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80042ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <kalmanFilter_Rigt+0xbc>)
 80042b2:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k] = x_Rigt[k-1] + kalmanGain_Rigt *(mea - x_Rigt[k-1]);
 80042b6:	4b25      	ldr	r3, [pc, #148]	; (800434c <kalmanFilter_Rigt+0xc0>)
 80042b8:	ed93 6b00 	vldr	d6, [r3]
 80042bc:	4b23      	ldr	r3, [pc, #140]	; (800434c <kalmanFilter_Rigt+0xc0>)
 80042be:	ed93 7b00 	vldr	d7, [r3]
 80042c2:	ed97 5b00 	vldr	d5, [r7]
 80042c6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80042ca:	4b1f      	ldr	r3, [pc, #124]	; (8004348 <kalmanFilter_Rigt+0xbc>)
 80042cc:	ed93 7b00 	vldr	d7, [r3]
 80042d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80042d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042d8:	4b1c      	ldr	r3, [pc, #112]	; (800434c <kalmanFilter_Rigt+0xc0>)
 80042da:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Rigt =  (1.0 - kalmanGain_Rigt) *P_Rigt + fabs(x_Rigt[k-1]-x_Rigt[k]) *Q_Rigt;
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <kalmanFilter_Rigt+0xbc>)
 80042e0:	ed93 7b00 	vldr	d7, [r3]
 80042e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80042e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <kalmanFilter_Rigt+0xb4>)
 80042ee:	ed93 7b00 	vldr	d7, [r3]
 80042f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <kalmanFilter_Rigt+0xc0>)
 80042f8:	ed93 5b00 	vldr	d5, [r3]
 80042fc:	4b13      	ldr	r3, [pc, #76]	; (800434c <kalmanFilter_Rigt+0xc0>)
 80042fe:	ed93 7b02 	vldr	d7, [r3, #8]
 8004302:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004306:	eeb0 5bc7 	vabs.f64	d5, d7
 800430a:	4b11      	ldr	r3, [pc, #68]	; (8004350 <kalmanFilter_Rigt+0xc4>)
 800430c:	ed93 7b00 	vldr	d7, [r3]
 8004310:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004314:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <kalmanFilter_Rigt+0xb4>)
 800431a:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k-1] = x_Rigt[k];
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <kalmanFilter_Rigt+0xc0>)
 8004320:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004324:	4a09      	ldr	r2, [pc, #36]	; (800434c <kalmanFilter_Rigt+0xc0>)
 8004326:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Rigt[k];
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <kalmanFilter_Rigt+0xc0>)
 800432c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004330:	ec44 3b17 	vmov	d7, r3, r4
}
 8004334:	eeb0 0b47 	vmov.f64	d0, d7
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bc90      	pop	{r4, r7}
 800433e:	4770      	bx	lr
 8004340:	240000e0 	.word	0x240000e0
 8004344:	240000e8 	.word	0x240000e8
 8004348:	24000d88 	.word	0x24000d88
 800434c:	24000da8 	.word	0x24000da8
 8004350:	240000f0 	.word	0x240000f0

08004354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004366:	e7fe      	b.n	8004366 <HardFault_Handler+0x4>

08004368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800436c:	e7fe      	b.n	800436c <MemManage_Handler+0x4>

0800436e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004372:	e7fe      	b.n	8004372 <BusFault_Handler+0x4>

08004374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004378:	e7fe      	b.n	8004378 <UsageFault_Handler+0x4>

0800437a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 80043a8:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <SysTick_Handler+0x2c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <SysTick_Handler+0x2c>)
 80043b2:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <SysTick_Handler+0x2c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d904      	bls.n	80043c6 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <SysTick_Handler+0x2c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 80043c2:	f7fc fa87 	bl	80008d4 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043c6:	f000 fb53 	bl	8004a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	24000ae0 	.word	0x24000ae0

080043d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <DMA1_Stream0_IRQHandler+0x10>)
 80043da:	f002 fe49 	bl	8007070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	24000968 	.word	0x24000968

080043e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	rigtRawDistance = aRigt_Linear*adc3Value[0] + bRigt_Linear;
 80043ec:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <DMA1_Stream2_IRQHandler+0xc8>)
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80043f8:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <DMA1_Stream2_IRQHandler+0xcc>)
 80043fa:	ed93 7b00 	vldr	d7, [r3]
 80043fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004402:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <DMA1_Stream2_IRQHandler+0xd0>)
 8004404:	ed93 7b00 	vldr	d7, [r3]
 8004408:	ee36 7b07 	vadd.f64	d7, d6, d7
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <DMA1_Stream2_IRQHandler+0xd4>)
 800440e:	ed83 7b00 	vstr	d7, [r3]
	leftRawDistance = aLeft_Linear*adc3Value[1] + bLeft_Linear;
 8004412:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <DMA1_Stream2_IRQHandler+0xc8>)
 8004414:	885b      	ldrh	r3, [r3, #2]
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <DMA1_Stream2_IRQHandler+0xd8>)
 8004420:	ed93 7b00 	vldr	d7, [r3]
 8004424:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <DMA1_Stream2_IRQHandler+0xdc>)
 800442a:	ed93 7b00 	vldr	d7, [r3]
 800442e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004432:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <DMA1_Stream2_IRQHandler+0xe0>)
 8004434:	ed83 7b00 	vstr	d7, [r3]
	pitchRawDistance = aPitch_Linear*adc3Value[2] + bPitch_Linear;
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <DMA1_Stream2_IRQHandler+0xc8>)
 800443a:	889b      	ldrh	r3, [r3, #4]
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <DMA1_Stream2_IRQHandler+0xe4>)
 8004446:	ed93 7b00 	vldr	d7, [r3]
 800444a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800444e:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <DMA1_Stream2_IRQHandler+0xe8>)
 8004450:	ed93 7b00 	vldr	d7, [r3]
 8004454:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004458:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <DMA1_Stream2_IRQHandler+0xec>)
 800445a:	ed83 7b00 	vstr	d7, [r3]
	rigtDistance = kalmanFilter_Rigt(rigtRawDistance);
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <DMA1_Stream2_IRQHandler+0xd4>)
 8004460:	ed93 7b00 	vldr	d7, [r3]
 8004464:	eeb0 0b47 	vmov.f64	d0, d7
 8004468:	f7ff ff10 	bl	800428c <kalmanFilter_Rigt>
 800446c:	eeb0 7b40 	vmov.f64	d7, d0
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <DMA1_Stream2_IRQHandler+0xf0>)
 8004472:	ed83 7b00 	vstr	d7, [r3]
	pitchDistance = kalmanFilter_Pitch(pitchRawDistance);
 8004476:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <DMA1_Stream2_IRQHandler+0xec>)
 8004478:	ed93 7b00 	vldr	d7, [r3]
 800447c:	eeb0 0b47 	vmov.f64	d0, d7
 8004480:	f7ff fe3c 	bl	80040fc <kalmanFilter_Pitch>
 8004484:	eeb0 7b40 	vmov.f64	d7, d0
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <DMA1_Stream2_IRQHandler+0xf4>)
 800448a:	ed83 7b00 	vstr	d7, [r3]
	leftDistance = kalmanFilter_Left(leftRawDistance);
 800448e:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <DMA1_Stream2_IRQHandler+0xe0>)
 8004490:	ed93 7b00 	vldr	d7, [r3]
 8004494:	eeb0 0b47 	vmov.f64	d0, d7
 8004498:	f7ff fe94 	bl	80041c4 <kalmanFilter_Left>
 800449c:	eeb0 7b40 	vmov.f64	d7, d0
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <DMA1_Stream2_IRQHandler+0xf8>)
 80044a2:	ed83 7b00 	vstr	d7, [r3]

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80044a6:	480f      	ldr	r0, [pc, #60]	; (80044e4 <DMA1_Stream2_IRQHandler+0xfc>)
 80044a8:	f002 fde2 	bl	8007070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	24000cf4 	.word	0x24000cf4
 80044b4:	24000400 	.word	0x24000400
 80044b8:	24000210 	.word	0x24000210
 80044bc:	240002e8 	.word	0x240002e8
 80044c0:	24000ca0 	.word	0x24000ca0
 80044c4:	24000868 	.word	0x24000868
 80044c8:	24000200 	.word	0x24000200
 80044cc:	24000ac8 	.word	0x24000ac8
 80044d0:	24000cb0 	.word	0x24000cb0
 80044d4:	24000d68 	.word	0x24000d68
 80044d8:	24000958 	.word	0x24000958
 80044dc:	24000ce8 	.word	0x24000ce8
 80044e0:	24000ba8 	.word	0x24000ba8
 80044e4:	24000880 	.word	0x24000880

080044e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <DMA1_Stream3_IRQHandler+0x24>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	b21a      	sxth	r2, r3
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <DMA1_Stream3_IRQHandler+0x24>)
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	b21b      	sxth	r3, r3
 80044fa:	4313      	orrs	r3, r2
 80044fc:	b21a      	sxth	r2, r3
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <DMA1_Stream3_IRQHandler+0x28>)
 8004500:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004502:	4804      	ldr	r0, [pc, #16]	; (8004514 <DMA1_Stream3_IRQHandler+0x2c>)
 8004504:	f002 fdb4 	bl	8007070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}
 800450c:	24000840 	.word	0x24000840
 8004510:	24000918 	.word	0x24000918
 8004514:	24000a50 	.word	0x24000a50

08004518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800451c:	4802      	ldr	r0, [pc, #8]	; (8004528 <USART1_IRQHandler+0x10>)
 800451e:	f008 f99b 	bl	800c858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	24000af8 	.word	0x24000af8

0800452c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <TIM7_IRQHandler+0x10>)
 8004532:	f007 fc3f 	bl	800bdb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	24000cfc 	.word	0x24000cfc

08004540 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8004544:	4b8d      	ldr	r3, [pc, #564]	; (800477c <DMA2_Stream2_IRQHandler+0x23c>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b04      	cmp	r3, #4
 800454a:	f040 80ff 	bne.w	800474c <DMA2_Stream2_IRQHandler+0x20c>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 800454e:	4b8c      	ldr	r3, [pc, #560]	; (8004780 <DMA2_Stream2_IRQHandler+0x240>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	b2d1      	uxtb	r1, r2
 8004556:	4a8a      	ldr	r2, [pc, #552]	; (8004780 <DMA2_Stream2_IRQHandler+0x240>)
 8004558:	7011      	strb	r1, [r2, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	4b89      	ldr	r3, [pc, #548]	; (8004784 <DMA2_Stream2_IRQHandler+0x244>)
 800455e:	7819      	ldrb	r1, [r3, #0]
 8004560:	4b89      	ldr	r3, [pc, #548]	; (8004788 <DMA2_Stream2_IRQHandler+0x248>)
 8004562:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8004564:	4b86      	ldr	r3, [pc, #536]	; (8004780 <DMA2_Stream2_IRQHandler+0x240>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b05      	cmp	r3, #5
 800456a:	f240 80ef 	bls.w	800474c <DMA2_Stream2_IRQHandler+0x20c>
		{
			PS2DataIndex = 0;
 800456e:	4b84      	ldr	r3, [pc, #528]	; (8004780 <DMA2_Stream2_IRQHandler+0x240>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8004574:	4b81      	ldr	r3, [pc, #516]	; (800477c <DMA2_Stream2_IRQHandler+0x23c>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 800457a:	4b83      	ldr	r3, [pc, #524]	; (8004788 <DMA2_Stream2_IRQHandler+0x248>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	b21a      	sxth	r2, r3
 8004582:	4b81      	ldr	r3, [pc, #516]	; (8004788 <DMA2_Stream2_IRQHandler+0x248>)
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	b21b      	sxth	r3, r3
 8004588:	4313      	orrs	r3, r2
 800458a:	b21a      	sxth	r2, r3
 800458c:	4b7f      	ldr	r3, [pc, #508]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 800458e:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 8004590:	4b7d      	ldr	r3, [pc, #500]	; (8004788 <DMA2_Stream2_IRQHandler+0x248>)
 8004592:	789b      	ldrb	r3, [r3, #2]
 8004594:	b29a      	uxth	r2, r3
 8004596:	4b7e      	ldr	r3, [pc, #504]	; (8004790 <DMA2_Stream2_IRQHandler+0x250>)
 8004598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459c:	b29b      	uxth	r3, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b21a      	sxth	r2, r3
 80045a4:	4b7b      	ldr	r3, [pc, #492]	; (8004794 <DMA2_Stream2_IRQHandler+0x254>)
 80045a6:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 80045a8:	4b77      	ldr	r3, [pc, #476]	; (8004788 <DMA2_Stream2_IRQHandler+0x248>)
 80045aa:	78db      	ldrb	r3, [r3, #3]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	4b7a      	ldr	r3, [pc, #488]	; (8004798 <DMA2_Stream2_IRQHandler+0x258>)
 80045b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	b21a      	sxth	r2, r3
 80045bc:	4b77      	ldr	r3, [pc, #476]	; (800479c <DMA2_Stream2_IRQHandler+0x25c>)
 80045be:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 80045c0:	4b71      	ldr	r3, [pc, #452]	; (8004788 <DMA2_Stream2_IRQHandler+0x248>)
 80045c2:	791b      	ldrb	r3, [r3, #4]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <DMA2_Stream2_IRQHandler+0x260>)
 80045c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	b21a      	sxth	r2, r3
 80045d4:	4b73      	ldr	r3, [pc, #460]	; (80047a4 <DMA2_Stream2_IRQHandler+0x264>)
 80045d6:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 80045d8:	4b6b      	ldr	r3, [pc, #428]	; (8004788 <DMA2_Stream2_IRQHandler+0x248>)
 80045da:	795b      	ldrb	r3, [r3, #5]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	4b72      	ldr	r3, [pc, #456]	; (80047a8 <DMA2_Stream2_IRQHandler+0x268>)
 80045e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	b21a      	sxth	r2, r3
 80045ec:	4b6f      	ldr	r3, [pc, #444]	; (80047ac <DMA2_Stream2_IRQHandler+0x26c>)
 80045ee:	801a      	strh	r2, [r3, #0]
			btn_leftLeft = (PS2Button >> 15) & 1U;
 80045f0:	4b66      	ldr	r3, [pc, #408]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 80045f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f6:	13db      	asrs	r3, r3, #15
 80045f8:	b21b      	sxth	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4b6b      	ldr	r3, [pc, #428]	; (80047b0 <DMA2_Stream2_IRQHandler+0x270>)
 8004604:	701a      	strb	r2, [r3, #0]
			btn_leftDown = (PS2Button >> 14) & 1U;
 8004606:	4b61      	ldr	r3, [pc, #388]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 8004608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800460c:	139b      	asrs	r3, r3, #14
 800460e:	b21b      	sxth	r3, r3
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	b2da      	uxtb	r2, r3
 8004618:	4b66      	ldr	r3, [pc, #408]	; (80047b4 <DMA2_Stream2_IRQHandler+0x274>)
 800461a:	701a      	strb	r2, [r3, #0]
			btn_leftRigt = (PS2Button >> 13) & 1U;
 800461c:	4b5b      	ldr	r3, [pc, #364]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 800461e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004622:	135b      	asrs	r3, r3, #13
 8004624:	b21b      	sxth	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	b2da      	uxtb	r2, r3
 800462e:	4b62      	ldr	r3, [pc, #392]	; (80047b8 <DMA2_Stream2_IRQHandler+0x278>)
 8004630:	701a      	strb	r2, [r3, #0]
			btn_leftUp   = (PS2Button >> 12) & 1U;
 8004632:	4b56      	ldr	r3, [pc, #344]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 8004634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004638:	131b      	asrs	r3, r3, #12
 800463a:	b21b      	sxth	r3, r3
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	b2da      	uxtb	r2, r3
 8004644:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <DMA2_Stream2_IRQHandler+0x27c>)
 8004646:	701a      	strb	r2, [r3, #0]
			btn_Sta		 = (PS2Button >> 11) & 1U;
 8004648:	4b50      	ldr	r3, [pc, #320]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 800464a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464e:	12db      	asrs	r3, r3, #11
 8004650:	b21b      	sxth	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <DMA2_Stream2_IRQHandler+0x280>)
 800465c:	701a      	strb	r2, [r3, #0]
			btn_joyRigt  = (PS2Button >> 10) & 1U;
 800465e:	4b4b      	ldr	r3, [pc, #300]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 8004660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004664:	129b      	asrs	r3, r3, #10
 8004666:	b21b      	sxth	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	b2da      	uxtb	r2, r3
 8004670:	4b54      	ldr	r3, [pc, #336]	; (80047c4 <DMA2_Stream2_IRQHandler+0x284>)
 8004672:	701a      	strb	r2, [r3, #0]
			btn_joyLeft  = (PS2Button >>  9) & 1U;
 8004674:	4b45      	ldr	r3, [pc, #276]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 8004676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800467a:	125b      	asrs	r3, r3, #9
 800467c:	b21b      	sxth	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <DMA2_Stream2_IRQHandler+0x288>)
 8004688:	701a      	strb	r2, [r3, #0]
			btn_Sel  	 = (PS2Button >>  8) & 1U;
 800468a:	4b40      	ldr	r3, [pc, #256]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 800468c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004690:	121b      	asrs	r3, r3, #8
 8004692:	b21b      	sxth	r3, r3
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <DMA2_Stream2_IRQHandler+0x28c>)
 800469e:	701a      	strb	r2, [r3, #0]
			btn_A  		 = (PS2Button >>  7) & 1U;
 80046a0:	4b3a      	ldr	r3, [pc, #232]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 80046a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046a6:	11db      	asrs	r3, r3, #7
 80046a8:	b21b      	sxth	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <DMA2_Stream2_IRQHandler+0x290>)
 80046b4:	701a      	strb	r2, [r3, #0]
			btn_X  		 = (PS2Button >>  6) & 1U;
 80046b6:	4b35      	ldr	r3, [pc, #212]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 80046b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046bc:	119b      	asrs	r3, r3, #6
 80046be:	b21b      	sxth	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <DMA2_Stream2_IRQHandler+0x294>)
 80046ca:	701a      	strb	r2, [r3, #0]
			btn_D  		 = (PS2Button >>  5) & 1U;
 80046cc:	4b2f      	ldr	r3, [pc, #188]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 80046ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046d2:	115b      	asrs	r3, r3, #5
 80046d4:	b21b      	sxth	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4b3e      	ldr	r3, [pc, #248]	; (80047d8 <DMA2_Stream2_IRQHandler+0x298>)
 80046e0:	701a      	strb	r2, [r3, #0]
			btn_W  		 = (PS2Button >>  4) & 1U;
 80046e2:	4b2a      	ldr	r3, [pc, #168]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 80046e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046e8:	111b      	asrs	r3, r3, #4
 80046ea:	b21b      	sxth	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <DMA2_Stream2_IRQHandler+0x29c>)
 80046f6:	701a      	strb	r2, [r3, #0]
			btn_E  		 = (PS2Button >>  3) & 1U;
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 80046fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046fe:	10db      	asrs	r3, r3, #3
 8004700:	b21b      	sxth	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <DMA2_Stream2_IRQHandler+0x2a0>)
 800470c:	701a      	strb	r2, [r3, #0]
			btn_Q  		 = (PS2Button >>  2) & 1U;
 800470e:	4b1f      	ldr	r3, [pc, #124]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 8004710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004714:	109b      	asrs	r3, r3, #2
 8004716:	b21b      	sxth	r3, r3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	4b30      	ldr	r3, [pc, #192]	; (80047e4 <DMA2_Stream2_IRQHandler+0x2a4>)
 8004722:	701a      	strb	r2, [r3, #0]
			btn_C  		 = (PS2Button >>  1) & 1U;
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 8004726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800472a:	105b      	asrs	r3, r3, #1
 800472c:	b21b      	sxth	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <DMA2_Stream2_IRQHandler+0x2a8>)
 8004738:	701a      	strb	r2, [r3, #0]
			btn_Z  		 = (PS2Button >>  0) & 1U;
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <DMA2_Stream2_IRQHandler+0x24c>)
 800473c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <DMA2_Stream2_IRQHandler+0x2ac>)
 800474a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 800474c:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <DMA2_Stream2_IRQHandler+0x244>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2baa      	cmp	r3, #170	; 0xaa
 8004752:	d106      	bne.n	8004762 <DMA2_Stream2_IRQHandler+0x222>
		PS2CheckbyteCount++;
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <DMA2_Stream2_IRQHandler+0x23c>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <DMA2_Stream2_IRQHandler+0x23c>)
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e006      	b.n	8004770 <DMA2_Stream2_IRQHandler+0x230>
	else
		if(PS2CheckbyteCount != 4)
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <DMA2_Stream2_IRQHandler+0x23c>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b04      	cmp	r3, #4
 8004768:	d002      	beq.n	8004770 <DMA2_Stream2_IRQHandler+0x230>
			PS2CheckbyteCount = 0;
 800476a:	4b04      	ldr	r3, [pc, #16]	; (800477c <DMA2_Stream2_IRQHandler+0x23c>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004770:	481f      	ldr	r0, [pc, #124]	; (80047f0 <DMA2_Stream2_IRQHandler+0x2b0>)
 8004772:	f002 fc7d 	bl	8007070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	2400018c 	.word	0x2400018c
 8004780:	240009e0 	.word	0x240009e0
 8004784:	24000c98 	.word	0x24000c98
 8004788:	24000838 	.word	0x24000838
 800478c:	24000b9c 	.word	0x24000b9c
 8004790:	24000010 	.word	0x24000010
 8004794:	24000430 	.word	0x24000430
 8004798:	2400000e 	.word	0x2400000e
 800479c:	24000bd4 	.word	0x24000bd4
 80047a0:	2400000c 	.word	0x2400000c
 80047a4:	24000cf0 	.word	0x24000cf0
 80047a8:	2400000a 	.word	0x2400000a
 80047ac:	24000d44 	.word	0x24000d44
 80047b0:	2400040d 	.word	0x2400040d
 80047b4:	24000bb0 	.word	0x24000bb0
 80047b8:	24000ba1 	.word	0x24000ba1
 80047bc:	24000cb8 	.word	0x24000cb8
 80047c0:	24000bd6 	.word	0x24000bd6
 80047c4:	24000bf1 	.word	0x24000bf1
 80047c8:	24000cfb 	.word	0x24000cfb
 80047cc:	24000904 	.word	0x24000904
 80047d0:	24000bb4 	.word	0x24000bb4
 80047d4:	240001d9 	.word	0x240001d9
 80047d8:	2400040e 	.word	0x2400040e
 80047dc:	24000905 	.word	0x24000905
 80047e0:	24000410 	.word	0x24000410
 80047e4:	24000beb 	.word	0x24000beb
 80047e8:	24000d3c 	.word	0x24000d3c
 80047ec:	24000cc8 	.word	0x24000cc8
 80047f0:	240002f0 	.word	0x240002f0

080047f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80047f8:	4802      	ldr	r0, [pc, #8]	; (8004804 <USART6_IRQHandler+0x10>)
 80047fa:	f008 f82d 	bl	800c858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	24000c0c 	.word	0x24000c0c

08004808 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800480c:	4802      	ldr	r0, [pc, #8]	; (8004818 <UART7_IRQHandler+0x10>)
 800480e:	f008 f823 	bl	800c858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	2400021c 	.word	0x2400021c

0800481c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <_sbrk+0x50>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <_sbrk+0x16>
		heap_end = &end;
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <_sbrk+0x50>)
 800482e:	4a10      	ldr	r2, [pc, #64]	; (8004870 <_sbrk+0x54>)
 8004830:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <_sbrk+0x50>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <_sbrk+0x50>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4413      	add	r3, r2
 8004840:	466a      	mov	r2, sp
 8004842:	4293      	cmp	r3, r2
 8004844:	d907      	bls.n	8004856 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004846:	f00b f97d 	bl	800fb44 <__errno>
 800484a:	4602      	mov	r2, r0
 800484c:	230c      	movs	r3, #12
 800484e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	e006      	b.n	8004864 <_sbrk+0x48>
	}

	heap_end += incr;
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <_sbrk+0x50>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	4a03      	ldr	r2, [pc, #12]	; (800486c <_sbrk+0x50>)
 8004860:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004862:	68fb      	ldr	r3, [r7, #12]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	240001c8 	.word	0x240001c8
 8004870:	24000de0 	.word	0x24000de0

08004874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004878:	4b29      	ldr	r3, [pc, #164]	; (8004920 <SystemInit+0xac>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	4a28      	ldr	r2, [pc, #160]	; (8004920 <SystemInit+0xac>)
 8004880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004888:	4b26      	ldr	r3, [pc, #152]	; (8004924 <SystemInit+0xb0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a25      	ldr	r2, [pc, #148]	; (8004924 <SystemInit+0xb0>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <SystemInit+0xb0>)
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800489a:	4b22      	ldr	r3, [pc, #136]	; (8004924 <SystemInit+0xb0>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4921      	ldr	r1, [pc, #132]	; (8004924 <SystemInit+0xb0>)
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <SystemInit+0xb4>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80048a6:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <SystemInit+0xb0>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80048ac:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <SystemInit+0xb0>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <SystemInit+0xb0>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80048b8:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <SystemInit+0xb0>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <SystemInit+0xb0>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80048c4:	4b17      	ldr	r3, [pc, #92]	; (8004924 <SystemInit+0xb0>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <SystemInit+0xb0>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80048d0:	4b14      	ldr	r3, [pc, #80]	; (8004924 <SystemInit+0xb0>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <SystemInit+0xb0>)
 80048d8:	2200      	movs	r2, #0
 80048da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80048dc:	4b11      	ldr	r3, [pc, #68]	; (8004924 <SystemInit+0xb0>)
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <SystemInit+0xb0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048e8:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <SystemInit+0xb0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a0d      	ldr	r2, [pc, #52]	; (8004924 <SystemInit+0xb0>)
 80048ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <SystemInit+0xb0>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <SystemInit+0xb8>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <SystemInit+0xbc>)
 8004900:	4013      	ands	r3, r2
 8004902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004906:	d202      	bcs.n	800490e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <SystemInit+0xc0>)
 800490a:	2201      	movs	r2, #1
 800490c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <SystemInit+0xac>)
 8004910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004914:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00
 8004924:	58024400 	.word	0x58024400
 8004928:	eaf6ed7f 	.word	0xeaf6ed7f
 800492c:	5c001000 	.word	0x5c001000
 8004930:	ffff0000 	.word	0xffff0000
 8004934:	51008108 	.word	0x51008108

08004938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004970 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800493c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800493e:	e003      	b.n	8004948 <LoopCopyDataInit>

08004940 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004942:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004944:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004946:	3104      	adds	r1, #4

08004948 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004948:	480b      	ldr	r0, [pc, #44]	; (8004978 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800494c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800494e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004950:	d3f6      	bcc.n	8004940 <CopyDataInit>
  ldr  r2, =_sbss
 8004952:	4a0b      	ldr	r2, [pc, #44]	; (8004980 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004954:	e002      	b.n	800495c <LoopFillZerobss>

08004956 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004956:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004958:	f842 3b04 	str.w	r3, [r2], #4

0800495c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800495e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004960:	d3f9      	bcc.n	8004956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004962:	f7ff ff87 	bl	8004874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004966:	f00b f8f3 	bl	800fb50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800496a:	f7fd ffdd 	bl	8002928 <main>
  bx  lr    
 800496e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004970:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004974:	080118e8 	.word	0x080118e8
  ldr  r0, =_sdata
 8004978:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800497c:	24000170 	.word	0x24000170
  ldr  r2, =_sbss
 8004980:	24000170 	.word	0x24000170
  ldr  r3, = _ebss
 8004984:	24000ddc 	.word	0x24000ddc

08004988 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004988:	e7fe      	b.n	8004988 <ADC3_IRQHandler>
	...

0800498c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004992:	2003      	movs	r0, #3
 8004994:	f001 fb22 	bl	8005fdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004998:	f005 f934 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800499c:	4601      	mov	r1, r0
 800499e:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <HAL_Init+0x68>)
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	0a1b      	lsrs	r3, r3, #8
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <HAL_Init+0x6c>)
 80049aa:	5cd3      	ldrb	r3, [r2, r3]
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	fa21 f303 	lsr.w	r3, r1, r3
 80049b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <HAL_Init+0x68>)
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <HAL_Init+0x6c>)
 80049c0:	5cd3      	ldrb	r3, [r2, r3]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <HAL_Init+0x70>)
 80049ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049d0:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <HAL_Init+0x74>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049d6:	2000      	movs	r0, #0
 80049d8:	f000 f814 	bl	8004a04 <HAL_InitTick>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e002      	b.n	80049ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80049e6:	f7ff f925 	bl	8003c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	58024400 	.word	0x58024400
 80049f8:	0801166c 	.word	0x0801166c
 80049fc:	240000fc 	.word	0x240000fc
 8004a00:	240000f8 	.word	0x240000f8

08004a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004a0c:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_InitTick+0x60>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e021      	b.n	8004a5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004a18:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <HAL_InitTick+0x64>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_InitTick+0x60>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	4619      	mov	r1, r3
 8004a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 fb07 	bl	8006042 <HAL_SYSTICK_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e00e      	b.n	8004a5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b0f      	cmp	r3, #15
 8004a42:	d80a      	bhi.n	8004a5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a44:	2200      	movs	r2, #0
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	f001 fad1 	bl	8005ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a50:	4a06      	ldr	r2, [pc, #24]	; (8004a6c <HAL_InitTick+0x68>)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	24000104 	.word	0x24000104
 8004a68:	240000f8 	.word	0x240000f8
 8004a6c:	24000100 	.word	0x24000100

08004a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_IncTick+0x20>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_IncTick+0x24>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <HAL_IncTick+0x24>)
 8004a82:	6013      	str	r3, [r2, #0]
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	24000104 	.word	0x24000104
 8004a94:	24000db8 	.word	0x24000db8

08004a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_GetTick+0x14>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	24000db8 	.word	0x24000db8

08004ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ab8:	f7ff ffee 	bl	8004a98 <HAL_GetTick>
 8004abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d005      	beq.n	8004ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_Delay+0x40>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ad6:	bf00      	nop
 8004ad8:	f7ff ffde 	bl	8004a98 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d8f7      	bhi.n	8004ad8 <HAL_Delay+0x28>
  {
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	24000104 	.word	0x24000104

08004af4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <HAL_GetREVID+0x14>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	0c1b      	lsrs	r3, r3, #16
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	5c001000 	.word	0x5c001000

08004b0c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004b16:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	4904      	ldr	r1, [pc, #16]	; (8004b34 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	604b      	str	r3, [r1, #4]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	58000400 	.word	0x58000400

08004b38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ba0:	b490      	push	{r4, r7}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3360      	adds	r3, #96	; 0x60
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc90      	pop	{r4, r7}
 8004bd8:	4770      	bx	lr

08004bda <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	611a      	str	r2, [r3, #16]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004c0c:	b490      	push	{r4, r7}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3360      	adds	r3, #96	; 0x60
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	6023      	str	r3, [r4, #0]
}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc90      	pop	{r4, r7}
 8004c3a:	4770      	bx	lr

08004c3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c62:	b490      	push	{r4, r7}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3330      	adds	r3, #48	; 0x30
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	4413      	add	r3, r2
 8004c80:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	211f      	movs	r1, #31
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	401a      	ands	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	0e9b      	lsrs	r3, r3, #26
 8004c98:	f003 011f 	and.w	r1, r3, #31
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc90      	pop	{r4, r7}
 8004cb2:	4770      	bx	lr

08004cb4 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f023 0203 	bic.w	r2, r3, #3
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004cda:	b490      	push	{r4, r7}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	461a      	mov	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	0e5b      	lsrs	r3, r3, #25
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	4413      	add	r3, r2
 8004cf8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	0d1b      	lsrs	r3, r3, #20
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2107      	movs	r1, #7
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	0d1b      	lsrs	r3, r3, #20
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc90      	pop	{r4, r7}
 8004d28:	4770      	bx	lr
	...

08004d2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d44:	43db      	mvns	r3, r3
 8004d46:	401a      	ands	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0318 	and.w	r3, r3, #24
 8004d4e:	4908      	ldr	r1, [pc, #32]	; (8004d70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004d50:	40d9      	lsrs	r1, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	400b      	ands	r3, r1
 8004d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	000fffff 	.word	0x000fffff

08004d74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 031f 	and.w	r3, r3, #31
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6093      	str	r3, [r2, #8]
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	5fffffc0 	.word	0x5fffffc0

08004db4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc8:	d101      	bne.n	8004dce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <LL_ADC_EnableInternalRegulator+0x24>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	6fffffc0 	.word	0x6fffffc0

08004e04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e18:	d101      	bne.n	8004e1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <LL_ADC_Enable+0x24>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	f043 0201 	orr.w	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	7fffffc0 	.word	0x7fffffc0

08004e54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <LL_ADC_IsEnabled+0x18>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <LL_ADC_IsEnabled+0x1a>
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <LL_ADC_REG_StartConversion+0x24>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	f043 0204 	orr.w	r2, r3, #4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	7fffffc0 	.word	0x7fffffc0

08004ea4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d101      	bne.n	8004ebc <LL_ADC_REG_IsConversionOngoing+0x18>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d101      	bne.n	8004ee2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e18e      	b.n	8005228 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fe fea5 	bl	8003c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ff3f 	bl	8004db4 <LL_ADC_IsDeepPowerDownEnabled>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff ff25 	bl	8004d90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ff5a 	bl	8004e04 <LL_ADC_IsInternalRegulatorEnabled>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d113      	bne.n	8004f7e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ff3e 	bl	8004ddc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004f60:	4b9a      	ldr	r3, [pc, #616]	; (80051cc <HAL_ADC_Init+0x2dc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	099b      	lsrs	r3, r3, #6
 8004f66:	4a9a      	ldr	r2, [pc, #616]	; (80051d0 <HAL_ADC_Init+0x2e0>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	099b      	lsrs	r3, r3, #6
 8004f6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f70:	e002      	b.n	8004f78 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f9      	bne.n	8004f72 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff ff3e 	bl	8004e04 <LL_ADC_IsInternalRegulatorEnabled>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10d      	bne.n	8004faa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f043 0210 	orr.w	r2, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff ff78 	bl	8004ea4 <LL_ADC_REG_IsConversionOngoing>
 8004fb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 8129 	bne.w	8005216 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 8125 	bne.w	8005216 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004fd4:	f043 0202 	orr.w	r2, r3, #2
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff ff37 	bl	8004e54 <LL_ADC_IsEnabled>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d136      	bne.n	800505a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a78      	ldr	r2, [pc, #480]	; (80051d4 <HAL_ADC_Init+0x2e4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_ADC_Init+0x110>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a77      	ldr	r2, [pc, #476]	; (80051d8 <HAL_ADC_Init+0x2e8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10e      	bne.n	800501e <HAL_ADC_Init+0x12e>
 8005000:	4874      	ldr	r0, [pc, #464]	; (80051d4 <HAL_ADC_Init+0x2e4>)
 8005002:	f7ff ff27 	bl	8004e54 <LL_ADC_IsEnabled>
 8005006:	4604      	mov	r4, r0
 8005008:	4873      	ldr	r0, [pc, #460]	; (80051d8 <HAL_ADC_Init+0x2e8>)
 800500a:	f7ff ff23 	bl	8004e54 <LL_ADC_IsEnabled>
 800500e:	4603      	mov	r3, r0
 8005010:	4323      	orrs	r3, r4
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	e008      	b.n	8005030 <HAL_ADC_Init+0x140>
 800501e:	486f      	ldr	r0, [pc, #444]	; (80051dc <HAL_ADC_Init+0x2ec>)
 8005020:	f7ff ff18 	bl	8004e54 <LL_ADC_IsEnabled>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d012      	beq.n	800505a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a66      	ldr	r2, [pc, #408]	; (80051d4 <HAL_ADC_Init+0x2e4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_ADC_Init+0x158>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a65      	ldr	r2, [pc, #404]	; (80051d8 <HAL_ADC_Init+0x2e8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d101      	bne.n	800504c <HAL_ADC_Init+0x15c>
 8005048:	4a65      	ldr	r2, [pc, #404]	; (80051e0 <HAL_ADC_Init+0x2f0>)
 800504a:	e000      	b.n	800504e <HAL_ADC_Init+0x15e>
 800504c:	4a65      	ldr	r2, [pc, #404]	; (80051e4 <HAL_ADC_Init+0x2f4>)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7ff fd6f 	bl	8004b38 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800505a:	f7ff fd4b 	bl	8004af4 <HAL_GetREVID>
 800505e:	4602      	mov	r2, r0
 8005060:	f241 0303 	movw	r3, #4099	; 0x1003
 8005064:	429a      	cmp	r2, r3
 8005066:	d914      	bls.n	8005092 <HAL_ADC_Init+0x1a2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b10      	cmp	r3, #16
 800506e:	d110      	bne.n	8005092 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7d5b      	ldrb	r3, [r3, #21]
 8005074:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800507a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005080:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7f1b      	ldrb	r3, [r3, #28]
 8005086:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8005088:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800508a:	f043 030c 	orr.w	r3, r3, #12
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e00d      	b.n	80050ae <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	7d5b      	ldrb	r3, [r3, #21]
 8005096:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800509c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80050a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7f1b      	ldrb	r3, [r3, #28]
 80050a8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	7f1b      	ldrb	r3, [r3, #28]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d106      	bne.n	80050c4 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	045b      	lsls	r3, r3, #17
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4313      	orrs	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	4b40      	ldr	r3, [pc, #256]	; (80051e8 <HAL_ADC_Init+0x2f8>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	69b9      	ldr	r1, [r7, #24]
 80050f0:	430b      	orrs	r3, r1
 80050f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fed3 	bl	8004ea4 <LL_ADC_REG_IsConversionOngoing>
 80050fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fee0 	bl	8004eca <LL_ADC_INJ_IsConversionOngoing>
 800510a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d14a      	bne.n	80051a8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d147      	bne.n	80051a8 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7d1b      	ldrb	r3, [r3, #20]
 800511c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <HAL_ADC_Init+0x2fc>)
 800512e:	4013      	ands	r3, r2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	69b9      	ldr	r1, [r7, #24]
 8005136:	430b      	orrs	r3, r1
 8005138:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005140:	2b01      	cmp	r3, #1
 8005142:	d11b      	bne.n	800517c <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <HAL_ADC_Init+0x300>)
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005158:	3a01      	subs	r2, #1
 800515a:	0411      	lsls	r1, r2, #16
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005166:	4311      	orrs	r1, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800516c:	430a      	orrs	r2, r1
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	e007      	b.n	800518c <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fd52 	bl	8005c4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d121      	bne.n	80051f4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	f023 010f 	bic.w	r1, r3, #15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	1e5a      	subs	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	631a      	str	r2, [r3, #48]	; 0x30
 80051c8:	e01c      	b.n	8005204 <HAL_ADC_Init+0x314>
 80051ca:	bf00      	nop
 80051cc:	240000f8 	.word	0x240000f8
 80051d0:	053e2d63 	.word	0x053e2d63
 80051d4:	40022000 	.word	0x40022000
 80051d8:	40022100 	.word	0x40022100
 80051dc:	58026000 	.word	0x58026000
 80051e0:	40022300 	.word	0x40022300
 80051e4:	58026300 	.word	0x58026300
 80051e8:	fff0c003 	.word	0xfff0c003
 80051ec:	ffffbffc 	.word	0xffffbffc
 80051f0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 020f 	bic.w	r2, r2, #15
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	f023 0303 	bic.w	r3, r3, #3
 800520c:	f043 0201 	orr.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	655a      	str	r2, [r3, #84]	; 0x54
 8005214:	e007      	b.n	8005226 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f043 0210 	orr.w	r2, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005226:	7ffb      	ldrb	r3, [r7, #31]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3724      	adds	r7, #36	; 0x24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd90      	pop	{r4, r7, pc}

08005230 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a55      	ldr	r2, [pc, #340]	; (8005398 <HAL_ADC_Start_DMA+0x168>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_ADC_Start_DMA+0x20>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a54      	ldr	r2, [pc, #336]	; (800539c <HAL_ADC_Start_DMA+0x16c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <HAL_ADC_Start_DMA+0x24>
 8005250:	4b53      	ldr	r3, [pc, #332]	; (80053a0 <HAL_ADC_Start_DMA+0x170>)
 8005252:	e000      	b.n	8005256 <HAL_ADC_Start_DMA+0x26>
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_ADC_Start_DMA+0x174>)
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff fd8c 	bl	8004d74 <LL_ADC_GetMultimode>
 800525c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fe1e 	bl	8004ea4 <LL_ADC_REG_IsConversionOngoing>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	f040 808c 	bne.w	8005388 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_ADC_Start_DMA+0x4e>
 800527a:	2302      	movs	r3, #2
 800527c:	e087      	b.n	800538e <HAL_ADC_Start_DMA+0x15e>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b05      	cmp	r3, #5
 8005290:	d002      	beq.n	8005298 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b09      	cmp	r3, #9
 8005296:	d170      	bne.n	800537a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fbbf 	bl	8005a1c <ADC_Enable>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d163      	bne.n	8005370 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ac:	4b3e      	ldr	r3, [pc, #248]	; (80053a8 <HAL_ADC_Start_DMA+0x178>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a37      	ldr	r2, [pc, #220]	; (800539c <HAL_ADC_Start_DMA+0x16c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d002      	beq.n	80052c8 <HAL_ADC_Start_DMA+0x98>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	e000      	b.n	80052ca <HAL_ADC_Start_DMA+0x9a>
 80052c8:	4b33      	ldr	r3, [pc, #204]	; (8005398 <HAL_ADC_Start_DMA+0x168>)
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d002      	beq.n	80052d8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d006      	beq.n	80052fe <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	f023 0206 	bic.w	r2, r3, #6
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	659a      	str	r2, [r3, #88]	; 0x58
 80052fc:	e002      	b.n	8005304 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005308:	4a28      	ldr	r2, [pc, #160]	; (80053ac <HAL_ADC_Start_DMA+0x17c>)
 800530a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005310:	4a27      	ldr	r2, [pc, #156]	; (80053b0 <HAL_ADC_Start_DMA+0x180>)
 8005312:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005318:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <HAL_ADC_Start_DMA+0x184>)
 800531a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	221c      	movs	r2, #28
 8005322:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0210 	orr.w	r2, r2, #16
 800533a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f7ff fcb4 	bl	8004cb4 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3340      	adds	r3, #64	; 0x40
 8005356:	4619      	mov	r1, r3
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f001 f9da 	bl	8006714 <HAL_DMA_Start_IT>
 8005360:	4603      	mov	r3, r0
 8005362:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fd87 	bl	8004e7c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800536e:	e00d      	b.n	800538c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005378:	e008      	b.n	800538c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005386:	e001      	b.n	800538c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005388:	2302      	movs	r3, #2
 800538a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40022000 	.word	0x40022000
 800539c:	40022100 	.word	0x40022100
 80053a0:	40022300 	.word	0x40022300
 80053a4:	58026300 	.word	0x58026300
 80053a8:	fffff0fe 	.word	0xfffff0fe
 80053ac:	08005b25 	.word	0x08005b25
 80053b0:	08005bfd 	.word	0x08005bfd
 80053b4:	08005c19 	.word	0x08005c19

080053b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b099      	sub	sp, #100	; 0x64
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4a99      	ldr	r2, [pc, #612]	; (8005674 <HAL_ADC_ConfigChannel+0x280>)
 800540e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_ADC_ConfigChannel+0x2a>
 800541a:	2302      	movs	r3, #2
 800541c:	e2e6      	b.n	80059ec <HAL_ADC_ConfigChannel+0x5f8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fd3a 	bl	8004ea4 <LL_ADC_REG_IsConversionOngoing>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 82cb 	bne.w	80059ce <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005440:	2b00      	cmp	r3, #0
 8005442:	d108      	bne.n	8005456 <HAL_ADC_ConfigChannel+0x62>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0e9b      	lsrs	r3, r3, #26
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2201      	movs	r2, #1
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	e00f      	b.n	8005476 <HAL_ADC_ConfigChannel+0x82>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005466:	fab3 f383 	clz	r3, r3
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	2201      	movs	r2, #1
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	69d1      	ldr	r1, [r2, #28]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	430b      	orrs	r3, r1
 8005482:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6859      	ldr	r1, [r3, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	f7ff fbe6 	bl	8004c62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fd02 	bl	8004ea4 <LL_ADC_REG_IsConversionOngoing>
 80054a0:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fd0f 	bl	8004eca <LL_ADC_INJ_IsConversionOngoing>
 80054ac:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f040 80b3 	bne.w	800561c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80054b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f040 80af 	bne.w	800561c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f7ff fc05 	bl	8004cda <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80054d0:	4b69      	ldr	r3, [pc, #420]	; (8005678 <HAL_ADC_ConfigChannel+0x284>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80054d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054dc:	d10b      	bne.n	80054f6 <HAL_ADC_ConfigChannel+0x102>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	e01d      	b.n	8005532 <HAL_ADC_ConfigChannel+0x13e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_ADC_ConfigChannel+0x128>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	e00a      	b.n	8005532 <HAL_ADC_ConfigChannel+0x13e>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	089b      	lsrs	r3, r3, #2
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2b04      	cmp	r3, #4
 800553a:	d027      	beq.n	800558c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6919      	ldr	r1, [r3, #16]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554a:	f7ff fb29 	bl	8004ba0 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6919      	ldr	r1, [r3, #16]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	7e5b      	ldrb	r3, [r3, #25]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d102      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x170>
 800555e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005562:	e000      	b.n	8005566 <HAL_ADC_ConfigChannel+0x172>
 8005564:	2300      	movs	r3, #0
 8005566:	461a      	mov	r2, r3
 8005568:	f7ff fb50 	bl	8004c0c <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6919      	ldr	r1, [r3, #16]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	7e1b      	ldrb	r3, [r3, #24]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d102      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x18e>
 800557c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005580:	e000      	b.n	8005584 <HAL_ADC_ConfigChannel+0x190>
 8005582:	2300      	movs	r3, #0
 8005584:	461a      	mov	r2, r3
 8005586:	f7ff fb28 	bl	8004bda <LL_ADC_SetDataRightShift>
 800558a:	e047      	b.n	800561c <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	069b      	lsls	r3, r3, #26
 800559c:	429a      	cmp	r2, r3
 800559e:	d107      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055ae:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	069b      	lsls	r3, r3, #26
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d107      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055d2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	069b      	lsls	r3, r3, #26
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d107      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055f6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	069b      	lsls	r3, r3, #26
 8005608:	429a      	cmp	r2, r3
 800560a:	d107      	bne.n	800561c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800561a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fc17 	bl	8004e54 <LL_ADC_IsEnabled>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	f040 81d9 	bne.w	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	461a      	mov	r2, r3
 800563c:	f7ff fb76 	bl	8004d2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a0b      	ldr	r2, [pc, #44]	; (8005674 <HAL_ADC_ConfigChannel+0x280>)
 8005646:	4293      	cmp	r3, r2
 8005648:	f040 8101 	bne.w	800584e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10f      	bne.n	800567c <HAL_ADC_ConfigChannel+0x288>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	0e9b      	lsrs	r3, r3, #26
 8005662:	3301      	adds	r3, #1
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	2b09      	cmp	r3, #9
 800566a:	bf94      	ite	ls
 800566c:	2301      	movls	r3, #1
 800566e:	2300      	movhi	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e016      	b.n	80056a2 <HAL_ADC_ConfigChannel+0x2ae>
 8005674:	47ff0000 	.word	0x47ff0000
 8005678:	5c001000 	.word	0x5c001000
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005684:	fa93 f3a3 	rbit	r3, r3
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800568a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568c:	fab3 f383 	clz	r3, r3
 8005690:	b2db      	uxtb	r3, r3
 8005692:	3301      	adds	r3, #1
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2b09      	cmp	r3, #9
 800569a:	bf94      	ite	ls
 800569c:	2301      	movls	r3, #1
 800569e:	2300      	movhi	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d064      	beq.n	8005770 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x2ce>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	0e9b      	lsrs	r3, r3, #26
 80056b8:	3301      	adds	r3, #1
 80056ba:	069b      	lsls	r3, r3, #26
 80056bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056c0:	e00e      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x2ec>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80056d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	3301      	adds	r3, #1
 80056da:	069b      	lsls	r3, r3, #26
 80056dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x30c>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	0e9b      	lsrs	r3, r3, #26
 80056f2:	3301      	adds	r3, #1
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	2101      	movs	r1, #1
 80056fa:	fa01 f303 	lsl.w	r3, r1, r3
 80056fe:	e010      	b.n	8005722 <HAL_ADC_ConfigChannel+0x32e>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
 8005716:	3301      	adds	r3, #1
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2101      	movs	r1, #1
 800571e:	fa01 f303 	lsl.w	r3, r1, r3
 8005722:	ea42 0103 	orr.w	r1, r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <HAL_ADC_ConfigChannel+0x354>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0e9b      	lsrs	r3, r3, #26
 8005738:	3301      	adds	r3, #1
 800573a:	f003 021f 	and.w	r2, r3, #31
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	051b      	lsls	r3, r3, #20
 8005746:	e011      	b.n	800576c <HAL_ADC_ConfigChannel+0x378>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	fa93 f3a3 	rbit	r3, r3
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	fab3 f383 	clz	r3, r3
 800575c:	b2db      	uxtb	r3, r3
 800575e:	3301      	adds	r3, #1
 8005760:	f003 021f 	and.w	r2, r3, #31
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800576c:	430b      	orrs	r3, r1
 800576e:	e069      	b.n	8005844 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_ADC_ConfigChannel+0x398>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	0e9b      	lsrs	r3, r3, #26
 8005782:	3301      	adds	r3, #1
 8005784:	069b      	lsls	r3, r3, #26
 8005786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800578a:	e00e      	b.n	80057aa <HAL_ADC_ConfigChannel+0x3b6>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	61fb      	str	r3, [r7, #28]
  return result;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	fab3 f383 	clz	r3, r3
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	3301      	adds	r3, #1
 80057a4:	069b      	lsls	r3, r3, #26
 80057a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <HAL_ADC_ConfigChannel+0x3d6>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	0e9b      	lsrs	r3, r3, #26
 80057bc:	3301      	adds	r3, #1
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2101      	movs	r1, #1
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	e010      	b.n	80057ec <HAL_ADC_ConfigChannel+0x3f8>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	fa93 f3a3 	rbit	r3, r3
 80057d6:	617b      	str	r3, [r7, #20]
  return result;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	3301      	adds	r3, #1
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2101      	movs	r1, #1
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	ea42 0103 	orr.w	r1, r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10d      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x424>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	0e9b      	lsrs	r3, r3, #26
 8005802:	3301      	adds	r3, #1
 8005804:	f003 021f 	and.w	r2, r3, #31
 8005808:	4613      	mov	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	3b1e      	subs	r3, #30
 8005810:	051b      	lsls	r3, r3, #20
 8005812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005816:	e014      	b.n	8005842 <HAL_ADC_ConfigChannel+0x44e>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	fa93 f3a3 	rbit	r3, r3
 8005824:	60fb      	str	r3, [r7, #12]
  return result;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	fab3 f383 	clz	r3, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	3301      	adds	r3, #1
 8005830:	f003 021f 	and.w	r2, r3, #31
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	3b1e      	subs	r3, #30
 800583c:	051b      	lsls	r3, r3, #20
 800583e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005842:	430b      	orrs	r3, r1
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	6892      	ldr	r2, [r2, #8]
 8005848:	4619      	mov	r1, r3
 800584a:	f7ff fa46 	bl	8004cda <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f280 80c4 	bge.w	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a65      	ldr	r2, [pc, #404]	; (80059f4 <HAL_ADC_ConfigChannel+0x600>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_ADC_ConfigChannel+0x478>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a64      	ldr	r2, [pc, #400]	; (80059f8 <HAL_ADC_ConfigChannel+0x604>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d101      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x47c>
 800586c:	4b63      	ldr	r3, [pc, #396]	; (80059fc <HAL_ADC_ConfigChannel+0x608>)
 800586e:	e000      	b.n	8005872 <HAL_ADC_ConfigChannel+0x47e>
 8005870:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_ADC_ConfigChannel+0x60c>)
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff f986 	bl	8004b84 <LL_ADC_GetCommonPathInternalCh>
 8005878:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5d      	ldr	r2, [pc, #372]	; (80059f4 <HAL_ADC_ConfigChannel+0x600>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_ADC_ConfigChannel+0x49a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5b      	ldr	r2, [pc, #364]	; (80059f8 <HAL_ADC_ConfigChannel+0x604>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10e      	bne.n	80058ac <HAL_ADC_ConfigChannel+0x4b8>
 800588e:	4859      	ldr	r0, [pc, #356]	; (80059f4 <HAL_ADC_ConfigChannel+0x600>)
 8005890:	f7ff fae0 	bl	8004e54 <LL_ADC_IsEnabled>
 8005894:	4604      	mov	r4, r0
 8005896:	4858      	ldr	r0, [pc, #352]	; (80059f8 <HAL_ADC_ConfigChannel+0x604>)
 8005898:	f7ff fadc 	bl	8004e54 <LL_ADC_IsEnabled>
 800589c:	4603      	mov	r3, r0
 800589e:	4323      	orrs	r3, r4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	e008      	b.n	80058be <HAL_ADC_ConfigChannel+0x4ca>
 80058ac:	4855      	ldr	r0, [pc, #340]	; (8005a04 <HAL_ADC_ConfigChannel+0x610>)
 80058ae:	f7ff fad1 	bl	8004e54 <LL_ADC_IsEnabled>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d07b      	beq.n	80059ba <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a50      	ldr	r2, [pc, #320]	; (8005a08 <HAL_ADC_ConfigChannel+0x614>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d12e      	bne.n	800592a <HAL_ADC_ConfigChannel+0x536>
 80058cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d129      	bne.n	800592a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a4a      	ldr	r2, [pc, #296]	; (8005a04 <HAL_ADC_ConfigChannel+0x610>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d17f      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a43      	ldr	r2, [pc, #268]	; (80059f4 <HAL_ADC_ConfigChannel+0x600>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_ADC_ConfigChannel+0x500>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a42      	ldr	r2, [pc, #264]	; (80059f8 <HAL_ADC_ConfigChannel+0x604>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d101      	bne.n	80058f8 <HAL_ADC_ConfigChannel+0x504>
 80058f4:	4a41      	ldr	r2, [pc, #260]	; (80059fc <HAL_ADC_ConfigChannel+0x608>)
 80058f6:	e000      	b.n	80058fa <HAL_ADC_ConfigChannel+0x506>
 80058f8:	4a41      	ldr	r2, [pc, #260]	; (8005a00 <HAL_ADC_ConfigChannel+0x60c>)
 80058fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005900:	4619      	mov	r1, r3
 8005902:	4610      	mov	r0, r2
 8005904:	f7ff f92b 	bl	8004b5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005908:	4b40      	ldr	r3, [pc, #256]	; (8005a0c <HAL_ADC_ConfigChannel+0x618>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	099b      	lsrs	r3, r3, #6
 800590e:	4a40      	ldr	r2, [pc, #256]	; (8005a10 <HAL_ADC_ConfigChannel+0x61c>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	099b      	lsrs	r3, r3, #6
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800591a:	e002      	b.n	8005922 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	3b01      	subs	r3, #1
 8005920:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f9      	bne.n	800591c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005928:	e05a      	b.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a39      	ldr	r2, [pc, #228]	; (8005a14 <HAL_ADC_ConfigChannel+0x620>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d11e      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x57e>
 8005934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d119      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a30      	ldr	r2, [pc, #192]	; (8005a04 <HAL_ADC_ConfigChannel+0x610>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d14b      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <HAL_ADC_ConfigChannel+0x600>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_ADC_ConfigChannel+0x568>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a28      	ldr	r2, [pc, #160]	; (80059f8 <HAL_ADC_ConfigChannel+0x604>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d101      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x56c>
 800595c:	4a27      	ldr	r2, [pc, #156]	; (80059fc <HAL_ADC_ConfigChannel+0x608>)
 800595e:	e000      	b.n	8005962 <HAL_ADC_ConfigChannel+0x56e>
 8005960:	4a27      	ldr	r2, [pc, #156]	; (8005a00 <HAL_ADC_ConfigChannel+0x60c>)
 8005962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f7ff f8f7 	bl	8004b5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005970:	e036      	b.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a28      	ldr	r2, [pc, #160]	; (8005a18 <HAL_ADC_ConfigChannel+0x624>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d131      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
 800597c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d12c      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <HAL_ADC_ConfigChannel+0x610>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d127      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a17      	ldr	r2, [pc, #92]	; (80059f4 <HAL_ADC_ConfigChannel+0x600>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d004      	beq.n	80059a4 <HAL_ADC_ConfigChannel+0x5b0>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <HAL_ADC_ConfigChannel+0x604>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d101      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x5b4>
 80059a4:	4a15      	ldr	r2, [pc, #84]	; (80059fc <HAL_ADC_ConfigChannel+0x608>)
 80059a6:	e000      	b.n	80059aa <HAL_ADC_ConfigChannel+0x5b6>
 80059a8:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <HAL_ADC_ConfigChannel+0x60c>)
 80059aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7ff f8d3 	bl	8004b5e <LL_ADC_SetCommonPathInternalCh>
 80059b8:	e012      	b.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80059cc:	e008      	b.n	80059e0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3764      	adds	r7, #100	; 0x64
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd90      	pop	{r4, r7, pc}
 80059f4:	40022000 	.word	0x40022000
 80059f8:	40022100 	.word	0x40022100
 80059fc:	40022300 	.word	0x40022300
 8005a00:	58026300 	.word	0x58026300
 8005a04:	58026000 	.word	0x58026000
 8005a08:	cb840000 	.word	0xcb840000
 8005a0c:	240000f8 	.word	0x240000f8
 8005a10:	053e2d63 	.word	0x053e2d63
 8005a14:	c7520000 	.word	0xc7520000
 8005a18:	cfb80000 	.word	0xcfb80000

08005a1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fa13 	bl	8004e54 <LL_ADC_IsEnabled>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d167      	bne.n	8005b04 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	4b35      	ldr	r3, [pc, #212]	; (8005b10 <ADC_Enable+0xf4>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	f043 0210 	orr.w	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e053      	b.n	8005b06 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff f9e2 	bl	8004e2c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a68:	f7ff f816 	bl	8004a98 <HAL_GetTick>
 8005a6c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <ADC_Enable+0xf8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <ADC_Enable+0x66>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a26      	ldr	r2, [pc, #152]	; (8005b18 <ADC_Enable+0xfc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <ADC_Enable+0x6a>
 8005a82:	4b26      	ldr	r3, [pc, #152]	; (8005b1c <ADC_Enable+0x100>)
 8005a84:	e000      	b.n	8005a88 <ADC_Enable+0x6c>
 8005a86:	4b26      	ldr	r3, [pc, #152]	; (8005b20 <ADC_Enable+0x104>)
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff f973 	bl	8004d74 <LL_ADC_GetMultimode>
 8005a8e:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <ADC_Enable+0xfc>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d002      	beq.n	8005aa0 <ADC_Enable+0x84>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	e000      	b.n	8005aa2 <ADC_Enable+0x86>
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <ADC_Enable+0xf8>)
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d025      	beq.n	8005af6 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d129      	bne.n	8005b04 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ab0:	e021      	b.n	8005af6 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff f9cc 	bl	8004e54 <LL_ADC_IsEnabled>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff f9b0 	bl	8004e2c <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005acc:	f7fe ffe4 	bl	8004a98 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d90d      	bls.n	8005af6 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	f043 0210 	orr.w	r2, r3, #16
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aea:	f043 0201 	orr.w	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e007      	b.n	8005b06 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d1d6      	bne.n	8005ab2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	8000003f 	.word	0x8000003f
 8005b14:	40022000 	.word	0x40022000
 8005b18:	40022100 	.word	0x40022100
 8005b1c:	40022300 	.word	0x40022300
 8005b20:	58026300 	.word	0x58026300

08005b24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d14b      	bne.n	8005bd6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d021      	beq.n	8005b9c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff f86d 	bl	8004c3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d032      	beq.n	8005bce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d12b      	bne.n	8005bce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11f      	bne.n	8005bce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f043 0201 	orr.w	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
 8005b9a:	e018      	b.n	8005bce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d111      	bne.n	8005bce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	f043 0201 	orr.w	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff fbf2 	bl	80053b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bd4:	e00e      	b.n	8005bf4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fbfc 	bl	80053e0 <HAL_ADC_ErrorCallback>
}
 8005be8:	e004      	b.n	8005bf4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff fbde 	bl	80053cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	f043 0204 	orr.w	r2, r3, #4
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff fbce 	bl	80053e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a70      	ldr	r2, [pc, #448]	; (8005e1c <ADC_ConfigureBoostMode+0x1d0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <ADC_ConfigureBoostMode+0x1c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6f      	ldr	r2, [pc, #444]	; (8005e20 <ADC_ConfigureBoostMode+0x1d4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d109      	bne.n	8005c7c <ADC_ConfigureBoostMode+0x30>
 8005c68:	4b6e      	ldr	r3, [pc, #440]	; (8005e24 <ADC_ConfigureBoostMode+0x1d8>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e008      	b.n	8005c8e <ADC_ConfigureBoostMode+0x42>
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <ADC_ConfigureBoostMode+0x1dc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01a      	beq.n	8005cc8 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005c92:	f004 f929 	bl	8009ee8 <HAL_RCC_GetHCLKFreq>
 8005c96:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca0:	d006      	beq.n	8005cb0 <ADC_ConfigureBoostMode+0x64>
 8005ca2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ca6:	d00b      	beq.n	8005cc0 <ADC_ConfigureBoostMode+0x74>
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d000      	beq.n	8005cb0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8005cae:	e05d      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbc:	60fb      	str	r3, [r7, #12]
        break;
 8005cbe:	e055      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	089b      	lsrs	r3, r3, #2
 8005cc4:	60fb      	str	r3, [r7, #12]
        break;
 8005cc6:	e051      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005cc8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005ccc:	f005 f846 	bl	800ad5c <HAL_RCCEx_GetPeriphCLKFreq>
 8005cd0:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005cda:	d02a      	beq.n	8005d32 <ADC_ConfigureBoostMode+0xe6>
 8005cdc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ce0:	d813      	bhi.n	8005d0a <ADC_ConfigureBoostMode+0xbe>
 8005ce2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ce6:	d024      	beq.n	8005d32 <ADC_ConfigureBoostMode+0xe6>
 8005ce8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cec:	d806      	bhi.n	8005cfc <ADC_ConfigureBoostMode+0xb0>
 8005cee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cf2:	d01e      	beq.n	8005d32 <ADC_ConfigureBoostMode+0xe6>
 8005cf4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cf8:	d01b      	beq.n	8005d32 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8005cfa:	e037      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8005cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d00:	d017      	beq.n	8005d32 <ADC_ConfigureBoostMode+0xe6>
 8005d02:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005d06:	d014      	beq.n	8005d32 <ADC_ConfigureBoostMode+0xe6>
        break;
 8005d08:	e030      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8005d0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005d0e:	d021      	beq.n	8005d54 <ADC_ConfigureBoostMode+0x108>
 8005d10:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005d14:	d806      	bhi.n	8005d24 <ADC_ConfigureBoostMode+0xd8>
 8005d16:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005d1a:	d013      	beq.n	8005d44 <ADC_ConfigureBoostMode+0xf8>
 8005d1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d20:	d014      	beq.n	8005d4c <ADC_ConfigureBoostMode+0x100>
        break;
 8005d22:	e023      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8005d24:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005d28:	d018      	beq.n	8005d5c <ADC_ConfigureBoostMode+0x110>
 8005d2a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005d2e:	d019      	beq.n	8005d64 <ADC_ConfigureBoostMode+0x118>
        break;
 8005d30:	e01c      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	0c9b      	lsrs	r3, r3, #18
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	60fb      	str	r3, [r7, #12]
        break;
 8005d42:	e013      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	60fb      	str	r3, [r7, #12]
      break;
 8005d4a:	e00f      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	60fb      	str	r3, [r7, #12]
        break;
 8005d52:	e00b      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	60fb      	str	r3, [r7, #12]
        break;
 8005d5a:	e007      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	09db      	lsrs	r3, r3, #7
 8005d60:	60fb      	str	r3, [r7, #12]
        break;
 8005d62:	e003      	b.n	8005d6c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	60fb      	str	r3, [r7, #12]
        break;
 8005d6a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005d6c:	f7fe fec2 	bl	8004af4 <HAL_GetREVID>
 8005d70:	4602      	mov	r2, r0
 8005d72:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d815      	bhi.n	8005da6 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <ADC_ConfigureBoostMode+0x1e0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d908      	bls.n	8005d94 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d90:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005d92:	e03e      	b.n	8005e12 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	e035      	b.n	8005e12 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a20      	ldr	r2, [pc, #128]	; (8005e30 <ADC_ConfigureBoostMode+0x1e4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d808      	bhi.n	8005dc6 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	e025      	b.n	8005e12 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4a1a      	ldr	r2, [pc, #104]	; (8005e34 <ADC_ConfigureBoostMode+0x1e8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d80a      	bhi.n	8005de4 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005de0:	609a      	str	r2, [r3, #8]
}
 8005de2:	e016      	b.n	8005e12 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a14      	ldr	r2, [pc, #80]	; (8005e38 <ADC_ConfigureBoostMode+0x1ec>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d80a      	bhi.n	8005e02 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfe:	609a      	str	r2, [r3, #8]
}
 8005e00:	e007      	b.n	8005e12 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005e10:	609a      	str	r2, [r3, #8]
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40022000 	.word	0x40022000
 8005e20:	40022100 	.word	0x40022100
 8005e24:	40022300 	.word	0x40022300
 8005e28:	58026300 	.word	0x58026300
 8005e2c:	01312d00 	.word	0x01312d00
 8005e30:	005f5e10 	.word	0x005f5e10
 8005e34:	00bebc20 	.word	0x00bebc20
 8005e38:	017d7840 	.word	0x017d7840

08005e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <__NVIC_SetPriorityGrouping+0x40>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <__NVIC_SetPriorityGrouping+0x44>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e6a:	4a04      	ldr	r2, [pc, #16]	; (8005e7c <__NVIC_SetPriorityGrouping+0x40>)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	60d3      	str	r3, [r2, #12]
}
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	e000ed00 	.word	0xe000ed00
 8005e80:	05fa0000 	.word	0x05fa0000

08005e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <__NVIC_GetPriorityGrouping+0x18>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	0a1b      	lsrs	r3, r3, #8
 8005e8e:	f003 0307 	and.w	r3, r3, #7
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	e000ed00 	.word	0xe000ed00

08005ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	db0b      	blt.n	8005eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	f003 021f 	and.w	r2, r3, #31
 8005eb8:	4907      	ldr	r1, [pc, #28]	; (8005ed8 <__NVIC_EnableIRQ+0x38>)
 8005eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	e000e100 	.word	0xe000e100

08005edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	6039      	str	r1, [r7, #0]
 8005ee6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	db0a      	blt.n	8005f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	490c      	ldr	r1, [pc, #48]	; (8005f28 <__NVIC_SetPriority+0x4c>)
 8005ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005efa:	0112      	lsls	r2, r2, #4
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	440b      	add	r3, r1
 8005f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f04:	e00a      	b.n	8005f1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	4908      	ldr	r1, [pc, #32]	; (8005f2c <__NVIC_SetPriority+0x50>)
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	3b04      	subs	r3, #4
 8005f14:	0112      	lsls	r2, r2, #4
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	440b      	add	r3, r1
 8005f1a:	761a      	strb	r2, [r3, #24]
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	e000e100 	.word	0xe000e100
 8005f2c:	e000ed00 	.word	0xe000ed00

08005f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b089      	sub	sp, #36	; 0x24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f1c3 0307 	rsb	r3, r3, #7
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	bf28      	it	cs
 8005f4e:	2304      	movcs	r3, #4
 8005f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	3304      	adds	r3, #4
 8005f56:	2b06      	cmp	r3, #6
 8005f58:	d902      	bls.n	8005f60 <NVIC_EncodePriority+0x30>
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	3b03      	subs	r3, #3
 8005f5e:	e000      	b.n	8005f62 <NVIC_EncodePriority+0x32>
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f64:	f04f 32ff 	mov.w	r2, #4294967295
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43da      	mvns	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	401a      	ands	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f78:	f04f 31ff 	mov.w	r1, #4294967295
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f82:	43d9      	mvns	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f88:	4313      	orrs	r3, r2
         );
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3724      	adds	r7, #36	; 0x24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fa8:	d301      	bcc.n	8005fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005faa:	2301      	movs	r3, #1
 8005fac:	e00f      	b.n	8005fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <SysTick_Config+0x40>)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fb6:	210f      	movs	r1, #15
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbc:	f7ff ff8e 	bl	8005edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <SysTick_Config+0x40>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fc6:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <SysTick_Config+0x40>)
 8005fc8:	2207      	movs	r2, #7
 8005fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	e000e010 	.word	0xe000e010

08005fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff29 	bl	8005e3c <__NVIC_SetPriorityGrouping>
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006000:	f7ff ff40 	bl	8005e84 <__NVIC_GetPriorityGrouping>
 8006004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	6978      	ldr	r0, [r7, #20]
 800600c:	f7ff ff90 	bl	8005f30 <NVIC_EncodePriority>
 8006010:	4602      	mov	r2, r0
 8006012:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006016:	4611      	mov	r1, r2
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff ff5f 	bl	8005edc <__NVIC_SetPriority>
}
 800601e:	bf00      	nop
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	4603      	mov	r3, r0
 800602e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff33 	bl	8005ea0 <__NVIC_EnableIRQ>
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ffa4 	bl	8005f98 <SysTick_Config>
 8006050:	4603      	mov	r3, r0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006064:	f7fe fd18 	bl	8004a98 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e316      	b.n	80066a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a66      	ldr	r2, [pc, #408]	; (8006214 <HAL_DMA_Init+0x1b8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d04a      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a65      	ldr	r2, [pc, #404]	; (8006218 <HAL_DMA_Init+0x1bc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d045      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a63      	ldr	r2, [pc, #396]	; (800621c <HAL_DMA_Init+0x1c0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d040      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a62      	ldr	r2, [pc, #392]	; (8006220 <HAL_DMA_Init+0x1c4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d03b      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a60      	ldr	r2, [pc, #384]	; (8006224 <HAL_DMA_Init+0x1c8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d036      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a5f      	ldr	r2, [pc, #380]	; (8006228 <HAL_DMA_Init+0x1cc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d031      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a5d      	ldr	r2, [pc, #372]	; (800622c <HAL_DMA_Init+0x1d0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02c      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a5c      	ldr	r2, [pc, #368]	; (8006230 <HAL_DMA_Init+0x1d4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d027      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a5a      	ldr	r2, [pc, #360]	; (8006234 <HAL_DMA_Init+0x1d8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d022      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a59      	ldr	r2, [pc, #356]	; (8006238 <HAL_DMA_Init+0x1dc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01d      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a57      	ldr	r2, [pc, #348]	; (800623c <HAL_DMA_Init+0x1e0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d018      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a56      	ldr	r2, [pc, #344]	; (8006240 <HAL_DMA_Init+0x1e4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a54      	ldr	r2, [pc, #336]	; (8006244 <HAL_DMA_Init+0x1e8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a53      	ldr	r2, [pc, #332]	; (8006248 <HAL_DMA_Init+0x1ec>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a51      	ldr	r2, [pc, #324]	; (800624c <HAL_DMA_Init+0x1f0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_DMA_Init+0xb8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a50      	ldr	r2, [pc, #320]	; (8006250 <HAL_DMA_Init+0x1f4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d101      	bne.n	8006118 <HAL_DMA_Init+0xbc>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_DMA_Init+0xbe>
 8006118:	2300      	movs	r3, #0
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 813b 	beq.w	8006396 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a37      	ldr	r2, [pc, #220]	; (8006214 <HAL_DMA_Init+0x1b8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d04a      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a36      	ldr	r2, [pc, #216]	; (8006218 <HAL_DMA_Init+0x1bc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d045      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a34      	ldr	r2, [pc, #208]	; (800621c <HAL_DMA_Init+0x1c0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d040      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a33      	ldr	r2, [pc, #204]	; (8006220 <HAL_DMA_Init+0x1c4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d03b      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a31      	ldr	r2, [pc, #196]	; (8006224 <HAL_DMA_Init+0x1c8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d036      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a30      	ldr	r2, [pc, #192]	; (8006228 <HAL_DMA_Init+0x1cc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d031      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2e      	ldr	r2, [pc, #184]	; (800622c <HAL_DMA_Init+0x1d0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d02c      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <HAL_DMA_Init+0x1d4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d027      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a2b      	ldr	r2, [pc, #172]	; (8006234 <HAL_DMA_Init+0x1d8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d022      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2a      	ldr	r2, [pc, #168]	; (8006238 <HAL_DMA_Init+0x1dc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d01d      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a28      	ldr	r2, [pc, #160]	; (800623c <HAL_DMA_Init+0x1e0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d018      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a27      	ldr	r2, [pc, #156]	; (8006240 <HAL_DMA_Init+0x1e4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d013      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a25      	ldr	r2, [pc, #148]	; (8006244 <HAL_DMA_Init+0x1e8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00e      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a24      	ldr	r2, [pc, #144]	; (8006248 <HAL_DMA_Init+0x1ec>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d009      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a22      	ldr	r2, [pc, #136]	; (800624c <HAL_DMA_Init+0x1f0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_DMA_Init+0x174>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a21      	ldr	r2, [pc, #132]	; (8006250 <HAL_DMA_Init+0x1f4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d108      	bne.n	80061e2 <HAL_DMA_Init+0x186>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e007      	b.n	80061f2 <HAL_DMA_Init+0x196>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061f2:	e02f      	b.n	8006254 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061f4:	f7fe fc50 	bl	8004a98 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d928      	bls.n	8006254 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2203      	movs	r2, #3
 800620c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e246      	b.n	80066a2 <HAL_DMA_Init+0x646>
 8006214:	40020010 	.word	0x40020010
 8006218:	40020028 	.word	0x40020028
 800621c:	40020040 	.word	0x40020040
 8006220:	40020058 	.word	0x40020058
 8006224:	40020070 	.word	0x40020070
 8006228:	40020088 	.word	0x40020088
 800622c:	400200a0 	.word	0x400200a0
 8006230:	400200b8 	.word	0x400200b8
 8006234:	40020410 	.word	0x40020410
 8006238:	40020428 	.word	0x40020428
 800623c:	40020440 	.word	0x40020440
 8006240:	40020458 	.word	0x40020458
 8006244:	40020470 	.word	0x40020470
 8006248:	40020488 	.word	0x40020488
 800624c:	400204a0 	.word	0x400204a0
 8006250:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1c8      	bne.n	80061f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4b83      	ldr	r3, [pc, #524]	; (800647c <HAL_DMA_Init+0x420>)
 800626e:	4013      	ands	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800627a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006286:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006292:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d107      	bne.n	80062b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b0:	4313      	orrs	r3, r2
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80062b8:	4b71      	ldr	r3, [pc, #452]	; (8006480 <HAL_DMA_Init+0x424>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b71      	ldr	r3, [pc, #452]	; (8006484 <HAL_DMA_Init+0x428>)
 80062be:	4013      	ands	r3, r2
 80062c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c4:	d328      	bcc.n	8006318 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b28      	cmp	r3, #40	; 0x28
 80062cc:	d903      	bls.n	80062d6 <HAL_DMA_Init+0x27a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b2e      	cmp	r3, #46	; 0x2e
 80062d4:	d917      	bls.n	8006306 <HAL_DMA_Init+0x2aa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b3e      	cmp	r3, #62	; 0x3e
 80062dc:	d903      	bls.n	80062e6 <HAL_DMA_Init+0x28a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b42      	cmp	r3, #66	; 0x42
 80062e4:	d90f      	bls.n	8006306 <HAL_DMA_Init+0x2aa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b46      	cmp	r3, #70	; 0x46
 80062ec:	d903      	bls.n	80062f6 <HAL_DMA_Init+0x29a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b48      	cmp	r3, #72	; 0x48
 80062f4:	d907      	bls.n	8006306 <HAL_DMA_Init+0x2aa>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b4e      	cmp	r3, #78	; 0x4e
 80062fc:	d905      	bls.n	800630a <HAL_DMA_Init+0x2ae>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b52      	cmp	r3, #82	; 0x52
 8006304:	d801      	bhi.n	800630a <HAL_DMA_Init+0x2ae>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_DMA_Init+0x2b0>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006316:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0307 	bic.w	r3, r3, #7
 800632e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b04      	cmp	r3, #4
 8006340:	d117      	bne.n	8006372 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00e      	beq.n	8006372 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f002 f813 	bl	8008380 <DMA_CheckFifoParam>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2240      	movs	r2, #64	; 0x40
 8006364:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e197      	b.n	80066a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 ff4e 	bl	800821c <DMA_CalcBaseAndBitshift>
 8006380:	4603      	mov	r3, r0
 8006382:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	223f      	movs	r2, #63	; 0x3f
 800638e:	409a      	lsls	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	609a      	str	r2, [r3, #8]
 8006394:	e0cd      	b.n	8006532 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a3b      	ldr	r2, [pc, #236]	; (8006488 <HAL_DMA_Init+0x42c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_DMA_Init+0x38a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a39      	ldr	r2, [pc, #228]	; (800648c <HAL_DMA_Init+0x430>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01d      	beq.n	80063e6 <HAL_DMA_Init+0x38a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a38      	ldr	r2, [pc, #224]	; (8006490 <HAL_DMA_Init+0x434>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <HAL_DMA_Init+0x38a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a36      	ldr	r2, [pc, #216]	; (8006494 <HAL_DMA_Init+0x438>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_DMA_Init+0x38a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a35      	ldr	r2, [pc, #212]	; (8006498 <HAL_DMA_Init+0x43c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_DMA_Init+0x38a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a33      	ldr	r2, [pc, #204]	; (800649c <HAL_DMA_Init+0x440>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_DMA_Init+0x38a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a32      	ldr	r2, [pc, #200]	; (80064a0 <HAL_DMA_Init+0x444>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_DMA_Init+0x38a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a30      	ldr	r2, [pc, #192]	; (80064a4 <HAL_DMA_Init+0x448>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <HAL_DMA_Init+0x38e>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <HAL_DMA_Init+0x390>
 80063ea:	2300      	movs	r3, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8097 	beq.w	8006520 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a24      	ldr	r2, [pc, #144]	; (8006488 <HAL_DMA_Init+0x42c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d021      	beq.n	8006440 <HAL_DMA_Init+0x3e4>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a22      	ldr	r2, [pc, #136]	; (800648c <HAL_DMA_Init+0x430>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01c      	beq.n	8006440 <HAL_DMA_Init+0x3e4>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a21      	ldr	r2, [pc, #132]	; (8006490 <HAL_DMA_Init+0x434>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d017      	beq.n	8006440 <HAL_DMA_Init+0x3e4>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <HAL_DMA_Init+0x438>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d012      	beq.n	8006440 <HAL_DMA_Init+0x3e4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a1e      	ldr	r2, [pc, #120]	; (8006498 <HAL_DMA_Init+0x43c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00d      	beq.n	8006440 <HAL_DMA_Init+0x3e4>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1c      	ldr	r2, [pc, #112]	; (800649c <HAL_DMA_Init+0x440>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d008      	beq.n	8006440 <HAL_DMA_Init+0x3e4>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1b      	ldr	r2, [pc, #108]	; (80064a0 <HAL_DMA_Init+0x444>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d003      	beq.n	8006440 <HAL_DMA_Init+0x3e4>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a19      	ldr	r2, [pc, #100]	; (80064a4 <HAL_DMA_Init+0x448>)
 800643e:	4293      	cmp	r3, r2
 8006440:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <HAL_DMA_Init+0x44c>)
 800645e:	4013      	ands	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d020      	beq.n	80064ac <HAL_DMA_Init+0x450>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b80      	cmp	r3, #128	; 0x80
 8006470:	d102      	bne.n	8006478 <HAL_DMA_Init+0x41c>
 8006472:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006476:	e01a      	b.n	80064ae <HAL_DMA_Init+0x452>
 8006478:	2300      	movs	r3, #0
 800647a:	e018      	b.n	80064ae <HAL_DMA_Init+0x452>
 800647c:	fe10803f 	.word	0xfe10803f
 8006480:	5c001000 	.word	0x5c001000
 8006484:	ffff0000 	.word	0xffff0000
 8006488:	58025408 	.word	0x58025408
 800648c:	5802541c 	.word	0x5802541c
 8006490:	58025430 	.word	0x58025430
 8006494:	58025444 	.word	0x58025444
 8006498:	58025458 	.word	0x58025458
 800649c:	5802546c 	.word	0x5802546c
 80064a0:	58025480 	.word	0x58025480
 80064a4:	58025494 	.word	0x58025494
 80064a8:	fffe000f 	.word	0xfffe000f
 80064ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	68d2      	ldr	r2, [r2, #12]
 80064b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	4b6e      	ldr	r3, [pc, #440]	; (80066ac <HAL_DMA_Init+0x650>)
 80064f4:	4413      	add	r3, r2
 80064f6:	4a6e      	ldr	r2, [pc, #440]	; (80066b0 <HAL_DMA_Init+0x654>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	009a      	lsls	r2, r3, #2
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fe89 	bl	800821c <DMA_CalcBaseAndBitshift>
 800650a:	4603      	mov	r3, r0
 800650c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	2201      	movs	r2, #1
 8006518:	409a      	lsls	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	605a      	str	r2, [r3, #4]
 800651e:	e008      	b.n	8006532 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2240      	movs	r2, #64	; 0x40
 8006524:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2203      	movs	r2, #3
 800652a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e0b7      	b.n	80066a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a5f      	ldr	r2, [pc, #380]	; (80066b4 <HAL_DMA_Init+0x658>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d072      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a5d      	ldr	r2, [pc, #372]	; (80066b8 <HAL_DMA_Init+0x65c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d06d      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a5c      	ldr	r2, [pc, #368]	; (80066bc <HAL_DMA_Init+0x660>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d068      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a5a      	ldr	r2, [pc, #360]	; (80066c0 <HAL_DMA_Init+0x664>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d063      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a59      	ldr	r2, [pc, #356]	; (80066c4 <HAL_DMA_Init+0x668>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d05e      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a57      	ldr	r2, [pc, #348]	; (80066c8 <HAL_DMA_Init+0x66c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d059      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a56      	ldr	r2, [pc, #344]	; (80066cc <HAL_DMA_Init+0x670>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d054      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a54      	ldr	r2, [pc, #336]	; (80066d0 <HAL_DMA_Init+0x674>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d04f      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a53      	ldr	r2, [pc, #332]	; (80066d4 <HAL_DMA_Init+0x678>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d04a      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a51      	ldr	r2, [pc, #324]	; (80066d8 <HAL_DMA_Init+0x67c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d045      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a50      	ldr	r2, [pc, #320]	; (80066dc <HAL_DMA_Init+0x680>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d040      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a4e      	ldr	r2, [pc, #312]	; (80066e0 <HAL_DMA_Init+0x684>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d03b      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a4d      	ldr	r2, [pc, #308]	; (80066e4 <HAL_DMA_Init+0x688>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d036      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a4b      	ldr	r2, [pc, #300]	; (80066e8 <HAL_DMA_Init+0x68c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d031      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a4a      	ldr	r2, [pc, #296]	; (80066ec <HAL_DMA_Init+0x690>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d02c      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a48      	ldr	r2, [pc, #288]	; (80066f0 <HAL_DMA_Init+0x694>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d027      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a47      	ldr	r2, [pc, #284]	; (80066f4 <HAL_DMA_Init+0x698>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d022      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a45      	ldr	r2, [pc, #276]	; (80066f8 <HAL_DMA_Init+0x69c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d01d      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a44      	ldr	r2, [pc, #272]	; (80066fc <HAL_DMA_Init+0x6a0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d018      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a42      	ldr	r2, [pc, #264]	; (8006700 <HAL_DMA_Init+0x6a4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d013      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a41      	ldr	r2, [pc, #260]	; (8006704 <HAL_DMA_Init+0x6a8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00e      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a3f      	ldr	r2, [pc, #252]	; (8006708 <HAL_DMA_Init+0x6ac>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d009      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a3e      	ldr	r2, [pc, #248]	; (800670c <HAL_DMA_Init+0x6b0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_DMA_Init+0x5c6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a3c      	ldr	r2, [pc, #240]	; (8006710 <HAL_DMA_Init+0x6b4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d101      	bne.n	8006626 <HAL_DMA_Init+0x5ca>
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <HAL_DMA_Init+0x5cc>
 8006626:	2300      	movs	r3, #0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d032      	beq.n	8006692 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 ff23 	bl	8008478 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d102      	bne.n	8006640 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006654:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d010      	beq.n	8006680 <HAL_DMA_Init+0x624>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b08      	cmp	r3, #8
 8006664:	d80c      	bhi.n	8006680 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 ffa0 	bl	80085ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	e008      	b.n	8006692 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	a7fdabf8 	.word	0xa7fdabf8
 80066b0:	cccccccd 	.word	0xcccccccd
 80066b4:	40020010 	.word	0x40020010
 80066b8:	40020028 	.word	0x40020028
 80066bc:	40020040 	.word	0x40020040
 80066c0:	40020058 	.word	0x40020058
 80066c4:	40020070 	.word	0x40020070
 80066c8:	40020088 	.word	0x40020088
 80066cc:	400200a0 	.word	0x400200a0
 80066d0:	400200b8 	.word	0x400200b8
 80066d4:	40020410 	.word	0x40020410
 80066d8:	40020428 	.word	0x40020428
 80066dc:	40020440 	.word	0x40020440
 80066e0:	40020458 	.word	0x40020458
 80066e4:	40020470 	.word	0x40020470
 80066e8:	40020488 	.word	0x40020488
 80066ec:	400204a0 	.word	0x400204a0
 80066f0:	400204b8 	.word	0x400204b8
 80066f4:	58025408 	.word	0x58025408
 80066f8:	5802541c 	.word	0x5802541c
 80066fc:	58025430 	.word	0x58025430
 8006700:	58025444 	.word	0x58025444
 8006704:	58025458 	.word	0x58025458
 8006708:	5802546c 	.word	0x5802546c
 800670c:	58025480 	.word	0x58025480
 8006710:	58025494 	.word	0x58025494

08006714 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e226      	b.n	8006b7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_DMA_Start_IT+0x2a>
 800673a:	2302      	movs	r3, #2
 800673c:	e21f      	b.n	8006b7e <HAL_DMA_Start_IT+0x46a>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	f040 820a 	bne.w	8006b68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a68      	ldr	r2, [pc, #416]	; (8006908 <HAL_DMA_Start_IT+0x1f4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d04a      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a66      	ldr	r2, [pc, #408]	; (800690c <HAL_DMA_Start_IT+0x1f8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d045      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a65      	ldr	r2, [pc, #404]	; (8006910 <HAL_DMA_Start_IT+0x1fc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d040      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a63      	ldr	r2, [pc, #396]	; (8006914 <HAL_DMA_Start_IT+0x200>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d03b      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a62      	ldr	r2, [pc, #392]	; (8006918 <HAL_DMA_Start_IT+0x204>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d036      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a60      	ldr	r2, [pc, #384]	; (800691c <HAL_DMA_Start_IT+0x208>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d031      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a5f      	ldr	r2, [pc, #380]	; (8006920 <HAL_DMA_Start_IT+0x20c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d02c      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a5d      	ldr	r2, [pc, #372]	; (8006924 <HAL_DMA_Start_IT+0x210>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d027      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a5c      	ldr	r2, [pc, #368]	; (8006928 <HAL_DMA_Start_IT+0x214>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d022      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a5a      	ldr	r2, [pc, #360]	; (800692c <HAL_DMA_Start_IT+0x218>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01d      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a59      	ldr	r2, [pc, #356]	; (8006930 <HAL_DMA_Start_IT+0x21c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d018      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a57      	ldr	r2, [pc, #348]	; (8006934 <HAL_DMA_Start_IT+0x220>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a56      	ldr	r2, [pc, #344]	; (8006938 <HAL_DMA_Start_IT+0x224>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a54      	ldr	r2, [pc, #336]	; (800693c <HAL_DMA_Start_IT+0x228>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a53      	ldr	r2, [pc, #332]	; (8006940 <HAL_DMA_Start_IT+0x22c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_DMA_Start_IT+0xee>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a51      	ldr	r2, [pc, #324]	; (8006944 <HAL_DMA_Start_IT+0x230>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d108      	bne.n	8006814 <HAL_DMA_Start_IT+0x100>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	e007      	b.n	8006824 <HAL_DMA_Start_IT+0x110>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f001 fb4a 	bl	8007ec4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a34      	ldr	r2, [pc, #208]	; (8006908 <HAL_DMA_Start_IT+0x1f4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d04a      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a33      	ldr	r2, [pc, #204]	; (800690c <HAL_DMA_Start_IT+0x1f8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d045      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a31      	ldr	r2, [pc, #196]	; (8006910 <HAL_DMA_Start_IT+0x1fc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d040      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a30      	ldr	r2, [pc, #192]	; (8006914 <HAL_DMA_Start_IT+0x200>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d03b      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a2e      	ldr	r2, [pc, #184]	; (8006918 <HAL_DMA_Start_IT+0x204>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d036      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2d      	ldr	r2, [pc, #180]	; (800691c <HAL_DMA_Start_IT+0x208>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d031      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a2b      	ldr	r2, [pc, #172]	; (8006920 <HAL_DMA_Start_IT+0x20c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d02c      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2a      	ldr	r2, [pc, #168]	; (8006924 <HAL_DMA_Start_IT+0x210>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d027      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a28      	ldr	r2, [pc, #160]	; (8006928 <HAL_DMA_Start_IT+0x214>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d022      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a27      	ldr	r2, [pc, #156]	; (800692c <HAL_DMA_Start_IT+0x218>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d01d      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a25      	ldr	r2, [pc, #148]	; (8006930 <HAL_DMA_Start_IT+0x21c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d018      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a24      	ldr	r2, [pc, #144]	; (8006934 <HAL_DMA_Start_IT+0x220>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d013      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a22      	ldr	r2, [pc, #136]	; (8006938 <HAL_DMA_Start_IT+0x224>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00e      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a21      	ldr	r2, [pc, #132]	; (800693c <HAL_DMA_Start_IT+0x228>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d009      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <HAL_DMA_Start_IT+0x22c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <HAL_DMA_Start_IT+0x1bc>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <HAL_DMA_Start_IT+0x230>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d101      	bne.n	80068d4 <HAL_DMA_Start_IT+0x1c0>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <HAL_DMA_Start_IT+0x1c2>
 80068d4:	2300      	movs	r3, #0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d036      	beq.n	8006948 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f023 021e 	bic.w	r2, r3, #30
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0216 	orr.w	r2, r2, #22
 80068ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d03e      	beq.n	8006974 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0208 	orr.w	r2, r2, #8
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e035      	b.n	8006974 <HAL_DMA_Start_IT+0x260>
 8006908:	40020010 	.word	0x40020010
 800690c:	40020028 	.word	0x40020028
 8006910:	40020040 	.word	0x40020040
 8006914:	40020058 	.word	0x40020058
 8006918:	40020070 	.word	0x40020070
 800691c:	40020088 	.word	0x40020088
 8006920:	400200a0 	.word	0x400200a0
 8006924:	400200b8 	.word	0x400200b8
 8006928:	40020410 	.word	0x40020410
 800692c:	40020428 	.word	0x40020428
 8006930:	40020440 	.word	0x40020440
 8006934:	40020458 	.word	0x40020458
 8006938:	40020470 	.word	0x40020470
 800693c:	40020488 	.word	0x40020488
 8006940:	400204a0 	.word	0x400204a0
 8006944:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 020e 	bic.w	r2, r3, #14
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 020a 	orr.w	r2, r2, #10
 800695a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0204 	orr.w	r2, r2, #4
 8006972:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a83      	ldr	r2, [pc, #524]	; (8006b88 <HAL_DMA_Start_IT+0x474>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d072      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a82      	ldr	r2, [pc, #520]	; (8006b8c <HAL_DMA_Start_IT+0x478>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d06d      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a80      	ldr	r2, [pc, #512]	; (8006b90 <HAL_DMA_Start_IT+0x47c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d068      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a7f      	ldr	r2, [pc, #508]	; (8006b94 <HAL_DMA_Start_IT+0x480>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d063      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a7d      	ldr	r2, [pc, #500]	; (8006b98 <HAL_DMA_Start_IT+0x484>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d05e      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a7c      	ldr	r2, [pc, #496]	; (8006b9c <HAL_DMA_Start_IT+0x488>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d059      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a7a      	ldr	r2, [pc, #488]	; (8006ba0 <HAL_DMA_Start_IT+0x48c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d054      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a79      	ldr	r2, [pc, #484]	; (8006ba4 <HAL_DMA_Start_IT+0x490>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d04f      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a77      	ldr	r2, [pc, #476]	; (8006ba8 <HAL_DMA_Start_IT+0x494>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d04a      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a76      	ldr	r2, [pc, #472]	; (8006bac <HAL_DMA_Start_IT+0x498>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d045      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a74      	ldr	r2, [pc, #464]	; (8006bb0 <HAL_DMA_Start_IT+0x49c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d040      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a73      	ldr	r2, [pc, #460]	; (8006bb4 <HAL_DMA_Start_IT+0x4a0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d03b      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a71      	ldr	r2, [pc, #452]	; (8006bb8 <HAL_DMA_Start_IT+0x4a4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d036      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a70      	ldr	r2, [pc, #448]	; (8006bbc <HAL_DMA_Start_IT+0x4a8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d031      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a6e      	ldr	r2, [pc, #440]	; (8006bc0 <HAL_DMA_Start_IT+0x4ac>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d02c      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a6d      	ldr	r2, [pc, #436]	; (8006bc4 <HAL_DMA_Start_IT+0x4b0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d027      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a6b      	ldr	r2, [pc, #428]	; (8006bc8 <HAL_DMA_Start_IT+0x4b4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d022      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a6a      	ldr	r2, [pc, #424]	; (8006bcc <HAL_DMA_Start_IT+0x4b8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d01d      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a68      	ldr	r2, [pc, #416]	; (8006bd0 <HAL_DMA_Start_IT+0x4bc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d018      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a67      	ldr	r2, [pc, #412]	; (8006bd4 <HAL_DMA_Start_IT+0x4c0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a65      	ldr	r2, [pc, #404]	; (8006bd8 <HAL_DMA_Start_IT+0x4c4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a64      	ldr	r2, [pc, #400]	; (8006bdc <HAL_DMA_Start_IT+0x4c8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a62      	ldr	r2, [pc, #392]	; (8006be0 <HAL_DMA_Start_IT+0x4cc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_DMA_Start_IT+0x350>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a61      	ldr	r2, [pc, #388]	; (8006be4 <HAL_DMA_Start_IT+0x4d0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d101      	bne.n	8006a68 <HAL_DMA_Start_IT+0x354>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_DMA_Start_IT+0x356>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01a      	beq.n	8006aa4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a8a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a37      	ldr	r2, [pc, #220]	; (8006b88 <HAL_DMA_Start_IT+0x474>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d04a      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a36      	ldr	r2, [pc, #216]	; (8006b8c <HAL_DMA_Start_IT+0x478>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d045      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a34      	ldr	r2, [pc, #208]	; (8006b90 <HAL_DMA_Start_IT+0x47c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d040      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a33      	ldr	r2, [pc, #204]	; (8006b94 <HAL_DMA_Start_IT+0x480>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d03b      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a31      	ldr	r2, [pc, #196]	; (8006b98 <HAL_DMA_Start_IT+0x484>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d036      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a30      	ldr	r2, [pc, #192]	; (8006b9c <HAL_DMA_Start_IT+0x488>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d031      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a2e      	ldr	r2, [pc, #184]	; (8006ba0 <HAL_DMA_Start_IT+0x48c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d02c      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a2d      	ldr	r2, [pc, #180]	; (8006ba4 <HAL_DMA_Start_IT+0x490>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d027      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a2b      	ldr	r2, [pc, #172]	; (8006ba8 <HAL_DMA_Start_IT+0x494>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d022      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a2a      	ldr	r2, [pc, #168]	; (8006bac <HAL_DMA_Start_IT+0x498>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d01d      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <HAL_DMA_Start_IT+0x49c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d018      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <HAL_DMA_Start_IT+0x4a0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d013      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a25      	ldr	r2, [pc, #148]	; (8006bb8 <HAL_DMA_Start_IT+0x4a4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00e      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a24      	ldr	r2, [pc, #144]	; (8006bbc <HAL_DMA_Start_IT+0x4a8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d009      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a22      	ldr	r2, [pc, #136]	; (8006bc0 <HAL_DMA_Start_IT+0x4ac>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d004      	beq.n	8006b44 <HAL_DMA_Start_IT+0x430>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a21      	ldr	r2, [pc, #132]	; (8006bc4 <HAL_DMA_Start_IT+0x4b0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d108      	bne.n	8006b56 <HAL_DMA_Start_IT+0x442>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e012      	b.n	8006b7c <HAL_DMA_Start_IT+0x468>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0201 	orr.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e009      	b.n	8006b7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	40020010 	.word	0x40020010
 8006b8c:	40020028 	.word	0x40020028
 8006b90:	40020040 	.word	0x40020040
 8006b94:	40020058 	.word	0x40020058
 8006b98:	40020070 	.word	0x40020070
 8006b9c:	40020088 	.word	0x40020088
 8006ba0:	400200a0 	.word	0x400200a0
 8006ba4:	400200b8 	.word	0x400200b8
 8006ba8:	40020410 	.word	0x40020410
 8006bac:	40020428 	.word	0x40020428
 8006bb0:	40020440 	.word	0x40020440
 8006bb4:	40020458 	.word	0x40020458
 8006bb8:	40020470 	.word	0x40020470
 8006bbc:	40020488 	.word	0x40020488
 8006bc0:	400204a0 	.word	0x400204a0
 8006bc4:	400204b8 	.word	0x400204b8
 8006bc8:	58025408 	.word	0x58025408
 8006bcc:	5802541c 	.word	0x5802541c
 8006bd0:	58025430 	.word	0x58025430
 8006bd4:	58025444 	.word	0x58025444
 8006bd8:	58025458 	.word	0x58025458
 8006bdc:	5802546c 	.word	0x5802546c
 8006be0:	58025480 	.word	0x58025480
 8006be4:	58025494 	.word	0x58025494

08006be8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e205      	b.n	8007006 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d004      	beq.n	8006c10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2280      	movs	r2, #128	; 0x80
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e1fa      	b.n	8007006 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a8c      	ldr	r2, [pc, #560]	; (8006e48 <HAL_DMA_Abort_IT+0x260>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d04a      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a8b      	ldr	r2, [pc, #556]	; (8006e4c <HAL_DMA_Abort_IT+0x264>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d045      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a89      	ldr	r2, [pc, #548]	; (8006e50 <HAL_DMA_Abort_IT+0x268>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d040      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a88      	ldr	r2, [pc, #544]	; (8006e54 <HAL_DMA_Abort_IT+0x26c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d03b      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a86      	ldr	r2, [pc, #536]	; (8006e58 <HAL_DMA_Abort_IT+0x270>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d036      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a85      	ldr	r2, [pc, #532]	; (8006e5c <HAL_DMA_Abort_IT+0x274>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d031      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a83      	ldr	r2, [pc, #524]	; (8006e60 <HAL_DMA_Abort_IT+0x278>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d02c      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a82      	ldr	r2, [pc, #520]	; (8006e64 <HAL_DMA_Abort_IT+0x27c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d027      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a80      	ldr	r2, [pc, #512]	; (8006e68 <HAL_DMA_Abort_IT+0x280>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d022      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a7f      	ldr	r2, [pc, #508]	; (8006e6c <HAL_DMA_Abort_IT+0x284>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d01d      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a7d      	ldr	r2, [pc, #500]	; (8006e70 <HAL_DMA_Abort_IT+0x288>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d018      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a7c      	ldr	r2, [pc, #496]	; (8006e74 <HAL_DMA_Abort_IT+0x28c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a7a      	ldr	r2, [pc, #488]	; (8006e78 <HAL_DMA_Abort_IT+0x290>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00e      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a79      	ldr	r2, [pc, #484]	; (8006e7c <HAL_DMA_Abort_IT+0x294>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a77      	ldr	r2, [pc, #476]	; (8006e80 <HAL_DMA_Abort_IT+0x298>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0xc8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a76      	ldr	r2, [pc, #472]	; (8006e84 <HAL_DMA_Abort_IT+0x29c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d101      	bne.n	8006cb4 <HAL_DMA_Abort_IT+0xcc>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_DMA_Abort_IT+0xce>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d065      	beq.n	8006d86 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a60      	ldr	r2, [pc, #384]	; (8006e48 <HAL_DMA_Abort_IT+0x260>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d04a      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a5e      	ldr	r2, [pc, #376]	; (8006e4c <HAL_DMA_Abort_IT+0x264>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d045      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a5d      	ldr	r2, [pc, #372]	; (8006e50 <HAL_DMA_Abort_IT+0x268>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d040      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5b      	ldr	r2, [pc, #364]	; (8006e54 <HAL_DMA_Abort_IT+0x26c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d03b      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a5a      	ldr	r2, [pc, #360]	; (8006e58 <HAL_DMA_Abort_IT+0x270>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d036      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a58      	ldr	r2, [pc, #352]	; (8006e5c <HAL_DMA_Abort_IT+0x274>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d031      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a57      	ldr	r2, [pc, #348]	; (8006e60 <HAL_DMA_Abort_IT+0x278>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d02c      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a55      	ldr	r2, [pc, #340]	; (8006e64 <HAL_DMA_Abort_IT+0x27c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d027      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a54      	ldr	r2, [pc, #336]	; (8006e68 <HAL_DMA_Abort_IT+0x280>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d022      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a52      	ldr	r2, [pc, #328]	; (8006e6c <HAL_DMA_Abort_IT+0x284>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d01d      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a51      	ldr	r2, [pc, #324]	; (8006e70 <HAL_DMA_Abort_IT+0x288>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d018      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a4f      	ldr	r2, [pc, #316]	; (8006e74 <HAL_DMA_Abort_IT+0x28c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a4e      	ldr	r2, [pc, #312]	; (8006e78 <HAL_DMA_Abort_IT+0x290>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00e      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a4c      	ldr	r2, [pc, #304]	; (8006e7c <HAL_DMA_Abort_IT+0x294>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a4b      	ldr	r2, [pc, #300]	; (8006e80 <HAL_DMA_Abort_IT+0x298>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_DMA_Abort_IT+0x17a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a49      	ldr	r2, [pc, #292]	; (8006e84 <HAL_DMA_Abort_IT+0x29c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d108      	bne.n	8006d74 <HAL_DMA_Abort_IT+0x18c>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	e147      	b.n	8007004 <HAL_DMA_Abort_IT+0x41c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	e13e      	b.n	8007004 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 020e 	bic.w	r2, r2, #14
 8006d94:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a2b      	ldr	r2, [pc, #172]	; (8006e48 <HAL_DMA_Abort_IT+0x260>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d04a      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a29      	ldr	r2, [pc, #164]	; (8006e4c <HAL_DMA_Abort_IT+0x264>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d045      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a28      	ldr	r2, [pc, #160]	; (8006e50 <HAL_DMA_Abort_IT+0x268>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d040      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a26      	ldr	r2, [pc, #152]	; (8006e54 <HAL_DMA_Abort_IT+0x26c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d03b      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a25      	ldr	r2, [pc, #148]	; (8006e58 <HAL_DMA_Abort_IT+0x270>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d036      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a23      	ldr	r2, [pc, #140]	; (8006e5c <HAL_DMA_Abort_IT+0x274>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d031      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a22      	ldr	r2, [pc, #136]	; (8006e60 <HAL_DMA_Abort_IT+0x278>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d02c      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a20      	ldr	r2, [pc, #128]	; (8006e64 <HAL_DMA_Abort_IT+0x27c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d027      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <HAL_DMA_Abort_IT+0x280>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d022      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <HAL_DMA_Abort_IT+0x284>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01d      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <HAL_DMA_Abort_IT+0x288>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <HAL_DMA_Abort_IT+0x28c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a19      	ldr	r2, [pc, #100]	; (8006e78 <HAL_DMA_Abort_IT+0x290>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a17      	ldr	r2, [pc, #92]	; (8006e7c <HAL_DMA_Abort_IT+0x294>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a16      	ldr	r2, [pc, #88]	; (8006e80 <HAL_DMA_Abort_IT+0x298>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x24e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a14      	ldr	r2, [pc, #80]	; (8006e84 <HAL_DMA_Abort_IT+0x29c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d128      	bne.n	8006e88 <HAL_DMA_Abort_IT+0x2a0>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0201 	bic.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e027      	b.n	8006e98 <HAL_DMA_Abort_IT+0x2b0>
 8006e48:	40020010 	.word	0x40020010
 8006e4c:	40020028 	.word	0x40020028
 8006e50:	40020040 	.word	0x40020040
 8006e54:	40020058 	.word	0x40020058
 8006e58:	40020070 	.word	0x40020070
 8006e5c:	40020088 	.word	0x40020088
 8006e60:	400200a0 	.word	0x400200a0
 8006e64:	400200b8 	.word	0x400200b8
 8006e68:	40020410 	.word	0x40020410
 8006e6c:	40020428 	.word	0x40020428
 8006e70:	40020440 	.word	0x40020440
 8006e74:	40020458 	.word	0x40020458
 8006e78:	40020470 	.word	0x40020470
 8006e7c:	40020488 	.word	0x40020488
 8006e80:	400204a0 	.word	0x400204a0
 8006e84:	400204b8 	.word	0x400204b8
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a5c      	ldr	r2, [pc, #368]	; (8007010 <HAL_DMA_Abort_IT+0x428>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d072      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a5b      	ldr	r2, [pc, #364]	; (8007014 <HAL_DMA_Abort_IT+0x42c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d06d      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a59      	ldr	r2, [pc, #356]	; (8007018 <HAL_DMA_Abort_IT+0x430>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d068      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a58      	ldr	r2, [pc, #352]	; (800701c <HAL_DMA_Abort_IT+0x434>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d063      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a56      	ldr	r2, [pc, #344]	; (8007020 <HAL_DMA_Abort_IT+0x438>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d05e      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a55      	ldr	r2, [pc, #340]	; (8007024 <HAL_DMA_Abort_IT+0x43c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d059      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a53      	ldr	r2, [pc, #332]	; (8007028 <HAL_DMA_Abort_IT+0x440>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d054      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a52      	ldr	r2, [pc, #328]	; (800702c <HAL_DMA_Abort_IT+0x444>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d04f      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a50      	ldr	r2, [pc, #320]	; (8007030 <HAL_DMA_Abort_IT+0x448>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d04a      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a4f      	ldr	r2, [pc, #316]	; (8007034 <HAL_DMA_Abort_IT+0x44c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d045      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a4d      	ldr	r2, [pc, #308]	; (8007038 <HAL_DMA_Abort_IT+0x450>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d040      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a4c      	ldr	r2, [pc, #304]	; (800703c <HAL_DMA_Abort_IT+0x454>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d03b      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a4a      	ldr	r2, [pc, #296]	; (8007040 <HAL_DMA_Abort_IT+0x458>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d036      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a49      	ldr	r2, [pc, #292]	; (8007044 <HAL_DMA_Abort_IT+0x45c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d031      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a47      	ldr	r2, [pc, #284]	; (8007048 <HAL_DMA_Abort_IT+0x460>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d02c      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a46      	ldr	r2, [pc, #280]	; (800704c <HAL_DMA_Abort_IT+0x464>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d027      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a44      	ldr	r2, [pc, #272]	; (8007050 <HAL_DMA_Abort_IT+0x468>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d022      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a43      	ldr	r2, [pc, #268]	; (8007054 <HAL_DMA_Abort_IT+0x46c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d01d      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a41      	ldr	r2, [pc, #260]	; (8007058 <HAL_DMA_Abort_IT+0x470>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d018      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a40      	ldr	r2, [pc, #256]	; (800705c <HAL_DMA_Abort_IT+0x474>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a3e      	ldr	r2, [pc, #248]	; (8007060 <HAL_DMA_Abort_IT+0x478>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a3d      	ldr	r2, [pc, #244]	; (8007064 <HAL_DMA_Abort_IT+0x47c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a3b      	ldr	r2, [pc, #236]	; (8007068 <HAL_DMA_Abort_IT+0x480>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x3a0>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a3a      	ldr	r2, [pc, #232]	; (800706c <HAL_DMA_Abort_IT+0x484>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d101      	bne.n	8006f8c <HAL_DMA_Abort_IT+0x3a4>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <HAL_DMA_Abort_IT+0x3a6>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d028      	beq.n	8006fe4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fa0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fac:	f003 031f 	and.w	r3, r3, #31
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fc0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fe2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40020010 	.word	0x40020010
 8007014:	40020028 	.word	0x40020028
 8007018:	40020040 	.word	0x40020040
 800701c:	40020058 	.word	0x40020058
 8007020:	40020070 	.word	0x40020070
 8007024:	40020088 	.word	0x40020088
 8007028:	400200a0 	.word	0x400200a0
 800702c:	400200b8 	.word	0x400200b8
 8007030:	40020410 	.word	0x40020410
 8007034:	40020428 	.word	0x40020428
 8007038:	40020440 	.word	0x40020440
 800703c:	40020458 	.word	0x40020458
 8007040:	40020470 	.word	0x40020470
 8007044:	40020488 	.word	0x40020488
 8007048:	400204a0 	.word	0x400204a0
 800704c:	400204b8 	.word	0x400204b8
 8007050:	58025408 	.word	0x58025408
 8007054:	5802541c 	.word	0x5802541c
 8007058:	58025430 	.word	0x58025430
 800705c:	58025444 	.word	0x58025444
 8007060:	58025458 	.word	0x58025458
 8007064:	5802546c 	.word	0x5802546c
 8007068:	58025480 	.word	0x58025480
 800706c:	58025494 	.word	0x58025494

08007070 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800707c:	4b67      	ldr	r3, [pc, #412]	; (800721c <HAL_DMA_IRQHandler+0x1ac>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a67      	ldr	r2, [pc, #412]	; (8007220 <HAL_DMA_IRQHandler+0x1b0>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	0a9b      	lsrs	r3, r3, #10
 8007088:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007094:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a5f      	ldr	r2, [pc, #380]	; (8007224 <HAL_DMA_IRQHandler+0x1b4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d04a      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5d      	ldr	r2, [pc, #372]	; (8007228 <HAL_DMA_IRQHandler+0x1b8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d045      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a5c      	ldr	r2, [pc, #368]	; (800722c <HAL_DMA_IRQHandler+0x1bc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d040      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a5a      	ldr	r2, [pc, #360]	; (8007230 <HAL_DMA_IRQHandler+0x1c0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d03b      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a59      	ldr	r2, [pc, #356]	; (8007234 <HAL_DMA_IRQHandler+0x1c4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d036      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a57      	ldr	r2, [pc, #348]	; (8007238 <HAL_DMA_IRQHandler+0x1c8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d031      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a56      	ldr	r2, [pc, #344]	; (800723c <HAL_DMA_IRQHandler+0x1cc>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d02c      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a54      	ldr	r2, [pc, #336]	; (8007240 <HAL_DMA_IRQHandler+0x1d0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d027      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a53      	ldr	r2, [pc, #332]	; (8007244 <HAL_DMA_IRQHandler+0x1d4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d022      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a51      	ldr	r2, [pc, #324]	; (8007248 <HAL_DMA_IRQHandler+0x1d8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01d      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a50      	ldr	r2, [pc, #320]	; (800724c <HAL_DMA_IRQHandler+0x1dc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a4e      	ldr	r2, [pc, #312]	; (8007250 <HAL_DMA_IRQHandler+0x1e0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a4d      	ldr	r2, [pc, #308]	; (8007254 <HAL_DMA_IRQHandler+0x1e4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a4b      	ldr	r2, [pc, #300]	; (8007258 <HAL_DMA_IRQHandler+0x1e8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a4a      	ldr	r2, [pc, #296]	; (800725c <HAL_DMA_IRQHandler+0x1ec>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_DMA_IRQHandler+0xd2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a48      	ldr	r2, [pc, #288]	; (8007260 <HAL_DMA_IRQHandler+0x1f0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d101      	bne.n	8007146 <HAL_DMA_IRQHandler+0xd6>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <HAL_DMA_IRQHandler+0xd8>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 842b 	beq.w	80079a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	2208      	movs	r2, #8
 8007158:	409a      	lsls	r2, r3
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80a2 	beq.w	80072a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2e      	ldr	r2, [pc, #184]	; (8007224 <HAL_DMA_IRQHandler+0x1b4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d04a      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a2d      	ldr	r2, [pc, #180]	; (8007228 <HAL_DMA_IRQHandler+0x1b8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d045      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2b      	ldr	r2, [pc, #172]	; (800722c <HAL_DMA_IRQHandler+0x1bc>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d040      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2a      	ldr	r2, [pc, #168]	; (8007230 <HAL_DMA_IRQHandler+0x1c0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d03b      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a28      	ldr	r2, [pc, #160]	; (8007234 <HAL_DMA_IRQHandler+0x1c4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d036      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a27      	ldr	r2, [pc, #156]	; (8007238 <HAL_DMA_IRQHandler+0x1c8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d031      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a25      	ldr	r2, [pc, #148]	; (800723c <HAL_DMA_IRQHandler+0x1cc>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d02c      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a24      	ldr	r2, [pc, #144]	; (8007240 <HAL_DMA_IRQHandler+0x1d0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d027      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a22      	ldr	r2, [pc, #136]	; (8007244 <HAL_DMA_IRQHandler+0x1d4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d022      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a21      	ldr	r2, [pc, #132]	; (8007248 <HAL_DMA_IRQHandler+0x1d8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d01d      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1f      	ldr	r2, [pc, #124]	; (800724c <HAL_DMA_IRQHandler+0x1dc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d018      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1e      	ldr	r2, [pc, #120]	; (8007250 <HAL_DMA_IRQHandler+0x1e0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1c      	ldr	r2, [pc, #112]	; (8007254 <HAL_DMA_IRQHandler+0x1e4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00e      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <HAL_DMA_IRQHandler+0x1e8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a19      	ldr	r2, [pc, #100]	; (800725c <HAL_DMA_IRQHandler+0x1ec>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_DMA_IRQHandler+0x194>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a18      	ldr	r2, [pc, #96]	; (8007260 <HAL_DMA_IRQHandler+0x1f0>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d12f      	bne.n	8007264 <HAL_DMA_IRQHandler+0x1f4>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	bf14      	ite	ne
 8007212:	2301      	movne	r3, #1
 8007214:	2300      	moveq	r3, #0
 8007216:	b2db      	uxtb	r3, r3
 8007218:	e02e      	b.n	8007278 <HAL_DMA_IRQHandler+0x208>
 800721a:	bf00      	nop
 800721c:	240000f8 	.word	0x240000f8
 8007220:	1b4e81b5 	.word	0x1b4e81b5
 8007224:	40020010 	.word	0x40020010
 8007228:	40020028 	.word	0x40020028
 800722c:	40020040 	.word	0x40020040
 8007230:	40020058 	.word	0x40020058
 8007234:	40020070 	.word	0x40020070
 8007238:	40020088 	.word	0x40020088
 800723c:	400200a0 	.word	0x400200a0
 8007240:	400200b8 	.word	0x400200b8
 8007244:	40020410 	.word	0x40020410
 8007248:	40020428 	.word	0x40020428
 800724c:	40020440 	.word	0x40020440
 8007250:	40020458 	.word	0x40020458
 8007254:	40020470 	.word	0x40020470
 8007258:	40020488 	.word	0x40020488
 800725c:	400204a0 	.word	0x400204a0
 8007260:	400204b8 	.word	0x400204b8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	bf14      	ite	ne
 8007272:	2301      	movne	r3, #1
 8007274:	2300      	moveq	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d015      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0204 	bic.w	r2, r2, #4
 800728a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	2208      	movs	r2, #8
 8007296:	409a      	lsls	r2, r3
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	f043 0201 	orr.w	r2, r3, #1
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	fa22 f303 	lsr.w	r3, r2, r3
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d06e      	beq.n	800739c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a69      	ldr	r2, [pc, #420]	; (8007468 <HAL_DMA_IRQHandler+0x3f8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d04a      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a67      	ldr	r2, [pc, #412]	; (800746c <HAL_DMA_IRQHandler+0x3fc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d045      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a66      	ldr	r2, [pc, #408]	; (8007470 <HAL_DMA_IRQHandler+0x400>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d040      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a64      	ldr	r2, [pc, #400]	; (8007474 <HAL_DMA_IRQHandler+0x404>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d03b      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a63      	ldr	r2, [pc, #396]	; (8007478 <HAL_DMA_IRQHandler+0x408>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d036      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a61      	ldr	r2, [pc, #388]	; (800747c <HAL_DMA_IRQHandler+0x40c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d031      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a60      	ldr	r2, [pc, #384]	; (8007480 <HAL_DMA_IRQHandler+0x410>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d02c      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a5e      	ldr	r2, [pc, #376]	; (8007484 <HAL_DMA_IRQHandler+0x414>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d027      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a5d      	ldr	r2, [pc, #372]	; (8007488 <HAL_DMA_IRQHandler+0x418>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d022      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5b      	ldr	r2, [pc, #364]	; (800748c <HAL_DMA_IRQHandler+0x41c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01d      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a5a      	ldr	r2, [pc, #360]	; (8007490 <HAL_DMA_IRQHandler+0x420>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d018      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a58      	ldr	r2, [pc, #352]	; (8007494 <HAL_DMA_IRQHandler+0x424>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a57      	ldr	r2, [pc, #348]	; (8007498 <HAL_DMA_IRQHandler+0x428>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00e      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a55      	ldr	r2, [pc, #340]	; (800749c <HAL_DMA_IRQHandler+0x42c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a54      	ldr	r2, [pc, #336]	; (80074a0 <HAL_DMA_IRQHandler+0x430>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_DMA_IRQHandler+0x2ee>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a52      	ldr	r2, [pc, #328]	; (80074a4 <HAL_DMA_IRQHandler+0x434>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d10a      	bne.n	8007374 <HAL_DMA_IRQHandler+0x304>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007368:	2b00      	cmp	r3, #0
 800736a:	bf14      	ite	ne
 800736c:	2301      	movne	r3, #1
 800736e:	2300      	moveq	r3, #0
 8007370:	b2db      	uxtb	r3, r3
 8007372:	e003      	b.n	800737c <HAL_DMA_IRQHandler+0x30c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00d      	beq.n	800739c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2201      	movs	r2, #1
 800738a:	409a      	lsls	r2, r3
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007394:	f043 0202 	orr.w	r2, r3, #2
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	2204      	movs	r2, #4
 80073a6:	409a      	lsls	r2, r3
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 808f 	beq.w	80074d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a2c      	ldr	r2, [pc, #176]	; (8007468 <HAL_DMA_IRQHandler+0x3f8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d04a      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a2a      	ldr	r2, [pc, #168]	; (800746c <HAL_DMA_IRQHandler+0x3fc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d045      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a29      	ldr	r2, [pc, #164]	; (8007470 <HAL_DMA_IRQHandler+0x400>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d040      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a27      	ldr	r2, [pc, #156]	; (8007474 <HAL_DMA_IRQHandler+0x404>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d03b      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a26      	ldr	r2, [pc, #152]	; (8007478 <HAL_DMA_IRQHandler+0x408>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d036      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a24      	ldr	r2, [pc, #144]	; (800747c <HAL_DMA_IRQHandler+0x40c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d031      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a23      	ldr	r2, [pc, #140]	; (8007480 <HAL_DMA_IRQHandler+0x410>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d02c      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a21      	ldr	r2, [pc, #132]	; (8007484 <HAL_DMA_IRQHandler+0x414>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d027      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a20      	ldr	r2, [pc, #128]	; (8007488 <HAL_DMA_IRQHandler+0x418>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d022      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1e      	ldr	r2, [pc, #120]	; (800748c <HAL_DMA_IRQHandler+0x41c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d01d      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1d      	ldr	r2, [pc, #116]	; (8007490 <HAL_DMA_IRQHandler+0x420>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d018      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <HAL_DMA_IRQHandler+0x424>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <HAL_DMA_IRQHandler+0x428>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a18      	ldr	r2, [pc, #96]	; (800749c <HAL_DMA_IRQHandler+0x42c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d009      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a17      	ldr	r2, [pc, #92]	; (80074a0 <HAL_DMA_IRQHandler+0x430>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_DMA_IRQHandler+0x3e2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <HAL_DMA_IRQHandler+0x434>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d12a      	bne.n	80074a8 <HAL_DMA_IRQHandler+0x438>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	bf14      	ite	ne
 8007460:	2301      	movne	r3, #1
 8007462:	2300      	moveq	r3, #0
 8007464:	b2db      	uxtb	r3, r3
 8007466:	e023      	b.n	80074b0 <HAL_DMA_IRQHandler+0x440>
 8007468:	40020010 	.word	0x40020010
 800746c:	40020028 	.word	0x40020028
 8007470:	40020040 	.word	0x40020040
 8007474:	40020058 	.word	0x40020058
 8007478:	40020070 	.word	0x40020070
 800747c:	40020088 	.word	0x40020088
 8007480:	400200a0 	.word	0x400200a0
 8007484:	400200b8 	.word	0x400200b8
 8007488:	40020410 	.word	0x40020410
 800748c:	40020428 	.word	0x40020428
 8007490:	40020440 	.word	0x40020440
 8007494:	40020458 	.word	0x40020458
 8007498:	40020470 	.word	0x40020470
 800749c:	40020488 	.word	0x40020488
 80074a0:	400204a0 	.word	0x400204a0
 80074a4:	400204b8 	.word	0x400204b8
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2300      	movs	r3, #0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00d      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2204      	movs	r2, #4
 80074be:	409a      	lsls	r2, r3
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	f043 0204 	orr.w	r2, r3, #4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2210      	movs	r2, #16
 80074da:	409a      	lsls	r2, r3
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 80a6 	beq.w	8007632 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a85      	ldr	r2, [pc, #532]	; (8007700 <HAL_DMA_IRQHandler+0x690>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d04a      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a83      	ldr	r2, [pc, #524]	; (8007704 <HAL_DMA_IRQHandler+0x694>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d045      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a82      	ldr	r2, [pc, #520]	; (8007708 <HAL_DMA_IRQHandler+0x698>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d040      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a80      	ldr	r2, [pc, #512]	; (800770c <HAL_DMA_IRQHandler+0x69c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d03b      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a7f      	ldr	r2, [pc, #508]	; (8007710 <HAL_DMA_IRQHandler+0x6a0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d036      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a7d      	ldr	r2, [pc, #500]	; (8007714 <HAL_DMA_IRQHandler+0x6a4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d031      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a7c      	ldr	r2, [pc, #496]	; (8007718 <HAL_DMA_IRQHandler+0x6a8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d02c      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7a      	ldr	r2, [pc, #488]	; (800771c <HAL_DMA_IRQHandler+0x6ac>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d027      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a79      	ldr	r2, [pc, #484]	; (8007720 <HAL_DMA_IRQHandler+0x6b0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a77      	ldr	r2, [pc, #476]	; (8007724 <HAL_DMA_IRQHandler+0x6b4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01d      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a76      	ldr	r2, [pc, #472]	; (8007728 <HAL_DMA_IRQHandler+0x6b8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a74      	ldr	r2, [pc, #464]	; (800772c <HAL_DMA_IRQHandler+0x6bc>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a73      	ldr	r2, [pc, #460]	; (8007730 <HAL_DMA_IRQHandler+0x6c0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a71      	ldr	r2, [pc, #452]	; (8007734 <HAL_DMA_IRQHandler+0x6c4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a70      	ldr	r2, [pc, #448]	; (8007738 <HAL_DMA_IRQHandler+0x6c8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_DMA_IRQHandler+0x516>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a6e      	ldr	r2, [pc, #440]	; (800773c <HAL_DMA_IRQHandler+0x6cc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d10a      	bne.n	800759c <HAL_DMA_IRQHandler+0x52c>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e009      	b.n	80075b0 <HAL_DMA_IRQHandler+0x540>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bf14      	ite	ne
 80075aa:	2301      	movne	r3, #1
 80075ac:	2300      	moveq	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d03e      	beq.n	8007632 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b8:	f003 031f 	and.w	r3, r3, #31
 80075bc:	2210      	movs	r2, #16
 80075be:	409a      	lsls	r2, r3
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d018      	beq.n	8007604 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d108      	bne.n	80075f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d024      	beq.n	8007632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
 80075f0:	e01f      	b.n	8007632 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01b      	beq.n	8007632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	4798      	blx	r3
 8007602:	e016      	b.n	8007632 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760e:	2b00      	cmp	r3, #0
 8007610:	d107      	bne.n	8007622 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0208 	bic.w	r2, r2, #8
 8007620:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	2220      	movs	r2, #32
 800763c:	409a      	lsls	r2, r3
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	4013      	ands	r3, r2
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8110 	beq.w	8007868 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a2c      	ldr	r2, [pc, #176]	; (8007700 <HAL_DMA_IRQHandler+0x690>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d04a      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a2b      	ldr	r2, [pc, #172]	; (8007704 <HAL_DMA_IRQHandler+0x694>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d045      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a29      	ldr	r2, [pc, #164]	; (8007708 <HAL_DMA_IRQHandler+0x698>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d040      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a28      	ldr	r2, [pc, #160]	; (800770c <HAL_DMA_IRQHandler+0x69c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d03b      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a26      	ldr	r2, [pc, #152]	; (8007710 <HAL_DMA_IRQHandler+0x6a0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d036      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a25      	ldr	r2, [pc, #148]	; (8007714 <HAL_DMA_IRQHandler+0x6a4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d031      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a23      	ldr	r2, [pc, #140]	; (8007718 <HAL_DMA_IRQHandler+0x6a8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d02c      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a22      	ldr	r2, [pc, #136]	; (800771c <HAL_DMA_IRQHandler+0x6ac>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d027      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a20      	ldr	r2, [pc, #128]	; (8007720 <HAL_DMA_IRQHandler+0x6b0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a1f      	ldr	r2, [pc, #124]	; (8007724 <HAL_DMA_IRQHandler+0x6b4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d01d      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a1d      	ldr	r2, [pc, #116]	; (8007728 <HAL_DMA_IRQHandler+0x6b8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1c      	ldr	r2, [pc, #112]	; (800772c <HAL_DMA_IRQHandler+0x6bc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1a      	ldr	r2, [pc, #104]	; (8007730 <HAL_DMA_IRQHandler+0x6c0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a19      	ldr	r2, [pc, #100]	; (8007734 <HAL_DMA_IRQHandler+0x6c4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a17      	ldr	r2, [pc, #92]	; (8007738 <HAL_DMA_IRQHandler+0x6c8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x678>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a16      	ldr	r2, [pc, #88]	; (800773c <HAL_DMA_IRQHandler+0x6cc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d12b      	bne.n	8007740 <HAL_DMA_IRQHandler+0x6d0>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0310 	and.w	r3, r3, #16
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bf14      	ite	ne
 80076f6:	2301      	movne	r3, #1
 80076f8:	2300      	moveq	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	e02a      	b.n	8007754 <HAL_DMA_IRQHandler+0x6e4>
 80076fe:	bf00      	nop
 8007700:	40020010 	.word	0x40020010
 8007704:	40020028 	.word	0x40020028
 8007708:	40020040 	.word	0x40020040
 800770c:	40020058 	.word	0x40020058
 8007710:	40020070 	.word	0x40020070
 8007714:	40020088 	.word	0x40020088
 8007718:	400200a0 	.word	0x400200a0
 800771c:	400200b8 	.word	0x400200b8
 8007720:	40020410 	.word	0x40020410
 8007724:	40020428 	.word	0x40020428
 8007728:	40020440 	.word	0x40020440
 800772c:	40020458 	.word	0x40020458
 8007730:	40020470 	.word	0x40020470
 8007734:	40020488 	.word	0x40020488
 8007738:	400204a0 	.word	0x400204a0
 800773c:	400204b8 	.word	0x400204b8
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	bf14      	ite	ne
 800774e:	2301      	movne	r3, #1
 8007750:	2300      	moveq	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8087 	beq.w	8007868 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775e:	f003 031f 	and.w	r3, r3, #31
 8007762:	2220      	movs	r2, #32
 8007764:	409a      	lsls	r2, r3
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b04      	cmp	r3, #4
 8007774:	d139      	bne.n	80077ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0216 	bic.w	r2, r2, #22
 8007784:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695a      	ldr	r2, [r3, #20]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007794:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d103      	bne.n	80077a6 <HAL_DMA_IRQHandler+0x736>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 0208 	bic.w	r2, r2, #8
 80077b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	223f      	movs	r2, #63	; 0x3f
 80077c0:	409a      	lsls	r2, r3
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 834a 	beq.w	8007e74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
          }
          return;
 80077e8:	e344      	b.n	8007e74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d018      	beq.n	800782a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d108      	bne.n	8007818 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780a:	2b00      	cmp	r3, #0
 800780c:	d02c      	beq.n	8007868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
 8007816:	e027      	b.n	8007868 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d023      	beq.n	8007868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
 8007828:	e01e      	b.n	8007868 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10f      	bne.n	8007858 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0210 	bic.w	r2, r2, #16
 8007846:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8306 	beq.w	8007e7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 8088 	beq.w	8007990 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2204      	movs	r2, #4
 8007884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a7a      	ldr	r2, [pc, #488]	; (8007a78 <HAL_DMA_IRQHandler+0xa08>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d04a      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a79      	ldr	r2, [pc, #484]	; (8007a7c <HAL_DMA_IRQHandler+0xa0c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d045      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a77      	ldr	r2, [pc, #476]	; (8007a80 <HAL_DMA_IRQHandler+0xa10>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d040      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a76      	ldr	r2, [pc, #472]	; (8007a84 <HAL_DMA_IRQHandler+0xa14>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d03b      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a74      	ldr	r2, [pc, #464]	; (8007a88 <HAL_DMA_IRQHandler+0xa18>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d036      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a73      	ldr	r2, [pc, #460]	; (8007a8c <HAL_DMA_IRQHandler+0xa1c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d031      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a71      	ldr	r2, [pc, #452]	; (8007a90 <HAL_DMA_IRQHandler+0xa20>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d02c      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a70      	ldr	r2, [pc, #448]	; (8007a94 <HAL_DMA_IRQHandler+0xa24>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d027      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a6e      	ldr	r2, [pc, #440]	; (8007a98 <HAL_DMA_IRQHandler+0xa28>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a6d      	ldr	r2, [pc, #436]	; (8007a9c <HAL_DMA_IRQHandler+0xa2c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d01d      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a6b      	ldr	r2, [pc, #428]	; (8007aa0 <HAL_DMA_IRQHandler+0xa30>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a6a      	ldr	r2, [pc, #424]	; (8007aa4 <HAL_DMA_IRQHandler+0xa34>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a68      	ldr	r2, [pc, #416]	; (8007aa8 <HAL_DMA_IRQHandler+0xa38>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a67      	ldr	r2, [pc, #412]	; (8007aac <HAL_DMA_IRQHandler+0xa3c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a65      	ldr	r2, [pc, #404]	; (8007ab0 <HAL_DMA_IRQHandler+0xa40>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_DMA_IRQHandler+0x8b8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a64      	ldr	r2, [pc, #400]	; (8007ab4 <HAL_DMA_IRQHandler+0xa44>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d108      	bne.n	800793a <HAL_DMA_IRQHandler+0x8ca>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0201 	bic.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e007      	b.n	800794a <HAL_DMA_IRQHandler+0x8da>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007952:	429a      	cmp	r2, r3
 8007954:	d307      	bcc.n	8007966 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f2      	bne.n	800794a <HAL_DMA_IRQHandler+0x8da>
 8007964:	e000      	b.n	8007968 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007966:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2203      	movs	r2, #3
 8007982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007986:	e003      	b.n	8007990 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 8272 	beq.w	8007e7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
 80079a2:	e26c      	b.n	8007e7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a43      	ldr	r2, [pc, #268]	; (8007ab8 <HAL_DMA_IRQHandler+0xa48>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d022      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x984>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a42      	ldr	r2, [pc, #264]	; (8007abc <HAL_DMA_IRQHandler+0xa4c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d01d      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x984>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a40      	ldr	r2, [pc, #256]	; (8007ac0 <HAL_DMA_IRQHandler+0xa50>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d018      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x984>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a3f      	ldr	r2, [pc, #252]	; (8007ac4 <HAL_DMA_IRQHandler+0xa54>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d013      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x984>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a3d      	ldr	r2, [pc, #244]	; (8007ac8 <HAL_DMA_IRQHandler+0xa58>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00e      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x984>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a3c      	ldr	r2, [pc, #240]	; (8007acc <HAL_DMA_IRQHandler+0xa5c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x984>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a3a      	ldr	r2, [pc, #232]	; (8007ad0 <HAL_DMA_IRQHandler+0xa60>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x984>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a39      	ldr	r2, [pc, #228]	; (8007ad4 <HAL_DMA_IRQHandler+0xa64>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d101      	bne.n	80079f8 <HAL_DMA_IRQHandler+0x988>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <HAL_DMA_IRQHandler+0x98a>
 80079f8:	2300      	movs	r3, #0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 823f 	beq.w	8007e7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	2204      	movs	r2, #4
 8007a12:	409a      	lsls	r2, r3
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	4013      	ands	r3, r2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80cd 	beq.w	8007bb8 <HAL_DMA_IRQHandler+0xb48>
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80c7 	beq.w	8007bb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	2204      	movs	r2, #4
 8007a34:	409a      	lsls	r2, r3
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d049      	beq.n	8007ad8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d109      	bne.n	8007a62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8210 	beq.w	8007e78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a60:	e20a      	b.n	8007e78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8206 	beq.w	8007e78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a74:	e200      	b.n	8007e78 <HAL_DMA_IRQHandler+0xe08>
 8007a76:	bf00      	nop
 8007a78:	40020010 	.word	0x40020010
 8007a7c:	40020028 	.word	0x40020028
 8007a80:	40020040 	.word	0x40020040
 8007a84:	40020058 	.word	0x40020058
 8007a88:	40020070 	.word	0x40020070
 8007a8c:	40020088 	.word	0x40020088
 8007a90:	400200a0 	.word	0x400200a0
 8007a94:	400200b8 	.word	0x400200b8
 8007a98:	40020410 	.word	0x40020410
 8007a9c:	40020428 	.word	0x40020428
 8007aa0:	40020440 	.word	0x40020440
 8007aa4:	40020458 	.word	0x40020458
 8007aa8:	40020470 	.word	0x40020470
 8007aac:	40020488 	.word	0x40020488
 8007ab0:	400204a0 	.word	0x400204a0
 8007ab4:	400204b8 	.word	0x400204b8
 8007ab8:	58025408 	.word	0x58025408
 8007abc:	5802541c 	.word	0x5802541c
 8007ac0:	58025430 	.word	0x58025430
 8007ac4:	58025444 	.word	0x58025444
 8007ac8:	58025458 	.word	0x58025458
 8007acc:	5802546c 	.word	0x5802546c
 8007ad0:	58025480 	.word	0x58025480
 8007ad4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d160      	bne.n	8007ba4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a8c      	ldr	r2, [pc, #560]	; (8007d18 <HAL_DMA_IRQHandler+0xca8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d04a      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a8a      	ldr	r2, [pc, #552]	; (8007d1c <HAL_DMA_IRQHandler+0xcac>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d045      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a89      	ldr	r2, [pc, #548]	; (8007d20 <HAL_DMA_IRQHandler+0xcb0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d040      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a87      	ldr	r2, [pc, #540]	; (8007d24 <HAL_DMA_IRQHandler+0xcb4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d03b      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a86      	ldr	r2, [pc, #536]	; (8007d28 <HAL_DMA_IRQHandler+0xcb8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d036      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a84      	ldr	r2, [pc, #528]	; (8007d2c <HAL_DMA_IRQHandler+0xcbc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d031      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a83      	ldr	r2, [pc, #524]	; (8007d30 <HAL_DMA_IRQHandler+0xcc0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d02c      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a81      	ldr	r2, [pc, #516]	; (8007d34 <HAL_DMA_IRQHandler+0xcc4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d027      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a80      	ldr	r2, [pc, #512]	; (8007d38 <HAL_DMA_IRQHandler+0xcc8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d022      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a7e      	ldr	r2, [pc, #504]	; (8007d3c <HAL_DMA_IRQHandler+0xccc>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01d      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a7d      	ldr	r2, [pc, #500]	; (8007d40 <HAL_DMA_IRQHandler+0xcd0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d018      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a7b      	ldr	r2, [pc, #492]	; (8007d44 <HAL_DMA_IRQHandler+0xcd4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d013      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a7a      	ldr	r2, [pc, #488]	; (8007d48 <HAL_DMA_IRQHandler+0xcd8>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00e      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a78      	ldr	r2, [pc, #480]	; (8007d4c <HAL_DMA_IRQHandler+0xcdc>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d009      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a77      	ldr	r2, [pc, #476]	; (8007d50 <HAL_DMA_IRQHandler+0xce0>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d004      	beq.n	8007b82 <HAL_DMA_IRQHandler+0xb12>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a75      	ldr	r2, [pc, #468]	; (8007d54 <HAL_DMA_IRQHandler+0xce4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d108      	bne.n	8007b94 <HAL_DMA_IRQHandler+0xb24>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0208 	bic.w	r2, r2, #8
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e007      	b.n	8007ba4 <HAL_DMA_IRQHandler+0xb34>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0204 	bic.w	r2, r2, #4
 8007ba2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8165 	beq.w	8007e78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bb6:	e15f      	b.n	8007e78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	409a      	lsls	r2, r3
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80c5 	beq.w	8007d58 <HAL_DMA_IRQHandler+0xce8>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 80bf 	beq.w	8007d58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	2202      	movs	r2, #2
 8007be4:	409a      	lsls	r2, r3
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d018      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 813a 	beq.w	8007e7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c10:	e134      	b.n	8007e7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 8130 	beq.w	8007e7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c24:	e12a      	b.n	8007e7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d168      	bne.n	8007d02 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a38      	ldr	r2, [pc, #224]	; (8007d18 <HAL_DMA_IRQHandler+0xca8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d04a      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a37      	ldr	r2, [pc, #220]	; (8007d1c <HAL_DMA_IRQHandler+0xcac>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d045      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a35      	ldr	r2, [pc, #212]	; (8007d20 <HAL_DMA_IRQHandler+0xcb0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d040      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a34      	ldr	r2, [pc, #208]	; (8007d24 <HAL_DMA_IRQHandler+0xcb4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d03b      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a32      	ldr	r2, [pc, #200]	; (8007d28 <HAL_DMA_IRQHandler+0xcb8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d036      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a31      	ldr	r2, [pc, #196]	; (8007d2c <HAL_DMA_IRQHandler+0xcbc>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d031      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a2f      	ldr	r2, [pc, #188]	; (8007d30 <HAL_DMA_IRQHandler+0xcc0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d02c      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a2e      	ldr	r2, [pc, #184]	; (8007d34 <HAL_DMA_IRQHandler+0xcc4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d027      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a2c      	ldr	r2, [pc, #176]	; (8007d38 <HAL_DMA_IRQHandler+0xcc8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d022      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a2b      	ldr	r2, [pc, #172]	; (8007d3c <HAL_DMA_IRQHandler+0xccc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d01d      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a29      	ldr	r2, [pc, #164]	; (8007d40 <HAL_DMA_IRQHandler+0xcd0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d018      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a28      	ldr	r2, [pc, #160]	; (8007d44 <HAL_DMA_IRQHandler+0xcd4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d013      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a26      	ldr	r2, [pc, #152]	; (8007d48 <HAL_DMA_IRQHandler+0xcd8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d00e      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <HAL_DMA_IRQHandler+0xcdc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d009      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a23      	ldr	r2, [pc, #140]	; (8007d50 <HAL_DMA_IRQHandler+0xce0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d004      	beq.n	8007cd0 <HAL_DMA_IRQHandler+0xc60>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a22      	ldr	r2, [pc, #136]	; (8007d54 <HAL_DMA_IRQHandler+0xce4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d108      	bne.n	8007ce2 <HAL_DMA_IRQHandler+0xc72>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0214 	bic.w	r2, r2, #20
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	e007      	b.n	8007cf2 <HAL_DMA_IRQHandler+0xc82>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 020a 	bic.w	r2, r2, #10
 8007cf0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80b8 	beq.w	8007e7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d14:	e0b2      	b.n	8007e7c <HAL_DMA_IRQHandler+0xe0c>
 8007d16:	bf00      	nop
 8007d18:	40020010 	.word	0x40020010
 8007d1c:	40020028 	.word	0x40020028
 8007d20:	40020040 	.word	0x40020040
 8007d24:	40020058 	.word	0x40020058
 8007d28:	40020070 	.word	0x40020070
 8007d2c:	40020088 	.word	0x40020088
 8007d30:	400200a0 	.word	0x400200a0
 8007d34:	400200b8 	.word	0x400200b8
 8007d38:	40020410 	.word	0x40020410
 8007d3c:	40020428 	.word	0x40020428
 8007d40:	40020440 	.word	0x40020440
 8007d44:	40020458 	.word	0x40020458
 8007d48:	40020470 	.word	0x40020470
 8007d4c:	40020488 	.word	0x40020488
 8007d50:	400204a0 	.word	0x400204a0
 8007d54:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5c:	f003 031f 	and.w	r3, r3, #31
 8007d60:	2208      	movs	r2, #8
 8007d62:	409a      	lsls	r2, r3
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 8088 	beq.w	8007e7e <HAL_DMA_IRQHandler+0xe0e>
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8082 	beq.w	8007e7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a41      	ldr	r2, [pc, #260]	; (8007e84 <HAL_DMA_IRQHandler+0xe14>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d04a      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a3f      	ldr	r2, [pc, #252]	; (8007e88 <HAL_DMA_IRQHandler+0xe18>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d045      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a3e      	ldr	r2, [pc, #248]	; (8007e8c <HAL_DMA_IRQHandler+0xe1c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d040      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a3c      	ldr	r2, [pc, #240]	; (8007e90 <HAL_DMA_IRQHandler+0xe20>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d03b      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a3b      	ldr	r2, [pc, #236]	; (8007e94 <HAL_DMA_IRQHandler+0xe24>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d036      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a39      	ldr	r2, [pc, #228]	; (8007e98 <HAL_DMA_IRQHandler+0xe28>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d031      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a38      	ldr	r2, [pc, #224]	; (8007e9c <HAL_DMA_IRQHandler+0xe2c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d02c      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a36      	ldr	r2, [pc, #216]	; (8007ea0 <HAL_DMA_IRQHandler+0xe30>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d027      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a35      	ldr	r2, [pc, #212]	; (8007ea4 <HAL_DMA_IRQHandler+0xe34>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d022      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a33      	ldr	r2, [pc, #204]	; (8007ea8 <HAL_DMA_IRQHandler+0xe38>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d01d      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a32      	ldr	r2, [pc, #200]	; (8007eac <HAL_DMA_IRQHandler+0xe3c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d018      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a30      	ldr	r2, [pc, #192]	; (8007eb0 <HAL_DMA_IRQHandler+0xe40>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d013      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a2f      	ldr	r2, [pc, #188]	; (8007eb4 <HAL_DMA_IRQHandler+0xe44>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d00e      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a2d      	ldr	r2, [pc, #180]	; (8007eb8 <HAL_DMA_IRQHandler+0xe48>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d009      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2c      	ldr	r2, [pc, #176]	; (8007ebc <HAL_DMA_IRQHandler+0xe4c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d004      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xdaa>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <HAL_DMA_IRQHandler+0xe50>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d108      	bne.n	8007e2c <HAL_DMA_IRQHandler+0xdbc>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 021c 	bic.w	r2, r2, #28
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e007      	b.n	8007e3c <HAL_DMA_IRQHandler+0xdcc>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 020e 	bic.w	r2, r2, #14
 8007e3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	2201      	movs	r2, #1
 8007e46:	409a      	lsls	r2, r3
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
 8007e72:	e004      	b.n	8007e7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e7e:	3728      	adds	r7, #40	; 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40020010 	.word	0x40020010
 8007e88:	40020028 	.word	0x40020028
 8007e8c:	40020040 	.word	0x40020040
 8007e90:	40020058 	.word	0x40020058
 8007e94:	40020070 	.word	0x40020070
 8007e98:	40020088 	.word	0x40020088
 8007e9c:	400200a0 	.word	0x400200a0
 8007ea0:	400200b8 	.word	0x400200b8
 8007ea4:	40020410 	.word	0x40020410
 8007ea8:	40020428 	.word	0x40020428
 8007eac:	40020440 	.word	0x40020440
 8007eb0:	40020458 	.word	0x40020458
 8007eb4:	40020470 	.word	0x40020470
 8007eb8:	40020488 	.word	0x40020488
 8007ebc:	400204a0 	.word	0x400204a0
 8007ec0:	400204b8 	.word	0x400204b8

08007ec4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007edc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a84      	ldr	r2, [pc, #528]	; (80080f4 <DMA_SetConfig+0x230>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d072      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a82      	ldr	r2, [pc, #520]	; (80080f8 <DMA_SetConfig+0x234>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d06d      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a81      	ldr	r2, [pc, #516]	; (80080fc <DMA_SetConfig+0x238>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d068      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a7f      	ldr	r2, [pc, #508]	; (8008100 <DMA_SetConfig+0x23c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d063      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a7e      	ldr	r2, [pc, #504]	; (8008104 <DMA_SetConfig+0x240>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d05e      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a7c      	ldr	r2, [pc, #496]	; (8008108 <DMA_SetConfig+0x244>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d059      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a7b      	ldr	r2, [pc, #492]	; (800810c <DMA_SetConfig+0x248>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d054      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a79      	ldr	r2, [pc, #484]	; (8008110 <DMA_SetConfig+0x24c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d04f      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a78      	ldr	r2, [pc, #480]	; (8008114 <DMA_SetConfig+0x250>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d04a      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a76      	ldr	r2, [pc, #472]	; (8008118 <DMA_SetConfig+0x254>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d045      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a75      	ldr	r2, [pc, #468]	; (800811c <DMA_SetConfig+0x258>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d040      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a73      	ldr	r2, [pc, #460]	; (8008120 <DMA_SetConfig+0x25c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d03b      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a72      	ldr	r2, [pc, #456]	; (8008124 <DMA_SetConfig+0x260>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d036      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a70      	ldr	r2, [pc, #448]	; (8008128 <DMA_SetConfig+0x264>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d031      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a6f      	ldr	r2, [pc, #444]	; (800812c <DMA_SetConfig+0x268>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d02c      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a6d      	ldr	r2, [pc, #436]	; (8008130 <DMA_SetConfig+0x26c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d027      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a6c      	ldr	r2, [pc, #432]	; (8008134 <DMA_SetConfig+0x270>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d022      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a6a      	ldr	r2, [pc, #424]	; (8008138 <DMA_SetConfig+0x274>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01d      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a69      	ldr	r2, [pc, #420]	; (800813c <DMA_SetConfig+0x278>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d018      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a67      	ldr	r2, [pc, #412]	; (8008140 <DMA_SetConfig+0x27c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d013      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a66      	ldr	r2, [pc, #408]	; (8008144 <DMA_SetConfig+0x280>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00e      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a64      	ldr	r2, [pc, #400]	; (8008148 <DMA_SetConfig+0x284>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d009      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a63      	ldr	r2, [pc, #396]	; (800814c <DMA_SetConfig+0x288>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d004      	beq.n	8007fce <DMA_SetConfig+0x10a>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a61      	ldr	r2, [pc, #388]	; (8008150 <DMA_SetConfig+0x28c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d101      	bne.n	8007fd2 <DMA_SetConfig+0x10e>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <DMA_SetConfig+0x110>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00d      	beq.n	8007ff4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007fe0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ff2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a3e      	ldr	r2, [pc, #248]	; (80080f4 <DMA_SetConfig+0x230>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d04a      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a3d      	ldr	r2, [pc, #244]	; (80080f8 <DMA_SetConfig+0x234>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d045      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a3b      	ldr	r2, [pc, #236]	; (80080fc <DMA_SetConfig+0x238>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d040      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a3a      	ldr	r2, [pc, #232]	; (8008100 <DMA_SetConfig+0x23c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d03b      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a38      	ldr	r2, [pc, #224]	; (8008104 <DMA_SetConfig+0x240>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d036      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a37      	ldr	r2, [pc, #220]	; (8008108 <DMA_SetConfig+0x244>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d031      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a35      	ldr	r2, [pc, #212]	; (800810c <DMA_SetConfig+0x248>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d02c      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a34      	ldr	r2, [pc, #208]	; (8008110 <DMA_SetConfig+0x24c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d027      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a32      	ldr	r2, [pc, #200]	; (8008114 <DMA_SetConfig+0x250>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d022      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a31      	ldr	r2, [pc, #196]	; (8008118 <DMA_SetConfig+0x254>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d01d      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a2f      	ldr	r2, [pc, #188]	; (800811c <DMA_SetConfig+0x258>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d018      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a2e      	ldr	r2, [pc, #184]	; (8008120 <DMA_SetConfig+0x25c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d013      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a2c      	ldr	r2, [pc, #176]	; (8008124 <DMA_SetConfig+0x260>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d00e      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a2b      	ldr	r2, [pc, #172]	; (8008128 <DMA_SetConfig+0x264>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d009      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a29      	ldr	r2, [pc, #164]	; (800812c <DMA_SetConfig+0x268>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d004      	beq.n	8008094 <DMA_SetConfig+0x1d0>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a28      	ldr	r2, [pc, #160]	; (8008130 <DMA_SetConfig+0x26c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d101      	bne.n	8008098 <DMA_SetConfig+0x1d4>
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <DMA_SetConfig+0x1d6>
 8008098:	2300      	movs	r3, #0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d05a      	beq.n	8008154 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	223f      	movs	r2, #63	; 0x3f
 80080a8:	409a      	lsls	r2, r3
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d108      	bne.n	80080e0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080de:	e087      	b.n	80081f0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	60da      	str	r2, [r3, #12]
}
 80080f0:	e07e      	b.n	80081f0 <DMA_SetConfig+0x32c>
 80080f2:	bf00      	nop
 80080f4:	40020010 	.word	0x40020010
 80080f8:	40020028 	.word	0x40020028
 80080fc:	40020040 	.word	0x40020040
 8008100:	40020058 	.word	0x40020058
 8008104:	40020070 	.word	0x40020070
 8008108:	40020088 	.word	0x40020088
 800810c:	400200a0 	.word	0x400200a0
 8008110:	400200b8 	.word	0x400200b8
 8008114:	40020410 	.word	0x40020410
 8008118:	40020428 	.word	0x40020428
 800811c:	40020440 	.word	0x40020440
 8008120:	40020458 	.word	0x40020458
 8008124:	40020470 	.word	0x40020470
 8008128:	40020488 	.word	0x40020488
 800812c:	400204a0 	.word	0x400204a0
 8008130:	400204b8 	.word	0x400204b8
 8008134:	58025408 	.word	0x58025408
 8008138:	5802541c 	.word	0x5802541c
 800813c:	58025430 	.word	0x58025430
 8008140:	58025444 	.word	0x58025444
 8008144:	58025458 	.word	0x58025458
 8008148:	5802546c 	.word	0x5802546c
 800814c:	58025480 	.word	0x58025480
 8008150:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a28      	ldr	r2, [pc, #160]	; (80081fc <DMA_SetConfig+0x338>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d022      	beq.n	80081a4 <DMA_SetConfig+0x2e0>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a27      	ldr	r2, [pc, #156]	; (8008200 <DMA_SetConfig+0x33c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d01d      	beq.n	80081a4 <DMA_SetConfig+0x2e0>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a25      	ldr	r2, [pc, #148]	; (8008204 <DMA_SetConfig+0x340>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d018      	beq.n	80081a4 <DMA_SetConfig+0x2e0>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a24      	ldr	r2, [pc, #144]	; (8008208 <DMA_SetConfig+0x344>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d013      	beq.n	80081a4 <DMA_SetConfig+0x2e0>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a22      	ldr	r2, [pc, #136]	; (800820c <DMA_SetConfig+0x348>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d00e      	beq.n	80081a4 <DMA_SetConfig+0x2e0>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a21      	ldr	r2, [pc, #132]	; (8008210 <DMA_SetConfig+0x34c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d009      	beq.n	80081a4 <DMA_SetConfig+0x2e0>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1f      	ldr	r2, [pc, #124]	; (8008214 <DMA_SetConfig+0x350>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d004      	beq.n	80081a4 <DMA_SetConfig+0x2e0>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1e      	ldr	r2, [pc, #120]	; (8008218 <DMA_SetConfig+0x354>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d101      	bne.n	80081a8 <DMA_SetConfig+0x2e4>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e000      	b.n	80081aa <DMA_SetConfig+0x2e6>
 80081a8:	2300      	movs	r3, #0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d020      	beq.n	80081f0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	2201      	movs	r2, #1
 80081b8:	409a      	lsls	r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d108      	bne.n	80081e0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	60da      	str	r2, [r3, #12]
}
 80081de:	e007      	b.n	80081f0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	60da      	str	r2, [r3, #12]
}
 80081f0:	bf00      	nop
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	58025408 	.word	0x58025408
 8008200:	5802541c 	.word	0x5802541c
 8008204:	58025430 	.word	0x58025430
 8008208:	58025444 	.word	0x58025444
 800820c:	58025458 	.word	0x58025458
 8008210:	5802546c 	.word	0x5802546c
 8008214:	58025480 	.word	0x58025480
 8008218:	58025494 	.word	0x58025494

0800821c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a42      	ldr	r2, [pc, #264]	; (8008334 <DMA_CalcBaseAndBitshift+0x118>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d04a      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a41      	ldr	r2, [pc, #260]	; (8008338 <DMA_CalcBaseAndBitshift+0x11c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d045      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a3f      	ldr	r2, [pc, #252]	; (800833c <DMA_CalcBaseAndBitshift+0x120>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d040      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a3e      	ldr	r2, [pc, #248]	; (8008340 <DMA_CalcBaseAndBitshift+0x124>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d03b      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a3c      	ldr	r2, [pc, #240]	; (8008344 <DMA_CalcBaseAndBitshift+0x128>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d036      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a3b      	ldr	r2, [pc, #236]	; (8008348 <DMA_CalcBaseAndBitshift+0x12c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d031      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a39      	ldr	r2, [pc, #228]	; (800834c <DMA_CalcBaseAndBitshift+0x130>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d02c      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a38      	ldr	r2, [pc, #224]	; (8008350 <DMA_CalcBaseAndBitshift+0x134>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d027      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a36      	ldr	r2, [pc, #216]	; (8008354 <DMA_CalcBaseAndBitshift+0x138>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d022      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a35      	ldr	r2, [pc, #212]	; (8008358 <DMA_CalcBaseAndBitshift+0x13c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d01d      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a33      	ldr	r2, [pc, #204]	; (800835c <DMA_CalcBaseAndBitshift+0x140>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d018      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a32      	ldr	r2, [pc, #200]	; (8008360 <DMA_CalcBaseAndBitshift+0x144>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a30      	ldr	r2, [pc, #192]	; (8008364 <DMA_CalcBaseAndBitshift+0x148>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00e      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2f      	ldr	r2, [pc, #188]	; (8008368 <DMA_CalcBaseAndBitshift+0x14c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d009      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a2d      	ldr	r2, [pc, #180]	; (800836c <DMA_CalcBaseAndBitshift+0x150>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xa8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a2c      	ldr	r2, [pc, #176]	; (8008370 <DMA_CalcBaseAndBitshift+0x154>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d101      	bne.n	80082c8 <DMA_CalcBaseAndBitshift+0xac>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <DMA_CalcBaseAndBitshift+0xae>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d024      	beq.n	8008318 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	3b10      	subs	r3, #16
 80082d6:	4a27      	ldr	r2, [pc, #156]	; (8008374 <DMA_CalcBaseAndBitshift+0x158>)
 80082d8:	fba2 2303 	umull	r2, r3, r2, r3
 80082dc:	091b      	lsrs	r3, r3, #4
 80082de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	4a24      	ldr	r2, [pc, #144]	; (8008378 <DMA_CalcBaseAndBitshift+0x15c>)
 80082e8:	5cd3      	ldrb	r3, [r2, r3]
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d908      	bls.n	8008308 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	4b1f      	ldr	r3, [pc, #124]	; (800837c <DMA_CalcBaseAndBitshift+0x160>)
 80082fe:	4013      	ands	r3, r2
 8008300:	1d1a      	adds	r2, r3, #4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	659a      	str	r2, [r3, #88]	; 0x58
 8008306:	e00d      	b.n	8008324 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	4b1b      	ldr	r3, [pc, #108]	; (800837c <DMA_CalcBaseAndBitshift+0x160>)
 8008310:	4013      	ands	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6593      	str	r3, [r2, #88]	; 0x58
 8008316:	e005      	b.n	8008324 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	40020010 	.word	0x40020010
 8008338:	40020028 	.word	0x40020028
 800833c:	40020040 	.word	0x40020040
 8008340:	40020058 	.word	0x40020058
 8008344:	40020070 	.word	0x40020070
 8008348:	40020088 	.word	0x40020088
 800834c:	400200a0 	.word	0x400200a0
 8008350:	400200b8 	.word	0x400200b8
 8008354:	40020410 	.word	0x40020410
 8008358:	40020428 	.word	0x40020428
 800835c:	40020440 	.word	0x40020440
 8008360:	40020458 	.word	0x40020458
 8008364:	40020470 	.word	0x40020470
 8008368:	40020488 	.word	0x40020488
 800836c:	400204a0 	.word	0x400204a0
 8008370:	400204b8 	.word	0x400204b8
 8008374:	aaaaaaab 	.word	0xaaaaaaab
 8008378:	0801167c 	.word	0x0801167c
 800837c:	fffffc00 	.word	0xfffffc00

08008380 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d120      	bne.n	80083d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	2b03      	cmp	r3, #3
 800839a:	d858      	bhi.n	800844e <DMA_CheckFifoParam+0xce>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <DMA_CheckFifoParam+0x24>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083c7 	.word	0x080083c7
 80083ac:	080083b5 	.word	0x080083b5
 80083b0:	0800844f 	.word	0x0800844f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d048      	beq.n	8008452 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083c4:	e045      	b.n	8008452 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083ce:	d142      	bne.n	8008456 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083d4:	e03f      	b.n	8008456 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083de:	d123      	bne.n	8008428 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d838      	bhi.n	800845a <DMA_CheckFifoParam+0xda>
 80083e8:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <DMA_CheckFifoParam+0x70>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008401 	.word	0x08008401
 80083f4:	08008407 	.word	0x08008407
 80083f8:	08008401 	.word	0x08008401
 80083fc:	08008419 	.word	0x08008419
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
        break;
 8008404:	e030      	b.n	8008468 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d025      	beq.n	800845e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008416:	e022      	b.n	800845e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008420:	d11f      	bne.n	8008462 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008426:	e01c      	b.n	8008462 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	2b02      	cmp	r3, #2
 800842e:	d902      	bls.n	8008436 <DMA_CheckFifoParam+0xb6>
 8008430:	2b03      	cmp	r3, #3
 8008432:	d003      	beq.n	800843c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008434:	e018      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]
        break;
 800843a:	e015      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00e      	beq.n	8008466 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
    break;
 800844c:	e00b      	b.n	8008466 <DMA_CheckFifoParam+0xe6>
        break;
 800844e:	bf00      	nop
 8008450:	e00a      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
        break;
 8008452:	bf00      	nop
 8008454:	e008      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
        break;
 8008456:	bf00      	nop
 8008458:	e006      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
        break;
 800845a:	bf00      	nop
 800845c:	e004      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
        break;
 800845e:	bf00      	nop
 8008460:	e002      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
        break;
 8008462:	bf00      	nop
 8008464:	e000      	b.n	8008468 <DMA_CheckFifoParam+0xe8>
    break;
 8008466:	bf00      	nop
    }
  }

  return status;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop

08008478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a38      	ldr	r2, [pc, #224]	; (800856c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d022      	beq.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a36      	ldr	r2, [pc, #216]	; (8008570 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01d      	beq.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a35      	ldr	r2, [pc, #212]	; (8008574 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d018      	beq.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a33      	ldr	r2, [pc, #204]	; (8008578 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d013      	beq.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a32      	ldr	r2, [pc, #200]	; (800857c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00e      	beq.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a30      	ldr	r2, [pc, #192]	; (8008580 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d009      	beq.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a2f      	ldr	r2, [pc, #188]	; (8008584 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d004      	beq.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a2d      	ldr	r2, [pc, #180]	; (8008588 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d101      	bne.n	80084da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01a      	beq.n	8008516 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	3b08      	subs	r3, #8
 80084e8:	4a28      	ldr	r2, [pc, #160]	; (800858c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	091b      	lsrs	r3, r3, #4
 80084f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4b26      	ldr	r3, [pc, #152]	; (8008590 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a24      	ldr	r2, [pc, #144]	; (8008594 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008504:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	2201      	movs	r2, #1
 800850e:	409a      	lsls	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008514:	e024      	b.n	8008560 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	3b10      	subs	r3, #16
 800851e:	4a1e      	ldr	r2, [pc, #120]	; (8008598 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008520:	fba2 2303 	umull	r2, r3, r2, r3
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4a1c      	ldr	r2, [pc, #112]	; (800859c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d806      	bhi.n	800853e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a1b      	ldr	r2, [pc, #108]	; (80085a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d902      	bls.n	800853e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3308      	adds	r3, #8
 800853c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	4b18      	ldr	r3, [pc, #96]	; (80085a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a16      	ldr	r2, [pc, #88]	; (80085a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008550:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f003 031f 	and.w	r3, r3, #31
 8008558:	2201      	movs	r2, #1
 800855a:	409a      	lsls	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	58025408 	.word	0x58025408
 8008570:	5802541c 	.word	0x5802541c
 8008574:	58025430 	.word	0x58025430
 8008578:	58025444 	.word	0x58025444
 800857c:	58025458 	.word	0x58025458
 8008580:	5802546c 	.word	0x5802546c
 8008584:	58025480 	.word	0x58025480
 8008588:	58025494 	.word	0x58025494
 800858c:	cccccccd 	.word	0xcccccccd
 8008590:	16009600 	.word	0x16009600
 8008594:	58025880 	.word	0x58025880
 8008598:	aaaaaaab 	.word	0xaaaaaaab
 800859c:	400204b8 	.word	0x400204b8
 80085a0:	4002040f 	.word	0x4002040f
 80085a4:	10008200 	.word	0x10008200
 80085a8:	40020880 	.word	0x40020880

080085ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d04a      	beq.n	8008658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d847      	bhi.n	8008658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a25      	ldr	r2, [pc, #148]	; (8008664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d022      	beq.n	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a24      	ldr	r2, [pc, #144]	; (8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d01d      	beq.n	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a22      	ldr	r2, [pc, #136]	; (800866c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d018      	beq.n	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a21      	ldr	r2, [pc, #132]	; (8008670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1f      	ldr	r2, [pc, #124]	; (8008674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00e      	beq.n	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d009      	beq.n	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a1c      	ldr	r2, [pc, #112]	; (800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d101      	bne.n	800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008618:	2301      	movs	r3, #1
 800861a:	e000      	b.n	800861e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800861c:	2300      	movs	r3, #0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4b17      	ldr	r3, [pc, #92]	; (8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a15      	ldr	r2, [pc, #84]	; (8008688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008634:	671a      	str	r2, [r3, #112]	; 0x70
 8008636:	e009      	b.n	800864c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4b14      	ldr	r3, [pc, #80]	; (800868c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a11      	ldr	r2, [pc, #68]	; (8008690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800864a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3b01      	subs	r3, #1
 8008650:	2201      	movs	r2, #1
 8008652:	409a      	lsls	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008658:	bf00      	nop
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	58025408 	.word	0x58025408
 8008668:	5802541c 	.word	0x5802541c
 800866c:	58025430 	.word	0x58025430
 8008670:	58025444 	.word	0x58025444
 8008674:	58025458 	.word	0x58025458
 8008678:	5802546c 	.word	0x5802546c
 800867c:	58025480 	.word	0x58025480
 8008680:	58025494 	.word	0x58025494
 8008684:	1600963f 	.word	0x1600963f
 8008688:	58025940 	.word	0x58025940
 800868c:	1000823f 	.word	0x1000823f
 8008690:	40020940 	.word	0x40020940

08008694 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08a      	sub	sp, #40	; 0x28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80086a8:	2308      	movs	r3, #8
 80086aa:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80086ac:	4b38      	ldr	r3, [pc, #224]	; (8008790 <HAL_FLASH_Program+0xfc>)
 80086ae:	7d1b      	ldrb	r3, [r3, #20]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_FLASH_Program+0x24>
 80086b4:	2302      	movs	r3, #2
 80086b6:	e067      	b.n	8008788 <HAL_FLASH_Program+0xf4>
 80086b8:	4b35      	ldr	r3, [pc, #212]	; (8008790 <HAL_FLASH_Program+0xfc>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086c4:	d306      	bcc.n	80086d4 <HAL_FLASH_Program+0x40>
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80086cc:	d202      	bcs.n	80086d4 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80086ce:	2301      	movs	r3, #1
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	e001      	b.n	80086d8 <HAL_FLASH_Program+0x44>
  }
  else
  {
    bank = FLASH_BANK_2;
 80086d4:	2302      	movs	r3, #2
 80086d6:	61bb      	str	r3, [r7, #24]
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80086d8:	4b2d      	ldr	r3, [pc, #180]	; (8008790 <HAL_FLASH_Program+0xfc>)
 80086da:	2200      	movs	r2, #0
 80086dc:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80086de:	69b9      	ldr	r1, [r7, #24]
 80086e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80086e4:	f000 f8bc 	bl	8008860 <FLASH_WaitForLastOperation>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 80086ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d143      	bne.n	800877e <HAL_FLASH_Program+0xea>
  {
    if(bank == FLASH_BANK_1)
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d106      	bne.n	800870a <HAL_FLASH_Program+0x76>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80086fc:	4b25      	ldr	r3, [pc, #148]	; (8008794 <HAL_FLASH_Program+0x100>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	4a24      	ldr	r2, [pc, #144]	; (8008794 <HAL_FLASH_Program+0x100>)
 8008702:	f043 0302 	orr.w	r3, r3, #2
 8008706:	60d3      	str	r3, [r2, #12]
 8008708:	e007      	b.n	800871a <HAL_FLASH_Program+0x86>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800870a:	4b22      	ldr	r3, [pc, #136]	; (8008794 <HAL_FLASH_Program+0x100>)
 800870c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008710:	4a20      	ldr	r2, [pc, #128]	; (8008794 <HAL_FLASH_Program+0x100>)
 8008712:	f043 0302 	orr.w	r3, r3, #2
 8008716:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800871a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 800871e:	f3bf 8f4f 	dsb	sy
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	3304      	adds	r3, #4
 800872e:	623b      	str	r3, [r7, #32]
        src_addr++;
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	3304      	adds	r3, #4
 8008734:	61fb      	str	r3, [r7, #28]
        row_index--;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	3b01      	subs	r3, #1
 800873a:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1ef      	bne.n	8008722 <HAL_FLASH_Program+0x8e>
  __ASM volatile ("isb 0xF":::"memory");
 8008742:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8008746:	f3bf 8f4f 	dsb	sy

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800874a:	69b9      	ldr	r1, [r7, #24]
 800874c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008750:	f000 f886 	bl	8008860 <FLASH_WaitForLastOperation>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d106      	bne.n	800876e <HAL_FLASH_Program+0xda>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8008760:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <HAL_FLASH_Program+0x100>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	4a0b      	ldr	r2, [pc, #44]	; (8008794 <HAL_FLASH_Program+0x100>)
 8008766:	f023 0302 	bic.w	r3, r3, #2
 800876a:	60d3      	str	r3, [r2, #12]
 800876c:	e007      	b.n	800877e <HAL_FLASH_Program+0xea>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800876e:	4b09      	ldr	r3, [pc, #36]	; (8008794 <HAL_FLASH_Program+0x100>)
 8008770:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008774:	4a07      	ldr	r2, [pc, #28]	; (8008794 <HAL_FLASH_Program+0x100>)
 8008776:	f023 0302 	bic.w	r3, r3, #2
 800877a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800877e:	4b04      	ldr	r3, [pc, #16]	; (8008790 <HAL_FLASH_Program+0xfc>)
 8008780:	2200      	movs	r2, #0
 8008782:	751a      	strb	r2, [r3, #20]

  return status;
 8008784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008788:	4618      	mov	r0, r3
 800878a:	3728      	adds	r7, #40	; 0x28
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	24000dbc 	.word	0x24000dbc
 8008794:	52002000 	.word	0x52002000

08008798 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800879c:	4b18      	ldr	r3, [pc, #96]	; (8008800 <HAL_FLASH_Unlock+0x68>)
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00d      	beq.n	80087c4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80087a8:	4b15      	ldr	r3, [pc, #84]	; (8008800 <HAL_FLASH_Unlock+0x68>)
 80087aa:	4a16      	ldr	r2, [pc, #88]	; (8008804 <HAL_FLASH_Unlock+0x6c>)
 80087ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80087ae:	4b14      	ldr	r3, [pc, #80]	; (8008800 <HAL_FLASH_Unlock+0x68>)
 80087b0:	4a15      	ldr	r2, [pc, #84]	; (8008808 <HAL_FLASH_Unlock+0x70>)
 80087b2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80087b4:	4b12      	ldr	r3, [pc, #72]	; (8008800 <HAL_FLASH_Unlock+0x68>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e018      	b.n	80087f6 <HAL_FLASH_Unlock+0x5e>
    }
  }

  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80087c4:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <HAL_FLASH_Unlock+0x68>)
 80087c6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d010      	beq.n	80087f4 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <HAL_FLASH_Unlock+0x68>)
 80087d4:	4a0b      	ldr	r2, [pc, #44]	; (8008804 <HAL_FLASH_Unlock+0x6c>)
 80087d6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 80087da:	4b09      	ldr	r3, [pc, #36]	; (8008800 <HAL_FLASH_Unlock+0x68>)
 80087dc:	4a0a      	ldr	r2, [pc, #40]	; (8008808 <HAL_FLASH_Unlock+0x70>)
 80087de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80087e2:	4b07      	ldr	r3, [pc, #28]	; (8008800 <HAL_FLASH_Unlock+0x68>)
 80087e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <HAL_FLASH_Unlock+0x5e>
    }
  }

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	52002000 	.word	0x52002000
 8008804:	45670123 	.word	0x45670123
 8008808:	cdef89ab 	.word	0xcdef89ab

0800880c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8008810:	4b12      	ldr	r3, [pc, #72]	; (800885c <HAL_FLASH_Lock+0x50>)
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	4a11      	ldr	r2, [pc, #68]	; (800885c <HAL_FLASH_Lock+0x50>)
 8008816:	f043 0301 	orr.w	r3, r3, #1
 800881a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800881c:	4b0f      	ldr	r3, [pc, #60]	; (800885c <HAL_FLASH_Lock+0x50>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e011      	b.n	8008850 <HAL_FLASH_Lock+0x44>
  }

  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 800882c:	4b0b      	ldr	r3, [pc, #44]	; (800885c <HAL_FLASH_Lock+0x50>)
 800882e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008832:	4a0a      	ldr	r2, [pc, #40]	; (800885c <HAL_FLASH_Lock+0x50>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 800883c:	4b07      	ldr	r3, [pc, #28]	; (800885c <HAL_FLASH_Lock+0x50>)
 800883e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <HAL_FLASH_Lock+0x44>
  }

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	52002000 	.word	0x52002000

08008860 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag, errorflag;
  uint32_t tickstart = HAL_GetTick();
 800886a:	f7fc f915 	bl	8004a98 <HAL_GetTick>
 800886e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d102      	bne.n	800887c <FLASH_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_QW_BANK1;
 8008876:	2304      	movs	r3, #4
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	e013      	b.n	80088a4 <FLASH_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_QW_BANK2;
 800887c:	4b41      	ldr	r3, [pc, #260]	; (8008984 <FLASH_WaitForLastOperation+0x124>)
 800887e:	617b      	str	r3, [r7, #20]
  }

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8008880:	e010      	b.n	80088a4 <FLASH_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d00c      	beq.n	80088a4 <FLASH_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800888a:	f7fc f905 	bl	8004a98 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d302      	bcc.n	80088a0 <FLASH_WaitForLastOperation+0x40>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <FLASH_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e06a      	b.n	800897a <FLASH_WaitForLastOperation+0x11a>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	4b38      	ldr	r3, [pc, #224]	; (8008988 <FLASH_WaitForLastOperation+0x128>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d10a      	bne.n	80088c6 <FLASH_WaitForLastOperation+0x66>
 80088b0:	4b36      	ldr	r3, [pc, #216]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 80088b2:	691a      	ldr	r2, [r3, #16]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	4013      	ands	r3, r2
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	bf0c      	ite	eq
 80088be:	2301      	moveq	r3, #1
 80088c0:	2300      	movne	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	e00c      	b.n	80088e0 <FLASH_WaitForLastOperation+0x80>
 80088c6:	4b31      	ldr	r3, [pc, #196]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 80088c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80088cc:	43da      	mvns	r2, r3
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	4013      	ands	r3, r2
 80088d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bf0c      	ite	eq
 80088da:	2301      	moveq	r3, #1
 80088dc:	2300      	movne	r3, #0
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1ce      	bne.n	8008882 <FLASH_WaitForLastOperation+0x22>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d105      	bne.n	80088f6 <FLASH_WaitForLastOperation+0x96>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80088ea:	4b28      	ldr	r3, [pc, #160]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 80088ec:	691a      	ldr	r2, [r3, #16]
 80088ee:	4b28      	ldr	r3, [pc, #160]	; (8008990 <FLASH_WaitForLastOperation+0x130>)
 80088f0:	4013      	ands	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	e007      	b.n	8008906 <FLASH_WaitForLastOperation+0xa6>
  }
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80088f6:	4b25      	ldr	r3, [pc, #148]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 80088f8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80088fc:	4b24      	ldr	r3, [pc, #144]	; (8008990 <FLASH_WaitForLastOperation+0x130>)
 80088fe:	4013      	ands	r3, r2
 8008900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008904:	613b      	str	r3, [r7, #16]
  }

  /* In case of error reported in Flash SR1 or SR2 registers (ECCC not managed as an error) */
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d017      	beq.n	8008940 <FLASH_WaitForLastOperation+0xe0>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8008910:	4b20      	ldr	r3, [pc, #128]	; (8008994 <FLASH_WaitForLastOperation+0x134>)
 8008912:	699a      	ldr	r2, [r3, #24]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	4a1e      	ldr	r2, [pc, #120]	; (8008994 <FLASH_WaitForLastOperation+0x134>)
 800891a:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <FLASH_WaitForLastOperation+0x128>)
 8008920:	4013      	ands	r3, r2
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	429a      	cmp	r2, r3
 8008926:	d103      	bne.n	8008930 <FLASH_WaitForLastOperation+0xd0>
 8008928:	4a18      	ldr	r2, [pc, #96]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6153      	str	r3, [r2, #20]
 800892e:	e005      	b.n	800893c <FLASH_WaitForLastOperation+0xdc>
 8008930:	4a16      	ldr	r2, [pc, #88]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008938:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e01c      	b.n	800897a <FLASH_WaitForLastOperation+0x11a>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d10b      	bne.n	800895e <FLASH_WaitForLastOperation+0xfe>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8008946:	4b11      	ldr	r3, [pc, #68]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800894e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008952:	d111      	bne.n	8008978 <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8008954:	4b0d      	ldr	r3, [pc, #52]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 8008956:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800895a:	615a      	str	r2, [r3, #20]
 800895c:	e00c      	b.n	8008978 <FLASH_WaitForLastOperation+0x118>
    }
  }
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800895e:	4b0b      	ldr	r3, [pc, #44]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 8008960:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896c:	d104      	bne.n	8008978 <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <FLASH_WaitForLastOperation+0x12c>)
 8008970:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008974:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	80000004 	.word	0x80000004
 8008988:	1fef000f 	.word	0x1fef000f
 800898c:	52002000 	.word	0x52002000
 8008990:	17ee0000 	.word	0x17ee0000
 8008994:	24000dbc 	.word	0x24000dbc

08008998 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80089a6:	4b5e      	ldr	r3, [pc, #376]	; (8008b20 <HAL_FLASHEx_Erase+0x188>)
 80089a8:	7d1b      	ldrb	r3, [r3, #20]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d101      	bne.n	80089b2 <HAL_FLASHEx_Erase+0x1a>
 80089ae:	2302      	movs	r3, #2
 80089b0:	e0b2      	b.n	8008b18 <HAL_FLASHEx_Erase+0x180>
 80089b2:	4b5b      	ldr	r3, [pc, #364]	; (8008b20 <HAL_FLASHEx_Erase+0x188>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80089b8:	4b59      	ldr	r3, [pc, #356]	; (8008b20 <HAL_FLASHEx_Erase+0x188>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d009      	beq.n	80089de <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80089ca:	2101      	movs	r1, #1
 80089cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80089d0:	f7ff ff46 	bl	8008860 <FLASH_WaitForLastOperation>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80089ea:	2102      	movs	r1, #2
 80089ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80089f0:	f7ff ff36 	bl	8008860 <FLASH_WaitForLastOperation>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  if(status == HAL_OK)
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 8085 	bne.w	8008b10 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d136      	bne.n	8008a7c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	4619      	mov	r1, r3
 8008a18:	4610      	mov	r0, r2
 8008a1a:	f000 f887 	bl	8008b2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00f      	beq.n	8008a4a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008a30:	f7ff ff16 	bl	8008860 <FLASH_WaitForLastOperation>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8008a3e:	4b39      	ldr	r3, [pc, #228]	; (8008b24 <HAL_FLASHEx_Erase+0x18c>)
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	4a38      	ldr	r2, [pc, #224]	; (8008b24 <HAL_FLASHEx_Erase+0x18c>)
 8008a44:	f023 0308 	bic.w	r3, r3, #8
 8008a48:	60d3      	str	r3, [r2, #12]
      }
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d05c      	beq.n	8008b10 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8008a56:	2102      	movs	r1, #2
 8008a58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008a5c:	f7ff ff00 	bl	8008860 <FLASH_WaitForLastOperation>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8008a6a:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <HAL_FLASHEx_Erase+0x18c>)
 8008a6c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008a70:	4a2c      	ldr	r2, [pc, #176]	; (8008b24 <HAL_FLASHEx_Erase+0x18c>)
 8008a72:	f023 0308 	bic.w	r3, r3, #8
 8008a76:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8008a7a:	e049      	b.n	8008b10 <HAL_FLASHEx_Erase+0x178>
      }
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a82:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	60bb      	str	r3, [r7, #8]
 8008a8a:	e039      	b.n	8008b00 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6859      	ldr	r1, [r3, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	461a      	mov	r2, r3
 8008a96:	68b8      	ldr	r0, [r7, #8]
 8008a98:	f000 f8b2 	bl	8008c00 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00c      	beq.n	8008ac2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008aae:	f7ff fed7 	bl	8008860 <FLASH_WaitForLastOperation>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8008ab6:	4b1b      	ldr	r3, [pc, #108]	; (8008b24 <HAL_FLASHEx_Erase+0x18c>)
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	491a      	ldr	r1, [pc, #104]	; (8008b24 <HAL_FLASHEx_Erase+0x18c>)
 8008abc:	4b1a      	ldr	r3, [pc, #104]	; (8008b28 <HAL_FLASHEx_Erase+0x190>)
 8008abe:	4013      	ands	r3, r2
 8008ac0:	60cb      	str	r3, [r1, #12]
        }
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00e      	beq.n	8008aec <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8008ace:	2102      	movs	r1, #2
 8008ad0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008ad4:	f7ff fec4 	bl	8008860 <FLASH_WaitForLastOperation>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8008adc:	4b11      	ldr	r3, [pc, #68]	; (8008b24 <HAL_FLASHEx_Erase+0x18c>)
 8008ade:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008ae2:	4910      	ldr	r1, [pc, #64]	; (8008b24 <HAL_FLASHEx_Erase+0x18c>)
 8008ae4:	4b10      	ldr	r3, [pc, #64]	; (8008b28 <HAL_FLASHEx_Erase+0x190>)
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }

        if(status != HAL_OK)
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	601a      	str	r2, [r3, #0]
          break;
 8008af8:	e00a      	b.n	8008b10 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60bb      	str	r3, [r7, #8]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	4413      	add	r3, r2
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d3bd      	bcc.n	8008a8c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008b10:	4b03      	ldr	r3, [pc, #12]	; (8008b20 <HAL_FLASHEx_Erase+0x188>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	751a      	strb	r2, [r3, #20]

  return status;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	24000dbc 	.word	0x24000dbc
 8008b24:	52002000 	.word	0x52002000
 8008b28:	fffff8fb 	.word	0xfffff8fb

08008b2c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d122      	bne.n	8008b86 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8008b40:	4b2e      	ldr	r3, [pc, #184]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	4a2d      	ldr	r2, [pc, #180]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008b4a:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8008b4c:	4b2b      	ldr	r3, [pc, #172]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b4e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008b52:	4a2a      	ldr	r2, [pc, #168]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b54:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008b58:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8008b5c:	4b27      	ldr	r3, [pc, #156]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	4926      	ldr	r1, [pc, #152]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8008b68:	4b24      	ldr	r3, [pc, #144]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b6a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008b6e:	4923      	ldr	r1, [pc, #140]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8008b78:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	4a1f      	ldr	r2, [pc, #124]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b7e:	f043 0310 	orr.w	r3, r3, #16
 8008b82:	6193      	str	r3, [r2, #24]

      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
  }
}
 8008b84:	e033      	b.n	8008bee <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d011      	beq.n	8008bb4 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8008b90:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	4a19      	ldr	r2, [pc, #100]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008b9a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8008b9c:	4b17      	ldr	r3, [pc, #92]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	4916      	ldr	r1, [pc, #88]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8008ba8:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	4a13      	ldr	r2, [pc, #76]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008bae:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8008bb2:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d017      	beq.n	8008bee <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008bc0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008bc4:	4a0d      	ldr	r2, [pc, #52]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008bc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008bca:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8008bce:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008bd0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008bd4:	4909      	ldr	r1, [pc, #36]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8008bde:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008be0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008be4:	4a05      	ldr	r2, [pc, #20]	; (8008bfc <FLASH_MassErase+0xd0>)
 8008be6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8008bea:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	52002000 	.word	0x52002000

08008c00 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d010      	beq.n	8008c38 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8008c16:	4b18      	ldr	r3, [pc, #96]	; (8008c78 <FLASH_Erase_Sector+0x78>)
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	4a17      	ldr	r2, [pc, #92]	; (8008c78 <FLASH_Erase_Sector+0x78>)
 8008c1c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8008c20:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <FLASH_Erase_Sector+0x78>)
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	0219      	lsls	r1, r3, #8
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	4a11      	ldr	r2, [pc, #68]	; (8008c78 <FLASH_Erase_Sector+0x78>)
 8008c32:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8008c36:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d014      	beq.n	8008c6c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8008c42:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <FLASH_Erase_Sector+0x78>)
 8008c44:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008c48:	4a0b      	ldr	r2, [pc, #44]	; (8008c78 <FLASH_Erase_Sector+0x78>)
 8008c4a:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8008c4e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8008c52:	4b09      	ldr	r3, [pc, #36]	; (8008c78 <FLASH_Erase_Sector+0x78>)
 8008c54:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	0219      	lsls	r1, r3, #8
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	4313      	orrs	r3, r2
 8008c62:	4a05      	ldr	r2, [pc, #20]	; (8008c78 <FLASH_Erase_Sector+0x78>)
 8008c64:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8008c68:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    FLASH->CR2 &= ~(FLASH_CR_SNB);

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	52002000 	.word	0x52002000

08008c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b089      	sub	sp, #36	; 0x24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c8a:	4b89      	ldr	r3, [pc, #548]	; (8008eb0 <HAL_GPIO_Init+0x234>)
 8008c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c8e:	e194      	b.n	8008fba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	2101      	movs	r1, #1
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 8186 	beq.w	8008fb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d00b      	beq.n	8008cc8 <HAL_GPIO_Init+0x4c>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d007      	beq.n	8008cc8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008cbc:	2b11      	cmp	r3, #17
 8008cbe:	d003      	beq.n	8008cc8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	2b12      	cmp	r3, #18
 8008cc6:	d130      	bne.n	8008d2a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd8:	43db      	mvns	r3, r3
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cfe:	2201      	movs	r2, #1
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	43db      	mvns	r3, r3
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	091b      	lsrs	r3, r3, #4
 8008d14:	f003 0201 	and.w	r2, r3, #1
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	2203      	movs	r2, #3
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d003      	beq.n	8008d6a <HAL_GPIO_Init+0xee>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	2b12      	cmp	r3, #18
 8008d68:	d123      	bne.n	8008db2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	08da      	lsrs	r2, r3, #3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3208      	adds	r2, #8
 8008d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	220f      	movs	r2, #15
 8008d82:	fa02 f303 	lsl.w	r3, r2, r3
 8008d86:	43db      	mvns	r3, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	691a      	ldr	r2, [r3, #16]
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	f003 0307 	and.w	r3, r3, #7
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	08da      	lsrs	r2, r3, #3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3208      	adds	r2, #8
 8008dac:	69b9      	ldr	r1, [r7, #24]
 8008dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc2:	43db      	mvns	r3, r3
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f003 0203 	and.w	r2, r3, #3
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 80e0 	beq.w	8008fb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008df4:	4b2f      	ldr	r3, [pc, #188]	; (8008eb4 <HAL_GPIO_Init+0x238>)
 8008df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008dfa:	4a2e      	ldr	r2, [pc, #184]	; (8008eb4 <HAL_GPIO_Init+0x238>)
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e04:	4b2b      	ldr	r3, [pc, #172]	; (8008eb4 <HAL_GPIO_Init+0x238>)
 8008e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e12:	4a29      	ldr	r2, [pc, #164]	; (8008eb8 <HAL_GPIO_Init+0x23c>)
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	089b      	lsrs	r3, r3, #2
 8008e18:	3302      	adds	r3, #2
 8008e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	220f      	movs	r2, #15
 8008e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2e:	43db      	mvns	r3, r3
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	4013      	ands	r3, r2
 8008e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <HAL_GPIO_Init+0x240>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d052      	beq.n	8008ee4 <HAL_GPIO_Init+0x268>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a1f      	ldr	r2, [pc, #124]	; (8008ec0 <HAL_GPIO_Init+0x244>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d031      	beq.n	8008eaa <HAL_GPIO_Init+0x22e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a1e      	ldr	r2, [pc, #120]	; (8008ec4 <HAL_GPIO_Init+0x248>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d02b      	beq.n	8008ea6 <HAL_GPIO_Init+0x22a>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a1d      	ldr	r2, [pc, #116]	; (8008ec8 <HAL_GPIO_Init+0x24c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d025      	beq.n	8008ea2 <HAL_GPIO_Init+0x226>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <HAL_GPIO_Init+0x250>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d01f      	beq.n	8008e9e <HAL_GPIO_Init+0x222>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a1b      	ldr	r2, [pc, #108]	; (8008ed0 <HAL_GPIO_Init+0x254>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d019      	beq.n	8008e9a <HAL_GPIO_Init+0x21e>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a1a      	ldr	r2, [pc, #104]	; (8008ed4 <HAL_GPIO_Init+0x258>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d013      	beq.n	8008e96 <HAL_GPIO_Init+0x21a>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a19      	ldr	r2, [pc, #100]	; (8008ed8 <HAL_GPIO_Init+0x25c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00d      	beq.n	8008e92 <HAL_GPIO_Init+0x216>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a18      	ldr	r2, [pc, #96]	; (8008edc <HAL_GPIO_Init+0x260>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d007      	beq.n	8008e8e <HAL_GPIO_Init+0x212>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a17      	ldr	r2, [pc, #92]	; (8008ee0 <HAL_GPIO_Init+0x264>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d101      	bne.n	8008e8a <HAL_GPIO_Init+0x20e>
 8008e86:	2309      	movs	r3, #9
 8008e88:	e02d      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008e8a:	230a      	movs	r3, #10
 8008e8c:	e02b      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008e8e:	2308      	movs	r3, #8
 8008e90:	e029      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008e92:	2307      	movs	r3, #7
 8008e94:	e027      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008e96:	2306      	movs	r3, #6
 8008e98:	e025      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008e9a:	2305      	movs	r3, #5
 8008e9c:	e023      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008e9e:	2304      	movs	r3, #4
 8008ea0:	e021      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e01f      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e01d      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e01b      	b.n	8008ee6 <HAL_GPIO_Init+0x26a>
 8008eae:	bf00      	nop
 8008eb0:	58000080 	.word	0x58000080
 8008eb4:	58024400 	.word	0x58024400
 8008eb8:	58000400 	.word	0x58000400
 8008ebc:	58020000 	.word	0x58020000
 8008ec0:	58020400 	.word	0x58020400
 8008ec4:	58020800 	.word	0x58020800
 8008ec8:	58020c00 	.word	0x58020c00
 8008ecc:	58021000 	.word	0x58021000
 8008ed0:	58021400 	.word	0x58021400
 8008ed4:	58021800 	.word	0x58021800
 8008ed8:	58021c00 	.word	0x58021c00
 8008edc:	58022000 	.word	0x58022000
 8008ee0:	58022400 	.word	0x58022400
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	f002 0203 	and.w	r2, r2, #3
 8008eec:	0092      	lsls	r2, r2, #2
 8008eee:	4093      	lsls	r3, r2
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ef6:	4938      	ldr	r1, [pc, #224]	; (8008fd8 <HAL_GPIO_Init+0x35c>)
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	089b      	lsrs	r3, r3, #2
 8008efc:	3302      	adds	r3, #2
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	4013      	ands	r3, r2
 8008f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	43db      	mvns	r3, r3
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	43db      	mvns	r3, r3
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	4013      	ands	r3, r2
 8008f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	4013      	ands	r3, r2
 8008f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f47f ae63 	bne.w	8008c90 <HAL_GPIO_Init+0x14>
  }
}
 8008fca:	bf00      	nop
 8008fcc:	3724      	adds	r7, #36	; 0x24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	58000400 	.word	0x58000400

08008fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691a      	ldr	r2, [r3, #16]
 8008fec:	887b      	ldrh	r3, [r7, #2]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	73fb      	strb	r3, [r7, #15]
 8008ff8:	e001      	b.n	8008ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	807b      	strh	r3, [r7, #2]
 8009018:	4613      	mov	r3, r2
 800901a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800901c:	787b      	ldrb	r3, [r7, #1]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009022:	887a      	ldrh	r2, [r7, #2]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009028:	e003      	b.n	8009032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800902a:	887b      	ldrh	r3, [r7, #2]
 800902c:	041a      	lsls	r2, r3, #16
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	619a      	str	r2, [r3, #24]
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	460b      	mov	r3, r1
 8009048:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	695a      	ldr	r2, [r3, #20]
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	401a      	ands	r2, r3
 8009052:	887b      	ldrh	r3, [r7, #2]
 8009054:	429a      	cmp	r2, r3
 8009056:	d104      	bne.n	8009062 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009058:	887b      	ldrh	r3, [r7, #2]
 800905a:	041a      	lsls	r2, r3, #16
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009060:	e002      	b.n	8009068 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009062:	887a      	ldrh	r2, [r7, #2]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	619a      	str	r2, [r3, #24]
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800907c:	4b19      	ldr	r3, [pc, #100]	; (80090e4 <HAL_PWREx_ConfigSupply+0x70>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b04      	cmp	r3, #4
 8009086:	d00a      	beq.n	800909e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009088:	4b16      	ldr	r3, [pc, #88]	; (80090e4 <HAL_PWREx_ConfigSupply+0x70>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f003 0307 	and.w	r3, r3, #7
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d001      	beq.n	800909a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e01f      	b.n	80090da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	e01d      	b.n	80090da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800909e:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <HAL_PWREx_ConfigSupply+0x70>)
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f023 0207 	bic.w	r2, r3, #7
 80090a6:	490f      	ldr	r1, [pc, #60]	; (80090e4 <HAL_PWREx_ConfigSupply+0x70>)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80090ae:	f7fb fcf3 	bl	8004a98 <HAL_GetTick>
 80090b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80090b4:	e009      	b.n	80090ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80090b6:	f7fb fcef 	bl	8004a98 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090c4:	d901      	bls.n	80090ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e007      	b.n	80090da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80090ca:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <HAL_PWREx_ConfigSupply+0x70>)
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090d6:	d1ee      	bne.n	80090b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	58024800 	.word	0x58024800

080090e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08c      	sub	sp, #48	; 0x30
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e3c4      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 8087 	beq.w	8009216 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009108:	4ba2      	ldr	r3, [pc, #648]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009110:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009112:	4ba0      	ldr	r3, [pc, #640]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009116:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	2b10      	cmp	r3, #16
 800911c:	d007      	beq.n	800912e <HAL_RCC_OscConfig+0x46>
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	2b18      	cmp	r3, #24
 8009122:	d110      	bne.n	8009146 <HAL_RCC_OscConfig+0x5e>
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	f003 0303 	and.w	r3, r3, #3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d10b      	bne.n	8009146 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800912e:	4b99      	ldr	r3, [pc, #612]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d06c      	beq.n	8009214 <HAL_RCC_OscConfig+0x12c>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d168      	bne.n	8009214 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e39e      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914e:	d106      	bne.n	800915e <HAL_RCC_OscConfig+0x76>
 8009150:	4b90      	ldr	r3, [pc, #576]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a8f      	ldr	r2, [pc, #572]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	e02e      	b.n	80091bc <HAL_RCC_OscConfig+0xd4>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10c      	bne.n	8009180 <HAL_RCC_OscConfig+0x98>
 8009166:	4b8b      	ldr	r3, [pc, #556]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a8a      	ldr	r2, [pc, #552]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 800916c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	4b88      	ldr	r3, [pc, #544]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a87      	ldr	r2, [pc, #540]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	e01d      	b.n	80091bc <HAL_RCC_OscConfig+0xd4>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009188:	d10c      	bne.n	80091a4 <HAL_RCC_OscConfig+0xbc>
 800918a:	4b82      	ldr	r3, [pc, #520]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a81      	ldr	r2, [pc, #516]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	4b7f      	ldr	r3, [pc, #508]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a7e      	ldr	r2, [pc, #504]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 800919c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	e00b      	b.n	80091bc <HAL_RCC_OscConfig+0xd4>
 80091a4:	4b7b      	ldr	r3, [pc, #492]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a7a      	ldr	r2, [pc, #488]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80091aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	4b78      	ldr	r3, [pc, #480]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a77      	ldr	r2, [pc, #476]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80091b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d013      	beq.n	80091ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c4:	f7fb fc68 	bl	8004a98 <HAL_GetTick>
 80091c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091ca:	e008      	b.n	80091de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091cc:	f7fb fc64 	bl	8004a98 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b64      	cmp	r3, #100	; 0x64
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e352      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091de:	4b6d      	ldr	r3, [pc, #436]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0f0      	beq.n	80091cc <HAL_RCC_OscConfig+0xe4>
 80091ea:	e014      	b.n	8009216 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ec:	f7fb fc54 	bl	8004a98 <HAL_GetTick>
 80091f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80091f2:	e008      	b.n	8009206 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091f4:	f7fb fc50 	bl	8004a98 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b64      	cmp	r3, #100	; 0x64
 8009200:	d901      	bls.n	8009206 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e33e      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009206:	4b63      	ldr	r3, [pc, #396]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1f0      	bne.n	80091f4 <HAL_RCC_OscConfig+0x10c>
 8009212:	e000      	b.n	8009216 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 8092 	beq.w	8009348 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009224:	4b5b      	ldr	r3, [pc, #364]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800922c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800922e:	4b59      	ldr	r3, [pc, #356]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <HAL_RCC_OscConfig+0x162>
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	2b18      	cmp	r3, #24
 800923e:	d12d      	bne.n	800929c <HAL_RCC_OscConfig+0x1b4>
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d128      	bne.n	800929c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800924a:	4b52      	ldr	r3, [pc, #328]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0304 	and.w	r3, r3, #4
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <HAL_RCC_OscConfig+0x17a>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e310      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009262:	f7fb fc47 	bl	8004af4 <HAL_GetREVID>
 8009266:	4602      	mov	r2, r0
 8009268:	f241 0303 	movw	r3, #4099	; 0x1003
 800926c:	429a      	cmp	r2, r3
 800926e:	d80a      	bhi.n	8009286 <HAL_RCC_OscConfig+0x19e>
 8009270:	4b48      	ldr	r3, [pc, #288]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	031b      	lsls	r3, r3, #12
 800927e:	4945      	ldr	r1, [pc, #276]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009280:	4313      	orrs	r3, r2
 8009282:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009284:	e060      	b.n	8009348 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009286:	4b43      	ldr	r3, [pc, #268]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	061b      	lsls	r3, r3, #24
 8009294:	493f      	ldr	r1, [pc, #252]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009296:	4313      	orrs	r3, r2
 8009298:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800929a:	e055      	b.n	8009348 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d038      	beq.n	8009316 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80092a4:	4b3b      	ldr	r3, [pc, #236]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f023 0219 	bic.w	r2, r3, #25
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	4938      	ldr	r1, [pc, #224]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b6:	f7fb fbef 	bl	8004a98 <HAL_GetTick>
 80092ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092bc:	e008      	b.n	80092d0 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092be:	f7fb fbeb 	bl	8004a98 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e2d9      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092d0:	4b30      	ldr	r3, [pc, #192]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0304 	and.w	r3, r3, #4
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0f0      	beq.n	80092be <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092dc:	f7fb fc0a 	bl	8004af4 <HAL_GetREVID>
 80092e0:	4602      	mov	r2, r0
 80092e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d80a      	bhi.n	8009300 <HAL_RCC_OscConfig+0x218>
 80092ea:	4b2a      	ldr	r3, [pc, #168]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	031b      	lsls	r3, r3, #12
 80092f8:	4926      	ldr	r1, [pc, #152]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	604b      	str	r3, [r1, #4]
 80092fe:	e023      	b.n	8009348 <HAL_RCC_OscConfig+0x260>
 8009300:	4b24      	ldr	r3, [pc, #144]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	061b      	lsls	r3, r3, #24
 800930e:	4921      	ldr	r1, [pc, #132]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009310:	4313      	orrs	r3, r2
 8009312:	604b      	str	r3, [r1, #4]
 8009314:	e018      	b.n	8009348 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a1e      	ldr	r2, [pc, #120]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 800931c:	f023 0301 	bic.w	r3, r3, #1
 8009320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009322:	f7fb fbb9 	bl	8004a98 <HAL_GetTick>
 8009326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009328:	e008      	b.n	800933c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800932a:	f7fb fbb5 	bl	8004a98 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d901      	bls.n	800933c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e2a3      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800933c:	4b15      	ldr	r3, [pc, #84]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0304 	and.w	r3, r3, #4
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1f0      	bne.n	800932a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0310 	and.w	r3, r3, #16
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 8091 	beq.w	8009478 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009356:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800935e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009360:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	2b08      	cmp	r3, #8
 800936a:	d007      	beq.n	800937c <HAL_RCC_OscConfig+0x294>
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	2b18      	cmp	r3, #24
 8009370:	d12f      	bne.n	80093d2 <HAL_RCC_OscConfig+0x2ea>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	2b01      	cmp	r3, #1
 800937a:	d12a      	bne.n	80093d2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <HAL_RCC_OscConfig+0x2ac>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <HAL_RCC_OscConfig+0x2b0>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	2b80      	cmp	r3, #128	; 0x80
 800938e:	d003      	beq.n	8009398 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e277      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
 8009394:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009398:	f7fb fbac 	bl	8004af4 <HAL_GetREVID>
 800939c:	4602      	mov	r2, r0
 800939e:	f241 0303 	movw	r3, #4099	; 0x1003
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d80a      	bhi.n	80093bc <HAL_RCC_OscConfig+0x2d4>
 80093a6:	4ba2      	ldr	r3, [pc, #648]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	069b      	lsls	r3, r3, #26
 80093b4:	499e      	ldr	r1, [pc, #632]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80093ba:	e05d      	b.n	8009478 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80093bc:	4b9c      	ldr	r3, [pc, #624]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	4999      	ldr	r1, [pc, #612]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80093d0:	e052      	b.n	8009478 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d035      	beq.n	8009446 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80093da:	4b95      	ldr	r3, [pc, #596]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a94      	ldr	r2, [pc, #592]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80093e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e6:	f7fb fb57 	bl	8004a98 <HAL_GetTick>
 80093ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093ec:	e008      	b.n	8009400 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80093ee:	f7fb fb53 	bl	8004a98 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d901      	bls.n	8009400 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e241      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009400:	4b8b      	ldr	r3, [pc, #556]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0f0      	beq.n	80093ee <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800940c:	f7fb fb72 	bl	8004af4 <HAL_GetREVID>
 8009410:	4602      	mov	r2, r0
 8009412:	f241 0303 	movw	r3, #4099	; 0x1003
 8009416:	429a      	cmp	r2, r3
 8009418:	d80a      	bhi.n	8009430 <HAL_RCC_OscConfig+0x348>
 800941a:	4b85      	ldr	r3, [pc, #532]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	069b      	lsls	r3, r3, #26
 8009428:	4981      	ldr	r1, [pc, #516]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800942a:	4313      	orrs	r3, r2
 800942c:	604b      	str	r3, [r1, #4]
 800942e:	e023      	b.n	8009478 <HAL_RCC_OscConfig+0x390>
 8009430:	4b7f      	ldr	r3, [pc, #508]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	061b      	lsls	r3, r3, #24
 800943e:	497c      	ldr	r1, [pc, #496]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009440:	4313      	orrs	r3, r2
 8009442:	60cb      	str	r3, [r1, #12]
 8009444:	e018      	b.n	8009478 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009446:	4b7a      	ldr	r3, [pc, #488]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a79      	ldr	r2, [pc, #484]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800944c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009452:	f7fb fb21 	bl	8004a98 <HAL_GetTick>
 8009456:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009458:	e008      	b.n	800946c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800945a:	f7fb fb1d 	bl	8004a98 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	2b02      	cmp	r3, #2
 8009466:	d901      	bls.n	800946c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e20b      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800946c:	4b70      	ldr	r3, [pc, #448]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1f0      	bne.n	800945a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0308 	and.w	r3, r3, #8
 8009480:	2b00      	cmp	r3, #0
 8009482:	d036      	beq.n	80094f2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d019      	beq.n	80094c0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800948c:	4b68      	ldr	r3, [pc, #416]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800948e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009490:	4a67      	ldr	r2, [pc, #412]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009492:	f043 0301 	orr.w	r3, r3, #1
 8009496:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009498:	f7fb fafe 	bl	8004a98 <HAL_GetTick>
 800949c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800949e:	e008      	b.n	80094b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094a0:	f7fb fafa 	bl	8004a98 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e1e8      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80094b2:	4b5f      	ldr	r3, [pc, #380]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80094b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0f0      	beq.n	80094a0 <HAL_RCC_OscConfig+0x3b8>
 80094be:	e018      	b.n	80094f2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094c0:	4b5b      	ldr	r3, [pc, #364]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80094c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094c4:	4a5a      	ldr	r2, [pc, #360]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80094c6:	f023 0301 	bic.w	r3, r3, #1
 80094ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094cc:	f7fb fae4 	bl	8004a98 <HAL_GetTick>
 80094d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80094d2:	e008      	b.n	80094e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094d4:	f7fb fae0 	bl	8004a98 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d901      	bls.n	80094e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e1ce      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80094e6:	4b52      	ldr	r3, [pc, #328]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80094e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1f0      	bne.n	80094d4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d036      	beq.n	800956c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d019      	beq.n	800953a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009506:	4b4a      	ldr	r3, [pc, #296]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a49      	ldr	r2, [pc, #292]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800950c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009510:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009512:	f7fb fac1 	bl	8004a98 <HAL_GetTick>
 8009516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009518:	e008      	b.n	800952c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800951a:	f7fb fabd 	bl	8004a98 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d901      	bls.n	800952c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e1ab      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800952c:	4b40      	ldr	r3, [pc, #256]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d0f0      	beq.n	800951a <HAL_RCC_OscConfig+0x432>
 8009538:	e018      	b.n	800956c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800953a:	4b3d      	ldr	r3, [pc, #244]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a3c      	ldr	r2, [pc, #240]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009544:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009546:	f7fb faa7 	bl	8004a98 <HAL_GetTick>
 800954a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800954c:	e008      	b.n	8009560 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800954e:	f7fb faa3 	bl	8004a98 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d901      	bls.n	8009560 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e191      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009560:	4b33      	ldr	r3, [pc, #204]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f0      	bne.n	800954e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8086 	beq.w	8009686 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800957a:	4b2e      	ldr	r3, [pc, #184]	; (8009634 <HAL_RCC_OscConfig+0x54c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a2d      	ldr	r2, [pc, #180]	; (8009634 <HAL_RCC_OscConfig+0x54c>)
 8009580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009586:	f7fb fa87 	bl	8004a98 <HAL_GetTick>
 800958a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800958c:	e008      	b.n	80095a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800958e:	f7fb fa83 	bl	8004a98 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b64      	cmp	r3, #100	; 0x64
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e171      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095a0:	4b24      	ldr	r3, [pc, #144]	; (8009634 <HAL_RCC_OscConfig+0x54c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d106      	bne.n	80095c2 <HAL_RCC_OscConfig+0x4da>
 80095b4:	4b1e      	ldr	r3, [pc, #120]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b8:	4a1d      	ldr	r2, [pc, #116]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095ba:	f043 0301 	orr.w	r3, r3, #1
 80095be:	6713      	str	r3, [r2, #112]	; 0x70
 80095c0:	e02d      	b.n	800961e <HAL_RCC_OscConfig+0x536>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10c      	bne.n	80095e4 <HAL_RCC_OscConfig+0x4fc>
 80095ca:	4b19      	ldr	r3, [pc, #100]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ce:	4a18      	ldr	r2, [pc, #96]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095d0:	f023 0301 	bic.w	r3, r3, #1
 80095d4:	6713      	str	r3, [r2, #112]	; 0x70
 80095d6:	4b16      	ldr	r3, [pc, #88]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095da:	4a15      	ldr	r2, [pc, #84]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095dc:	f023 0304 	bic.w	r3, r3, #4
 80095e0:	6713      	str	r3, [r2, #112]	; 0x70
 80095e2:	e01c      	b.n	800961e <HAL_RCC_OscConfig+0x536>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	2b05      	cmp	r3, #5
 80095ea:	d10c      	bne.n	8009606 <HAL_RCC_OscConfig+0x51e>
 80095ec:	4b10      	ldr	r3, [pc, #64]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f0:	4a0f      	ldr	r2, [pc, #60]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095f2:	f043 0304 	orr.w	r3, r3, #4
 80095f6:	6713      	str	r3, [r2, #112]	; 0x70
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fc:	4a0c      	ldr	r2, [pc, #48]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	6713      	str	r3, [r2, #112]	; 0x70
 8009604:	e00b      	b.n	800961e <HAL_RCC_OscConfig+0x536>
 8009606:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960a:	4a09      	ldr	r2, [pc, #36]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 800960c:	f023 0301 	bic.w	r3, r3, #1
 8009610:	6713      	str	r3, [r2, #112]	; 0x70
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009616:	4a06      	ldr	r2, [pc, #24]	; (8009630 <HAL_RCC_OscConfig+0x548>)
 8009618:	f023 0304 	bic.w	r3, r3, #4
 800961c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01a      	beq.n	800965c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009626:	f7fb fa37 	bl	8004a98 <HAL_GetTick>
 800962a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800962c:	e00f      	b.n	800964e <HAL_RCC_OscConfig+0x566>
 800962e:	bf00      	nop
 8009630:	58024400 	.word	0x58024400
 8009634:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009638:	f7fb fa2e 	bl	8004a98 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	f241 3288 	movw	r2, #5000	; 0x1388
 8009646:	4293      	cmp	r3, r2
 8009648:	d901      	bls.n	800964e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e11a      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800964e:	4b8f      	ldr	r3, [pc, #572]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009652:	f003 0302 	and.w	r3, r3, #2
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0ee      	beq.n	8009638 <HAL_RCC_OscConfig+0x550>
 800965a:	e014      	b.n	8009686 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800965c:	f7fb fa1c 	bl	8004a98 <HAL_GetTick>
 8009660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009662:	e00a      	b.n	800967a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009664:	f7fb fa18 	bl	8004a98 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009672:	4293      	cmp	r3, r2
 8009674:	d901      	bls.n	800967a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e104      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800967a:	4b84      	ldr	r3, [pc, #528]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 800967c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1ee      	bne.n	8009664 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 80f9 	beq.w	8009882 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009690:	4b7e      	ldr	r3, [pc, #504]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009698:	2b18      	cmp	r3, #24
 800969a:	f000 80b4 	beq.w	8009806 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	f040 8095 	bne.w	80097d2 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096a8:	4b78      	ldr	r3, [pc, #480]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a77      	ldr	r2, [pc, #476]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80096ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b4:	f7fb f9f0 	bl	8004a98 <HAL_GetTick>
 80096b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096ba:	e008      	b.n	80096ce <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096bc:	f7fb f9ec 	bl	8004a98 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d901      	bls.n	80096ce <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e0da      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096ce:	4b6f      	ldr	r3, [pc, #444]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f0      	bne.n	80096bc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096da:	4b6c      	ldr	r3, [pc, #432]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80096dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096de:	4b6c      	ldr	r3, [pc, #432]	; (8009890 <HAL_RCC_OscConfig+0x7a8>)
 80096e0:	4013      	ands	r3, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80096ea:	0112      	lsls	r2, r2, #4
 80096ec:	430a      	orrs	r2, r1
 80096ee:	4967      	ldr	r1, [pc, #412]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	628b      	str	r3, [r1, #40]	; 0x28
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	3b01      	subs	r3, #1
 80096fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009702:	3b01      	subs	r3, #1
 8009704:	025b      	lsls	r3, r3, #9
 8009706:	b29b      	uxth	r3, r3
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970e:	3b01      	subs	r3, #1
 8009710:	041b      	lsls	r3, r3, #16
 8009712:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009716:	431a      	orrs	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971c:	3b01      	subs	r3, #1
 800971e:	061b      	lsls	r3, r3, #24
 8009720:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009724:	4959      	ldr	r1, [pc, #356]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009726:	4313      	orrs	r3, r2
 8009728:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800972a:	4b58      	ldr	r3, [pc, #352]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	4a57      	ldr	r2, [pc, #348]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009730:	f023 0301 	bic.w	r3, r3, #1
 8009734:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009736:	4b55      	ldr	r3, [pc, #340]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800973a:	4b56      	ldr	r3, [pc, #344]	; (8009894 <HAL_RCC_OscConfig+0x7ac>)
 800973c:	4013      	ands	r3, r2
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009742:	00d2      	lsls	r2, r2, #3
 8009744:	4951      	ldr	r1, [pc, #324]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009746:	4313      	orrs	r3, r2
 8009748:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800974a:	4b50      	ldr	r3, [pc, #320]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 800974c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974e:	f023 020c 	bic.w	r2, r3, #12
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	494d      	ldr	r1, [pc, #308]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009758:	4313      	orrs	r3, r2
 800975a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800975c:	4b4b      	ldr	r3, [pc, #300]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	f023 0202 	bic.w	r2, r3, #2
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009768:	4948      	ldr	r1, [pc, #288]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 800976a:	4313      	orrs	r3, r2
 800976c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800976e:	4b47      	ldr	r3, [pc, #284]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009772:	4a46      	ldr	r2, [pc, #280]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009778:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977a:	4b44      	ldr	r3, [pc, #272]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	4a43      	ldr	r2, [pc, #268]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009784:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009786:	4b41      	ldr	r3, [pc, #260]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	4a40      	ldr	r2, [pc, #256]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 800978c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009792:	4b3e      	ldr	r3, [pc, #248]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	4a3d      	ldr	r2, [pc, #244]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009798:	f043 0301 	orr.w	r3, r3, #1
 800979c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800979e:	4b3b      	ldr	r3, [pc, #236]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a3a      	ldr	r2, [pc, #232]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80097a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097aa:	f7fb f975 	bl	8004a98 <HAL_GetTick>
 80097ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097b0:	e008      	b.n	80097c4 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097b2:	f7fb f971 	bl	8004a98 <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d901      	bls.n	80097c4 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e05f      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097c4:	4b31      	ldr	r3, [pc, #196]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0f0      	beq.n	80097b2 <HAL_RCC_OscConfig+0x6ca>
 80097d0:	e057      	b.n	8009882 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097d2:	4b2e      	ldr	r3, [pc, #184]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a2d      	ldr	r2, [pc, #180]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80097d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097de:	f7fb f95b 	bl	8004a98 <HAL_GetTick>
 80097e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097e4:	e008      	b.n	80097f8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097e6:	f7fb f957 	bl	8004a98 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e045      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097f8:	4b24      	ldr	r3, [pc, #144]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1f0      	bne.n	80097e6 <HAL_RCC_OscConfig+0x6fe>
 8009804:	e03d      	b.n	8009882 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009806:	4b21      	ldr	r3, [pc, #132]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 8009808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800980c:	4b1f      	ldr	r3, [pc, #124]	; (800988c <HAL_RCC_OscConfig+0x7a4>)
 800980e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009810:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	2b01      	cmp	r3, #1
 8009818:	d031      	beq.n	800987e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f003 0203 	and.w	r2, r3, #3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009824:	429a      	cmp	r2, r3
 8009826:	d12a      	bne.n	800987e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	091b      	lsrs	r3, r3, #4
 800982c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009834:	429a      	cmp	r2, r3
 8009836:	d122      	bne.n	800987e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009842:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009844:	429a      	cmp	r2, r3
 8009846:	d11a      	bne.n	800987e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	0a5b      	lsrs	r3, r3, #9
 800984c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009854:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009856:	429a      	cmp	r2, r3
 8009858:	d111      	bne.n	800987e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	0c1b      	lsrs	r3, r3, #16
 800985e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009868:	429a      	cmp	r2, r3
 800986a:	d108      	bne.n	800987e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	0e1b      	lsrs	r3, r3, #24
 8009870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009878:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800987a:	429a      	cmp	r2, r3
 800987c:	d001      	beq.n	8009882 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3730      	adds	r7, #48	; 0x30
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	58024400 	.word	0x58024400
 8009890:	fffffc0c 	.word	0xfffffc0c
 8009894:	ffff0007 	.word	0xffff0007

08009898 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e19c      	b.n	8009be6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098ac:	4b8a      	ldr	r3, [pc, #552]	; (8009ad8 <HAL_RCC_ClockConfig+0x240>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 030f 	and.w	r3, r3, #15
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d910      	bls.n	80098dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ba:	4b87      	ldr	r3, [pc, #540]	; (8009ad8 <HAL_RCC_ClockConfig+0x240>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f023 020f 	bic.w	r2, r3, #15
 80098c2:	4985      	ldr	r1, [pc, #532]	; (8009ad8 <HAL_RCC_ClockConfig+0x240>)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098ca:	4b83      	ldr	r3, [pc, #524]	; (8009ad8 <HAL_RCC_ClockConfig+0x240>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 030f 	and.w	r3, r3, #15
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d001      	beq.n	80098dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e184      	b.n	8009be6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d010      	beq.n	800990a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	4b7b      	ldr	r3, [pc, #492]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d908      	bls.n	800990a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098f8:	4b78      	ldr	r3, [pc, #480]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	4975      	ldr	r1, [pc, #468]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009906:	4313      	orrs	r3, r2
 8009908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0308 	and.w	r3, r3, #8
 8009912:	2b00      	cmp	r3, #0
 8009914:	d010      	beq.n	8009938 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695a      	ldr	r2, [r3, #20]
 800991a:	4b70      	ldr	r3, [pc, #448]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009922:	429a      	cmp	r2, r3
 8009924:	d908      	bls.n	8009938 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009926:	4b6d      	ldr	r3, [pc, #436]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	496a      	ldr	r1, [pc, #424]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009934:	4313      	orrs	r3, r2
 8009936:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	d010      	beq.n	8009966 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	4b64      	ldr	r3, [pc, #400]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009950:	429a      	cmp	r2, r3
 8009952:	d908      	bls.n	8009966 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009954:	4b61      	ldr	r3, [pc, #388]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	495e      	ldr	r1, [pc, #376]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009962:	4313      	orrs	r3, r2
 8009964:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d010      	beq.n	8009994 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69da      	ldr	r2, [r3, #28]
 8009976:	4b59      	ldr	r3, [pc, #356]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800997e:	429a      	cmp	r2, r3
 8009980:	d908      	bls.n	8009994 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009982:	4b56      	ldr	r3, [pc, #344]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	4953      	ldr	r1, [pc, #332]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009990:	4313      	orrs	r3, r2
 8009992:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d010      	beq.n	80099c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68da      	ldr	r2, [r3, #12]
 80099a4:	4b4d      	ldr	r3, [pc, #308]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	f003 030f 	and.w	r3, r3, #15
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d908      	bls.n	80099c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099b0:	4b4a      	ldr	r3, [pc, #296]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f023 020f 	bic.w	r2, r3, #15
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	4947      	ldr	r1, [pc, #284]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d055      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80099ce:	4b43      	ldr	r3, [pc, #268]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	4940      	ldr	r1, [pc, #256]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d107      	bne.n	80099f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099e8:	4b3c      	ldr	r3, [pc, #240]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d121      	bne.n	8009a38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e0f6      	b.n	8009be6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d107      	bne.n	8009a10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a00:	4b36      	ldr	r3, [pc, #216]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d115      	bne.n	8009a38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e0ea      	b.n	8009be6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d107      	bne.n	8009a28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a18:	4b30      	ldr	r3, [pc, #192]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e0de      	b.n	8009be6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a28:	4b2c      	ldr	r3, [pc, #176]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0d6      	b.n	8009be6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a38:	4b28      	ldr	r3, [pc, #160]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f023 0207 	bic.w	r2, r3, #7
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	4925      	ldr	r1, [pc, #148]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4a:	f7fb f825 	bl	8004a98 <HAL_GetTick>
 8009a4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a50:	e00a      	b.n	8009a68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a52:	f7fb f821 	bl	8004a98 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d901      	bls.n	8009a68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e0be      	b.n	8009be6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a68:	4b1c      	ldr	r3, [pc, #112]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d1eb      	bne.n	8009a52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d010      	beq.n	8009aa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	4b14      	ldr	r3, [pc, #80]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	f003 030f 	and.w	r3, r3, #15
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d208      	bcs.n	8009aa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a96:	4b11      	ldr	r3, [pc, #68]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	f023 020f 	bic.w	r2, r3, #15
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	490e      	ldr	r1, [pc, #56]	; (8009adc <HAL_RCC_ClockConfig+0x244>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009aa8:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <HAL_RCC_ClockConfig+0x240>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d214      	bcs.n	8009ae0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ab6:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <HAL_RCC_ClockConfig+0x240>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f023 020f 	bic.w	r2, r3, #15
 8009abe:	4906      	ldr	r1, [pc, #24]	; (8009ad8 <HAL_RCC_ClockConfig+0x240>)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ac6:	4b04      	ldr	r3, [pc, #16]	; (8009ad8 <HAL_RCC_ClockConfig+0x240>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 030f 	and.w	r3, r3, #15
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d005      	beq.n	8009ae0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e086      	b.n	8009be6 <HAL_RCC_ClockConfig+0x34e>
 8009ad8:	52002000 	.word	0x52002000
 8009adc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d010      	beq.n	8009b0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	691a      	ldr	r2, [r3, #16]
 8009af0:	4b3f      	ldr	r3, [pc, #252]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d208      	bcs.n	8009b0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009afc:	4b3c      	ldr	r3, [pc, #240]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	4939      	ldr	r1, [pc, #228]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 0308 	and.w	r3, r3, #8
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d010      	beq.n	8009b3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	695a      	ldr	r2, [r3, #20]
 8009b1e:	4b34      	ldr	r3, [pc, #208]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d208      	bcs.n	8009b3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b2a:	4b31      	ldr	r3, [pc, #196]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	492e      	ldr	r1, [pc, #184]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0310 	and.w	r3, r3, #16
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d010      	beq.n	8009b6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	4b28      	ldr	r3, [pc, #160]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d208      	bcs.n	8009b6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b58:	4b25      	ldr	r3, [pc, #148]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	4922      	ldr	r1, [pc, #136]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 0320 	and.w	r3, r3, #32
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d010      	beq.n	8009b98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	69da      	ldr	r2, [r3, #28]
 8009b7a:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d208      	bcs.n	8009b98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	4917      	ldr	r1, [pc, #92]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009b98:	f000 f834 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 8009b9c:	4601      	mov	r1, r0
 8009b9e:	4b14      	ldr	r3, [pc, #80]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	f003 030f 	and.w	r3, r3, #15
 8009ba8:	4a12      	ldr	r2, [pc, #72]	; (8009bf4 <HAL_RCC_ClockConfig+0x35c>)
 8009baa:	5cd3      	ldrb	r3, [r2, r3]
 8009bac:	f003 031f 	and.w	r3, r3, #31
 8009bb0:	fa21 f303 	lsr.w	r3, r1, r3
 8009bb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009bb6:	4b0e      	ldr	r3, [pc, #56]	; (8009bf0 <HAL_RCC_ClockConfig+0x358>)
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	f003 030f 	and.w	r3, r3, #15
 8009bbe:	4a0d      	ldr	r2, [pc, #52]	; (8009bf4 <HAL_RCC_ClockConfig+0x35c>)
 8009bc0:	5cd3      	ldrb	r3, [r2, r3]
 8009bc2:	f003 031f 	and.w	r3, r3, #31
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bcc:	4a0a      	ldr	r2, [pc, #40]	; (8009bf8 <HAL_RCC_ClockConfig+0x360>)
 8009bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bd0:	4a0a      	ldr	r2, [pc, #40]	; (8009bfc <HAL_RCC_ClockConfig+0x364>)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <HAL_RCC_ClockConfig+0x368>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fa ff12 	bl	8004a04 <HAL_InitTick>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	58024400 	.word	0x58024400
 8009bf4:	0801166c 	.word	0x0801166c
 8009bf8:	240000fc 	.word	0x240000fc
 8009bfc:	240000f8 	.word	0x240000f8
 8009c00:	24000100 	.word	0x24000100

08009c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b089      	sub	sp, #36	; 0x24
 8009c08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c0a:	4baf      	ldr	r3, [pc, #700]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c12:	2b18      	cmp	r3, #24
 8009c14:	f200 814e 	bhi.w	8009eb4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8009c18:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1e:	bf00      	nop
 8009c20:	08009c85 	.word	0x08009c85
 8009c24:	08009eb5 	.word	0x08009eb5
 8009c28:	08009eb5 	.word	0x08009eb5
 8009c2c:	08009eb5 	.word	0x08009eb5
 8009c30:	08009eb5 	.word	0x08009eb5
 8009c34:	08009eb5 	.word	0x08009eb5
 8009c38:	08009eb5 	.word	0x08009eb5
 8009c3c:	08009eb5 	.word	0x08009eb5
 8009c40:	08009cab 	.word	0x08009cab
 8009c44:	08009eb5 	.word	0x08009eb5
 8009c48:	08009eb5 	.word	0x08009eb5
 8009c4c:	08009eb5 	.word	0x08009eb5
 8009c50:	08009eb5 	.word	0x08009eb5
 8009c54:	08009eb5 	.word	0x08009eb5
 8009c58:	08009eb5 	.word	0x08009eb5
 8009c5c:	08009eb5 	.word	0x08009eb5
 8009c60:	08009cb1 	.word	0x08009cb1
 8009c64:	08009eb5 	.word	0x08009eb5
 8009c68:	08009eb5 	.word	0x08009eb5
 8009c6c:	08009eb5 	.word	0x08009eb5
 8009c70:	08009eb5 	.word	0x08009eb5
 8009c74:	08009eb5 	.word	0x08009eb5
 8009c78:	08009eb5 	.word	0x08009eb5
 8009c7c:	08009eb5 	.word	0x08009eb5
 8009c80:	08009cb7 	.word	0x08009cb7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c84:	4b90      	ldr	r3, [pc, #576]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0320 	and.w	r3, r3, #32
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c90:	4b8d      	ldr	r3, [pc, #564]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	08db      	lsrs	r3, r3, #3
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	4a8c      	ldr	r2, [pc, #560]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009ca2:	e10a      	b.n	8009eba <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ca4:	4b89      	ldr	r3, [pc, #548]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009ca6:	61bb      	str	r3, [r7, #24]
    break;
 8009ca8:	e107      	b.n	8009eba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009caa:	4b89      	ldr	r3, [pc, #548]	; (8009ed0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009cac:	61bb      	str	r3, [r7, #24]
    break;
 8009cae:	e104      	b.n	8009eba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009cb0:	4b88      	ldr	r3, [pc, #544]	; (8009ed4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8009cb2:	61bb      	str	r3, [r7, #24]
    break;
 8009cb4:	e101      	b.n	8009eba <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cb6:	4b84      	ldr	r3, [pc, #528]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cba:	f003 0303 	and.w	r3, r3, #3
 8009cbe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009cc0:	4b81      	ldr	r3, [pc, #516]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc4:	091b      	lsrs	r3, r3, #4
 8009cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009ccc:	4b7e      	ldr	r3, [pc, #504]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009cd6:	4b7c      	ldr	r3, [pc, #496]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cda:	08db      	lsrs	r3, r3, #3
 8009cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	fb02 f303 	mul.w	r3, r2, r3
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 80da 	beq.w	8009eae <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d05a      	beq.n	8009db6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d302      	bcc.n	8009d0a <HAL_RCC_GetSysClockFreq+0x106>
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d078      	beq.n	8009dfa <HAL_RCC_GetSysClockFreq+0x1f6>
 8009d08:	e099      	b.n	8009e3e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d0a:	4b6f      	ldr	r3, [pc, #444]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0320 	and.w	r3, r3, #32
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d02d      	beq.n	8009d72 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d16:	4b6c      	ldr	r3, [pc, #432]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	08db      	lsrs	r3, r3, #3
 8009d1c:	f003 0303 	and.w	r3, r3, #3
 8009d20:	4a6a      	ldr	r2, [pc, #424]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009d22:	fa22 f303 	lsr.w	r3, r2, r3
 8009d26:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d40:	4b61      	ldr	r3, [pc, #388]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d48:	ee07 3a90 	vmov	s15, r3
 8009d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d50:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d54:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009d70:	e087      	b.n	8009e82 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	ee07 3a90 	vmov	s15, r3
 8009d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8009edc <HAL_RCC_GetSysClockFreq+0x2d8>
 8009d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d84:	4b50      	ldr	r3, [pc, #320]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8c:	ee07 3a90 	vmov	s15, r3
 8009d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d94:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d98:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009db4:	e065      	b.n	8009e82 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8009ee0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8009dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc8:	4b3f      	ldr	r3, [pc, #252]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd0:	ee07 3a90 	vmov	s15, r3
 8009dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ddc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df8:	e043      	b.n	8009e82 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	ee07 3a90 	vmov	s15, r3
 8009e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e04:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009ee4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8009e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0c:	4b2e      	ldr	r3, [pc, #184]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e14:	ee07 3a90 	vmov	s15, r3
 8009e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e20:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e3c:	e021      	b.n	8009e82 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	ee07 3a90 	vmov	s15, r3
 8009e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e48:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009ee0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8009e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e50:	4b1d      	ldr	r3, [pc, #116]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e58:	ee07 3a90 	vmov	s15, r3
 8009e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e60:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e64:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009ed8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e80:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009e82:	4b11      	ldr	r3, [pc, #68]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e86:	0a5b      	lsrs	r3, r3, #9
 8009e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ea6:	ee17 3a90 	vmov	r3, s15
 8009eaa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009eac:	e005      	b.n	8009eba <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61bb      	str	r3, [r7, #24]
    break;
 8009eb2:	e002      	b.n	8009eba <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8009eb4:	4b06      	ldr	r3, [pc, #24]	; (8009ed0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009eb6:	61bb      	str	r3, [r7, #24]
    break;
 8009eb8:	bf00      	nop
  }

  return sysclockfreq;
 8009eba:	69bb      	ldr	r3, [r7, #24]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3724      	adds	r7, #36	; 0x24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	58024400 	.word	0x58024400
 8009ecc:	03d09000 	.word	0x03d09000
 8009ed0:	003d0900 	.word	0x003d0900
 8009ed4:	017d7840 	.word	0x017d7840
 8009ed8:	46000000 	.word	0x46000000
 8009edc:	4c742400 	.word	0x4c742400
 8009ee0:	4a742400 	.word	0x4a742400
 8009ee4:	4bbebc20 	.word	0x4bbebc20

08009ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009eee:	f7ff fe89 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	0a1b      	lsrs	r3, r3, #8
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	4a0f      	ldr	r2, [pc, #60]	; (8009f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8009f00:	5cd3      	ldrb	r3, [r2, r3]
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	fa21 f303 	lsr.w	r3, r1, r3
 8009f0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	f003 030f 	and.w	r3, r3, #15
 8009f14:	4a09      	ldr	r2, [pc, #36]	; (8009f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8009f16:	5cd3      	ldrb	r3, [r2, r3]
 8009f18:	f003 031f 	and.w	r3, r3, #31
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f22:	4a07      	ldr	r2, [pc, #28]	; (8009f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8009f24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f26:	4a07      	ldr	r2, [pc, #28]	; (8009f44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	0801166c 	.word	0x0801166c
 8009f40:	240000fc 	.word	0x240000fc
 8009f44:	240000f8 	.word	0x240000f8

08009f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009f4c:	f7ff ffcc 	bl	8009ee8 <HAL_RCC_GetHCLKFreq>
 8009f50:	4601      	mov	r1, r0
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	091b      	lsrs	r3, r3, #4
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	4a04      	ldr	r2, [pc, #16]	; (8009f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f5e:	5cd3      	ldrb	r3, [r2, r3]
 8009f60:	f003 031f 	and.w	r3, r3, #31
 8009f64:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	0801166c 	.word	0x0801166c

08009f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009f78:	f7ff ffb6 	bl	8009ee8 <HAL_RCC_GetHCLKFreq>
 8009f7c:	4601      	mov	r1, r0
 8009f7e:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	0a1b      	lsrs	r3, r3, #8
 8009f84:	f003 0307 	and.w	r3, r3, #7
 8009f88:	4a04      	ldr	r2, [pc, #16]	; (8009f9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f8a:	5cd3      	ldrb	r3, [r2, r3]
 8009f8c:	f003 031f 	and.w	r3, r3, #31
 8009f90:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	58024400 	.word	0x58024400
 8009f9c:	0801166c 	.word	0x0801166c

08009fa0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009fa8:	2300      	movs	r3, #0
 8009faa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009fac:	2300      	movs	r3, #0
 8009fae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d03d      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fc4:	d013      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fca:	d802      	bhi.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d007      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009fd0:	e01f      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fd6:	d013      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009fd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fdc:	d01c      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009fde:	e018      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe0:	4baf      	ldr	r3, [pc, #700]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	4aae      	ldr	r2, [pc, #696]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009fec:	e015      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 fd23 	bl	800ba40 <RCCEx_PLL2_Config>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ffe:	e00c      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3324      	adds	r3, #36	; 0x24
 800a004:	2102      	movs	r1, #2
 800a006:	4618      	mov	r0, r3
 800a008:	f001 fdcc 	bl	800bba4 <RCCEx_PLL3_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a010:	e003      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	75fb      	strb	r3, [r7, #23]
      break;
 800a016:	e000      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800a018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d109      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a020:	4b9f      	ldr	r3, [pc, #636]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a024:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a02c:	499c      	ldr	r1, [pc, #624]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	650b      	str	r3, [r1, #80]	; 0x50
 800a032:	e001      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a040:	2b00      	cmp	r3, #0
 800a042:	d03d      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d826      	bhi.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a04c:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a052:	bf00      	nop
 800a054:	0800a069 	.word	0x0800a069
 800a058:	0800a077 	.word	0x0800a077
 800a05c:	0800a089 	.word	0x0800a089
 800a060:	0800a0a1 	.word	0x0800a0a1
 800a064:	0800a0a1 	.word	0x0800a0a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a068:	4b8d      	ldr	r3, [pc, #564]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	4a8c      	ldr	r2, [pc, #560]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a074:	e015      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3304      	adds	r3, #4
 800a07a:	2100      	movs	r1, #0
 800a07c:	4618      	mov	r0, r3
 800a07e:	f001 fcdf 	bl	800ba40 <RCCEx_PLL2_Config>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a086:	e00c      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3324      	adds	r3, #36	; 0x24
 800a08c:	2100      	movs	r1, #0
 800a08e:	4618      	mov	r0, r3
 800a090:	f001 fd88 	bl	800bba4 <RCCEx_PLL3_Config>
 800a094:	4603      	mov	r3, r0
 800a096:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a098:	e003      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	75fb      	strb	r3, [r7, #23]
      break;
 800a09e:	e000      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800a0a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d109      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0a8:	4b7d      	ldr	r3, [pc, #500]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	f023 0207 	bic.w	r2, r3, #7
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b4:	497a      	ldr	r1, [pc, #488]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	650b      	str	r3, [r1, #80]	; 0x50
 800a0ba:	e001      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d03e      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d0:	2b80      	cmp	r3, #128	; 0x80
 800a0d2:	d01c      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a0d4:	2b80      	cmp	r3, #128	; 0x80
 800a0d6:	d804      	bhi.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d008      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	d00d      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a0e0:	e01e      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a0e2:	2bc0      	cmp	r3, #192	; 0xc0
 800a0e4:	d01f      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ea:	d01e      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a0ec:	e018      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ee:	4b6c      	ldr	r3, [pc, #432]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	4a6b      	ldr	r2, [pc, #428]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a0f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a0fa:	e017      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3304      	adds	r3, #4
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f001 fc9c 	bl	800ba40 <RCCEx_PLL2_Config>
 800a108:	4603      	mov	r3, r0
 800a10a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a10c:	e00e      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3324      	adds	r3, #36	; 0x24
 800a112:	2100      	movs	r1, #0
 800a114:	4618      	mov	r0, r3
 800a116:	f001 fd45 	bl	800bba4 <RCCEx_PLL3_Config>
 800a11a:	4603      	mov	r3, r0
 800a11c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a11e:	e005      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	75fb      	strb	r3, [r7, #23]
      break;
 800a124:	e002      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a126:	bf00      	nop
 800a128:	e000      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a12a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a12c:	7dfb      	ldrb	r3, [r7, #23]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a132:	4b5b      	ldr	r3, [pc, #364]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a136:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13e:	4958      	ldr	r1, [pc, #352]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a140:	4313      	orrs	r3, r2
 800a142:	650b      	str	r3, [r1, #80]	; 0x50
 800a144:	e001      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a152:	2b00      	cmp	r3, #0
 800a154:	d044      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a15c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a160:	d01f      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a166:	d805      	bhi.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00a      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a16c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a170:	d00e      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a172:	e01f      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800a174:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a178:	d01f      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a17a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a17e:	d01e      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a180:	e018      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a182:	4b47      	ldr	r3, [pc, #284]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a186:	4a46      	ldr	r2, [pc, #280]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a18c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a18e:	e017      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3304      	adds	r3, #4
 800a194:	2100      	movs	r1, #0
 800a196:	4618      	mov	r0, r3
 800a198:	f001 fc52 	bl	800ba40 <RCCEx_PLL2_Config>
 800a19c:	4603      	mov	r3, r0
 800a19e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a1a0:	e00e      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3324      	adds	r3, #36	; 0x24
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 fcfb 	bl	800bba4 <RCCEx_PLL3_Config>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1b2:	e005      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b8:	e002      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a1ba:	bf00      	nop
 800a1bc:	e000      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a1be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10a      	bne.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a1c6:	4b36      	ldr	r3, [pc, #216]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a1c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ca:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1d4:	4932      	ldr	r1, [pc, #200]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	658b      	str	r3, [r1, #88]	; 0x58
 800a1da:	e001      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d044      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a1f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1f6:	d01f      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a1f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1fc:	d805      	bhi.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00a      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800a202:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a206:	d00e      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a208:	e01f      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800a20a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a20e:	d01f      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a214:	d01e      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a216:	e018      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a218:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21c:	4a20      	ldr	r2, [pc, #128]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a21e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a222:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a224:	e017      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3304      	adds	r3, #4
 800a22a:	2100      	movs	r1, #0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f001 fc07 	bl	800ba40 <RCCEx_PLL2_Config>
 800a232:	4603      	mov	r3, r0
 800a234:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a236:	e00e      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3324      	adds	r3, #36	; 0x24
 800a23c:	2100      	movs	r1, #0
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fcb0 	bl	800bba4 <RCCEx_PLL3_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a248:	e005      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	75fb      	strb	r3, [r7, #23]
      break;
 800a24e:	e002      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a250:	bf00      	nop
 800a252:	e000      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a254:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a260:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a26a:	490d      	ldr	r1, [pc, #52]	; (800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a26c:	4313      	orrs	r3, r2
 800a26e:	658b      	str	r3, [r1, #88]	; 0x58
 800a270:	e001      	b.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d035      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a286:	2b10      	cmp	r3, #16
 800a288:	d00c      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800a28a:	2b10      	cmp	r3, #16
 800a28c:	d802      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d01b      	beq.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a292:	e017      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a294:	2b20      	cmp	r3, #32
 800a296:	d00c      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a298:	2b30      	cmp	r3, #48	; 0x30
 800a29a:	d018      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800a29c:	e012      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a29e:	bf00      	nop
 800a2a0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a4:	4baf      	ldr	r3, [pc, #700]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a8:	4aae      	ldr	r2, [pc, #696]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a2b0:	e00e      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	2102      	movs	r1, #2
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f001 fbc1 	bl	800ba40 <RCCEx_PLL2_Config>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a2c2:	e005      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c8:	e002      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a2ca:	bf00      	nop
 800a2cc:	e000      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a2ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d109      	bne.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a2d6:	4ba3      	ldr	r3, [pc, #652]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2e2:	49a0      	ldr	r1, [pc, #640]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a2e8:	e001      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ea:	7dfb      	ldrb	r3, [r7, #23]
 800a2ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d042      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a302:	d01f      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800a304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a308:	d805      	bhi.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800a30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a312:	d00e      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800a314:	e01f      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a316:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a31a:	d01f      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a31c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a320:	d01e      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a322:	e018      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a324:	4b8f      	ldr	r3, [pc, #572]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	4a8e      	ldr	r2, [pc, #568]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a32a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a32e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a330:	e017      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	3304      	adds	r3, #4
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f001 fb81 	bl	800ba40 <RCCEx_PLL2_Config>
 800a33e:	4603      	mov	r3, r0
 800a340:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a342:	e00e      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3324      	adds	r3, #36	; 0x24
 800a348:	2100      	movs	r1, #0
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 fc2a 	bl	800bba4 <RCCEx_PLL3_Config>
 800a350:	4603      	mov	r3, r0
 800a352:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a354:	e005      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	75fb      	strb	r3, [r7, #23]
      break;
 800a35a:	e002      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800a35c:	bf00      	nop
 800a35e:	e000      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800a360:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d109      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a368:	4b7e      	ldr	r3, [pc, #504]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a374:	497b      	ldr	r1, [pc, #492]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a376:	4313      	orrs	r3, r2
 800a378:	650b      	str	r3, [r1, #80]	; 0x50
 800a37a:	e001      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d042      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a394:	d01b      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a39a:	d805      	bhi.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d022      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800a3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a4:	d00a      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a3a6:	e01b      	b.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800a3a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3ac:	d01d      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800a3ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3b2:	d01c      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800a3b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a3b8:	d01b      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800a3ba:	e011      	b.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f001 fb3c 	bl	800ba40 <RCCEx_PLL2_Config>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a3cc:	e012      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3324      	adds	r3, #36	; 0x24
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f001 fbe5 	bl	800bba4 <RCCEx_PLL3_Config>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a3de:	e009      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3e4:	e006      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800a3e6:	bf00      	nop
 800a3e8:	e004      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800a3ea:	bf00      	nop
 800a3ec:	e002      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800a3ee:	bf00      	nop
 800a3f0:	e000      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800a3f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d109      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3fa:	4b5a      	ldr	r3, [pc, #360]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3fe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a406:	4957      	ldr	r1, [pc, #348]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	650b      	str	r3, [r1, #80]	; 0x50
 800a40c:	e001      	b.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d044      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a428:	d01b      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800a42a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a42e:	d805      	bhi.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d022      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a438:	d00a      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800a43a:	e01b      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800a43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a440:	d01d      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a446:	d01c      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800a448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a44c:	d01b      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a44e:	e011      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3304      	adds	r3, #4
 800a454:	2101      	movs	r1, #1
 800a456:	4618      	mov	r0, r3
 800a458:	f001 faf2 	bl	800ba40 <RCCEx_PLL2_Config>
 800a45c:	4603      	mov	r3, r0
 800a45e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a460:	e012      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3324      	adds	r3, #36	; 0x24
 800a466:	2101      	movs	r1, #1
 800a468:	4618      	mov	r0, r3
 800a46a:	f001 fb9b 	bl	800bba4 <RCCEx_PLL3_Config>
 800a46e:	4603      	mov	r3, r0
 800a470:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a472:	e009      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	75fb      	strb	r3, [r7, #23]
      break;
 800a478:	e006      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800a47a:	bf00      	nop
 800a47c:	e004      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800a47e:	bf00      	nop
 800a480:	e002      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800a482:	bf00      	nop
 800a484:	e000      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800a486:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a48e:	4b35      	ldr	r3, [pc, #212]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a492:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a49c:	4931      	ldr	r1, [pc, #196]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	658b      	str	r3, [r1, #88]	; 0x58
 800a4a2:	e001      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d02d      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4bc:	d005      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a4be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4c2:	d009      	beq.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d013      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a4c8:	e00f      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4ca:	4b26      	ldr	r3, [pc, #152]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	4a25      	ldr	r2, [pc, #148]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a4d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a4d6:	e00c      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	2101      	movs	r1, #1
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f001 faae 	bl	800ba40 <RCCEx_PLL2_Config>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a4e8:	e003      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ee:	e000      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800a4f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d109      	bne.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4f8:	4b1a      	ldr	r3, [pc, #104]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a4fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a504:	4917      	ldr	r1, [pc, #92]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a506:	4313      	orrs	r3, r2
 800a508:	650b      	str	r3, [r1, #80]	; 0x50
 800a50a:	e001      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
 800a50e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d035      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a520:	2b03      	cmp	r3, #3
 800a522:	d81b      	bhi.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a524:	a201      	add	r2, pc, #4	; (adr r2, 800a52c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800a526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52a:	bf00      	nop
 800a52c:	0800a569 	.word	0x0800a569
 800a530:	0800a53d 	.word	0x0800a53d
 800a534:	0800a54b 	.word	0x0800a54b
 800a538:	0800a569 	.word	0x0800a569
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53c:	4b09      	ldr	r3, [pc, #36]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	4a08      	ldr	r2, [pc, #32]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a548:	e00f      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3304      	adds	r3, #4
 800a54e:	2102      	movs	r1, #2
 800a550:	4618      	mov	r0, r3
 800a552:	f001 fa75 	bl	800ba40 <RCCEx_PLL2_Config>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a55a:	e006      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
      break;
 800a560:	e003      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800a562:	bf00      	nop
 800a564:	58024400 	.word	0x58024400
      break;
 800a568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d109      	bne.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a570:	4bba      	ldr	r3, [pc, #744]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a574:	f023 0203 	bic.w	r2, r3, #3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57c:	49b7      	ldr	r1, [pc, #732]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a582:	e001      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a584:	7dfb      	ldrb	r3, [r7, #23]
 800a586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8086 	beq.w	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a596:	4bb2      	ldr	r3, [pc, #712]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4ab1      	ldr	r2, [pc, #708]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a59c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5a2:	f7fa fa79 	bl	8004a98 <HAL_GetTick>
 800a5a6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5a8:	e009      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5aa:	f7fa fa75 	bl	8004a98 <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	2b64      	cmp	r3, #100	; 0x64
 800a5b6:	d902      	bls.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	75fb      	strb	r3, [r7, #23]
        break;
 800a5bc:	e005      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5be:	4ba8      	ldr	r3, [pc, #672]	; (800a860 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0ef      	beq.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d166      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a5d0:	4ba2      	ldr	r3, [pc, #648]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a5d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a5da:	4053      	eors	r3, r2
 800a5dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d013      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5e4:	4b9d      	ldr	r3, [pc, #628]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ec:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5ee:	4b9b      	ldr	r3, [pc, #620]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f2:	4a9a      	ldr	r2, [pc, #616]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a5f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5fa:	4b98      	ldr	r3, [pc, #608]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fe:	4a97      	ldr	r2, [pc, #604]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a604:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a606:	4a95      	ldr	r2, [pc, #596]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a616:	d115      	bne.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a618:	f7fa fa3e 	bl	8004a98 <HAL_GetTick>
 800a61c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a61e:	e00b      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a620:	f7fa fa3a 	bl	8004a98 <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a62e:	4293      	cmp	r3, r2
 800a630:	d902      	bls.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	75fb      	strb	r3, [r7, #23]
            break;
 800a636:	e005      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a638:	4b88      	ldr	r3, [pc, #544]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0ed      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d126      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a658:	d10d      	bne.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800a65a:	4b80      	ldr	r3, [pc, #512]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a668:	0919      	lsrs	r1, r3, #4
 800a66a:	4b7e      	ldr	r3, [pc, #504]	; (800a864 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a66c:	400b      	ands	r3, r1
 800a66e:	497b      	ldr	r1, [pc, #492]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a670:	4313      	orrs	r3, r2
 800a672:	610b      	str	r3, [r1, #16]
 800a674:	e005      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800a676:	4b79      	ldr	r3, [pc, #484]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	4a78      	ldr	r2, [pc, #480]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a67c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a680:	6113      	str	r3, [r2, #16]
 800a682:	4b76      	ldr	r3, [pc, #472]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a68c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a690:	4972      	ldr	r1, [pc, #456]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a692:	4313      	orrs	r3, r2
 800a694:	670b      	str	r3, [r1, #112]	; 0x70
 800a696:	e004      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	75bb      	strb	r3, [r7, #22]
 800a69c:	e001      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d07d      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6b2:	2b28      	cmp	r3, #40	; 0x28
 800a6b4:	d866      	bhi.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a78b 	.word	0x0800a78b
 800a6c0:	0800a785 	.word	0x0800a785
 800a6c4:	0800a785 	.word	0x0800a785
 800a6c8:	0800a785 	.word	0x0800a785
 800a6cc:	0800a785 	.word	0x0800a785
 800a6d0:	0800a785 	.word	0x0800a785
 800a6d4:	0800a785 	.word	0x0800a785
 800a6d8:	0800a785 	.word	0x0800a785
 800a6dc:	0800a761 	.word	0x0800a761
 800a6e0:	0800a785 	.word	0x0800a785
 800a6e4:	0800a785 	.word	0x0800a785
 800a6e8:	0800a785 	.word	0x0800a785
 800a6ec:	0800a785 	.word	0x0800a785
 800a6f0:	0800a785 	.word	0x0800a785
 800a6f4:	0800a785 	.word	0x0800a785
 800a6f8:	0800a785 	.word	0x0800a785
 800a6fc:	0800a773 	.word	0x0800a773
 800a700:	0800a785 	.word	0x0800a785
 800a704:	0800a785 	.word	0x0800a785
 800a708:	0800a785 	.word	0x0800a785
 800a70c:	0800a785 	.word	0x0800a785
 800a710:	0800a785 	.word	0x0800a785
 800a714:	0800a785 	.word	0x0800a785
 800a718:	0800a785 	.word	0x0800a785
 800a71c:	0800a78b 	.word	0x0800a78b
 800a720:	0800a785 	.word	0x0800a785
 800a724:	0800a785 	.word	0x0800a785
 800a728:	0800a785 	.word	0x0800a785
 800a72c:	0800a785 	.word	0x0800a785
 800a730:	0800a785 	.word	0x0800a785
 800a734:	0800a785 	.word	0x0800a785
 800a738:	0800a785 	.word	0x0800a785
 800a73c:	0800a78b 	.word	0x0800a78b
 800a740:	0800a785 	.word	0x0800a785
 800a744:	0800a785 	.word	0x0800a785
 800a748:	0800a785 	.word	0x0800a785
 800a74c:	0800a785 	.word	0x0800a785
 800a750:	0800a785 	.word	0x0800a785
 800a754:	0800a785 	.word	0x0800a785
 800a758:	0800a785 	.word	0x0800a785
 800a75c:	0800a78b 	.word	0x0800a78b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3304      	adds	r3, #4
 800a764:	2101      	movs	r1, #1
 800a766:	4618      	mov	r0, r3
 800a768:	f001 f96a 	bl	800ba40 <RCCEx_PLL2_Config>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a770:	e00c      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3324      	adds	r3, #36	; 0x24
 800a776:	2101      	movs	r1, #1
 800a778:	4618      	mov	r0, r3
 800a77a:	f001 fa13 	bl	800bba4 <RCCEx_PLL3_Config>
 800a77e:	4603      	mov	r3, r0
 800a780:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a782:	e003      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	75fb      	strb	r3, [r7, #23]
      break;
 800a788:	e000      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800a78a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d109      	bne.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a792:	4b32      	ldr	r3, [pc, #200]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a796:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a79e:	492f      	ldr	r1, [pc, #188]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	654b      	str	r3, [r1, #84]	; 0x54
 800a7a4:	e001      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d037      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d820      	bhi.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800a7be:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a807 	.word	0x0800a807
 800a7c8:	0800a7dd 	.word	0x0800a7dd
 800a7cc:	0800a7ef 	.word	0x0800a7ef
 800a7d0:	0800a807 	.word	0x0800a807
 800a7d4:	0800a807 	.word	0x0800a807
 800a7d8:	0800a807 	.word	0x0800a807
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 f92c 	bl	800ba40 <RCCEx_PLL2_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a7ec:	e00c      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3324      	adds	r3, #36	; 0x24
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 f9d5 	bl	800bba4 <RCCEx_PLL3_Config>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a7fe:	e003      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	75fb      	strb	r3, [r7, #23]
      break;
 800a804:	e000      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800a806:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a812:	f023 0207 	bic.w	r2, r3, #7
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81a:	4910      	ldr	r1, [pc, #64]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	654b      	str	r3, [r1, #84]	; 0x54
 800a820:	e001      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d040      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a838:	2b05      	cmp	r3, #5
 800a83a:	d827      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800a83c:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800a83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a842:	bf00      	nop
 800a844:	0800a893 	.word	0x0800a893
 800a848:	0800a869 	.word	0x0800a869
 800a84c:	0800a87b 	.word	0x0800a87b
 800a850:	0800a893 	.word	0x0800a893
 800a854:	0800a893 	.word	0x0800a893
 800a858:	0800a893 	.word	0x0800a893
 800a85c:	58024400 	.word	0x58024400
 800a860:	58024800 	.word	0x58024800
 800a864:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3304      	adds	r3, #4
 800a86c:	2101      	movs	r1, #1
 800a86e:	4618      	mov	r0, r3
 800a870:	f001 f8e6 	bl	800ba40 <RCCEx_PLL2_Config>
 800a874:	4603      	mov	r3, r0
 800a876:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a878:	e00c      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	3324      	adds	r3, #36	; 0x24
 800a87e:	2101      	movs	r1, #1
 800a880:	4618      	mov	r0, r3
 800a882:	f001 f98f 	bl	800bba4 <RCCEx_PLL3_Config>
 800a886:	4603      	mov	r3, r0
 800a888:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a88a:	e003      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	75fb      	strb	r3, [r7, #23]
      break;
 800a890:	e000      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800a892:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a89a:	4bb2      	ldr	r3, [pc, #712]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89e:	f023 0207 	bic.w	r2, r3, #7
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a8:	49ae      	ldr	r1, [pc, #696]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	658b      	str	r3, [r1, #88]	; 0x58
 800a8ae:	e001      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0320 	and.w	r3, r3, #32
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d044      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ca:	d01b      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800a8cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8d0:	d805      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d022      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800a8d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8da:	d00a      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800a8dc:	e01b      	b.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e2:	d01d      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a8e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8e8:	d01c      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800a8ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8ee:	d01b      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a8f0:	e011      	b.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f001 f8a1 	bl	800ba40 <RCCEx_PLL2_Config>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a902:	e012      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3324      	adds	r3, #36	; 0x24
 800a908:	2102      	movs	r1, #2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f001 f94a 	bl	800bba4 <RCCEx_PLL3_Config>
 800a910:	4603      	mov	r3, r0
 800a912:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a914:	e009      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	75fb      	strb	r3, [r7, #23]
      break;
 800a91a:	e006      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a91c:	bf00      	nop
 800a91e:	e004      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a920:	bf00      	nop
 800a922:	e002      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a924:	bf00      	nop
 800a926:	e000      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10a      	bne.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a930:	4b8c      	ldr	r3, [pc, #560]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a934:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a93e:	4989      	ldr	r1, [pc, #548]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a940:	4313      	orrs	r3, r2
 800a942:	654b      	str	r3, [r1, #84]	; 0x54
 800a944:	e001      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a952:	2b00      	cmp	r3, #0
 800a954:	d044      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a95c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a960:	d01b      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a966:	d805      	bhi.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d022      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a96c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a970:	d00a      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800a972:	e01b      	b.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a978:	d01d      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a97a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a97e:	d01c      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800a980:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a984:	d01b      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a986:	e011      	b.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3304      	adds	r3, #4
 800a98c:	2100      	movs	r1, #0
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 f856 	bl	800ba40 <RCCEx_PLL2_Config>
 800a994:	4603      	mov	r3, r0
 800a996:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a998:	e012      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3324      	adds	r3, #36	; 0x24
 800a99e:	2102      	movs	r1, #2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f001 f8ff 	bl	800bba4 <RCCEx_PLL3_Config>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a9aa:	e009      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a9b0:	e006      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a9b2:	bf00      	nop
 800a9b4:	e004      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a9b6:	bf00      	nop
 800a9b8:	e002      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a9ba:	bf00      	nop
 800a9bc:	e000      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a9be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9c0:	7dfb      	ldrb	r3, [r7, #23]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10a      	bne.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a9c6:	4b67      	ldr	r3, [pc, #412]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9d4:	4963      	ldr	r1, [pc, #396]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	658b      	str	r3, [r1, #88]	; 0x58
 800a9da:	e001      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d044      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9f6:	d01b      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800a9f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9fc:	d805      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d022      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800aa02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa06:	d00a      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800aa08:	e01b      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800aa0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa0e:	d01d      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800aa10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa14:	d01c      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800aa16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aa1a:	d01b      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800aa1c:	e011      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3304      	adds	r3, #4
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 f80b 	bl	800ba40 <RCCEx_PLL2_Config>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aa2e:	e012      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3324      	adds	r3, #36	; 0x24
 800aa34:	2102      	movs	r1, #2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f001 f8b4 	bl	800bba4 <RCCEx_PLL3_Config>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aa40:	e009      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]
      break;
 800aa46:	e006      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800aa48:	bf00      	nop
 800aa4a:	e004      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800aa4c:	bf00      	nop
 800aa4e:	e002      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800aa50:	bf00      	nop
 800aa52:	e000      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800aa54:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa5c:	4b41      	ldr	r3, [pc, #260]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa6a:	493e      	ldr	r1, [pc, #248]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	658b      	str	r3, [r1, #88]	; 0x58
 800aa70:	e001      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0308 	and.w	r3, r3, #8
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d01a      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa8c:	d10a      	bne.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3324      	adds	r3, #36	; 0x24
 800aa92:	2102      	movs	r1, #2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f001 f885 	bl	800bba4 <RCCEx_PLL3_Config>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aaa4:	4b2f      	ldr	r3, [pc, #188]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800aaa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aab2:	492c      	ldr	r1, [pc, #176]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800aab4:	4313      	orrs	r3, r2
 800aab6:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0310 	and.w	r3, r3, #16
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01a      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aace:	d10a      	bne.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3324      	adds	r3, #36	; 0x24
 800aad4:	2102      	movs	r1, #2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f001 f864 	bl	800bba4 <RCCEx_PLL3_Config>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aae6:	4b1f      	ldr	r3, [pc, #124]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800aae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaf4:	491b      	ldr	r1, [pc, #108]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d032      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab10:	d00d      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800ab12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab16:	d016      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d111      	bne.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3304      	adds	r3, #4
 800ab20:	2100      	movs	r1, #0
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 ff8c 	bl	800ba40 <RCCEx_PLL2_Config>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ab2c:	e00c      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	3324      	adds	r3, #36	; 0x24
 800ab32:	2102      	movs	r1, #2
 800ab34:	4618      	mov	r0, r3
 800ab36:	f001 f835 	bl	800bba4 <RCCEx_PLL3_Config>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ab3e:	e003      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	75fb      	strb	r3, [r7, #23]
      break;
 800ab44:	e000      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800ab46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10c      	bne.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab4e:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ab50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab5c:	4901      	ldr	r1, [pc, #4]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	658b      	str	r3, [r1, #88]	; 0x58
 800ab62:	e003      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800ab64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d02f      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab82:	d00c      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ab84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab88:	d015      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800ab8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab8e:	d10f      	bne.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab90:	4b71      	ldr	r3, [pc, #452]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	4a70      	ldr	r2, [pc, #448]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ab96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ab9c:	e00c      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	3324      	adds	r3, #36	; 0x24
 800aba2:	2101      	movs	r1, #1
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 fffd 	bl	800bba4 <RCCEx_PLL3_Config>
 800abaa:	4603      	mov	r3, r0
 800abac:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800abae:	e003      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	75fb      	strb	r3, [r7, #23]
      break;
 800abb4:	e000      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800abb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10a      	bne.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800abbe:	4b66      	ldr	r3, [pc, #408]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800abc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abcc:	4962      	ldr	r1, [pc, #392]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	654b      	str	r3, [r1, #84]	; 0x54
 800abd2:	e001      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d029      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800abec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf0:	d007      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800abf2:	e00f      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf4:	4b58      	ldr	r3, [pc, #352]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800abf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf8:	4a57      	ldr	r2, [pc, #348]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800abfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ac00:	e00b      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3304      	adds	r3, #4
 800ac06:	2102      	movs	r1, #2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 ff19 	bl	800ba40 <RCCEx_PLL2_Config>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ac12:	e002      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	75fb      	strb	r3, [r7, #23]
      break;
 800ac18:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d109      	bne.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac20:	4b4d      	ldr	r3, [pc, #308]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ac22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2c:	494a      	ldr	r1, [pc, #296]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac32:	e001      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00a      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3324      	adds	r3, #36	; 0x24
 800ac48:	2102      	movs	r1, #2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 ffaa 	bl	800bba4 <RCCEx_PLL3_Config>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d02f      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac6e:	d00c      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ac70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac74:	d802      	bhi.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d011      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800ac7a:	e00d      	b.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800ac7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac80:	d00f      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800ac82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac86:	d00e      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800ac88:	e006      	b.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac8a:	4b33      	ldr	r3, [pc, #204]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ac8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8e:	4a32      	ldr	r2, [pc, #200]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ac90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ac96:	e007      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac9c:	e004      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800ac9e:	bf00      	nop
 800aca0:	e002      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800aca2:	bf00      	nop
 800aca4:	e000      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800aca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d109      	bne.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acae:	4b2a      	ldr	r3, [pc, #168]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800acb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acba:	4927      	ldr	r1, [pc, #156]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800acbc:	4313      	orrs	r3, r2
 800acbe:	654b      	str	r3, [r1, #84]	; 0x54
 800acc0:	e001      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d008      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800acd2:	4b21      	ldr	r3, [pc, #132]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800acd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acde:	491e      	ldr	r1, [pc, #120]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ace0:	4313      	orrs	r3, r2
 800ace2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d008      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800acf0:	4b19      	ldr	r3, [pc, #100]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800acf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acfc:	4916      	ldr	r1, [pc, #88]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00d      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad0e:	4b12      	ldr	r3, [pc, #72]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	4a11      	ldr	r2, [pc, #68]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ad14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad18:	6113      	str	r3, [r2, #16]
 800ad1a:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ad1c:	691a      	ldr	r2, [r3, #16]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ad24:	490c      	ldr	r1, [pc, #48]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	da08      	bge.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ad34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad3e:	4906      	ldr	r1, [pc, #24]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800ad44:	7dbb      	ldrb	r3, [r7, #22]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e000      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	58024400 	.word	0x58024400

0800ad5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b090      	sub	sp, #64	; 0x40
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad6a:	d150      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ad6c:	4ba1      	ldr	r3, [pc, #644]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad70:	f003 0307 	and.w	r3, r3, #7
 800ad74:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d844      	bhi.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800ad7c:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800ad7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad82:	bf00      	nop
 800ad84:	0800ad99 	.word	0x0800ad99
 800ad88:	0800ada9 	.word	0x0800ada9
 800ad8c:	0800adb9 	.word	0x0800adb9
 800ad90:	0800ae01 	.word	0x0800ae01
 800ad94:	0800adc9 	.word	0x0800adc9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fd03 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada6:	e241      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada8:	f107 0318 	add.w	r3, r7, #24
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fa63 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adb6:	e239      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb8:	f107 030c 	add.w	r3, r7, #12
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fba7 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adc6:	e231      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800adc8:	4b8a      	ldr	r3, [pc, #552]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800adca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800add0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800add2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800add8:	4b87      	ldr	r3, [pc, #540]	; (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800addc:	e226      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800adde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ade4:	d102      	bne.n	800adec <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800ade6:	4b85      	ldr	r3, [pc, #532]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adea:	e21f      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800adec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf2:	d102      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800adf4:	4b82      	ldr	r3, [pc, #520]	; (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800adf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adf8:	e218      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adfe:	e215      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae00:	4b80      	ldr	r3, [pc, #512]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae04:	e212      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae0a:	bf00      	nop
 800ae0c:	e20e      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae14:	d14f      	bne.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800ae16:	4b77      	ldr	r3, [pc, #476]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ae18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ae1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	2b80      	cmp	r3, #128	; 0x80
 800ae24:	d01c      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800ae26:	2b80      	cmp	r3, #128	; 0x80
 800ae28:	d804      	bhi.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d008      	beq.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800ae2e:	2b40      	cmp	r3, #64	; 0x40
 800ae30:	d00e      	beq.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800ae32:	e03c      	b.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800ae34:	2bc0      	cmp	r3, #192	; 0xc0
 800ae36:	d037      	beq.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800ae38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae3c:	d018      	beq.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800ae3e:	e036      	b.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fcaf 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae4e:	e1ed      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae50:	f107 0318 	add.w	r3, r7, #24
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 fa0f 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae5e:	e1e5      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae60:	f107 030c 	add.w	r3, r7, #12
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 fb53 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae6e:	e1dd      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ae70:	4b60      	ldr	r3, [pc, #384]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ae72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae78:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d102      	bne.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800ae80:	4b5d      	ldr	r3, [pc, #372]	; (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ae82:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800ae84:	e1d2      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800ae86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae8c:	d102      	bne.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800ae8e:	4b5b      	ldr	r3, [pc, #364]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ae90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae92:	e1cb      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800ae94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae9a:	d102      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800ae9c:	4b58      	ldr	r3, [pc, #352]	; (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aea0:	e1c4      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aea6:	e1c1      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aea8:	4b56      	ldr	r3, [pc, #344]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeac:	e1be      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeb2:	bf00      	nop
 800aeb4:	e1ba      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aebc:	d153      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800aebe:	4b4d      	ldr	r3, [pc, #308]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aec6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aece:	d01f      	beq.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800aed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aed4:	d805      	bhi.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00a      	beq.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800aeda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aede:	d00f      	beq.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800aee0:	e03d      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800aee2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aee6:	d037      	beq.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800aee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aeec:	d018      	beq.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800aeee:	e036      	b.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 fc57 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aefe:	e195      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af00:	f107 0318 	add.w	r3, r7, #24
 800af04:	4618      	mov	r0, r3
 800af06:	f000 f9b7 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af0e:	e18d      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af10:	f107 030c 	add.w	r3, r7, #12
 800af14:	4618      	mov	r0, r3
 800af16:	f000 fafb 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af1e:	e185      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af20:	4b34      	ldr	r3, [pc, #208]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800af22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af28:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800af2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d102      	bne.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800af30:	4b31      	ldr	r3, [pc, #196]	; (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800af32:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800af34:	e17a      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800af36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af3c:	d102      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800af3e:	4b2f      	ldr	r3, [pc, #188]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800af40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af42:	e173      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800af44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af4a:	d102      	bne.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800af4c:	4b2c      	ldr	r3, [pc, #176]	; (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800af4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af50:	e16c      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af56:	e169      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af58:	4b2a      	ldr	r3, [pc, #168]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800af5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af5c:	e166      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af62:	bf00      	nop
 800af64:	e162      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af6c:	d15d      	bne.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800af6e:	4b21      	ldr	r3, [pc, #132]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800af70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800af76:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af7e:	d01f      	beq.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800af80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af84:	d805      	bhi.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800af8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af8e:	d00f      	beq.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800af90:	e047      	b.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800af92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af96:	d041      	beq.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800af98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af9c:	d018      	beq.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800af9e:	e040      	b.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 fbff 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afae:	e13d      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afb0:	f107 0318 	add.w	r3, r7, #24
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 f95f 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afbe:	e135      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afc0:	f107 030c 	add.w	r3, r7, #12
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 faa3 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afce:	e12d      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800afd0:	4b08      	ldr	r3, [pc, #32]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800afd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afd8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800afda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d102      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800afe0:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800afe4:	e122      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800afe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afec:	d10c      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800afee:	4b03      	ldr	r3, [pc, #12]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aff2:	e11b      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800aff4:	58024400 	.word	0x58024400
 800aff8:	03d09000 	.word	0x03d09000
 800affc:	003d0900 	.word	0x003d0900
 800b000:	017d7840 	.word	0x017d7840
 800b004:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b00e:	d102      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800b010:	4b89      	ldr	r3, [pc, #548]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b014:	e10a      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b01a:	e107      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b01c:	4b87      	ldr	r3, [pc, #540]	; (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b020:	e104      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b022:	2300      	movs	r3, #0
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b026:	bf00      	nop
 800b028:	e100      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b030:	d153      	bne.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b032:	4b83      	ldr	r3, [pc, #524]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b036:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b03a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b042:	d01f      	beq.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b048:	d805      	bhi.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00a      	beq.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800b04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b052:	d00f      	beq.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b054:	e03d      	b.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b056:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b05a:	d037      	beq.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b05c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b060:	d018      	beq.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b062:	e036      	b.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fb9d 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b072:	e0db      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b074:	f107 0318 	add.w	r3, r7, #24
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 f8fd 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b082:	e0d3      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b084:	f107 030c 	add.w	r3, r7, #12
 800b088:	4618      	mov	r0, r3
 800b08a:	f000 fa41 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b092:	e0cb      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b094:	4b6a      	ldr	r3, [pc, #424]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b09c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d102      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b0a4:	4b67      	ldr	r3, [pc, #412]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b0a8:	e0c0      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0b0:	d102      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800b0b2:	4b65      	ldr	r3, [pc, #404]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0b6:	e0b9      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0be:	d102      	bne.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800b0c0:	4b5d      	ldr	r3, [pc, #372]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0c4:	e0b2      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0ca:	e0af      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b0cc:	4b5b      	ldr	r3, [pc, #364]	; (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0d0:	e0ac      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0d6:	bf00      	nop
 800b0d8:	e0a8      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b0e0:	d13d      	bne.n	800b15e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b0e2:	4b57      	ldr	r3, [pc, #348]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f2:	d00c      	beq.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b0f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0f8:	d011      	beq.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d12b      	bne.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0fe:	f107 0318 	add.w	r3, r7, #24
 800b102:	4618      	mov	r0, r3
 800b104:	f000 f8b8 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b10c:	e08e      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b10e:	f107 030c 	add.w	r3, r7, #12
 800b112:	4618      	mov	r0, r3
 800b114:	f000 f9fc 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b11c:	e086      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b11e:	4b48      	ldr	r3, [pc, #288]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b126:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d102      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b12e:	4b45      	ldr	r3, [pc, #276]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b130:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b132:	e07b      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b13a:	d102      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800b13c:	4b42      	ldr	r3, [pc, #264]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b140:	e074      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b148:	d102      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800b14a:	4b3b      	ldr	r3, [pc, #236]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b14e:	e06d      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b154:	e06a      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b15a:	bf00      	nop
 800b15c:	e066      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b164:	d11f      	bne.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b166:	4b36      	ldr	r3, [pc, #216]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b16a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b16e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b17a:	d008      	beq.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b17c:	e00f      	b.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b17e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fb10 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b18c:	e04e      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b18e:	f107 0318 	add.w	r3, r7, #24
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f870 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b19c:	e046      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1a2:	bf00      	nop
 800b1a4:	e042      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ac:	d13c      	bne.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b1ae:	4b24      	ldr	r3, [pc, #144]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b1b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1be:	d01e      	beq.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800b1c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c4:	d805      	bhi.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00d      	beq.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b1ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ce:	d00e      	beq.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800b1d0:	e026      	b.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800b1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1d6:	d01d      	beq.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800b1d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1dc:	d01d      	beq.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b1de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1e2:	d014      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b1e4:	e01c      	b.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b1e6:	f000 f831 	bl	800b24c <HAL_RCCEx_GetD3PCLK1Freq>
 800b1ea:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b1ec:	e01e      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ee:	f107 0318 	add.w	r3, r7, #24
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 f840 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1fc:	e016      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1fe:	f107 030c 	add.w	r3, r7, #12
 800b202:	4618      	mov	r0, r3
 800b204:	f000 f984 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b20c:	e00e      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800b20e:	4b0d      	ldr	r3, [pc, #52]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b212:	e00b      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800b214:	4b0c      	ldr	r3, [pc, #48]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b218:	e008      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800b21a:	4b07      	ldr	r3, [pc, #28]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b21c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b21e:	e005      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b224:	bf00      	nop
 800b226:	e001      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3740      	adds	r7, #64	; 0x40
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	017d7840 	.word	0x017d7840
 800b23c:	00bb8000 	.word	0x00bb8000
 800b240:	58024400 	.word	0x58024400
 800b244:	03d09000 	.word	0x03d09000
 800b248:	003d0900 	.word	0x003d0900

0800b24c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b250:	f7fe fe4a 	bl	8009ee8 <HAL_RCC_GetHCLKFreq>
 800b254:	4601      	mov	r1, r0
 800b256:	4b06      	ldr	r3, [pc, #24]	; (800b270 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	091b      	lsrs	r3, r3, #4
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	4a04      	ldr	r2, [pc, #16]	; (800b274 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b262:	5cd3      	ldrb	r3, [r2, r3]
 800b264:	f003 031f 	and.w	r3, r3, #31
 800b268:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	58024400 	.word	0x58024400
 800b274:	0801166c 	.word	0x0801166c

0800b278 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b278:	b480      	push	{r7}
 800b27a:	b089      	sub	sp, #36	; 0x24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b280:	4b9d      	ldr	r3, [pc, #628]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b28a:	4b9b      	ldr	r3, [pc, #620]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	0b1b      	lsrs	r3, r3, #12
 800b290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b294:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b296:	4b98      	ldr	r3, [pc, #608]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	091b      	lsrs	r3, r3, #4
 800b29c:	f003 0301 	and.w	r3, r3, #1
 800b2a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b2a2:	4b95      	ldr	r3, [pc, #596]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a6:	08db      	lsrs	r3, r3, #3
 800b2a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	fb02 f303 	mul.w	r3, r2, r3
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 810a 	beq.w	800b4da <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d05a      	beq.n	800b382 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d302      	bcc.n	800b2d6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d078      	beq.n	800b3c6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800b2d4:	e099      	b.n	800b40a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d6:	4b88      	ldr	r3, [pc, #544]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 0320 	and.w	r3, r3, #32
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d02d      	beq.n	800b33e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2e2:	4b85      	ldr	r3, [pc, #532]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	08db      	lsrs	r3, r3, #3
 800b2e8:	f003 0303 	and.w	r3, r3, #3
 800b2ec:	4a83      	ldr	r2, [pc, #524]	; (800b4fc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800b2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	ee07 3a90 	vmov	s15, r3
 800b304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b30c:	4b7a      	ldr	r3, [pc, #488]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b314:	ee07 3a90 	vmov	s15, r3
 800b318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b31c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b320:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800b324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b32c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b334:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b338:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b33c:	e087      	b.n	800b44e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	ee07 3a90 	vmov	s15, r3
 800b344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b348:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b504 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800b34c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b350:	4b69      	ldr	r3, [pc, #420]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b358:	ee07 3a90 	vmov	s15, r3
 800b35c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b360:	ed97 6a03 	vldr	s12, [r7, #12]
 800b364:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800b368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b36c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b37c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b380:	e065      	b.n	800b44e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	ee07 3a90 	vmov	s15, r3
 800b388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800b390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b394:	4b58      	ldr	r3, [pc, #352]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b39c:	ee07 3a90 	vmov	s15, r3
 800b3a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800b3ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3c4:	e043      	b.n	800b44e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	ee07 3a90 	vmov	s15, r3
 800b3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b50c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800b3d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3d8:	4b47      	ldr	r3, [pc, #284]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e0:	ee07 3a90 	vmov	s15, r3
 800b3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800b3f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b408:	e021      	b.n	800b44e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	ee07 3a90 	vmov	s15, r3
 800b410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b414:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800b508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800b418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b41c:	4b36      	ldr	r3, [pc, #216]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b424:	ee07 3a90 	vmov	s15, r3
 800b428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b42c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b430:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800b434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b43c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b444:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b448:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b44c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b44e:	4b2a      	ldr	r3, [pc, #168]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b452:	0a5b      	lsrs	r3, r3, #9
 800b454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b458:	ee07 3a90 	vmov	s15, r3
 800b45c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b464:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b468:	edd7 6a07 	vldr	s13, [r7, #28]
 800b46c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b474:	ee17 2a90 	vmov	r2, s15
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b47c:	4b1e      	ldr	r3, [pc, #120]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b480:	0c1b      	lsrs	r3, r3, #16
 800b482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b492:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b496:	edd7 6a07 	vldr	s13, [r7, #28]
 800b49a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b49e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4a2:	ee17 2a90 	vmov	r2, s15
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b4aa:	4b13      	ldr	r3, [pc, #76]	; (800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ae:	0e1b      	lsrs	r3, r3, #24
 800b4b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b4:	ee07 3a90 	vmov	s15, r3
 800b4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d0:	ee17 2a90 	vmov	r2, s15
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b4d8:	e008      	b.n	800b4ec <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	609a      	str	r2, [r3, #8]
}
 800b4ec:	bf00      	nop
 800b4ee:	3724      	adds	r7, #36	; 0x24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	58024400 	.word	0x58024400
 800b4fc:	03d09000 	.word	0x03d09000
 800b500:	46000000 	.word	0x46000000
 800b504:	4c742400 	.word	0x4c742400
 800b508:	4a742400 	.word	0x4a742400
 800b50c:	4bbebc20 	.word	0x4bbebc20

0800b510 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b510:	b480      	push	{r7}
 800b512:	b089      	sub	sp, #36	; 0x24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b518:	4b9d      	ldr	r3, [pc, #628]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	f003 0303 	and.w	r3, r3, #3
 800b520:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b522:	4b9b      	ldr	r3, [pc, #620]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b526:	0d1b      	lsrs	r3, r3, #20
 800b528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b52c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b52e:	4b98      	ldr	r3, [pc, #608]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b532:	0a1b      	lsrs	r3, r3, #8
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b53a:	4b95      	ldr	r3, [pc, #596]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b53e:	08db      	lsrs	r3, r3, #3
 800b540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	fb02 f303 	mul.w	r3, r2, r3
 800b54a:	ee07 3a90 	vmov	s15, r3
 800b54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b552:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f000 810a 	beq.w	800b772 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d05a      	beq.n	800b61a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800b564:	2b01      	cmp	r3, #1
 800b566:	d302      	bcc.n	800b56e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d078      	beq.n	800b65e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800b56c:	e099      	b.n	800b6a2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b56e:	4b88      	ldr	r3, [pc, #544]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	2b00      	cmp	r3, #0
 800b578:	d02d      	beq.n	800b5d6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b57a:	4b85      	ldr	r3, [pc, #532]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	08db      	lsrs	r3, r3, #3
 800b580:	f003 0303 	and.w	r3, r3, #3
 800b584:	4a83      	ldr	r2, [pc, #524]	; (800b794 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800b586:	fa22 f303 	lsr.w	r3, r2, r3
 800b58a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	ee07 3a90 	vmov	s15, r3
 800b592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	ee07 3a90 	vmov	s15, r3
 800b59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a4:	4b7a      	ldr	r3, [pc, #488]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ac:	ee07 3a90 	vmov	s15, r3
 800b5b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b5bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b5d4:	e087      	b.n	800b6e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	ee07 3a90 	vmov	s15, r3
 800b5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b79c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800b5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5e8:	4b69      	ldr	r3, [pc, #420]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f0:	ee07 3a90 	vmov	s15, r3
 800b5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b614:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b618:	e065      	b.n	800b6e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	ee07 3a90 	vmov	s15, r3
 800b620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b624:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800b628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62c:	4b58      	ldr	r3, [pc, #352]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b640:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b65c:	e043      	b.n	800b6e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	ee07 3a90 	vmov	s15, r3
 800b664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b668:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800b66c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b670:	4b47      	ldr	r3, [pc, #284]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b678:	ee07 3a90 	vmov	s15, r3
 800b67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b680:	ed97 6a03 	vldr	s12, [r7, #12]
 800b684:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6a0:	e021      	b.n	800b6e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	ee07 3a90 	vmov	s15, r3
 800b6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800b7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800b6b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b4:	4b36      	ldr	r3, [pc, #216]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6bc:	ee07 3a90 	vmov	s15, r3
 800b6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800b6cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6e4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b6e6:	4b2a      	ldr	r3, [pc, #168]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ea:	0a5b      	lsrs	r3, r3, #9
 800b6ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6f0:	ee07 3a90 	vmov	s15, r3
 800b6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b700:	edd7 6a07 	vldr	s13, [r7, #28]
 800b704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b70c:	ee17 2a90 	vmov	r2, s15
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b714:	4b1e      	ldr	r3, [pc, #120]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b718:	0c1b      	lsrs	r3, r3, #16
 800b71a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b71e:	ee07 3a90 	vmov	s15, r3
 800b722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b72a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b72e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b73a:	ee17 2a90 	vmov	r2, s15
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b742:	4b13      	ldr	r3, [pc, #76]	; (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	0e1b      	lsrs	r3, r3, #24
 800b748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b74c:	ee07 3a90 	vmov	s15, r3
 800b750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b75c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b768:	ee17 2a90 	vmov	r2, s15
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b770:	e008      	b.n	800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	609a      	str	r2, [r3, #8]
}
 800b784:	bf00      	nop
 800b786:	3724      	adds	r7, #36	; 0x24
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	58024400 	.word	0x58024400
 800b794:	03d09000 	.word	0x03d09000
 800b798:	46000000 	.word	0x46000000
 800b79c:	4c742400 	.word	0x4c742400
 800b7a0:	4a742400 	.word	0x4a742400
 800b7a4:	4bbebc20 	.word	0x4bbebc20

0800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b089      	sub	sp, #36	; 0x24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7b0:	4b9d      	ldr	r3, [pc, #628]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b4:	f003 0303 	and.w	r3, r3, #3
 800b7b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b7ba:	4b9b      	ldr	r3, [pc, #620]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7be:	091b      	lsrs	r3, r3, #4
 800b7c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b7c6:	4b98      	ldr	r3, [pc, #608]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b7d0:	4b95      	ldr	r3, [pc, #596]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d4:	08db      	lsrs	r3, r3, #3
 800b7d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	fb02 f303 	mul.w	r3, r2, r3
 800b7e0:	ee07 3a90 	vmov	s15, r3
 800b7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 810a 	beq.w	800ba08 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d05a      	beq.n	800b8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d302      	bcc.n	800b804 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d078      	beq.n	800b8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800b802:	e099      	b.n	800b938 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b804:	4b88      	ldr	r3, [pc, #544]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 0320 	and.w	r3, r3, #32
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d02d      	beq.n	800b86c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b810:	4b85      	ldr	r3, [pc, #532]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	08db      	lsrs	r3, r3, #3
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	4a84      	ldr	r2, [pc, #528]	; (800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800b81c:	fa22 f303 	lsr.w	r3, r2, r3
 800b820:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	ee07 3a90 	vmov	s15, r3
 800b828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	ee07 3a90 	vmov	s15, r3
 800b832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b83a:	4b7b      	ldr	r3, [pc, #492]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b84a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b84e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b85a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b866:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b86a:	e087      	b.n	800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	ee07 3a90 	vmov	s15, r3
 800b872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b876:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800b87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87e:	4b6a      	ldr	r3, [pc, #424]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b892:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8ae:	e065      	b.n	800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c2:	4b59      	ldr	r3, [pc, #356]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8f2:	e043      	b.n	800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b906:	4b48      	ldr	r3, [pc, #288]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90e:	ee07 3a90 	vmov	s15, r3
 800b912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b916:	ed97 6a03 	vldr	s12, [r7, #12]
 800b91a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b91e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b92a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b936:	e021      	b.n	800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	ee07 3a90 	vmov	s15, r3
 800b93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b942:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b94a:	4b37      	ldr	r3, [pc, #220]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b95a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b95e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b96a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b972:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b97a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b97c:	4b2a      	ldr	r3, [pc, #168]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b980:	0a5b      	lsrs	r3, r3, #9
 800b982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b986:	ee07 3a90 	vmov	s15, r3
 800b98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b992:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b996:	edd7 6a07 	vldr	s13, [r7, #28]
 800b99a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a2:	ee17 2a90 	vmov	r2, s15
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b9aa:	4b1f      	ldr	r3, [pc, #124]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ae:	0c1b      	lsrs	r3, r3, #16
 800b9b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b4:	ee07 3a90 	vmov	s15, r3
 800b9b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9d0:	ee17 2a90 	vmov	r2, s15
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b9d8:	4b13      	ldr	r3, [pc, #76]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9dc:	0e1b      	lsrs	r3, r3, #24
 800b9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e2:	ee07 3a90 	vmov	s15, r3
 800b9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9fe:	ee17 2a90 	vmov	r2, s15
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ba06:	e008      	b.n	800ba1a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	609a      	str	r2, [r3, #8]
}
 800ba1a:	bf00      	nop
 800ba1c:	3724      	adds	r7, #36	; 0x24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	58024400 	.word	0x58024400
 800ba2c:	03d09000 	.word	0x03d09000
 800ba30:	46000000 	.word	0x46000000
 800ba34:	4c742400 	.word	0x4c742400
 800ba38:	4a742400 	.word	0x4a742400
 800ba3c:	4bbebc20 	.word	0x4bbebc20

0800ba40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba4e:	4b53      	ldr	r3, [pc, #332]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800ba50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d101      	bne.n	800ba5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e099      	b.n	800bb92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ba5e:	4b4f      	ldr	r3, [pc, #316]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a4e      	ldr	r2, [pc, #312]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800ba64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ba68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba6a:	f7f9 f815 	bl	8004a98 <HAL_GetTick>
 800ba6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba70:	e008      	b.n	800ba84 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ba72:	f7f9 f811 	bl	8004a98 <HAL_GetTick>
 800ba76:	4602      	mov	r2, r0
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d901      	bls.n	800ba84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba80:	2303      	movs	r3, #3
 800ba82:	e086      	b.n	800bb92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba84:	4b45      	ldr	r3, [pc, #276]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1f0      	bne.n	800ba72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ba90:	4b42      	ldr	r3, [pc, #264]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800ba92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	031b      	lsls	r3, r3, #12
 800ba9e:	493f      	ldr	r1, [pc, #252]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800baa0:	4313      	orrs	r3, r2
 800baa2:	628b      	str	r3, [r1, #40]	; 0x28
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	3b01      	subs	r3, #1
 800bab4:	025b      	lsls	r3, r3, #9
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	431a      	orrs	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	3b01      	subs	r3, #1
 800bac0:	041b      	lsls	r3, r3, #16
 800bac2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bac6:	431a      	orrs	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	3b01      	subs	r3, #1
 800bace:	061b      	lsls	r3, r3, #24
 800bad0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bad4:	4931      	ldr	r1, [pc, #196]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bad6:	4313      	orrs	r3, r2
 800bad8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bada:	4b30      	ldr	r3, [pc, #192]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	492d      	ldr	r1, [pc, #180]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bae8:	4313      	orrs	r3, r2
 800baea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800baec:	4b2b      	ldr	r3, [pc, #172]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	f023 0220 	bic.w	r2, r3, #32
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	4928      	ldr	r1, [pc, #160]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bafa:	4313      	orrs	r3, r2
 800bafc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bafe:	4b27      	ldr	r3, [pc, #156]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb02:	4a26      	ldr	r2, [pc, #152]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb04:	f023 0310 	bic.w	r3, r3, #16
 800bb08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb0a:	4b24      	ldr	r3, [pc, #144]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb0e:	4b24      	ldr	r3, [pc, #144]	; (800bba0 <RCCEx_PLL2_Config+0x160>)
 800bb10:	4013      	ands	r3, r2
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	69d2      	ldr	r2, [r2, #28]
 800bb16:	00d2      	lsls	r2, r2, #3
 800bb18:	4920      	ldr	r1, [pc, #128]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bb1e:	4b1f      	ldr	r3, [pc, #124]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	4a1e      	ldr	r2, [pc, #120]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb24:	f043 0310 	orr.w	r3, r3, #16
 800bb28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d106      	bne.n	800bb3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bb30:	4b1a      	ldr	r3, [pc, #104]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb34:	4a19      	ldr	r2, [pc, #100]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb3c:	e00f      	b.n	800bb5e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d106      	bne.n	800bb52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bb44:	4b15      	ldr	r3, [pc, #84]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	4a14      	ldr	r2, [pc, #80]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb50:	e005      	b.n	800bb5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bb52:	4b12      	ldr	r3, [pc, #72]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	4a11      	ldr	r2, [pc, #68]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb5e:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a0e      	ldr	r2, [pc, #56]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb6a:	f7f8 ff95 	bl	8004a98 <HAL_GetTick>
 800bb6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb70:	e008      	b.n	800bb84 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bb72:	f7f8 ff91 	bl	8004a98 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d901      	bls.n	800bb84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e006      	b.n	800bb92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb84:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <RCCEx_PLL2_Config+0x15c>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0f0      	beq.n	800bb72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	58024400 	.word	0x58024400
 800bba0:	ffff0007 	.word	0xffff0007

0800bba4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbb2:	4b53      	ldr	r3, [pc, #332]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb6:	f003 0303 	and.w	r3, r3, #3
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d101      	bne.n	800bbc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e099      	b.n	800bcf6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bbc2:	4b4f      	ldr	r3, [pc, #316]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a4e      	ldr	r2, [pc, #312]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bbc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbce:	f7f8 ff63 	bl	8004a98 <HAL_GetTick>
 800bbd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbd4:	e008      	b.n	800bbe8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bbd6:	f7f8 ff5f 	bl	8004a98 <HAL_GetTick>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d901      	bls.n	800bbe8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e086      	b.n	800bcf6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbe8:	4b45      	ldr	r3, [pc, #276]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1f0      	bne.n	800bbd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bbf4:	4b42      	ldr	r3, [pc, #264]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	051b      	lsls	r3, r3, #20
 800bc02:	493f      	ldr	r1, [pc, #252]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	628b      	str	r3, [r1, #40]	; 0x28
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	025b      	lsls	r3, r3, #9
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	041b      	lsls	r3, r3, #16
 800bc26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	3b01      	subs	r3, #1
 800bc32:	061b      	lsls	r3, r3, #24
 800bc34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bc38:	4931      	ldr	r1, [pc, #196]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc3e:	4b30      	ldr	r3, [pc, #192]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	492d      	ldr	r1, [pc, #180]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc50:	4b2b      	ldr	r3, [pc, #172]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	4928      	ldr	r1, [pc, #160]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc62:	4b27      	ldr	r3, [pc, #156]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc66:	4a26      	ldr	r2, [pc, #152]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc6e:	4b24      	ldr	r3, [pc, #144]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc72:	4b24      	ldr	r3, [pc, #144]	; (800bd04 <RCCEx_PLL3_Config+0x160>)
 800bc74:	4013      	ands	r3, r2
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	69d2      	ldr	r2, [r2, #28]
 800bc7a:	00d2      	lsls	r2, r2, #3
 800bc7c:	4920      	ldr	r1, [pc, #128]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc82:	4b1f      	ldr	r3, [pc, #124]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc86:	4a1e      	ldr	r2, [pc, #120]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d106      	bne.n	800bca2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc94:	4b1a      	ldr	r3, [pc, #104]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	4a19      	ldr	r2, [pc, #100]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bc9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bc9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bca0:	e00f      	b.n	800bcc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d106      	bne.n	800bcb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bca8:	4b15      	ldr	r3, [pc, #84]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	4a14      	ldr	r2, [pc, #80]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bcae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bcb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bcb4:	e005      	b.n	800bcc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bcb6:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcba:	4a11      	ldr	r2, [pc, #68]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bcbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bcc2:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a0e      	ldr	r2, [pc, #56]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bcc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcce:	f7f8 fee3 	bl	8004a98 <HAL_GetTick>
 800bcd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bcd4:	e008      	b.n	800bce8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bcd6:	f7f8 fedf 	bl	8004a98 <HAL_GetTick>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d901      	bls.n	800bce8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e006      	b.n	800bcf6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <RCCEx_PLL3_Config+0x15c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d0f0      	beq.n	800bcd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	58024400 	.word	0x58024400
 800bd04:	ffff0007 	.word	0xffff0007

0800bd08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e01d      	b.n	800bd56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d106      	bne.n	800bd34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7f8 f81a 	bl	8003d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2202      	movs	r2, #2
 800bd38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3304      	adds	r3, #4
 800bd44:	4619      	mov	r1, r3
 800bd46:	4610      	mov	r0, r2
 800bd48:	f000 f97c 	bl	800c044 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
	...

0800bd60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68da      	ldr	r2, [r3, #12]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f042 0201 	orr.w	r2, r2, #1
 800bd76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	689a      	ldr	r2, [r3, #8]
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	; (800bdb0 <HAL_TIM_Base_Start_IT+0x50>)
 800bd80:	4013      	ands	r3, r2
 800bd82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b06      	cmp	r3, #6
 800bd88:	d00b      	beq.n	800bda2 <HAL_TIM_Base_Start_IT+0x42>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd90:	d007      	beq.n	800bda2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f042 0201 	orr.w	r2, r2, #1
 800bda0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	00010007 	.word	0x00010007

0800bdb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	f003 0302 	and.w	r3, r3, #2
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d122      	bne.n	800be10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	f003 0302 	and.w	r3, r3, #2
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d11b      	bne.n	800be10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f06f 0202 	mvn.w	r2, #2
 800bde0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2201      	movs	r2, #1
 800bde6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	f003 0303 	and.w	r3, r3, #3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d003      	beq.n	800bdfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f905 	bl	800c006 <HAL_TIM_IC_CaptureCallback>
 800bdfc:	e005      	b.n	800be0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f8f7 	bl	800bff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 f908 	bl	800c01a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	f003 0304 	and.w	r3, r3, #4
 800be1a:	2b04      	cmp	r3, #4
 800be1c:	d122      	bne.n	800be64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	f003 0304 	and.w	r3, r3, #4
 800be28:	2b04      	cmp	r3, #4
 800be2a:	d11b      	bne.n	800be64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f06f 0204 	mvn.w	r2, #4
 800be34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2202      	movs	r2, #2
 800be3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be46:	2b00      	cmp	r3, #0
 800be48:	d003      	beq.n	800be52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f8db 	bl	800c006 <HAL_TIM_IC_CaptureCallback>
 800be50:	e005      	b.n	800be5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f8cd 	bl	800bff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f8de 	bl	800c01a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	f003 0308 	and.w	r3, r3, #8
 800be6e:	2b08      	cmp	r3, #8
 800be70:	d122      	bne.n	800beb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	f003 0308 	and.w	r3, r3, #8
 800be7c:	2b08      	cmp	r3, #8
 800be7e:	d11b      	bne.n	800beb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f06f 0208 	mvn.w	r2, #8
 800be88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2204      	movs	r2, #4
 800be8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	f003 0303 	and.w	r3, r3, #3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d003      	beq.n	800bea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f8b1 	bl	800c006 <HAL_TIM_IC_CaptureCallback>
 800bea4:	e005      	b.n	800beb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f8a3 	bl	800bff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f8b4 	bl	800c01a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	f003 0310 	and.w	r3, r3, #16
 800bec2:	2b10      	cmp	r3, #16
 800bec4:	d122      	bne.n	800bf0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	f003 0310 	and.w	r3, r3, #16
 800bed0:	2b10      	cmp	r3, #16
 800bed2:	d11b      	bne.n	800bf0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f06f 0210 	mvn.w	r2, #16
 800bedc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2208      	movs	r2, #8
 800bee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	69db      	ldr	r3, [r3, #28]
 800beea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d003      	beq.n	800befa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f887 	bl	800c006 <HAL_TIM_IC_CaptureCallback>
 800bef8:	e005      	b.n	800bf06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f879 	bl	800bff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f88a 	bl	800c01a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d10e      	bne.n	800bf38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f003 0301 	and.w	r3, r3, #1
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d107      	bne.n	800bf38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f06f 0201 	mvn.w	r2, #1
 800bf30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7f5 fae6 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf42:	2b80      	cmp	r3, #128	; 0x80
 800bf44:	d10e      	bne.n	800bf64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf50:	2b80      	cmp	r3, #128	; 0x80
 800bf52:	d107      	bne.n	800bf64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f99c 	bl	800c29c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf72:	d10e      	bne.n	800bf92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf7e:	2b80      	cmp	r3, #128	; 0x80
 800bf80:	d107      	bne.n	800bf92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f98f 	bl	800c2b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf9c:	2b40      	cmp	r3, #64	; 0x40
 800bf9e:	d10e      	bne.n	800bfbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfaa:	2b40      	cmp	r3, #64	; 0x40
 800bfac:	d107      	bne.n	800bfbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f838 	bl	800c02e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	f003 0320 	and.w	r3, r3, #32
 800bfc8:	2b20      	cmp	r3, #32
 800bfca:	d10e      	bne.n	800bfea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	f003 0320 	and.w	r3, r3, #32
 800bfd6:	2b20      	cmp	r3, #32
 800bfd8:	d107      	bne.n	800bfea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f06f 0220 	mvn.w	r2, #32
 800bfe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f94f 	bl	800c288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfea:	bf00      	nop
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bff2:	b480      	push	{r7}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bffa:	bf00      	nop
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c006:	b480      	push	{r7}
 800c008:	b083      	sub	sp, #12
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c00e:	bf00      	nop
 800c010:	370c      	adds	r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c01a:	b480      	push	{r7}
 800c01c:	b083      	sub	sp, #12
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c022:	bf00      	nop
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr

0800c02e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c02e:	b480      	push	{r7}
 800c030:	b083      	sub	sp, #12
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
	...

0800c044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a40      	ldr	r2, [pc, #256]	; (800c158 <TIM_Base_SetConfig+0x114>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d013      	beq.n	800c084 <TIM_Base_SetConfig+0x40>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c062:	d00f      	beq.n	800c084 <TIM_Base_SetConfig+0x40>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a3d      	ldr	r2, [pc, #244]	; (800c15c <TIM_Base_SetConfig+0x118>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d00b      	beq.n	800c084 <TIM_Base_SetConfig+0x40>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a3c      	ldr	r2, [pc, #240]	; (800c160 <TIM_Base_SetConfig+0x11c>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d007      	beq.n	800c084 <TIM_Base_SetConfig+0x40>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a3b      	ldr	r2, [pc, #236]	; (800c164 <TIM_Base_SetConfig+0x120>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d003      	beq.n	800c084 <TIM_Base_SetConfig+0x40>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a3a      	ldr	r2, [pc, #232]	; (800c168 <TIM_Base_SetConfig+0x124>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d108      	bne.n	800c096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c08a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	4313      	orrs	r3, r2
 800c094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a2f      	ldr	r2, [pc, #188]	; (800c158 <TIM_Base_SetConfig+0x114>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d01f      	beq.n	800c0de <TIM_Base_SetConfig+0x9a>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a4:	d01b      	beq.n	800c0de <TIM_Base_SetConfig+0x9a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a2c      	ldr	r2, [pc, #176]	; (800c15c <TIM_Base_SetConfig+0x118>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d017      	beq.n	800c0de <TIM_Base_SetConfig+0x9a>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a2b      	ldr	r2, [pc, #172]	; (800c160 <TIM_Base_SetConfig+0x11c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d013      	beq.n	800c0de <TIM_Base_SetConfig+0x9a>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a2a      	ldr	r2, [pc, #168]	; (800c164 <TIM_Base_SetConfig+0x120>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d00f      	beq.n	800c0de <TIM_Base_SetConfig+0x9a>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a29      	ldr	r2, [pc, #164]	; (800c168 <TIM_Base_SetConfig+0x124>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d00b      	beq.n	800c0de <TIM_Base_SetConfig+0x9a>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a28      	ldr	r2, [pc, #160]	; (800c16c <TIM_Base_SetConfig+0x128>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d007      	beq.n	800c0de <TIM_Base_SetConfig+0x9a>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a27      	ldr	r2, [pc, #156]	; (800c170 <TIM_Base_SetConfig+0x12c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d003      	beq.n	800c0de <TIM_Base_SetConfig+0x9a>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a26      	ldr	r2, [pc, #152]	; (800c174 <TIM_Base_SetConfig+0x130>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d108      	bne.n	800c0f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	695b      	ldr	r3, [r3, #20]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	689a      	ldr	r2, [r3, #8]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a10      	ldr	r2, [pc, #64]	; (800c158 <TIM_Base_SetConfig+0x114>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d00f      	beq.n	800c13c <TIM_Base_SetConfig+0xf8>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a12      	ldr	r2, [pc, #72]	; (800c168 <TIM_Base_SetConfig+0x124>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d00b      	beq.n	800c13c <TIM_Base_SetConfig+0xf8>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a11      	ldr	r2, [pc, #68]	; (800c16c <TIM_Base_SetConfig+0x128>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d007      	beq.n	800c13c <TIM_Base_SetConfig+0xf8>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a10      	ldr	r2, [pc, #64]	; (800c170 <TIM_Base_SetConfig+0x12c>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d003      	beq.n	800c13c <TIM_Base_SetConfig+0xf8>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a0f      	ldr	r2, [pc, #60]	; (800c174 <TIM_Base_SetConfig+0x130>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d103      	bne.n	800c144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	691a      	ldr	r2, [r3, #16]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	615a      	str	r2, [r3, #20]
}
 800c14a:	bf00      	nop
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	40010000 	.word	0x40010000
 800c15c:	40000400 	.word	0x40000400
 800c160:	40000800 	.word	0x40000800
 800c164:	40000c00 	.word	0x40000c00
 800c168:	40010400 	.word	0x40010400
 800c16c:	40014000 	.word	0x40014000
 800c170:	40014400 	.word	0x40014400
 800c174:	40014800 	.word	0x40014800

0800c178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d101      	bne.n	800c190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c18c:	2302      	movs	r3, #2
 800c18e:	e068      	b.n	800c262 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a2e      	ldr	r2, [pc, #184]	; (800c270 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d004      	beq.n	800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a2d      	ldr	r2, [pc, #180]	; (800c274 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d108      	bne.n	800c1d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c1ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a1e      	ldr	r2, [pc, #120]	; (800c270 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d01d      	beq.n	800c236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c202:	d018      	beq.n	800c236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a1b      	ldr	r2, [pc, #108]	; (800c278 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d013      	beq.n	800c236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a1a      	ldr	r2, [pc, #104]	; (800c27c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d00e      	beq.n	800c236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a18      	ldr	r2, [pc, #96]	; (800c280 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d009      	beq.n	800c236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a13      	ldr	r2, [pc, #76]	; (800c274 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d004      	beq.n	800c236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a14      	ldr	r2, [pc, #80]	; (800c284 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d10c      	bne.n	800c250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c23c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	4313      	orrs	r3, r2
 800c246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	40010000 	.word	0x40010000
 800c274:	40010400 	.word	0x40010400
 800c278:	40000400 	.word	0x40000400
 800c27c:	40000800 	.word	0x40000800
 800c280:	40000c00 	.word	0x40000c00
 800c284:	40001800 	.word	0x40001800

0800c288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e042      	b.n	800c35c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d106      	bne.n	800c2ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7f7 fd65 	bl	8003db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2224      	movs	r2, #36	; 0x24
 800c2f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f022 0201 	bic.w	r2, r2, #1
 800c304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fc3a 	bl	800cb80 <UART_SetConfig>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d101      	bne.n	800c316 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e022      	b.n	800c35c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f002 fdac 	bl	800ee7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	689a      	ldr	r2, [r3, #8]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f042 0201 	orr.w	r2, r2, #1
 800c352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f002 fe33 	bl	800efc0 <UART_CheckIdleState>
 800c35a:	4603      	mov	r3, r0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08a      	sub	sp, #40	; 0x28
 800c368:	af02      	add	r7, sp, #8
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	603b      	str	r3, [r7, #0]
 800c370:	4613      	mov	r3, r2
 800c372:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c37a:	2b20      	cmp	r3, #32
 800c37c:	f040 8083 	bne.w	800c486 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <HAL_UART_Transmit+0x28>
 800c386:	88fb      	ldrh	r3, [r7, #6]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e07b      	b.n	800c488 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c396:	2b01      	cmp	r3, #1
 800c398:	d101      	bne.n	800c39e <HAL_UART_Transmit+0x3a>
 800c39a:	2302      	movs	r3, #2
 800c39c:	e074      	b.n	800c488 <HAL_UART_Transmit+0x124>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2221      	movs	r2, #33	; 0x21
 800c3b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c3b6:	f7f8 fb6f 	bl	8004a98 <HAL_GetTick>
 800c3ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	88fa      	ldrh	r2, [r7, #6]
 800c3c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	88fa      	ldrh	r2, [r7, #6]
 800c3c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3d4:	d108      	bne.n	800c3e8 <HAL_UART_Transmit+0x84>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d104      	bne.n	800c3e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	61bb      	str	r3, [r7, #24]
 800c3e6:	e003      	b.n	800c3f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c3f0:	e02c      	b.n	800c44c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	2180      	movs	r1, #128	; 0x80
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f002 fe27 	bl	800f050 <UART_WaitOnFlagUntilTimeout>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d001      	beq.n	800c40c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800c408:	2303      	movs	r3, #3
 800c40a:	e03d      	b.n	800c488 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10b      	bne.n	800c42a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c420:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	3302      	adds	r3, #2
 800c426:	61bb      	str	r3, [r7, #24]
 800c428:	e007      	b.n	800c43a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	781a      	ldrb	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	3301      	adds	r3, #1
 800c438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c440:	b29b      	uxth	r3, r3
 800c442:	3b01      	subs	r3, #1
 800c444:	b29a      	uxth	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c452:	b29b      	uxth	r3, r3
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1cc      	bne.n	800c3f2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	2200      	movs	r2, #0
 800c460:	2140      	movs	r1, #64	; 0x40
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f002 fdf4 	bl	800f050 <UART_WaitOnFlagUntilTimeout>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c46e:	2303      	movs	r3, #3
 800c470:	e00a      	b.n	800c488 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2220      	movs	r2, #32
 800c476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c482:	2300      	movs	r3, #0
 800c484:	e000      	b.n	800c488 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c486:	2302      	movs	r3, #2
  }
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3720      	adds	r7, #32
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	4613      	mov	r3, r2
 800c49c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4a4:	2b20      	cmp	r3, #32
 800c4a6:	d168      	bne.n	800c57a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d002      	beq.n	800c4b4 <HAL_UART_Transmit_IT+0x24>
 800c4ae:	88fb      	ldrh	r3, [r7, #6]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e061      	b.n	800c57c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d101      	bne.n	800c4c6 <HAL_UART_Transmit_IT+0x36>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e05a      	b.n	800c57c <HAL_UART_Transmit_IT+0xec>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	88fa      	ldrh	r2, [r7, #6]
 800c4d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	88fa      	ldrh	r2, [r7, #6]
 800c4e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2221      	movs	r2, #33	; 0x21
 800c4f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c502:	d11c      	bne.n	800c53e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c50c:	d107      	bne.n	800c51e <HAL_UART_Transmit_IT+0x8e>
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d103      	bne.n	800c51e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	4a1b      	ldr	r2, [pc, #108]	; (800c588 <HAL_UART_Transmit_IT+0xf8>)
 800c51a:	671a      	str	r2, [r3, #112]	; 0x70
 800c51c:	e002      	b.n	800c524 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	4a1a      	ldr	r2, [pc, #104]	; (800c58c <HAL_UART_Transmit_IT+0xfc>)
 800c522:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	689a      	ldr	r2, [r3, #8]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c53a:	609a      	str	r2, [r3, #8]
 800c53c:	e01b      	b.n	800c576 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c546:	d107      	bne.n	800c558 <HAL_UART_Transmit_IT+0xc8>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d103      	bne.n	800c558 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	4a0f      	ldr	r2, [pc, #60]	; (800c590 <HAL_UART_Transmit_IT+0x100>)
 800c554:	671a      	str	r2, [r3, #112]	; 0x70
 800c556:	e002      	b.n	800c55e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4a0e      	ldr	r2, [pc, #56]	; (800c594 <HAL_UART_Transmit_IT+0x104>)
 800c55c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c574:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	e000      	b.n	800c57c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800c57a:	2302      	movs	r3, #2
  }
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	0800f48f 	.word	0x0800f48f
 800c58c:	0800f3f5 	.word	0x0800f3f5
 800c590:	0800f377 	.word	0x0800f377
 800c594:	0800f303 	.word	0x0800f303

0800c598 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	f040 80bc 	bne.w	800c72a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <HAL_UART_Receive_IT+0x26>
 800c5b8:	88fb      	ldrh	r3, [r7, #6]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e0b4      	b.n	800c72c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d101      	bne.n	800c5d0 <HAL_UART_Receive_IT+0x38>
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	e0ad      	b.n	800c72c <HAL_UART_Receive_IT+0x194>
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	88fa      	ldrh	r2, [r7, #6]
 800c5e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	88fa      	ldrh	r2, [r7, #6]
 800c5ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5fc:	d10e      	bne.n	800c61c <HAL_UART_Receive_IT+0x84>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d105      	bne.n	800c612 <HAL_UART_Receive_IT+0x7a>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c60c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c610:	e02d      	b.n	800c66e <HAL_UART_Receive_IT+0xd6>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	22ff      	movs	r2, #255	; 0xff
 800c616:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c61a:	e028      	b.n	800c66e <HAL_UART_Receive_IT+0xd6>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10d      	bne.n	800c640 <HAL_UART_Receive_IT+0xa8>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d104      	bne.n	800c636 <HAL_UART_Receive_IT+0x9e>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	22ff      	movs	r2, #255	; 0xff
 800c630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c634:	e01b      	b.n	800c66e <HAL_UART_Receive_IT+0xd6>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	227f      	movs	r2, #127	; 0x7f
 800c63a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c63e:	e016      	b.n	800c66e <HAL_UART_Receive_IT+0xd6>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c648:	d10d      	bne.n	800c666 <HAL_UART_Receive_IT+0xce>
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d104      	bne.n	800c65c <HAL_UART_Receive_IT+0xc4>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	227f      	movs	r2, #127	; 0x7f
 800c656:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c65a:	e008      	b.n	800c66e <HAL_UART_Receive_IT+0xd6>
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	223f      	movs	r2, #63	; 0x3f
 800c660:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c664:	e003      	b.n	800c66e <HAL_UART_Receive_IT+0xd6>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2222      	movs	r2, #34	; 0x22
 800c67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	689a      	ldr	r2, [r3, #8]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f042 0201 	orr.w	r2, r2, #1
 800c68c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c696:	d12a      	bne.n	800c6ee <HAL_UART_Receive_IT+0x156>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c69e:	88fa      	ldrh	r2, [r7, #6]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d324      	bcc.n	800c6ee <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6ac:	d107      	bne.n	800c6be <HAL_UART_Receive_IT+0x126>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d103      	bne.n	800c6be <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	4a1f      	ldr	r2, [pc, #124]	; (800c738 <HAL_UART_Receive_IT+0x1a0>)
 800c6ba:	66da      	str	r2, [r3, #108]	; 0x6c
 800c6bc:	e002      	b.n	800c6c4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	4a1e      	ldr	r2, [pc, #120]	; (800c73c <HAL_UART_Receive_IT+0x1a4>)
 800c6c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6da:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689a      	ldr	r2, [r3, #8]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c6ea:	609a      	str	r2, [r3, #8]
 800c6ec:	e01b      	b.n	800c726 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6f6:	d107      	bne.n	800c708 <HAL_UART_Receive_IT+0x170>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d103      	bne.n	800c708 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4a0f      	ldr	r2, [pc, #60]	; (800c740 <HAL_UART_Receive_IT+0x1a8>)
 800c704:	66da      	str	r2, [r3, #108]	; 0x6c
 800c706:	e002      	b.n	800c70e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	4a0e      	ldr	r2, [pc, #56]	; (800c744 <HAL_UART_Receive_IT+0x1ac>)
 800c70c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2200      	movs	r2, #0
 800c712:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c724:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	e000      	b.n	800c72c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800c72a:	2302      	movs	r3, #2
  }
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	0800f7c5 	.word	0x0800f7c5
 800c73c:	0800f6bd 	.word	0x0800f6bd
 800c740:	0800f611 	.word	0x0800f611
 800c744:	0800f567 	.word	0x0800f567

0800c748 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	4613      	mov	r3, r2
 800c754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c75c:	2b20      	cmp	r3, #32
 800c75e:	d170      	bne.n	800c842 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d002      	beq.n	800c76c <HAL_UART_Receive_DMA+0x24>
 800c766:	88fb      	ldrh	r3, [r7, #6]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e069      	b.n	800c844 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c776:	2b01      	cmp	r3, #1
 800c778:	d101      	bne.n	800c77e <HAL_UART_Receive_DMA+0x36>
 800c77a:	2302      	movs	r3, #2
 800c77c:	e062      	b.n	800c844 <HAL_UART_Receive_DMA+0xfc>
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	88fa      	ldrh	r2, [r7, #6]
 800c790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2200      	movs	r2, #0
 800c798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2222      	movs	r2, #34	; 0x22
 800c7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d02c      	beq.n	800c806 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7b0:	4a26      	ldr	r2, [pc, #152]	; (800c84c <HAL_UART_Receive_DMA+0x104>)
 800c7b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7b8:	4a25      	ldr	r2, [pc, #148]	; (800c850 <HAL_UART_Receive_DMA+0x108>)
 800c7ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7c0:	4a24      	ldr	r2, [pc, #144]	; (800c854 <HAL_UART_Receive_DMA+0x10c>)
 800c7c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	3324      	adds	r3, #36	; 0x24
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7dc:	461a      	mov	r2, r3
 800c7de:	88fb      	ldrh	r3, [r7, #6]
 800c7e0:	f7f9 ff98 	bl	8006714 <HAL_DMA_Start_IT>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00d      	beq.n	800c806 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2210      	movs	r2, #16
 800c7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2220      	movs	r2, #32
 800c7fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800c802:	2301      	movs	r3, #1
 800c804:	e01e      	b.n	800c844 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c81c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	689a      	ldr	r2, [r3, #8]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f042 0201 	orr.w	r2, r2, #1
 800c82c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	689a      	ldr	r2, [r3, #8]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c83c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	e000      	b.n	800c844 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800c842:	2302      	movs	r3, #2
  }
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	0800f1d5 	.word	0x0800f1d5
 800c850:	0800f23b 	.word	0x0800f23b
 800c854:	0800f257 	.word	0x0800f257

0800c858 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	69db      	ldr	r3, [r3, #28]
 800c866:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c878:	69fa      	ldr	r2, [r7, #28]
 800c87a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c87e:	4013      	ands	r3, r2
 800c880:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d118      	bne.n	800c8ba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	f003 0320 	and.w	r3, r3, #32
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d013      	beq.n	800c8ba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	f003 0320 	and.w	r3, r3, #32
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d104      	bne.n	800c8a6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d009      	beq.n	800c8ba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f000 8145 	beq.w	800cb3a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	4798      	blx	r3
      }
      return;
 800c8b8:	e13f      	b.n	800cb3a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 80e8 	beq.w	800ca92 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	4ba1      	ldr	r3, [pc, #644]	; (800cb4c <HAL_UART_IRQHandler+0x2f4>)
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d105      	bne.n	800c8d8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c8cc:	69ba      	ldr	r2, [r7, #24]
 800c8ce:	4ba0      	ldr	r3, [pc, #640]	; (800cb50 <HAL_UART_IRQHandler+0x2f8>)
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f000 80dd 	beq.w	800ca92 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	f003 0301 	and.w	r3, r3, #1
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d010      	beq.n	800c904 <HAL_UART_IRQHandler+0xac>
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8fa:	f043 0201 	orr.w	r2, r3, #1
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f003 0302 	and.w	r3, r3, #2
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d010      	beq.n	800c930 <HAL_UART_IRQHandler+0xd8>
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	f003 0301 	and.w	r3, r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00b      	beq.n	800c930 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2202      	movs	r2, #2
 800c91e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c926:	f043 0204 	orr.w	r2, r3, #4
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	f003 0304 	and.w	r3, r3, #4
 800c936:	2b00      	cmp	r3, #0
 800c938:	d010      	beq.n	800c95c <HAL_UART_IRQHandler+0x104>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f003 0301 	and.w	r3, r3, #1
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00b      	beq.n	800c95c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2204      	movs	r2, #4
 800c94a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c952:	f043 0202 	orr.w	r2, r3, #2
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	f003 0308 	and.w	r3, r3, #8
 800c962:	2b00      	cmp	r3, #0
 800c964:	d015      	beq.n	800c992 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	f003 0320 	and.w	r3, r3, #32
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d104      	bne.n	800c97a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	4b76      	ldr	r3, [pc, #472]	; (800cb4c <HAL_UART_IRQHandler+0x2f4>)
 800c974:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00b      	beq.n	800c992 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2208      	movs	r2, #8
 800c980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c988:	f043 0208 	orr.w	r2, r3, #8
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d011      	beq.n	800c9c0 <HAL_UART_IRQHandler+0x168>
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00c      	beq.n	800c9c0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9b6:	f043 0220 	orr.w	r2, r3, #32
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 80b9 	beq.w	800cb3e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	f003 0320 	and.w	r3, r3, #32
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d011      	beq.n	800c9fa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	f003 0320 	and.w	r3, r3, #32
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d104      	bne.n	800c9ea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d007      	beq.n	800c9fa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d003      	beq.n	800c9fa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca0c:	2b40      	cmp	r3, #64	; 0x40
 800ca0e:	d004      	beq.n	800ca1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d031      	beq.n	800ca7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f002 fbb6 	bl	800f18c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca2a:	2b40      	cmp	r3, #64	; 0x40
 800ca2c:	d123      	bne.n	800ca76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	689a      	ldr	r2, [r3, #8]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d013      	beq.n	800ca6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca4a:	4a42      	ldr	r2, [pc, #264]	; (800cb54 <HAL_UART_IRQHandler+0x2fc>)
 800ca4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fa f8c8 	bl	8006be8 <HAL_DMA_Abort_IT>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d017      	beq.n	800ca8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800ca68:	4610      	mov	r0, r2
 800ca6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca6c:	e00f      	b.n	800ca8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 f87c 	bl	800cb6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca74:	e00b      	b.n	800ca8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f878 	bl	800cb6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca7c:	e007      	b.n	800ca8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f874 	bl	800cb6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800ca8c:	e057      	b.n	800cb3e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca8e:	bf00      	nop
    return;
 800ca90:	e055      	b.n	800cb3e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00d      	beq.n	800cab8 <HAL_UART_IRQHandler+0x260>
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d008      	beq.n	800cab8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800caae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f002 ff0b 	bl	800f8cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cab6:	e045      	b.n	800cb44 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d012      	beq.n	800cae8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d008      	beq.n	800cae8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d031      	beq.n	800cb42 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	4798      	blx	r3
    }
    return;
 800cae6:	e02c      	b.n	800cb42 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d008      	beq.n	800cb04 <HAL_UART_IRQHandler+0x2ac>
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d003      	beq.n	800cb04 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f002 fd18 	bl	800f532 <UART_EndTransmit_IT>
    return;
 800cb02:	e01f      	b.n	800cb44 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d008      	beq.n	800cb20 <HAL_UART_IRQHandler+0x2c8>
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d003      	beq.n	800cb20 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f002 feeb 	bl	800f8f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb1e:	e011      	b.n	800cb44 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00c      	beq.n	800cb44 <HAL_UART_IRQHandler+0x2ec>
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	da09      	bge.n	800cb44 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f002 fed5 	bl	800f8e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb36:	bf00      	nop
 800cb38:	e004      	b.n	800cb44 <HAL_UART_IRQHandler+0x2ec>
      return;
 800cb3a:	bf00      	nop
 800cb3c:	e002      	b.n	800cb44 <HAL_UART_IRQHandler+0x2ec>
    return;
 800cb3e:	bf00      	nop
 800cb40:	e000      	b.n	800cb44 <HAL_UART_IRQHandler+0x2ec>
    return;
 800cb42:	bf00      	nop
  }
}
 800cb44:	3720      	adds	r7, #32
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	10000001 	.word	0x10000001
 800cb50:	04000120 	.word	0x04000120
 800cb54:	0800f2d7 	.word	0x0800f2d7

0800cb58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800cb84:	b090      	sub	sp, #64	; 0x40
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800cb94:	2300      	movs	r3, #0
 800cb96:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	689a      	ldr	r2, [r3, #8]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	431a      	orrs	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	431a      	orrs	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	4bc1      	ldr	r3, [pc, #772]	; (800cec8 <UART_SetConfig+0x348>)
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	6812      	ldr	r2, [r2, #0]
 800cbc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbca:	430b      	orrs	r3, r1
 800cbcc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68da      	ldr	r2, [r3, #12]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	430a      	orrs	r2, r1
 800cbe2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4ab7      	ldr	r2, [pc, #732]	; (800cecc <UART_SetConfig+0x34c>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d004      	beq.n	800cbfe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a1b      	ldr	r3, [r3, #32]
 800cbf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	689a      	ldr	r2, [r3, #8]
 800cc04:	4bb2      	ldr	r3, [pc, #712]	; (800ced0 <UART_SetConfig+0x350>)
 800cc06:	4013      	ands	r3, r2
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	6812      	ldr	r2, [r2, #0]
 800cc0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc0e:	430b      	orrs	r3, r1
 800cc10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc18:	f023 010f 	bic.w	r1, r3, #15
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	430a      	orrs	r2, r1
 800cc26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4aa9      	ldr	r2, [pc, #676]	; (800ced4 <UART_SetConfig+0x354>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d177      	bne.n	800cd22 <UART_SetConfig+0x1a2>
 800cc32:	4ba9      	ldr	r3, [pc, #676]	; (800ced8 <UART_SetConfig+0x358>)
 800cc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc3a:	2b28      	cmp	r3, #40	; 0x28
 800cc3c:	d86c      	bhi.n	800cd18 <UART_SetConfig+0x198>
 800cc3e:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <UART_SetConfig+0xc4>)
 800cc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc44:	0800cce9 	.word	0x0800cce9
 800cc48:	0800cd19 	.word	0x0800cd19
 800cc4c:	0800cd19 	.word	0x0800cd19
 800cc50:	0800cd19 	.word	0x0800cd19
 800cc54:	0800cd19 	.word	0x0800cd19
 800cc58:	0800cd19 	.word	0x0800cd19
 800cc5c:	0800cd19 	.word	0x0800cd19
 800cc60:	0800cd19 	.word	0x0800cd19
 800cc64:	0800ccf1 	.word	0x0800ccf1
 800cc68:	0800cd19 	.word	0x0800cd19
 800cc6c:	0800cd19 	.word	0x0800cd19
 800cc70:	0800cd19 	.word	0x0800cd19
 800cc74:	0800cd19 	.word	0x0800cd19
 800cc78:	0800cd19 	.word	0x0800cd19
 800cc7c:	0800cd19 	.word	0x0800cd19
 800cc80:	0800cd19 	.word	0x0800cd19
 800cc84:	0800ccf9 	.word	0x0800ccf9
 800cc88:	0800cd19 	.word	0x0800cd19
 800cc8c:	0800cd19 	.word	0x0800cd19
 800cc90:	0800cd19 	.word	0x0800cd19
 800cc94:	0800cd19 	.word	0x0800cd19
 800cc98:	0800cd19 	.word	0x0800cd19
 800cc9c:	0800cd19 	.word	0x0800cd19
 800cca0:	0800cd19 	.word	0x0800cd19
 800cca4:	0800cd01 	.word	0x0800cd01
 800cca8:	0800cd19 	.word	0x0800cd19
 800ccac:	0800cd19 	.word	0x0800cd19
 800ccb0:	0800cd19 	.word	0x0800cd19
 800ccb4:	0800cd19 	.word	0x0800cd19
 800ccb8:	0800cd19 	.word	0x0800cd19
 800ccbc:	0800cd19 	.word	0x0800cd19
 800ccc0:	0800cd19 	.word	0x0800cd19
 800ccc4:	0800cd09 	.word	0x0800cd09
 800ccc8:	0800cd19 	.word	0x0800cd19
 800cccc:	0800cd19 	.word	0x0800cd19
 800ccd0:	0800cd19 	.word	0x0800cd19
 800ccd4:	0800cd19 	.word	0x0800cd19
 800ccd8:	0800cd19 	.word	0x0800cd19
 800ccdc:	0800cd19 	.word	0x0800cd19
 800cce0:	0800cd19 	.word	0x0800cd19
 800cce4:	0800cd11 	.word	0x0800cd11
 800cce8:	2301      	movs	r3, #1
 800ccea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ccee:	e233      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ccf0:	2304      	movs	r3, #4
 800ccf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ccf6:	e22f      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ccf8:	2308      	movs	r3, #8
 800ccfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ccfe:	e22b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd00:	2310      	movs	r3, #16
 800cd02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd06:	e227      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd08:	2320      	movs	r3, #32
 800cd0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd0e:	e223      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd10:	2340      	movs	r3, #64	; 0x40
 800cd12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd16:	e21f      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd18:	2380      	movs	r3, #128	; 0x80
 800cd1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd1e:	bf00      	nop
 800cd20:	e21a      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a6d      	ldr	r2, [pc, #436]	; (800cedc <UART_SetConfig+0x35c>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d132      	bne.n	800cd92 <UART_SetConfig+0x212>
 800cd2c:	4b6a      	ldr	r3, [pc, #424]	; (800ced8 <UART_SetConfig+0x358>)
 800cd2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd30:	f003 0307 	and.w	r3, r3, #7
 800cd34:	2b05      	cmp	r3, #5
 800cd36:	d827      	bhi.n	800cd88 <UART_SetConfig+0x208>
 800cd38:	a201      	add	r2, pc, #4	; (adr r2, 800cd40 <UART_SetConfig+0x1c0>)
 800cd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3e:	bf00      	nop
 800cd40:	0800cd59 	.word	0x0800cd59
 800cd44:	0800cd61 	.word	0x0800cd61
 800cd48:	0800cd69 	.word	0x0800cd69
 800cd4c:	0800cd71 	.word	0x0800cd71
 800cd50:	0800cd79 	.word	0x0800cd79
 800cd54:	0800cd81 	.word	0x0800cd81
 800cd58:	2300      	movs	r3, #0
 800cd5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd5e:	e1fb      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd60:	2304      	movs	r3, #4
 800cd62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd66:	e1f7      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd68:	2308      	movs	r3, #8
 800cd6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd6e:	e1f3      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd70:	2310      	movs	r3, #16
 800cd72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd76:	e1ef      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd78:	2320      	movs	r3, #32
 800cd7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd7e:	e1eb      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd80:	2340      	movs	r3, #64	; 0x40
 800cd82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd86:	e1e7      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd88:	2380      	movs	r3, #128	; 0x80
 800cd8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cd8e:	bf00      	nop
 800cd90:	e1e2      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a52      	ldr	r2, [pc, #328]	; (800cee0 <UART_SetConfig+0x360>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d132      	bne.n	800ce02 <UART_SetConfig+0x282>
 800cd9c:	4b4e      	ldr	r3, [pc, #312]	; (800ced8 <UART_SetConfig+0x358>)
 800cd9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda0:	f003 0307 	and.w	r3, r3, #7
 800cda4:	2b05      	cmp	r3, #5
 800cda6:	d827      	bhi.n	800cdf8 <UART_SetConfig+0x278>
 800cda8:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <UART_SetConfig+0x230>)
 800cdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdae:	bf00      	nop
 800cdb0:	0800cdc9 	.word	0x0800cdc9
 800cdb4:	0800cdd1 	.word	0x0800cdd1
 800cdb8:	0800cdd9 	.word	0x0800cdd9
 800cdbc:	0800cde1 	.word	0x0800cde1
 800cdc0:	0800cde9 	.word	0x0800cde9
 800cdc4:	0800cdf1 	.word	0x0800cdf1
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cdce:	e1c3      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cdd0:	2304      	movs	r3, #4
 800cdd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cdd6:	e1bf      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cdd8:	2308      	movs	r3, #8
 800cdda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cdde:	e1bb      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cde0:	2310      	movs	r3, #16
 800cde2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cde6:	e1b7      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cde8:	2320      	movs	r3, #32
 800cdea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cdee:	e1b3      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cdf0:	2340      	movs	r3, #64	; 0x40
 800cdf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cdf6:	e1af      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cdf8:	2380      	movs	r3, #128	; 0x80
 800cdfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cdfe:	bf00      	nop
 800ce00:	e1aa      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a37      	ldr	r2, [pc, #220]	; (800cee4 <UART_SetConfig+0x364>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d132      	bne.n	800ce72 <UART_SetConfig+0x2f2>
 800ce0c:	4b32      	ldr	r3, [pc, #200]	; (800ced8 <UART_SetConfig+0x358>)
 800ce0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce10:	f003 0307 	and.w	r3, r3, #7
 800ce14:	2b05      	cmp	r3, #5
 800ce16:	d827      	bhi.n	800ce68 <UART_SetConfig+0x2e8>
 800ce18:	a201      	add	r2, pc, #4	; (adr r2, 800ce20 <UART_SetConfig+0x2a0>)
 800ce1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce1e:	bf00      	nop
 800ce20:	0800ce39 	.word	0x0800ce39
 800ce24:	0800ce41 	.word	0x0800ce41
 800ce28:	0800ce49 	.word	0x0800ce49
 800ce2c:	0800ce51 	.word	0x0800ce51
 800ce30:	0800ce59 	.word	0x0800ce59
 800ce34:	0800ce61 	.word	0x0800ce61
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce3e:	e18b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ce40:	2304      	movs	r3, #4
 800ce42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce46:	e187      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ce48:	2308      	movs	r3, #8
 800ce4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce4e:	e183      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ce50:	2310      	movs	r3, #16
 800ce52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce56:	e17f      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ce58:	2320      	movs	r3, #32
 800ce5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce5e:	e17b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ce60:	2340      	movs	r3, #64	; 0x40
 800ce62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce66:	e177      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ce68:	2380      	movs	r3, #128	; 0x80
 800ce6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce6e:	bf00      	nop
 800ce70:	e172      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a1c      	ldr	r2, [pc, #112]	; (800cee8 <UART_SetConfig+0x368>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d144      	bne.n	800cf06 <UART_SetConfig+0x386>
 800ce7c:	4b16      	ldr	r3, [pc, #88]	; (800ced8 <UART_SetConfig+0x358>)
 800ce7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce80:	f003 0307 	and.w	r3, r3, #7
 800ce84:	2b05      	cmp	r3, #5
 800ce86:	d839      	bhi.n	800cefc <UART_SetConfig+0x37c>
 800ce88:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <UART_SetConfig+0x310>)
 800ce8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8e:	bf00      	nop
 800ce90:	0800cea9 	.word	0x0800cea9
 800ce94:	0800ceb1 	.word	0x0800ceb1
 800ce98:	0800ceb9 	.word	0x0800ceb9
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800ceed 	.word	0x0800ceed
 800cea4:	0800cef5 	.word	0x0800cef5
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ceae:	e153      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ceb0:	2304      	movs	r3, #4
 800ceb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ceb6:	e14f      	b.n	800d158 <UART_SetConfig+0x5d8>
 800ceb8:	2308      	movs	r3, #8
 800ceba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cebe:	e14b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cec0:	2310      	movs	r3, #16
 800cec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cec6:	e147      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cec8:	cfff69f3 	.word	0xcfff69f3
 800cecc:	58000c00 	.word	0x58000c00
 800ced0:	11fff4ff 	.word	0x11fff4ff
 800ced4:	40011000 	.word	0x40011000
 800ced8:	58024400 	.word	0x58024400
 800cedc:	40004400 	.word	0x40004400
 800cee0:	40004800 	.word	0x40004800
 800cee4:	40004c00 	.word	0x40004c00
 800cee8:	40005000 	.word	0x40005000
 800ceec:	2320      	movs	r3, #32
 800ceee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cef2:	e131      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cef4:	2340      	movs	r3, #64	; 0x40
 800cef6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cefa:	e12d      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cefc:	2380      	movs	r3, #128	; 0x80
 800cefe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cf02:	bf00      	nop
 800cf04:	e128      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4ac3      	ldr	r2, [pc, #780]	; (800d218 <UART_SetConfig+0x698>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d178      	bne.n	800d002 <UART_SetConfig+0x482>
 800cf10:	4bc2      	ldr	r3, [pc, #776]	; (800d21c <UART_SetConfig+0x69c>)
 800cf12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf18:	2b28      	cmp	r3, #40	; 0x28
 800cf1a:	d86d      	bhi.n	800cff8 <UART_SetConfig+0x478>
 800cf1c:	a201      	add	r2, pc, #4	; (adr r2, 800cf24 <UART_SetConfig+0x3a4>)
 800cf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf22:	bf00      	nop
 800cf24:	0800cfc9 	.word	0x0800cfc9
 800cf28:	0800cff9 	.word	0x0800cff9
 800cf2c:	0800cff9 	.word	0x0800cff9
 800cf30:	0800cff9 	.word	0x0800cff9
 800cf34:	0800cff9 	.word	0x0800cff9
 800cf38:	0800cff9 	.word	0x0800cff9
 800cf3c:	0800cff9 	.word	0x0800cff9
 800cf40:	0800cff9 	.word	0x0800cff9
 800cf44:	0800cfd1 	.word	0x0800cfd1
 800cf48:	0800cff9 	.word	0x0800cff9
 800cf4c:	0800cff9 	.word	0x0800cff9
 800cf50:	0800cff9 	.word	0x0800cff9
 800cf54:	0800cff9 	.word	0x0800cff9
 800cf58:	0800cff9 	.word	0x0800cff9
 800cf5c:	0800cff9 	.word	0x0800cff9
 800cf60:	0800cff9 	.word	0x0800cff9
 800cf64:	0800cfd9 	.word	0x0800cfd9
 800cf68:	0800cff9 	.word	0x0800cff9
 800cf6c:	0800cff9 	.word	0x0800cff9
 800cf70:	0800cff9 	.word	0x0800cff9
 800cf74:	0800cff9 	.word	0x0800cff9
 800cf78:	0800cff9 	.word	0x0800cff9
 800cf7c:	0800cff9 	.word	0x0800cff9
 800cf80:	0800cff9 	.word	0x0800cff9
 800cf84:	0800cfe1 	.word	0x0800cfe1
 800cf88:	0800cff9 	.word	0x0800cff9
 800cf8c:	0800cff9 	.word	0x0800cff9
 800cf90:	0800cff9 	.word	0x0800cff9
 800cf94:	0800cff9 	.word	0x0800cff9
 800cf98:	0800cff9 	.word	0x0800cff9
 800cf9c:	0800cff9 	.word	0x0800cff9
 800cfa0:	0800cff9 	.word	0x0800cff9
 800cfa4:	0800cfe9 	.word	0x0800cfe9
 800cfa8:	0800cff9 	.word	0x0800cff9
 800cfac:	0800cff9 	.word	0x0800cff9
 800cfb0:	0800cff9 	.word	0x0800cff9
 800cfb4:	0800cff9 	.word	0x0800cff9
 800cfb8:	0800cff9 	.word	0x0800cff9
 800cfbc:	0800cff9 	.word	0x0800cff9
 800cfc0:	0800cff9 	.word	0x0800cff9
 800cfc4:	0800cff1 	.word	0x0800cff1
 800cfc8:	2301      	movs	r3, #1
 800cfca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cfce:	e0c3      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cfd0:	2304      	movs	r3, #4
 800cfd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cfd6:	e0bf      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cfd8:	2308      	movs	r3, #8
 800cfda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cfde:	e0bb      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cfe0:	2310      	movs	r3, #16
 800cfe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cfe6:	e0b7      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cfe8:	2320      	movs	r3, #32
 800cfea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cfee:	e0b3      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cff0:	2340      	movs	r3, #64	; 0x40
 800cff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cff6:	e0af      	b.n	800d158 <UART_SetConfig+0x5d8>
 800cff8:	2380      	movs	r3, #128	; 0x80
 800cffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cffe:	bf00      	nop
 800d000:	e0aa      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a86      	ldr	r2, [pc, #536]	; (800d220 <UART_SetConfig+0x6a0>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d132      	bne.n	800d072 <UART_SetConfig+0x4f2>
 800d00c:	4b83      	ldr	r3, [pc, #524]	; (800d21c <UART_SetConfig+0x69c>)
 800d00e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d010:	f003 0307 	and.w	r3, r3, #7
 800d014:	2b05      	cmp	r3, #5
 800d016:	d827      	bhi.n	800d068 <UART_SetConfig+0x4e8>
 800d018:	a201      	add	r2, pc, #4	; (adr r2, 800d020 <UART_SetConfig+0x4a0>)
 800d01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01e:	bf00      	nop
 800d020:	0800d039 	.word	0x0800d039
 800d024:	0800d041 	.word	0x0800d041
 800d028:	0800d049 	.word	0x0800d049
 800d02c:	0800d051 	.word	0x0800d051
 800d030:	0800d059 	.word	0x0800d059
 800d034:	0800d061 	.word	0x0800d061
 800d038:	2300      	movs	r3, #0
 800d03a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d03e:	e08b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d040:	2304      	movs	r3, #4
 800d042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d046:	e087      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d048:	2308      	movs	r3, #8
 800d04a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d04e:	e083      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d050:	2310      	movs	r3, #16
 800d052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d056:	e07f      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d058:	2320      	movs	r3, #32
 800d05a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d05e:	e07b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d060:	2340      	movs	r3, #64	; 0x40
 800d062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d066:	e077      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d068:	2380      	movs	r3, #128	; 0x80
 800d06a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d06e:	bf00      	nop
 800d070:	e072      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a6b      	ldr	r2, [pc, #428]	; (800d224 <UART_SetConfig+0x6a4>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d132      	bne.n	800d0e2 <UART_SetConfig+0x562>
 800d07c:	4b67      	ldr	r3, [pc, #412]	; (800d21c <UART_SetConfig+0x69c>)
 800d07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d080:	f003 0307 	and.w	r3, r3, #7
 800d084:	2b05      	cmp	r3, #5
 800d086:	d827      	bhi.n	800d0d8 <UART_SetConfig+0x558>
 800d088:	a201      	add	r2, pc, #4	; (adr r2, 800d090 <UART_SetConfig+0x510>)
 800d08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08e:	bf00      	nop
 800d090:	0800d0a9 	.word	0x0800d0a9
 800d094:	0800d0b1 	.word	0x0800d0b1
 800d098:	0800d0b9 	.word	0x0800d0b9
 800d09c:	0800d0c1 	.word	0x0800d0c1
 800d0a0:	0800d0c9 	.word	0x0800d0c9
 800d0a4:	0800d0d1 	.word	0x0800d0d1
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d0ae:	e053      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d0b0:	2304      	movs	r3, #4
 800d0b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d0b6:	e04f      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d0b8:	2308      	movs	r3, #8
 800d0ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d0be:	e04b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d0c0:	2310      	movs	r3, #16
 800d0c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d0c6:	e047      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d0c8:	2320      	movs	r3, #32
 800d0ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d0ce:	e043      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d0d0:	2340      	movs	r3, #64	; 0x40
 800d0d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d0d6:	e03f      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d0d8:	2380      	movs	r3, #128	; 0x80
 800d0da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d0de:	bf00      	nop
 800d0e0:	e03a      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a50      	ldr	r2, [pc, #320]	; (800d228 <UART_SetConfig+0x6a8>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d132      	bne.n	800d152 <UART_SetConfig+0x5d2>
 800d0ec:	4b4b      	ldr	r3, [pc, #300]	; (800d21c <UART_SetConfig+0x69c>)
 800d0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0f0:	f003 0307 	and.w	r3, r3, #7
 800d0f4:	2b05      	cmp	r3, #5
 800d0f6:	d827      	bhi.n	800d148 <UART_SetConfig+0x5c8>
 800d0f8:	a201      	add	r2, pc, #4	; (adr r2, 800d100 <UART_SetConfig+0x580>)
 800d0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fe:	bf00      	nop
 800d100:	0800d119 	.word	0x0800d119
 800d104:	0800d121 	.word	0x0800d121
 800d108:	0800d129 	.word	0x0800d129
 800d10c:	0800d131 	.word	0x0800d131
 800d110:	0800d139 	.word	0x0800d139
 800d114:	0800d141 	.word	0x0800d141
 800d118:	2302      	movs	r3, #2
 800d11a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d11e:	e01b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d120:	2304      	movs	r3, #4
 800d122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d126:	e017      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d128:	2308      	movs	r3, #8
 800d12a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d12e:	e013      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d130:	2310      	movs	r3, #16
 800d132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d136:	e00f      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d138:	2320      	movs	r3, #32
 800d13a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d13e:	e00b      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d140:	2340      	movs	r3, #64	; 0x40
 800d142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d146:	e007      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d148:	2380      	movs	r3, #128	; 0x80
 800d14a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d14e:	bf00      	nop
 800d150:	e002      	b.n	800d158 <UART_SetConfig+0x5d8>
 800d152:	2380      	movs	r3, #128	; 0x80
 800d154:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a32      	ldr	r2, [pc, #200]	; (800d228 <UART_SetConfig+0x6a8>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	f040 86f7 	bne.w	800df52 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d164:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d168:	2b08      	cmp	r3, #8
 800d16a:	f000 80c0 	beq.w	800d2ee <UART_SetConfig+0x76e>
 800d16e:	2b08      	cmp	r3, #8
 800d170:	dc04      	bgt.n	800d17c <UART_SetConfig+0x5fc>
 800d172:	2b02      	cmp	r3, #2
 800d174:	d00c      	beq.n	800d190 <UART_SetConfig+0x610>
 800d176:	2b04      	cmp	r3, #4
 800d178:	d065      	beq.n	800d246 <UART_SetConfig+0x6c6>
 800d17a:	e27a      	b.n	800d672 <UART_SetConfig+0xaf2>
 800d17c:	2b20      	cmp	r3, #32
 800d17e:	f000 81b0 	beq.w	800d4e2 <UART_SetConfig+0x962>
 800d182:	2b40      	cmp	r3, #64	; 0x40
 800d184:	f000 821e 	beq.w	800d5c4 <UART_SetConfig+0xa44>
 800d188:	2b10      	cmp	r3, #16
 800d18a:	f000 8104 	beq.w	800d396 <UART_SetConfig+0x816>
 800d18e:	e270      	b.n	800d672 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d190:	f7fe f85c 	bl	800b24c <HAL_RCCEx_GetD3PCLK1Freq>
 800d194:	4602      	mov	r2, r0
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d04e      	beq.n	800d23c <UART_SetConfig+0x6bc>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d048      	beq.n	800d238 <UART_SetConfig+0x6b8>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d042      	beq.n	800d234 <UART_SetConfig+0x6b4>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d03c      	beq.n	800d230 <UART_SetConfig+0x6b0>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ba:	2b04      	cmp	r3, #4
 800d1bc:	d036      	beq.n	800d22c <UART_SetConfig+0x6ac>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c2:	2b05      	cmp	r3, #5
 800d1c4:	d026      	beq.n	800d214 <UART_SetConfig+0x694>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ca:	2b06      	cmp	r3, #6
 800d1cc:	d020      	beq.n	800d210 <UART_SetConfig+0x690>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d2:	2b07      	cmp	r3, #7
 800d1d4:	d01a      	beq.n	800d20c <UART_SetConfig+0x68c>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1da:	2b08      	cmp	r3, #8
 800d1dc:	d014      	beq.n	800d208 <UART_SetConfig+0x688>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e2:	2b09      	cmp	r3, #9
 800d1e4:	d00e      	beq.n	800d204 <UART_SetConfig+0x684>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ea:	2b0a      	cmp	r3, #10
 800d1ec:	d008      	beq.n	800d200 <UART_SetConfig+0x680>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f2:	2b0b      	cmp	r3, #11
 800d1f4:	d102      	bne.n	800d1fc <UART_SetConfig+0x67c>
 800d1f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1fa:	e020      	b.n	800d23e <UART_SetConfig+0x6be>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e01e      	b.n	800d23e <UART_SetConfig+0x6be>
 800d200:	2380      	movs	r3, #128	; 0x80
 800d202:	e01c      	b.n	800d23e <UART_SetConfig+0x6be>
 800d204:	2340      	movs	r3, #64	; 0x40
 800d206:	e01a      	b.n	800d23e <UART_SetConfig+0x6be>
 800d208:	2320      	movs	r3, #32
 800d20a:	e018      	b.n	800d23e <UART_SetConfig+0x6be>
 800d20c:	2310      	movs	r3, #16
 800d20e:	e016      	b.n	800d23e <UART_SetConfig+0x6be>
 800d210:	230c      	movs	r3, #12
 800d212:	e014      	b.n	800d23e <UART_SetConfig+0x6be>
 800d214:	230a      	movs	r3, #10
 800d216:	e012      	b.n	800d23e <UART_SetConfig+0x6be>
 800d218:	40011400 	.word	0x40011400
 800d21c:	58024400 	.word	0x58024400
 800d220:	40007800 	.word	0x40007800
 800d224:	40007c00 	.word	0x40007c00
 800d228:	58000c00 	.word	0x58000c00
 800d22c:	2308      	movs	r3, #8
 800d22e:	e006      	b.n	800d23e <UART_SetConfig+0x6be>
 800d230:	2306      	movs	r3, #6
 800d232:	e004      	b.n	800d23e <UART_SetConfig+0x6be>
 800d234:	2304      	movs	r3, #4
 800d236:	e002      	b.n	800d23e <UART_SetConfig+0x6be>
 800d238:	2302      	movs	r3, #2
 800d23a:	e000      	b.n	800d23e <UART_SetConfig+0x6be>
 800d23c:	2301      	movs	r3, #1
 800d23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d244:	e219      	b.n	800d67a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d246:	f107 0318 	add.w	r3, r7, #24
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe f814 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d250:	69fa      	ldr	r2, [r7, #28]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	2b00      	cmp	r3, #0
 800d258:	d044      	beq.n	800d2e4 <UART_SetConfig+0x764>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d03e      	beq.n	800d2e0 <UART_SetConfig+0x760>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d266:	2b02      	cmp	r3, #2
 800d268:	d038      	beq.n	800d2dc <UART_SetConfig+0x75c>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26e:	2b03      	cmp	r3, #3
 800d270:	d032      	beq.n	800d2d8 <UART_SetConfig+0x758>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d276:	2b04      	cmp	r3, #4
 800d278:	d02c      	beq.n	800d2d4 <UART_SetConfig+0x754>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27e:	2b05      	cmp	r3, #5
 800d280:	d026      	beq.n	800d2d0 <UART_SetConfig+0x750>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	2b06      	cmp	r3, #6
 800d288:	d020      	beq.n	800d2cc <UART_SetConfig+0x74c>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28e:	2b07      	cmp	r3, #7
 800d290:	d01a      	beq.n	800d2c8 <UART_SetConfig+0x748>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d296:	2b08      	cmp	r3, #8
 800d298:	d014      	beq.n	800d2c4 <UART_SetConfig+0x744>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29e:	2b09      	cmp	r3, #9
 800d2a0:	d00e      	beq.n	800d2c0 <UART_SetConfig+0x740>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a6:	2b0a      	cmp	r3, #10
 800d2a8:	d008      	beq.n	800d2bc <UART_SetConfig+0x73c>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ae:	2b0b      	cmp	r3, #11
 800d2b0:	d102      	bne.n	800d2b8 <UART_SetConfig+0x738>
 800d2b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2b6:	e016      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e014      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2bc:	2380      	movs	r3, #128	; 0x80
 800d2be:	e012      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2c0:	2340      	movs	r3, #64	; 0x40
 800d2c2:	e010      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2c4:	2320      	movs	r3, #32
 800d2c6:	e00e      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	e00c      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2cc:	230c      	movs	r3, #12
 800d2ce:	e00a      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2d0:	230a      	movs	r3, #10
 800d2d2:	e008      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2d4:	2308      	movs	r3, #8
 800d2d6:	e006      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2d8:	2306      	movs	r3, #6
 800d2da:	e004      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2dc:	2304      	movs	r3, #4
 800d2de:	e002      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	e000      	b.n	800d2e6 <UART_SetConfig+0x766>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2ec:	e1c5      	b.n	800d67a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2ee:	f107 030c 	add.w	r3, r7, #12
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe f90c 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d044      	beq.n	800d38c <UART_SetConfig+0x80c>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d306:	2b01      	cmp	r3, #1
 800d308:	d03e      	beq.n	800d388 <UART_SetConfig+0x808>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d038      	beq.n	800d384 <UART_SetConfig+0x804>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d316:	2b03      	cmp	r3, #3
 800d318:	d032      	beq.n	800d380 <UART_SetConfig+0x800>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31e:	2b04      	cmp	r3, #4
 800d320:	d02c      	beq.n	800d37c <UART_SetConfig+0x7fc>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d326:	2b05      	cmp	r3, #5
 800d328:	d026      	beq.n	800d378 <UART_SetConfig+0x7f8>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32e:	2b06      	cmp	r3, #6
 800d330:	d020      	beq.n	800d374 <UART_SetConfig+0x7f4>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d336:	2b07      	cmp	r3, #7
 800d338:	d01a      	beq.n	800d370 <UART_SetConfig+0x7f0>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33e:	2b08      	cmp	r3, #8
 800d340:	d014      	beq.n	800d36c <UART_SetConfig+0x7ec>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	2b09      	cmp	r3, #9
 800d348:	d00e      	beq.n	800d368 <UART_SetConfig+0x7e8>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	2b0a      	cmp	r3, #10
 800d350:	d008      	beq.n	800d364 <UART_SetConfig+0x7e4>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d356:	2b0b      	cmp	r3, #11
 800d358:	d102      	bne.n	800d360 <UART_SetConfig+0x7e0>
 800d35a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d35e:	e016      	b.n	800d38e <UART_SetConfig+0x80e>
 800d360:	2301      	movs	r3, #1
 800d362:	e014      	b.n	800d38e <UART_SetConfig+0x80e>
 800d364:	2380      	movs	r3, #128	; 0x80
 800d366:	e012      	b.n	800d38e <UART_SetConfig+0x80e>
 800d368:	2340      	movs	r3, #64	; 0x40
 800d36a:	e010      	b.n	800d38e <UART_SetConfig+0x80e>
 800d36c:	2320      	movs	r3, #32
 800d36e:	e00e      	b.n	800d38e <UART_SetConfig+0x80e>
 800d370:	2310      	movs	r3, #16
 800d372:	e00c      	b.n	800d38e <UART_SetConfig+0x80e>
 800d374:	230c      	movs	r3, #12
 800d376:	e00a      	b.n	800d38e <UART_SetConfig+0x80e>
 800d378:	230a      	movs	r3, #10
 800d37a:	e008      	b.n	800d38e <UART_SetConfig+0x80e>
 800d37c:	2308      	movs	r3, #8
 800d37e:	e006      	b.n	800d38e <UART_SetConfig+0x80e>
 800d380:	2306      	movs	r3, #6
 800d382:	e004      	b.n	800d38e <UART_SetConfig+0x80e>
 800d384:	2304      	movs	r3, #4
 800d386:	e002      	b.n	800d38e <UART_SetConfig+0x80e>
 800d388:	2302      	movs	r3, #2
 800d38a:	e000      	b.n	800d38e <UART_SetConfig+0x80e>
 800d38c:	2301      	movs	r3, #1
 800d38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d394:	e171      	b.n	800d67a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d396:	4b7a      	ldr	r3, [pc, #488]	; (800d580 <UART_SetConfig+0xa00>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f003 0320 	and.w	r3, r3, #32
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d054      	beq.n	800d44c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d3a2:	4b77      	ldr	r3, [pc, #476]	; (800d580 <UART_SetConfig+0xa00>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	08db      	lsrs	r3, r3, #3
 800d3a8:	f003 0303 	and.w	r3, r3, #3
 800d3ac:	4a75      	ldr	r2, [pc, #468]	; (800d584 <UART_SetConfig+0xa04>)
 800d3ae:	40da      	lsrs	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d044      	beq.n	800d442 <UART_SetConfig+0x8c2>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d03e      	beq.n	800d43e <UART_SetConfig+0x8be>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d038      	beq.n	800d43a <UART_SetConfig+0x8ba>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d032      	beq.n	800d436 <UART_SetConfig+0x8b6>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d4:	2b04      	cmp	r3, #4
 800d3d6:	d02c      	beq.n	800d432 <UART_SetConfig+0x8b2>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3dc:	2b05      	cmp	r3, #5
 800d3de:	d026      	beq.n	800d42e <UART_SetConfig+0x8ae>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	2b06      	cmp	r3, #6
 800d3e6:	d020      	beq.n	800d42a <UART_SetConfig+0x8aa>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ec:	2b07      	cmp	r3, #7
 800d3ee:	d01a      	beq.n	800d426 <UART_SetConfig+0x8a6>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	2b08      	cmp	r3, #8
 800d3f6:	d014      	beq.n	800d422 <UART_SetConfig+0x8a2>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fc:	2b09      	cmp	r3, #9
 800d3fe:	d00e      	beq.n	800d41e <UART_SetConfig+0x89e>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d404:	2b0a      	cmp	r3, #10
 800d406:	d008      	beq.n	800d41a <UART_SetConfig+0x89a>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40c:	2b0b      	cmp	r3, #11
 800d40e:	d102      	bne.n	800d416 <UART_SetConfig+0x896>
 800d410:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d414:	e016      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d416:	2301      	movs	r3, #1
 800d418:	e014      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d41a:	2380      	movs	r3, #128	; 0x80
 800d41c:	e012      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d41e:	2340      	movs	r3, #64	; 0x40
 800d420:	e010      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d422:	2320      	movs	r3, #32
 800d424:	e00e      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d426:	2310      	movs	r3, #16
 800d428:	e00c      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d42a:	230c      	movs	r3, #12
 800d42c:	e00a      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d42e:	230a      	movs	r3, #10
 800d430:	e008      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d432:	2308      	movs	r3, #8
 800d434:	e006      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d436:	2306      	movs	r3, #6
 800d438:	e004      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d43a:	2304      	movs	r3, #4
 800d43c:	e002      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d43e:	2302      	movs	r3, #2
 800d440:	e000      	b.n	800d444 <UART_SetConfig+0x8c4>
 800d442:	2301      	movs	r3, #1
 800d444:	fbb2 f3f3 	udiv	r3, r2, r3
 800d448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800d44a:	e116      	b.n	800d67a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d450:	2b00      	cmp	r3, #0
 800d452:	d043      	beq.n	800d4dc <UART_SetConfig+0x95c>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d03d      	beq.n	800d4d8 <UART_SetConfig+0x958>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d460:	2b02      	cmp	r3, #2
 800d462:	d037      	beq.n	800d4d4 <UART_SetConfig+0x954>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d468:	2b03      	cmp	r3, #3
 800d46a:	d031      	beq.n	800d4d0 <UART_SetConfig+0x950>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d470:	2b04      	cmp	r3, #4
 800d472:	d02b      	beq.n	800d4cc <UART_SetConfig+0x94c>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d478:	2b05      	cmp	r3, #5
 800d47a:	d025      	beq.n	800d4c8 <UART_SetConfig+0x948>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d480:	2b06      	cmp	r3, #6
 800d482:	d01f      	beq.n	800d4c4 <UART_SetConfig+0x944>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d488:	2b07      	cmp	r3, #7
 800d48a:	d019      	beq.n	800d4c0 <UART_SetConfig+0x940>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d490:	2b08      	cmp	r3, #8
 800d492:	d013      	beq.n	800d4bc <UART_SetConfig+0x93c>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d498:	2b09      	cmp	r3, #9
 800d49a:	d00d      	beq.n	800d4b8 <UART_SetConfig+0x938>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a0:	2b0a      	cmp	r3, #10
 800d4a2:	d007      	beq.n	800d4b4 <UART_SetConfig+0x934>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a8:	2b0b      	cmp	r3, #11
 800d4aa:	d101      	bne.n	800d4b0 <UART_SetConfig+0x930>
 800d4ac:	4b36      	ldr	r3, [pc, #216]	; (800d588 <UART_SetConfig+0xa08>)
 800d4ae:	e016      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4b0:	4b34      	ldr	r3, [pc, #208]	; (800d584 <UART_SetConfig+0xa04>)
 800d4b2:	e014      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4b4:	4b35      	ldr	r3, [pc, #212]	; (800d58c <UART_SetConfig+0xa0c>)
 800d4b6:	e012      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4b8:	4b35      	ldr	r3, [pc, #212]	; (800d590 <UART_SetConfig+0xa10>)
 800d4ba:	e010      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4bc:	4b35      	ldr	r3, [pc, #212]	; (800d594 <UART_SetConfig+0xa14>)
 800d4be:	e00e      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4c0:	4b35      	ldr	r3, [pc, #212]	; (800d598 <UART_SetConfig+0xa18>)
 800d4c2:	e00c      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4c4:	4b35      	ldr	r3, [pc, #212]	; (800d59c <UART_SetConfig+0xa1c>)
 800d4c6:	e00a      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4c8:	4b35      	ldr	r3, [pc, #212]	; (800d5a0 <UART_SetConfig+0xa20>)
 800d4ca:	e008      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4cc:	4b35      	ldr	r3, [pc, #212]	; (800d5a4 <UART_SetConfig+0xa24>)
 800d4ce:	e006      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4d0:	4b35      	ldr	r3, [pc, #212]	; (800d5a8 <UART_SetConfig+0xa28>)
 800d4d2:	e004      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4d4:	4b35      	ldr	r3, [pc, #212]	; (800d5ac <UART_SetConfig+0xa2c>)
 800d4d6:	e002      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4d8:	4b35      	ldr	r3, [pc, #212]	; (800d5b0 <UART_SetConfig+0xa30>)
 800d4da:	e000      	b.n	800d4de <UART_SetConfig+0x95e>
 800d4dc:	4b29      	ldr	r3, [pc, #164]	; (800d584 <UART_SetConfig+0xa04>)
 800d4de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4e0:	e0cb      	b.n	800d67a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d046      	beq.n	800d578 <UART_SetConfig+0x9f8>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d040      	beq.n	800d574 <UART_SetConfig+0x9f4>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d03a      	beq.n	800d570 <UART_SetConfig+0x9f0>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d034      	beq.n	800d56c <UART_SetConfig+0x9ec>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d506:	2b04      	cmp	r3, #4
 800d508:	d02e      	beq.n	800d568 <UART_SetConfig+0x9e8>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	2b05      	cmp	r3, #5
 800d510:	d028      	beq.n	800d564 <UART_SetConfig+0x9e4>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	2b06      	cmp	r3, #6
 800d518:	d022      	beq.n	800d560 <UART_SetConfig+0x9e0>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51e:	2b07      	cmp	r3, #7
 800d520:	d01c      	beq.n	800d55c <UART_SetConfig+0x9dc>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d526:	2b08      	cmp	r3, #8
 800d528:	d016      	beq.n	800d558 <UART_SetConfig+0x9d8>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52e:	2b09      	cmp	r3, #9
 800d530:	d00f      	beq.n	800d552 <UART_SetConfig+0x9d2>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d536:	2b0a      	cmp	r3, #10
 800d538:	d008      	beq.n	800d54c <UART_SetConfig+0x9cc>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53e:	2b0b      	cmp	r3, #11
 800d540:	d102      	bne.n	800d548 <UART_SetConfig+0x9c8>
 800d542:	f643 5309 	movw	r3, #15625	; 0x3d09
 800d546:	e018      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d548:	4b13      	ldr	r3, [pc, #76]	; (800d598 <UART_SetConfig+0xa18>)
 800d54a:	e016      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d54c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d550:	e013      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d552:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d556:	e010      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d558:	4b16      	ldr	r3, [pc, #88]	; (800d5b4 <UART_SetConfig+0xa34>)
 800d55a:	e00e      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <UART_SetConfig+0xa08>)
 800d55e:	e00c      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d560:	4b15      	ldr	r3, [pc, #84]	; (800d5b8 <UART_SetConfig+0xa38>)
 800d562:	e00a      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d564:	4b15      	ldr	r3, [pc, #84]	; (800d5bc <UART_SetConfig+0xa3c>)
 800d566:	e008      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d568:	4b08      	ldr	r3, [pc, #32]	; (800d58c <UART_SetConfig+0xa0c>)
 800d56a:	e006      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d56c:	4b14      	ldr	r3, [pc, #80]	; (800d5c0 <UART_SetConfig+0xa40>)
 800d56e:	e004      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d570:	4b07      	ldr	r3, [pc, #28]	; (800d590 <UART_SetConfig+0xa10>)
 800d572:	e002      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d574:	4b07      	ldr	r3, [pc, #28]	; (800d594 <UART_SetConfig+0xa14>)
 800d576:	e000      	b.n	800d57a <UART_SetConfig+0x9fa>
 800d578:	4b07      	ldr	r3, [pc, #28]	; (800d598 <UART_SetConfig+0xa18>)
 800d57a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d57c:	e07d      	b.n	800d67a <UART_SetConfig+0xafa>
 800d57e:	bf00      	nop
 800d580:	58024400 	.word	0x58024400
 800d584:	03d09000 	.word	0x03d09000
 800d588:	0003d090 	.word	0x0003d090
 800d58c:	0007a120 	.word	0x0007a120
 800d590:	000f4240 	.word	0x000f4240
 800d594:	001e8480 	.word	0x001e8480
 800d598:	003d0900 	.word	0x003d0900
 800d59c:	00516155 	.word	0x00516155
 800d5a0:	0061a800 	.word	0x0061a800
 800d5a4:	007a1200 	.word	0x007a1200
 800d5a8:	00a2c2aa 	.word	0x00a2c2aa
 800d5ac:	00f42400 	.word	0x00f42400
 800d5b0:	01e84800 	.word	0x01e84800
 800d5b4:	0001e848 	.word	0x0001e848
 800d5b8:	00051615 	.word	0x00051615
 800d5bc:	00061a80 	.word	0x00061a80
 800d5c0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d04e      	beq.n	800d66a <UART_SetConfig+0xaea>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d047      	beq.n	800d664 <UART_SetConfig+0xae4>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	d040      	beq.n	800d65e <UART_SetConfig+0xade>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e0:	2b03      	cmp	r3, #3
 800d5e2:	d039      	beq.n	800d658 <UART_SetConfig+0xad8>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e8:	2b04      	cmp	r3, #4
 800d5ea:	d032      	beq.n	800d652 <UART_SetConfig+0xad2>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f0:	2b05      	cmp	r3, #5
 800d5f2:	d02b      	beq.n	800d64c <UART_SetConfig+0xacc>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	2b06      	cmp	r3, #6
 800d5fa:	d024      	beq.n	800d646 <UART_SetConfig+0xac6>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d600:	2b07      	cmp	r3, #7
 800d602:	d01d      	beq.n	800d640 <UART_SetConfig+0xac0>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d608:	2b08      	cmp	r3, #8
 800d60a:	d016      	beq.n	800d63a <UART_SetConfig+0xaba>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d610:	2b09      	cmp	r3, #9
 800d612:	d00f      	beq.n	800d634 <UART_SetConfig+0xab4>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d618:	2b0a      	cmp	r3, #10
 800d61a:	d008      	beq.n	800d62e <UART_SetConfig+0xaae>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d620:	2b0b      	cmp	r3, #11
 800d622:	d101      	bne.n	800d628 <UART_SetConfig+0xaa8>
 800d624:	2380      	movs	r3, #128	; 0x80
 800d626:	e022      	b.n	800d66e <UART_SetConfig+0xaee>
 800d628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d62c:	e01f      	b.n	800d66e <UART_SetConfig+0xaee>
 800d62e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d632:	e01c      	b.n	800d66e <UART_SetConfig+0xaee>
 800d634:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d638:	e019      	b.n	800d66e <UART_SetConfig+0xaee>
 800d63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d63e:	e016      	b.n	800d66e <UART_SetConfig+0xaee>
 800d640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d644:	e013      	b.n	800d66e <UART_SetConfig+0xaee>
 800d646:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800d64a:	e010      	b.n	800d66e <UART_SetConfig+0xaee>
 800d64c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800d650:	e00d      	b.n	800d66e <UART_SetConfig+0xaee>
 800d652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d656:	e00a      	b.n	800d66e <UART_SetConfig+0xaee>
 800d658:	f241 5355 	movw	r3, #5461	; 0x1555
 800d65c:	e007      	b.n	800d66e <UART_SetConfig+0xaee>
 800d65e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d662:	e004      	b.n	800d66e <UART_SetConfig+0xaee>
 800d664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d668:	e001      	b.n	800d66e <UART_SetConfig+0xaee>
 800d66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d66e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d670:	e003      	b.n	800d67a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800d678:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f001 83e8 	beq.w	800ee52 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	4613      	mov	r3, r2
 800d688:	005b      	lsls	r3, r3, #1
 800d68a:	4413      	add	r3, r2
 800d68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d68e:	429a      	cmp	r2, r3
 800d690:	d305      	bcc.n	800d69e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d904      	bls.n	800d6a8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6a4:	f001 bbd5 	b.w	800ee52 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800d6a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d6ac:	2b08      	cmp	r3, #8
 800d6ae:	f000 8154 	beq.w	800d95a <UART_SetConfig+0xdda>
 800d6b2:	2b08      	cmp	r3, #8
 800d6b4:	dc06      	bgt.n	800d6c4 <UART_SetConfig+0xb44>
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d00f      	beq.n	800d6da <UART_SetConfig+0xb5a>
 800d6ba:	2b04      	cmp	r3, #4
 800d6bc:	f000 80ac 	beq.w	800d818 <UART_SetConfig+0xc98>
 800d6c0:	f000 bc30 	b.w	800df24 <UART_SetConfig+0x13a4>
 800d6c4:	2b20      	cmp	r3, #32
 800d6c6:	f000 832d 	beq.w	800dd24 <UART_SetConfig+0x11a4>
 800d6ca:	2b40      	cmp	r3, #64	; 0x40
 800d6cc:	f000 83a5 	beq.w	800de1a <UART_SetConfig+0x129a>
 800d6d0:	2b10      	cmp	r3, #16
 800d6d2:	f000 81e3 	beq.w	800da9c <UART_SetConfig+0xf1c>
 800d6d6:	f000 bc25 	b.w	800df24 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d6da:	f7fd fdb7 	bl	800b24c <HAL_RCCEx_GetD3PCLK1Freq>
 800d6de:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f04f 0100 	mov.w	r1, #0
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d067      	beq.n	800d7c0 <UART_SetConfig+0xc40>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d05e      	beq.n	800d7b6 <UART_SetConfig+0xc36>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d055      	beq.n	800d7ac <UART_SetConfig+0xc2c>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d704:	2b03      	cmp	r3, #3
 800d706:	d04c      	beq.n	800d7a2 <UART_SetConfig+0xc22>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	2b04      	cmp	r3, #4
 800d70e:	d043      	beq.n	800d798 <UART_SetConfig+0xc18>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	2b05      	cmp	r3, #5
 800d716:	d03a      	beq.n	800d78e <UART_SetConfig+0xc0e>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71c:	2b06      	cmp	r3, #6
 800d71e:	d031      	beq.n	800d784 <UART_SetConfig+0xc04>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d724:	2b07      	cmp	r3, #7
 800d726:	d028      	beq.n	800d77a <UART_SetConfig+0xbfa>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72c:	2b08      	cmp	r3, #8
 800d72e:	d01f      	beq.n	800d770 <UART_SetConfig+0xbf0>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d734:	2b09      	cmp	r3, #9
 800d736:	d016      	beq.n	800d766 <UART_SetConfig+0xbe6>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73c:	2b0a      	cmp	r3, #10
 800d73e:	d00d      	beq.n	800d75c <UART_SetConfig+0xbdc>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d744:	2b0b      	cmp	r3, #11
 800d746:	d104      	bne.n	800d752 <UART_SetConfig+0xbd2>
 800d748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d74c:	f04f 0400 	mov.w	r4, #0
 800d750:	e03a      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d752:	f04f 0301 	mov.w	r3, #1
 800d756:	f04f 0400 	mov.w	r4, #0
 800d75a:	e035      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d75c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d760:	f04f 0400 	mov.w	r4, #0
 800d764:	e030      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d766:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d76a:	f04f 0400 	mov.w	r4, #0
 800d76e:	e02b      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d770:	f04f 0320 	mov.w	r3, #32
 800d774:	f04f 0400 	mov.w	r4, #0
 800d778:	e026      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d77a:	f04f 0310 	mov.w	r3, #16
 800d77e:	f04f 0400 	mov.w	r4, #0
 800d782:	e021      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d784:	f04f 030c 	mov.w	r3, #12
 800d788:	f04f 0400 	mov.w	r4, #0
 800d78c:	e01c      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d78e:	f04f 030a 	mov.w	r3, #10
 800d792:	f04f 0400 	mov.w	r4, #0
 800d796:	e017      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d798:	f04f 0308 	mov.w	r3, #8
 800d79c:	f04f 0400 	mov.w	r4, #0
 800d7a0:	e012      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d7a2:	f04f 0306 	mov.w	r3, #6
 800d7a6:	f04f 0400 	mov.w	r4, #0
 800d7aa:	e00d      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d7ac:	f04f 0304 	mov.w	r3, #4
 800d7b0:	f04f 0400 	mov.w	r4, #0
 800d7b4:	e008      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d7b6:	f04f 0302 	mov.w	r3, #2
 800d7ba:	f04f 0400 	mov.w	r4, #0
 800d7be:	e003      	b.n	800d7c8 <UART_SetConfig+0xc48>
 800d7c0:	f04f 0301 	mov.w	r3, #1
 800d7c4:	f04f 0400 	mov.w	r4, #0
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	4623      	mov	r3, r4
 800d7cc:	f7f2 fdd8 	bl	8000380 <__aeabi_uldivmod>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	4622      	mov	r2, r4
 800d7d8:	f04f 0300 	mov.w	r3, #0
 800d7dc:	f04f 0400 	mov.w	r4, #0
 800d7e0:	0214      	lsls	r4, r2, #8
 800d7e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d7e6:	020b      	lsls	r3, r1, #8
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	6852      	ldr	r2, [r2, #4]
 800d7ec:	0852      	lsrs	r2, r2, #1
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	f04f 0200 	mov.w	r2, #0
 800d7f4:	eb13 0b01 	adds.w	fp, r3, r1
 800d7f8:	eb44 0c02 	adc.w	ip, r4, r2
 800d7fc:	4658      	mov	r0, fp
 800d7fe:	4661      	mov	r1, ip
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	f04f 0400 	mov.w	r4, #0
 800d808:	461a      	mov	r2, r3
 800d80a:	4623      	mov	r3, r4
 800d80c:	f7f2 fdb8 	bl	8000380 <__aeabi_uldivmod>
 800d810:	4603      	mov	r3, r0
 800d812:	460c      	mov	r4, r1
 800d814:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d816:	e389      	b.n	800df2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d818:	f107 0318 	add.w	r3, r7, #24
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fd fd2b 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	4618      	mov	r0, r3
 800d826:	f04f 0100 	mov.w	r1, #0
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d067      	beq.n	800d902 <UART_SetConfig+0xd82>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	2b01      	cmp	r3, #1
 800d838:	d05e      	beq.n	800d8f8 <UART_SetConfig+0xd78>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d055      	beq.n	800d8ee <UART_SetConfig+0xd6e>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d846:	2b03      	cmp	r3, #3
 800d848:	d04c      	beq.n	800d8e4 <UART_SetConfig+0xd64>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84e:	2b04      	cmp	r3, #4
 800d850:	d043      	beq.n	800d8da <UART_SetConfig+0xd5a>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d856:	2b05      	cmp	r3, #5
 800d858:	d03a      	beq.n	800d8d0 <UART_SetConfig+0xd50>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85e:	2b06      	cmp	r3, #6
 800d860:	d031      	beq.n	800d8c6 <UART_SetConfig+0xd46>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d866:	2b07      	cmp	r3, #7
 800d868:	d028      	beq.n	800d8bc <UART_SetConfig+0xd3c>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86e:	2b08      	cmp	r3, #8
 800d870:	d01f      	beq.n	800d8b2 <UART_SetConfig+0xd32>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	2b09      	cmp	r3, #9
 800d878:	d016      	beq.n	800d8a8 <UART_SetConfig+0xd28>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87e:	2b0a      	cmp	r3, #10
 800d880:	d00d      	beq.n	800d89e <UART_SetConfig+0xd1e>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d886:	2b0b      	cmp	r3, #11
 800d888:	d104      	bne.n	800d894 <UART_SetConfig+0xd14>
 800d88a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d88e:	f04f 0400 	mov.w	r4, #0
 800d892:	e03a      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d894:	f04f 0301 	mov.w	r3, #1
 800d898:	f04f 0400 	mov.w	r4, #0
 800d89c:	e035      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d89e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d8a2:	f04f 0400 	mov.w	r4, #0
 800d8a6:	e030      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d8ac:	f04f 0400 	mov.w	r4, #0
 800d8b0:	e02b      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8b2:	f04f 0320 	mov.w	r3, #32
 800d8b6:	f04f 0400 	mov.w	r4, #0
 800d8ba:	e026      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8bc:	f04f 0310 	mov.w	r3, #16
 800d8c0:	f04f 0400 	mov.w	r4, #0
 800d8c4:	e021      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8c6:	f04f 030c 	mov.w	r3, #12
 800d8ca:	f04f 0400 	mov.w	r4, #0
 800d8ce:	e01c      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8d0:	f04f 030a 	mov.w	r3, #10
 800d8d4:	f04f 0400 	mov.w	r4, #0
 800d8d8:	e017      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8da:	f04f 0308 	mov.w	r3, #8
 800d8de:	f04f 0400 	mov.w	r4, #0
 800d8e2:	e012      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8e4:	f04f 0306 	mov.w	r3, #6
 800d8e8:	f04f 0400 	mov.w	r4, #0
 800d8ec:	e00d      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8ee:	f04f 0304 	mov.w	r3, #4
 800d8f2:	f04f 0400 	mov.w	r4, #0
 800d8f6:	e008      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d8f8:	f04f 0302 	mov.w	r3, #2
 800d8fc:	f04f 0400 	mov.w	r4, #0
 800d900:	e003      	b.n	800d90a <UART_SetConfig+0xd8a>
 800d902:	f04f 0301 	mov.w	r3, #1
 800d906:	f04f 0400 	mov.w	r4, #0
 800d90a:	461a      	mov	r2, r3
 800d90c:	4623      	mov	r3, r4
 800d90e:	f7f2 fd37 	bl	8000380 <__aeabi_uldivmod>
 800d912:	4603      	mov	r3, r0
 800d914:	460c      	mov	r4, r1
 800d916:	4619      	mov	r1, r3
 800d918:	4622      	mov	r2, r4
 800d91a:	f04f 0300 	mov.w	r3, #0
 800d91e:	f04f 0400 	mov.w	r4, #0
 800d922:	0214      	lsls	r4, r2, #8
 800d924:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d928:	020b      	lsls	r3, r1, #8
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6852      	ldr	r2, [r2, #4]
 800d92e:	0852      	lsrs	r2, r2, #1
 800d930:	4611      	mov	r1, r2
 800d932:	f04f 0200 	mov.w	r2, #0
 800d936:	eb13 0b01 	adds.w	fp, r3, r1
 800d93a:	eb44 0c02 	adc.w	ip, r4, r2
 800d93e:	4658      	mov	r0, fp
 800d940:	4661      	mov	r1, ip
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	f04f 0400 	mov.w	r4, #0
 800d94a:	461a      	mov	r2, r3
 800d94c:	4623      	mov	r3, r4
 800d94e:	f7f2 fd17 	bl	8000380 <__aeabi_uldivmod>
 800d952:	4603      	mov	r3, r0
 800d954:	460c      	mov	r4, r1
 800d956:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d958:	e2e8      	b.n	800df2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d95a:	f107 030c 	add.w	r3, r7, #12
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fd fdd6 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	4618      	mov	r0, r3
 800d968:	f04f 0100 	mov.w	r1, #0
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d970:	2b00      	cmp	r3, #0
 800d972:	d067      	beq.n	800da44 <UART_SetConfig+0xec4>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d05e      	beq.n	800da3a <UART_SetConfig+0xeba>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d980:	2b02      	cmp	r3, #2
 800d982:	d055      	beq.n	800da30 <UART_SetConfig+0xeb0>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d04c      	beq.n	800da26 <UART_SetConfig+0xea6>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d990:	2b04      	cmp	r3, #4
 800d992:	d043      	beq.n	800da1c <UART_SetConfig+0xe9c>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d998:	2b05      	cmp	r3, #5
 800d99a:	d03a      	beq.n	800da12 <UART_SetConfig+0xe92>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a0:	2b06      	cmp	r3, #6
 800d9a2:	d031      	beq.n	800da08 <UART_SetConfig+0xe88>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a8:	2b07      	cmp	r3, #7
 800d9aa:	d028      	beq.n	800d9fe <UART_SetConfig+0xe7e>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b0:	2b08      	cmp	r3, #8
 800d9b2:	d01f      	beq.n	800d9f4 <UART_SetConfig+0xe74>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b8:	2b09      	cmp	r3, #9
 800d9ba:	d016      	beq.n	800d9ea <UART_SetConfig+0xe6a>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c0:	2b0a      	cmp	r3, #10
 800d9c2:	d00d      	beq.n	800d9e0 <UART_SetConfig+0xe60>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c8:	2b0b      	cmp	r3, #11
 800d9ca:	d104      	bne.n	800d9d6 <UART_SetConfig+0xe56>
 800d9cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9d0:	f04f 0400 	mov.w	r4, #0
 800d9d4:	e03a      	b.n	800da4c <UART_SetConfig+0xecc>
 800d9d6:	f04f 0301 	mov.w	r3, #1
 800d9da:	f04f 0400 	mov.w	r4, #0
 800d9de:	e035      	b.n	800da4c <UART_SetConfig+0xecc>
 800d9e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d9e4:	f04f 0400 	mov.w	r4, #0
 800d9e8:	e030      	b.n	800da4c <UART_SetConfig+0xecc>
 800d9ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d9ee:	f04f 0400 	mov.w	r4, #0
 800d9f2:	e02b      	b.n	800da4c <UART_SetConfig+0xecc>
 800d9f4:	f04f 0320 	mov.w	r3, #32
 800d9f8:	f04f 0400 	mov.w	r4, #0
 800d9fc:	e026      	b.n	800da4c <UART_SetConfig+0xecc>
 800d9fe:	f04f 0310 	mov.w	r3, #16
 800da02:	f04f 0400 	mov.w	r4, #0
 800da06:	e021      	b.n	800da4c <UART_SetConfig+0xecc>
 800da08:	f04f 030c 	mov.w	r3, #12
 800da0c:	f04f 0400 	mov.w	r4, #0
 800da10:	e01c      	b.n	800da4c <UART_SetConfig+0xecc>
 800da12:	f04f 030a 	mov.w	r3, #10
 800da16:	f04f 0400 	mov.w	r4, #0
 800da1a:	e017      	b.n	800da4c <UART_SetConfig+0xecc>
 800da1c:	f04f 0308 	mov.w	r3, #8
 800da20:	f04f 0400 	mov.w	r4, #0
 800da24:	e012      	b.n	800da4c <UART_SetConfig+0xecc>
 800da26:	f04f 0306 	mov.w	r3, #6
 800da2a:	f04f 0400 	mov.w	r4, #0
 800da2e:	e00d      	b.n	800da4c <UART_SetConfig+0xecc>
 800da30:	f04f 0304 	mov.w	r3, #4
 800da34:	f04f 0400 	mov.w	r4, #0
 800da38:	e008      	b.n	800da4c <UART_SetConfig+0xecc>
 800da3a:	f04f 0302 	mov.w	r3, #2
 800da3e:	f04f 0400 	mov.w	r4, #0
 800da42:	e003      	b.n	800da4c <UART_SetConfig+0xecc>
 800da44:	f04f 0301 	mov.w	r3, #1
 800da48:	f04f 0400 	mov.w	r4, #0
 800da4c:	461a      	mov	r2, r3
 800da4e:	4623      	mov	r3, r4
 800da50:	f7f2 fc96 	bl	8000380 <__aeabi_uldivmod>
 800da54:	4603      	mov	r3, r0
 800da56:	460c      	mov	r4, r1
 800da58:	4619      	mov	r1, r3
 800da5a:	4622      	mov	r2, r4
 800da5c:	f04f 0300 	mov.w	r3, #0
 800da60:	f04f 0400 	mov.w	r4, #0
 800da64:	0214      	lsls	r4, r2, #8
 800da66:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800da6a:	020b      	lsls	r3, r1, #8
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	6852      	ldr	r2, [r2, #4]
 800da70:	0852      	lsrs	r2, r2, #1
 800da72:	4611      	mov	r1, r2
 800da74:	f04f 0200 	mov.w	r2, #0
 800da78:	eb13 0b01 	adds.w	fp, r3, r1
 800da7c:	eb44 0c02 	adc.w	ip, r4, r2
 800da80:	4658      	mov	r0, fp
 800da82:	4661      	mov	r1, ip
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	f04f 0400 	mov.w	r4, #0
 800da8c:	461a      	mov	r2, r3
 800da8e:	4623      	mov	r3, r4
 800da90:	f7f2 fc76 	bl	8000380 <__aeabi_uldivmod>
 800da94:	4603      	mov	r3, r0
 800da96:	460c      	mov	r4, r1
 800da98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800da9a:	e247      	b.n	800df2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da9c:	4b96      	ldr	r3, [pc, #600]	; (800dcf8 <UART_SetConfig+0x1178>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 0320 	and.w	r3, r3, #32
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 80a3 	beq.w	800dbf0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daaa:	4b93      	ldr	r3, [pc, #588]	; (800dcf8 <UART_SetConfig+0x1178>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	08db      	lsrs	r3, r3, #3
 800dab0:	f003 0303 	and.w	r3, r3, #3
 800dab4:	4a91      	ldr	r2, [pc, #580]	; (800dcfc <UART_SetConfig+0x117c>)
 800dab6:	fa22 f303 	lsr.w	r3, r2, r3
 800daba:	4618      	mov	r0, r3
 800dabc:	f04f 0100 	mov.w	r1, #0
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d067      	beq.n	800db98 <UART_SetConfig+0x1018>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d05e      	beq.n	800db8e <UART_SetConfig+0x100e>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d055      	beq.n	800db84 <UART_SetConfig+0x1004>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dadc:	2b03      	cmp	r3, #3
 800dade:	d04c      	beq.n	800db7a <UART_SetConfig+0xffa>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae4:	2b04      	cmp	r3, #4
 800dae6:	d043      	beq.n	800db70 <UART_SetConfig+0xff0>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daec:	2b05      	cmp	r3, #5
 800daee:	d03a      	beq.n	800db66 <UART_SetConfig+0xfe6>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf4:	2b06      	cmp	r3, #6
 800daf6:	d031      	beq.n	800db5c <UART_SetConfig+0xfdc>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafc:	2b07      	cmp	r3, #7
 800dafe:	d028      	beq.n	800db52 <UART_SetConfig+0xfd2>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db04:	2b08      	cmp	r3, #8
 800db06:	d01f      	beq.n	800db48 <UART_SetConfig+0xfc8>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0c:	2b09      	cmp	r3, #9
 800db0e:	d016      	beq.n	800db3e <UART_SetConfig+0xfbe>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db14:	2b0a      	cmp	r3, #10
 800db16:	d00d      	beq.n	800db34 <UART_SetConfig+0xfb4>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1c:	2b0b      	cmp	r3, #11
 800db1e:	d104      	bne.n	800db2a <UART_SetConfig+0xfaa>
 800db20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db24:	f04f 0400 	mov.w	r4, #0
 800db28:	e03a      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db2a:	f04f 0301 	mov.w	r3, #1
 800db2e:	f04f 0400 	mov.w	r4, #0
 800db32:	e035      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db34:	f04f 0380 	mov.w	r3, #128	; 0x80
 800db38:	f04f 0400 	mov.w	r4, #0
 800db3c:	e030      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db3e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800db42:	f04f 0400 	mov.w	r4, #0
 800db46:	e02b      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db48:	f04f 0320 	mov.w	r3, #32
 800db4c:	f04f 0400 	mov.w	r4, #0
 800db50:	e026      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db52:	f04f 0310 	mov.w	r3, #16
 800db56:	f04f 0400 	mov.w	r4, #0
 800db5a:	e021      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db5c:	f04f 030c 	mov.w	r3, #12
 800db60:	f04f 0400 	mov.w	r4, #0
 800db64:	e01c      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db66:	f04f 030a 	mov.w	r3, #10
 800db6a:	f04f 0400 	mov.w	r4, #0
 800db6e:	e017      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db70:	f04f 0308 	mov.w	r3, #8
 800db74:	f04f 0400 	mov.w	r4, #0
 800db78:	e012      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db7a:	f04f 0306 	mov.w	r3, #6
 800db7e:	f04f 0400 	mov.w	r4, #0
 800db82:	e00d      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db84:	f04f 0304 	mov.w	r3, #4
 800db88:	f04f 0400 	mov.w	r4, #0
 800db8c:	e008      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db8e:	f04f 0302 	mov.w	r3, #2
 800db92:	f04f 0400 	mov.w	r4, #0
 800db96:	e003      	b.n	800dba0 <UART_SetConfig+0x1020>
 800db98:	f04f 0301 	mov.w	r3, #1
 800db9c:	f04f 0400 	mov.w	r4, #0
 800dba0:	461a      	mov	r2, r3
 800dba2:	4623      	mov	r3, r4
 800dba4:	f7f2 fbec 	bl	8000380 <__aeabi_uldivmod>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	4619      	mov	r1, r3
 800dbae:	4622      	mov	r2, r4
 800dbb0:	f04f 0300 	mov.w	r3, #0
 800dbb4:	f04f 0400 	mov.w	r4, #0
 800dbb8:	0214      	lsls	r4, r2, #8
 800dbba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800dbbe:	020b      	lsls	r3, r1, #8
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	6852      	ldr	r2, [r2, #4]
 800dbc4:	0852      	lsrs	r2, r2, #1
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	f04f 0200 	mov.w	r2, #0
 800dbcc:	eb13 0b01 	adds.w	fp, r3, r1
 800dbd0:	eb44 0c02 	adc.w	ip, r4, r2
 800dbd4:	4658      	mov	r0, fp
 800dbd6:	4661      	mov	r1, ip
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f04f 0400 	mov.w	r4, #0
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	4623      	mov	r3, r4
 800dbe4:	f7f2 fbcc 	bl	8000380 <__aeabi_uldivmod>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	460c      	mov	r4, r1
 800dbec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800dbee:	e19d      	b.n	800df2c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d05b      	beq.n	800dcb0 <UART_SetConfig+0x1130>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d053      	beq.n	800dca8 <UART_SetConfig+0x1128>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d04b      	beq.n	800dca0 <UART_SetConfig+0x1120>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0c:	2b03      	cmp	r3, #3
 800dc0e:	d043      	beq.n	800dc98 <UART_SetConfig+0x1118>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d03b      	beq.n	800dc90 <UART_SetConfig+0x1110>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc1c:	2b05      	cmp	r3, #5
 800dc1e:	d033      	beq.n	800dc88 <UART_SetConfig+0x1108>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc24:	2b06      	cmp	r3, #6
 800dc26:	d02b      	beq.n	800dc80 <UART_SetConfig+0x1100>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2c:	2b07      	cmp	r3, #7
 800dc2e:	d023      	beq.n	800dc78 <UART_SetConfig+0x10f8>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc34:	2b08      	cmp	r3, #8
 800dc36:	d01b      	beq.n	800dc70 <UART_SetConfig+0x10f0>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3c:	2b09      	cmp	r3, #9
 800dc3e:	d013      	beq.n	800dc68 <UART_SetConfig+0x10e8>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc44:	2b0a      	cmp	r3, #10
 800dc46:	d00b      	beq.n	800dc60 <UART_SetConfig+0x10e0>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4c:	2b0b      	cmp	r3, #11
 800dc4e:	d103      	bne.n	800dc58 <UART_SetConfig+0x10d8>
 800dc50:	4b2a      	ldr	r3, [pc, #168]	; (800dcfc <UART_SetConfig+0x117c>)
 800dc52:	f04f 0400 	mov.w	r4, #0
 800dc56:	e02e      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc58:	4b29      	ldr	r3, [pc, #164]	; (800dd00 <UART_SetConfig+0x1180>)
 800dc5a:	f04f 0403 	mov.w	r4, #3
 800dc5e:	e02a      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc60:	4b28      	ldr	r3, [pc, #160]	; (800dd04 <UART_SetConfig+0x1184>)
 800dc62:	f04f 0400 	mov.w	r4, #0
 800dc66:	e026      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc68:	4b27      	ldr	r3, [pc, #156]	; (800dd08 <UART_SetConfig+0x1188>)
 800dc6a:	f04f 0400 	mov.w	r4, #0
 800dc6e:	e022      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc70:	4b26      	ldr	r3, [pc, #152]	; (800dd0c <UART_SetConfig+0x118c>)
 800dc72:	f04f 0400 	mov.w	r4, #0
 800dc76:	e01e      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc78:	4b25      	ldr	r3, [pc, #148]	; (800dd10 <UART_SetConfig+0x1190>)
 800dc7a:	f04f 0400 	mov.w	r4, #0
 800dc7e:	e01a      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc80:	a419      	add	r4, pc, #100	; (adr r4, 800dce8 <UART_SetConfig+0x1168>)
 800dc82:	e9d4 3400 	ldrd	r3, r4, [r4]
 800dc86:	e016      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc88:	4b22      	ldr	r3, [pc, #136]	; (800dd14 <UART_SetConfig+0x1194>)
 800dc8a:	f04f 0400 	mov.w	r4, #0
 800dc8e:	e012      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc90:	4b21      	ldr	r3, [pc, #132]	; (800dd18 <UART_SetConfig+0x1198>)
 800dc92:	f04f 0400 	mov.w	r4, #0
 800dc96:	e00e      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dc98:	a415      	add	r4, pc, #84	; (adr r4, 800dcf0 <UART_SetConfig+0x1170>)
 800dc9a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800dc9e:	e00a      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dca0:	4b1e      	ldr	r3, [pc, #120]	; (800dd1c <UART_SetConfig+0x119c>)
 800dca2:	f04f 0400 	mov.w	r4, #0
 800dca6:	e006      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dca8:	4b1d      	ldr	r3, [pc, #116]	; (800dd20 <UART_SetConfig+0x11a0>)
 800dcaa:	f04f 0401 	mov.w	r4, #1
 800dcae:	e002      	b.n	800dcb6 <UART_SetConfig+0x1136>
 800dcb0:	4b13      	ldr	r3, [pc, #76]	; (800dd00 <UART_SetConfig+0x1180>)
 800dcb2:	f04f 0403 	mov.w	r4, #3
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	6852      	ldr	r2, [r2, #4]
 800dcba:	0852      	lsrs	r2, r2, #1
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	f04f 0200 	mov.w	r2, #0
 800dcc2:	eb13 0b01 	adds.w	fp, r3, r1
 800dcc6:	eb44 0c02 	adc.w	ip, r4, r2
 800dcca:	4658      	mov	r0, fp
 800dccc:	4661      	mov	r1, ip
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	f04f 0400 	mov.w	r4, #0
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	4623      	mov	r3, r4
 800dcda:	f7f2 fb51 	bl	8000380 <__aeabi_uldivmod>
 800dcde:	4603      	mov	r3, r0
 800dce0:	460c      	mov	r4, r1
 800dce2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800dce4:	e122      	b.n	800df2c <UART_SetConfig+0x13ac>
 800dce6:	bf00      	nop
 800dce8:	51615500 	.word	0x51615500
 800dcec:	00000000 	.word	0x00000000
 800dcf0:	a2c2aa00 	.word	0xa2c2aa00
 800dcf4:	00000000 	.word	0x00000000
 800dcf8:	58024400 	.word	0x58024400
 800dcfc:	03d09000 	.word	0x03d09000
 800dd00:	d0900000 	.word	0xd0900000
 800dd04:	07a12000 	.word	0x07a12000
 800dd08:	0f424000 	.word	0x0f424000
 800dd0c:	1e848000 	.word	0x1e848000
 800dd10:	3d090000 	.word	0x3d090000
 800dd14:	61a80000 	.word	0x61a80000
 800dd18:	7a120000 	.word	0x7a120000
 800dd1c:	f4240000 	.word	0xf4240000
 800dd20:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d05b      	beq.n	800dde4 <UART_SetConfig+0x1264>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d053      	beq.n	800dddc <UART_SetConfig+0x125c>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d04b      	beq.n	800ddd4 <UART_SetConfig+0x1254>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	2b03      	cmp	r3, #3
 800dd42:	d043      	beq.n	800ddcc <UART_SetConfig+0x124c>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	2b04      	cmp	r3, #4
 800dd4a:	d03b      	beq.n	800ddc4 <UART_SetConfig+0x1244>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd50:	2b05      	cmp	r3, #5
 800dd52:	d033      	beq.n	800ddbc <UART_SetConfig+0x123c>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd58:	2b06      	cmp	r3, #6
 800dd5a:	d02b      	beq.n	800ddb4 <UART_SetConfig+0x1234>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd60:	2b07      	cmp	r3, #7
 800dd62:	d023      	beq.n	800ddac <UART_SetConfig+0x122c>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	2b08      	cmp	r3, #8
 800dd6a:	d01b      	beq.n	800dda4 <UART_SetConfig+0x1224>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd70:	2b09      	cmp	r3, #9
 800dd72:	d013      	beq.n	800dd9c <UART_SetConfig+0x121c>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd78:	2b0a      	cmp	r3, #10
 800dd7a:	d00b      	beq.n	800dd94 <UART_SetConfig+0x1214>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd80:	2b0b      	cmp	r3, #11
 800dd82:	d103      	bne.n	800dd8c <UART_SetConfig+0x120c>
 800dd84:	4bc0      	ldr	r3, [pc, #768]	; (800e088 <UART_SetConfig+0x1508>)
 800dd86:	f04f 0400 	mov.w	r4, #0
 800dd8a:	e02e      	b.n	800ddea <UART_SetConfig+0x126a>
 800dd8c:	4bbf      	ldr	r3, [pc, #764]	; (800e08c <UART_SetConfig+0x150c>)
 800dd8e:	f04f 0400 	mov.w	r4, #0
 800dd92:	e02a      	b.n	800ddea <UART_SetConfig+0x126a>
 800dd94:	4bbe      	ldr	r3, [pc, #760]	; (800e090 <UART_SetConfig+0x1510>)
 800dd96:	f04f 0400 	mov.w	r4, #0
 800dd9a:	e026      	b.n	800ddea <UART_SetConfig+0x126a>
 800dd9c:	4bbd      	ldr	r3, [pc, #756]	; (800e094 <UART_SetConfig+0x1514>)
 800dd9e:	f04f 0400 	mov.w	r4, #0
 800dda2:	e022      	b.n	800ddea <UART_SetConfig+0x126a>
 800dda4:	4bbc      	ldr	r3, [pc, #752]	; (800e098 <UART_SetConfig+0x1518>)
 800dda6:	f04f 0400 	mov.w	r4, #0
 800ddaa:	e01e      	b.n	800ddea <UART_SetConfig+0x126a>
 800ddac:	4bbb      	ldr	r3, [pc, #748]	; (800e09c <UART_SetConfig+0x151c>)
 800ddae:	f04f 0400 	mov.w	r4, #0
 800ddb2:	e01a      	b.n	800ddea <UART_SetConfig+0x126a>
 800ddb4:	a4b0      	add	r4, pc, #704	; (adr r4, 800e078 <UART_SetConfig+0x14f8>)
 800ddb6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ddba:	e016      	b.n	800ddea <UART_SetConfig+0x126a>
 800ddbc:	4bb8      	ldr	r3, [pc, #736]	; (800e0a0 <UART_SetConfig+0x1520>)
 800ddbe:	f04f 0400 	mov.w	r4, #0
 800ddc2:	e012      	b.n	800ddea <UART_SetConfig+0x126a>
 800ddc4:	4bb7      	ldr	r3, [pc, #732]	; (800e0a4 <UART_SetConfig+0x1524>)
 800ddc6:	f04f 0400 	mov.w	r4, #0
 800ddca:	e00e      	b.n	800ddea <UART_SetConfig+0x126a>
 800ddcc:	a4ac      	add	r4, pc, #688	; (adr r4, 800e080 <UART_SetConfig+0x1500>)
 800ddce:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ddd2:	e00a      	b.n	800ddea <UART_SetConfig+0x126a>
 800ddd4:	4bb4      	ldr	r3, [pc, #720]	; (800e0a8 <UART_SetConfig+0x1528>)
 800ddd6:	f04f 0400 	mov.w	r4, #0
 800ddda:	e006      	b.n	800ddea <UART_SetConfig+0x126a>
 800dddc:	4bb3      	ldr	r3, [pc, #716]	; (800e0ac <UART_SetConfig+0x152c>)
 800ddde:	f04f 0400 	mov.w	r4, #0
 800dde2:	e002      	b.n	800ddea <UART_SetConfig+0x126a>
 800dde4:	4ba9      	ldr	r3, [pc, #676]	; (800e08c <UART_SetConfig+0x150c>)
 800dde6:	f04f 0400 	mov.w	r4, #0
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	6852      	ldr	r2, [r2, #4]
 800ddee:	0852      	lsrs	r2, r2, #1
 800ddf0:	4611      	mov	r1, r2
 800ddf2:	f04f 0200 	mov.w	r2, #0
 800ddf6:	eb13 0b01 	adds.w	fp, r3, r1
 800ddfa:	eb44 0c02 	adc.w	ip, r4, r2
 800ddfe:	4658      	mov	r0, fp
 800de00:	4661      	mov	r1, ip
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	f04f 0400 	mov.w	r4, #0
 800de0a:	461a      	mov	r2, r3
 800de0c:	4623      	mov	r3, r4
 800de0e:	f7f2 fab7 	bl	8000380 <__aeabi_uldivmod>
 800de12:	4603      	mov	r3, r0
 800de14:	460c      	mov	r4, r1
 800de16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800de18:	e088      	b.n	800df2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d064      	beq.n	800deec <UART_SetConfig+0x136c>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de26:	2b01      	cmp	r3, #1
 800de28:	d05b      	beq.n	800dee2 <UART_SetConfig+0x1362>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2e:	2b02      	cmp	r3, #2
 800de30:	d052      	beq.n	800ded8 <UART_SetConfig+0x1358>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de36:	2b03      	cmp	r3, #3
 800de38:	d04a      	beq.n	800ded0 <UART_SetConfig+0x1350>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3e:	2b04      	cmp	r3, #4
 800de40:	d041      	beq.n	800dec6 <UART_SetConfig+0x1346>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de46:	2b05      	cmp	r3, #5
 800de48:	d039      	beq.n	800debe <UART_SetConfig+0x133e>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4e:	2b06      	cmp	r3, #6
 800de50:	d031      	beq.n	800deb6 <UART_SetConfig+0x1336>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de56:	2b07      	cmp	r3, #7
 800de58:	d028      	beq.n	800deac <UART_SetConfig+0x132c>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5e:	2b08      	cmp	r3, #8
 800de60:	d01f      	beq.n	800dea2 <UART_SetConfig+0x1322>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	2b09      	cmp	r3, #9
 800de68:	d016      	beq.n	800de98 <UART_SetConfig+0x1318>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6e:	2b0a      	cmp	r3, #10
 800de70:	d00d      	beq.n	800de8e <UART_SetConfig+0x130e>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de76:	2b0b      	cmp	r3, #11
 800de78:	d104      	bne.n	800de84 <UART_SetConfig+0x1304>
 800de7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de7e:	f04f 0400 	mov.w	r4, #0
 800de82:	e037      	b.n	800def4 <UART_SetConfig+0x1374>
 800de84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800de88:	f04f 0400 	mov.w	r4, #0
 800de8c:	e032      	b.n	800def4 <UART_SetConfig+0x1374>
 800de8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800de92:	f04f 0400 	mov.w	r4, #0
 800de96:	e02d      	b.n	800def4 <UART_SetConfig+0x1374>
 800de98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de9c:	f04f 0400 	mov.w	r4, #0
 800dea0:	e028      	b.n	800def4 <UART_SetConfig+0x1374>
 800dea2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dea6:	f04f 0400 	mov.w	r4, #0
 800deaa:	e023      	b.n	800def4 <UART_SetConfig+0x1374>
 800deac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800deb0:	f04f 0400 	mov.w	r4, #0
 800deb4:	e01e      	b.n	800def4 <UART_SetConfig+0x1374>
 800deb6:	4b7e      	ldr	r3, [pc, #504]	; (800e0b0 <UART_SetConfig+0x1530>)
 800deb8:	f04f 0400 	mov.w	r4, #0
 800debc:	e01a      	b.n	800def4 <UART_SetConfig+0x1374>
 800debe:	4b7d      	ldr	r3, [pc, #500]	; (800e0b4 <UART_SetConfig+0x1534>)
 800dec0:	f04f 0400 	mov.w	r4, #0
 800dec4:	e016      	b.n	800def4 <UART_SetConfig+0x1374>
 800dec6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800deca:	f04f 0400 	mov.w	r4, #0
 800dece:	e011      	b.n	800def4 <UART_SetConfig+0x1374>
 800ded0:	4b79      	ldr	r3, [pc, #484]	; (800e0b8 <UART_SetConfig+0x1538>)
 800ded2:	f04f 0400 	mov.w	r4, #0
 800ded6:	e00d      	b.n	800def4 <UART_SetConfig+0x1374>
 800ded8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dedc:	f04f 0400 	mov.w	r4, #0
 800dee0:	e008      	b.n	800def4 <UART_SetConfig+0x1374>
 800dee2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dee6:	f04f 0400 	mov.w	r4, #0
 800deea:	e003      	b.n	800def4 <UART_SetConfig+0x1374>
 800deec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800def0:	f04f 0400 	mov.w	r4, #0
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	6852      	ldr	r2, [r2, #4]
 800def8:	0852      	lsrs	r2, r2, #1
 800defa:	4611      	mov	r1, r2
 800defc:	f04f 0200 	mov.w	r2, #0
 800df00:	eb13 0b01 	adds.w	fp, r3, r1
 800df04:	eb44 0c02 	adc.w	ip, r4, r2
 800df08:	4658      	mov	r0, fp
 800df0a:	4661      	mov	r1, ip
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	f04f 0400 	mov.w	r4, #0
 800df14:	461a      	mov	r2, r3
 800df16:	4623      	mov	r3, r4
 800df18:	f7f2 fa32 	bl	8000380 <__aeabi_uldivmod>
 800df1c:	4603      	mov	r3, r0
 800df1e:	460c      	mov	r4, r1
 800df20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800df22:	e003      	b.n	800df2c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800df24:	2301      	movs	r3, #1
 800df26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800df2a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df32:	d309      	bcc.n	800df48 <UART_SetConfig+0x13c8>
 800df34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df3a:	d205      	bcs.n	800df48 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df42:	60da      	str	r2, [r3, #12]
 800df44:	f000 bf85 	b.w	800ee52 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df4e:	f000 bf80 	b.w	800ee52 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	69db      	ldr	r3, [r3, #28]
 800df56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df5a:	f040 83da 	bne.w	800e712 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800df5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800df62:	2b40      	cmp	r3, #64	; 0x40
 800df64:	f200 83b3 	bhi.w	800e6ce <UART_SetConfig+0x1b4e>
 800df68:	a201      	add	r2, pc, #4	; (adr r2, 800df70 <UART_SetConfig+0x13f0>)
 800df6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6e:	bf00      	nop
 800df70:	0800e0bd 	.word	0x0800e0bd
 800df74:	0800e175 	.word	0x0800e175
 800df78:	0800e6cf 	.word	0x0800e6cf
 800df7c:	0800e6cf 	.word	0x0800e6cf
 800df80:	0800e22d 	.word	0x0800e22d
 800df84:	0800e6cf 	.word	0x0800e6cf
 800df88:	0800e6cf 	.word	0x0800e6cf
 800df8c:	0800e6cf 	.word	0x0800e6cf
 800df90:	0800e2e9 	.word	0x0800e2e9
 800df94:	0800e6cf 	.word	0x0800e6cf
 800df98:	0800e6cf 	.word	0x0800e6cf
 800df9c:	0800e6cf 	.word	0x0800e6cf
 800dfa0:	0800e6cf 	.word	0x0800e6cf
 800dfa4:	0800e6cf 	.word	0x0800e6cf
 800dfa8:	0800e6cf 	.word	0x0800e6cf
 800dfac:	0800e6cf 	.word	0x0800e6cf
 800dfb0:	0800e3a5 	.word	0x0800e3a5
 800dfb4:	0800e6cf 	.word	0x0800e6cf
 800dfb8:	0800e6cf 	.word	0x0800e6cf
 800dfbc:	0800e6cf 	.word	0x0800e6cf
 800dfc0:	0800e6cf 	.word	0x0800e6cf
 800dfc4:	0800e6cf 	.word	0x0800e6cf
 800dfc8:	0800e6cf 	.word	0x0800e6cf
 800dfcc:	0800e6cf 	.word	0x0800e6cf
 800dfd0:	0800e6cf 	.word	0x0800e6cf
 800dfd4:	0800e6cf 	.word	0x0800e6cf
 800dfd8:	0800e6cf 	.word	0x0800e6cf
 800dfdc:	0800e6cf 	.word	0x0800e6cf
 800dfe0:	0800e6cf 	.word	0x0800e6cf
 800dfe4:	0800e6cf 	.word	0x0800e6cf
 800dfe8:	0800e6cf 	.word	0x0800e6cf
 800dfec:	0800e6cf 	.word	0x0800e6cf
 800dff0:	0800e517 	.word	0x0800e517
 800dff4:	0800e6cf 	.word	0x0800e6cf
 800dff8:	0800e6cf 	.word	0x0800e6cf
 800dffc:	0800e6cf 	.word	0x0800e6cf
 800e000:	0800e6cf 	.word	0x0800e6cf
 800e004:	0800e6cf 	.word	0x0800e6cf
 800e008:	0800e6cf 	.word	0x0800e6cf
 800e00c:	0800e6cf 	.word	0x0800e6cf
 800e010:	0800e6cf 	.word	0x0800e6cf
 800e014:	0800e6cf 	.word	0x0800e6cf
 800e018:	0800e6cf 	.word	0x0800e6cf
 800e01c:	0800e6cf 	.word	0x0800e6cf
 800e020:	0800e6cf 	.word	0x0800e6cf
 800e024:	0800e6cf 	.word	0x0800e6cf
 800e028:	0800e6cf 	.word	0x0800e6cf
 800e02c:	0800e6cf 	.word	0x0800e6cf
 800e030:	0800e6cf 	.word	0x0800e6cf
 800e034:	0800e6cf 	.word	0x0800e6cf
 800e038:	0800e6cf 	.word	0x0800e6cf
 800e03c:	0800e6cf 	.word	0x0800e6cf
 800e040:	0800e6cf 	.word	0x0800e6cf
 800e044:	0800e6cf 	.word	0x0800e6cf
 800e048:	0800e6cf 	.word	0x0800e6cf
 800e04c:	0800e6cf 	.word	0x0800e6cf
 800e050:	0800e6cf 	.word	0x0800e6cf
 800e054:	0800e6cf 	.word	0x0800e6cf
 800e058:	0800e6cf 	.word	0x0800e6cf
 800e05c:	0800e6cf 	.word	0x0800e6cf
 800e060:	0800e6cf 	.word	0x0800e6cf
 800e064:	0800e6cf 	.word	0x0800e6cf
 800e068:	0800e6cf 	.word	0x0800e6cf
 800e06c:	0800e6cf 	.word	0x0800e6cf
 800e070:	0800e60d 	.word	0x0800e60d
 800e074:	f3af 8000 	nop.w
 800e078:	05161500 	.word	0x05161500
 800e07c:	00000000 	.word	0x00000000
 800e080:	0a2c2a00 	.word	0x0a2c2a00
 800e084:	00000000 	.word	0x00000000
 800e088:	003d0900 	.word	0x003d0900
 800e08c:	3d090000 	.word	0x3d090000
 800e090:	007a1200 	.word	0x007a1200
 800e094:	00f42400 	.word	0x00f42400
 800e098:	01e84800 	.word	0x01e84800
 800e09c:	03d09000 	.word	0x03d09000
 800e0a0:	061a8000 	.word	0x061a8000
 800e0a4:	07a12000 	.word	0x07a12000
 800e0a8:	0f424000 	.word	0x0f424000
 800e0ac:	1e848000 	.word	0x1e848000
 800e0b0:	000aaa00 	.word	0x000aaa00
 800e0b4:	000ccc00 	.word	0x000ccc00
 800e0b8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0bc:	f7fb ff44 	bl	8009f48 <HAL_RCC_GetPCLK1Freq>
 800e0c0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d044      	beq.n	800e154 <UART_SetConfig+0x15d4>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d03e      	beq.n	800e150 <UART_SetConfig+0x15d0>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d038      	beq.n	800e14c <UART_SetConfig+0x15cc>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0de:	2b03      	cmp	r3, #3
 800e0e0:	d032      	beq.n	800e148 <UART_SetConfig+0x15c8>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e6:	2b04      	cmp	r3, #4
 800e0e8:	d02c      	beq.n	800e144 <UART_SetConfig+0x15c4>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ee:	2b05      	cmp	r3, #5
 800e0f0:	d026      	beq.n	800e140 <UART_SetConfig+0x15c0>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f6:	2b06      	cmp	r3, #6
 800e0f8:	d020      	beq.n	800e13c <UART_SetConfig+0x15bc>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2b07      	cmp	r3, #7
 800e100:	d01a      	beq.n	800e138 <UART_SetConfig+0x15b8>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e106:	2b08      	cmp	r3, #8
 800e108:	d014      	beq.n	800e134 <UART_SetConfig+0x15b4>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	2b09      	cmp	r3, #9
 800e110:	d00e      	beq.n	800e130 <UART_SetConfig+0x15b0>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e116:	2b0a      	cmp	r3, #10
 800e118:	d008      	beq.n	800e12c <UART_SetConfig+0x15ac>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11e:	2b0b      	cmp	r3, #11
 800e120:	d102      	bne.n	800e128 <UART_SetConfig+0x15a8>
 800e122:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e126:	e016      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e128:	2301      	movs	r3, #1
 800e12a:	e014      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e12c:	2380      	movs	r3, #128	; 0x80
 800e12e:	e012      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e130:	2340      	movs	r3, #64	; 0x40
 800e132:	e010      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e134:	2320      	movs	r3, #32
 800e136:	e00e      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e138:	2310      	movs	r3, #16
 800e13a:	e00c      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e13c:	230c      	movs	r3, #12
 800e13e:	e00a      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e140:	230a      	movs	r3, #10
 800e142:	e008      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e144:	2308      	movs	r3, #8
 800e146:	e006      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e148:	2306      	movs	r3, #6
 800e14a:	e004      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e14c:	2304      	movs	r3, #4
 800e14e:	e002      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e150:	2302      	movs	r3, #2
 800e152:	e000      	b.n	800e156 <UART_SetConfig+0x15d6>
 800e154:	2301      	movs	r3, #1
 800e156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e158:	fbb2 f3f3 	udiv	r3, r2, r3
 800e15c:	005a      	lsls	r2, r3, #1
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	085b      	lsrs	r3, r3, #1
 800e164:	441a      	add	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16e:	b29b      	uxth	r3, r3
 800e170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e172:	e2b0      	b.n	800e6d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e174:	f7fb fefe 	bl	8009f74 <HAL_RCC_GetPCLK2Freq>
 800e178:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d044      	beq.n	800e20c <UART_SetConfig+0x168c>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e186:	2b01      	cmp	r3, #1
 800e188:	d03e      	beq.n	800e208 <UART_SetConfig+0x1688>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18e:	2b02      	cmp	r3, #2
 800e190:	d038      	beq.n	800e204 <UART_SetConfig+0x1684>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e196:	2b03      	cmp	r3, #3
 800e198:	d032      	beq.n	800e200 <UART_SetConfig+0x1680>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19e:	2b04      	cmp	r3, #4
 800e1a0:	d02c      	beq.n	800e1fc <UART_SetConfig+0x167c>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a6:	2b05      	cmp	r3, #5
 800e1a8:	d026      	beq.n	800e1f8 <UART_SetConfig+0x1678>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ae:	2b06      	cmp	r3, #6
 800e1b0:	d020      	beq.n	800e1f4 <UART_SetConfig+0x1674>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b6:	2b07      	cmp	r3, #7
 800e1b8:	d01a      	beq.n	800e1f0 <UART_SetConfig+0x1670>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1be:	2b08      	cmp	r3, #8
 800e1c0:	d014      	beq.n	800e1ec <UART_SetConfig+0x166c>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c6:	2b09      	cmp	r3, #9
 800e1c8:	d00e      	beq.n	800e1e8 <UART_SetConfig+0x1668>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ce:	2b0a      	cmp	r3, #10
 800e1d0:	d008      	beq.n	800e1e4 <UART_SetConfig+0x1664>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d6:	2b0b      	cmp	r3, #11
 800e1d8:	d102      	bne.n	800e1e0 <UART_SetConfig+0x1660>
 800e1da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1de:	e016      	b.n	800e20e <UART_SetConfig+0x168e>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e014      	b.n	800e20e <UART_SetConfig+0x168e>
 800e1e4:	2380      	movs	r3, #128	; 0x80
 800e1e6:	e012      	b.n	800e20e <UART_SetConfig+0x168e>
 800e1e8:	2340      	movs	r3, #64	; 0x40
 800e1ea:	e010      	b.n	800e20e <UART_SetConfig+0x168e>
 800e1ec:	2320      	movs	r3, #32
 800e1ee:	e00e      	b.n	800e20e <UART_SetConfig+0x168e>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	e00c      	b.n	800e20e <UART_SetConfig+0x168e>
 800e1f4:	230c      	movs	r3, #12
 800e1f6:	e00a      	b.n	800e20e <UART_SetConfig+0x168e>
 800e1f8:	230a      	movs	r3, #10
 800e1fa:	e008      	b.n	800e20e <UART_SetConfig+0x168e>
 800e1fc:	2308      	movs	r3, #8
 800e1fe:	e006      	b.n	800e20e <UART_SetConfig+0x168e>
 800e200:	2306      	movs	r3, #6
 800e202:	e004      	b.n	800e20e <UART_SetConfig+0x168e>
 800e204:	2304      	movs	r3, #4
 800e206:	e002      	b.n	800e20e <UART_SetConfig+0x168e>
 800e208:	2302      	movs	r3, #2
 800e20a:	e000      	b.n	800e20e <UART_SetConfig+0x168e>
 800e20c:	2301      	movs	r3, #1
 800e20e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e210:	fbb2 f3f3 	udiv	r3, r2, r3
 800e214:	005a      	lsls	r2, r3, #1
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	085b      	lsrs	r3, r3, #1
 800e21c:	441a      	add	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	fbb2 f3f3 	udiv	r3, r2, r3
 800e226:	b29b      	uxth	r3, r3
 800e228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e22a:	e254      	b.n	800e6d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e22c:	f107 0318 	add.w	r3, r7, #24
 800e230:	4618      	mov	r0, r3
 800e232:	f7fd f821 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d044      	beq.n	800e2ca <UART_SetConfig+0x174a>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	2b01      	cmp	r3, #1
 800e246:	d03e      	beq.n	800e2c6 <UART_SetConfig+0x1746>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d038      	beq.n	800e2c2 <UART_SetConfig+0x1742>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e254:	2b03      	cmp	r3, #3
 800e256:	d032      	beq.n	800e2be <UART_SetConfig+0x173e>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	2b04      	cmp	r3, #4
 800e25e:	d02c      	beq.n	800e2ba <UART_SetConfig+0x173a>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e264:	2b05      	cmp	r3, #5
 800e266:	d026      	beq.n	800e2b6 <UART_SetConfig+0x1736>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26c:	2b06      	cmp	r3, #6
 800e26e:	d020      	beq.n	800e2b2 <UART_SetConfig+0x1732>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	2b07      	cmp	r3, #7
 800e276:	d01a      	beq.n	800e2ae <UART_SetConfig+0x172e>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	2b08      	cmp	r3, #8
 800e27e:	d014      	beq.n	800e2aa <UART_SetConfig+0x172a>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e284:	2b09      	cmp	r3, #9
 800e286:	d00e      	beq.n	800e2a6 <UART_SetConfig+0x1726>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28c:	2b0a      	cmp	r3, #10
 800e28e:	d008      	beq.n	800e2a2 <UART_SetConfig+0x1722>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e294:	2b0b      	cmp	r3, #11
 800e296:	d102      	bne.n	800e29e <UART_SetConfig+0x171e>
 800e298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e29c:	e016      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e014      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2a2:	2380      	movs	r3, #128	; 0x80
 800e2a4:	e012      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2a6:	2340      	movs	r3, #64	; 0x40
 800e2a8:	e010      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2aa:	2320      	movs	r3, #32
 800e2ac:	e00e      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2ae:	2310      	movs	r3, #16
 800e2b0:	e00c      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2b2:	230c      	movs	r3, #12
 800e2b4:	e00a      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2b6:	230a      	movs	r3, #10
 800e2b8:	e008      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2ba:	2308      	movs	r3, #8
 800e2bc:	e006      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2be:	2306      	movs	r3, #6
 800e2c0:	e004      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2c2:	2304      	movs	r3, #4
 800e2c4:	e002      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2c6:	2302      	movs	r3, #2
 800e2c8:	e000      	b.n	800e2cc <UART_SetConfig+0x174c>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2d0:	005a      	lsls	r2, r3, #1
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	085b      	lsrs	r3, r3, #1
 800e2d8:	441a      	add	r2, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e2e6:	e1f6      	b.n	800e6d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2e8:	f107 030c 	add.w	r3, r7, #12
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fd f90f 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2f2:	693a      	ldr	r2, [r7, #16]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d044      	beq.n	800e386 <UART_SetConfig+0x1806>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e300:	2b01      	cmp	r3, #1
 800e302:	d03e      	beq.n	800e382 <UART_SetConfig+0x1802>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e308:	2b02      	cmp	r3, #2
 800e30a:	d038      	beq.n	800e37e <UART_SetConfig+0x17fe>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e310:	2b03      	cmp	r3, #3
 800e312:	d032      	beq.n	800e37a <UART_SetConfig+0x17fa>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e318:	2b04      	cmp	r3, #4
 800e31a:	d02c      	beq.n	800e376 <UART_SetConfig+0x17f6>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e320:	2b05      	cmp	r3, #5
 800e322:	d026      	beq.n	800e372 <UART_SetConfig+0x17f2>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e328:	2b06      	cmp	r3, #6
 800e32a:	d020      	beq.n	800e36e <UART_SetConfig+0x17ee>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e330:	2b07      	cmp	r3, #7
 800e332:	d01a      	beq.n	800e36a <UART_SetConfig+0x17ea>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e338:	2b08      	cmp	r3, #8
 800e33a:	d014      	beq.n	800e366 <UART_SetConfig+0x17e6>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e340:	2b09      	cmp	r3, #9
 800e342:	d00e      	beq.n	800e362 <UART_SetConfig+0x17e2>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e348:	2b0a      	cmp	r3, #10
 800e34a:	d008      	beq.n	800e35e <UART_SetConfig+0x17de>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e350:	2b0b      	cmp	r3, #11
 800e352:	d102      	bne.n	800e35a <UART_SetConfig+0x17da>
 800e354:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e358:	e016      	b.n	800e388 <UART_SetConfig+0x1808>
 800e35a:	2301      	movs	r3, #1
 800e35c:	e014      	b.n	800e388 <UART_SetConfig+0x1808>
 800e35e:	2380      	movs	r3, #128	; 0x80
 800e360:	e012      	b.n	800e388 <UART_SetConfig+0x1808>
 800e362:	2340      	movs	r3, #64	; 0x40
 800e364:	e010      	b.n	800e388 <UART_SetConfig+0x1808>
 800e366:	2320      	movs	r3, #32
 800e368:	e00e      	b.n	800e388 <UART_SetConfig+0x1808>
 800e36a:	2310      	movs	r3, #16
 800e36c:	e00c      	b.n	800e388 <UART_SetConfig+0x1808>
 800e36e:	230c      	movs	r3, #12
 800e370:	e00a      	b.n	800e388 <UART_SetConfig+0x1808>
 800e372:	230a      	movs	r3, #10
 800e374:	e008      	b.n	800e388 <UART_SetConfig+0x1808>
 800e376:	2308      	movs	r3, #8
 800e378:	e006      	b.n	800e388 <UART_SetConfig+0x1808>
 800e37a:	2306      	movs	r3, #6
 800e37c:	e004      	b.n	800e388 <UART_SetConfig+0x1808>
 800e37e:	2304      	movs	r3, #4
 800e380:	e002      	b.n	800e388 <UART_SetConfig+0x1808>
 800e382:	2302      	movs	r3, #2
 800e384:	e000      	b.n	800e388 <UART_SetConfig+0x1808>
 800e386:	2301      	movs	r3, #1
 800e388:	fbb2 f3f3 	udiv	r3, r2, r3
 800e38c:	005a      	lsls	r2, r3, #1
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	085b      	lsrs	r3, r3, #1
 800e394:	441a      	add	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3a2:	e198      	b.n	800e6d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3a4:	4b87      	ldr	r3, [pc, #540]	; (800e5c4 <UART_SetConfig+0x1a44>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f003 0320 	and.w	r3, r3, #32
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d05e      	beq.n	800e46e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3b0:	4b84      	ldr	r3, [pc, #528]	; (800e5c4 <UART_SetConfig+0x1a44>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	08db      	lsrs	r3, r3, #3
 800e3b6:	f003 0303 	and.w	r3, r3, #3
 800e3ba:	4a83      	ldr	r2, [pc, #524]	; (800e5c8 <UART_SetConfig+0x1a48>)
 800e3bc:	40da      	lsrs	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d044      	beq.n	800e450 <UART_SetConfig+0x18d0>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d03e      	beq.n	800e44c <UART_SetConfig+0x18cc>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d038      	beq.n	800e448 <UART_SetConfig+0x18c8>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	d032      	beq.n	800e444 <UART_SetConfig+0x18c4>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e2:	2b04      	cmp	r3, #4
 800e3e4:	d02c      	beq.n	800e440 <UART_SetConfig+0x18c0>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ea:	2b05      	cmp	r3, #5
 800e3ec:	d026      	beq.n	800e43c <UART_SetConfig+0x18bc>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f2:	2b06      	cmp	r3, #6
 800e3f4:	d020      	beq.n	800e438 <UART_SetConfig+0x18b8>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3fa:	2b07      	cmp	r3, #7
 800e3fc:	d01a      	beq.n	800e434 <UART_SetConfig+0x18b4>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e402:	2b08      	cmp	r3, #8
 800e404:	d014      	beq.n	800e430 <UART_SetConfig+0x18b0>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40a:	2b09      	cmp	r3, #9
 800e40c:	d00e      	beq.n	800e42c <UART_SetConfig+0x18ac>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e412:	2b0a      	cmp	r3, #10
 800e414:	d008      	beq.n	800e428 <UART_SetConfig+0x18a8>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41a:	2b0b      	cmp	r3, #11
 800e41c:	d102      	bne.n	800e424 <UART_SetConfig+0x18a4>
 800e41e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e422:	e016      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e424:	2301      	movs	r3, #1
 800e426:	e014      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e428:	2380      	movs	r3, #128	; 0x80
 800e42a:	e012      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e42c:	2340      	movs	r3, #64	; 0x40
 800e42e:	e010      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e430:	2320      	movs	r3, #32
 800e432:	e00e      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e434:	2310      	movs	r3, #16
 800e436:	e00c      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e438:	230c      	movs	r3, #12
 800e43a:	e00a      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e43c:	230a      	movs	r3, #10
 800e43e:	e008      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e440:	2308      	movs	r3, #8
 800e442:	e006      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e444:	2306      	movs	r3, #6
 800e446:	e004      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e448:	2304      	movs	r3, #4
 800e44a:	e002      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e44c:	2302      	movs	r3, #2
 800e44e:	e000      	b.n	800e452 <UART_SetConfig+0x18d2>
 800e450:	2301      	movs	r3, #1
 800e452:	fbb2 f3f3 	udiv	r3, r2, r3
 800e456:	005a      	lsls	r2, r3, #1
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	085b      	lsrs	r3, r3, #1
 800e45e:	441a      	add	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	fbb2 f3f3 	udiv	r3, r2, r3
 800e468:	b29b      	uxth	r3, r3
 800e46a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800e46c:	e133      	b.n	800e6d6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e472:	2b00      	cmp	r3, #0
 800e474:	d043      	beq.n	800e4fe <UART_SetConfig+0x197e>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d03d      	beq.n	800e4fa <UART_SetConfig+0x197a>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e482:	2b02      	cmp	r3, #2
 800e484:	d037      	beq.n	800e4f6 <UART_SetConfig+0x1976>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d031      	beq.n	800e4f2 <UART_SetConfig+0x1972>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e492:	2b04      	cmp	r3, #4
 800e494:	d02b      	beq.n	800e4ee <UART_SetConfig+0x196e>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49a:	2b05      	cmp	r3, #5
 800e49c:	d025      	beq.n	800e4ea <UART_SetConfig+0x196a>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a2:	2b06      	cmp	r3, #6
 800e4a4:	d01f      	beq.n	800e4e6 <UART_SetConfig+0x1966>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4aa:	2b07      	cmp	r3, #7
 800e4ac:	d019      	beq.n	800e4e2 <UART_SetConfig+0x1962>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b2:	2b08      	cmp	r3, #8
 800e4b4:	d013      	beq.n	800e4de <UART_SetConfig+0x195e>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ba:	2b09      	cmp	r3, #9
 800e4bc:	d00d      	beq.n	800e4da <UART_SetConfig+0x195a>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c2:	2b0a      	cmp	r3, #10
 800e4c4:	d007      	beq.n	800e4d6 <UART_SetConfig+0x1956>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ca:	2b0b      	cmp	r3, #11
 800e4cc:	d101      	bne.n	800e4d2 <UART_SetConfig+0x1952>
 800e4ce:	4b3f      	ldr	r3, [pc, #252]	; (800e5cc <UART_SetConfig+0x1a4c>)
 800e4d0:	e016      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4d2:	4b3f      	ldr	r3, [pc, #252]	; (800e5d0 <UART_SetConfig+0x1a50>)
 800e4d4:	e014      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4d6:	4b3f      	ldr	r3, [pc, #252]	; (800e5d4 <UART_SetConfig+0x1a54>)
 800e4d8:	e012      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4da:	4b3f      	ldr	r3, [pc, #252]	; (800e5d8 <UART_SetConfig+0x1a58>)
 800e4dc:	e010      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4de:	4b3f      	ldr	r3, [pc, #252]	; (800e5dc <UART_SetConfig+0x1a5c>)
 800e4e0:	e00e      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4e2:	4b3f      	ldr	r3, [pc, #252]	; (800e5e0 <UART_SetConfig+0x1a60>)
 800e4e4:	e00c      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4e6:	4b3f      	ldr	r3, [pc, #252]	; (800e5e4 <UART_SetConfig+0x1a64>)
 800e4e8:	e00a      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4ea:	4b3f      	ldr	r3, [pc, #252]	; (800e5e8 <UART_SetConfig+0x1a68>)
 800e4ec:	e008      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4ee:	4b3f      	ldr	r3, [pc, #252]	; (800e5ec <UART_SetConfig+0x1a6c>)
 800e4f0:	e006      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4f2:	4b3f      	ldr	r3, [pc, #252]	; (800e5f0 <UART_SetConfig+0x1a70>)
 800e4f4:	e004      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4f6:	4b3f      	ldr	r3, [pc, #252]	; (800e5f4 <UART_SetConfig+0x1a74>)
 800e4f8:	e002      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4fa:	4b33      	ldr	r3, [pc, #204]	; (800e5c8 <UART_SetConfig+0x1a48>)
 800e4fc:	e000      	b.n	800e500 <UART_SetConfig+0x1980>
 800e4fe:	4b34      	ldr	r3, [pc, #208]	; (800e5d0 <UART_SetConfig+0x1a50>)
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	6852      	ldr	r2, [r2, #4]
 800e504:	0852      	lsrs	r2, r2, #1
 800e506:	441a      	add	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e510:	b29b      	uxth	r3, r3
 800e512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e514:	e0df      	b.n	800e6d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d045      	beq.n	800e5aa <UART_SetConfig+0x1a2a>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e522:	2b01      	cmp	r3, #1
 800e524:	d03f      	beq.n	800e5a6 <UART_SetConfig+0x1a26>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d039      	beq.n	800e5a2 <UART_SetConfig+0x1a22>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e532:	2b03      	cmp	r3, #3
 800e534:	d033      	beq.n	800e59e <UART_SetConfig+0x1a1e>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e53a:	2b04      	cmp	r3, #4
 800e53c:	d02d      	beq.n	800e59a <UART_SetConfig+0x1a1a>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e542:	2b05      	cmp	r3, #5
 800e544:	d027      	beq.n	800e596 <UART_SetConfig+0x1a16>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54a:	2b06      	cmp	r3, #6
 800e54c:	d021      	beq.n	800e592 <UART_SetConfig+0x1a12>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e552:	2b07      	cmp	r3, #7
 800e554:	d01b      	beq.n	800e58e <UART_SetConfig+0x1a0e>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e55a:	2b08      	cmp	r3, #8
 800e55c:	d015      	beq.n	800e58a <UART_SetConfig+0x1a0a>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e562:	2b09      	cmp	r3, #9
 800e564:	d00f      	beq.n	800e586 <UART_SetConfig+0x1a06>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56a:	2b0a      	cmp	r3, #10
 800e56c:	d008      	beq.n	800e580 <UART_SetConfig+0x1a00>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e572:	2b0b      	cmp	r3, #11
 800e574:	d102      	bne.n	800e57c <UART_SetConfig+0x19fc>
 800e576:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e57a:	e017      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e57c:	4b18      	ldr	r3, [pc, #96]	; (800e5e0 <UART_SetConfig+0x1a60>)
 800e57e:	e015      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e580:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e584:	e012      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e586:	4b1c      	ldr	r3, [pc, #112]	; (800e5f8 <UART_SetConfig+0x1a78>)
 800e588:	e010      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e58a:	4b1c      	ldr	r3, [pc, #112]	; (800e5fc <UART_SetConfig+0x1a7c>)
 800e58c:	e00e      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e58e:	4b0f      	ldr	r3, [pc, #60]	; (800e5cc <UART_SetConfig+0x1a4c>)
 800e590:	e00c      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e592:	4b1b      	ldr	r3, [pc, #108]	; (800e600 <UART_SetConfig+0x1a80>)
 800e594:	e00a      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e596:	4b1b      	ldr	r3, [pc, #108]	; (800e604 <UART_SetConfig+0x1a84>)
 800e598:	e008      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e59a:	4b0e      	ldr	r3, [pc, #56]	; (800e5d4 <UART_SetConfig+0x1a54>)
 800e59c:	e006      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e59e:	4b1a      	ldr	r3, [pc, #104]	; (800e608 <UART_SetConfig+0x1a88>)
 800e5a0:	e004      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e5a2:	4b0d      	ldr	r3, [pc, #52]	; (800e5d8 <UART_SetConfig+0x1a58>)
 800e5a4:	e002      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e5a6:	4b0d      	ldr	r3, [pc, #52]	; (800e5dc <UART_SetConfig+0x1a5c>)
 800e5a8:	e000      	b.n	800e5ac <UART_SetConfig+0x1a2c>
 800e5aa:	4b0d      	ldr	r3, [pc, #52]	; (800e5e0 <UART_SetConfig+0x1a60>)
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	6852      	ldr	r2, [r2, #4]
 800e5b0:	0852      	lsrs	r2, r2, #1
 800e5b2:	441a      	add	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e5c0:	e089      	b.n	800e6d6 <UART_SetConfig+0x1b56>
 800e5c2:	bf00      	nop
 800e5c4:	58024400 	.word	0x58024400
 800e5c8:	03d09000 	.word	0x03d09000
 800e5cc:	0007a120 	.word	0x0007a120
 800e5d0:	07a12000 	.word	0x07a12000
 800e5d4:	000f4240 	.word	0x000f4240
 800e5d8:	001e8480 	.word	0x001e8480
 800e5dc:	003d0900 	.word	0x003d0900
 800e5e0:	007a1200 	.word	0x007a1200
 800e5e4:	00a2c2aa 	.word	0x00a2c2aa
 800e5e8:	00c35000 	.word	0x00c35000
 800e5ec:	00f42400 	.word	0x00f42400
 800e5f0:	01458554 	.word	0x01458554
 800e5f4:	01e84800 	.word	0x01e84800
 800e5f8:	0001e848 	.word	0x0001e848
 800e5fc:	0003d090 	.word	0x0003d090
 800e600:	000a2c2a 	.word	0x000a2c2a
 800e604:	000c3500 	.word	0x000c3500
 800e608:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e610:	2b00      	cmp	r3, #0
 800e612:	d04f      	beq.n	800e6b4 <UART_SetConfig+0x1b34>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d048      	beq.n	800e6ae <UART_SetConfig+0x1b2e>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e620:	2b02      	cmp	r3, #2
 800e622:	d041      	beq.n	800e6a8 <UART_SetConfig+0x1b28>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e628:	2b03      	cmp	r3, #3
 800e62a:	d03a      	beq.n	800e6a2 <UART_SetConfig+0x1b22>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e630:	2b04      	cmp	r3, #4
 800e632:	d033      	beq.n	800e69c <UART_SetConfig+0x1b1c>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e638:	2b05      	cmp	r3, #5
 800e63a:	d02c      	beq.n	800e696 <UART_SetConfig+0x1b16>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e640:	2b06      	cmp	r3, #6
 800e642:	d025      	beq.n	800e690 <UART_SetConfig+0x1b10>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e648:	2b07      	cmp	r3, #7
 800e64a:	d01e      	beq.n	800e68a <UART_SetConfig+0x1b0a>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e650:	2b08      	cmp	r3, #8
 800e652:	d017      	beq.n	800e684 <UART_SetConfig+0x1b04>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e658:	2b09      	cmp	r3, #9
 800e65a:	d010      	beq.n	800e67e <UART_SetConfig+0x1afe>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e660:	2b0a      	cmp	r3, #10
 800e662:	d009      	beq.n	800e678 <UART_SetConfig+0x1af8>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e668:	2b0b      	cmp	r3, #11
 800e66a:	d102      	bne.n	800e672 <UART_SetConfig+0x1af2>
 800e66c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e670:	e022      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e676:	e01f      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e67c:	e01c      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e682:	e019      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e688:	e016      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e68a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e68e:	e013      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e690:	f241 5354 	movw	r3, #5460	; 0x1554
 800e694:	e010      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e696:	f641 1398 	movw	r3, #6552	; 0x1998
 800e69a:	e00d      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e69c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e6a0:	e00a      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e6a2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800e6a6:	e007      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e6a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e6ac:	e004      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e6ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6b2:	e001      	b.n	800e6b8 <UART_SetConfig+0x1b38>
 800e6b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	6852      	ldr	r2, [r2, #4]
 800e6bc:	0852      	lsrs	r2, r2, #1
 800e6be:	441a      	add	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e6cc:	e003      	b.n	800e6d6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800e6d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d8:	2b0f      	cmp	r3, #15
 800e6da:	d916      	bls.n	800e70a <UART_SetConfig+0x1b8a>
 800e6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6e2:	d212      	bcs.n	800e70a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	f023 030f 	bic.w	r3, r3, #15
 800e6ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f0:	085b      	lsrs	r3, r3, #1
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	f003 0307 	and.w	r3, r3, #7
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e706:	60da      	str	r2, [r3, #12]
 800e708:	e3a3      	b.n	800ee52 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e710:	e39f      	b.n	800ee52 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800e712:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e716:	2b40      	cmp	r3, #64	; 0x40
 800e718:	f200 8388 	bhi.w	800ee2c <UART_SetConfig+0x22ac>
 800e71c:	a201      	add	r2, pc, #4	; (adr r2, 800e724 <UART_SetConfig+0x1ba4>)
 800e71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e722:	bf00      	nop
 800e724:	0800e829 	.word	0x0800e829
 800e728:	0800e8df 	.word	0x0800e8df
 800e72c:	0800ee2d 	.word	0x0800ee2d
 800e730:	0800ee2d 	.word	0x0800ee2d
 800e734:	0800e995 	.word	0x0800e995
 800e738:	0800ee2d 	.word	0x0800ee2d
 800e73c:	0800ee2d 	.word	0x0800ee2d
 800e740:	0800ee2d 	.word	0x0800ee2d
 800e744:	0800ea4f 	.word	0x0800ea4f
 800e748:	0800ee2d 	.word	0x0800ee2d
 800e74c:	0800ee2d 	.word	0x0800ee2d
 800e750:	0800ee2d 	.word	0x0800ee2d
 800e754:	0800ee2d 	.word	0x0800ee2d
 800e758:	0800ee2d 	.word	0x0800ee2d
 800e75c:	0800ee2d 	.word	0x0800ee2d
 800e760:	0800ee2d 	.word	0x0800ee2d
 800e764:	0800eb09 	.word	0x0800eb09
 800e768:	0800ee2d 	.word	0x0800ee2d
 800e76c:	0800ee2d 	.word	0x0800ee2d
 800e770:	0800ee2d 	.word	0x0800ee2d
 800e774:	0800ee2d 	.word	0x0800ee2d
 800e778:	0800ee2d 	.word	0x0800ee2d
 800e77c:	0800ee2d 	.word	0x0800ee2d
 800e780:	0800ee2d 	.word	0x0800ee2d
 800e784:	0800ee2d 	.word	0x0800ee2d
 800e788:	0800ee2d 	.word	0x0800ee2d
 800e78c:	0800ee2d 	.word	0x0800ee2d
 800e790:	0800ee2d 	.word	0x0800ee2d
 800e794:	0800ee2d 	.word	0x0800ee2d
 800e798:	0800ee2d 	.word	0x0800ee2d
 800e79c:	0800ee2d 	.word	0x0800ee2d
 800e7a0:	0800ee2d 	.word	0x0800ee2d
 800e7a4:	0800ec79 	.word	0x0800ec79
 800e7a8:	0800ee2d 	.word	0x0800ee2d
 800e7ac:	0800ee2d 	.word	0x0800ee2d
 800e7b0:	0800ee2d 	.word	0x0800ee2d
 800e7b4:	0800ee2d 	.word	0x0800ee2d
 800e7b8:	0800ee2d 	.word	0x0800ee2d
 800e7bc:	0800ee2d 	.word	0x0800ee2d
 800e7c0:	0800ee2d 	.word	0x0800ee2d
 800e7c4:	0800ee2d 	.word	0x0800ee2d
 800e7c8:	0800ee2d 	.word	0x0800ee2d
 800e7cc:	0800ee2d 	.word	0x0800ee2d
 800e7d0:	0800ee2d 	.word	0x0800ee2d
 800e7d4:	0800ee2d 	.word	0x0800ee2d
 800e7d8:	0800ee2d 	.word	0x0800ee2d
 800e7dc:	0800ee2d 	.word	0x0800ee2d
 800e7e0:	0800ee2d 	.word	0x0800ee2d
 800e7e4:	0800ee2d 	.word	0x0800ee2d
 800e7e8:	0800ee2d 	.word	0x0800ee2d
 800e7ec:	0800ee2d 	.word	0x0800ee2d
 800e7f0:	0800ee2d 	.word	0x0800ee2d
 800e7f4:	0800ee2d 	.word	0x0800ee2d
 800e7f8:	0800ee2d 	.word	0x0800ee2d
 800e7fc:	0800ee2d 	.word	0x0800ee2d
 800e800:	0800ee2d 	.word	0x0800ee2d
 800e804:	0800ee2d 	.word	0x0800ee2d
 800e808:	0800ee2d 	.word	0x0800ee2d
 800e80c:	0800ee2d 	.word	0x0800ee2d
 800e810:	0800ee2d 	.word	0x0800ee2d
 800e814:	0800ee2d 	.word	0x0800ee2d
 800e818:	0800ee2d 	.word	0x0800ee2d
 800e81c:	0800ee2d 	.word	0x0800ee2d
 800e820:	0800ee2d 	.word	0x0800ee2d
 800e824:	0800ed6d 	.word	0x0800ed6d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e828:	f7fb fb8e 	bl	8009f48 <HAL_RCC_GetPCLK1Freq>
 800e82c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e832:	2b00      	cmp	r3, #0
 800e834:	d044      	beq.n	800e8c0 <UART_SetConfig+0x1d40>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d03e      	beq.n	800e8bc <UART_SetConfig+0x1d3c>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e842:	2b02      	cmp	r3, #2
 800e844:	d038      	beq.n	800e8b8 <UART_SetConfig+0x1d38>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84a:	2b03      	cmp	r3, #3
 800e84c:	d032      	beq.n	800e8b4 <UART_SetConfig+0x1d34>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e852:	2b04      	cmp	r3, #4
 800e854:	d02c      	beq.n	800e8b0 <UART_SetConfig+0x1d30>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85a:	2b05      	cmp	r3, #5
 800e85c:	d026      	beq.n	800e8ac <UART_SetConfig+0x1d2c>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e862:	2b06      	cmp	r3, #6
 800e864:	d020      	beq.n	800e8a8 <UART_SetConfig+0x1d28>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86a:	2b07      	cmp	r3, #7
 800e86c:	d01a      	beq.n	800e8a4 <UART_SetConfig+0x1d24>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e872:	2b08      	cmp	r3, #8
 800e874:	d014      	beq.n	800e8a0 <UART_SetConfig+0x1d20>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87a:	2b09      	cmp	r3, #9
 800e87c:	d00e      	beq.n	800e89c <UART_SetConfig+0x1d1c>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e882:	2b0a      	cmp	r3, #10
 800e884:	d008      	beq.n	800e898 <UART_SetConfig+0x1d18>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e88a:	2b0b      	cmp	r3, #11
 800e88c:	d102      	bne.n	800e894 <UART_SetConfig+0x1d14>
 800e88e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e892:	e016      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e894:	2301      	movs	r3, #1
 800e896:	e014      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e898:	2380      	movs	r3, #128	; 0x80
 800e89a:	e012      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e89c:	2340      	movs	r3, #64	; 0x40
 800e89e:	e010      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8a0:	2320      	movs	r3, #32
 800e8a2:	e00e      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8a4:	2310      	movs	r3, #16
 800e8a6:	e00c      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8a8:	230c      	movs	r3, #12
 800e8aa:	e00a      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8ac:	230a      	movs	r3, #10
 800e8ae:	e008      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8b0:	2308      	movs	r3, #8
 800e8b2:	e006      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8b4:	2306      	movs	r3, #6
 800e8b6:	e004      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8b8:	2304      	movs	r3, #4
 800e8ba:	e002      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8bc:	2302      	movs	r3, #2
 800e8be:	e000      	b.n	800e8c2 <UART_SetConfig+0x1d42>
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	085b      	lsrs	r3, r3, #1
 800e8ce:	441a      	add	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8dc:	e2aa      	b.n	800ee34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8de:	f7fb fb49 	bl	8009f74 <HAL_RCC_GetPCLK2Freq>
 800e8e2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d044      	beq.n	800e976 <UART_SetConfig+0x1df6>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d03e      	beq.n	800e972 <UART_SetConfig+0x1df2>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	d038      	beq.n	800e96e <UART_SetConfig+0x1dee>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e900:	2b03      	cmp	r3, #3
 800e902:	d032      	beq.n	800e96a <UART_SetConfig+0x1dea>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d02c      	beq.n	800e966 <UART_SetConfig+0x1de6>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e910:	2b05      	cmp	r3, #5
 800e912:	d026      	beq.n	800e962 <UART_SetConfig+0x1de2>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e918:	2b06      	cmp	r3, #6
 800e91a:	d020      	beq.n	800e95e <UART_SetConfig+0x1dde>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e920:	2b07      	cmp	r3, #7
 800e922:	d01a      	beq.n	800e95a <UART_SetConfig+0x1dda>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e928:	2b08      	cmp	r3, #8
 800e92a:	d014      	beq.n	800e956 <UART_SetConfig+0x1dd6>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e930:	2b09      	cmp	r3, #9
 800e932:	d00e      	beq.n	800e952 <UART_SetConfig+0x1dd2>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e938:	2b0a      	cmp	r3, #10
 800e93a:	d008      	beq.n	800e94e <UART_SetConfig+0x1dce>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e940:	2b0b      	cmp	r3, #11
 800e942:	d102      	bne.n	800e94a <UART_SetConfig+0x1dca>
 800e944:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e948:	e016      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e94a:	2301      	movs	r3, #1
 800e94c:	e014      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e94e:	2380      	movs	r3, #128	; 0x80
 800e950:	e012      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e952:	2340      	movs	r3, #64	; 0x40
 800e954:	e010      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e956:	2320      	movs	r3, #32
 800e958:	e00e      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e95a:	2310      	movs	r3, #16
 800e95c:	e00c      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e95e:	230c      	movs	r3, #12
 800e960:	e00a      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e962:	230a      	movs	r3, #10
 800e964:	e008      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e966:	2308      	movs	r3, #8
 800e968:	e006      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e96a:	2306      	movs	r3, #6
 800e96c:	e004      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e96e:	2304      	movs	r3, #4
 800e970:	e002      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e972:	2302      	movs	r3, #2
 800e974:	e000      	b.n	800e978 <UART_SetConfig+0x1df8>
 800e976:	2301      	movs	r3, #1
 800e978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e97a:	fbb2 f2f3 	udiv	r2, r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	085b      	lsrs	r3, r3, #1
 800e984:	441a      	add	r2, r3
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e98e:	b29b      	uxth	r3, r3
 800e990:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e992:	e24f      	b.n	800ee34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e994:	f107 0318 	add.w	r3, r7, #24
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fc fc6d 	bl	800b278 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e99e:	69fa      	ldr	r2, [r7, #28]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d044      	beq.n	800ea32 <UART_SetConfig+0x1eb2>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d03e      	beq.n	800ea2e <UART_SetConfig+0x1eae>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	2b02      	cmp	r3, #2
 800e9b6:	d038      	beq.n	800ea2a <UART_SetConfig+0x1eaa>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9bc:	2b03      	cmp	r3, #3
 800e9be:	d032      	beq.n	800ea26 <UART_SetConfig+0x1ea6>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c4:	2b04      	cmp	r3, #4
 800e9c6:	d02c      	beq.n	800ea22 <UART_SetConfig+0x1ea2>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9cc:	2b05      	cmp	r3, #5
 800e9ce:	d026      	beq.n	800ea1e <UART_SetConfig+0x1e9e>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d4:	2b06      	cmp	r3, #6
 800e9d6:	d020      	beq.n	800ea1a <UART_SetConfig+0x1e9a>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9dc:	2b07      	cmp	r3, #7
 800e9de:	d01a      	beq.n	800ea16 <UART_SetConfig+0x1e96>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e4:	2b08      	cmp	r3, #8
 800e9e6:	d014      	beq.n	800ea12 <UART_SetConfig+0x1e92>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ec:	2b09      	cmp	r3, #9
 800e9ee:	d00e      	beq.n	800ea0e <UART_SetConfig+0x1e8e>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	2b0a      	cmp	r3, #10
 800e9f6:	d008      	beq.n	800ea0a <UART_SetConfig+0x1e8a>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fc:	2b0b      	cmp	r3, #11
 800e9fe:	d102      	bne.n	800ea06 <UART_SetConfig+0x1e86>
 800ea00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea04:	e016      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea06:	2301      	movs	r3, #1
 800ea08:	e014      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea0a:	2380      	movs	r3, #128	; 0x80
 800ea0c:	e012      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea0e:	2340      	movs	r3, #64	; 0x40
 800ea10:	e010      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea12:	2320      	movs	r3, #32
 800ea14:	e00e      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea16:	2310      	movs	r3, #16
 800ea18:	e00c      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea1a:	230c      	movs	r3, #12
 800ea1c:	e00a      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea1e:	230a      	movs	r3, #10
 800ea20:	e008      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea22:	2308      	movs	r3, #8
 800ea24:	e006      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea26:	2306      	movs	r3, #6
 800ea28:	e004      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea2a:	2304      	movs	r3, #4
 800ea2c:	e002      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea2e:	2302      	movs	r3, #2
 800ea30:	e000      	b.n	800ea34 <UART_SetConfig+0x1eb4>
 800ea32:	2301      	movs	r3, #1
 800ea34:	fbb2 f2f3 	udiv	r2, r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	085b      	lsrs	r3, r3, #1
 800ea3e:	441a      	add	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea4c:	e1f2      	b.n	800ee34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea4e:	f107 030c 	add.w	r3, r7, #12
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fc fd5c 	bl	800b510 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d044      	beq.n	800eaec <UART_SetConfig+0x1f6c>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d03e      	beq.n	800eae8 <UART_SetConfig+0x1f68>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d038      	beq.n	800eae4 <UART_SetConfig+0x1f64>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	d032      	beq.n	800eae0 <UART_SetConfig+0x1f60>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7e:	2b04      	cmp	r3, #4
 800ea80:	d02c      	beq.n	800eadc <UART_SetConfig+0x1f5c>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea86:	2b05      	cmp	r3, #5
 800ea88:	d026      	beq.n	800ead8 <UART_SetConfig+0x1f58>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8e:	2b06      	cmp	r3, #6
 800ea90:	d020      	beq.n	800ead4 <UART_SetConfig+0x1f54>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea96:	2b07      	cmp	r3, #7
 800ea98:	d01a      	beq.n	800ead0 <UART_SetConfig+0x1f50>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea9e:	2b08      	cmp	r3, #8
 800eaa0:	d014      	beq.n	800eacc <UART_SetConfig+0x1f4c>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa6:	2b09      	cmp	r3, #9
 800eaa8:	d00e      	beq.n	800eac8 <UART_SetConfig+0x1f48>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaae:	2b0a      	cmp	r3, #10
 800eab0:	d008      	beq.n	800eac4 <UART_SetConfig+0x1f44>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab6:	2b0b      	cmp	r3, #11
 800eab8:	d102      	bne.n	800eac0 <UART_SetConfig+0x1f40>
 800eaba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eabe:	e016      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eac0:	2301      	movs	r3, #1
 800eac2:	e014      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eac4:	2380      	movs	r3, #128	; 0x80
 800eac6:	e012      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eac8:	2340      	movs	r3, #64	; 0x40
 800eaca:	e010      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eacc:	2320      	movs	r3, #32
 800eace:	e00e      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800ead0:	2310      	movs	r3, #16
 800ead2:	e00c      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800ead4:	230c      	movs	r3, #12
 800ead6:	e00a      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800ead8:	230a      	movs	r3, #10
 800eada:	e008      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eadc:	2308      	movs	r3, #8
 800eade:	e006      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eae0:	2306      	movs	r3, #6
 800eae2:	e004      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eae4:	2304      	movs	r3, #4
 800eae6:	e002      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eae8:	2302      	movs	r3, #2
 800eaea:	e000      	b.n	800eaee <UART_SetConfig+0x1f6e>
 800eaec:	2301      	movs	r3, #1
 800eaee:	fbb2 f2f3 	udiv	r2, r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	085b      	lsrs	r3, r3, #1
 800eaf8:	441a      	add	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eb06:	e195      	b.n	800ee34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb08:	4b87      	ldr	r3, [pc, #540]	; (800ed28 <UART_SetConfig+0x21a8>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f003 0320 	and.w	r3, r3, #32
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d05d      	beq.n	800ebd0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb14:	4b84      	ldr	r3, [pc, #528]	; (800ed28 <UART_SetConfig+0x21a8>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	08db      	lsrs	r3, r3, #3
 800eb1a:	f003 0303 	and.w	r3, r3, #3
 800eb1e:	4a83      	ldr	r2, [pc, #524]	; (800ed2c <UART_SetConfig+0x21ac>)
 800eb20:	40da      	lsrs	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d044      	beq.n	800ebb4 <UART_SetConfig+0x2034>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d03e      	beq.n	800ebb0 <UART_SetConfig+0x2030>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	d038      	beq.n	800ebac <UART_SetConfig+0x202c>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb3e:	2b03      	cmp	r3, #3
 800eb40:	d032      	beq.n	800eba8 <UART_SetConfig+0x2028>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb46:	2b04      	cmp	r3, #4
 800eb48:	d02c      	beq.n	800eba4 <UART_SetConfig+0x2024>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4e:	2b05      	cmp	r3, #5
 800eb50:	d026      	beq.n	800eba0 <UART_SetConfig+0x2020>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb56:	2b06      	cmp	r3, #6
 800eb58:	d020      	beq.n	800eb9c <UART_SetConfig+0x201c>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5e:	2b07      	cmp	r3, #7
 800eb60:	d01a      	beq.n	800eb98 <UART_SetConfig+0x2018>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb66:	2b08      	cmp	r3, #8
 800eb68:	d014      	beq.n	800eb94 <UART_SetConfig+0x2014>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6e:	2b09      	cmp	r3, #9
 800eb70:	d00e      	beq.n	800eb90 <UART_SetConfig+0x2010>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb76:	2b0a      	cmp	r3, #10
 800eb78:	d008      	beq.n	800eb8c <UART_SetConfig+0x200c>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7e:	2b0b      	cmp	r3, #11
 800eb80:	d102      	bne.n	800eb88 <UART_SetConfig+0x2008>
 800eb82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb86:	e016      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e014      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eb8c:	2380      	movs	r3, #128	; 0x80
 800eb8e:	e012      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eb90:	2340      	movs	r3, #64	; 0x40
 800eb92:	e010      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eb94:	2320      	movs	r3, #32
 800eb96:	e00e      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eb98:	2310      	movs	r3, #16
 800eb9a:	e00c      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eb9c:	230c      	movs	r3, #12
 800eb9e:	e00a      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eba0:	230a      	movs	r3, #10
 800eba2:	e008      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eba4:	2308      	movs	r3, #8
 800eba6:	e006      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800eba8:	2306      	movs	r3, #6
 800ebaa:	e004      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800ebac:	2304      	movs	r3, #4
 800ebae:	e002      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	e000      	b.n	800ebb6 <UART_SetConfig+0x2036>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	fbb2 f2f3 	udiv	r2, r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	085b      	lsrs	r3, r3, #1
 800ebc0:	441a      	add	r2, r3
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800ebce:	e131      	b.n	800ee34 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d043      	beq.n	800ec60 <UART_SetConfig+0x20e0>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d03d      	beq.n	800ec5c <UART_SetConfig+0x20dc>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d037      	beq.n	800ec58 <UART_SetConfig+0x20d8>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebec:	2b03      	cmp	r3, #3
 800ebee:	d031      	beq.n	800ec54 <UART_SetConfig+0x20d4>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf4:	2b04      	cmp	r3, #4
 800ebf6:	d02b      	beq.n	800ec50 <UART_SetConfig+0x20d0>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfc:	2b05      	cmp	r3, #5
 800ebfe:	d025      	beq.n	800ec4c <UART_SetConfig+0x20cc>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec04:	2b06      	cmp	r3, #6
 800ec06:	d01f      	beq.n	800ec48 <UART_SetConfig+0x20c8>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0c:	2b07      	cmp	r3, #7
 800ec0e:	d019      	beq.n	800ec44 <UART_SetConfig+0x20c4>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec14:	2b08      	cmp	r3, #8
 800ec16:	d013      	beq.n	800ec40 <UART_SetConfig+0x20c0>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1c:	2b09      	cmp	r3, #9
 800ec1e:	d00d      	beq.n	800ec3c <UART_SetConfig+0x20bc>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec24:	2b0a      	cmp	r3, #10
 800ec26:	d007      	beq.n	800ec38 <UART_SetConfig+0x20b8>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2c:	2b0b      	cmp	r3, #11
 800ec2e:	d101      	bne.n	800ec34 <UART_SetConfig+0x20b4>
 800ec30:	4b3f      	ldr	r3, [pc, #252]	; (800ed30 <UART_SetConfig+0x21b0>)
 800ec32:	e016      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec34:	4b3d      	ldr	r3, [pc, #244]	; (800ed2c <UART_SetConfig+0x21ac>)
 800ec36:	e014      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec38:	4b3e      	ldr	r3, [pc, #248]	; (800ed34 <UART_SetConfig+0x21b4>)
 800ec3a:	e012      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec3c:	4b3e      	ldr	r3, [pc, #248]	; (800ed38 <UART_SetConfig+0x21b8>)
 800ec3e:	e010      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec40:	4b3e      	ldr	r3, [pc, #248]	; (800ed3c <UART_SetConfig+0x21bc>)
 800ec42:	e00e      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec44:	4b3e      	ldr	r3, [pc, #248]	; (800ed40 <UART_SetConfig+0x21c0>)
 800ec46:	e00c      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec48:	4b3e      	ldr	r3, [pc, #248]	; (800ed44 <UART_SetConfig+0x21c4>)
 800ec4a:	e00a      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec4c:	4b3e      	ldr	r3, [pc, #248]	; (800ed48 <UART_SetConfig+0x21c8>)
 800ec4e:	e008      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec50:	4b3e      	ldr	r3, [pc, #248]	; (800ed4c <UART_SetConfig+0x21cc>)
 800ec52:	e006      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec54:	4b3e      	ldr	r3, [pc, #248]	; (800ed50 <UART_SetConfig+0x21d0>)
 800ec56:	e004      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec58:	4b3e      	ldr	r3, [pc, #248]	; (800ed54 <UART_SetConfig+0x21d4>)
 800ec5a:	e002      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec5c:	4b3e      	ldr	r3, [pc, #248]	; (800ed58 <UART_SetConfig+0x21d8>)
 800ec5e:	e000      	b.n	800ec62 <UART_SetConfig+0x20e2>
 800ec60:	4b32      	ldr	r3, [pc, #200]	; (800ed2c <UART_SetConfig+0x21ac>)
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	6852      	ldr	r2, [r2, #4]
 800ec66:	0852      	lsrs	r2, r2, #1
 800ec68:	441a      	add	r2, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec76:	e0dd      	b.n	800ee34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d046      	beq.n	800ed0e <UART_SetConfig+0x218e>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d040      	beq.n	800ed0a <UART_SetConfig+0x218a>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8c:	2b02      	cmp	r3, #2
 800ec8e:	d03a      	beq.n	800ed06 <UART_SetConfig+0x2186>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec94:	2b03      	cmp	r3, #3
 800ec96:	d034      	beq.n	800ed02 <UART_SetConfig+0x2182>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9c:	2b04      	cmp	r3, #4
 800ec9e:	d02e      	beq.n	800ecfe <UART_SetConfig+0x217e>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca4:	2b05      	cmp	r3, #5
 800eca6:	d028      	beq.n	800ecfa <UART_SetConfig+0x217a>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecac:	2b06      	cmp	r3, #6
 800ecae:	d022      	beq.n	800ecf6 <UART_SetConfig+0x2176>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb4:	2b07      	cmp	r3, #7
 800ecb6:	d01c      	beq.n	800ecf2 <UART_SetConfig+0x2172>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbc:	2b08      	cmp	r3, #8
 800ecbe:	d016      	beq.n	800ecee <UART_SetConfig+0x216e>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc4:	2b09      	cmp	r3, #9
 800ecc6:	d00f      	beq.n	800ece8 <UART_SetConfig+0x2168>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eccc:	2b0a      	cmp	r3, #10
 800ecce:	d008      	beq.n	800ece2 <UART_SetConfig+0x2162>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd4:	2b0b      	cmp	r3, #11
 800ecd6:	d102      	bne.n	800ecde <UART_SetConfig+0x215e>
 800ecd8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800ecdc:	e018      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ecde:	4b18      	ldr	r3, [pc, #96]	; (800ed40 <UART_SetConfig+0x21c0>)
 800ece0:	e016      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ece2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800ece6:	e013      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ece8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ecec:	e010      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ecee:	4b1b      	ldr	r3, [pc, #108]	; (800ed5c <UART_SetConfig+0x21dc>)
 800ecf0:	e00e      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ecf2:	4b0f      	ldr	r3, [pc, #60]	; (800ed30 <UART_SetConfig+0x21b0>)
 800ecf4:	e00c      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ecf6:	4b1a      	ldr	r3, [pc, #104]	; (800ed60 <UART_SetConfig+0x21e0>)
 800ecf8:	e00a      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ecfa:	4b1a      	ldr	r3, [pc, #104]	; (800ed64 <UART_SetConfig+0x21e4>)
 800ecfc:	e008      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	; (800ed34 <UART_SetConfig+0x21b4>)
 800ed00:	e006      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ed02:	4b19      	ldr	r3, [pc, #100]	; (800ed68 <UART_SetConfig+0x21e8>)
 800ed04:	e004      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ed06:	4b0c      	ldr	r3, [pc, #48]	; (800ed38 <UART_SetConfig+0x21b8>)
 800ed08:	e002      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ed0a:	4b0c      	ldr	r3, [pc, #48]	; (800ed3c <UART_SetConfig+0x21bc>)
 800ed0c:	e000      	b.n	800ed10 <UART_SetConfig+0x2190>
 800ed0e:	4b0c      	ldr	r3, [pc, #48]	; (800ed40 <UART_SetConfig+0x21c0>)
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	6852      	ldr	r2, [r2, #4]
 800ed14:	0852      	lsrs	r2, r2, #1
 800ed16:	441a      	add	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed24:	e086      	b.n	800ee34 <UART_SetConfig+0x22b4>
 800ed26:	bf00      	nop
 800ed28:	58024400 	.word	0x58024400
 800ed2c:	03d09000 	.word	0x03d09000
 800ed30:	0003d090 	.word	0x0003d090
 800ed34:	0007a120 	.word	0x0007a120
 800ed38:	000f4240 	.word	0x000f4240
 800ed3c:	001e8480 	.word	0x001e8480
 800ed40:	003d0900 	.word	0x003d0900
 800ed44:	00516155 	.word	0x00516155
 800ed48:	0061a800 	.word	0x0061a800
 800ed4c:	007a1200 	.word	0x007a1200
 800ed50:	00a2c2aa 	.word	0x00a2c2aa
 800ed54:	00f42400 	.word	0x00f42400
 800ed58:	01e84800 	.word	0x01e84800
 800ed5c:	0001e848 	.word	0x0001e848
 800ed60:	00051615 	.word	0x00051615
 800ed64:	00061a80 	.word	0x00061a80
 800ed68:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d04e      	beq.n	800ee12 <UART_SetConfig+0x2292>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d047      	beq.n	800ee0c <UART_SetConfig+0x228c>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d040      	beq.n	800ee06 <UART_SetConfig+0x2286>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d039      	beq.n	800ee00 <UART_SetConfig+0x2280>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed90:	2b04      	cmp	r3, #4
 800ed92:	d032      	beq.n	800edfa <UART_SetConfig+0x227a>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed98:	2b05      	cmp	r3, #5
 800ed9a:	d02b      	beq.n	800edf4 <UART_SetConfig+0x2274>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda0:	2b06      	cmp	r3, #6
 800eda2:	d024      	beq.n	800edee <UART_SetConfig+0x226e>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda8:	2b07      	cmp	r3, #7
 800edaa:	d01d      	beq.n	800ede8 <UART_SetConfig+0x2268>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb0:	2b08      	cmp	r3, #8
 800edb2:	d016      	beq.n	800ede2 <UART_SetConfig+0x2262>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb8:	2b09      	cmp	r3, #9
 800edba:	d00f      	beq.n	800eddc <UART_SetConfig+0x225c>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc0:	2b0a      	cmp	r3, #10
 800edc2:	d008      	beq.n	800edd6 <UART_SetConfig+0x2256>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc8:	2b0b      	cmp	r3, #11
 800edca:	d101      	bne.n	800edd0 <UART_SetConfig+0x2250>
 800edcc:	2380      	movs	r3, #128	; 0x80
 800edce:	e022      	b.n	800ee16 <UART_SetConfig+0x2296>
 800edd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edd4:	e01f      	b.n	800ee16 <UART_SetConfig+0x2296>
 800edd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edda:	e01c      	b.n	800ee16 <UART_SetConfig+0x2296>
 800eddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ede0:	e019      	b.n	800ee16 <UART_SetConfig+0x2296>
 800ede2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ede6:	e016      	b.n	800ee16 <UART_SetConfig+0x2296>
 800ede8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800edec:	e013      	b.n	800ee16 <UART_SetConfig+0x2296>
 800edee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800edf2:	e010      	b.n	800ee16 <UART_SetConfig+0x2296>
 800edf4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800edf8:	e00d      	b.n	800ee16 <UART_SetConfig+0x2296>
 800edfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edfe:	e00a      	b.n	800ee16 <UART_SetConfig+0x2296>
 800ee00:	f241 5355 	movw	r3, #5461	; 0x1555
 800ee04:	e007      	b.n	800ee16 <UART_SetConfig+0x2296>
 800ee06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ee0a:	e004      	b.n	800ee16 <UART_SetConfig+0x2296>
 800ee0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ee10:	e001      	b.n	800ee16 <UART_SetConfig+0x2296>
 800ee12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	6852      	ldr	r2, [r2, #4]
 800ee1a:	0852      	lsrs	r2, r2, #1
 800ee1c:	441a      	add	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ee2a:	e003      	b.n	800ee34 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ee32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee36:	2b0f      	cmp	r3, #15
 800ee38:	d908      	bls.n	800ee4c <UART_SetConfig+0x22cc>
 800ee3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee40:	d204      	bcs.n	800ee4c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee48:	60da      	str	r2, [r3, #12]
 800ee4a:	e002      	b.n	800ee52 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2201      	movs	r2, #1
 800ee56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ee6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3740      	adds	r7, #64	; 0x40
 800ee76:	46bd      	mov	sp, r7
 800ee78:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ee7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee88:	f003 0301 	and.w	r3, r3, #1
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00a      	beq.n	800eea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	430a      	orrs	r2, r1
 800eea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeaa:	f003 0302 	and.w	r3, r3, #2
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00a      	beq.n	800eec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	430a      	orrs	r2, r1
 800eec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eecc:	f003 0304 	and.w	r3, r3, #4
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00a      	beq.n	800eeea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	430a      	orrs	r2, r1
 800eee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeee:	f003 0308 	and.w	r3, r3, #8
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00a      	beq.n	800ef0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	430a      	orrs	r2, r1
 800ef0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef10:	f003 0310 	and.w	r3, r3, #16
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00a      	beq.n	800ef2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	430a      	orrs	r2, r1
 800ef2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef32:	f003 0320 	and.w	r3, r3, #32
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00a      	beq.n	800ef50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	430a      	orrs	r2, r1
 800ef4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d01a      	beq.n	800ef92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	430a      	orrs	r2, r1
 800ef70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef7a:	d10a      	bne.n	800ef92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	430a      	orrs	r2, r1
 800ef90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00a      	beq.n	800efb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	430a      	orrs	r2, r1
 800efb2:	605a      	str	r2, [r3, #4]
  }
}
 800efb4:	bf00      	nop
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af02      	add	r7, sp, #8
 800efc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800efd0:	f7f5 fd62 	bl	8004a98 <HAL_GetTick>
 800efd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f003 0308 	and.w	r3, r3, #8
 800efe0:	2b08      	cmp	r3, #8
 800efe2:	d10e      	bne.n	800f002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2200      	movs	r2, #0
 800efee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 f82c 	bl	800f050 <UART_WaitOnFlagUntilTimeout>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800effe:	2303      	movs	r3, #3
 800f000:	e022      	b.n	800f048 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f003 0304 	and.w	r3, r3, #4
 800f00c:	2b04      	cmp	r3, #4
 800f00e:	d10e      	bne.n	800f02e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f014:	9300      	str	r3, [sp, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2200      	movs	r2, #0
 800f01a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f816 	bl	800f050 <UART_WaitOnFlagUntilTimeout>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d001      	beq.n	800f02e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f02a:	2303      	movs	r3, #3
 800f02c:	e00c      	b.n	800f048 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2220      	movs	r2, #32
 800f032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2220      	movs	r2, #32
 800f03a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	603b      	str	r3, [r7, #0]
 800f05c:	4613      	mov	r3, r2
 800f05e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f060:	e062      	b.n	800f128 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f068:	d05e      	beq.n	800f128 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f06a:	f7f5 fd15 	bl	8004a98 <HAL_GetTick>
 800f06e:	4602      	mov	r2, r0
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	1ad3      	subs	r3, r2, r3
 800f074:	69ba      	ldr	r2, [r7, #24]
 800f076:	429a      	cmp	r2, r3
 800f078:	d302      	bcc.n	800f080 <UART_WaitOnFlagUntilTimeout+0x30>
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d11d      	bne.n	800f0bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f08e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	689a      	ldr	r2, [r3, #8]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f022 0201 	bic.w	r2, r2, #1
 800f09e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2220      	movs	r2, #32
 800f0a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2220      	movs	r2, #32
 800f0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800f0b8:	2303      	movs	r3, #3
 800f0ba:	e045      	b.n	800f148 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f003 0304 	and.w	r3, r3, #4
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d02e      	beq.n	800f128 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	69db      	ldr	r3, [r3, #28]
 800f0d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0d8:	d126      	bne.n	800f128 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0e2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f0f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	689a      	ldr	r2, [r3, #8]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f022 0201 	bic.w	r2, r2, #1
 800f102:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2220      	movs	r2, #32
 800f108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2220      	movs	r2, #32
 800f110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2220      	movs	r2, #32
 800f118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800f124:	2303      	movs	r3, #3
 800f126:	e00f      	b.n	800f148 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	69da      	ldr	r2, [r3, #28]
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	4013      	ands	r3, r2
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	429a      	cmp	r2, r3
 800f136:	bf0c      	ite	eq
 800f138:	2301      	moveq	r3, #1
 800f13a:	2300      	movne	r3, #0
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	461a      	mov	r2, r3
 800f140:	79fb      	ldrb	r3, [r7, #7]
 800f142:	429a      	cmp	r2, r3
 800f144:	d08d      	beq.n	800f062 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f146:	2300      	movs	r3, #0
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f166:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	689a      	ldr	r2, [r3, #8]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f176:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2220      	movs	r2, #32
 800f17c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f1a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6899      	ldr	r1, [r3, #8]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	4b08      	ldr	r3, [pc, #32]	; (800f1d0 <UART_EndRxTransfer+0x44>)
 800f1b0:	400b      	ands	r3, r1
 800f1b2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2220      	movs	r2, #32
 800f1b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800f1c2:	bf00      	nop
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	effffffe 	.word	0xeffffffe

0800f1d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	69db      	ldr	r3, [r3, #28]
 800f1e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1ea:	d01f      	beq.n	800f22c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f202:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	689a      	ldr	r2, [r3, #8]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f022 0201 	bic.w	r2, r2, #1
 800f212:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689a      	ldr	r2, [r3, #8]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f222:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2220      	movs	r2, #32
 800f228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f7f1 fae9 	bl	8000804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f232:	bf00      	nop
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b084      	sub	sp, #16
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f246:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800f248:	68f8      	ldr	r0, [r7, #12]
 800f24a:	f7fd fc85 	bl	800cb58 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f24e:	bf00      	nop
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b086      	sub	sp, #24
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f262:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f26a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f272:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f27e:	2b80      	cmp	r3, #128	; 0x80
 800f280:	d109      	bne.n	800f296 <UART_DMAError+0x40>
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	2b21      	cmp	r3, #33	; 0x21
 800f286:	d106      	bne.n	800f296 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f290:	6978      	ldr	r0, [r7, #20]
 800f292:	f7ff ff5d 	bl	800f150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2a0:	2b40      	cmp	r3, #64	; 0x40
 800f2a2:	d109      	bne.n	800f2b8 <UART_DMAError+0x62>
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2b22      	cmp	r3, #34	; 0x22
 800f2a8:	d106      	bne.n	800f2b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f2b2:	6978      	ldr	r0, [r7, #20]
 800f2b4:	f7ff ff6a 	bl	800f18c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2be:	f043 0210 	orr.w	r2, r3, #16
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f2c8:	6978      	ldr	r0, [r7, #20]
 800f2ca:	f7fd fc4f 	bl	800cb6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2ce:	bf00      	nop
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b084      	sub	sp, #16
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f7fd fc39 	bl	800cb6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2fa:	bf00      	nop
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f302:	b480      	push	{r7}
 800f304:	b083      	sub	sp, #12
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f310:	2b21      	cmp	r3, #33	; 0x21
 800f312:	d12a      	bne.n	800f36a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d110      	bne.n	800f342 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f32e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f33e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f340:	e013      	b.n	800f36a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f346:	781a      	ldrb	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f352:	1c5a      	adds	r2, r3, #1
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f35e:	b29b      	uxth	r3, r3
 800f360:	3b01      	subs	r3, #1
 800f362:	b29a      	uxth	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f36a:	bf00      	nop
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f376:	b480      	push	{r7}
 800f378:	b085      	sub	sp, #20
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f384:	2b21      	cmp	r3, #33	; 0x21
 800f386:	d12f      	bne.n	800f3e8 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f38e:	b29b      	uxth	r3, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	d110      	bne.n	800f3b6 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3a2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f3b2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f3b4:	e018      	b.n	800f3e8 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f3ca:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3d0:	1c9a      	adds	r2, r3, #2
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	3b01      	subs	r3, #1
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f3e8:	bf00      	nop
 800f3ea:	3714      	adds	r7, #20
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b085      	sub	sp, #20
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f402:	2b21      	cmp	r3, #33	; 0x21
 800f404:	d13d      	bne.n	800f482 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f40c:	81fb      	strh	r3, [r7, #14]
 800f40e:	e035      	b.n	800f47c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f416:	b29b      	uxth	r3, r3
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d111      	bne.n	800f440 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689a      	ldr	r2, [r3, #8]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f42a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f43a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800f43c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800f43e:	e020      	b.n	800f482 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	69db      	ldr	r3, [r3, #28]
 800f446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d013      	beq.n	800f476 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f452:	781a      	ldrb	r2, [r3, #0]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	3b01      	subs	r3, #1
 800f46e:	b29a      	uxth	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f476:	89fb      	ldrh	r3, [r7, #14]
 800f478:	3b01      	subs	r3, #1
 800f47a:	81fb      	strh	r3, [r7, #14]
 800f47c:	89fb      	ldrh	r3, [r7, #14]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1c6      	bne.n	800f410 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800f482:	bf00      	nop
 800f484:	3714      	adds	r7, #20
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f48e:	b480      	push	{r7}
 800f490:	b085      	sub	sp, #20
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f49c:	2b21      	cmp	r3, #33	; 0x21
 800f49e:	d142      	bne.n	800f526 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4a6:	81fb      	strh	r3, [r7, #14]
 800f4a8:	e03a      	b.n	800f520 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d111      	bne.n	800f4da <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	689a      	ldr	r2, [r3, #8]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f4c4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f4d4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800f4d6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800f4d8:	e025      	b.n	800f526 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	69db      	ldr	r3, [r3, #28]
 800f4e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d018      	beq.n	800f51a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4ec:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f4fc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f502:	1c9a      	adds	r2, r3, #2
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f50e:	b29b      	uxth	r3, r3
 800f510:	3b01      	subs	r3, #1
 800f512:	b29a      	uxth	r2, r3
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f51a:	89fb      	ldrh	r3, [r7, #14]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	81fb      	strh	r3, [r7, #14]
 800f520:	89fb      	ldrh	r3, [r7, #14]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1c1      	bne.n	800f4aa <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800f526:	bf00      	nop
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr

0800f532 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b082      	sub	sp, #8
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f548:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2220      	movs	r2, #32
 800f54e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f7f1 f911 	bl	8000780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f55e:	bf00      	nop
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b084      	sub	sp, #16
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f574:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f57c:	2b22      	cmp	r3, #34	; 0x22
 800f57e:	d13b      	bne.n	800f5f8 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f586:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f588:	89bb      	ldrh	r3, [r7, #12]
 800f58a:	b2d9      	uxtb	r1, r3
 800f58c:	89fb      	ldrh	r3, [r7, #14]
 800f58e:	b2da      	uxtb	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f594:	400a      	ands	r2, r1
 800f596:	b2d2      	uxtb	r2, r2
 800f598:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f59e:	1c5a      	adds	r2, r3, #1
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d122      	bne.n	800f608 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f5d0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	689a      	ldr	r2, [r3, #8]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f022 0201 	bic.w	r2, r2, #1
 800f5e0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2220      	movs	r2, #32
 800f5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7f1 f907 	bl	8000804 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5f6:	e007      	b.n	800f608 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	699a      	ldr	r2, [r3, #24]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f042 0208 	orr.w	r2, r2, #8
 800f606:	619a      	str	r2, [r3, #24]
}
 800f608:	bf00      	nop
 800f60a:	3710      	adds	r7, #16
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f61e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f626:	2b22      	cmp	r3, #34	; 0x22
 800f628:	d13b      	bne.n	800f6a2 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f630:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f636:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f638:	89ba      	ldrh	r2, [r7, #12]
 800f63a:	89fb      	ldrh	r3, [r7, #14]
 800f63c:	4013      	ands	r3, r2
 800f63e:	b29a      	uxth	r2, r3
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f648:	1c9a      	adds	r2, r3, #2
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f654:	b29b      	uxth	r3, r3
 800f656:	3b01      	subs	r3, #1
 800f658:	b29a      	uxth	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f666:	b29b      	uxth	r3, r3
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d122      	bne.n	800f6b2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f67a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	689a      	ldr	r2, [r3, #8]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f022 0201 	bic.w	r2, r2, #1
 800f68a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2220      	movs	r2, #32
 800f690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f7f1 f8b2 	bl	8000804 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6a0:	e007      	b.n	800f6b2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	699a      	ldr	r2, [r3, #24]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f042 0208 	orr.w	r2, r2, #8
 800f6b0:	619a      	str	r2, [r3, #24]
}
 800f6b2:	bf00      	nop
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
	...

0800f6bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6ca:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6d2:	2b22      	cmp	r3, #34	; 0x22
 800f6d4:	d166      	bne.n	800f7a4 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6dc:	81fb      	strh	r3, [r7, #14]
 800f6de:	e03d      	b.n	800f75c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f6e8:	893b      	ldrh	r3, [r7, #8]
 800f6ea:	b2d9      	uxtb	r1, r3
 800f6ec:	89bb      	ldrh	r3, [r7, #12]
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f4:	400a      	ands	r2, r1
 800f6f6:	b2d2      	uxtb	r2, r2
 800f6f8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6fe:	1c5a      	adds	r2, r3, #1
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	3b01      	subs	r3, #1
 800f70e:	b29a      	uxth	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d119      	bne.n	800f756 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f730:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	6899      	ldr	r1, [r3, #8]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	4b1f      	ldr	r3, [pc, #124]	; (800f7bc <UART_RxISR_8BIT_FIFOEN+0x100>)
 800f73e:	400b      	ands	r3, r1
 800f740:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2220      	movs	r2, #32
 800f746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2200      	movs	r2, #0
 800f74e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7f1 f857 	bl	8000804 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800f756:	89fb      	ldrh	r3, [r7, #14]
 800f758:	3b01      	subs	r3, #1
 800f75a:	81fb      	strh	r3, [r7, #14]
 800f75c:	89fb      	ldrh	r3, [r7, #14]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1be      	bne.n	800f6e0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f768:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f76a:	897b      	ldrh	r3, [r7, #10]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d021      	beq.n	800f7b4 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f776:	897a      	ldrh	r2, [r7, #10]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d21b      	bcs.n	800f7b4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	689a      	ldr	r2, [r3, #8]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f78a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4a0c      	ldr	r2, [pc, #48]	; (800f7c0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800f790:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f042 0220 	orr.w	r2, r2, #32
 800f7a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f7a2:	e007      	b.n	800f7b4 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	699a      	ldr	r2, [r3, #24]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f042 0208 	orr.w	r2, r2, #8
 800f7b2:	619a      	str	r2, [r3, #24]
}
 800f7b4:	bf00      	nop
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	effffffe 	.word	0xeffffffe
 800f7c0:	0800f567 	.word	0x0800f567

0800f7c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7d2:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7da:	2b22      	cmp	r3, #34	; 0x22
 800f7dc:	d166      	bne.n	800f8ac <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7e4:	82fb      	strh	r3, [r7, #22]
 800f7e6:	e03d      	b.n	800f864 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ee:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7f4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800f7f6:	8a3a      	ldrh	r2, [r7, #16]
 800f7f8:	8abb      	ldrh	r3, [r7, #20]
 800f7fa:	4013      	ands	r3, r2
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f806:	1c9a      	adds	r2, r3, #2
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f812:	b29b      	uxth	r3, r3
 800f814:	3b01      	subs	r3, #1
 800f816:	b29a      	uxth	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f824:	b29b      	uxth	r3, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d119      	bne.n	800f85e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f838:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	6899      	ldr	r1, [r3, #8]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	4b1f      	ldr	r3, [pc, #124]	; (800f8c4 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800f846:	400b      	ands	r3, r1
 800f848:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2220      	movs	r2, #32
 800f84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7f0 ffd3 	bl	8000804 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800f85e:	8afb      	ldrh	r3, [r7, #22]
 800f860:	3b01      	subs	r3, #1
 800f862:	82fb      	strh	r3, [r7, #22]
 800f864:	8afb      	ldrh	r3, [r7, #22]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1be      	bne.n	800f7e8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f870:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f872:	8a7b      	ldrh	r3, [r7, #18]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d021      	beq.n	800f8bc <UART_RxISR_16BIT_FIFOEN+0xf8>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f87e:	8a7a      	ldrh	r2, [r7, #18]
 800f880:	429a      	cmp	r2, r3
 800f882:	d21b      	bcs.n	800f8bc <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	689a      	ldr	r2, [r3, #8]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f892:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a0c      	ldr	r2, [pc, #48]	; (800f8c8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800f898:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f042 0220 	orr.w	r2, r2, #32
 800f8a8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f8aa:	e007      	b.n	800f8bc <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	699a      	ldr	r2, [r3, #24]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f042 0208 	orr.w	r2, r2, #8
 800f8ba:	619a      	str	r2, [r3, #24]
}
 800f8bc:	bf00      	nop
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	effffffe 	.word	0xeffffffe
 800f8c8:	0800f611 	.word	0x0800f611

0800f8cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f8e8:	bf00      	nop
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f8fc:	bf00      	nop
 800f8fe:	370c      	adds	r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f916:	2b01      	cmp	r3, #1
 800f918:	d101      	bne.n	800f91e <HAL_UARTEx_DisableFifoMode+0x16>
 800f91a:	2302      	movs	r3, #2
 800f91c:	e027      	b.n	800f96e <HAL_UARTEx_DisableFifoMode+0x66>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2224      	movs	r2, #36	; 0x24
 800f92a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f022 0201 	bic.w	r2, r2, #1
 800f944:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f94c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2220      	movs	r2, #32
 800f960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2200      	movs	r2, #0
 800f968:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b084      	sub	sp, #16
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
 800f982:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d101      	bne.n	800f992 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f98e:	2302      	movs	r3, #2
 800f990:	e02d      	b.n	800f9ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2224      	movs	r2, #36	; 0x24
 800f99e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f022 0201 	bic.w	r2, r2, #1
 800f9b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	683a      	ldr	r2, [r7, #0]
 800f9ca:	430a      	orrs	r2, r1
 800f9cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f850 	bl	800fa74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2220      	movs	r2, #32
 800f9e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3710      	adds	r7, #16
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]
 800f9fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d101      	bne.n	800fa0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa0a:	2302      	movs	r3, #2
 800fa0c:	e02d      	b.n	800fa6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2201      	movs	r2, #1
 800fa12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2224      	movs	r2, #36	; 0x24
 800fa1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f022 0201 	bic.w	r2, r2, #1
 800fa34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	689b      	ldr	r3, [r3, #8]
 800fa3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	683a      	ldr	r2, [r7, #0]
 800fa46:	430a      	orrs	r2, r1
 800fa48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f812 	bl	800fa74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2220      	movs	r2, #32
 800fa5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
	...

0800fa74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b089      	sub	sp, #36	; 0x24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800fa7c:	4a2f      	ldr	r2, [pc, #188]	; (800fb3c <UARTEx_SetNbDataToProcess+0xc8>)
 800fa7e:	f107 0314 	add.w	r3, r7, #20
 800fa82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa86:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800fa8a:	4a2d      	ldr	r2, [pc, #180]	; (800fb40 <UARTEx_SetNbDataToProcess+0xcc>)
 800fa8c:	f107 030c 	add.w	r3, r7, #12
 800fa90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa94:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d108      	bne.n	800fab2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2201      	movs	r2, #1
 800faa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2201      	movs	r2, #1
 800faac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fab0:	e03d      	b.n	800fb2e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fab2:	2308      	movs	r3, #8
 800fab4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fab6:	2308      	movs	r3, #8
 800fab8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	0e5b      	lsrs	r3, r3, #25
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	f003 0307 	and.w	r3, r3, #7
 800fac8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	0f5b      	lsrs	r3, r3, #29
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	f003 0307 	and.w	r3, r3, #7
 800fad8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800fada:	7fbb      	ldrb	r3, [r7, #30]
 800fadc:	7f3a      	ldrb	r2, [r7, #28]
 800fade:	f107 0120 	add.w	r1, r7, #32
 800fae2:	440a      	add	r2, r1
 800fae4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800fae8:	fb02 f303 	mul.w	r3, r2, r3
 800faec:	7f3a      	ldrb	r2, [r7, #28]
 800faee:	f107 0120 	add.w	r1, r7, #32
 800faf2:	440a      	add	r2, r1
 800faf4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800faf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800fb04:	7ffb      	ldrb	r3, [r7, #31]
 800fb06:	7f7a      	ldrb	r2, [r7, #29]
 800fb08:	f107 0120 	add.w	r1, r7, #32
 800fb0c:	440a      	add	r2, r1
 800fb0e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800fb12:	fb02 f303 	mul.w	r3, r2, r3
 800fb16:	7f7a      	ldrb	r2, [r7, #29]
 800fb18:	f107 0120 	add.w	r1, r7, #32
 800fb1c:	440a      	add	r2, r1
 800fb1e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800fb22:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fb2e:	bf00      	nop
 800fb30:	3724      	adds	r7, #36	; 0x24
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	0801165c 	.word	0x0801165c
 800fb40:	08011664 	.word	0x08011664

0800fb44 <__errno>:
 800fb44:	4b01      	ldr	r3, [pc, #4]	; (800fb4c <__errno+0x8>)
 800fb46:	6818      	ldr	r0, [r3, #0]
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	24000108 	.word	0x24000108

0800fb50 <__libc_init_array>:
 800fb50:	b570      	push	{r4, r5, r6, lr}
 800fb52:	4e0d      	ldr	r6, [pc, #52]	; (800fb88 <__libc_init_array+0x38>)
 800fb54:	4c0d      	ldr	r4, [pc, #52]	; (800fb8c <__libc_init_array+0x3c>)
 800fb56:	1ba4      	subs	r4, r4, r6
 800fb58:	10a4      	asrs	r4, r4, #2
 800fb5a:	2500      	movs	r5, #0
 800fb5c:	42a5      	cmp	r5, r4
 800fb5e:	d109      	bne.n	800fb74 <__libc_init_array+0x24>
 800fb60:	4e0b      	ldr	r6, [pc, #44]	; (800fb90 <__libc_init_array+0x40>)
 800fb62:	4c0c      	ldr	r4, [pc, #48]	; (800fb94 <__libc_init_array+0x44>)
 800fb64:	f001 fc46 	bl	80113f4 <_init>
 800fb68:	1ba4      	subs	r4, r4, r6
 800fb6a:	10a4      	asrs	r4, r4, #2
 800fb6c:	2500      	movs	r5, #0
 800fb6e:	42a5      	cmp	r5, r4
 800fb70:	d105      	bne.n	800fb7e <__libc_init_array+0x2e>
 800fb72:	bd70      	pop	{r4, r5, r6, pc}
 800fb74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fb78:	4798      	blx	r3
 800fb7a:	3501      	adds	r5, #1
 800fb7c:	e7ee      	b.n	800fb5c <__libc_init_array+0xc>
 800fb7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fb82:	4798      	blx	r3
 800fb84:	3501      	adds	r5, #1
 800fb86:	e7f2      	b.n	800fb6e <__libc_init_array+0x1e>
 800fb88:	080118e0 	.word	0x080118e0
 800fb8c:	080118e0 	.word	0x080118e0
 800fb90:	080118e0 	.word	0x080118e0
 800fb94:	080118e4 	.word	0x080118e4

0800fb98 <memset>:
 800fb98:	4402      	add	r2, r0
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d100      	bne.n	800fba2 <memset+0xa>
 800fba0:	4770      	bx	lr
 800fba2:	f803 1b01 	strb.w	r1, [r3], #1
 800fba6:	e7f9      	b.n	800fb9c <memset+0x4>

0800fba8 <siprintf>:
 800fba8:	b40e      	push	{r1, r2, r3}
 800fbaa:	b500      	push	{lr}
 800fbac:	b09c      	sub	sp, #112	; 0x70
 800fbae:	ab1d      	add	r3, sp, #116	; 0x74
 800fbb0:	9002      	str	r0, [sp, #8]
 800fbb2:	9006      	str	r0, [sp, #24]
 800fbb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fbb8:	4809      	ldr	r0, [pc, #36]	; (800fbe0 <siprintf+0x38>)
 800fbba:	9107      	str	r1, [sp, #28]
 800fbbc:	9104      	str	r1, [sp, #16]
 800fbbe:	4909      	ldr	r1, [pc, #36]	; (800fbe4 <siprintf+0x3c>)
 800fbc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbc4:	9105      	str	r1, [sp, #20]
 800fbc6:	6800      	ldr	r0, [r0, #0]
 800fbc8:	9301      	str	r3, [sp, #4]
 800fbca:	a902      	add	r1, sp, #8
 800fbcc:	f000 f866 	bl	800fc9c <_svfiprintf_r>
 800fbd0:	9b02      	ldr	r3, [sp, #8]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	701a      	strb	r2, [r3, #0]
 800fbd6:	b01c      	add	sp, #112	; 0x70
 800fbd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbdc:	b003      	add	sp, #12
 800fbde:	4770      	bx	lr
 800fbe0:	24000108 	.word	0x24000108
 800fbe4:	ffff0208 	.word	0xffff0208

0800fbe8 <__ssputs_r>:
 800fbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbec:	688e      	ldr	r6, [r1, #8]
 800fbee:	429e      	cmp	r6, r3
 800fbf0:	4682      	mov	sl, r0
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	4690      	mov	r8, r2
 800fbf6:	4699      	mov	r9, r3
 800fbf8:	d837      	bhi.n	800fc6a <__ssputs_r+0x82>
 800fbfa:	898a      	ldrh	r2, [r1, #12]
 800fbfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc00:	d031      	beq.n	800fc66 <__ssputs_r+0x7e>
 800fc02:	6825      	ldr	r5, [r4, #0]
 800fc04:	6909      	ldr	r1, [r1, #16]
 800fc06:	1a6f      	subs	r7, r5, r1
 800fc08:	6965      	ldr	r5, [r4, #20]
 800fc0a:	2302      	movs	r3, #2
 800fc0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc10:	fb95 f5f3 	sdiv	r5, r5, r3
 800fc14:	f109 0301 	add.w	r3, r9, #1
 800fc18:	443b      	add	r3, r7
 800fc1a:	429d      	cmp	r5, r3
 800fc1c:	bf38      	it	cc
 800fc1e:	461d      	movcc	r5, r3
 800fc20:	0553      	lsls	r3, r2, #21
 800fc22:	d530      	bpl.n	800fc86 <__ssputs_r+0x9e>
 800fc24:	4629      	mov	r1, r5
 800fc26:	f000 fb2b 	bl	8010280 <_malloc_r>
 800fc2a:	4606      	mov	r6, r0
 800fc2c:	b950      	cbnz	r0, 800fc44 <__ssputs_r+0x5c>
 800fc2e:	230c      	movs	r3, #12
 800fc30:	f8ca 3000 	str.w	r3, [sl]
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc3a:	81a3      	strh	r3, [r4, #12]
 800fc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc44:	463a      	mov	r2, r7
 800fc46:	6921      	ldr	r1, [r4, #16]
 800fc48:	f000 faa8 	bl	801019c <memcpy>
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc56:	81a3      	strh	r3, [r4, #12]
 800fc58:	6126      	str	r6, [r4, #16]
 800fc5a:	6165      	str	r5, [r4, #20]
 800fc5c:	443e      	add	r6, r7
 800fc5e:	1bed      	subs	r5, r5, r7
 800fc60:	6026      	str	r6, [r4, #0]
 800fc62:	60a5      	str	r5, [r4, #8]
 800fc64:	464e      	mov	r6, r9
 800fc66:	454e      	cmp	r6, r9
 800fc68:	d900      	bls.n	800fc6c <__ssputs_r+0x84>
 800fc6a:	464e      	mov	r6, r9
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	4641      	mov	r1, r8
 800fc70:	6820      	ldr	r0, [r4, #0]
 800fc72:	f000 fa9e 	bl	80101b2 <memmove>
 800fc76:	68a3      	ldr	r3, [r4, #8]
 800fc78:	1b9b      	subs	r3, r3, r6
 800fc7a:	60a3      	str	r3, [r4, #8]
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	441e      	add	r6, r3
 800fc80:	6026      	str	r6, [r4, #0]
 800fc82:	2000      	movs	r0, #0
 800fc84:	e7dc      	b.n	800fc40 <__ssputs_r+0x58>
 800fc86:	462a      	mov	r2, r5
 800fc88:	f000 fb54 	bl	8010334 <_realloc_r>
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d1e2      	bne.n	800fc58 <__ssputs_r+0x70>
 800fc92:	6921      	ldr	r1, [r4, #16]
 800fc94:	4650      	mov	r0, sl
 800fc96:	f000 faa5 	bl	80101e4 <_free_r>
 800fc9a:	e7c8      	b.n	800fc2e <__ssputs_r+0x46>

0800fc9c <_svfiprintf_r>:
 800fc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca0:	461d      	mov	r5, r3
 800fca2:	898b      	ldrh	r3, [r1, #12]
 800fca4:	061f      	lsls	r7, r3, #24
 800fca6:	b09d      	sub	sp, #116	; 0x74
 800fca8:	4680      	mov	r8, r0
 800fcaa:	460c      	mov	r4, r1
 800fcac:	4616      	mov	r6, r2
 800fcae:	d50f      	bpl.n	800fcd0 <_svfiprintf_r+0x34>
 800fcb0:	690b      	ldr	r3, [r1, #16]
 800fcb2:	b96b      	cbnz	r3, 800fcd0 <_svfiprintf_r+0x34>
 800fcb4:	2140      	movs	r1, #64	; 0x40
 800fcb6:	f000 fae3 	bl	8010280 <_malloc_r>
 800fcba:	6020      	str	r0, [r4, #0]
 800fcbc:	6120      	str	r0, [r4, #16]
 800fcbe:	b928      	cbnz	r0, 800fccc <_svfiprintf_r+0x30>
 800fcc0:	230c      	movs	r3, #12
 800fcc2:	f8c8 3000 	str.w	r3, [r8]
 800fcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcca:	e0c8      	b.n	800fe5e <_svfiprintf_r+0x1c2>
 800fccc:	2340      	movs	r3, #64	; 0x40
 800fcce:	6163      	str	r3, [r4, #20]
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800fcd4:	2320      	movs	r3, #32
 800fcd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcda:	2330      	movs	r3, #48	; 0x30
 800fcdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fce0:	9503      	str	r5, [sp, #12]
 800fce2:	f04f 0b01 	mov.w	fp, #1
 800fce6:	4637      	mov	r7, r6
 800fce8:	463d      	mov	r5, r7
 800fcea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fcee:	b10b      	cbz	r3, 800fcf4 <_svfiprintf_r+0x58>
 800fcf0:	2b25      	cmp	r3, #37	; 0x25
 800fcf2:	d13e      	bne.n	800fd72 <_svfiprintf_r+0xd6>
 800fcf4:	ebb7 0a06 	subs.w	sl, r7, r6
 800fcf8:	d00b      	beq.n	800fd12 <_svfiprintf_r+0x76>
 800fcfa:	4653      	mov	r3, sl
 800fcfc:	4632      	mov	r2, r6
 800fcfe:	4621      	mov	r1, r4
 800fd00:	4640      	mov	r0, r8
 800fd02:	f7ff ff71 	bl	800fbe8 <__ssputs_r>
 800fd06:	3001      	adds	r0, #1
 800fd08:	f000 80a4 	beq.w	800fe54 <_svfiprintf_r+0x1b8>
 800fd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd0e:	4453      	add	r3, sl
 800fd10:	9309      	str	r3, [sp, #36]	; 0x24
 800fd12:	783b      	ldrb	r3, [r7, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f000 809d 	beq.w	800fe54 <_svfiprintf_r+0x1b8>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd24:	9304      	str	r3, [sp, #16]
 800fd26:	9307      	str	r3, [sp, #28]
 800fd28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd2c:	931a      	str	r3, [sp, #104]	; 0x68
 800fd2e:	462f      	mov	r7, r5
 800fd30:	2205      	movs	r2, #5
 800fd32:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fd36:	4850      	ldr	r0, [pc, #320]	; (800fe78 <_svfiprintf_r+0x1dc>)
 800fd38:	f7f0 fad2 	bl	80002e0 <memchr>
 800fd3c:	9b04      	ldr	r3, [sp, #16]
 800fd3e:	b9d0      	cbnz	r0, 800fd76 <_svfiprintf_r+0xda>
 800fd40:	06d9      	lsls	r1, r3, #27
 800fd42:	bf44      	itt	mi
 800fd44:	2220      	movmi	r2, #32
 800fd46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fd4a:	071a      	lsls	r2, r3, #28
 800fd4c:	bf44      	itt	mi
 800fd4e:	222b      	movmi	r2, #43	; 0x2b
 800fd50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fd54:	782a      	ldrb	r2, [r5, #0]
 800fd56:	2a2a      	cmp	r2, #42	; 0x2a
 800fd58:	d015      	beq.n	800fd86 <_svfiprintf_r+0xea>
 800fd5a:	9a07      	ldr	r2, [sp, #28]
 800fd5c:	462f      	mov	r7, r5
 800fd5e:	2000      	movs	r0, #0
 800fd60:	250a      	movs	r5, #10
 800fd62:	4639      	mov	r1, r7
 800fd64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd68:	3b30      	subs	r3, #48	; 0x30
 800fd6a:	2b09      	cmp	r3, #9
 800fd6c:	d94d      	bls.n	800fe0a <_svfiprintf_r+0x16e>
 800fd6e:	b1b8      	cbz	r0, 800fda0 <_svfiprintf_r+0x104>
 800fd70:	e00f      	b.n	800fd92 <_svfiprintf_r+0xf6>
 800fd72:	462f      	mov	r7, r5
 800fd74:	e7b8      	b.n	800fce8 <_svfiprintf_r+0x4c>
 800fd76:	4a40      	ldr	r2, [pc, #256]	; (800fe78 <_svfiprintf_r+0x1dc>)
 800fd78:	1a80      	subs	r0, r0, r2
 800fd7a:	fa0b f000 	lsl.w	r0, fp, r0
 800fd7e:	4318      	orrs	r0, r3
 800fd80:	9004      	str	r0, [sp, #16]
 800fd82:	463d      	mov	r5, r7
 800fd84:	e7d3      	b.n	800fd2e <_svfiprintf_r+0x92>
 800fd86:	9a03      	ldr	r2, [sp, #12]
 800fd88:	1d11      	adds	r1, r2, #4
 800fd8a:	6812      	ldr	r2, [r2, #0]
 800fd8c:	9103      	str	r1, [sp, #12]
 800fd8e:	2a00      	cmp	r2, #0
 800fd90:	db01      	blt.n	800fd96 <_svfiprintf_r+0xfa>
 800fd92:	9207      	str	r2, [sp, #28]
 800fd94:	e004      	b.n	800fda0 <_svfiprintf_r+0x104>
 800fd96:	4252      	negs	r2, r2
 800fd98:	f043 0302 	orr.w	r3, r3, #2
 800fd9c:	9207      	str	r2, [sp, #28]
 800fd9e:	9304      	str	r3, [sp, #16]
 800fda0:	783b      	ldrb	r3, [r7, #0]
 800fda2:	2b2e      	cmp	r3, #46	; 0x2e
 800fda4:	d10c      	bne.n	800fdc0 <_svfiprintf_r+0x124>
 800fda6:	787b      	ldrb	r3, [r7, #1]
 800fda8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdaa:	d133      	bne.n	800fe14 <_svfiprintf_r+0x178>
 800fdac:	9b03      	ldr	r3, [sp, #12]
 800fdae:	1d1a      	adds	r2, r3, #4
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	9203      	str	r2, [sp, #12]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	bfb8      	it	lt
 800fdb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdbc:	3702      	adds	r7, #2
 800fdbe:	9305      	str	r3, [sp, #20]
 800fdc0:	4d2e      	ldr	r5, [pc, #184]	; (800fe7c <_svfiprintf_r+0x1e0>)
 800fdc2:	7839      	ldrb	r1, [r7, #0]
 800fdc4:	2203      	movs	r2, #3
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7f0 fa8a 	bl	80002e0 <memchr>
 800fdcc:	b138      	cbz	r0, 800fdde <_svfiprintf_r+0x142>
 800fdce:	2340      	movs	r3, #64	; 0x40
 800fdd0:	1b40      	subs	r0, r0, r5
 800fdd2:	fa03 f000 	lsl.w	r0, r3, r0
 800fdd6:	9b04      	ldr	r3, [sp, #16]
 800fdd8:	4303      	orrs	r3, r0
 800fdda:	3701      	adds	r7, #1
 800fddc:	9304      	str	r3, [sp, #16]
 800fdde:	7839      	ldrb	r1, [r7, #0]
 800fde0:	4827      	ldr	r0, [pc, #156]	; (800fe80 <_svfiprintf_r+0x1e4>)
 800fde2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fde6:	2206      	movs	r2, #6
 800fde8:	1c7e      	adds	r6, r7, #1
 800fdea:	f7f0 fa79 	bl	80002e0 <memchr>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d038      	beq.n	800fe64 <_svfiprintf_r+0x1c8>
 800fdf2:	4b24      	ldr	r3, [pc, #144]	; (800fe84 <_svfiprintf_r+0x1e8>)
 800fdf4:	bb13      	cbnz	r3, 800fe3c <_svfiprintf_r+0x1a0>
 800fdf6:	9b03      	ldr	r3, [sp, #12]
 800fdf8:	3307      	adds	r3, #7
 800fdfa:	f023 0307 	bic.w	r3, r3, #7
 800fdfe:	3308      	adds	r3, #8
 800fe00:	9303      	str	r3, [sp, #12]
 800fe02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe04:	444b      	add	r3, r9
 800fe06:	9309      	str	r3, [sp, #36]	; 0x24
 800fe08:	e76d      	b.n	800fce6 <_svfiprintf_r+0x4a>
 800fe0a:	fb05 3202 	mla	r2, r5, r2, r3
 800fe0e:	2001      	movs	r0, #1
 800fe10:	460f      	mov	r7, r1
 800fe12:	e7a6      	b.n	800fd62 <_svfiprintf_r+0xc6>
 800fe14:	2300      	movs	r3, #0
 800fe16:	3701      	adds	r7, #1
 800fe18:	9305      	str	r3, [sp, #20]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	250a      	movs	r5, #10
 800fe1e:	4638      	mov	r0, r7
 800fe20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe24:	3a30      	subs	r2, #48	; 0x30
 800fe26:	2a09      	cmp	r2, #9
 800fe28:	d903      	bls.n	800fe32 <_svfiprintf_r+0x196>
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0c8      	beq.n	800fdc0 <_svfiprintf_r+0x124>
 800fe2e:	9105      	str	r1, [sp, #20]
 800fe30:	e7c6      	b.n	800fdc0 <_svfiprintf_r+0x124>
 800fe32:	fb05 2101 	mla	r1, r5, r1, r2
 800fe36:	2301      	movs	r3, #1
 800fe38:	4607      	mov	r7, r0
 800fe3a:	e7f0      	b.n	800fe1e <_svfiprintf_r+0x182>
 800fe3c:	ab03      	add	r3, sp, #12
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	4622      	mov	r2, r4
 800fe42:	4b11      	ldr	r3, [pc, #68]	; (800fe88 <_svfiprintf_r+0x1ec>)
 800fe44:	a904      	add	r1, sp, #16
 800fe46:	4640      	mov	r0, r8
 800fe48:	f3af 8000 	nop.w
 800fe4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fe50:	4681      	mov	r9, r0
 800fe52:	d1d6      	bne.n	800fe02 <_svfiprintf_r+0x166>
 800fe54:	89a3      	ldrh	r3, [r4, #12]
 800fe56:	065b      	lsls	r3, r3, #25
 800fe58:	f53f af35 	bmi.w	800fcc6 <_svfiprintf_r+0x2a>
 800fe5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe5e:	b01d      	add	sp, #116	; 0x74
 800fe60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe64:	ab03      	add	r3, sp, #12
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	4622      	mov	r2, r4
 800fe6a:	4b07      	ldr	r3, [pc, #28]	; (800fe88 <_svfiprintf_r+0x1ec>)
 800fe6c:	a904      	add	r1, sp, #16
 800fe6e:	4640      	mov	r0, r8
 800fe70:	f000 f882 	bl	800ff78 <_printf_i>
 800fe74:	e7ea      	b.n	800fe4c <_svfiprintf_r+0x1b0>
 800fe76:	bf00      	nop
 800fe78:	08011684 	.word	0x08011684
 800fe7c:	0801168a 	.word	0x0801168a
 800fe80:	0801168e 	.word	0x0801168e
 800fe84:	00000000 	.word	0x00000000
 800fe88:	0800fbe9 	.word	0x0800fbe9

0800fe8c <_printf_common>:
 800fe8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe90:	4691      	mov	r9, r2
 800fe92:	461f      	mov	r7, r3
 800fe94:	688a      	ldr	r2, [r1, #8]
 800fe96:	690b      	ldr	r3, [r1, #16]
 800fe98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	bfb8      	it	lt
 800fea0:	4613      	movlt	r3, r2
 800fea2:	f8c9 3000 	str.w	r3, [r9]
 800fea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800feaa:	4606      	mov	r6, r0
 800feac:	460c      	mov	r4, r1
 800feae:	b112      	cbz	r2, 800feb6 <_printf_common+0x2a>
 800feb0:	3301      	adds	r3, #1
 800feb2:	f8c9 3000 	str.w	r3, [r9]
 800feb6:	6823      	ldr	r3, [r4, #0]
 800feb8:	0699      	lsls	r1, r3, #26
 800feba:	bf42      	ittt	mi
 800febc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fec0:	3302      	addmi	r3, #2
 800fec2:	f8c9 3000 	strmi.w	r3, [r9]
 800fec6:	6825      	ldr	r5, [r4, #0]
 800fec8:	f015 0506 	ands.w	r5, r5, #6
 800fecc:	d107      	bne.n	800fede <_printf_common+0x52>
 800fece:	f104 0a19 	add.w	sl, r4, #25
 800fed2:	68e3      	ldr	r3, [r4, #12]
 800fed4:	f8d9 2000 	ldr.w	r2, [r9]
 800fed8:	1a9b      	subs	r3, r3, r2
 800feda:	42ab      	cmp	r3, r5
 800fedc:	dc28      	bgt.n	800ff30 <_printf_common+0xa4>
 800fede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fee2:	6822      	ldr	r2, [r4, #0]
 800fee4:	3300      	adds	r3, #0
 800fee6:	bf18      	it	ne
 800fee8:	2301      	movne	r3, #1
 800feea:	0692      	lsls	r2, r2, #26
 800feec:	d42d      	bmi.n	800ff4a <_printf_common+0xbe>
 800feee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fef2:	4639      	mov	r1, r7
 800fef4:	4630      	mov	r0, r6
 800fef6:	47c0      	blx	r8
 800fef8:	3001      	adds	r0, #1
 800fefa:	d020      	beq.n	800ff3e <_printf_common+0xb2>
 800fefc:	6823      	ldr	r3, [r4, #0]
 800fefe:	68e5      	ldr	r5, [r4, #12]
 800ff00:	f8d9 2000 	ldr.w	r2, [r9]
 800ff04:	f003 0306 	and.w	r3, r3, #6
 800ff08:	2b04      	cmp	r3, #4
 800ff0a:	bf08      	it	eq
 800ff0c:	1aad      	subeq	r5, r5, r2
 800ff0e:	68a3      	ldr	r3, [r4, #8]
 800ff10:	6922      	ldr	r2, [r4, #16]
 800ff12:	bf0c      	ite	eq
 800ff14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff18:	2500      	movne	r5, #0
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	bfc4      	itt	gt
 800ff1e:	1a9b      	subgt	r3, r3, r2
 800ff20:	18ed      	addgt	r5, r5, r3
 800ff22:	f04f 0900 	mov.w	r9, #0
 800ff26:	341a      	adds	r4, #26
 800ff28:	454d      	cmp	r5, r9
 800ff2a:	d11a      	bne.n	800ff62 <_printf_common+0xd6>
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	e008      	b.n	800ff42 <_printf_common+0xb6>
 800ff30:	2301      	movs	r3, #1
 800ff32:	4652      	mov	r2, sl
 800ff34:	4639      	mov	r1, r7
 800ff36:	4630      	mov	r0, r6
 800ff38:	47c0      	blx	r8
 800ff3a:	3001      	adds	r0, #1
 800ff3c:	d103      	bne.n	800ff46 <_printf_common+0xba>
 800ff3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff46:	3501      	adds	r5, #1
 800ff48:	e7c3      	b.n	800fed2 <_printf_common+0x46>
 800ff4a:	18e1      	adds	r1, r4, r3
 800ff4c:	1c5a      	adds	r2, r3, #1
 800ff4e:	2030      	movs	r0, #48	; 0x30
 800ff50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff54:	4422      	add	r2, r4
 800ff56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff5e:	3302      	adds	r3, #2
 800ff60:	e7c5      	b.n	800feee <_printf_common+0x62>
 800ff62:	2301      	movs	r3, #1
 800ff64:	4622      	mov	r2, r4
 800ff66:	4639      	mov	r1, r7
 800ff68:	4630      	mov	r0, r6
 800ff6a:	47c0      	blx	r8
 800ff6c:	3001      	adds	r0, #1
 800ff6e:	d0e6      	beq.n	800ff3e <_printf_common+0xb2>
 800ff70:	f109 0901 	add.w	r9, r9, #1
 800ff74:	e7d8      	b.n	800ff28 <_printf_common+0x9c>
	...

0800ff78 <_printf_i>:
 800ff78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ff80:	460c      	mov	r4, r1
 800ff82:	7e09      	ldrb	r1, [r1, #24]
 800ff84:	b085      	sub	sp, #20
 800ff86:	296e      	cmp	r1, #110	; 0x6e
 800ff88:	4617      	mov	r7, r2
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	4698      	mov	r8, r3
 800ff8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff90:	f000 80b3 	beq.w	80100fa <_printf_i+0x182>
 800ff94:	d822      	bhi.n	800ffdc <_printf_i+0x64>
 800ff96:	2963      	cmp	r1, #99	; 0x63
 800ff98:	d036      	beq.n	8010008 <_printf_i+0x90>
 800ff9a:	d80a      	bhi.n	800ffb2 <_printf_i+0x3a>
 800ff9c:	2900      	cmp	r1, #0
 800ff9e:	f000 80b9 	beq.w	8010114 <_printf_i+0x19c>
 800ffa2:	2958      	cmp	r1, #88	; 0x58
 800ffa4:	f000 8083 	beq.w	80100ae <_printf_i+0x136>
 800ffa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ffb0:	e032      	b.n	8010018 <_printf_i+0xa0>
 800ffb2:	2964      	cmp	r1, #100	; 0x64
 800ffb4:	d001      	beq.n	800ffba <_printf_i+0x42>
 800ffb6:	2969      	cmp	r1, #105	; 0x69
 800ffb8:	d1f6      	bne.n	800ffa8 <_printf_i+0x30>
 800ffba:	6820      	ldr	r0, [r4, #0]
 800ffbc:	6813      	ldr	r3, [r2, #0]
 800ffbe:	0605      	lsls	r5, r0, #24
 800ffc0:	f103 0104 	add.w	r1, r3, #4
 800ffc4:	d52a      	bpl.n	801001c <_printf_i+0xa4>
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	6011      	str	r1, [r2, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	da03      	bge.n	800ffd6 <_printf_i+0x5e>
 800ffce:	222d      	movs	r2, #45	; 0x2d
 800ffd0:	425b      	negs	r3, r3
 800ffd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ffd6:	486f      	ldr	r0, [pc, #444]	; (8010194 <_printf_i+0x21c>)
 800ffd8:	220a      	movs	r2, #10
 800ffda:	e039      	b.n	8010050 <_printf_i+0xd8>
 800ffdc:	2973      	cmp	r1, #115	; 0x73
 800ffde:	f000 809d 	beq.w	801011c <_printf_i+0x1a4>
 800ffe2:	d808      	bhi.n	800fff6 <_printf_i+0x7e>
 800ffe4:	296f      	cmp	r1, #111	; 0x6f
 800ffe6:	d020      	beq.n	801002a <_printf_i+0xb2>
 800ffe8:	2970      	cmp	r1, #112	; 0x70
 800ffea:	d1dd      	bne.n	800ffa8 <_printf_i+0x30>
 800ffec:	6823      	ldr	r3, [r4, #0]
 800ffee:	f043 0320 	orr.w	r3, r3, #32
 800fff2:	6023      	str	r3, [r4, #0]
 800fff4:	e003      	b.n	800fffe <_printf_i+0x86>
 800fff6:	2975      	cmp	r1, #117	; 0x75
 800fff8:	d017      	beq.n	801002a <_printf_i+0xb2>
 800fffa:	2978      	cmp	r1, #120	; 0x78
 800fffc:	d1d4      	bne.n	800ffa8 <_printf_i+0x30>
 800fffe:	2378      	movs	r3, #120	; 0x78
 8010000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010004:	4864      	ldr	r0, [pc, #400]	; (8010198 <_printf_i+0x220>)
 8010006:	e055      	b.n	80100b4 <_printf_i+0x13c>
 8010008:	6813      	ldr	r3, [r2, #0]
 801000a:	1d19      	adds	r1, r3, #4
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	6011      	str	r1, [r2, #0]
 8010010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010018:	2301      	movs	r3, #1
 801001a:	e08c      	b.n	8010136 <_printf_i+0x1be>
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	6011      	str	r1, [r2, #0]
 8010020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010024:	bf18      	it	ne
 8010026:	b21b      	sxthne	r3, r3
 8010028:	e7cf      	b.n	800ffca <_printf_i+0x52>
 801002a:	6813      	ldr	r3, [r2, #0]
 801002c:	6825      	ldr	r5, [r4, #0]
 801002e:	1d18      	adds	r0, r3, #4
 8010030:	6010      	str	r0, [r2, #0]
 8010032:	0628      	lsls	r0, r5, #24
 8010034:	d501      	bpl.n	801003a <_printf_i+0xc2>
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	e002      	b.n	8010040 <_printf_i+0xc8>
 801003a:	0668      	lsls	r0, r5, #25
 801003c:	d5fb      	bpl.n	8010036 <_printf_i+0xbe>
 801003e:	881b      	ldrh	r3, [r3, #0]
 8010040:	4854      	ldr	r0, [pc, #336]	; (8010194 <_printf_i+0x21c>)
 8010042:	296f      	cmp	r1, #111	; 0x6f
 8010044:	bf14      	ite	ne
 8010046:	220a      	movne	r2, #10
 8010048:	2208      	moveq	r2, #8
 801004a:	2100      	movs	r1, #0
 801004c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010050:	6865      	ldr	r5, [r4, #4]
 8010052:	60a5      	str	r5, [r4, #8]
 8010054:	2d00      	cmp	r5, #0
 8010056:	f2c0 8095 	blt.w	8010184 <_printf_i+0x20c>
 801005a:	6821      	ldr	r1, [r4, #0]
 801005c:	f021 0104 	bic.w	r1, r1, #4
 8010060:	6021      	str	r1, [r4, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d13d      	bne.n	80100e2 <_printf_i+0x16a>
 8010066:	2d00      	cmp	r5, #0
 8010068:	f040 808e 	bne.w	8010188 <_printf_i+0x210>
 801006c:	4665      	mov	r5, ip
 801006e:	2a08      	cmp	r2, #8
 8010070:	d10b      	bne.n	801008a <_printf_i+0x112>
 8010072:	6823      	ldr	r3, [r4, #0]
 8010074:	07db      	lsls	r3, r3, #31
 8010076:	d508      	bpl.n	801008a <_printf_i+0x112>
 8010078:	6923      	ldr	r3, [r4, #16]
 801007a:	6862      	ldr	r2, [r4, #4]
 801007c:	429a      	cmp	r2, r3
 801007e:	bfde      	ittt	le
 8010080:	2330      	movle	r3, #48	; 0x30
 8010082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010086:	f105 35ff 	addle.w	r5, r5, #4294967295
 801008a:	ebac 0305 	sub.w	r3, ip, r5
 801008e:	6123      	str	r3, [r4, #16]
 8010090:	f8cd 8000 	str.w	r8, [sp]
 8010094:	463b      	mov	r3, r7
 8010096:	aa03      	add	r2, sp, #12
 8010098:	4621      	mov	r1, r4
 801009a:	4630      	mov	r0, r6
 801009c:	f7ff fef6 	bl	800fe8c <_printf_common>
 80100a0:	3001      	adds	r0, #1
 80100a2:	d14d      	bne.n	8010140 <_printf_i+0x1c8>
 80100a4:	f04f 30ff 	mov.w	r0, #4294967295
 80100a8:	b005      	add	sp, #20
 80100aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100ae:	4839      	ldr	r0, [pc, #228]	; (8010194 <_printf_i+0x21c>)
 80100b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80100b4:	6813      	ldr	r3, [r2, #0]
 80100b6:	6821      	ldr	r1, [r4, #0]
 80100b8:	1d1d      	adds	r5, r3, #4
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	6015      	str	r5, [r2, #0]
 80100be:	060a      	lsls	r2, r1, #24
 80100c0:	d50b      	bpl.n	80100da <_printf_i+0x162>
 80100c2:	07ca      	lsls	r2, r1, #31
 80100c4:	bf44      	itt	mi
 80100c6:	f041 0120 	orrmi.w	r1, r1, #32
 80100ca:	6021      	strmi	r1, [r4, #0]
 80100cc:	b91b      	cbnz	r3, 80100d6 <_printf_i+0x15e>
 80100ce:	6822      	ldr	r2, [r4, #0]
 80100d0:	f022 0220 	bic.w	r2, r2, #32
 80100d4:	6022      	str	r2, [r4, #0]
 80100d6:	2210      	movs	r2, #16
 80100d8:	e7b7      	b.n	801004a <_printf_i+0xd2>
 80100da:	064d      	lsls	r5, r1, #25
 80100dc:	bf48      	it	mi
 80100de:	b29b      	uxthmi	r3, r3
 80100e0:	e7ef      	b.n	80100c2 <_printf_i+0x14a>
 80100e2:	4665      	mov	r5, ip
 80100e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80100e8:	fb02 3311 	mls	r3, r2, r1, r3
 80100ec:	5cc3      	ldrb	r3, [r0, r3]
 80100ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80100f2:	460b      	mov	r3, r1
 80100f4:	2900      	cmp	r1, #0
 80100f6:	d1f5      	bne.n	80100e4 <_printf_i+0x16c>
 80100f8:	e7b9      	b.n	801006e <_printf_i+0xf6>
 80100fa:	6813      	ldr	r3, [r2, #0]
 80100fc:	6825      	ldr	r5, [r4, #0]
 80100fe:	6961      	ldr	r1, [r4, #20]
 8010100:	1d18      	adds	r0, r3, #4
 8010102:	6010      	str	r0, [r2, #0]
 8010104:	0628      	lsls	r0, r5, #24
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	d501      	bpl.n	801010e <_printf_i+0x196>
 801010a:	6019      	str	r1, [r3, #0]
 801010c:	e002      	b.n	8010114 <_printf_i+0x19c>
 801010e:	066a      	lsls	r2, r5, #25
 8010110:	d5fb      	bpl.n	801010a <_printf_i+0x192>
 8010112:	8019      	strh	r1, [r3, #0]
 8010114:	2300      	movs	r3, #0
 8010116:	6123      	str	r3, [r4, #16]
 8010118:	4665      	mov	r5, ip
 801011a:	e7b9      	b.n	8010090 <_printf_i+0x118>
 801011c:	6813      	ldr	r3, [r2, #0]
 801011e:	1d19      	adds	r1, r3, #4
 8010120:	6011      	str	r1, [r2, #0]
 8010122:	681d      	ldr	r5, [r3, #0]
 8010124:	6862      	ldr	r2, [r4, #4]
 8010126:	2100      	movs	r1, #0
 8010128:	4628      	mov	r0, r5
 801012a:	f7f0 f8d9 	bl	80002e0 <memchr>
 801012e:	b108      	cbz	r0, 8010134 <_printf_i+0x1bc>
 8010130:	1b40      	subs	r0, r0, r5
 8010132:	6060      	str	r0, [r4, #4]
 8010134:	6863      	ldr	r3, [r4, #4]
 8010136:	6123      	str	r3, [r4, #16]
 8010138:	2300      	movs	r3, #0
 801013a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801013e:	e7a7      	b.n	8010090 <_printf_i+0x118>
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	462a      	mov	r2, r5
 8010144:	4639      	mov	r1, r7
 8010146:	4630      	mov	r0, r6
 8010148:	47c0      	blx	r8
 801014a:	3001      	adds	r0, #1
 801014c:	d0aa      	beq.n	80100a4 <_printf_i+0x12c>
 801014e:	6823      	ldr	r3, [r4, #0]
 8010150:	079b      	lsls	r3, r3, #30
 8010152:	d413      	bmi.n	801017c <_printf_i+0x204>
 8010154:	68e0      	ldr	r0, [r4, #12]
 8010156:	9b03      	ldr	r3, [sp, #12]
 8010158:	4298      	cmp	r0, r3
 801015a:	bfb8      	it	lt
 801015c:	4618      	movlt	r0, r3
 801015e:	e7a3      	b.n	80100a8 <_printf_i+0x130>
 8010160:	2301      	movs	r3, #1
 8010162:	464a      	mov	r2, r9
 8010164:	4639      	mov	r1, r7
 8010166:	4630      	mov	r0, r6
 8010168:	47c0      	blx	r8
 801016a:	3001      	adds	r0, #1
 801016c:	d09a      	beq.n	80100a4 <_printf_i+0x12c>
 801016e:	3501      	adds	r5, #1
 8010170:	68e3      	ldr	r3, [r4, #12]
 8010172:	9a03      	ldr	r2, [sp, #12]
 8010174:	1a9b      	subs	r3, r3, r2
 8010176:	42ab      	cmp	r3, r5
 8010178:	dcf2      	bgt.n	8010160 <_printf_i+0x1e8>
 801017a:	e7eb      	b.n	8010154 <_printf_i+0x1dc>
 801017c:	2500      	movs	r5, #0
 801017e:	f104 0919 	add.w	r9, r4, #25
 8010182:	e7f5      	b.n	8010170 <_printf_i+0x1f8>
 8010184:	2b00      	cmp	r3, #0
 8010186:	d1ac      	bne.n	80100e2 <_printf_i+0x16a>
 8010188:	7803      	ldrb	r3, [r0, #0]
 801018a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801018e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010192:	e76c      	b.n	801006e <_printf_i+0xf6>
 8010194:	08011695 	.word	0x08011695
 8010198:	080116a6 	.word	0x080116a6

0801019c <memcpy>:
 801019c:	b510      	push	{r4, lr}
 801019e:	1e43      	subs	r3, r0, #1
 80101a0:	440a      	add	r2, r1
 80101a2:	4291      	cmp	r1, r2
 80101a4:	d100      	bne.n	80101a8 <memcpy+0xc>
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101b0:	e7f7      	b.n	80101a2 <memcpy+0x6>

080101b2 <memmove>:
 80101b2:	4288      	cmp	r0, r1
 80101b4:	b510      	push	{r4, lr}
 80101b6:	eb01 0302 	add.w	r3, r1, r2
 80101ba:	d807      	bhi.n	80101cc <memmove+0x1a>
 80101bc:	1e42      	subs	r2, r0, #1
 80101be:	4299      	cmp	r1, r3
 80101c0:	d00a      	beq.n	80101d8 <memmove+0x26>
 80101c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80101ca:	e7f8      	b.n	80101be <memmove+0xc>
 80101cc:	4283      	cmp	r3, r0
 80101ce:	d9f5      	bls.n	80101bc <memmove+0xa>
 80101d0:	1881      	adds	r1, r0, r2
 80101d2:	1ad2      	subs	r2, r2, r3
 80101d4:	42d3      	cmn	r3, r2
 80101d6:	d100      	bne.n	80101da <memmove+0x28>
 80101d8:	bd10      	pop	{r4, pc}
 80101da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80101e2:	e7f7      	b.n	80101d4 <memmove+0x22>

080101e4 <_free_r>:
 80101e4:	b538      	push	{r3, r4, r5, lr}
 80101e6:	4605      	mov	r5, r0
 80101e8:	2900      	cmp	r1, #0
 80101ea:	d045      	beq.n	8010278 <_free_r+0x94>
 80101ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101f0:	1f0c      	subs	r4, r1, #4
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	bfb8      	it	lt
 80101f6:	18e4      	addlt	r4, r4, r3
 80101f8:	f000 f8d2 	bl	80103a0 <__malloc_lock>
 80101fc:	4a1f      	ldr	r2, [pc, #124]	; (801027c <_free_r+0x98>)
 80101fe:	6813      	ldr	r3, [r2, #0]
 8010200:	4610      	mov	r0, r2
 8010202:	b933      	cbnz	r3, 8010212 <_free_r+0x2e>
 8010204:	6063      	str	r3, [r4, #4]
 8010206:	6014      	str	r4, [r2, #0]
 8010208:	4628      	mov	r0, r5
 801020a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801020e:	f000 b8c8 	b.w	80103a2 <__malloc_unlock>
 8010212:	42a3      	cmp	r3, r4
 8010214:	d90c      	bls.n	8010230 <_free_r+0x4c>
 8010216:	6821      	ldr	r1, [r4, #0]
 8010218:	1862      	adds	r2, r4, r1
 801021a:	4293      	cmp	r3, r2
 801021c:	bf04      	itt	eq
 801021e:	681a      	ldreq	r2, [r3, #0]
 8010220:	685b      	ldreq	r3, [r3, #4]
 8010222:	6063      	str	r3, [r4, #4]
 8010224:	bf04      	itt	eq
 8010226:	1852      	addeq	r2, r2, r1
 8010228:	6022      	streq	r2, [r4, #0]
 801022a:	6004      	str	r4, [r0, #0]
 801022c:	e7ec      	b.n	8010208 <_free_r+0x24>
 801022e:	4613      	mov	r3, r2
 8010230:	685a      	ldr	r2, [r3, #4]
 8010232:	b10a      	cbz	r2, 8010238 <_free_r+0x54>
 8010234:	42a2      	cmp	r2, r4
 8010236:	d9fa      	bls.n	801022e <_free_r+0x4a>
 8010238:	6819      	ldr	r1, [r3, #0]
 801023a:	1858      	adds	r0, r3, r1
 801023c:	42a0      	cmp	r0, r4
 801023e:	d10b      	bne.n	8010258 <_free_r+0x74>
 8010240:	6820      	ldr	r0, [r4, #0]
 8010242:	4401      	add	r1, r0
 8010244:	1858      	adds	r0, r3, r1
 8010246:	4282      	cmp	r2, r0
 8010248:	6019      	str	r1, [r3, #0]
 801024a:	d1dd      	bne.n	8010208 <_free_r+0x24>
 801024c:	6810      	ldr	r0, [r2, #0]
 801024e:	6852      	ldr	r2, [r2, #4]
 8010250:	605a      	str	r2, [r3, #4]
 8010252:	4401      	add	r1, r0
 8010254:	6019      	str	r1, [r3, #0]
 8010256:	e7d7      	b.n	8010208 <_free_r+0x24>
 8010258:	d902      	bls.n	8010260 <_free_r+0x7c>
 801025a:	230c      	movs	r3, #12
 801025c:	602b      	str	r3, [r5, #0]
 801025e:	e7d3      	b.n	8010208 <_free_r+0x24>
 8010260:	6820      	ldr	r0, [r4, #0]
 8010262:	1821      	adds	r1, r4, r0
 8010264:	428a      	cmp	r2, r1
 8010266:	bf04      	itt	eq
 8010268:	6811      	ldreq	r1, [r2, #0]
 801026a:	6852      	ldreq	r2, [r2, #4]
 801026c:	6062      	str	r2, [r4, #4]
 801026e:	bf04      	itt	eq
 8010270:	1809      	addeq	r1, r1, r0
 8010272:	6021      	streq	r1, [r4, #0]
 8010274:	605c      	str	r4, [r3, #4]
 8010276:	e7c7      	b.n	8010208 <_free_r+0x24>
 8010278:	bd38      	pop	{r3, r4, r5, pc}
 801027a:	bf00      	nop
 801027c:	240001cc 	.word	0x240001cc

08010280 <_malloc_r>:
 8010280:	b570      	push	{r4, r5, r6, lr}
 8010282:	1ccd      	adds	r5, r1, #3
 8010284:	f025 0503 	bic.w	r5, r5, #3
 8010288:	3508      	adds	r5, #8
 801028a:	2d0c      	cmp	r5, #12
 801028c:	bf38      	it	cc
 801028e:	250c      	movcc	r5, #12
 8010290:	2d00      	cmp	r5, #0
 8010292:	4606      	mov	r6, r0
 8010294:	db01      	blt.n	801029a <_malloc_r+0x1a>
 8010296:	42a9      	cmp	r1, r5
 8010298:	d903      	bls.n	80102a2 <_malloc_r+0x22>
 801029a:	230c      	movs	r3, #12
 801029c:	6033      	str	r3, [r6, #0]
 801029e:	2000      	movs	r0, #0
 80102a0:	bd70      	pop	{r4, r5, r6, pc}
 80102a2:	f000 f87d 	bl	80103a0 <__malloc_lock>
 80102a6:	4a21      	ldr	r2, [pc, #132]	; (801032c <_malloc_r+0xac>)
 80102a8:	6814      	ldr	r4, [r2, #0]
 80102aa:	4621      	mov	r1, r4
 80102ac:	b991      	cbnz	r1, 80102d4 <_malloc_r+0x54>
 80102ae:	4c20      	ldr	r4, [pc, #128]	; (8010330 <_malloc_r+0xb0>)
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	b91b      	cbnz	r3, 80102bc <_malloc_r+0x3c>
 80102b4:	4630      	mov	r0, r6
 80102b6:	f000 f863 	bl	8010380 <_sbrk_r>
 80102ba:	6020      	str	r0, [r4, #0]
 80102bc:	4629      	mov	r1, r5
 80102be:	4630      	mov	r0, r6
 80102c0:	f000 f85e 	bl	8010380 <_sbrk_r>
 80102c4:	1c43      	adds	r3, r0, #1
 80102c6:	d124      	bne.n	8010312 <_malloc_r+0x92>
 80102c8:	230c      	movs	r3, #12
 80102ca:	6033      	str	r3, [r6, #0]
 80102cc:	4630      	mov	r0, r6
 80102ce:	f000 f868 	bl	80103a2 <__malloc_unlock>
 80102d2:	e7e4      	b.n	801029e <_malloc_r+0x1e>
 80102d4:	680b      	ldr	r3, [r1, #0]
 80102d6:	1b5b      	subs	r3, r3, r5
 80102d8:	d418      	bmi.n	801030c <_malloc_r+0x8c>
 80102da:	2b0b      	cmp	r3, #11
 80102dc:	d90f      	bls.n	80102fe <_malloc_r+0x7e>
 80102de:	600b      	str	r3, [r1, #0]
 80102e0:	50cd      	str	r5, [r1, r3]
 80102e2:	18cc      	adds	r4, r1, r3
 80102e4:	4630      	mov	r0, r6
 80102e6:	f000 f85c 	bl	80103a2 <__malloc_unlock>
 80102ea:	f104 000b 	add.w	r0, r4, #11
 80102ee:	1d23      	adds	r3, r4, #4
 80102f0:	f020 0007 	bic.w	r0, r0, #7
 80102f4:	1ac3      	subs	r3, r0, r3
 80102f6:	d0d3      	beq.n	80102a0 <_malloc_r+0x20>
 80102f8:	425a      	negs	r2, r3
 80102fa:	50e2      	str	r2, [r4, r3]
 80102fc:	e7d0      	b.n	80102a0 <_malloc_r+0x20>
 80102fe:	428c      	cmp	r4, r1
 8010300:	684b      	ldr	r3, [r1, #4]
 8010302:	bf16      	itet	ne
 8010304:	6063      	strne	r3, [r4, #4]
 8010306:	6013      	streq	r3, [r2, #0]
 8010308:	460c      	movne	r4, r1
 801030a:	e7eb      	b.n	80102e4 <_malloc_r+0x64>
 801030c:	460c      	mov	r4, r1
 801030e:	6849      	ldr	r1, [r1, #4]
 8010310:	e7cc      	b.n	80102ac <_malloc_r+0x2c>
 8010312:	1cc4      	adds	r4, r0, #3
 8010314:	f024 0403 	bic.w	r4, r4, #3
 8010318:	42a0      	cmp	r0, r4
 801031a:	d005      	beq.n	8010328 <_malloc_r+0xa8>
 801031c:	1a21      	subs	r1, r4, r0
 801031e:	4630      	mov	r0, r6
 8010320:	f000 f82e 	bl	8010380 <_sbrk_r>
 8010324:	3001      	adds	r0, #1
 8010326:	d0cf      	beq.n	80102c8 <_malloc_r+0x48>
 8010328:	6025      	str	r5, [r4, #0]
 801032a:	e7db      	b.n	80102e4 <_malloc_r+0x64>
 801032c:	240001cc 	.word	0x240001cc
 8010330:	240001d0 	.word	0x240001d0

08010334 <_realloc_r>:
 8010334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010336:	4607      	mov	r7, r0
 8010338:	4614      	mov	r4, r2
 801033a:	460e      	mov	r6, r1
 801033c:	b921      	cbnz	r1, 8010348 <_realloc_r+0x14>
 801033e:	4611      	mov	r1, r2
 8010340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010344:	f7ff bf9c 	b.w	8010280 <_malloc_r>
 8010348:	b922      	cbnz	r2, 8010354 <_realloc_r+0x20>
 801034a:	f7ff ff4b 	bl	80101e4 <_free_r>
 801034e:	4625      	mov	r5, r4
 8010350:	4628      	mov	r0, r5
 8010352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010354:	f000 f826 	bl	80103a4 <_malloc_usable_size_r>
 8010358:	42a0      	cmp	r0, r4
 801035a:	d20f      	bcs.n	801037c <_realloc_r+0x48>
 801035c:	4621      	mov	r1, r4
 801035e:	4638      	mov	r0, r7
 8010360:	f7ff ff8e 	bl	8010280 <_malloc_r>
 8010364:	4605      	mov	r5, r0
 8010366:	2800      	cmp	r0, #0
 8010368:	d0f2      	beq.n	8010350 <_realloc_r+0x1c>
 801036a:	4631      	mov	r1, r6
 801036c:	4622      	mov	r2, r4
 801036e:	f7ff ff15 	bl	801019c <memcpy>
 8010372:	4631      	mov	r1, r6
 8010374:	4638      	mov	r0, r7
 8010376:	f7ff ff35 	bl	80101e4 <_free_r>
 801037a:	e7e9      	b.n	8010350 <_realloc_r+0x1c>
 801037c:	4635      	mov	r5, r6
 801037e:	e7e7      	b.n	8010350 <_realloc_r+0x1c>

08010380 <_sbrk_r>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4c06      	ldr	r4, [pc, #24]	; (801039c <_sbrk_r+0x1c>)
 8010384:	2300      	movs	r3, #0
 8010386:	4605      	mov	r5, r0
 8010388:	4608      	mov	r0, r1
 801038a:	6023      	str	r3, [r4, #0]
 801038c:	f7f4 fa46 	bl	800481c <_sbrk>
 8010390:	1c43      	adds	r3, r0, #1
 8010392:	d102      	bne.n	801039a <_sbrk_r+0x1a>
 8010394:	6823      	ldr	r3, [r4, #0]
 8010396:	b103      	cbz	r3, 801039a <_sbrk_r+0x1a>
 8010398:	602b      	str	r3, [r5, #0]
 801039a:	bd38      	pop	{r3, r4, r5, pc}
 801039c:	24000dd8 	.word	0x24000dd8

080103a0 <__malloc_lock>:
 80103a0:	4770      	bx	lr

080103a2 <__malloc_unlock>:
 80103a2:	4770      	bx	lr

080103a4 <_malloc_usable_size_r>:
 80103a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103a8:	1f18      	subs	r0, r3, #4
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	bfbc      	itt	lt
 80103ae:	580b      	ldrlt	r3, [r1, r0]
 80103b0:	18c0      	addlt	r0, r0, r3
 80103b2:	4770      	bx	lr
 80103b4:	0000      	movs	r0, r0
	...

080103b8 <cos>:
 80103b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103ba:	eeb0 7b40 	vmov.f64	d7, d0
 80103be:	ee17 3a90 	vmov	r3, s15
 80103c2:	4a19      	ldr	r2, [pc, #100]	; (8010428 <cos+0x70>)
 80103c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80103c8:	4293      	cmp	r3, r2
 80103ca:	dc04      	bgt.n	80103d6 <cos+0x1e>
 80103cc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8010420 <cos+0x68>
 80103d0:	f000 faa2 	bl	8010918 <__kernel_cos>
 80103d4:	e004      	b.n	80103e0 <cos+0x28>
 80103d6:	4a15      	ldr	r2, [pc, #84]	; (801042c <cos+0x74>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	dd04      	ble.n	80103e6 <cos+0x2e>
 80103dc:	ee30 0b40 	vsub.f64	d0, d0, d0
 80103e0:	b005      	add	sp, #20
 80103e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80103e6:	4668      	mov	r0, sp
 80103e8:	f000 f956 	bl	8010698 <__ieee754_rem_pio2>
 80103ec:	f000 0003 	and.w	r0, r0, #3
 80103f0:	2801      	cmp	r0, #1
 80103f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103f6:	ed9d 0b00 	vldr	d0, [sp]
 80103fa:	d007      	beq.n	801040c <cos+0x54>
 80103fc:	2802      	cmp	r0, #2
 80103fe:	d00a      	beq.n	8010416 <cos+0x5e>
 8010400:	2800      	cmp	r0, #0
 8010402:	d0e5      	beq.n	80103d0 <cos+0x18>
 8010404:	2001      	movs	r0, #1
 8010406:	f000 fd8f 	bl	8010f28 <__kernel_sin>
 801040a:	e7e9      	b.n	80103e0 <cos+0x28>
 801040c:	f000 fd8c 	bl	8010f28 <__kernel_sin>
 8010410:	eeb1 0b40 	vneg.f64	d0, d0
 8010414:	e7e4      	b.n	80103e0 <cos+0x28>
 8010416:	f000 fa7f 	bl	8010918 <__kernel_cos>
 801041a:	e7f9      	b.n	8010410 <cos+0x58>
 801041c:	f3af 8000 	nop.w
	...
 8010428:	3fe921fb 	.word	0x3fe921fb
 801042c:	7fefffff 	.word	0x7fefffff

08010430 <atan2>:
 8010430:	f000 b84e 	b.w	80104d0 <__ieee754_atan2>
 8010434:	0000      	movs	r0, r0
	...

08010438 <sqrt>:
 8010438:	b500      	push	{lr}
 801043a:	ed2d 8b02 	vpush	{d8}
 801043e:	eeb0 8b40 	vmov.f64	d8, d0
 8010442:	b08b      	sub	sp, #44	; 0x2c
 8010444:	f000 fa64 	bl	8010910 <__ieee754_sqrt>
 8010448:	4b1f      	ldr	r3, [pc, #124]	; (80104c8 <sqrt+0x90>)
 801044a:	f993 3000 	ldrsb.w	r3, [r3]
 801044e:	1c5a      	adds	r2, r3, #1
 8010450:	d024      	beq.n	801049c <sqrt+0x64>
 8010452:	eeb4 8b48 	vcmp.f64	d8, d8
 8010456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045a:	d61f      	bvs.n	801049c <sqrt+0x64>
 801045c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 80104c0 <sqrt+0x88>
 8010460:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010468:	d518      	bpl.n	801049c <sqrt+0x64>
 801046a:	2201      	movs	r2, #1
 801046c:	9200      	str	r2, [sp, #0]
 801046e:	4a17      	ldr	r2, [pc, #92]	; (80104cc <sqrt+0x94>)
 8010470:	9201      	str	r2, [sp, #4]
 8010472:	2200      	movs	r2, #0
 8010474:	9208      	str	r2, [sp, #32]
 8010476:	ed8d 8b04 	vstr	d8, [sp, #16]
 801047a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801047e:	b993      	cbnz	r3, 80104a6 <sqrt+0x6e>
 8010480:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010484:	4668      	mov	r0, sp
 8010486:	f000 ff23 	bl	80112d0 <matherr>
 801048a:	b190      	cbz	r0, 80104b2 <sqrt+0x7a>
 801048c:	9b08      	ldr	r3, [sp, #32]
 801048e:	b11b      	cbz	r3, 8010498 <sqrt+0x60>
 8010490:	f7ff fb58 	bl	800fb44 <__errno>
 8010494:	9b08      	ldr	r3, [sp, #32]
 8010496:	6003      	str	r3, [r0, #0]
 8010498:	ed9d 0b06 	vldr	d0, [sp, #24]
 801049c:	b00b      	add	sp, #44	; 0x2c
 801049e:	ecbd 8b02 	vpop	{d8}
 80104a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80104a6:	2b02      	cmp	r3, #2
 80104a8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80104ac:	ed8d 6b06 	vstr	d6, [sp, #24]
 80104b0:	d1e8      	bne.n	8010484 <sqrt+0x4c>
 80104b2:	f7ff fb47 	bl	800fb44 <__errno>
 80104b6:	2321      	movs	r3, #33	; 0x21
 80104b8:	6003      	str	r3, [r0, #0]
 80104ba:	e7e7      	b.n	801048c <sqrt+0x54>
 80104bc:	f3af 8000 	nop.w
	...
 80104c8:	2400016c 	.word	0x2400016c
 80104cc:	080116b7 	.word	0x080116b7

080104d0 <__ieee754_atan2>:
 80104d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104d2:	ee11 6a10 	vmov	r6, s2
 80104d6:	ee11 0a90 	vmov	r0, s3
 80104da:	4273      	negs	r3, r6
 80104dc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80104e0:	4333      	orrs	r3, r6
 80104e2:	4f6b      	ldr	r7, [pc, #428]	; (8010690 <__ieee754_atan2+0x1c0>)
 80104e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80104e8:	42bb      	cmp	r3, r7
 80104ea:	ed8d 0b00 	vstr	d0, [sp]
 80104ee:	d80b      	bhi.n	8010508 <__ieee754_atan2+0x38>
 80104f0:	e9dd c500 	ldrd	ip, r5, [sp]
 80104f4:	f1cc 0100 	rsb	r1, ip, #0
 80104f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104fc:	ea41 010c 	orr.w	r1, r1, ip
 8010500:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8010504:	42b9      	cmp	r1, r7
 8010506:	d906      	bls.n	8010516 <__ieee754_atan2+0x46>
 8010508:	ed9d 7b00 	vldr	d7, [sp]
 801050c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8010510:	ed8d 7b00 	vstr	d7, [sp]
 8010514:	e063      	b.n	80105de <__ieee754_atan2+0x10e>
 8010516:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801051a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 801051e:	4331      	orrs	r1, r6
 8010520:	d104      	bne.n	801052c <__ieee754_atan2+0x5c>
 8010522:	b003      	add	sp, #12
 8010524:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010528:	f000 bd56 	b.w	8010fd8 <atan>
 801052c:	1784      	asrs	r4, r0, #30
 801052e:	f004 0402 	and.w	r4, r4, #2
 8010532:	ea53 010c 	orrs.w	r1, r3, ip
 8010536:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 801053a:	d109      	bne.n	8010550 <__ieee754_atan2+0x80>
 801053c:	2c02      	cmp	r4, #2
 801053e:	d078      	beq.n	8010632 <__ieee754_atan2+0x162>
 8010540:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 8010638 <__ieee754_atan2+0x168>
 8010544:	ed9d 6b00 	vldr	d6, [sp]
 8010548:	2c03      	cmp	r4, #3
 801054a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801054e:	e7df      	b.n	8010510 <__ieee754_atan2+0x40>
 8010550:	ea52 0106 	orrs.w	r1, r2, r6
 8010554:	d107      	bne.n	8010566 <__ieee754_atan2+0x96>
 8010556:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8010640 <__ieee754_atan2+0x170>
 801055a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8010648 <__ieee754_atan2+0x178>
 801055e:	2d00      	cmp	r5, #0
 8010560:	fe26 7b07 	vselge.f64	d7, d6, d7
 8010564:	e7d4      	b.n	8010510 <__ieee754_atan2+0x40>
 8010566:	42ba      	cmp	r2, r7
 8010568:	d120      	bne.n	80105ac <__ieee754_atan2+0xdc>
 801056a:	4293      	cmp	r3, r2
 801056c:	d111      	bne.n	8010592 <__ieee754_atan2+0xc2>
 801056e:	2c02      	cmp	r4, #2
 8010570:	d009      	beq.n	8010586 <__ieee754_atan2+0xb6>
 8010572:	2c03      	cmp	r4, #3
 8010574:	d00a      	beq.n	801058c <__ieee754_atan2+0xbc>
 8010576:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8010650 <__ieee754_atan2+0x180>
 801057a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8010658 <__ieee754_atan2+0x188>
 801057e:	2c01      	cmp	r4, #1
 8010580:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010584:	e7c4      	b.n	8010510 <__ieee754_atan2+0x40>
 8010586:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8010660 <__ieee754_atan2+0x190>
 801058a:	e7c1      	b.n	8010510 <__ieee754_atan2+0x40>
 801058c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8010668 <__ieee754_atan2+0x198>
 8010590:	e7be      	b.n	8010510 <__ieee754_atan2+0x40>
 8010592:	2c02      	cmp	r4, #2
 8010594:	d04d      	beq.n	8010632 <__ieee754_atan2+0x162>
 8010596:	2c03      	cmp	r4, #3
 8010598:	d005      	beq.n	80105a6 <__ieee754_atan2+0xd6>
 801059a:	2c01      	cmp	r4, #1
 801059c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8010670 <__ieee754_atan2+0x1a0>
 80105a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8010678 <__ieee754_atan2+0x1a8>
 80105a4:	e7ec      	b.n	8010580 <__ieee754_atan2+0xb0>
 80105a6:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8010638 <__ieee754_atan2+0x168>
 80105aa:	e7b1      	b.n	8010510 <__ieee754_atan2+0x40>
 80105ac:	42bb      	cmp	r3, r7
 80105ae:	d0d2      	beq.n	8010556 <__ieee754_atan2+0x86>
 80105b0:	1a9b      	subs	r3, r3, r2
 80105b2:	151b      	asrs	r3, r3, #20
 80105b4:	2b3c      	cmp	r3, #60	; 0x3c
 80105b6:	dc16      	bgt.n	80105e6 <__ieee754_atan2+0x116>
 80105b8:	2800      	cmp	r0, #0
 80105ba:	da01      	bge.n	80105c0 <__ieee754_atan2+0xf0>
 80105bc:	333c      	adds	r3, #60	; 0x3c
 80105be:	db17      	blt.n	80105f0 <__ieee754_atan2+0x120>
 80105c0:	ed9d 7b00 	vldr	d7, [sp]
 80105c4:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80105c8:	f000 fe00 	bl	80111cc <fabs>
 80105cc:	f000 fd04 	bl	8010fd8 <atan>
 80105d0:	ed8d 0b00 	vstr	d0, [sp]
 80105d4:	2c01      	cmp	r4, #1
 80105d6:	d00e      	beq.n	80105f6 <__ieee754_atan2+0x126>
 80105d8:	2c02      	cmp	r4, #2
 80105da:	d014      	beq.n	8010606 <__ieee754_atan2+0x136>
 80105dc:	b9f4      	cbnz	r4, 801061c <__ieee754_atan2+0x14c>
 80105de:	ed9d 0b00 	vldr	d0, [sp]
 80105e2:	b003      	add	sp, #12
 80105e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105e6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010640 <__ieee754_atan2+0x170>
 80105ea:	ed8d 7b00 	vstr	d7, [sp]
 80105ee:	e7f1      	b.n	80105d4 <__ieee754_atan2+0x104>
 80105f0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8010678 <__ieee754_atan2+0x1a8>
 80105f4:	e7f9      	b.n	80105ea <__ieee754_atan2+0x11a>
 80105f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105fa:	9901      	ldr	r1, [sp, #4]
 80105fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010600:	e9cd 2300 	strd	r2, r3, [sp]
 8010604:	e7eb      	b.n	80105de <__ieee754_atan2+0x10e>
 8010606:	ed9d 6b00 	vldr	d6, [sp]
 801060a:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8010680 <__ieee754_atan2+0x1b0>
 801060e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010612:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8010688 <__ieee754_atan2+0x1b8>
 8010616:	ee36 7b47 	vsub.f64	d7, d6, d7
 801061a:	e779      	b.n	8010510 <__ieee754_atan2+0x40>
 801061c:	ed9d 6b00 	vldr	d6, [sp]
 8010620:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8010680 <__ieee754_atan2+0x1b0>
 8010624:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010628:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8010688 <__ieee754_atan2+0x1b8>
 801062c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010630:	e76e      	b.n	8010510 <__ieee754_atan2+0x40>
 8010632:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010688 <__ieee754_atan2+0x1b8>
 8010636:	e76b      	b.n	8010510 <__ieee754_atan2+0x40>
 8010638:	54442d18 	.word	0x54442d18
 801063c:	c00921fb 	.word	0xc00921fb
 8010640:	54442d18 	.word	0x54442d18
 8010644:	3ff921fb 	.word	0x3ff921fb
 8010648:	54442d18 	.word	0x54442d18
 801064c:	bff921fb 	.word	0xbff921fb
 8010650:	54442d18 	.word	0x54442d18
 8010654:	bfe921fb 	.word	0xbfe921fb
 8010658:	54442d18 	.word	0x54442d18
 801065c:	3fe921fb 	.word	0x3fe921fb
 8010660:	7f3321d2 	.word	0x7f3321d2
 8010664:	4002d97c 	.word	0x4002d97c
 8010668:	7f3321d2 	.word	0x7f3321d2
 801066c:	c002d97c 	.word	0xc002d97c
 8010670:	00000000 	.word	0x00000000
 8010674:	80000000 	.word	0x80000000
	...
 8010680:	33145c07 	.word	0x33145c07
 8010684:	3ca1a626 	.word	0x3ca1a626
 8010688:	54442d18 	.word	0x54442d18
 801068c:	400921fb 	.word	0x400921fb
 8010690:	7ff00000 	.word	0x7ff00000
 8010694:	00000000 	.word	0x00000000

08010698 <__ieee754_rem_pio2>:
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	eeb0 7b40 	vmov.f64	d7, d0
 801069e:	ee17 5a90 	vmov	r5, s15
 80106a2:	4b95      	ldr	r3, [pc, #596]	; (80108f8 <__ieee754_rem_pio2+0x260>)
 80106a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80106a8:	429e      	cmp	r6, r3
 80106aa:	b088      	sub	sp, #32
 80106ac:	4604      	mov	r4, r0
 80106ae:	dc07      	bgt.n	80106c0 <__ieee754_rem_pio2+0x28>
 80106b0:	2200      	movs	r2, #0
 80106b2:	2300      	movs	r3, #0
 80106b4:	ed84 0b00 	vstr	d0, [r4]
 80106b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80106bc:	2000      	movs	r0, #0
 80106be:	e01b      	b.n	80106f8 <__ieee754_rem_pio2+0x60>
 80106c0:	4b8e      	ldr	r3, [pc, #568]	; (80108fc <__ieee754_rem_pio2+0x264>)
 80106c2:	429e      	cmp	r6, r3
 80106c4:	dc3b      	bgt.n	801073e <__ieee754_rem_pio2+0xa6>
 80106c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80106ca:	2d00      	cmp	r5, #0
 80106cc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80108b8 <__ieee754_rem_pio2+0x220>
 80106d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80106d4:	dd19      	ble.n	801070a <__ieee754_rem_pio2+0x72>
 80106d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80106da:	429e      	cmp	r6, r3
 80106dc:	d00e      	beq.n	80106fc <__ieee754_rem_pio2+0x64>
 80106de:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80108c0 <__ieee754_rem_pio2+0x228>
 80106e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80106e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80106ea:	ed84 5b00 	vstr	d5, [r4]
 80106ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80106f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80106f6:	2001      	movs	r0, #1
 80106f8:	b008      	add	sp, #32
 80106fa:	bd70      	pop	{r4, r5, r6, pc}
 80106fc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80108c8 <__ieee754_rem_pio2+0x230>
 8010700:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010704:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80108d0 <__ieee754_rem_pio2+0x238>
 8010708:	e7eb      	b.n	80106e2 <__ieee754_rem_pio2+0x4a>
 801070a:	429e      	cmp	r6, r3
 801070c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010710:	d00e      	beq.n	8010730 <__ieee754_rem_pio2+0x98>
 8010712:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80108c0 <__ieee754_rem_pio2+0x228>
 8010716:	ee37 5b06 	vadd.f64	d5, d7, d6
 801071a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801071e:	ed84 5b00 	vstr	d5, [r4]
 8010722:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010726:	f04f 30ff 	mov.w	r0, #4294967295
 801072a:	ed84 7b02 	vstr	d7, [r4, #8]
 801072e:	e7e3      	b.n	80106f8 <__ieee754_rem_pio2+0x60>
 8010730:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80108c8 <__ieee754_rem_pio2+0x230>
 8010734:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010738:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80108d0 <__ieee754_rem_pio2+0x238>
 801073c:	e7eb      	b.n	8010716 <__ieee754_rem_pio2+0x7e>
 801073e:	4b70      	ldr	r3, [pc, #448]	; (8010900 <__ieee754_rem_pio2+0x268>)
 8010740:	429e      	cmp	r6, r3
 8010742:	dc6c      	bgt.n	801081e <__ieee754_rem_pio2+0x186>
 8010744:	f000 fd42 	bl	80111cc <fabs>
 8010748:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801074c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80108d8 <__ieee754_rem_pio2+0x240>
 8010750:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010754:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010758:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801075c:	ee17 0a90 	vmov	r0, s15
 8010760:	eeb1 5b44 	vneg.f64	d5, d4
 8010764:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80108b8 <__ieee754_rem_pio2+0x220>
 8010768:	eea5 0b07 	vfma.f64	d0, d5, d7
 801076c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80108c0 <__ieee754_rem_pio2+0x228>
 8010770:	281f      	cmp	r0, #31
 8010772:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010776:	ee30 6b47 	vsub.f64	d6, d0, d7
 801077a:	dc08      	bgt.n	801078e <__ieee754_rem_pio2+0xf6>
 801077c:	1e42      	subs	r2, r0, #1
 801077e:	4b61      	ldr	r3, [pc, #388]	; (8010904 <__ieee754_rem_pio2+0x26c>)
 8010780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010784:	42b3      	cmp	r3, r6
 8010786:	d002      	beq.n	801078e <__ieee754_rem_pio2+0xf6>
 8010788:	ed84 6b00 	vstr	d6, [r4]
 801078c:	e022      	b.n	80107d4 <__ieee754_rem_pio2+0x13c>
 801078e:	ee16 3a90 	vmov	r3, s13
 8010792:	1536      	asrs	r6, r6, #20
 8010794:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010798:	1af3      	subs	r3, r6, r3
 801079a:	2b10      	cmp	r3, #16
 801079c:	ddf4      	ble.n	8010788 <__ieee754_rem_pio2+0xf0>
 801079e:	eeb0 6b40 	vmov.f64	d6, d0
 80107a2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 80108c8 <__ieee754_rem_pio2+0x230>
 80107a6:	eea5 6b03 	vfma.f64	d6, d5, d3
 80107aa:	ee30 7b46 	vsub.f64	d7, d0, d6
 80107ae:	eea5 7b03 	vfma.f64	d7, d5, d3
 80107b2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 80108d0 <__ieee754_rem_pio2+0x238>
 80107b6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 80107ba:	ee36 3b47 	vsub.f64	d3, d6, d7
 80107be:	ee13 3a90 	vmov	r3, s7
 80107c2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80107c6:	1af6      	subs	r6, r6, r3
 80107c8:	2e31      	cmp	r6, #49	; 0x31
 80107ca:	dc17      	bgt.n	80107fc <__ieee754_rem_pio2+0x164>
 80107cc:	eeb0 0b46 	vmov.f64	d0, d6
 80107d0:	ed84 3b00 	vstr	d3, [r4]
 80107d4:	ed94 6b00 	vldr	d6, [r4]
 80107d8:	2d00      	cmp	r5, #0
 80107da:	ee30 0b46 	vsub.f64	d0, d0, d6
 80107de:	ee30 7b47 	vsub.f64	d7, d0, d7
 80107e2:	ed84 7b02 	vstr	d7, [r4, #8]
 80107e6:	da87      	bge.n	80106f8 <__ieee754_rem_pio2+0x60>
 80107e8:	eeb1 6b46 	vneg.f64	d6, d6
 80107ec:	ed84 6b00 	vstr	d6, [r4]
 80107f0:	eeb1 7b47 	vneg.f64	d7, d7
 80107f4:	4240      	negs	r0, r0
 80107f6:	ed84 7b02 	vstr	d7, [r4, #8]
 80107fa:	e77d      	b.n	80106f8 <__ieee754_rem_pio2+0x60>
 80107fc:	ed9f 3b38 	vldr	d3, [pc, #224]	; 80108e0 <__ieee754_rem_pio2+0x248>
 8010800:	eeb0 0b46 	vmov.f64	d0, d6
 8010804:	eea5 0b03 	vfma.f64	d0, d5, d3
 8010808:	ee36 7b40 	vsub.f64	d7, d6, d0
 801080c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80108e8 <__ieee754_rem_pio2+0x250>
 8010810:	eea5 7b03 	vfma.f64	d7, d5, d3
 8010814:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8010818:	ee30 6b47 	vsub.f64	d6, d0, d7
 801081c:	e7b4      	b.n	8010788 <__ieee754_rem_pio2+0xf0>
 801081e:	4b3a      	ldr	r3, [pc, #232]	; (8010908 <__ieee754_rem_pio2+0x270>)
 8010820:	429e      	cmp	r6, r3
 8010822:	dd06      	ble.n	8010832 <__ieee754_rem_pio2+0x19a>
 8010824:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010828:	ed80 7b02 	vstr	d7, [r0, #8]
 801082c:	ed80 7b00 	vstr	d7, [r0]
 8010830:	e744      	b.n	80106bc <__ieee754_rem_pio2+0x24>
 8010832:	1532      	asrs	r2, r6, #20
 8010834:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010838:	ee10 0a10 	vmov	r0, s0
 801083c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010840:	ec41 0b17 	vmov	d7, r0, r1
 8010844:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010848:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80108f0 <__ieee754_rem_pio2+0x258>
 801084c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010850:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010854:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010858:	ee27 7b05 	vmul.f64	d7, d7, d5
 801085c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010860:	a908      	add	r1, sp, #32
 8010862:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010866:	ee37 7b46 	vsub.f64	d7, d7, d6
 801086a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801086e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010872:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010876:	2303      	movs	r3, #3
 8010878:	ed31 7b02 	vldmdb	r1!, {d7}
 801087c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010884:	f103 30ff 	add.w	r0, r3, #4294967295
 8010888:	d013      	beq.n	80108b2 <__ieee754_rem_pio2+0x21a>
 801088a:	4920      	ldr	r1, [pc, #128]	; (801090c <__ieee754_rem_pio2+0x274>)
 801088c:	9101      	str	r1, [sp, #4]
 801088e:	2102      	movs	r1, #2
 8010890:	9100      	str	r1, [sp, #0]
 8010892:	a802      	add	r0, sp, #8
 8010894:	4621      	mov	r1, r4
 8010896:	f000 f8ab 	bl	80109f0 <__kernel_rem_pio2>
 801089a:	2d00      	cmp	r5, #0
 801089c:	f6bf af2c 	bge.w	80106f8 <__ieee754_rem_pio2+0x60>
 80108a0:	ed94 7b00 	vldr	d7, [r4]
 80108a4:	eeb1 7b47 	vneg.f64	d7, d7
 80108a8:	ed84 7b00 	vstr	d7, [r4]
 80108ac:	ed94 7b02 	vldr	d7, [r4, #8]
 80108b0:	e79e      	b.n	80107f0 <__ieee754_rem_pio2+0x158>
 80108b2:	4603      	mov	r3, r0
 80108b4:	e7e0      	b.n	8010878 <__ieee754_rem_pio2+0x1e0>
 80108b6:	bf00      	nop
 80108b8:	54400000 	.word	0x54400000
 80108bc:	3ff921fb 	.word	0x3ff921fb
 80108c0:	1a626331 	.word	0x1a626331
 80108c4:	3dd0b461 	.word	0x3dd0b461
 80108c8:	1a600000 	.word	0x1a600000
 80108cc:	3dd0b461 	.word	0x3dd0b461
 80108d0:	2e037073 	.word	0x2e037073
 80108d4:	3ba3198a 	.word	0x3ba3198a
 80108d8:	6dc9c883 	.word	0x6dc9c883
 80108dc:	3fe45f30 	.word	0x3fe45f30
 80108e0:	2e000000 	.word	0x2e000000
 80108e4:	3ba3198a 	.word	0x3ba3198a
 80108e8:	252049c1 	.word	0x252049c1
 80108ec:	397b839a 	.word	0x397b839a
 80108f0:	00000000 	.word	0x00000000
 80108f4:	41700000 	.word	0x41700000
 80108f8:	3fe921fb 	.word	0x3fe921fb
 80108fc:	4002d97b 	.word	0x4002d97b
 8010900:	413921fb 	.word	0x413921fb
 8010904:	080116bc 	.word	0x080116bc
 8010908:	7fefffff 	.word	0x7fefffff
 801090c:	0801173c 	.word	0x0801173c

08010910 <__ieee754_sqrt>:
 8010910:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010914:	4770      	bx	lr
	...

08010918 <__kernel_cos>:
 8010918:	ee10 1a90 	vmov	r1, s1
 801091c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010920:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010924:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010928:	da05      	bge.n	8010936 <__kernel_cos+0x1e>
 801092a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801092e:	ee16 3a90 	vmov	r3, s13
 8010932:	2b00      	cmp	r3, #0
 8010934:	d03d      	beq.n	80109b2 <__kernel_cos+0x9a>
 8010936:	ee20 4b00 	vmul.f64	d4, d0, d0
 801093a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801093e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 80109b8 <__kernel_cos+0xa0>
 8010942:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8010946:	ee24 6b06 	vmul.f64	d6, d4, d6
 801094a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80109c0 <__kernel_cos+0xa8>
 801094e:	eea4 5b03 	vfma.f64	d5, d4, d3
 8010952:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80109c8 <__kernel_cos+0xb0>
 8010956:	eea5 3b04 	vfma.f64	d3, d5, d4
 801095a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80109d0 <__kernel_cos+0xb8>
 801095e:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010962:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80109d8 <__kernel_cos+0xc0>
 8010966:	4b20      	ldr	r3, [pc, #128]	; (80109e8 <__kernel_cos+0xd0>)
 8010968:	eea5 3b04 	vfma.f64	d3, d5, d4
 801096c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80109e0 <__kernel_cos+0xc8>
 8010970:	4299      	cmp	r1, r3
 8010972:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010976:	ee25 5b04 	vmul.f64	d5, d5, d4
 801097a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801097e:	dc04      	bgt.n	801098a <__kernel_cos+0x72>
 8010980:	ee36 6b41 	vsub.f64	d6, d6, d1
 8010984:	ee37 0b46 	vsub.f64	d0, d7, d6
 8010988:	4770      	bx	lr
 801098a:	4b18      	ldr	r3, [pc, #96]	; (80109ec <__kernel_cos+0xd4>)
 801098c:	4299      	cmp	r1, r3
 801098e:	dc0d      	bgt.n	80109ac <__kernel_cos+0x94>
 8010990:	2200      	movs	r2, #0
 8010992:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010996:	ec43 2b15 	vmov	d5, r2, r3
 801099a:	ee37 0b45 	vsub.f64	d0, d7, d5
 801099e:	ee36 6b45 	vsub.f64	d6, d6, d5
 80109a2:	ee36 6b41 	vsub.f64	d6, d6, d1
 80109a6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80109aa:	4770      	bx	lr
 80109ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80109b0:	e7f3      	b.n	801099a <__kernel_cos+0x82>
 80109b2:	eeb0 0b47 	vmov.f64	d0, d7
 80109b6:	4770      	bx	lr
 80109b8:	be8838d4 	.word	0xbe8838d4
 80109bc:	bda8fae9 	.word	0xbda8fae9
 80109c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80109c4:	3e21ee9e 	.word	0x3e21ee9e
 80109c8:	809c52ad 	.word	0x809c52ad
 80109cc:	be927e4f 	.word	0xbe927e4f
 80109d0:	19cb1590 	.word	0x19cb1590
 80109d4:	3efa01a0 	.word	0x3efa01a0
 80109d8:	16c15177 	.word	0x16c15177
 80109dc:	bf56c16c 	.word	0xbf56c16c
 80109e0:	5555554c 	.word	0x5555554c
 80109e4:	3fa55555 	.word	0x3fa55555
 80109e8:	3fd33332 	.word	0x3fd33332
 80109ec:	3fe90000 	.word	0x3fe90000

080109f0 <__kernel_rem_pio2>:
 80109f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f4:	ed2d 8b06 	vpush	{d8-d10}
 80109f8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80109fc:	469b      	mov	fp, r3
 80109fe:	460e      	mov	r6, r1
 8010a00:	4bc7      	ldr	r3, [pc, #796]	; (8010d20 <__kernel_rem_pio2+0x330>)
 8010a02:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8010a04:	9002      	str	r0, [sp, #8]
 8010a06:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8010a0a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8010a0c:	1ed1      	subs	r1, r2, #3
 8010a0e:	2318      	movs	r3, #24
 8010a10:	f06f 0417 	mvn.w	r4, #23
 8010a14:	fb91 f1f3 	sdiv	r1, r1, r3
 8010a18:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8010a1c:	f10b 3aff 	add.w	sl, fp, #4294967295
 8010a20:	fb01 4404 	mla	r4, r1, r4, r4
 8010a24:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8010d08 <__kernel_rem_pio2+0x318>
 8010a28:	4414      	add	r4, r2
 8010a2a:	eba1 050a 	sub.w	r5, r1, sl
 8010a2e:	aa1a      	add	r2, sp, #104	; 0x68
 8010a30:	eb09 070a 	add.w	r7, r9, sl
 8010a34:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8010a38:	4696      	mov	lr, r2
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	42bb      	cmp	r3, r7
 8010a3e:	dd0f      	ble.n	8010a60 <__kernel_rem_pio2+0x70>
 8010a40:	af6a      	add	r7, sp, #424	; 0x1a8
 8010a42:	2200      	movs	r2, #0
 8010a44:	454a      	cmp	r2, r9
 8010a46:	dc28      	bgt.n	8010a9a <__kernel_rem_pio2+0xaa>
 8010a48:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8010a4c:	eb0b 0302 	add.w	r3, fp, r2
 8010a50:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8010a54:	9d02      	ldr	r5, [sp, #8]
 8010a56:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8010d08 <__kernel_rem_pio2+0x318>
 8010a5a:	f04f 0c00 	mov.w	ip, #0
 8010a5e:	e016      	b.n	8010a8e <__kernel_rem_pio2+0x9e>
 8010a60:	42dd      	cmn	r5, r3
 8010a62:	d409      	bmi.n	8010a78 <__kernel_rem_pio2+0x88>
 8010a64:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8010a68:	ee07 2a90 	vmov	s15, r2
 8010a6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a70:	ecae 7b02 	vstmia	lr!, {d7}
 8010a74:	3301      	adds	r3, #1
 8010a76:	e7e1      	b.n	8010a3c <__kernel_rem_pio2+0x4c>
 8010a78:	eeb0 7b46 	vmov.f64	d7, d6
 8010a7c:	e7f8      	b.n	8010a70 <__kernel_rem_pio2+0x80>
 8010a7e:	ecb5 5b02 	vldmia	r5!, {d5}
 8010a82:	ed33 6b02 	vldmdb	r3!, {d6}
 8010a86:	f10c 0c01 	add.w	ip, ip, #1
 8010a8a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010a8e:	45d4      	cmp	ip, sl
 8010a90:	ddf5      	ble.n	8010a7e <__kernel_rem_pio2+0x8e>
 8010a92:	eca7 7b02 	vstmia	r7!, {d7}
 8010a96:	3201      	adds	r2, #1
 8010a98:	e7d4      	b.n	8010a44 <__kernel_rem_pio2+0x54>
 8010a9a:	ab06      	add	r3, sp, #24
 8010a9c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8010aa0:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8010d10 <__kernel_rem_pio2+0x320>
 8010aa4:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8010d18 <__kernel_rem_pio2+0x328>
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8010aae:	9303      	str	r3, [sp, #12]
 8010ab0:	464d      	mov	r5, r9
 8010ab2:	ab92      	add	r3, sp, #584	; 0x248
 8010ab4:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8010ab8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010abc:	3f01      	subs	r7, #1
 8010abe:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8010ac2:	00ff      	lsls	r7, r7, #3
 8010ac4:	ab92      	add	r3, sp, #584	; 0x248
 8010ac6:	19da      	adds	r2, r3, r7
 8010ac8:	3a98      	subs	r2, #152	; 0x98
 8010aca:	2300      	movs	r3, #0
 8010acc:	1ae9      	subs	r1, r5, r3
 8010ace:	2900      	cmp	r1, #0
 8010ad0:	dc4e      	bgt.n	8010b70 <__kernel_rem_pio2+0x180>
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f000 fc00 	bl	80112d8 <scalbn>
 8010ad8:	eeb0 8b40 	vmov.f64	d8, d0
 8010adc:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010ae0:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010ae4:	f000 fb7c 	bl	80111e0 <floor>
 8010ae8:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010aec:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010af0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010af4:	2c00      	cmp	r4, #0
 8010af6:	edcd 7a01 	vstr	s15, [sp, #4]
 8010afa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010afe:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010b02:	dd4a      	ble.n	8010b9a <__kernel_rem_pio2+0x1aa>
 8010b04:	1e69      	subs	r1, r5, #1
 8010b06:	ab06      	add	r3, sp, #24
 8010b08:	f1c4 0018 	rsb	r0, r4, #24
 8010b0c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8010b10:	9a01      	ldr	r2, [sp, #4]
 8010b12:	fa4c f300 	asr.w	r3, ip, r0
 8010b16:	441a      	add	r2, r3
 8010b18:	4083      	lsls	r3, r0
 8010b1a:	9201      	str	r2, [sp, #4]
 8010b1c:	ebac 0203 	sub.w	r2, ip, r3
 8010b20:	ab06      	add	r3, sp, #24
 8010b22:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8010b26:	f1c4 0317 	rsb	r3, r4, #23
 8010b2a:	fa42 f803 	asr.w	r8, r2, r3
 8010b2e:	f1b8 0f00 	cmp.w	r8, #0
 8010b32:	dd43      	ble.n	8010bbc <__kernel_rem_pio2+0x1cc>
 8010b34:	9b01      	ldr	r3, [sp, #4]
 8010b36:	2000      	movs	r0, #0
 8010b38:	3301      	adds	r3, #1
 8010b3a:	9301      	str	r3, [sp, #4]
 8010b3c:	4601      	mov	r1, r0
 8010b3e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8010b42:	4285      	cmp	r5, r0
 8010b44:	dc6e      	bgt.n	8010c24 <__kernel_rem_pio2+0x234>
 8010b46:	2c00      	cmp	r4, #0
 8010b48:	dd04      	ble.n	8010b54 <__kernel_rem_pio2+0x164>
 8010b4a:	2c01      	cmp	r4, #1
 8010b4c:	d07f      	beq.n	8010c4e <__kernel_rem_pio2+0x25e>
 8010b4e:	2c02      	cmp	r4, #2
 8010b50:	f000 8087 	beq.w	8010c62 <__kernel_rem_pio2+0x272>
 8010b54:	f1b8 0f02 	cmp.w	r8, #2
 8010b58:	d130      	bne.n	8010bbc <__kernel_rem_pio2+0x1cc>
 8010b5a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b5e:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010b62:	b359      	cbz	r1, 8010bbc <__kernel_rem_pio2+0x1cc>
 8010b64:	4620      	mov	r0, r4
 8010b66:	f000 fbb7 	bl	80112d8 <scalbn>
 8010b6a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010b6e:	e025      	b.n	8010bbc <__kernel_rem_pio2+0x1cc>
 8010b70:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010b74:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010b78:	a806      	add	r0, sp, #24
 8010b7a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010b7e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010b82:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010b86:	ee10 1a10 	vmov	r1, s0
 8010b8a:	ed32 0b02 	vldmdb	r2!, {d0}
 8010b8e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8010b92:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010b96:	3301      	adds	r3, #1
 8010b98:	e798      	b.n	8010acc <__kernel_rem_pio2+0xdc>
 8010b9a:	d106      	bne.n	8010baa <__kernel_rem_pio2+0x1ba>
 8010b9c:	1e6b      	subs	r3, r5, #1
 8010b9e:	aa06      	add	r2, sp, #24
 8010ba0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010ba4:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8010ba8:	e7c1      	b.n	8010b2e <__kernel_rem_pio2+0x13e>
 8010baa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010bae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb6:	da32      	bge.n	8010c1e <__kernel_rem_pio2+0x22e>
 8010bb8:	f04f 0800 	mov.w	r8, #0
 8010bbc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc4:	f040 80b0 	bne.w	8010d28 <__kernel_rem_pio2+0x338>
 8010bc8:	1e6b      	subs	r3, r5, #1
 8010bca:	4618      	mov	r0, r3
 8010bcc:	2200      	movs	r2, #0
 8010bce:	4548      	cmp	r0, r9
 8010bd0:	da4e      	bge.n	8010c70 <__kernel_rem_pio2+0x280>
 8010bd2:	2a00      	cmp	r2, #0
 8010bd4:	f000 8088 	beq.w	8010ce8 <__kernel_rem_pio2+0x2f8>
 8010bd8:	aa06      	add	r2, sp, #24
 8010bda:	3c18      	subs	r4, #24
 8010bdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010be0:	2900      	cmp	r1, #0
 8010be2:	f000 808e 	beq.w	8010d02 <__kernel_rem_pio2+0x312>
 8010be6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010bea:	4620      	mov	r0, r4
 8010bec:	9302      	str	r3, [sp, #8]
 8010bee:	f000 fb73 	bl	80112d8 <scalbn>
 8010bf2:	9b02      	ldr	r3, [sp, #8]
 8010bf4:	aa6a      	add	r2, sp, #424	; 0x1a8
 8010bf6:	00d9      	lsls	r1, r3, #3
 8010bf8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8010d10 <__kernel_rem_pio2+0x320>
 8010bfc:	1850      	adds	r0, r2, r1
 8010bfe:	f100 0508 	add.w	r5, r0, #8
 8010c02:	461c      	mov	r4, r3
 8010c04:	2c00      	cmp	r4, #0
 8010c06:	f280 80bd 	bge.w	8010d84 <__kernel_rem_pio2+0x394>
 8010c0a:	2500      	movs	r5, #0
 8010c0c:	1b5c      	subs	r4, r3, r5
 8010c0e:	2c00      	cmp	r4, #0
 8010c10:	f2c0 80dd 	blt.w	8010dce <__kernel_rem_pio2+0x3de>
 8010c14:	4f43      	ldr	r7, [pc, #268]	; (8010d24 <__kernel_rem_pio2+0x334>)
 8010c16:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8010d08 <__kernel_rem_pio2+0x318>
 8010c1a:	2400      	movs	r4, #0
 8010c1c:	e0cb      	b.n	8010db6 <__kernel_rem_pio2+0x3c6>
 8010c1e:	f04f 0802 	mov.w	r8, #2
 8010c22:	e787      	b.n	8010b34 <__kernel_rem_pio2+0x144>
 8010c24:	ab06      	add	r3, sp, #24
 8010c26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010c2a:	b949      	cbnz	r1, 8010c40 <__kernel_rem_pio2+0x250>
 8010c2c:	b12b      	cbz	r3, 8010c3a <__kernel_rem_pio2+0x24a>
 8010c2e:	aa06      	add	r2, sp, #24
 8010c30:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010c34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8010c38:	2301      	movs	r3, #1
 8010c3a:	3001      	adds	r0, #1
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	e780      	b.n	8010b42 <__kernel_rem_pio2+0x152>
 8010c40:	aa06      	add	r2, sp, #24
 8010c42:	ebac 0303 	sub.w	r3, ip, r3
 8010c46:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	e7f5      	b.n	8010c3a <__kernel_rem_pio2+0x24a>
 8010c4e:	1e68      	subs	r0, r5, #1
 8010c50:	ab06      	add	r3, sp, #24
 8010c52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010c56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010c5a:	aa06      	add	r2, sp, #24
 8010c5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8010c60:	e778      	b.n	8010b54 <__kernel_rem_pio2+0x164>
 8010c62:	1e68      	subs	r0, r5, #1
 8010c64:	ab06      	add	r3, sp, #24
 8010c66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010c6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010c6e:	e7f4      	b.n	8010c5a <__kernel_rem_pio2+0x26a>
 8010c70:	a906      	add	r1, sp, #24
 8010c72:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010c76:	3801      	subs	r0, #1
 8010c78:	430a      	orrs	r2, r1
 8010c7a:	e7a8      	b.n	8010bce <__kernel_rem_pio2+0x1de>
 8010c7c:	f10c 0c01 	add.w	ip, ip, #1
 8010c80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010c84:	2a00      	cmp	r2, #0
 8010c86:	d0f9      	beq.n	8010c7c <__kernel_rem_pio2+0x28c>
 8010c88:	eb0b 0305 	add.w	r3, fp, r5
 8010c8c:	aa1a      	add	r2, sp, #104	; 0x68
 8010c8e:	00db      	lsls	r3, r3, #3
 8010c90:	1898      	adds	r0, r3, r2
 8010c92:	3008      	adds	r0, #8
 8010c94:	1c69      	adds	r1, r5, #1
 8010c96:	3708      	adds	r7, #8
 8010c98:	2200      	movs	r2, #0
 8010c9a:	4465      	add	r5, ip
 8010c9c:	9005      	str	r0, [sp, #20]
 8010c9e:	428d      	cmp	r5, r1
 8010ca0:	f6ff af07 	blt.w	8010ab2 <__kernel_rem_pio2+0xc2>
 8010ca4:	a81a      	add	r0, sp, #104	; 0x68
 8010ca6:	eb02 0c03 	add.w	ip, r2, r3
 8010caa:	4484      	add	ip, r0
 8010cac:	9803      	ldr	r0, [sp, #12]
 8010cae:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010cb2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8010cb6:	9001      	str	r0, [sp, #4]
 8010cb8:	ee07 0a90 	vmov	s15, r0
 8010cbc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010cc0:	9805      	ldr	r0, [sp, #20]
 8010cc2:	ed8c 7b00 	vstr	d7, [ip]
 8010cc6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010d08 <__kernel_rem_pio2+0x318>
 8010cca:	eb00 0802 	add.w	r8, r0, r2
 8010cce:	f04f 0c00 	mov.w	ip, #0
 8010cd2:	45d4      	cmp	ip, sl
 8010cd4:	dd0c      	ble.n	8010cf0 <__kernel_rem_pio2+0x300>
 8010cd6:	eb02 0c07 	add.w	ip, r2, r7
 8010cda:	a86a      	add	r0, sp, #424	; 0x1a8
 8010cdc:	4484      	add	ip, r0
 8010cde:	ed8c 7b02 	vstr	d7, [ip, #8]
 8010ce2:	3101      	adds	r1, #1
 8010ce4:	3208      	adds	r2, #8
 8010ce6:	e7da      	b.n	8010c9e <__kernel_rem_pio2+0x2ae>
 8010ce8:	9b04      	ldr	r3, [sp, #16]
 8010cea:	f04f 0c01 	mov.w	ip, #1
 8010cee:	e7c7      	b.n	8010c80 <__kernel_rem_pio2+0x290>
 8010cf0:	ecbe 5b02 	vldmia	lr!, {d5}
 8010cf4:	ed38 6b02 	vldmdb	r8!, {d6}
 8010cf8:	f10c 0c01 	add.w	ip, ip, #1
 8010cfc:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010d00:	e7e7      	b.n	8010cd2 <__kernel_rem_pio2+0x2e2>
 8010d02:	3b01      	subs	r3, #1
 8010d04:	e768      	b.n	8010bd8 <__kernel_rem_pio2+0x1e8>
 8010d06:	bf00      	nop
	...
 8010d14:	3e700000 	.word	0x3e700000
 8010d18:	00000000 	.word	0x00000000
 8010d1c:	41700000 	.word	0x41700000
 8010d20:	08011888 	.word	0x08011888
 8010d24:	08011848 	.word	0x08011848
 8010d28:	4260      	negs	r0, r4
 8010d2a:	eeb0 0b48 	vmov.f64	d0, d8
 8010d2e:	f000 fad3 	bl	80112d8 <scalbn>
 8010d32:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8010f10 <__kernel_rem_pio2+0x520>
 8010d36:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3e:	db18      	blt.n	8010d72 <__kernel_rem_pio2+0x382>
 8010d40:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8010f18 <__kernel_rem_pio2+0x528>
 8010d44:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010d48:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010d4c:	aa06      	add	r2, sp, #24
 8010d4e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010d52:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010d56:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010d5a:	a906      	add	r1, sp, #24
 8010d5c:	ee10 3a10 	vmov	r3, s0
 8010d60:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010d64:	1c6b      	adds	r3, r5, #1
 8010d66:	ee17 2a10 	vmov	r2, s14
 8010d6a:	3418      	adds	r4, #24
 8010d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010d70:	e739      	b.n	8010be6 <__kernel_rem_pio2+0x1f6>
 8010d72:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010d76:	aa06      	add	r2, sp, #24
 8010d78:	ee10 3a10 	vmov	r3, s0
 8010d7c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010d80:	462b      	mov	r3, r5
 8010d82:	e730      	b.n	8010be6 <__kernel_rem_pio2+0x1f6>
 8010d84:	aa06      	add	r2, sp, #24
 8010d86:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8010d8a:	9202      	str	r2, [sp, #8]
 8010d8c:	ee07 2a90 	vmov	s15, r2
 8010d90:	3c01      	subs	r4, #1
 8010d92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d96:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010d9a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010d9e:	ed25 7b02 	vstmdb	r5!, {d7}
 8010da2:	e72f      	b.n	8010c04 <__kernel_rem_pio2+0x214>
 8010da4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8010da8:	ecb7 5b02 	vldmia	r7!, {d5}
 8010dac:	ed9c 6b00 	vldr	d6, [ip]
 8010db0:	3401      	adds	r4, #1
 8010db2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010db6:	454c      	cmp	r4, r9
 8010db8:	dc01      	bgt.n	8010dbe <__kernel_rem_pio2+0x3ce>
 8010dba:	42a5      	cmp	r5, r4
 8010dbc:	daf2      	bge.n	8010da4 <__kernel_rem_pio2+0x3b4>
 8010dbe:	aa42      	add	r2, sp, #264	; 0x108
 8010dc0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8010dc4:	ed84 7b00 	vstr	d7, [r4]
 8010dc8:	3501      	adds	r5, #1
 8010dca:	3808      	subs	r0, #8
 8010dcc:	e71e      	b.n	8010c0c <__kernel_rem_pio2+0x21c>
 8010dce:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8010dd0:	2a03      	cmp	r2, #3
 8010dd2:	d84e      	bhi.n	8010e72 <__kernel_rem_pio2+0x482>
 8010dd4:	e8df f002 	tbb	[pc, r2]
 8010dd8:	021f1f3e 	.word	0x021f1f3e
 8010ddc:	3108      	adds	r1, #8
 8010dde:	aa42      	add	r2, sp, #264	; 0x108
 8010de0:	4411      	add	r1, r2
 8010de2:	4608      	mov	r0, r1
 8010de4:	461c      	mov	r4, r3
 8010de6:	2c00      	cmp	r4, #0
 8010de8:	dc61      	bgt.n	8010eae <__kernel_rem_pio2+0x4be>
 8010dea:	4608      	mov	r0, r1
 8010dec:	461c      	mov	r4, r3
 8010dee:	2c01      	cmp	r4, #1
 8010df0:	dc6d      	bgt.n	8010ece <__kernel_rem_pio2+0x4de>
 8010df2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010f20 <__kernel_rem_pio2+0x530>
 8010df6:	2b01      	cmp	r3, #1
 8010df8:	dc79      	bgt.n	8010eee <__kernel_rem_pio2+0x4fe>
 8010dfa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8010dfe:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8010e02:	f1b8 0f00 	cmp.w	r8, #0
 8010e06:	d178      	bne.n	8010efa <__kernel_rem_pio2+0x50a>
 8010e08:	ed86 5b00 	vstr	d5, [r6]
 8010e0c:	ed86 6b02 	vstr	d6, [r6, #8]
 8010e10:	ed86 7b04 	vstr	d7, [r6, #16]
 8010e14:	e02d      	b.n	8010e72 <__kernel_rem_pio2+0x482>
 8010e16:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8010f20 <__kernel_rem_pio2+0x530>
 8010e1a:	3108      	adds	r1, #8
 8010e1c:	aa42      	add	r2, sp, #264	; 0x108
 8010e1e:	4411      	add	r1, r2
 8010e20:	4618      	mov	r0, r3
 8010e22:	2800      	cmp	r0, #0
 8010e24:	da34      	bge.n	8010e90 <__kernel_rem_pio2+0x4a0>
 8010e26:	f1b8 0f00 	cmp.w	r8, #0
 8010e2a:	d037      	beq.n	8010e9c <__kernel_rem_pio2+0x4ac>
 8010e2c:	eeb1 7b46 	vneg.f64	d7, d6
 8010e30:	ed86 7b00 	vstr	d7, [r6]
 8010e34:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8010e38:	a844      	add	r0, sp, #272	; 0x110
 8010e3a:	2101      	movs	r1, #1
 8010e3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e40:	428b      	cmp	r3, r1
 8010e42:	da2e      	bge.n	8010ea2 <__kernel_rem_pio2+0x4b2>
 8010e44:	f1b8 0f00 	cmp.w	r8, #0
 8010e48:	d001      	beq.n	8010e4e <__kernel_rem_pio2+0x45e>
 8010e4a:	eeb1 7b47 	vneg.f64	d7, d7
 8010e4e:	ed86 7b02 	vstr	d7, [r6, #8]
 8010e52:	e00e      	b.n	8010e72 <__kernel_rem_pio2+0x482>
 8010e54:	aa92      	add	r2, sp, #584	; 0x248
 8010e56:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8010f20 <__kernel_rem_pio2+0x530>
 8010e5a:	4411      	add	r1, r2
 8010e5c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	da0f      	bge.n	8010e84 <__kernel_rem_pio2+0x494>
 8010e64:	f1b8 0f00 	cmp.w	r8, #0
 8010e68:	d001      	beq.n	8010e6e <__kernel_rem_pio2+0x47e>
 8010e6a:	eeb1 7b47 	vneg.f64	d7, d7
 8010e6e:	ed86 7b00 	vstr	d7, [r6]
 8010e72:	9b01      	ldr	r3, [sp, #4]
 8010e74:	f003 0007 	and.w	r0, r3, #7
 8010e78:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8010e7c:	ecbd 8b06 	vpop	{d8-d10}
 8010e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e84:	ed31 6b02 	vldmdb	r1!, {d6}
 8010e88:	3b01      	subs	r3, #1
 8010e8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e8e:	e7e7      	b.n	8010e60 <__kernel_rem_pio2+0x470>
 8010e90:	ed31 7b02 	vldmdb	r1!, {d7}
 8010e94:	3801      	subs	r0, #1
 8010e96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010e9a:	e7c2      	b.n	8010e22 <__kernel_rem_pio2+0x432>
 8010e9c:	eeb0 7b46 	vmov.f64	d7, d6
 8010ea0:	e7c6      	b.n	8010e30 <__kernel_rem_pio2+0x440>
 8010ea2:	ecb0 6b02 	vldmia	r0!, {d6}
 8010ea6:	3101      	adds	r1, #1
 8010ea8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010eac:	e7c8      	b.n	8010e40 <__kernel_rem_pio2+0x450>
 8010eae:	ed10 7b04 	vldr	d7, [r0, #-16]
 8010eb2:	ed30 5b02 	vldmdb	r0!, {d5}
 8010eb6:	3c01      	subs	r4, #1
 8010eb8:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010ebc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ec0:	ed00 6b02 	vstr	d6, [r0, #-8]
 8010ec4:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010ec8:	ed80 7b00 	vstr	d7, [r0]
 8010ecc:	e78b      	b.n	8010de6 <__kernel_rem_pio2+0x3f6>
 8010ece:	ed10 7b04 	vldr	d7, [r0, #-16]
 8010ed2:	ed30 5b02 	vldmdb	r0!, {d5}
 8010ed6:	3c01      	subs	r4, #1
 8010ed8:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010edc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ee0:	ed00 6b02 	vstr	d6, [r0, #-8]
 8010ee4:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010ee8:	ed80 7b00 	vstr	d7, [r0]
 8010eec:	e77f      	b.n	8010dee <__kernel_rem_pio2+0x3fe>
 8010eee:	ed31 6b02 	vldmdb	r1!, {d6}
 8010ef2:	3b01      	subs	r3, #1
 8010ef4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010ef8:	e77d      	b.n	8010df6 <__kernel_rem_pio2+0x406>
 8010efa:	eeb1 5b45 	vneg.f64	d5, d5
 8010efe:	eeb1 6b46 	vneg.f64	d6, d6
 8010f02:	ed86 5b00 	vstr	d5, [r6]
 8010f06:	eeb1 7b47 	vneg.f64	d7, d7
 8010f0a:	ed86 6b02 	vstr	d6, [r6, #8]
 8010f0e:	e77f      	b.n	8010e10 <__kernel_rem_pio2+0x420>
 8010f10:	00000000 	.word	0x00000000
 8010f14:	41700000 	.word	0x41700000
 8010f18:	00000000 	.word	0x00000000
 8010f1c:	3e700000 	.word	0x3e700000
	...

08010f28 <__kernel_sin>:
 8010f28:	ee10 3a90 	vmov	r3, s1
 8010f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f30:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010f34:	da04      	bge.n	8010f40 <__kernel_sin+0x18>
 8010f36:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010f3a:	ee17 3a90 	vmov	r3, s15
 8010f3e:	b35b      	cbz	r3, 8010f98 <__kernel_sin+0x70>
 8010f40:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010f44:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010f48:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010fa0 <__kernel_sin+0x78>
 8010f4c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010fa8 <__kernel_sin+0x80>
 8010f50:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010f54:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010fb0 <__kernel_sin+0x88>
 8010f58:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010f5c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010fb8 <__kernel_sin+0x90>
 8010f60:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010f64:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010fc0 <__kernel_sin+0x98>
 8010f68:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010f6c:	b930      	cbnz	r0, 8010f7c <__kernel_sin+0x54>
 8010f6e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010fc8 <__kernel_sin+0xa0>
 8010f72:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010f76:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010f7a:	4770      	bx	lr
 8010f7c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010f80:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010f84:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010f88:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010f8c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010fd0 <__kernel_sin+0xa8>
 8010f90:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010f94:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop
 8010f9c:	f3af 8000 	nop.w
 8010fa0:	5acfd57c 	.word	0x5acfd57c
 8010fa4:	3de5d93a 	.word	0x3de5d93a
 8010fa8:	8a2b9ceb 	.word	0x8a2b9ceb
 8010fac:	be5ae5e6 	.word	0xbe5ae5e6
 8010fb0:	57b1fe7d 	.word	0x57b1fe7d
 8010fb4:	3ec71de3 	.word	0x3ec71de3
 8010fb8:	19c161d5 	.word	0x19c161d5
 8010fbc:	bf2a01a0 	.word	0xbf2a01a0
 8010fc0:	1110f8a6 	.word	0x1110f8a6
 8010fc4:	3f811111 	.word	0x3f811111
 8010fc8:	55555549 	.word	0x55555549
 8010fcc:	bfc55555 	.word	0xbfc55555
 8010fd0:	55555549 	.word	0x55555549
 8010fd4:	3fc55555 	.word	0x3fc55555

08010fd8 <atan>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	eeb0 7b40 	vmov.f64	d7, d0
 8010fde:	ee17 5a90 	vmov	r5, s15
 8010fe2:	4b73      	ldr	r3, [pc, #460]	; (80111b0 <atan+0x1d8>)
 8010fe4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010fe8:	429c      	cmp	r4, r3
 8010fea:	dd13      	ble.n	8011014 <atan+0x3c>
 8010fec:	4b71      	ldr	r3, [pc, #452]	; (80111b4 <atan+0x1dc>)
 8010fee:	429c      	cmp	r4, r3
 8010ff0:	dc03      	bgt.n	8010ffa <atan+0x22>
 8010ff2:	d107      	bne.n	8011004 <atan+0x2c>
 8010ff4:	ee10 3a10 	vmov	r3, s0
 8010ff8:	b123      	cbz	r3, 8011004 <atan+0x2c>
 8010ffa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010ffe:	eeb0 0b47 	vmov.f64	d0, d7
 8011002:	bd38      	pop	{r3, r4, r5, pc}
 8011004:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011140 <atan+0x168>
 8011008:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011148 <atan+0x170>
 801100c:	2d00      	cmp	r5, #0
 801100e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8011012:	e7f4      	b.n	8010ffe <atan+0x26>
 8011014:	4b68      	ldr	r3, [pc, #416]	; (80111b8 <atan+0x1e0>)
 8011016:	429c      	cmp	r4, r3
 8011018:	dc11      	bgt.n	801103e <atan+0x66>
 801101a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801101e:	429c      	cmp	r4, r3
 8011020:	dc0a      	bgt.n	8011038 <atan+0x60>
 8011022:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011026:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011150 <atan+0x178>
 801102a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801102e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011036:	dce2      	bgt.n	8010ffe <atan+0x26>
 8011038:	f04f 33ff 	mov.w	r3, #4294967295
 801103c:	e013      	b.n	8011066 <atan+0x8e>
 801103e:	f000 f8c5 	bl	80111cc <fabs>
 8011042:	4b5e      	ldr	r3, [pc, #376]	; (80111bc <atan+0x1e4>)
 8011044:	429c      	cmp	r4, r3
 8011046:	dc4f      	bgt.n	80110e8 <atan+0x110>
 8011048:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801104c:	429c      	cmp	r4, r3
 801104e:	dc41      	bgt.n	80110d4 <atan+0xfc>
 8011050:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011054:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011058:	2300      	movs	r3, #0
 801105a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801105e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011062:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011066:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011158 <atan+0x180>
 801106a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801106e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8011072:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011160 <atan+0x188>
 8011076:	eea5 3b06 	vfma.f64	d3, d5, d6
 801107a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011168 <atan+0x190>
 801107e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011082:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011170 <atan+0x198>
 8011086:	eea6 3b05 	vfma.f64	d3, d6, d5
 801108a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011178 <atan+0x1a0>
 801108e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011092:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011180 <atan+0x1a8>
 8011096:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011188 <atan+0x1b0>
 801109a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801109e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011190 <atan+0x1b8>
 80110a2:	eea5 2b06 	vfma.f64	d2, d5, d6
 80110a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011198 <atan+0x1c0>
 80110aa:	eea2 6b05 	vfma.f64	d6, d2, d5
 80110ae:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80111a0 <atan+0x1c8>
 80110b2:	eea6 2b05 	vfma.f64	d2, d6, d5
 80110b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80111a8 <atan+0x1d0>
 80110ba:	1c5a      	adds	r2, r3, #1
 80110bc:	eea2 6b05 	vfma.f64	d6, d2, d5
 80110c0:	ee26 6b05 	vmul.f64	d6, d6, d5
 80110c4:	eea3 6b04 	vfma.f64	d6, d3, d4
 80110c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80110cc:	d121      	bne.n	8011112 <atan+0x13a>
 80110ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110d2:	e794      	b.n	8010ffe <atan+0x26>
 80110d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80110d8:	2301      	movs	r3, #1
 80110da:	ee30 6b47 	vsub.f64	d6, d0, d7
 80110de:	ee30 0b07 	vadd.f64	d0, d0, d7
 80110e2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80110e6:	e7be      	b.n	8011066 <atan+0x8e>
 80110e8:	4b35      	ldr	r3, [pc, #212]	; (80111c0 <atan+0x1e8>)
 80110ea:	429c      	cmp	r4, r3
 80110ec:	dc0b      	bgt.n	8011106 <atan+0x12e>
 80110ee:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80110f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80110f6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80110fa:	eea0 6b07 	vfma.f64	d6, d0, d7
 80110fe:	2302      	movs	r3, #2
 8011100:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011104:	e7af      	b.n	8011066 <atan+0x8e>
 8011106:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801110a:	2303      	movs	r3, #3
 801110c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011110:	e7a9      	b.n	8011066 <atan+0x8e>
 8011112:	4a2c      	ldr	r2, [pc, #176]	; (80111c4 <atan+0x1ec>)
 8011114:	492c      	ldr	r1, [pc, #176]	; (80111c8 <atan+0x1f0>)
 8011116:	00db      	lsls	r3, r3, #3
 8011118:	441a      	add	r2, r3
 801111a:	440b      	add	r3, r1
 801111c:	ed93 5b00 	vldr	d5, [r3]
 8011120:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011124:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011128:	ed92 6b00 	vldr	d6, [r2]
 801112c:	2d00      	cmp	r5, #0
 801112e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011132:	bfb8      	it	lt
 8011134:	eeb1 7b47 	vneglt.f64	d7, d7
 8011138:	e761      	b.n	8010ffe <atan+0x26>
 801113a:	bf00      	nop
 801113c:	f3af 8000 	nop.w
 8011140:	54442d18 	.word	0x54442d18
 8011144:	bff921fb 	.word	0xbff921fb
 8011148:	54442d18 	.word	0x54442d18
 801114c:	3ff921fb 	.word	0x3ff921fb
 8011150:	8800759c 	.word	0x8800759c
 8011154:	7e37e43c 	.word	0x7e37e43c
 8011158:	e322da11 	.word	0xe322da11
 801115c:	3f90ad3a 	.word	0x3f90ad3a
 8011160:	24760deb 	.word	0x24760deb
 8011164:	3fa97b4b 	.word	0x3fa97b4b
 8011168:	a0d03d51 	.word	0xa0d03d51
 801116c:	3fb10d66 	.word	0x3fb10d66
 8011170:	c54c206e 	.word	0xc54c206e
 8011174:	3fb745cd 	.word	0x3fb745cd
 8011178:	920083ff 	.word	0x920083ff
 801117c:	3fc24924 	.word	0x3fc24924
 8011180:	5555550d 	.word	0x5555550d
 8011184:	3fd55555 	.word	0x3fd55555
 8011188:	52defd9a 	.word	0x52defd9a
 801118c:	bfadde2d 	.word	0xbfadde2d
 8011190:	2c6a6c2f 	.word	0x2c6a6c2f
 8011194:	bfa2b444 	.word	0xbfa2b444
 8011198:	af749a6d 	.word	0xaf749a6d
 801119c:	bfb3b0f2 	.word	0xbfb3b0f2
 80111a0:	fe231671 	.word	0xfe231671
 80111a4:	bfbc71c6 	.word	0xbfbc71c6
 80111a8:	9998ebc4 	.word	0x9998ebc4
 80111ac:	bfc99999 	.word	0xbfc99999
 80111b0:	440fffff 	.word	0x440fffff
 80111b4:	7ff00000 	.word	0x7ff00000
 80111b8:	3fdbffff 	.word	0x3fdbffff
 80111bc:	3ff2ffff 	.word	0x3ff2ffff
 80111c0:	40037fff 	.word	0x40037fff
 80111c4:	08011898 	.word	0x08011898
 80111c8:	080118b8 	.word	0x080118b8

080111cc <fabs>:
 80111cc:	ec51 0b10 	vmov	r0, r1, d0
 80111d0:	ee10 2a10 	vmov	r2, s0
 80111d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111d8:	ec43 2b10 	vmov	d0, r2, r3
 80111dc:	4770      	bx	lr
	...

080111e0 <floor>:
 80111e0:	ee10 1a90 	vmov	r1, s1
 80111e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80111e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80111ec:	2b13      	cmp	r3, #19
 80111ee:	b530      	push	{r4, r5, lr}
 80111f0:	ee10 0a10 	vmov	r0, s0
 80111f4:	ee10 5a10 	vmov	r5, s0
 80111f8:	dc33      	bgt.n	8011262 <floor+0x82>
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	da17      	bge.n	801122e <floor+0x4e>
 80111fe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80112c0 <floor+0xe0>
 8011202:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011206:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120e:	dd09      	ble.n	8011224 <floor+0x44>
 8011210:	2900      	cmp	r1, #0
 8011212:	da50      	bge.n	80112b6 <floor+0xd6>
 8011214:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011218:	4a2b      	ldr	r2, [pc, #172]	; (80112c8 <floor+0xe8>)
 801121a:	4303      	orrs	r3, r0
 801121c:	2000      	movs	r0, #0
 801121e:	4283      	cmp	r3, r0
 8011220:	bf18      	it	ne
 8011222:	4611      	movne	r1, r2
 8011224:	460b      	mov	r3, r1
 8011226:	4602      	mov	r2, r0
 8011228:	ec43 2b10 	vmov	d0, r2, r3
 801122c:	e020      	b.n	8011270 <floor+0x90>
 801122e:	4a27      	ldr	r2, [pc, #156]	; (80112cc <floor+0xec>)
 8011230:	411a      	asrs	r2, r3
 8011232:	ea01 0402 	and.w	r4, r1, r2
 8011236:	4304      	orrs	r4, r0
 8011238:	d01a      	beq.n	8011270 <floor+0x90>
 801123a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80112c0 <floor+0xe0>
 801123e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011242:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124a:	ddeb      	ble.n	8011224 <floor+0x44>
 801124c:	2900      	cmp	r1, #0
 801124e:	bfbe      	ittt	lt
 8011250:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011254:	fa40 f303 	asrlt.w	r3, r0, r3
 8011258:	18c9      	addlt	r1, r1, r3
 801125a:	ea21 0102 	bic.w	r1, r1, r2
 801125e:	2000      	movs	r0, #0
 8011260:	e7e0      	b.n	8011224 <floor+0x44>
 8011262:	2b33      	cmp	r3, #51	; 0x33
 8011264:	dd05      	ble.n	8011272 <floor+0x92>
 8011266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801126a:	d101      	bne.n	8011270 <floor+0x90>
 801126c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011270:	bd30      	pop	{r4, r5, pc}
 8011272:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011276:	f04f 32ff 	mov.w	r2, #4294967295
 801127a:	40e2      	lsrs	r2, r4
 801127c:	4202      	tst	r2, r0
 801127e:	d0f7      	beq.n	8011270 <floor+0x90>
 8011280:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80112c0 <floor+0xe0>
 8011284:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011288:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011290:	ddc8      	ble.n	8011224 <floor+0x44>
 8011292:	2900      	cmp	r1, #0
 8011294:	da02      	bge.n	801129c <floor+0xbc>
 8011296:	2b14      	cmp	r3, #20
 8011298:	d103      	bne.n	80112a2 <floor+0xc2>
 801129a:	3101      	adds	r1, #1
 801129c:	ea20 0002 	bic.w	r0, r0, r2
 80112a0:	e7c0      	b.n	8011224 <floor+0x44>
 80112a2:	2401      	movs	r4, #1
 80112a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80112a8:	fa04 f303 	lsl.w	r3, r4, r3
 80112ac:	4418      	add	r0, r3
 80112ae:	42a8      	cmp	r0, r5
 80112b0:	bf38      	it	cc
 80112b2:	1909      	addcc	r1, r1, r4
 80112b4:	e7f2      	b.n	801129c <floor+0xbc>
 80112b6:	2000      	movs	r0, #0
 80112b8:	4601      	mov	r1, r0
 80112ba:	e7b3      	b.n	8011224 <floor+0x44>
 80112bc:	f3af 8000 	nop.w
 80112c0:	8800759c 	.word	0x8800759c
 80112c4:	7e37e43c 	.word	0x7e37e43c
 80112c8:	bff00000 	.word	0xbff00000
 80112cc:	000fffff 	.word	0x000fffff

080112d0 <matherr>:
 80112d0:	2000      	movs	r0, #0
 80112d2:	4770      	bx	lr
 80112d4:	0000      	movs	r0, r0
	...

080112d8 <scalbn>:
 80112d8:	b500      	push	{lr}
 80112da:	ed2d 8b02 	vpush	{d8}
 80112de:	b083      	sub	sp, #12
 80112e0:	ed8d 0b00 	vstr	d0, [sp]
 80112e4:	9b01      	ldr	r3, [sp, #4]
 80112e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80112ea:	b9a2      	cbnz	r2, 8011316 <scalbn+0x3e>
 80112ec:	9a00      	ldr	r2, [sp, #0]
 80112ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112f2:	4313      	orrs	r3, r2
 80112f4:	d03a      	beq.n	801136c <scalbn+0x94>
 80112f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80113b0 <scalbn+0xd8>
 80112fa:	4b35      	ldr	r3, [pc, #212]	; (80113d0 <scalbn+0xf8>)
 80112fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011300:	4298      	cmp	r0, r3
 8011302:	ed8d 7b00 	vstr	d7, [sp]
 8011306:	da11      	bge.n	801132c <scalbn+0x54>
 8011308:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80113b8 <scalbn+0xe0>
 801130c:	ed9d 6b00 	vldr	d6, [sp]
 8011310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011314:	e007      	b.n	8011326 <scalbn+0x4e>
 8011316:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801131a:	428a      	cmp	r2, r1
 801131c:	d10a      	bne.n	8011334 <scalbn+0x5c>
 801131e:	ed9d 7b00 	vldr	d7, [sp]
 8011322:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011326:	ed8d 7b00 	vstr	d7, [sp]
 801132a:	e01f      	b.n	801136c <scalbn+0x94>
 801132c:	9b01      	ldr	r3, [sp, #4]
 801132e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011332:	3a36      	subs	r2, #54	; 0x36
 8011334:	4402      	add	r2, r0
 8011336:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801133a:	428a      	cmp	r2, r1
 801133c:	dd0a      	ble.n	8011354 <scalbn+0x7c>
 801133e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80113c0 <scalbn+0xe8>
 8011342:	eeb0 0b48 	vmov.f64	d0, d8
 8011346:	ed9d 1b00 	vldr	d1, [sp]
 801134a:	f000 f843 	bl	80113d4 <copysign>
 801134e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8011352:	e7e8      	b.n	8011326 <scalbn+0x4e>
 8011354:	2a00      	cmp	r2, #0
 8011356:	dd10      	ble.n	801137a <scalbn+0xa2>
 8011358:	e9dd 0100 	ldrd	r0, r1, [sp]
 801135c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011360:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011364:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011368:	e9cd 0100 	strd	r0, r1, [sp]
 801136c:	ed9d 0b00 	vldr	d0, [sp]
 8011370:	b003      	add	sp, #12
 8011372:	ecbd 8b02 	vpop	{d8}
 8011376:	f85d fb04 	ldr.w	pc, [sp], #4
 801137a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801137e:	da06      	bge.n	801138e <scalbn+0xb6>
 8011380:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011384:	4298      	cmp	r0, r3
 8011386:	dcda      	bgt.n	801133e <scalbn+0x66>
 8011388:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80113b8 <scalbn+0xe0>
 801138c:	e7d9      	b.n	8011342 <scalbn+0x6a>
 801138e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011392:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011396:	3236      	adds	r2, #54	; 0x36
 8011398:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801139c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80113a0:	ec41 0b17 	vmov	d7, r0, r1
 80113a4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80113c8 <scalbn+0xf0>
 80113a8:	e7b2      	b.n	8011310 <scalbn+0x38>
 80113aa:	bf00      	nop
 80113ac:	f3af 8000 	nop.w
 80113b0:	00000000 	.word	0x00000000
 80113b4:	43500000 	.word	0x43500000
 80113b8:	c2f8f359 	.word	0xc2f8f359
 80113bc:	01a56e1f 	.word	0x01a56e1f
 80113c0:	8800759c 	.word	0x8800759c
 80113c4:	7e37e43c 	.word	0x7e37e43c
 80113c8:	00000000 	.word	0x00000000
 80113cc:	3c900000 	.word	0x3c900000
 80113d0:	ffff3cb0 	.word	0xffff3cb0

080113d4 <copysign>:
 80113d4:	ec51 0b10 	vmov	r0, r1, d0
 80113d8:	ee11 0a90 	vmov	r0, s3
 80113dc:	ee10 2a10 	vmov	r2, s0
 80113e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80113e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80113e8:	ea41 0300 	orr.w	r3, r1, r0
 80113ec:	ec43 2b10 	vmov	d0, r2, r3
 80113f0:	4770      	bx	lr
	...

080113f4 <_init>:
 80113f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113f6:	bf00      	nop
 80113f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113fa:	bc08      	pop	{r3}
 80113fc:	469e      	mov	lr, r3
 80113fe:	4770      	bx	lr

08011400 <_fini>:
 8011400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011402:	bf00      	nop
 8011404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011406:	bc08      	pop	{r3}
 8011408:	469e      	mov	lr, r3
 801140a:	4770      	bx	lr
