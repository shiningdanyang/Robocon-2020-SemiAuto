
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c974  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc34  0800cc34  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc34  0800cc34  0001cc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc3c  0800cc3c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc3c  0800cc3c  0001cc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc40  0800cc40  0001cc40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  24000000  0800cc44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  24000028  0800cc6c  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000890  0800cc6c  00020890  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a7a  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f43  00000000  00000000  00040ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001628  00000000  00000000  00043a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  00045040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038616  00000000  00000000  00046550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123c7  00000000  00000000  0007eb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173811  00000000  00000000  00090f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020473e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f88  00000000  00000000  002047bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cbf4 	.word	0x0800cbf4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	0800cbf4 	.word	0x0800cbf4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
void manualRobotDeinit(void);
void manualRobotInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <peripheralUART_Init+0x44>)
 800061e:	22aa      	movs	r2, #170	; 0xaa
 8000620:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <peripheralUART_Init+0x44>)
 8000624:	22aa      	movs	r2, #170	; 0xaa
 8000626:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <peripheralUART_Init+0x44>)
 800062a:	22aa      	movs	r2, #170	; 0xaa
 800062c:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <peripheralUART_Init+0x44>)
 8000630:	22aa      	movs	r2, #170	; 0xaa
 8000632:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <peripheralUART_Init+0x44>)
 8000636:	2200      	movs	r2, #0
 8000638:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	4908      	ldr	r1, [pc, #32]	; (8000660 <peripheralUART_Init+0x48>)
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <peripheralUART_Init+0x4c>)
 8000640:	f008 ffd4 	bl	80095ec <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <peripheralUART_Init+0x50>)
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <peripheralUART_Init+0x54>)
 800064a:	f009 f8a7 	bl	800979c <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800064e:	2202      	movs	r2, #2
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <peripheralUART_Init+0x58>)
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <peripheralUART_Init+0x5c>)
 8000654:	f009 f8a2 	bl	800979c <HAL_UART_Receive_DMA>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2400000c 	.word	0x2400000c
 8000660:	24000764 	.word	0x24000764
 8000664:	240006b0 	.word	0x240006b0
 8000668:	2400073c 	.word	0x2400073c
 800066c:	240001ac 	.word	0x240001ac
 8000670:	24000308 	.word	0x24000308
 8000674:	24000540 	.word	0x24000540

08000678 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_UART_TxCpltCallback+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d103      	bne.n	8000694 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_UART_TxCpltCallback+0x68>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 8000692:	e01c      	b.n	80006ce <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_UART_TxCpltCallback+0x6c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d103      	bne.n	80006a8 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_TxCpltCallback+0x70>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	e012      	b.n	80006ce <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_UART_TxCpltCallback+0x74>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d103      	bne.n	80006bc <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_UART_TxCpltCallback+0x78>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	e008      	b.n	80006ce <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_UART_TxCpltCallback+0x7c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d102      	bne.n	80006ce <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_UART_TxCpltCallback+0x80>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	24000540 	.word	0x24000540
 80006e0:	240002e0 	.word	0x240002e0
 80006e4:	240001ac 	.word	0x240001ac
 80006e8:	24000690 	.word	0x24000690
 80006ec:	240006b0 	.word	0x240006b0
 80006f0:	240005de 	.word	0x240005de
 80006f4:	24000080 	.word	0x24000080
 80006f8:	24000684 	.word	0x24000684

080006fc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <HAL_UART_RxCpltCallback+0x7c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	d103      	bne.n	8000718 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <HAL_UART_RxCpltCallback+0x80>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 8000716:	e02b      	b.n	8000770 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_UART_RxCpltCallback+0x84>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d103      	bne.n	800072c <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_UART_RxCpltCallback+0x88>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
}
 800072a:	e021      	b.n	8000770 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_UART_RxCpltCallback+0x8c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d112      	bne.n	800075e <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_UART_RxCpltCallback+0x90>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b74      	cmp	r3, #116	; 0x74
 800073e:	d105      	bne.n	800074c <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	2209      	movs	r2, #9
 8000744:	4912      	ldr	r1, [pc, #72]	; (8000790 <HAL_UART_RxCpltCallback+0x94>)
 8000746:	4810      	ldr	r0, [pc, #64]	; (8000788 <HAL_UART_RxCpltCallback+0x8c>)
 8000748:	f008 fe36 	bl	80093b8 <HAL_UART_Transmit>
		spinalCordRxCplt = 1;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_UART_RxCpltCallback+0x98>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	490d      	ldr	r1, [pc, #52]	; (800078c <HAL_UART_RxCpltCallback+0x90>)
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <HAL_UART_RxCpltCallback+0x8c>)
 8000758:	f008 ff48 	bl	80095ec <HAL_UART_Receive_IT>
}
 800075c:	e008      	b.n	8000770 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == manualRobot.Instance)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_UART_RxCpltCallback+0x9c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	d102      	bne.n	8000770 <HAL_UART_RxCpltCallback+0x74>
		manualRobotRxCplt = 1;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_UART_RxCpltCallback+0xa0>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	24000540 	.word	0x24000540
 800077c:	24000050 	.word	0x24000050
 8000780:	240001ac 	.word	0x240001ac
 8000784:	24000690 	.word	0x24000690
 8000788:	240006b0 	.word	0x240006b0
 800078c:	24000764 	.word	0x24000764
 8000790:	2400000c 	.word	0x2400000c
 8000794:	24000830 	.word	0x24000830
 8000798:	24000080 	.word	0x24000080
 800079c:	2400043d 	.word	0x2400043d

080007a0 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <compassReset+0x24>)
 80007a6:	2261      	movs	r2, #97	; 0x61
 80007a8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	4905      	ldr	r1, [pc, #20]	; (80007c4 <compassReset+0x24>)
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <compassReset+0x28>)
 80007b0:	f008 fe98 	bl	80094e4 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 80007b4:	f000 f818 	bl	80007e8 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <compassReset+0x24>)
 80007ba:	227a      	movs	r2, #122	; 0x7a
 80007bc:	701a      	strb	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000000 	.word	0x24000000
 80007c8:	24000540 	.word	0x24000540

080007cc <compassRequest>:
void compassRequest(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4903      	ldr	r1, [pc, #12]	; (80007e0 <compassRequest+0x14>)
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <compassRequest+0x18>)
 80007d6:	f008 fe85 	bl	80094e4 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	24000000 	.word	0x24000000
 80007e4:	24000540 	.word	0x24000540

080007e8 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 80007ec:	bf00      	nop
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <wait4CompassTx+0x20>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0fb      	beq.n	80007ee <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <wait4CompassTx+0x20>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	240002e0 	.word	0x240002e0

0800080c <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 8000810:	2209      	movs	r2, #9
 8000812:	4904      	ldr	r1, [pc, #16]	; (8000824 <spinalCordTrans+0x18>)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <spinalCordTrans+0x1c>)
 8000816:	f008 fe65 	bl	80094e4 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 800081a:	f000 f807 	bl	800082c <wait4SpinalCordTx>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2400000c 	.word	0x2400000c
 8000828:	240006b0 	.word	0x240006b0

0800082c <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt == 0)
 8000830:	bf00      	nop
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <wait4SpinalCordTx+0x20>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0fb      	beq.n	8000832 <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt = 0;
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <wait4SpinalCordTx+0x20>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	240005de 	.word	0x240005de

08000850 <peripheralADC_Init>:
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <controlMotor1>:
double PIDroL(int _roLValue, int _roLSetpoint);


#ifdef SPINAL_CORD_MODE_ONEWAY
void controlMotor1(int _speed)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bfb8      	it	lt
 800086e:	425b      	neglt	r3, r3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <controlMotor1+0x48>)
 8000874:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db07      	blt.n	800088c <controlMotor1+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <controlMotor1+0x48>)
 800087e:	7a1b      	ldrb	r3, [r3, #8]
 8000880:	f023 0301 	bic.w	r3, r3, #1
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <controlMotor1+0x48>)
 8000888:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
}
 800088a:	e006      	b.n	800089a <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <controlMotor1+0x48>)
 800088e:	7a1b      	ldrb	r3, [r3, #8]
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <controlMotor1+0x48>)
 8000898:	721a      	strb	r2, [r3, #8]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	2400000c 	.word	0x2400000c

080008ac <controlMotor2>:
void controlMotor2(int _speed)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bfb8      	it	lt
 80008ba:	425b      	neglt	r3, r3
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <controlMotor2+0x48>)
 80008c0:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db07      	blt.n	80008d8 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <controlMotor2+0x48>)
 80008ca:	7a1b      	ldrb	r3, [r3, #8]
 80008cc:	f023 0302 	bic.w	r3, r3, #2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <controlMotor2+0x48>)
 80008d4:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
}
 80008d6:	e006      	b.n	80008e6 <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <controlMotor2+0x48>)
 80008da:	7a1b      	ldrb	r3, [r3, #8]
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <controlMotor2+0x48>)
 80008e4:	721a      	strb	r2, [r3, #8]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	2400000c 	.word	0x2400000c

080008f8 <controlMotor3>:
void controlMotor3(int _speed)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	bfb8      	it	lt
 8000906:	425b      	neglt	r3, r3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <controlMotor3+0x48>)
 800090c:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db07      	blt.n	8000924 <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <controlMotor3+0x48>)
 8000916:	7a1b      	ldrb	r3, [r3, #8]
 8000918:	f023 0304 	bic.w	r3, r3, #4
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <controlMotor3+0x48>)
 8000920:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
}
 8000922:	e006      	b.n	8000932 <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <controlMotor3+0x48>)
 8000926:	7a1b      	ldrb	r3, [r3, #8]
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <controlMotor3+0x48>)
 8000930:	721a      	strb	r2, [r3, #8]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2400000c 	.word	0x2400000c

08000944 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <controlMotor4+0x48>)
 8000958:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db07      	blt.n	8000970 <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <controlMotor4+0x48>)
 8000962:	7a1b      	ldrb	r3, [r3, #8]
 8000964:	f023 0308 	bic.w	r3, r3, #8
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <controlMotor4+0x48>)
 800096c:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
}
 800096e:	e006      	b.n	800097e <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <controlMotor4+0x48>)
 8000972:	7a1b      	ldrb	r3, [r3, #8]
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <controlMotor4+0x48>)
 800097c:	721a      	strb	r2, [r3, #8]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	2400000c 	.word	0x2400000c

08000990 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8000994:	2064      	movs	r0, #100	; 0x64
 8000996:	f7ff ff63 	bl	8000860 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 800099a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800099e:	f7ff ff85 	bl	80008ac <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 80009a2:	2064      	movs	r0, #100	; 0x64
 80009a4:	f7ff ffa8 	bl	80008f8 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 80009a8:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80009ac:	f7ff ffca 	bl	8000944 <controlMotor4>
	spinalCordTrans();
 80009b0:	f7ff ff2c 	bl	800080c <spinalCordTrans>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <positionControl_Init+0x10>)
 80009be:	f008 f88b 	bl	8008ad8 <HAL_TIM_Base_Start_IT>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000834 	.word	0x24000834

080009cc <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d16f      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0xf4>
	{
		if(legEn == 1)
 80009e0:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x100>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d16b      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0xf4>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 80009e8:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11f      	bne.n	8000a30 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f6:	4837      	ldr	r0, [pc, #220]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80009f8:	f005 f9c4 	bl	8005d84 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80009fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a00:	4834      	ldr	r0, [pc, #208]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a02:	f005 f9d8 	bl	8005db6 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000a06:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a32      	ldr	r2, [pc, #200]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a0e:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000a10:	4b32      	ldr	r3, [pc, #200]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a31      	ldr	r2, [pc, #196]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a18:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_INIT_SHOOT)
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000a22:	db05      	blt.n	8000a30 <HAL_TIM_PeriodElapsedCallback+0x64>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d11f      	bne.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0xac>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình chân legDir để lùi
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3e:	4825      	ldr	r0, [pc, #148]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a40:	f005 f9a0 	bl	8005d84 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a48:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a4a:	f005 f9b4 	bl	8005db6 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a56:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a60:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000a6a:	db05      	blt.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0xac>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d11f      	bne.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0xf4>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a88:	f005 f97c 	bl	8005d84 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a90:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a92:	f005 f990 	bl	8005db6 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a9e:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000aa8:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000ab2:	db05      	blt.n	8000ac0 <HAL_TIM_PeriodElapsedCallback+0xf4>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000834 	.word	0x24000834
 8000acc:	240005d8 	.word	0x240005d8
 8000ad0:	24000744 	.word	0x24000744
 8000ad4:	58020c00 	.word	0x58020c00
 8000ad8:	240005d0 	.word	0x240005d0
 8000adc:	24000694 	.word	0x24000694

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f001 fa70 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f830 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 fc68 	bl	80013c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f000 fc16 	bl	8001320 <MX_DMA_Init>
  MX_ADC1_Init();
 8000af4:	f000 f8e0 	bl	8000cb8 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000af8:	f000 f9ba 	bl	8000e70 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000afc:	f000 fb2c 	bl	8001158 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b00:	f000 fb76 	bl	80011f0 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000b04:	f000 fa18 	bl	8000f38 <MX_TIM7_Init>
  MX_TIM12_Init();
 8000b08:	f000 fa4e 	bl	8000fa8 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000b0c:	f000 fa86 	bl	800101c <MX_TIM15_Init>
  MX_UART7_Init();
 8000b10:	f000 fad6 	bl	80010c0 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000b14:	f000 fbb8 	bl	8001288 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8000b18:	f000 f946 	bl	8000da8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000b1c:	f7ff fd7c 	bl	8000618 <peripheralUART_Init>
  peripheralADC_Init();
 8000b20:	f7ff fe96 	bl	8000850 <peripheralADC_Init>
  delayUs_Init();
 8000b24:	f7ff fd58 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000b28:	f7ff ff46 	bl	80009b8 <positionControl_Init>
  brake();
 8000b2c:	f7ff ff30 	bl	8000990 <brake>
  compassReset();
 8000b30:	f7ff fe36 	bl	80007a0 <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <main+0x68>)
 8000b3a:	f005 f923 	bl	8005d84 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b42:	f001 fad3 	bl	80020ec <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <main+0x66>
 8000b48:	58020400 	.word	0x58020400

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0cc      	sub	sp, #304	; 0x130
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b56:	224c      	movs	r2, #76	; 0x4c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f00c f842 	bl	800cbe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b64:	2220      	movs	r2, #32
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f00c f83b 	bl	800cbe4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4618      	mov	r0, r3
 8000b74:	23bc      	movs	r3, #188	; 0xbc
 8000b76:	461a      	mov	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f00c f833 	bl	800cbe4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f005 f934 	bl	8005dec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	4b49      	ldr	r3, [pc, #292]	; (8000cb0 <SystemClock_Config+0x164>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a48      	ldr	r2, [pc, #288]	; (8000cb0 <SystemClock_Config+0x164>)
 8000b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b46      	ldr	r3, [pc, #280]	; (8000cb0 <SystemClock_Config+0x164>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	4b44      	ldr	r3, [pc, #272]	; (8000cb4 <SystemClock_Config+0x168>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <SystemClock_Config+0x168>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bae:	4b41      	ldr	r3, [pc, #260]	; (8000cb4 <SystemClock_Config+0x168>)
 8000bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb2:	f003 0201 	and.w	r2, r3, #1
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bbe:	bf00      	nop
 8000bc0:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <SystemClock_Config+0x164>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bcc:	d1f8      	bne.n	8000bc0 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bda:	2340      	movs	r3, #64	; 0x40
 8000bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bf2:	233c      	movs	r3, #60	; 0x3c
 8000bf4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f005 f91d 	bl	8005e60 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c2c:	f000 fcde 	bl	80015ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	233f      	movs	r3, #63	; 0x3f
 8000c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c36:	2303      	movs	r3, #3
 8000c38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c42:	2308      	movs	r3, #8
 8000c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c48:	2340      	movs	r3, #64	; 0x40
 8000c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c4e:	2340      	movs	r3, #64	; 0x40
 8000c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c5c:	2340      	movs	r3, #64	; 0x40
 8000c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c66:	2104      	movs	r1, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 fcd1 	bl	8006610 <HAL_RCC_ClockConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000c74:	f000 fcba 	bl	80015ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	2200      	movs	r2, #0
 8000c86:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	4618      	mov	r0, r3
 8000c96:	f006 f83f 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000ca0:	f000 fca4 	bl	80015ec <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	58024800 	.word	0x58024800
 8000cb4:	58000400 	.word	0x58000400

08000cb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000cde:	4a30      	ldr	r2, [pc, #192]	; (8000da0 <MX_ADC1_Init+0xe8>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000ce4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ce8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000cec:	2208      	movs	r2, #8
 8000cee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d3c:	f001 fb9a 	bl	8002474 <HAL_ADC_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d46:	f000 fc51 	bl	80015ec <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d56:	f002 f95f 	bl	8003018 <HAL_ADCEx_MultiModeConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d60:	f000 fc44 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_ADC1_Init+0xec>)
 8000d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d68:	2306      	movs	r3, #6
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d70:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d74:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d76:	2304      	movs	r3, #4
 8000d78:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_ADC1_Init+0xe4>)
 8000d84:	f001 fd16 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000d8e:	f000 fc2d 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	240003d8 	.word	0x240003d8
 8000da0:	40022000 	.word	0x40022000
 8000da4:	3ef08000 	.word	0x3ef08000

08000da8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000dc2:	4a29      	ldr	r2, [pc, #164]	; (8000e68 <MX_ADC2_Init+0xc0>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dc6:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000dc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dcc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e1e:	4811      	ldr	r0, [pc, #68]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000e20:	f001 fb28 	bl	8002474 <HAL_ADC_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000e2a:	f000 fbdf 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000e30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e32:	2306      	movs	r3, #6
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e3e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e40:	2304      	movs	r3, #4
 8000e42:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_ADC2_Init+0xbc>)
 8000e4e:	f001 fcb1 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000e58:	f000 fbc8 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2400023c 	.word	0x2400023c
 8000e68:	40022100 	.word	0x40022100
 8000e6c:	2a000400 	.word	0x2a000400

08000e70 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000e8a:	4a29      	ldr	r2, [pc, #164]	; (8000f30 <MX_ADC3_Init+0xc0>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000e90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000e98:	2208      	movs	r2, #8
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ee6:	4811      	ldr	r0, [pc, #68]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000ee8:	f001 fac4 	bl	8002474 <HAL_ADC_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ef2:	f000 fb7b 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000efa:	2306      	movs	r3, #6
 8000efc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f02:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_ADC3_Init+0xbc>)
 8000f16:	f001 fc4d 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000f20:	f000 fb64 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	24000444 	.word	0x24000444
 8000f30:	58026000 	.word	0x58026000
 8000f34:	04300002 	.word	0x04300002

08000f38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_TIM7_Init+0x68>)
 8000f4a:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <MX_TIM7_Init+0x6c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_TIM7_Init+0x68>)
 8000f50:	f640 125f 	movw	r2, #2399	; 0x95f
 8000f54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_TIM7_Init+0x68>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_TIM7_Init+0x68>)
 8000f5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f62:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_TIM7_Init+0x68>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_TIM7_Init+0x68>)
 8000f6c:	f007 fd88 	bl	8008a80 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000f76:	f000 fb39 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_TIM7_Init+0x68>)
 8000f88:	f008 f920 	bl	80091cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000f92:	f000 fb2b 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	24000834 	.word	0x24000834
 8000fa4:	40001400 	.word	0x40001400

08000fa8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_TIM12_Init+0x6c>)
 8000fbc:	4a16      	ldr	r2, [pc, #88]	; (8001018 <MX_TIM12_Init+0x70>)
 8000fbe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_TIM12_Init+0x6c>)
 8000fc2:	f640 125f 	movw	r2, #2399	; 0x95f
 8000fc6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_TIM12_Init+0x6c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_TIM12_Init+0x6c>)
 8000fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_TIM12_Init+0x6c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_TIM12_Init+0x6c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_TIM12_Init+0x6c>)
 8000fe4:	f007 fd4c 	bl	8008a80 <HAL_TIM_Base_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8000fee:	f000 fafd 	bl	80015ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_TIM12_Init+0x6c>)
 8000ffe:	f007 feb5 	bl	8008d6c <HAL_TIM_ConfigClockSource>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8001008:	f000 faf0 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	240007f0 	.word	0x240007f0
 8001018:	40001800 	.word	0x40001800

0800101c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_TIM15_Init+0x9c>)
 800103c:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <MX_TIM15_Init+0xa0>)
 800103e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM15_Init+0x9c>)
 8001042:	f640 125f 	movw	r2, #2399	; 0x95f
 8001046:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_TIM15_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_TIM15_Init+0x9c>)
 8001050:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001054:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_TIM15_Init+0x9c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_TIM15_Init+0x9c>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM15_Init+0x9c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_TIM15_Init+0x9c>)
 800106a:	f007 fd09 	bl	8008a80 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001074:	f000 faba 	bl	80015ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM15_Init+0x9c>)
 8001086:	f007 fe71 	bl	8008d6c <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001090:	f000 faac 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM15_Init+0x9c>)
 80010a2:	f008 f893 	bl	80091cc <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80010ac:	f000 fa9e 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	240002a0 	.word	0x240002a0
 80010bc:	40014000 	.word	0x40014000

080010c0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_UART7_Init+0x90>)
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <MX_UART7_Init+0x94>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_UART7_Init+0x90>)
 80010cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010d0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_UART7_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_UART7_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_UART7_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_UART7_Init+0x90>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_UART7_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_UART7_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_UART7_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_UART7_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_UART7_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_UART7_Init+0x90>)
 800110a:	f008 f905 	bl	8009318 <HAL_UART_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001114:	f000 fa6a 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_UART7_Init+0x90>)
 800111c:	f00b fc59 	bl	800c9d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001126:	f000 fa61 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <MX_UART7_Init+0x90>)
 800112e:	f00b fc8e 	bl	800ca4e <HAL_UARTEx_SetRxFifoThreshold>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001138:	f000 fa58 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_UART7_Init+0x90>)
 800113e:	f00b fc0f 	bl	800c960 <HAL_UARTEx_DisableFifoMode>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001148:	f000 fa50 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24000080 	.word	0x24000080
 8001154:	40007800 	.word	0x40007800

08001158 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <MX_USART1_UART_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 80011a2:	f008 f8b9 	bl	8009318 <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011ac:	f000 fa1e 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 80011b4:	f00b fc0d 	bl	800c9d2 <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011be:	f000 fa15 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 80011c6:	f00b fc42 	bl	800ca4e <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f000 fa0c 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_USART1_UART_Init+0x90>)
 80011d6:	f00b fbc3 	bl	800c960 <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 fa04 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	24000540 	.word	0x24000540
 80011ec:	40011000 	.word	0x40011000

080011f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART3_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_USART3_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART3_UART_Init+0x90>)
 80011fc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001200:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART3_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART3_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART3_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART3_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART3_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART3_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART3_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART3_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART3_UART_Init+0x90>)
 800123a:	f008 f86d 	bl	8009318 <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f9d2 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART3_UART_Init+0x90>)
 800124c:	f00b fbc1 	bl	800c9d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 f9c9 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART3_UART_Init+0x90>)
 800125e:	f00b fbf6 	bl	800ca4e <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 f9c0 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART3_UART_Init+0x90>)
 800126e:	f00b fb77 	bl	800c960 <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f9b8 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	240001ac 	.word	0x240001ac
 8001284:	40004800 	.word	0x40004800

08001288 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_USART6_UART_Init+0x90>)
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <MX_USART6_UART_Init+0x94>)
 8001290:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_USART6_UART_Init+0x90>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_USART6_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012d2:	f008 f821 	bl	8009318 <HAL_UART_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80012dc:	f000 f986 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012e4:	f00b fb75 	bl	800c9d2 <HAL_UARTEx_SetTxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f000 f97d 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <MX_USART6_UART_Init+0x90>)
 80012f6:	f00b fbaa 	bl	800ca4e <HAL_UARTEx_SetRxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001300:	f000 f974 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_USART6_UART_Init+0x90>)
 8001306:	f00b fb2b 	bl	800c960 <HAL_UARTEx_DisableFifoMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 f96c 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	240006b0 	.word	0x240006b0
 800131c:	40011400 	.word	0x40011400

08001320 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_DMA_Init+0x9c>)
 8001328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800132c:	4a23      	ldr	r2, [pc, #140]	; (80013bc <MX_DMA_Init+0x9c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_DMA_Init+0x9c>)
 8001338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_DMA_Init+0x9c>)
 8001346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_DMA_Init+0x9c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_DMA_Init+0x9c>)
 8001356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	200b      	movs	r0, #11
 8001368:	f002 f80b 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800136c:	200b      	movs	r0, #11
 800136e:	f002 f822 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	200c      	movs	r0, #12
 8001378:	f002 f803 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800137c:	200c      	movs	r0, #12
 800137e:	f002 f81a 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	200d      	movs	r0, #13
 8001388:	f001 fffb 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800138c:	200d      	movs	r0, #13
 800138e:	f002 f812 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	200e      	movs	r0, #14
 8001398:	f001 fff3 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800139c:	200e      	movs	r0, #14
 800139e:	f002 f80a 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	203a      	movs	r0, #58	; 0x3a
 80013a8:	f001 ffeb 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013ac:	203a      	movs	r0, #58	; 0x3a
 80013ae:	f002 f802 	bl	80033b6 <HAL_NVIC_EnableIRQ>

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	58024400 	.word	0x58024400

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	4b7f      	ldr	r3, [pc, #508]	; (80015d4 <MX_GPIO_Init+0x214>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	4a7d      	ldr	r2, [pc, #500]	; (80015d4 <MX_GPIO_Init+0x214>)
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e6:	4b7b      	ldr	r3, [pc, #492]	; (80015d4 <MX_GPIO_Init+0x214>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	4b77      	ldr	r3, [pc, #476]	; (80015d4 <MX_GPIO_Init+0x214>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	4a76      	ldr	r2, [pc, #472]	; (80015d4 <MX_GPIO_Init+0x214>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001404:	4b73      	ldr	r3, [pc, #460]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a6e      	ldr	r2, [pc, #440]	; (80015d4 <MX_GPIO_Init+0x214>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	4a67      	ldr	r2, [pc, #412]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001440:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800144e:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	4a5f      	ldr	r2, [pc, #380]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800146c:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <MX_GPIO_Init+0x214>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001474:	f043 0310 	orr.w	r3, r3, #16
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <MX_GPIO_Init+0x214>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b52      	ldr	r3, [pc, #328]	; (80015d4 <MX_GPIO_Init+0x214>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a50      	ldr	r2, [pc, #320]	; (80015d4 <MX_GPIO_Init+0x214>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <MX_GPIO_Init+0x214>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f240 7104 	movw	r1, #1796	; 0x704
 80014ae:	484a      	ldr	r0, [pc, #296]	; (80015d8 <MX_GPIO_Init+0x218>)
 80014b0:	f004 fc68 	bl	8005d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80014b4:	2200      	movs	r2, #0
 80014b6:	f242 0167 	movw	r1, #8295	; 0x2067
 80014ba:	4848      	ldr	r0, [pc, #288]	; (80015dc <MX_GPIO_Init+0x21c>)
 80014bc:	f004 fc62 	bl	8005d84 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 80014c0:	2200      	movs	r2, #0
 80014c2:	f643 610d 	movw	r1, #15885	; 0x3e0d
 80014c6:	4846      	ldr	r0, [pc, #280]	; (80015e0 <MX_GPIO_Init+0x220>)
 80014c8:	f004 fc5c 	bl	8005d84 <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2182      	movs	r1, #130	; 0x82
 80014d0:	4844      	ldr	r0, [pc, #272]	; (80015e4 <MX_GPIO_Init+0x224>)
 80014d2:	f004 fc57 	bl	8005d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80014dc:	4842      	ldr	r0, [pc, #264]	; (80015e8 <MX_GPIO_Init+0x228>)
 80014de:	f004 fc51 	bl	8005d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 80014e2:	f240 7304 	movw	r3, #1796	; 0x704
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4837      	ldr	r0, [pc, #220]	; (80015d8 <MX_GPIO_Init+0x218>)
 80014fc:	f004 fa92 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001500:	f242 0367 	movw	r3, #8295	; 0x2067
 8001504:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4830      	ldr	r0, [pc, #192]	; (80015dc <MX_GPIO_Init+0x21c>)
 800151a:	f004 fa83 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800151e:	230d      	movs	r3, #13
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001526:	2301      	movs	r3, #1
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	482a      	ldr	r0, [pc, #168]	; (80015e0 <MX_GPIO_Init+0x220>)
 8001536:	f004 fa75 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4824      	ldr	r0, [pc, #144]	; (80015e4 <MX_GPIO_Init+0x224>)
 8001552:	f004 fa67 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 8001556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	481e      	ldr	r0, [pc, #120]	; (80015e8 <MX_GPIO_Init+0x228>)
 8001570:	f004 fa58 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4816      	ldr	r0, [pc, #88]	; (80015e8 <MX_GPIO_Init+0x228>)
 800158e:	f004 fa49 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001592:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001596:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <MX_GPIO_Init+0x220>)
 80015ac:	f004 fa3a 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <MX_GPIO_Init+0x224>)
 80015c8:	f004 fa2c 	bl	8005a24 <HAL_GPIO_Init>

}
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	; 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020000 	.word	0x58020000
 80015dc:	58020400 	.word	0x58020400
 80015e0:	58021800 	.word	0x58021800
 80015e4:	58021000 	.word	0x58021000
 80015e8:	58020c00 	.word	0x58020c00

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_MspInit+0x30>)
 8001604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001608:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_MspInit+0x30>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_MspInit+0x30>)
 8001614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	58024400 	.word	0x58024400

08001630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a96      	ldr	r2, [pc, #600]	; (80018a8 <HAL_ADC_MspInit+0x278>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d163      	bne.n	800171a <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001652:	4b96      	ldr	r3, [pc, #600]	; (80018ac <HAL_ADC_MspInit+0x27c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	4a94      	ldr	r2, [pc, #592]	; (80018ac <HAL_ADC_MspInit+0x27c>)
 800165a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800165c:	4b93      	ldr	r3, [pc, #588]	; (80018ac <HAL_ADC_MspInit+0x27c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d10e      	bne.n	8001682 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001664:	4b92      	ldr	r3, [pc, #584]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001666:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800166a:	4a91      	ldr	r2, [pc, #580]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 800166c:	f043 0320 	orr.w	r3, r3, #32
 8001670:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001674:	4b8e      	ldr	r3, [pc, #568]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001676:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b8b      	ldr	r3, [pc, #556]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001688:	4a89      	ldr	r2, [pc, #548]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001692:	4b87      	ldr	r3, [pc, #540]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollLeft_Pin;
 80016a0:	2308      	movs	r3, #8
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a4:	2303      	movs	r3, #3
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4880      	ldr	r0, [pc, #512]	; (80018b4 <HAL_ADC_MspInit+0x284>)
 80016b4:	f004 f9b6 	bl	8005a24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80016b8:	4b7f      	ldr	r3, [pc, #508]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016ba:	4a80      	ldr	r2, [pc, #512]	; (80018bc <HAL_ADC_MspInit+0x28c>)
 80016bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016be:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016c0:	2209      	movs	r2, #9
 80016c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ca:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016d0:	4b79      	ldr	r3, [pc, #484]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016d8:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016e0:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016e8:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016f0:	4b71      	ldr	r3, [pc, #452]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f6:	4b70      	ldr	r3, [pc, #448]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016fc:	486e      	ldr	r0, [pc, #440]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 80016fe:	f001 fe75 	bl	80033ec <HAL_DMA_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8001708:	f7ff ff70 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a6a      	ldr	r2, [pc, #424]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 8001710:	64da      	str	r2, [r3, #76]	; 0x4c
 8001712:	4a69      	ldr	r2, [pc, #420]	; (80018b8 <HAL_ADC_MspInit+0x288>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001718:	e0c1      	b.n	800189e <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a68      	ldr	r2, [pc, #416]	; (80018c0 <HAL_ADC_MspInit+0x290>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d163      	bne.n	80017ec <HAL_ADC_MspInit+0x1bc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001724:	4b61      	ldr	r3, [pc, #388]	; (80018ac <HAL_ADC_MspInit+0x27c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a60      	ldr	r2, [pc, #384]	; (80018ac <HAL_ADC_MspInit+0x27c>)
 800172c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800172e:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_ADC_MspInit+0x27c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10e      	bne.n	8001754 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001736:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800173c:	4a5c      	ldr	r2, [pc, #368]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 800173e:	f043 0320 	orr.w	r3, r3, #32
 8001742:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001746:	4b5a      	ldr	r3, [pc, #360]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175a:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001764:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RollRigt_Pin;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001776:	2303      	movs	r3, #3
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	484f      	ldr	r0, [pc, #316]	; (80018c4 <HAL_ADC_MspInit+0x294>)
 8001786:	f004 f94d 	bl	8005a24 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800178a:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_ADC_MspInit+0x29c>)
 800178e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001790:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 8001792:	220a      	movs	r2, #10
 8001794:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800179c:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017aa:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017b2:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80017c2:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c8:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017ce:	483e      	ldr	r0, [pc, #248]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017d0:	f001 fe0c 	bl	80033ec <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 80017da:	f7ff ff07 	bl	80015ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a39      	ldr	r2, [pc, #228]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017e4:	4a38      	ldr	r2, [pc, #224]	; (80018c8 <HAL_ADC_MspInit+0x298>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017ea:	e058      	b.n	800189e <HAL_ADC_MspInit+0x26e>
  else if(hadc->Instance==ADC3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a37      	ldr	r2, [pc, #220]	; (80018d0 <HAL_ADC_MspInit+0x2a0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d153      	bne.n	800189e <HAL_ADC_MspInit+0x26e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80017f6:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fc:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181a:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_ADC_MspInit+0x280>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001832:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001836:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800183a:	f000 fc85 	bl	8002148 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 800183e:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001840:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <HAL_ADC_MspInit+0x2a8>)
 8001842:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001846:	2273      	movs	r2, #115	; 0x73
 8001848:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001864:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001868:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001874:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001884:	f001 fdb2 	bl	80033ec <HAL_DMA_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_ADC_MspInit+0x262>
      Error_Handler();
 800188e:	f7ff fead 	bl	80015ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 8001896:	64da      	str	r2, [r3, #76]	; 0x4c
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_ADC_MspInit+0x2a4>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800189e:	bf00      	nop
 80018a0:	3738      	adds	r7, #56	; 0x38
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000
 80018ac:	24000048 	.word	0x24000048
 80018b0:	58024400 	.word	0x58024400
 80018b4:	58020000 	.word	0x58020000
 80018b8:	240005e4 	.word	0x240005e4
 80018bc:	40020010 	.word	0x40020010
 80018c0:	40022100 	.word	0x40022100
 80018c4:	58020800 	.word	0x58020800
 80018c8:	24000770 	.word	0x24000770
 80018cc:	40020028 	.word	0x40020028
 80018d0:	58026000 	.word	0x58026000
 80018d4:	24000328 	.word	0x24000328
 80018d8:	40020040 	.word	0x40020040

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_TIM_Base_MspInit+0xbc>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d117      	bne.n	800191e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 80018f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 8001900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	2037      	movs	r0, #55	; 0x37
 8001912:	f001 fd36 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001916:	2037      	movs	r0, #55	; 0x37
 8001918:	f001 fd4d 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800191c:	e038      	b.n	8001990 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d117      	bne.n	8001958 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 800192a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800192e:	4a1b      	ldr	r2, [pc, #108]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 8001930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001934:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 800193a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	202b      	movs	r0, #43	; 0x2b
 800194c:	f001 fd19 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001950:	202b      	movs	r0, #43	; 0x2b
 8001952:	f001 fd30 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 8001956:	e01b      	b.n	8001990 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_TIM_Base_MspInit+0xc8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d116      	bne.n	8001990 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 8001964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001968:	4a0c      	ldr	r2, [pc, #48]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 8001974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2074      	movs	r0, #116	; 0x74
 8001986:	f001 fcfc 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800198a:	2074      	movs	r0, #116	; 0x74
 800198c:	f001 fd13 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40001400 	.word	0x40001400
 800199c:	58024400 	.word	0x58024400
 80019a0:	40001800 	.word	0x40001800
 80019a4:	40014000 	.word	0x40014000

080019a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b090      	sub	sp, #64	; 0x40
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4aa3      	ldr	r2, [pc, #652]	; (8001c54 <HAL_UART_MspInit+0x2ac>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d136      	bne.n	8001a38 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80019ca:	4ba3      	ldr	r3, [pc, #652]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 80019cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d0:	4aa1      	ldr	r2, [pc, #644]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 80019d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019da:	4b9f      	ldr	r3, [pc, #636]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 80019dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e8:	4b9b      	ldr	r3, [pc, #620]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	4a9a      	ldr	r2, [pc, #616]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 80019f0:	f043 0320 	orr.w	r3, r3, #32
 80019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f8:	4b97      	ldr	r3, [pc, #604]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001a16:	2307      	movs	r3, #7
 8001a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	488e      	ldr	r0, [pc, #568]	; (8001c5c <HAL_UART_MspInit+0x2b4>)
 8001a22:	f003 ffff 	bl	8005a24 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2104      	movs	r1, #4
 8001a2a:	2052      	movs	r0, #82	; 0x52
 8001a2c:	f001 fca9 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001a30:	2052      	movs	r0, #82	; 0x52
 8001a32:	f001 fcc0 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a36:	e108      	b.n	8001c4a <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a88      	ldr	r2, [pc, #544]	; (8001c60 <HAL_UART_MspInit+0x2b8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d165      	bne.n	8001b0e <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a42:	4b85      	ldr	r3, [pc, #532]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a48:	4a83      	ldr	r2, [pc, #524]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a52:	4b81      	ldr	r3, [pc, #516]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b7d      	ldr	r3, [pc, #500]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	4a7c      	ldr	r2, [pc, #496]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001a7e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a90:	2304      	movs	r3, #4
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4872      	ldr	r0, [pc, #456]	; (8001c64 <HAL_UART_MspInit+0x2bc>)
 8001a9c:	f003 ffc2 	bl	8005a24 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001aa0:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001aa2:	4a72      	ldr	r2, [pc, #456]	; (8001c6c <HAL_UART_MspInit+0x2c4>)
 8001aa4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001aa6:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001aa8:	2229      	movs	r2, #41	; 0x29
 8001aaa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aac:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001abe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac0:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac6:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ad4:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ae0:	4861      	ldr	r0, [pc, #388]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001ae2:	f001 fc83 	bl	80033ec <HAL_DMA_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001aec:	f7ff fd7e 	bl	80015ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001af4:	679a      	str	r2, [r3, #120]	; 0x78
 8001af6:	4a5c      	ldr	r2, [pc, #368]	; (8001c68 <HAL_UART_MspInit+0x2c0>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	2025      	movs	r0, #37	; 0x25
 8001b02:	f001 fc3e 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b06:	2025      	movs	r0, #37	; 0x25
 8001b08:	f001 fc55 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 8001b0c:	e09d      	b.n	8001c4a <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a57      	ldr	r2, [pc, #348]	; (8001c70 <HAL_UART_MspInit+0x2c8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d15d      	bne.n	8001bd4 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1e:	4a4e      	ldr	r2, [pc, #312]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b28:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001b54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b66:	2307      	movs	r3, #7
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	483c      	ldr	r0, [pc, #240]	; (8001c64 <HAL_UART_MspInit+0x2bc>)
 8001b72:	f003 ff57 	bl	8005a24 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001b78:	4a3f      	ldr	r2, [pc, #252]	; (8001c78 <HAL_UART_MspInit+0x2d0>)
 8001b7a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001b7e:	222d      	movs	r2, #45	; 0x2d
 8001b80:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b82:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b94:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001baa:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001bb6:	482f      	ldr	r0, [pc, #188]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001bb8:	f001 fc18 	bl	80033ec <HAL_DMA_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001bc2:	f7ff fd13 	bl	80015ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001bca:	679a      	str	r2, [r3, #120]	; 0x78
 8001bcc:	4a29      	ldr	r2, [pc, #164]	; (8001c74 <HAL_UART_MspInit+0x2cc>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bd2:	e03a      	b.n	8001c4a <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_UART_MspInit+0x2d4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d135      	bne.n	8001c4a <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001be6:	f043 0320 	orr.w	r3, r3, #32
 8001bea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_UART_MspInit+0x2b0>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c32:	4619      	mov	r1, r3
 8001c34:	4812      	ldr	r0, [pc, #72]	; (8001c80 <HAL_UART_MspInit+0x2d8>)
 8001c36:	f003 fef5 	bl	8005a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	2047      	movs	r0, #71	; 0x47
 8001c40:	f001 fb9f 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c44:	2047      	movs	r0, #71	; 0x47
 8001c46:	f001 fbb6 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3740      	adds	r7, #64	; 0x40
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40007800 	.word	0x40007800
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58021400 	.word	0x58021400
 8001c60:	40011000 	.word	0x40011000
 8001c64:	58020400 	.word	0x58020400
 8001c68:	240004ac 	.word	0x240004ac
 8001c6c:	40020058 	.word	0x40020058
 8001c70:	40004800 	.word	0x40004800
 8001c74:	24000124 	.word	0x24000124
 8001c78:	40020440 	.word	0x40020440
 8001c7c:	40011400 	.word	0x40011400
 8001c80:	58020800 	.word	0x58020800

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <SysTick_Handler+0x2c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <SysTick_Handler+0x2c>)
 8001ce2:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SysTick_Handler+0x2c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d904      	bls.n	8001cf6 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Handler+0x2c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001cf2:	f7fe fd6b 	bl	80007cc <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf6:	f000 f9d9 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24000534 	.word	0x24000534

08001d04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <DMA1_Stream0_IRQHandler+0x10>)
 8001d0a:	f002 fb79 	bl	8004400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	240005e4 	.word	0x240005e4

08001d18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
//	leftRawDistance = a_Linear *pitchRawValue[0] + b_Linear;
//	rigtRawDistance = a_Linear *pitchRawValue[1] + b_Linear;
//	pitchRawDistance = a_Linear *pitchRawValue[2] + b_Linear;
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DMA1_Stream1_IRQHandler+0x10>)
 8001d1e:	f002 fb6f 	bl	8004400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	24000770 	.word	0x24000770

08001d2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA1_Stream2_IRQHandler+0x10>)
 8001d32:	f002 fb65 	bl	8004400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	24000328 	.word	0x24000328

08001d40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <DMA1_Stream3_IRQHandler+0x24>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <DMA1_Stream3_IRQHandler+0x24>)
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <DMA1_Stream3_IRQHandler+0x28>)
 8001d58:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <DMA1_Stream3_IRQHandler+0x2c>)
 8001d5c:	f002 fb50 	bl	8004400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	24000308 	.word	0x24000308
 8001d68:	240003b4 	.word	0x240003b4
 8001d6c:	240004ac 	.word	0x240004ac

08001d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <USART1_IRQHandler+0x10>)
 8001d76:	f007 fd99 	bl	80098ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	24000540 	.word	0x24000540

08001d84 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001d8a:	f006 fecf 	bl	8008b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	240007f0 	.word	0x240007f0

08001d98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM7_IRQHandler+0x10>)
 8001d9e:	f006 fec5 	bl	8008b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	24000834 	.word	0x24000834

08001dac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <DMA2_Stream2_IRQHandler+0xa8>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d135      	bne.n	8001e24 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <DMA2_Stream2_IRQHandler+0xac>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	b2d1      	uxtb	r1, r2
 8001dc0:	4a25      	ldr	r2, [pc, #148]	; (8001e58 <DMA2_Stream2_IRQHandler+0xac>)
 8001dc2:	7011      	strb	r1, [r2, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <DMA2_Stream2_IRQHandler+0xb0>)
 8001dc8:	7819      	ldrb	r1, [r3, #0]
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <DMA2_Stream2_IRQHandler+0xb4>)
 8001dcc:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <DMA2_Stream2_IRQHandler+0xac>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d926      	bls.n	8001e24 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <DMA2_Stream2_IRQHandler+0xac>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <DMA2_Stream2_IRQHandler+0xa8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <DMA2_Stream2_IRQHandler+0xb4>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <DMA2_Stream2_IRQHandler+0xb4>)
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <DMA2_Stream2_IRQHandler+0xb8>)
 8001df6:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <DMA2_Stream2_IRQHandler+0xb4>)
 8001dfa:	789b      	ldrb	r3, [r3, #2]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <DMA2_Stream2_IRQHandler+0xb4>)
 8001e02:	78db      	ldrb	r3, [r3, #3]
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <DMA2_Stream2_IRQHandler+0xbc>)
 8001e0c:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <DMA2_Stream2_IRQHandler+0xb4>)
 8001e10:	791b      	ldrb	r3, [r3, #4]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <DMA2_Stream2_IRQHandler+0xb4>)
 8001e18:	795b      	ldrb	r3, [r3, #5]
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <DMA2_Stream2_IRQHandler+0xc0>)
 8001e22:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <DMA2_Stream2_IRQHandler+0xb0>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2baa      	cmp	r3, #170	; 0xaa
 8001e2a:	d106      	bne.n	8001e3a <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <DMA2_Stream2_IRQHandler+0xa8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <DMA2_Stream2_IRQHandler+0xa8>)
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e006      	b.n	8001e48 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <DMA2_Stream2_IRQHandler+0xa8>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d002      	beq.n	8001e48 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <DMA2_Stream2_IRQHandler+0xa8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <DMA2_Stream2_IRQHandler+0xc4>)
 8001e4a:	f002 fad9 	bl	8004400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	24000044 	.word	0x24000044
 8001e58:	2400043c 	.word	0x2400043c
 8001e5c:	2400073c 	.word	0x2400073c
 8001e60:	24000300 	.word	0x24000300
 8001e64:	240005dc 	.word	0x240005dc
 8001e68:	240005e0 	.word	0x240005e0
 8001e6c:	24000750 	.word	0x24000750
 8001e70:	24000124 	.word	0x24000124

08001e74 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <USART6_IRQHandler+0x10>)
 8001e7a:	f007 fd17 	bl	80098ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	240006b0 	.word	0x240006b0

08001e88 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <UART7_IRQHandler+0x10>)
 8001e8e:	f007 fd0d 	bl	80098ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	24000080 	.word	0x24000080

08001e9c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM15_IRQHandler+0x10>)
 8001ea2:	f006 fe43 	bl	8008b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	240002a0 	.word	0x240002a0

08001eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <SystemInit+0xac>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a28      	ldr	r2, [pc, #160]	; (8001f5c <SystemInit+0xac>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <SystemInit+0xb0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <SystemInit+0xb0>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <SystemInit+0xb0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <SystemInit+0xb0>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4921      	ldr	r1, [pc, #132]	; (8001f60 <SystemInit+0xb0>)
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <SystemInit+0xb4>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <SystemInit+0xb0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <SystemInit+0xb0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <SystemInit+0xb0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <SystemInit+0xb0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <SystemInit+0xb0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <SystemInit+0xb0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <SystemInit+0xb0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <SystemInit+0xb0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <SystemInit+0xb0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <SystemInit+0xb0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <SystemInit+0xb0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <SystemInit+0xb0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <SystemInit+0xb0>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <SystemInit+0xb0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <SystemInit+0xb8>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <SystemInit+0xbc>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f42:	d202      	bcs.n	8001f4a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <SystemInit+0xc0>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <SystemInit+0xac>)
 8001f4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f50:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00
 8001f60:	58024400 	.word	0x58024400
 8001f64:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f68:	5c001000 	.word	0x5c001000
 8001f6c:	ffff0000 	.word	0xffff0000
 8001f70:	51008108 	.word	0x51008108

08001f74 <Reset_Handler>:
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x14>
 8001f78:	2100      	movs	r1, #0
 8001f7a:	e003      	b.n	8001f84 <LoopCopyDataInit>

08001f7c <CopyDataInit>:
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <LoopFillZerobss+0x18>)
 8001f7e:	585b      	ldr	r3, [r3, r1]
 8001f80:	5043      	str	r3, [r0, r1]
 8001f82:	3104      	adds	r1, #4

08001f84 <LoopCopyDataInit>:
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x1c>)
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x20>)
 8001f88:	1842      	adds	r2, r0, r1
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3f6      	bcc.n	8001f7c <CopyDataInit>
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x24>)
 8001f90:	e002      	b.n	8001f98 <LoopFillZerobss>

08001f92 <FillZerobss>:
 8001f92:	2300      	movs	r3, #0
 8001f94:	f842 3b04 	str.w	r3, [r2], #4

08001f98 <LoopFillZerobss>:
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <LoopFillZerobss+0x28>)
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3f9      	bcc.n	8001f92 <FillZerobss>
 8001f9e:	f7ff ff87 	bl	8001eb0 <SystemInit>
 8001fa2:	f00a fdfb 	bl	800cb9c <__libc_init_array>
 8001fa6:	f7fe fd9b 	bl	8000ae0 <main>
 8001faa:	4770      	bx	lr
 8001fac:	24080000 	.word	0x24080000
 8001fb0:	0800cc44 	.word	0x0800cc44
 8001fb4:	24000000 	.word	0x24000000
 8001fb8:	24000028 	.word	0x24000028
 8001fbc:	24000028 	.word	0x24000028
 8001fc0:	24000890 	.word	0x24000890

08001fc4 <ADC3_IRQHandler>:
 8001fc4:	e7fe      	b.n	8001fc4 <ADC3_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f001 f9cc 	bl	800336c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd4:	f004 fcd2 	bl	800697c <HAL_RCC_GetSysClockFreq>
 8001fd8:	4601      	mov	r1, r0
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_Init+0x68>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <HAL_Init+0x6c>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa21 f303 	lsr.w	r3, r1, r3
 8001ff0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_Init+0x68>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_Init+0x6c>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_Init+0x70>)
 800200a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_Init+0x74>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002012:	2000      	movs	r0, #0
 8002014:	f000 f814 	bl	8002040 <HAL_InitTick>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e002      	b.n	8002028 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002022:	f7ff faeb 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58024400 	.word	0x58024400
 8002034:	0800cc1c 	.word	0x0800cc1c
 8002038:	2400001c 	.word	0x2400001c
 800203c:	24000018 	.word	0x24000018

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_InitTick+0x60>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e021      	b.n	8002098 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_InitTick+0x64>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_InitTick+0x60>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f001 f9b1 	bl	80033d2 <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f001 f97b 	bl	8003382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <HAL_InitTick+0x68>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	24000024 	.word	0x24000024
 80020a4:	24000018 	.word	0x24000018
 80020a8:	24000020 	.word	0x24000020

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	24000024 	.word	0x24000024
 80020d0:	2400088c 	.word	0x2400088c

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2400088c 	.word	0x2400088c

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_Delay+0x40>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	24000024 	.word	0x24000024

08002130 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetREVID+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0c1b      	lsrs	r3, r3, #16
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	5c001000 	.word	0x5c001000

08002148 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	58000400 	.word	0x58000400

08002174 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	609a      	str	r2, [r3, #8]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021dc:	b490      	push	{r4, r7}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3360      	adds	r3, #96	; 0x60
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	430b      	orrs	r3, r1
 8002208:	4313      	orrs	r3, r2
 800220a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bc90      	pop	{r4, r7}
 8002214:	4770      	bx	lr

08002216 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	431a      	orrs	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	611a      	str	r2, [r3, #16]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002248:	b490      	push	{r4, r7}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3360      	adds	r3, #96	; 0x60
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4313      	orrs	r3, r2
 800226c:	6023      	str	r3, [r4, #0]
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bc90      	pop	{r4, r7}
 8002276:	4770      	bx	lr

08002278 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002278:	b490      	push	{r4, r7}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3330      	adds	r3, #48	; 0x30
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	4413      	add	r3, r2
 8002296:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	211f      	movs	r1, #31
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	f003 011f 	and.w	r1, r3, #31
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc90      	pop	{r4, r7}
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022ca:	b490      	push	{r4, r7}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3314      	adds	r3, #20
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	0e5b      	lsrs	r3, r3, #25
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	4413      	add	r3, r2
 80022e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	0d1b      	lsrs	r3, r3, #20
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2107      	movs	r1, #7
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	401a      	ands	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	0d1b      	lsrs	r3, r3, #20
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bc90      	pop	{r4, r7}
 8002318:	4770      	bx	lr
	...

0800231c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002334:	43db      	mvns	r3, r3
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0318 	and.w	r3, r3, #24
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002340:	40d9      	lsrs	r1, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	400b      	ands	r3, r1
 8002346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800234a:	431a      	orrs	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	000fffff 	.word	0x000fffff

08002364 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002372:	4013      	ands	r3, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6093      	str	r3, [r2, #8]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	5fffffc0 	.word	0x5fffffc0

08002388 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800239c:	d101      	bne.n	80023a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80023be:	4013      	ands	r3, r2
 80023c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	6fffffc0 	.word	0x6fffffc0

080023d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ec:	d101      	bne.n	80023f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <LL_ADC_IsEnabled+0x18>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <LL_ADC_IsEnabled+0x1a>
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d101      	bne.n	800243e <LL_ADC_REG_IsConversionOngoing+0x18>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b08      	cmp	r3, #8
 800245e:	d101      	bne.n	8002464 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e18e      	b.n	80027ac <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff f8c7 	bl	8001630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff67 	bl	8002388 <LL_ADC_IsDeepPowerDownEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff4d 	bl	8002364 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff82 	bl	80023d8 <LL_ADC_IsInternalRegulatorEnabled>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d113      	bne.n	8002502 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff66 	bl	80023b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024e4:	4b9a      	ldr	r3, [pc, #616]	; (8002750 <HAL_ADC_Init+0x2dc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	4a9a      	ldr	r2, [pc, #616]	; (8002754 <HAL_ADC_Init+0x2e0>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff66 	bl	80023d8 <LL_ADC_IsInternalRegulatorEnabled>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff77 	bl	8002426 <LL_ADC_REG_IsConversionOngoing>
 8002538:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 8129 	bne.w	800279a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 8125 	bne.w	800279a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002558:	f043 0202 	orr.w	r2, r3, #2
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff4b 	bl	8002400 <LL_ADC_IsEnabled>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d136      	bne.n	80025de <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a78      	ldr	r2, [pc, #480]	; (8002758 <HAL_ADC_Init+0x2e4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_ADC_Init+0x110>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a77      	ldr	r2, [pc, #476]	; (800275c <HAL_ADC_Init+0x2e8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10e      	bne.n	80025a2 <HAL_ADC_Init+0x12e>
 8002584:	4874      	ldr	r0, [pc, #464]	; (8002758 <HAL_ADC_Init+0x2e4>)
 8002586:	f7ff ff3b 	bl	8002400 <LL_ADC_IsEnabled>
 800258a:	4604      	mov	r4, r0
 800258c:	4873      	ldr	r0, [pc, #460]	; (800275c <HAL_ADC_Init+0x2e8>)
 800258e:	f7ff ff37 	bl	8002400 <LL_ADC_IsEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	4323      	orrs	r3, r4
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	e008      	b.n	80025b4 <HAL_ADC_Init+0x140>
 80025a2:	486f      	ldr	r0, [pc, #444]	; (8002760 <HAL_ADC_Init+0x2ec>)
 80025a4:	f7ff ff2c 	bl	8002400 <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d012      	beq.n	80025de <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a66      	ldr	r2, [pc, #408]	; (8002758 <HAL_ADC_Init+0x2e4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_ADC_Init+0x158>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_ADC_Init+0x2e8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_Init+0x15c>
 80025cc:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_ADC_Init+0x2f0>)
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_Init+0x15e>
 80025d0:	4a65      	ldr	r2, [pc, #404]	; (8002768 <HAL_ADC_Init+0x2f4>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7ff fdcb 	bl	8002174 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80025de:	f7ff fda7 	bl	8002130 <HAL_GetREVID>
 80025e2:	4602      	mov	r2, r0
 80025e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d914      	bls.n	8002616 <HAL_ADC_Init+0x1a2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d110      	bne.n	8002616 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7d5b      	ldrb	r3, [r3, #21]
 80025f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002604:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7f1b      	ldrb	r3, [r3, #28]
 800260a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800260c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800260e:	f043 030c 	orr.w	r3, r3, #12
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e00d      	b.n	8002632 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7d5b      	ldrb	r3, [r3, #21]
 800261a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002620:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002626:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7f1b      	ldrb	r3, [r3, #28]
 800262c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7f1b      	ldrb	r3, [r3, #28]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d106      	bne.n	8002648 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	3b01      	subs	r3, #1
 8002640:	045b      	lsls	r3, r3, #17
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_ADC_Init+0x2f8>)
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	430b      	orrs	r3, r1
 8002676:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fed2 	bl	8002426 <LL_ADC_REG_IsConversionOngoing>
 8002682:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fedf 	bl	800244c <LL_ADC_INJ_IsConversionOngoing>
 800268e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d14a      	bne.n	800272c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d147      	bne.n	800272c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7d1b      	ldrb	r3, [r3, #20]
 80026a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_ADC_Init+0x2fc>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	69b9      	ldr	r1, [r7, #24]
 80026ba:	430b      	orrs	r3, r1
 80026bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d11b      	bne.n	8002700 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_ADC_Init+0x300>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026dc:	3a01      	subs	r2, #1
 80026de:	0411      	lsls	r1, r2, #16
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026e4:	4311      	orrs	r1, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026f0:	430a      	orrs	r2, r1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	611a      	str	r2, [r3, #16]
 80026fe:	e007      	b.n	8002710 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fb58 	bl	8002ddc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d121      	bne.n	8002778 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f023 010f 	bic.w	r1, r3, #15
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	1e5a      	subs	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
 800274c:	e01c      	b.n	8002788 <HAL_ADC_Init+0x314>
 800274e:	bf00      	nop
 8002750:	24000018 	.word	0x24000018
 8002754:	053e2d63 	.word	0x053e2d63
 8002758:	40022000 	.word	0x40022000
 800275c:	40022100 	.word	0x40022100
 8002760:	58026000 	.word	0x58026000
 8002764:	40022300 	.word	0x40022300
 8002768:	58026300 	.word	0x58026300
 800276c:	fff0c003 	.word	0xfff0c003
 8002770:	ffffbffc 	.word	0xffffbffc
 8002774:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 020f 	bic.w	r2, r2, #15
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f023 0303 	bic.w	r3, r3, #3
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
 8002798:	e007      	b.n	80027aa <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3724      	adds	r7, #36	; 0x24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}

080027b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b099      	sub	sp, #100	; 0x64
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a99      	ldr	r2, [pc, #612]	; (8002a34 <HAL_ADC_ConfigChannel+0x280>)
 80027ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x2a>
 80027da:	2302      	movs	r3, #2
 80027dc:	e2e6      	b.n	8002dac <HAL_ADC_ConfigChannel+0x5f8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fe1b 	bl	8002426 <LL_ADC_REG_IsConversionOngoing>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 82cb 	bne.w	8002d8e <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x62>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2201      	movs	r2, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	e00f      	b.n	8002836 <HAL_ADC_ConfigChannel+0x82>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2201      	movs	r2, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	69d1      	ldr	r1, [r2, #28]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	f7ff fd11 	bl	8002278 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fde3 	bl	8002426 <LL_ADC_REG_IsConversionOngoing>
 8002860:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fdf0 	bl	800244c <LL_ADC_INJ_IsConversionOngoing>
 800286c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800286e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002870:	2b00      	cmp	r3, #0
 8002872:	f040 80b3 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 80af 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	461a      	mov	r2, r3
 800288c:	f7ff fd1d 	bl	80022ca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002890:	4b69      	ldr	r3, [pc, #420]	; (8002a38 <HAL_ADC_ConfigChannel+0x284>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800289c:	d10b      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x102>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	e01d      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x13e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x128>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	e00a      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x13e>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d027      	beq.n	800294c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6919      	ldr	r1, [r3, #16]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290a:	f7ff fc67 	bl	80021dc <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6919      	ldr	r1, [r3, #16]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	7e5b      	ldrb	r3, [r3, #25]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d102      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x170>
 800291e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002922:	e000      	b.n	8002926 <HAL_ADC_ConfigChannel+0x172>
 8002924:	2300      	movs	r3, #0
 8002926:	461a      	mov	r2, r3
 8002928:	f7ff fc8e 	bl	8002248 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6919      	ldr	r1, [r3, #16]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	7e1b      	ldrb	r3, [r3, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d102      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x18e>
 800293c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002940:	e000      	b.n	8002944 <HAL_ADC_ConfigChannel+0x190>
 8002942:	2300      	movs	r3, #0
 8002944:	461a      	mov	r2, r3
 8002946:	f7ff fc66 	bl	8002216 <LL_ADC_SetDataRightShift>
 800294a:	e047      	b.n	80029dc <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	069b      	lsls	r3, r3, #26
 800295c:	429a      	cmp	r2, r3
 800295e:	d107      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800296e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002992:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	069b      	lsls	r3, r3, #26
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d107      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029b6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	069b      	lsls	r3, r3, #26
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fd0d 	bl	8002400 <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f040 81d9 	bne.w	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f7ff fc8e 	bl	800231c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_ADC_ConfigChannel+0x280>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	f040 8101 	bne.w	8002c0e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x288>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	3301      	adds	r3, #1
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e016      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x2ae>
 8002a34:	47ff0000 	.word	0x47ff0000
 8002a38:	5c001000 	.word	0x5c001000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	bf94      	ite	ls
 8002a5c:	2301      	movls	r3, #1
 8002a5e:	2300      	movhi	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d064      	beq.n	8002b30 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x2ce>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	3301      	adds	r3, #1
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a80:	e00e      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x2ec>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	069b      	lsls	r3, r3, #26
 8002a9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x30c>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	e010      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x32e>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	ea42 0103 	orr.w	r1, r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x354>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	3301      	adds	r3, #1
 8002afa:	f003 021f 	and.w	r2, r3, #31
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	051b      	lsls	r3, r3, #20
 8002b06:	e011      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x378>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	e069      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x398>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	069b      	lsls	r3, r3, #26
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4a:	e00e      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x3b6>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	61fb      	str	r3, [r7, #28]
  return result;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	069b      	lsls	r3, r3, #26
 8002b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x3d6>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	e010      	b.n	8002bac <HAL_ADC_ConfigChannel+0x3f8>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	617b      	str	r3, [r7, #20]
  return result;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	ea42 0103 	orr.w	r1, r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x424>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	051b      	lsls	r3, r3, #20
 8002bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	e014      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x44e>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	60fb      	str	r3, [r7, #12]
  return result;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b1e      	subs	r3, #30
 8002bfc:	051b      	lsls	r3, r3, #20
 8002bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c02:	430b      	orrs	r3, r1
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	6892      	ldr	r2, [r2, #8]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7ff fb5e 	bl	80022ca <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f280 80c4 	bge.w	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_ADC_ConfigChannel+0x600>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0x478>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a64      	ldr	r2, [pc, #400]	; (8002db8 <HAL_ADC_ConfigChannel+0x604>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x47c>
 8002c2c:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_ADC_ConfigChannel+0x608>)
 8002c2e:	e000      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x47e>
 8002c30:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <HAL_ADC_ConfigChannel+0x60c>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fac4 	bl	80021c0 <LL_ADC_GetCommonPathInternalCh>
 8002c38:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5d      	ldr	r2, [pc, #372]	; (8002db4 <HAL_ADC_ConfigChannel+0x600>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x49a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a5b      	ldr	r2, [pc, #364]	; (8002db8 <HAL_ADC_ConfigChannel+0x604>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d10e      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x4b8>
 8002c4e:	4859      	ldr	r0, [pc, #356]	; (8002db4 <HAL_ADC_ConfigChannel+0x600>)
 8002c50:	f7ff fbd6 	bl	8002400 <LL_ADC_IsEnabled>
 8002c54:	4604      	mov	r4, r0
 8002c56:	4858      	ldr	r0, [pc, #352]	; (8002db8 <HAL_ADC_ConfigChannel+0x604>)
 8002c58:	f7ff fbd2 	bl	8002400 <LL_ADC_IsEnabled>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4323      	orrs	r3, r4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e008      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x4ca>
 8002c6c:	4855      	ldr	r0, [pc, #340]	; (8002dc4 <HAL_ADC_ConfigChannel+0x610>)
 8002c6e:	f7ff fbc7 	bl	8002400 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07b      	beq.n	8002d7a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_ADC_ConfigChannel+0x614>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d12e      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x536>
 8002c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d129      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <HAL_ADC_ConfigChannel+0x610>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d17f      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <HAL_ADC_ConfigChannel+0x600>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0x500>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <HAL_ADC_ConfigChannel+0x604>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x504>
 8002cb4:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <HAL_ADC_ConfigChannel+0x608>)
 8002cb6:	e000      	b.n	8002cba <HAL_ADC_ConfigChannel+0x506>
 8002cb8:	4a41      	ldr	r2, [pc, #260]	; (8002dc0 <HAL_ADC_ConfigChannel+0x60c>)
 8002cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f7ff fa69 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <HAL_ADC_ConfigChannel+0x618>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <HAL_ADC_ConfigChannel+0x61c>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002cda:	e002      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce8:	e05a      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <HAL_ADC_ConfigChannel+0x620>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d11e      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x57e>
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d119      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_ADC_ConfigChannel+0x610>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d14b      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <HAL_ADC_ConfigChannel+0x600>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0x568>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <HAL_ADC_ConfigChannel+0x604>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x56c>
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_ADC_ConfigChannel+0x608>)
 8002d1e:	e000      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x56e>
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_ADC_ConfigChannel+0x60c>)
 8002d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f7ff fa35 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d30:	e036      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_ADC_ConfigChannel+0x624>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d131      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
 8002d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d12c      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <HAL_ADC_ConfigChannel+0x610>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d127      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_ADC_ConfigChannel+0x600>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_ADC_ConfigChannel+0x5b0>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <HAL_ADC_ConfigChannel+0x604>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x5b4>
 8002d64:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <HAL_ADC_ConfigChannel+0x608>)
 8002d66:	e000      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x5b6>
 8002d68:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <HAL_ADC_ConfigChannel+0x60c>)
 8002d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f7ff fa11 	bl	800219a <LL_ADC_SetCommonPathInternalCh>
 8002d78:	e012      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d8c:	e008      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3764      	adds	r7, #100	; 0x64
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40022100 	.word	0x40022100
 8002dbc:	40022300 	.word	0x40022300
 8002dc0:	58026300 	.word	0x58026300
 8002dc4:	58026000 	.word	0x58026000
 8002dc8:	cb840000 	.word	0xcb840000
 8002dcc:	24000018 	.word	0x24000018
 8002dd0:	053e2d63 	.word	0x053e2d63
 8002dd4:	c7520000 	.word	0xc7520000
 8002dd8:	cfb80000 	.word	0xcfb80000

08002ddc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a70      	ldr	r2, [pc, #448]	; (8002fac <ADC_ConfigureBoostMode+0x1d0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <ADC_ConfigureBoostMode+0x1c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6f      	ldr	r2, [pc, #444]	; (8002fb0 <ADC_ConfigureBoostMode+0x1d4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d109      	bne.n	8002e0c <ADC_ConfigureBoostMode+0x30>
 8002df8:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <ADC_ConfigureBoostMode+0x1d8>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e008      	b.n	8002e1e <ADC_ConfigureBoostMode+0x42>
 8002e0c:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <ADC_ConfigureBoostMode+0x1dc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01a      	beq.n	8002e58 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e22:	f003 ff1d 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8002e26:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e30:	d006      	beq.n	8002e40 <ADC_ConfigureBoostMode+0x64>
 8002e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e36:	d00b      	beq.n	8002e50 <ADC_ConfigureBoostMode+0x74>
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3c:	d000      	beq.n	8002e40 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002e3e:	e05d      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	60fb      	str	r3, [r7, #12]
        break;
 8002e4e:	e055      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	60fb      	str	r3, [r7, #12]
        break;
 8002e56:	e051      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e5c:	f004 fe3a 	bl	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e60:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e6a:	d02a      	beq.n	8002ec2 <ADC_ConfigureBoostMode+0xe6>
 8002e6c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e70:	d813      	bhi.n	8002e9a <ADC_ConfigureBoostMode+0xbe>
 8002e72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e76:	d024      	beq.n	8002ec2 <ADC_ConfigureBoostMode+0xe6>
 8002e78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e7c:	d806      	bhi.n	8002e8c <ADC_ConfigureBoostMode+0xb0>
 8002e7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e82:	d01e      	beq.n	8002ec2 <ADC_ConfigureBoostMode+0xe6>
 8002e84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e88:	d01b      	beq.n	8002ec2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002e8a:	e037      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d017      	beq.n	8002ec2 <ADC_ConfigureBoostMode+0xe6>
 8002e92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e96:	d014      	beq.n	8002ec2 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002e98:	e030      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002e9a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e9e:	d021      	beq.n	8002ee4 <ADC_ConfigureBoostMode+0x108>
 8002ea0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002ea4:	d806      	bhi.n	8002eb4 <ADC_ConfigureBoostMode+0xd8>
 8002ea6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002eaa:	d013      	beq.n	8002ed4 <ADC_ConfigureBoostMode+0xf8>
 8002eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb0:	d014      	beq.n	8002edc <ADC_ConfigureBoostMode+0x100>
        break;
 8002eb2:	e023      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002eb4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002eb8:	d018      	beq.n	8002eec <ADC_ConfigureBoostMode+0x110>
 8002eba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ebe:	d019      	beq.n	8002ef4 <ADC_ConfigureBoostMode+0x118>
        break;
 8002ec0:	e01c      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	0c9b      	lsrs	r3, r3, #18
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	60fb      	str	r3, [r7, #12]
        break;
 8002ed2:	e013      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]
      break;
 8002eda:	e00f      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	60fb      	str	r3, [r7, #12]
        break;
 8002ee2:	e00b      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	60fb      	str	r3, [r7, #12]
        break;
 8002eea:	e007      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	09db      	lsrs	r3, r3, #7
 8002ef0:	60fb      	str	r3, [r7, #12]
        break;
 8002ef2:	e003      	b.n	8002efc <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	60fb      	str	r3, [r7, #12]
        break;
 8002efa:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002efc:	f7ff f918 	bl	8002130 <HAL_GetREVID>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d815      	bhi.n	8002f36 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <ADC_ConfigureBoostMode+0x1e0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d908      	bls.n	8002f24 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f20:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f22:	e03e      	b.n	8002fa2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	e035      	b.n	8002fa2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a20      	ldr	r2, [pc, #128]	; (8002fc0 <ADC_ConfigureBoostMode+0x1e4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d808      	bhi.n	8002f56 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	e025      	b.n	8002fa2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <ADC_ConfigureBoostMode+0x1e8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d80a      	bhi.n	8002f74 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f70:	609a      	str	r2, [r3, #8]
}
 8002f72:	e016      	b.n	8002fa2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <ADC_ConfigureBoostMode+0x1ec>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d80a      	bhi.n	8002f92 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8e:	609a      	str	r2, [r3, #8]
}
 8002f90:	e007      	b.n	8002fa2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002fa0:	609a      	str	r2, [r3, #8]
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	40022100 	.word	0x40022100
 8002fb4:	40022300 	.word	0x40022300
 8002fb8:	58026300 	.word	0x58026300
 8002fbc:	01312d00 	.word	0x01312d00
 8002fc0:	005f5e10 	.word	0x005f5e10
 8002fc4:	00bebc20 	.word	0x00bebc20
 8002fc8:	017d7840 	.word	0x017d7840

08002fcc <LL_ADC_IsEnabled>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <LL_ADC_IsEnabled+0x18>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_ADC_IsEnabled+0x1a>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d101      	bne.n	800300a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b09f      	sub	sp, #124	; 0x7c
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003032:	2302      	movs	r3, #2
 8003034:	e0ba      	b.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a5c      	ldr	r2, [pc, #368]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d102      	bne.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003048:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	e001      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e09d      	b.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ffbd 	bl	8002ff2 <LL_ADC_REG_IsConversionOngoing>
 8003078:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ffb7 	bl	8002ff2 <LL_ADC_REG_IsConversionOngoing>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d17f      	bne.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800308a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800308c:	2b00      	cmp	r3, #0
 800308e:	d17c      	bne.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a47      	ldr	r2, [pc, #284]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d004      	beq.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a46      	ldr	r2, [pc, #280]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d101      	bne.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80030a4:	4b45      	ldr	r3, [pc, #276]	; (80031bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030a6:	e000      	b.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80030a8:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d039      	beq.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3a      	ldr	r2, [pc, #232]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a38      	ldr	r2, [pc, #224]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10e      	bne.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80030da:	4836      	ldr	r0, [pc, #216]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030dc:	f7ff ff76 	bl	8002fcc <LL_ADC_IsEnabled>
 80030e0:	4604      	mov	r4, r0
 80030e2:	4835      	ldr	r0, [pc, #212]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030e4:	f7ff ff72 	bl	8002fcc <LL_ADC_IsEnabled>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4323      	orrs	r3, r4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e008      	b.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80030f8:	4832      	ldr	r0, [pc, #200]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030fa:	f7ff ff67 	bl	8002fcc <LL_ADC_IsEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d047      	beq.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800310e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003114:	4013      	ands	r3, r2
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	6811      	ldr	r1, [r2, #0]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	6892      	ldr	r2, [r2, #8]
 800311e:	430a      	orrs	r2, r1
 8003120:	431a      	orrs	r2, r3
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003126:	e03a      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003132:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1d      	ldr	r2, [pc, #116]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10e      	bne.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003148:	481a      	ldr	r0, [pc, #104]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800314a:	f7ff ff3f 	bl	8002fcc <LL_ADC_IsEnabled>
 800314e:	4604      	mov	r4, r0
 8003150:	4819      	ldr	r0, [pc, #100]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003152:	f7ff ff3b 	bl	8002fcc <LL_ADC_IsEnabled>
 8003156:	4603      	mov	r3, r0
 8003158:	4323      	orrs	r3, r4
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e008      	b.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003166:	4817      	ldr	r0, [pc, #92]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003168:	f7ff ff30 	bl	8002fcc <LL_ADC_IsEnabled>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800317c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003182:	4013      	ands	r3, r2
 8003184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003186:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003188:	e009      	b.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800319c:	e000      	b.n	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800319e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	377c      	adds	r7, #124	; 0x7c
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd90      	pop	{r4, r7, pc}
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40022100 	.word	0x40022100
 80031bc:	40022300 	.word	0x40022300
 80031c0:	58026300 	.word	0x58026300
 80031c4:	58026000 	.word	0x58026000
 80031c8:	fffff0e0 	.word	0xfffff0e0

080031cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <__NVIC_SetPriorityGrouping+0x40>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e8:	4013      	ands	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fa:	4a04      	ldr	r2, [pc, #16]	; (800320c <__NVIC_SetPriorityGrouping+0x40>)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	60d3      	str	r3, [r2, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00
 8003210:	05fa0000 	.word	0x05fa0000

08003214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <__NVIC_GetPriorityGrouping+0x18>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f003 0307 	and.w	r3, r3, #7
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800323a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323e:	2b00      	cmp	r3, #0
 8003240:	db0b      	blt.n	800325a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	4907      	ldr	r1, [pc, #28]	; (8003268 <__NVIC_EnableIRQ+0x38>)
 800324a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2001      	movs	r0, #1
 8003252:	fa00 f202 	lsl.w	r2, r0, r2
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000e100 	.word	0xe000e100

0800326c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db0a      	blt.n	8003296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	490c      	ldr	r1, [pc, #48]	; (80032b8 <__NVIC_SetPriority+0x4c>)
 8003286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003294:	e00a      	b.n	80032ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4908      	ldr	r1, [pc, #32]	; (80032bc <__NVIC_SetPriority+0x50>)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3b04      	subs	r3, #4
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	440b      	add	r3, r1
 80032aa:	761a      	strb	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f1c3 0307 	rsb	r3, r3, #7
 80032da:	2b04      	cmp	r3, #4
 80032dc:	bf28      	it	cs
 80032de:	2304      	movcs	r3, #4
 80032e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d902      	bls.n	80032f0 <NVIC_EncodePriority+0x30>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3b03      	subs	r3, #3
 80032ee:	e000      	b.n	80032f2 <NVIC_EncodePriority+0x32>
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43d9      	mvns	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	4313      	orrs	r3, r2
         );
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003338:	d301      	bcc.n	800333e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333a:	2301      	movs	r3, #1
 800333c:	e00f      	b.n	800335e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <SysTick_Config+0x40>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003346:	210f      	movs	r1, #15
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f7ff ff8e 	bl	800326c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <SysTick_Config+0x40>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <SysTick_Config+0x40>)
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000e010 	.word	0xe000e010

0800336c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff29 	bl	80031cc <__NVIC_SetPriorityGrouping>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003390:	f7ff ff40 	bl	8003214 <__NVIC_GetPriorityGrouping>
 8003394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	6978      	ldr	r0, [r7, #20]
 800339c:	f7ff ff90 	bl	80032c0 <NVIC_EncodePriority>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff5f 	bl	800326c <__NVIC_SetPriority>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff33 	bl	8003230 <__NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffa4 	bl	8003328 <SysTick_Config>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033f4:	f7fe fe6e 	bl	80020d4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e316      	b.n	8003a32 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a66      	ldr	r2, [pc, #408]	; (80035a4 <HAL_DMA_Init+0x1b8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d04a      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a65      	ldr	r2, [pc, #404]	; (80035a8 <HAL_DMA_Init+0x1bc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d045      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a63      	ldr	r2, [pc, #396]	; (80035ac <HAL_DMA_Init+0x1c0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d040      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a62      	ldr	r2, [pc, #392]	; (80035b0 <HAL_DMA_Init+0x1c4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d03b      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a60      	ldr	r2, [pc, #384]	; (80035b4 <HAL_DMA_Init+0x1c8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d036      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5f      	ldr	r2, [pc, #380]	; (80035b8 <HAL_DMA_Init+0x1cc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d031      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <HAL_DMA_Init+0x1d0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d02c      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a5c      	ldr	r2, [pc, #368]	; (80035c0 <HAL_DMA_Init+0x1d4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d027      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a5a      	ldr	r2, [pc, #360]	; (80035c4 <HAL_DMA_Init+0x1d8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d022      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a59      	ldr	r2, [pc, #356]	; (80035c8 <HAL_DMA_Init+0x1dc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d01d      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a57      	ldr	r2, [pc, #348]	; (80035cc <HAL_DMA_Init+0x1e0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d018      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a56      	ldr	r2, [pc, #344]	; (80035d0 <HAL_DMA_Init+0x1e4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a54      	ldr	r2, [pc, #336]	; (80035d4 <HAL_DMA_Init+0x1e8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00e      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a53      	ldr	r2, [pc, #332]	; (80035d8 <HAL_DMA_Init+0x1ec>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a51      	ldr	r2, [pc, #324]	; (80035dc <HAL_DMA_Init+0x1f0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_DMA_Init+0xb8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a50      	ldr	r2, [pc, #320]	; (80035e0 <HAL_DMA_Init+0x1f4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_DMA_Init+0xbc>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_DMA_Init+0xbe>
 80034a8:	2300      	movs	r3, #0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 813b 	beq.w	8003726 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a37      	ldr	r2, [pc, #220]	; (80035a4 <HAL_DMA_Init+0x1b8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d04a      	beq.n	8003560 <HAL_DMA_Init+0x174>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a36      	ldr	r2, [pc, #216]	; (80035a8 <HAL_DMA_Init+0x1bc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d045      	beq.n	8003560 <HAL_DMA_Init+0x174>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a34      	ldr	r2, [pc, #208]	; (80035ac <HAL_DMA_Init+0x1c0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d040      	beq.n	8003560 <HAL_DMA_Init+0x174>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a33      	ldr	r2, [pc, #204]	; (80035b0 <HAL_DMA_Init+0x1c4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d03b      	beq.n	8003560 <HAL_DMA_Init+0x174>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <HAL_DMA_Init+0x1c8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d036      	beq.n	8003560 <HAL_DMA_Init+0x174>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a30      	ldr	r2, [pc, #192]	; (80035b8 <HAL_DMA_Init+0x1cc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d031      	beq.n	8003560 <HAL_DMA_Init+0x174>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2e      	ldr	r2, [pc, #184]	; (80035bc <HAL_DMA_Init+0x1d0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d02c      	beq.n	8003560 <HAL_DMA_Init+0x174>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2d      	ldr	r2, [pc, #180]	; (80035c0 <HAL_DMA_Init+0x1d4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d027      	beq.n	8003560 <HAL_DMA_Init+0x174>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <HAL_DMA_Init+0x1d8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d022      	beq.n	8003560 <HAL_DMA_Init+0x174>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <HAL_DMA_Init+0x1dc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d01d      	beq.n	8003560 <HAL_DMA_Init+0x174>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a28      	ldr	r2, [pc, #160]	; (80035cc <HAL_DMA_Init+0x1e0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d018      	beq.n	8003560 <HAL_DMA_Init+0x174>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <HAL_DMA_Init+0x1e4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <HAL_DMA_Init+0x174>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_DMA_Init+0x1e8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00e      	beq.n	8003560 <HAL_DMA_Init+0x174>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <HAL_DMA_Init+0x1ec>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_DMA_Init+0x174>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_DMA_Init+0x1f0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_DMA_Init+0x174>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <HAL_DMA_Init+0x1f4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d108      	bne.n	8003572 <HAL_DMA_Init+0x186>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e007      	b.n	8003582 <HAL_DMA_Init+0x196>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003582:	e02f      	b.n	80035e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003584:	f7fe fda6 	bl	80020d4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b05      	cmp	r3, #5
 8003590:	d928      	bls.n	80035e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e246      	b.n	8003a32 <HAL_DMA_Init+0x646>
 80035a4:	40020010 	.word	0x40020010
 80035a8:	40020028 	.word	0x40020028
 80035ac:	40020040 	.word	0x40020040
 80035b0:	40020058 	.word	0x40020058
 80035b4:	40020070 	.word	0x40020070
 80035b8:	40020088 	.word	0x40020088
 80035bc:	400200a0 	.word	0x400200a0
 80035c0:	400200b8 	.word	0x400200b8
 80035c4:	40020410 	.word	0x40020410
 80035c8:	40020428 	.word	0x40020428
 80035cc:	40020440 	.word	0x40020440
 80035d0:	40020458 	.word	0x40020458
 80035d4:	40020470 	.word	0x40020470
 80035d8:	40020488 	.word	0x40020488
 80035dc:	400204a0 	.word	0x400204a0
 80035e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1c8      	bne.n	8003584 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4b83      	ldr	r3, [pc, #524]	; (800380c <HAL_DMA_Init+0x420>)
 80035fe:	4013      	ands	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800360a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003616:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003622:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	2b04      	cmp	r3, #4
 8003636:	d107      	bne.n	8003648 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4313      	orrs	r3, r2
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003648:	4b71      	ldr	r3, [pc, #452]	; (8003810 <HAL_DMA_Init+0x424>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b71      	ldr	r3, [pc, #452]	; (8003814 <HAL_DMA_Init+0x428>)
 800364e:	4013      	ands	r3, r2
 8003650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003654:	d328      	bcc.n	80036a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b28      	cmp	r3, #40	; 0x28
 800365c:	d903      	bls.n	8003666 <HAL_DMA_Init+0x27a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b2e      	cmp	r3, #46	; 0x2e
 8003664:	d917      	bls.n	8003696 <HAL_DMA_Init+0x2aa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b3e      	cmp	r3, #62	; 0x3e
 800366c:	d903      	bls.n	8003676 <HAL_DMA_Init+0x28a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b42      	cmp	r3, #66	; 0x42
 8003674:	d90f      	bls.n	8003696 <HAL_DMA_Init+0x2aa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b46      	cmp	r3, #70	; 0x46
 800367c:	d903      	bls.n	8003686 <HAL_DMA_Init+0x29a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b48      	cmp	r3, #72	; 0x48
 8003684:	d907      	bls.n	8003696 <HAL_DMA_Init+0x2aa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b4e      	cmp	r3, #78	; 0x4e
 800368c:	d905      	bls.n	800369a <HAL_DMA_Init+0x2ae>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b52      	cmp	r3, #82	; 0x52
 8003694:	d801      	bhi.n	800369a <HAL_DMA_Init+0x2ae>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_DMA_Init+0x2b0>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0307 	bic.w	r3, r3, #7
 80036be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d117      	bne.n	8003702 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f002 f813 	bl	8005710 <DMA_CheckFifoParam>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e197      	b.n	8003a32 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f001 ff4e 	bl	80055ac <DMA_CalcBaseAndBitshift>
 8003710:	4603      	mov	r3, r0
 8003712:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	223f      	movs	r2, #63	; 0x3f
 800371e:	409a      	lsls	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e0cd      	b.n	80038c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <HAL_DMA_Init+0x42c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d022      	beq.n	8003776 <HAL_DMA_Init+0x38a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a39      	ldr	r2, [pc, #228]	; (800381c <HAL_DMA_Init+0x430>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01d      	beq.n	8003776 <HAL_DMA_Init+0x38a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a38      	ldr	r2, [pc, #224]	; (8003820 <HAL_DMA_Init+0x434>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d018      	beq.n	8003776 <HAL_DMA_Init+0x38a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a36      	ldr	r2, [pc, #216]	; (8003824 <HAL_DMA_Init+0x438>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_DMA_Init+0x38a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a35      	ldr	r2, [pc, #212]	; (8003828 <HAL_DMA_Init+0x43c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_DMA_Init+0x38a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a33      	ldr	r2, [pc, #204]	; (800382c <HAL_DMA_Init+0x440>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_DMA_Init+0x38a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a32      	ldr	r2, [pc, #200]	; (8003830 <HAL_DMA_Init+0x444>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_DMA_Init+0x38a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a30      	ldr	r2, [pc, #192]	; (8003834 <HAL_DMA_Init+0x448>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_DMA_Init+0x38e>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_DMA_Init+0x390>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8097 	beq.w	80038b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a24      	ldr	r2, [pc, #144]	; (8003818 <HAL_DMA_Init+0x42c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d021      	beq.n	80037d0 <HAL_DMA_Init+0x3e4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_DMA_Init+0x430>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01c      	beq.n	80037d0 <HAL_DMA_Init+0x3e4>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	; (8003820 <HAL_DMA_Init+0x434>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d017      	beq.n	80037d0 <HAL_DMA_Init+0x3e4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <HAL_DMA_Init+0x438>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d012      	beq.n	80037d0 <HAL_DMA_Init+0x3e4>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_DMA_Init+0x43c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00d      	beq.n	80037d0 <HAL_DMA_Init+0x3e4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <HAL_DMA_Init+0x440>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d008      	beq.n	80037d0 <HAL_DMA_Init+0x3e4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <HAL_DMA_Init+0x444>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <HAL_DMA_Init+0x3e4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_DMA_Init+0x448>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_DMA_Init+0x44c>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d020      	beq.n	800383c <HAL_DMA_Init+0x450>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d102      	bne.n	8003808 <HAL_DMA_Init+0x41c>
 8003802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003806:	e01a      	b.n	800383e <HAL_DMA_Init+0x452>
 8003808:	2300      	movs	r3, #0
 800380a:	e018      	b.n	800383e <HAL_DMA_Init+0x452>
 800380c:	fe10803f 	.word	0xfe10803f
 8003810:	5c001000 	.word	0x5c001000
 8003814:	ffff0000 	.word	0xffff0000
 8003818:	58025408 	.word	0x58025408
 800381c:	5802541c 	.word	0x5802541c
 8003820:	58025430 	.word	0x58025430
 8003824:	58025444 	.word	0x58025444
 8003828:	58025458 	.word	0x58025458
 800382c:	5802546c 	.word	0x5802546c
 8003830:	58025480 	.word	0x58025480
 8003834:	58025494 	.word	0x58025494
 8003838:	fffe000f 	.word	0xfffe000f
 800383c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003844:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800384c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800385c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800386c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	4b6e      	ldr	r3, [pc, #440]	; (8003a3c <HAL_DMA_Init+0x650>)
 8003884:	4413      	add	r3, r2
 8003886:	4a6e      	ldr	r2, [pc, #440]	; (8003a40 <HAL_DMA_Init+0x654>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	009a      	lsls	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 fe89 	bl	80055ac <DMA_CalcBaseAndBitshift>
 800389a:	4603      	mov	r3, r0
 800389c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	e008      	b.n	80038c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0b7      	b.n	8003a32 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5f      	ldr	r2, [pc, #380]	; (8003a44 <HAL_DMA_Init+0x658>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d072      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	; (8003a48 <HAL_DMA_Init+0x65c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d06d      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_DMA_Init+0x660>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d068      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5a      	ldr	r2, [pc, #360]	; (8003a50 <HAL_DMA_Init+0x664>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d063      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <HAL_DMA_Init+0x668>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d05e      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_DMA_Init+0x66c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d059      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_DMA_Init+0x670>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d054      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a54      	ldr	r2, [pc, #336]	; (8003a60 <HAL_DMA_Init+0x674>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d04f      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a53      	ldr	r2, [pc, #332]	; (8003a64 <HAL_DMA_Init+0x678>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d04a      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a51      	ldr	r2, [pc, #324]	; (8003a68 <HAL_DMA_Init+0x67c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d045      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a50      	ldr	r2, [pc, #320]	; (8003a6c <HAL_DMA_Init+0x680>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d040      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a4e      	ldr	r2, [pc, #312]	; (8003a70 <HAL_DMA_Init+0x684>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d03b      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a4d      	ldr	r2, [pc, #308]	; (8003a74 <HAL_DMA_Init+0x688>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d036      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a4b      	ldr	r2, [pc, #300]	; (8003a78 <HAL_DMA_Init+0x68c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d031      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a4a      	ldr	r2, [pc, #296]	; (8003a7c <HAL_DMA_Init+0x690>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d02c      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a48      	ldr	r2, [pc, #288]	; (8003a80 <HAL_DMA_Init+0x694>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d027      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a47      	ldr	r2, [pc, #284]	; (8003a84 <HAL_DMA_Init+0x698>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d022      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a45      	ldr	r2, [pc, #276]	; (8003a88 <HAL_DMA_Init+0x69c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01d      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a44      	ldr	r2, [pc, #272]	; (8003a8c <HAL_DMA_Init+0x6a0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d018      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a42      	ldr	r2, [pc, #264]	; (8003a90 <HAL_DMA_Init+0x6a4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a41      	ldr	r2, [pc, #260]	; (8003a94 <HAL_DMA_Init+0x6a8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3f      	ldr	r2, [pc, #252]	; (8003a98 <HAL_DMA_Init+0x6ac>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a3e      	ldr	r2, [pc, #248]	; (8003a9c <HAL_DMA_Init+0x6b0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_DMA_Init+0x5c6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a3c      	ldr	r2, [pc, #240]	; (8003aa0 <HAL_DMA_Init+0x6b4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_DMA_Init+0x5ca>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_DMA_Init+0x5cc>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d032      	beq.n	8003a22 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f001 ff23 	bl	8005808 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d102      	bne.n	80039d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <HAL_DMA_Init+0x624>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d80c      	bhi.n	8003a10 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f001 ffa0 	bl	800593c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	e008      	b.n	8003a22 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	a7fdabf8 	.word	0xa7fdabf8
 8003a40:	cccccccd 	.word	0xcccccccd
 8003a44:	40020010 	.word	0x40020010
 8003a48:	40020028 	.word	0x40020028
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	40020058 	.word	0x40020058
 8003a54:	40020070 	.word	0x40020070
 8003a58:	40020088 	.word	0x40020088
 8003a5c:	400200a0 	.word	0x400200a0
 8003a60:	400200b8 	.word	0x400200b8
 8003a64:	40020410 	.word	0x40020410
 8003a68:	40020428 	.word	0x40020428
 8003a6c:	40020440 	.word	0x40020440
 8003a70:	40020458 	.word	0x40020458
 8003a74:	40020470 	.word	0x40020470
 8003a78:	40020488 	.word	0x40020488
 8003a7c:	400204a0 	.word	0x400204a0
 8003a80:	400204b8 	.word	0x400204b8
 8003a84:	58025408 	.word	0x58025408
 8003a88:	5802541c 	.word	0x5802541c
 8003a8c:	58025430 	.word	0x58025430
 8003a90:	58025444 	.word	0x58025444
 8003a94:	58025458 	.word	0x58025458
 8003a98:	5802546c 	.word	0x5802546c
 8003a9c:	58025480 	.word	0x58025480
 8003aa0:	58025494 	.word	0x58025494

08003aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e226      	b.n	8003f0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_DMA_Start_IT+0x2a>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e21f      	b.n	8003f0e <HAL_DMA_Start_IT+0x46a>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	f040 820a 	bne.w	8003ef8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a68      	ldr	r2, [pc, #416]	; (8003c98 <HAL_DMA_Start_IT+0x1f4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d04a      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a66      	ldr	r2, [pc, #408]	; (8003c9c <HAL_DMA_Start_IT+0x1f8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d045      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a65      	ldr	r2, [pc, #404]	; (8003ca0 <HAL_DMA_Start_IT+0x1fc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d040      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a63      	ldr	r2, [pc, #396]	; (8003ca4 <HAL_DMA_Start_IT+0x200>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d03b      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a62      	ldr	r2, [pc, #392]	; (8003ca8 <HAL_DMA_Start_IT+0x204>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d036      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a60      	ldr	r2, [pc, #384]	; (8003cac <HAL_DMA_Start_IT+0x208>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d031      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5f      	ldr	r2, [pc, #380]	; (8003cb0 <HAL_DMA_Start_IT+0x20c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d02c      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5d      	ldr	r2, [pc, #372]	; (8003cb4 <HAL_DMA_Start_IT+0x210>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d027      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5c      	ldr	r2, [pc, #368]	; (8003cb8 <HAL_DMA_Start_IT+0x214>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d022      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5a      	ldr	r2, [pc, #360]	; (8003cbc <HAL_DMA_Start_IT+0x218>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01d      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a59      	ldr	r2, [pc, #356]	; (8003cc0 <HAL_DMA_Start_IT+0x21c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d018      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a57      	ldr	r2, [pc, #348]	; (8003cc4 <HAL_DMA_Start_IT+0x220>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a56      	ldr	r2, [pc, #344]	; (8003cc8 <HAL_DMA_Start_IT+0x224>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00e      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a54      	ldr	r2, [pc, #336]	; (8003ccc <HAL_DMA_Start_IT+0x228>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a53      	ldr	r2, [pc, #332]	; (8003cd0 <HAL_DMA_Start_IT+0x22c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_DMA_Start_IT+0xee>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a51      	ldr	r2, [pc, #324]	; (8003cd4 <HAL_DMA_Start_IT+0x230>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <HAL_DMA_Start_IT+0x100>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e007      	b.n	8003bb4 <HAL_DMA_Start_IT+0x110>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f001 fb4a 	bl	8005254 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a34      	ldr	r2, [pc, #208]	; (8003c98 <HAL_DMA_Start_IT+0x1f4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d04a      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <HAL_DMA_Start_IT+0x1f8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d045      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a31      	ldr	r2, [pc, #196]	; (8003ca0 <HAL_DMA_Start_IT+0x1fc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d040      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <HAL_DMA_Start_IT+0x200>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d03b      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2e      	ldr	r2, [pc, #184]	; (8003ca8 <HAL_DMA_Start_IT+0x204>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d036      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2d      	ldr	r2, [pc, #180]	; (8003cac <HAL_DMA_Start_IT+0x208>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d031      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <HAL_DMA_Start_IT+0x20c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02c      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_DMA_Start_IT+0x210>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d027      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <HAL_DMA_Start_IT+0x214>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d022      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <HAL_DMA_Start_IT+0x218>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01d      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <HAL_DMA_Start_IT+0x21c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d018      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <HAL_DMA_Start_IT+0x220>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <HAL_DMA_Start_IT+0x224>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a21      	ldr	r2, [pc, #132]	; (8003ccc <HAL_DMA_Start_IT+0x228>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_DMA_Start_IT+0x22c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_DMA_Start_IT+0x1bc>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_DMA_Start_IT+0x230>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_DMA_Start_IT+0x1c0>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_DMA_Start_IT+0x1c2>
 8003c64:	2300      	movs	r3, #0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d036      	beq.n	8003cd8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 021e 	bic.w	r2, r3, #30
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0216 	orr.w	r2, r2, #22
 8003c7c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d03e      	beq.n	8003d04 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0208 	orr.w	r2, r2, #8
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e035      	b.n	8003d04 <HAL_DMA_Start_IT+0x260>
 8003c98:	40020010 	.word	0x40020010
 8003c9c:	40020028 	.word	0x40020028
 8003ca0:	40020040 	.word	0x40020040
 8003ca4:	40020058 	.word	0x40020058
 8003ca8:	40020070 	.word	0x40020070
 8003cac:	40020088 	.word	0x40020088
 8003cb0:	400200a0 	.word	0x400200a0
 8003cb4:	400200b8 	.word	0x400200b8
 8003cb8:	40020410 	.word	0x40020410
 8003cbc:	40020428 	.word	0x40020428
 8003cc0:	40020440 	.word	0x40020440
 8003cc4:	40020458 	.word	0x40020458
 8003cc8:	40020470 	.word	0x40020470
 8003ccc:	40020488 	.word	0x40020488
 8003cd0:	400204a0 	.word	0x400204a0
 8003cd4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 020e 	bic.w	r2, r3, #14
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 020a 	orr.w	r2, r2, #10
 8003cea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0204 	orr.w	r2, r2, #4
 8003d02:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a83      	ldr	r2, [pc, #524]	; (8003f18 <HAL_DMA_Start_IT+0x474>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d072      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a82      	ldr	r2, [pc, #520]	; (8003f1c <HAL_DMA_Start_IT+0x478>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d06d      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a80      	ldr	r2, [pc, #512]	; (8003f20 <HAL_DMA_Start_IT+0x47c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d068      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7f      	ldr	r2, [pc, #508]	; (8003f24 <HAL_DMA_Start_IT+0x480>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d063      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a7d      	ldr	r2, [pc, #500]	; (8003f28 <HAL_DMA_Start_IT+0x484>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d05e      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7c      	ldr	r2, [pc, #496]	; (8003f2c <HAL_DMA_Start_IT+0x488>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d059      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7a      	ldr	r2, [pc, #488]	; (8003f30 <HAL_DMA_Start_IT+0x48c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d054      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a79      	ldr	r2, [pc, #484]	; (8003f34 <HAL_DMA_Start_IT+0x490>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d04f      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a77      	ldr	r2, [pc, #476]	; (8003f38 <HAL_DMA_Start_IT+0x494>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d04a      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a76      	ldr	r2, [pc, #472]	; (8003f3c <HAL_DMA_Start_IT+0x498>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d045      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a74      	ldr	r2, [pc, #464]	; (8003f40 <HAL_DMA_Start_IT+0x49c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d040      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a73      	ldr	r2, [pc, #460]	; (8003f44 <HAL_DMA_Start_IT+0x4a0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d03b      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a71      	ldr	r2, [pc, #452]	; (8003f48 <HAL_DMA_Start_IT+0x4a4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d036      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a70      	ldr	r2, [pc, #448]	; (8003f4c <HAL_DMA_Start_IT+0x4a8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d031      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a6e      	ldr	r2, [pc, #440]	; (8003f50 <HAL_DMA_Start_IT+0x4ac>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02c      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a6d      	ldr	r2, [pc, #436]	; (8003f54 <HAL_DMA_Start_IT+0x4b0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d027      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6b      	ldr	r2, [pc, #428]	; (8003f58 <HAL_DMA_Start_IT+0x4b4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d022      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6a      	ldr	r2, [pc, #424]	; (8003f5c <HAL_DMA_Start_IT+0x4b8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d01d      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a68      	ldr	r2, [pc, #416]	; (8003f60 <HAL_DMA_Start_IT+0x4bc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a67      	ldr	r2, [pc, #412]	; (8003f64 <HAL_DMA_Start_IT+0x4c0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a65      	ldr	r2, [pc, #404]	; (8003f68 <HAL_DMA_Start_IT+0x4c4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a64      	ldr	r2, [pc, #400]	; (8003f6c <HAL_DMA_Start_IT+0x4c8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a62      	ldr	r2, [pc, #392]	; (8003f70 <HAL_DMA_Start_IT+0x4cc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_DMA_Start_IT+0x350>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a61      	ldr	r2, [pc, #388]	; (8003f74 <HAL_DMA_Start_IT+0x4d0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d101      	bne.n	8003df8 <HAL_DMA_Start_IT+0x354>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <HAL_DMA_Start_IT+0x356>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01a      	beq.n	8003e34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a37      	ldr	r2, [pc, #220]	; (8003f18 <HAL_DMA_Start_IT+0x474>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d04a      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a36      	ldr	r2, [pc, #216]	; (8003f1c <HAL_DMA_Start_IT+0x478>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d045      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a34      	ldr	r2, [pc, #208]	; (8003f20 <HAL_DMA_Start_IT+0x47c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d040      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a33      	ldr	r2, [pc, #204]	; (8003f24 <HAL_DMA_Start_IT+0x480>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d03b      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a31      	ldr	r2, [pc, #196]	; (8003f28 <HAL_DMA_Start_IT+0x484>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d036      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <HAL_DMA_Start_IT+0x488>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d031      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <HAL_DMA_Start_IT+0x48c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02c      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2d      	ldr	r2, [pc, #180]	; (8003f34 <HAL_DMA_Start_IT+0x490>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d027      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <HAL_DMA_Start_IT+0x494>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <HAL_DMA_Start_IT+0x498>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d01d      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <HAL_DMA_Start_IT+0x49c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <HAL_DMA_Start_IT+0x4a0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	; (8003f48 <HAL_DMA_Start_IT+0x4a4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a24      	ldr	r2, [pc, #144]	; (8003f4c <HAL_DMA_Start_IT+0x4a8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <HAL_DMA_Start_IT+0x4ac>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x430>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <HAL_DMA_Start_IT+0x4b0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <HAL_DMA_Start_IT+0x442>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e012      	b.n	8003f0c <HAL_DMA_Start_IT+0x468>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e009      	b.n	8003f0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40020010 	.word	0x40020010
 8003f1c:	40020028 	.word	0x40020028
 8003f20:	40020040 	.word	0x40020040
 8003f24:	40020058 	.word	0x40020058
 8003f28:	40020070 	.word	0x40020070
 8003f2c:	40020088 	.word	0x40020088
 8003f30:	400200a0 	.word	0x400200a0
 8003f34:	400200b8 	.word	0x400200b8
 8003f38:	40020410 	.word	0x40020410
 8003f3c:	40020428 	.word	0x40020428
 8003f40:	40020440 	.word	0x40020440
 8003f44:	40020458 	.word	0x40020458
 8003f48:	40020470 	.word	0x40020470
 8003f4c:	40020488 	.word	0x40020488
 8003f50:	400204a0 	.word	0x400204a0
 8003f54:	400204b8 	.word	0x400204b8
 8003f58:	58025408 	.word	0x58025408
 8003f5c:	5802541c 	.word	0x5802541c
 8003f60:	58025430 	.word	0x58025430
 8003f64:	58025444 	.word	0x58025444
 8003f68:	58025458 	.word	0x58025458
 8003f6c:	5802546c 	.word	0x5802546c
 8003f70:	58025480 	.word	0x58025480
 8003f74:	58025494 	.word	0x58025494

08003f78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e205      	b.n	8004396 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d004      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2280      	movs	r2, #128	; 0x80
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e1fa      	b.n	8004396 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a8c      	ldr	r2, [pc, #560]	; (80041d8 <HAL_DMA_Abort_IT+0x260>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d04a      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a8b      	ldr	r2, [pc, #556]	; (80041dc <HAL_DMA_Abort_IT+0x264>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d045      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a89      	ldr	r2, [pc, #548]	; (80041e0 <HAL_DMA_Abort_IT+0x268>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d040      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a88      	ldr	r2, [pc, #544]	; (80041e4 <HAL_DMA_Abort_IT+0x26c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d03b      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a86      	ldr	r2, [pc, #536]	; (80041e8 <HAL_DMA_Abort_IT+0x270>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d036      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a85      	ldr	r2, [pc, #532]	; (80041ec <HAL_DMA_Abort_IT+0x274>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a83      	ldr	r2, [pc, #524]	; (80041f0 <HAL_DMA_Abort_IT+0x278>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02c      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a82      	ldr	r2, [pc, #520]	; (80041f4 <HAL_DMA_Abort_IT+0x27c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d027      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a80      	ldr	r2, [pc, #512]	; (80041f8 <HAL_DMA_Abort_IT+0x280>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7f      	ldr	r2, [pc, #508]	; (80041fc <HAL_DMA_Abort_IT+0x284>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d01d      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a7d      	ldr	r2, [pc, #500]	; (8004200 <HAL_DMA_Abort_IT+0x288>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7c      	ldr	r2, [pc, #496]	; (8004204 <HAL_DMA_Abort_IT+0x28c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a7a      	ldr	r2, [pc, #488]	; (8004208 <HAL_DMA_Abort_IT+0x290>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a79      	ldr	r2, [pc, #484]	; (800420c <HAL_DMA_Abort_IT+0x294>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a77      	ldr	r2, [pc, #476]	; (8004210 <HAL_DMA_Abort_IT+0x298>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_DMA_Abort_IT+0xc8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a76      	ldr	r2, [pc, #472]	; (8004214 <HAL_DMA_Abort_IT+0x29c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_DMA_Abort_IT+0xcc>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_DMA_Abort_IT+0xce>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d065      	beq.n	8004116 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a60      	ldr	r2, [pc, #384]	; (80041d8 <HAL_DMA_Abort_IT+0x260>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d04a      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a5e      	ldr	r2, [pc, #376]	; (80041dc <HAL_DMA_Abort_IT+0x264>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d045      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a5d      	ldr	r2, [pc, #372]	; (80041e0 <HAL_DMA_Abort_IT+0x268>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d040      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a5b      	ldr	r2, [pc, #364]	; (80041e4 <HAL_DMA_Abort_IT+0x26c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d03b      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a5a      	ldr	r2, [pc, #360]	; (80041e8 <HAL_DMA_Abort_IT+0x270>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d036      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a58      	ldr	r2, [pc, #352]	; (80041ec <HAL_DMA_Abort_IT+0x274>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d031      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a57      	ldr	r2, [pc, #348]	; (80041f0 <HAL_DMA_Abort_IT+0x278>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d02c      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a55      	ldr	r2, [pc, #340]	; (80041f4 <HAL_DMA_Abort_IT+0x27c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d027      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a54      	ldr	r2, [pc, #336]	; (80041f8 <HAL_DMA_Abort_IT+0x280>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a52      	ldr	r2, [pc, #328]	; (80041fc <HAL_DMA_Abort_IT+0x284>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01d      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a51      	ldr	r2, [pc, #324]	; (8004200 <HAL_DMA_Abort_IT+0x288>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d018      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a4f      	ldr	r2, [pc, #316]	; (8004204 <HAL_DMA_Abort_IT+0x28c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a4e      	ldr	r2, [pc, #312]	; (8004208 <HAL_DMA_Abort_IT+0x290>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a4c      	ldr	r2, [pc, #304]	; (800420c <HAL_DMA_Abort_IT+0x294>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a4b      	ldr	r2, [pc, #300]	; (8004210 <HAL_DMA_Abort_IT+0x298>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x17a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a49      	ldr	r2, [pc, #292]	; (8004214 <HAL_DMA_Abort_IT+0x29c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d108      	bne.n	8004104 <HAL_DMA_Abort_IT+0x18c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e147      	b.n	8004394 <HAL_DMA_Abort_IT+0x41c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e13e      	b.n	8004394 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 020e 	bic.w	r2, r2, #14
 8004124:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2b      	ldr	r2, [pc, #172]	; (80041d8 <HAL_DMA_Abort_IT+0x260>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d04a      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a29      	ldr	r2, [pc, #164]	; (80041dc <HAL_DMA_Abort_IT+0x264>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d045      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <HAL_DMA_Abort_IT+0x268>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d040      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <HAL_DMA_Abort_IT+0x26c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d03b      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <HAL_DMA_Abort_IT+0x270>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d036      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a23      	ldr	r2, [pc, #140]	; (80041ec <HAL_DMA_Abort_IT+0x274>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d031      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <HAL_DMA_Abort_IT+0x278>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d02c      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <HAL_DMA_Abort_IT+0x27c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d027      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_DMA_Abort_IT+0x280>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d022      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_DMA_Abort_IT+0x284>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01d      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <HAL_DMA_Abort_IT+0x288>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d018      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <HAL_DMA_Abort_IT+0x28c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a19      	ldr	r2, [pc, #100]	; (8004208 <HAL_DMA_Abort_IT+0x290>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a17      	ldr	r2, [pc, #92]	; (800420c <HAL_DMA_Abort_IT+0x294>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a16      	ldr	r2, [pc, #88]	; (8004210 <HAL_DMA_Abort_IT+0x298>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_DMA_Abort_IT+0x24e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a14      	ldr	r2, [pc, #80]	; (8004214 <HAL_DMA_Abort_IT+0x29c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d128      	bne.n	8004218 <HAL_DMA_Abort_IT+0x2a0>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e027      	b.n	8004228 <HAL_DMA_Abort_IT+0x2b0>
 80041d8:	40020010 	.word	0x40020010
 80041dc:	40020028 	.word	0x40020028
 80041e0:	40020040 	.word	0x40020040
 80041e4:	40020058 	.word	0x40020058
 80041e8:	40020070 	.word	0x40020070
 80041ec:	40020088 	.word	0x40020088
 80041f0:	400200a0 	.word	0x400200a0
 80041f4:	400200b8 	.word	0x400200b8
 80041f8:	40020410 	.word	0x40020410
 80041fc:	40020428 	.word	0x40020428
 8004200:	40020440 	.word	0x40020440
 8004204:	40020458 	.word	0x40020458
 8004208:	40020470 	.word	0x40020470
 800420c:	40020488 	.word	0x40020488
 8004210:	400204a0 	.word	0x400204a0
 8004214:	400204b8 	.word	0x400204b8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5c      	ldr	r2, [pc, #368]	; (80043a0 <HAL_DMA_Abort_IT+0x428>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d072      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a5b      	ldr	r2, [pc, #364]	; (80043a4 <HAL_DMA_Abort_IT+0x42c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d06d      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a59      	ldr	r2, [pc, #356]	; (80043a8 <HAL_DMA_Abort_IT+0x430>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d068      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a58      	ldr	r2, [pc, #352]	; (80043ac <HAL_DMA_Abort_IT+0x434>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d063      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a56      	ldr	r2, [pc, #344]	; (80043b0 <HAL_DMA_Abort_IT+0x438>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d05e      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a55      	ldr	r2, [pc, #340]	; (80043b4 <HAL_DMA_Abort_IT+0x43c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d059      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a53      	ldr	r2, [pc, #332]	; (80043b8 <HAL_DMA_Abort_IT+0x440>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d054      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a52      	ldr	r2, [pc, #328]	; (80043bc <HAL_DMA_Abort_IT+0x444>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d04f      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a50      	ldr	r2, [pc, #320]	; (80043c0 <HAL_DMA_Abort_IT+0x448>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d04a      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a4f      	ldr	r2, [pc, #316]	; (80043c4 <HAL_DMA_Abort_IT+0x44c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d045      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a4d      	ldr	r2, [pc, #308]	; (80043c8 <HAL_DMA_Abort_IT+0x450>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d040      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a4c      	ldr	r2, [pc, #304]	; (80043cc <HAL_DMA_Abort_IT+0x454>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d03b      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a4a      	ldr	r2, [pc, #296]	; (80043d0 <HAL_DMA_Abort_IT+0x458>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d036      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a49      	ldr	r2, [pc, #292]	; (80043d4 <HAL_DMA_Abort_IT+0x45c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d031      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a47      	ldr	r2, [pc, #284]	; (80043d8 <HAL_DMA_Abort_IT+0x460>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d02c      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a46      	ldr	r2, [pc, #280]	; (80043dc <HAL_DMA_Abort_IT+0x464>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d027      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a44      	ldr	r2, [pc, #272]	; (80043e0 <HAL_DMA_Abort_IT+0x468>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a43      	ldr	r2, [pc, #268]	; (80043e4 <HAL_DMA_Abort_IT+0x46c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d01d      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a41      	ldr	r2, [pc, #260]	; (80043e8 <HAL_DMA_Abort_IT+0x470>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a40      	ldr	r2, [pc, #256]	; (80043ec <HAL_DMA_Abort_IT+0x474>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a3e      	ldr	r2, [pc, #248]	; (80043f0 <HAL_DMA_Abort_IT+0x478>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a3d      	ldr	r2, [pc, #244]	; (80043f4 <HAL_DMA_Abort_IT+0x47c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a3b      	ldr	r2, [pc, #236]	; (80043f8 <HAL_DMA_Abort_IT+0x480>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_DMA_Abort_IT+0x3a0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3a      	ldr	r2, [pc, #232]	; (80043fc <HAL_DMA_Abort_IT+0x484>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d101      	bne.n	800431c <HAL_DMA_Abort_IT+0x3a4>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_DMA_Abort_IT+0x3a6>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d028      	beq.n	8004374 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004330:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004350:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00c      	beq.n	8004374 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004368:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004372:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40020010 	.word	0x40020010
 80043a4:	40020028 	.word	0x40020028
 80043a8:	40020040 	.word	0x40020040
 80043ac:	40020058 	.word	0x40020058
 80043b0:	40020070 	.word	0x40020070
 80043b4:	40020088 	.word	0x40020088
 80043b8:	400200a0 	.word	0x400200a0
 80043bc:	400200b8 	.word	0x400200b8
 80043c0:	40020410 	.word	0x40020410
 80043c4:	40020428 	.word	0x40020428
 80043c8:	40020440 	.word	0x40020440
 80043cc:	40020458 	.word	0x40020458
 80043d0:	40020470 	.word	0x40020470
 80043d4:	40020488 	.word	0x40020488
 80043d8:	400204a0 	.word	0x400204a0
 80043dc:	400204b8 	.word	0x400204b8
 80043e0:	58025408 	.word	0x58025408
 80043e4:	5802541c 	.word	0x5802541c
 80043e8:	58025430 	.word	0x58025430
 80043ec:	58025444 	.word	0x58025444
 80043f0:	58025458 	.word	0x58025458
 80043f4:	5802546c 	.word	0x5802546c
 80043f8:	58025480 	.word	0x58025480
 80043fc:	58025494 	.word	0x58025494

08004400 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800440c:	4b67      	ldr	r3, [pc, #412]	; (80045ac <HAL_DMA_IRQHandler+0x1ac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a67      	ldr	r2, [pc, #412]	; (80045b0 <HAL_DMA_IRQHandler+0x1b0>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a5f      	ldr	r2, [pc, #380]	; (80045b4 <HAL_DMA_IRQHandler+0x1b4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d04a      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a5d      	ldr	r2, [pc, #372]	; (80045b8 <HAL_DMA_IRQHandler+0x1b8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d045      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a5c      	ldr	r2, [pc, #368]	; (80045bc <HAL_DMA_IRQHandler+0x1bc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d040      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a5a      	ldr	r2, [pc, #360]	; (80045c0 <HAL_DMA_IRQHandler+0x1c0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d03b      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a59      	ldr	r2, [pc, #356]	; (80045c4 <HAL_DMA_IRQHandler+0x1c4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d036      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a57      	ldr	r2, [pc, #348]	; (80045c8 <HAL_DMA_IRQHandler+0x1c8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d031      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a56      	ldr	r2, [pc, #344]	; (80045cc <HAL_DMA_IRQHandler+0x1cc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d02c      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a54      	ldr	r2, [pc, #336]	; (80045d0 <HAL_DMA_IRQHandler+0x1d0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d027      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a53      	ldr	r2, [pc, #332]	; (80045d4 <HAL_DMA_IRQHandler+0x1d4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d022      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a51      	ldr	r2, [pc, #324]	; (80045d8 <HAL_DMA_IRQHandler+0x1d8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01d      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a50      	ldr	r2, [pc, #320]	; (80045dc <HAL_DMA_IRQHandler+0x1dc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a4e      	ldr	r2, [pc, #312]	; (80045e0 <HAL_DMA_IRQHandler+0x1e0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4d      	ldr	r2, [pc, #308]	; (80045e4 <HAL_DMA_IRQHandler+0x1e4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a4b      	ldr	r2, [pc, #300]	; (80045e8 <HAL_DMA_IRQHandler+0x1e8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a4a      	ldr	r2, [pc, #296]	; (80045ec <HAL_DMA_IRQHandler+0x1ec>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xd2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a48      	ldr	r2, [pc, #288]	; (80045f0 <HAL_DMA_IRQHandler+0x1f0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_DMA_IRQHandler+0xd6>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_DMA_IRQHandler+0xd8>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 842b 	beq.w	8004d34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2208      	movs	r2, #8
 80044e8:	409a      	lsls	r2, r3
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80a2 	beq.w	8004638 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a2e      	ldr	r2, [pc, #184]	; (80045b4 <HAL_DMA_IRQHandler+0x1b4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d04a      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <HAL_DMA_IRQHandler+0x1b8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d045      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <HAL_DMA_IRQHandler+0x1bc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d040      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <HAL_DMA_IRQHandler+0x1c0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d03b      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a28      	ldr	r2, [pc, #160]	; (80045c4 <HAL_DMA_IRQHandler+0x1c4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d036      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a27      	ldr	r2, [pc, #156]	; (80045c8 <HAL_DMA_IRQHandler+0x1c8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d031      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a25      	ldr	r2, [pc, #148]	; (80045cc <HAL_DMA_IRQHandler+0x1cc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02c      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <HAL_DMA_IRQHandler+0x1d0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d027      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <HAL_DMA_IRQHandler+0x1d4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d022      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <HAL_DMA_IRQHandler+0x1d8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d01d      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_DMA_IRQHandler+0x1dc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d018      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <HAL_DMA_IRQHandler+0x1e0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_DMA_IRQHandler+0x1e4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00e      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_DMA_IRQHandler+0x1e8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <HAL_DMA_IRQHandler+0x1ec>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_DMA_IRQHandler+0x194>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <HAL_DMA_IRQHandler+0x1f0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d12f      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x1f4>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bf14      	ite	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	2300      	moveq	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	e02e      	b.n	8004608 <HAL_DMA_IRQHandler+0x208>
 80045aa:	bf00      	nop
 80045ac:	24000018 	.word	0x24000018
 80045b0:	1b4e81b5 	.word	0x1b4e81b5
 80045b4:	40020010 	.word	0x40020010
 80045b8:	40020028 	.word	0x40020028
 80045bc:	40020040 	.word	0x40020040
 80045c0:	40020058 	.word	0x40020058
 80045c4:	40020070 	.word	0x40020070
 80045c8:	40020088 	.word	0x40020088
 80045cc:	400200a0 	.word	0x400200a0
 80045d0:	400200b8 	.word	0x400200b8
 80045d4:	40020410 	.word	0x40020410
 80045d8:	40020428 	.word	0x40020428
 80045dc:	40020440 	.word	0x40020440
 80045e0:	40020458 	.word	0x40020458
 80045e4:	40020470 	.word	0x40020470
 80045e8:	40020488 	.word	0x40020488
 80045ec:	400204a0 	.word	0x400204a0
 80045f0:	400204b8 	.word	0x400204b8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d015      	beq.n	8004638 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0204 	bic.w	r2, r2, #4
 800461a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2208      	movs	r2, #8
 8004626:	409a      	lsls	r2, r3
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	f043 0201 	orr.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	fa22 f303 	lsr.w	r3, r2, r3
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d06e      	beq.n	800472c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a69      	ldr	r2, [pc, #420]	; (80047f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d04a      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a67      	ldr	r2, [pc, #412]	; (80047fc <HAL_DMA_IRQHandler+0x3fc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d045      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a66      	ldr	r2, [pc, #408]	; (8004800 <HAL_DMA_IRQHandler+0x400>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d040      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a64      	ldr	r2, [pc, #400]	; (8004804 <HAL_DMA_IRQHandler+0x404>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d03b      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a63      	ldr	r2, [pc, #396]	; (8004808 <HAL_DMA_IRQHandler+0x408>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d036      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a61      	ldr	r2, [pc, #388]	; (800480c <HAL_DMA_IRQHandler+0x40c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d031      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a60      	ldr	r2, [pc, #384]	; (8004810 <HAL_DMA_IRQHandler+0x410>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d02c      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a5e      	ldr	r2, [pc, #376]	; (8004814 <HAL_DMA_IRQHandler+0x414>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d027      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5d      	ldr	r2, [pc, #372]	; (8004818 <HAL_DMA_IRQHandler+0x418>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d022      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5b      	ldr	r2, [pc, #364]	; (800481c <HAL_DMA_IRQHandler+0x41c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01d      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5a      	ldr	r2, [pc, #360]	; (8004820 <HAL_DMA_IRQHandler+0x420>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a58      	ldr	r2, [pc, #352]	; (8004824 <HAL_DMA_IRQHandler+0x424>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_DMA_IRQHandler+0x428>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a55      	ldr	r2, [pc, #340]	; (800482c <HAL_DMA_IRQHandler+0x42c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a54      	ldr	r2, [pc, #336]	; (8004830 <HAL_DMA_IRQHandler+0x430>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_DMA_IRQHandler+0x2ee>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a52      	ldr	r2, [pc, #328]	; (8004834 <HAL_DMA_IRQHandler+0x434>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d10a      	bne.n	8004704 <HAL_DMA_IRQHandler+0x304>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e003      	b.n	800470c <HAL_DMA_IRQHandler+0x30c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2201      	movs	r2, #1
 800471a:	409a      	lsls	r2, r3
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	2204      	movs	r2, #4
 8004736:	409a      	lsls	r2, r3
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 808f 	beq.w	8004860 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2c      	ldr	r2, [pc, #176]	; (80047f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04a      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <HAL_DMA_IRQHandler+0x3fc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d045      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a29      	ldr	r2, [pc, #164]	; (8004800 <HAL_DMA_IRQHandler+0x400>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d040      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a27      	ldr	r2, [pc, #156]	; (8004804 <HAL_DMA_IRQHandler+0x404>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d03b      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a26      	ldr	r2, [pc, #152]	; (8004808 <HAL_DMA_IRQHandler+0x408>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d036      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a24      	ldr	r2, [pc, #144]	; (800480c <HAL_DMA_IRQHandler+0x40c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d031      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a23      	ldr	r2, [pc, #140]	; (8004810 <HAL_DMA_IRQHandler+0x410>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d02c      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <HAL_DMA_IRQHandler+0x414>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d027      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_DMA_IRQHandler+0x418>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d022      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1e      	ldr	r2, [pc, #120]	; (800481c <HAL_DMA_IRQHandler+0x41c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <HAL_DMA_IRQHandler+0x420>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d018      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <HAL_DMA_IRQHandler+0x424>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1a      	ldr	r2, [pc, #104]	; (8004828 <HAL_DMA_IRQHandler+0x428>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_DMA_IRQHandler+0x42c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a17      	ldr	r2, [pc, #92]	; (8004830 <HAL_DMA_IRQHandler+0x430>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x3e2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_DMA_IRQHandler+0x434>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d12a      	bne.n	8004838 <HAL_DMA_IRQHandler+0x438>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e023      	b.n	8004840 <HAL_DMA_IRQHandler+0x440>
 80047f8:	40020010 	.word	0x40020010
 80047fc:	40020028 	.word	0x40020028
 8004800:	40020040 	.word	0x40020040
 8004804:	40020058 	.word	0x40020058
 8004808:	40020070 	.word	0x40020070
 800480c:	40020088 	.word	0x40020088
 8004810:	400200a0 	.word	0x400200a0
 8004814:	400200b8 	.word	0x400200b8
 8004818:	40020410 	.word	0x40020410
 800481c:	40020428 	.word	0x40020428
 8004820:	40020440 	.word	0x40020440
 8004824:	40020458 	.word	0x40020458
 8004828:	40020470 	.word	0x40020470
 800482c:	40020488 	.word	0x40020488
 8004830:	400204a0 	.word	0x400204a0
 8004834:	400204b8 	.word	0x400204b8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2204      	movs	r2, #4
 800484e:	409a      	lsls	r2, r3
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0204 	orr.w	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2210      	movs	r2, #16
 800486a:	409a      	lsls	r2, r3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80a6 	beq.w	80049c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a85      	ldr	r2, [pc, #532]	; (8004a90 <HAL_DMA_IRQHandler+0x690>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d04a      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a83      	ldr	r2, [pc, #524]	; (8004a94 <HAL_DMA_IRQHandler+0x694>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d045      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a82      	ldr	r2, [pc, #520]	; (8004a98 <HAL_DMA_IRQHandler+0x698>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d040      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a80      	ldr	r2, [pc, #512]	; (8004a9c <HAL_DMA_IRQHandler+0x69c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d03b      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a7f      	ldr	r2, [pc, #508]	; (8004aa0 <HAL_DMA_IRQHandler+0x6a0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d036      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a7d      	ldr	r2, [pc, #500]	; (8004aa4 <HAL_DMA_IRQHandler+0x6a4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d031      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7c      	ldr	r2, [pc, #496]	; (8004aa8 <HAL_DMA_IRQHandler+0x6a8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d02c      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a7a      	ldr	r2, [pc, #488]	; (8004aac <HAL_DMA_IRQHandler+0x6ac>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d027      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a79      	ldr	r2, [pc, #484]	; (8004ab0 <HAL_DMA_IRQHandler+0x6b0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a77      	ldr	r2, [pc, #476]	; (8004ab4 <HAL_DMA_IRQHandler+0x6b4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01d      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a76      	ldr	r2, [pc, #472]	; (8004ab8 <HAL_DMA_IRQHandler+0x6b8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a74      	ldr	r2, [pc, #464]	; (8004abc <HAL_DMA_IRQHandler+0x6bc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a73      	ldr	r2, [pc, #460]	; (8004ac0 <HAL_DMA_IRQHandler+0x6c0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a71      	ldr	r2, [pc, #452]	; (8004ac4 <HAL_DMA_IRQHandler+0x6c4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a70      	ldr	r2, [pc, #448]	; (8004ac8 <HAL_DMA_IRQHandler+0x6c8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_DMA_IRQHandler+0x516>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a6e      	ldr	r2, [pc, #440]	; (8004acc <HAL_DMA_IRQHandler+0x6cc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10a      	bne.n	800492c <HAL_DMA_IRQHandler+0x52c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e009      	b.n	8004940 <HAL_DMA_IRQHandler+0x540>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d03e      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	2210      	movs	r2, #16
 800494e:	409a      	lsls	r2, r3
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d018      	beq.n	8004994 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d108      	bne.n	8004982 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d024      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
 8004980:	e01f      	b.n	80049c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01b      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
 8004992:	e016      	b.n	80049c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0208 	bic.w	r2, r2, #8
 80049b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	2220      	movs	r2, #32
 80049cc:	409a      	lsls	r2, r3
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8110 	beq.w	8004bf8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2c      	ldr	r2, [pc, #176]	; (8004a90 <HAL_DMA_IRQHandler+0x690>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d04a      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <HAL_DMA_IRQHandler+0x694>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d045      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <HAL_DMA_IRQHandler+0x698>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d040      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <HAL_DMA_IRQHandler+0x69c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d03b      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <HAL_DMA_IRQHandler+0x6a0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d036      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <HAL_DMA_IRQHandler+0x6a4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d031      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a23      	ldr	r2, [pc, #140]	; (8004aa8 <HAL_DMA_IRQHandler+0x6a8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02c      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a22      	ldr	r2, [pc, #136]	; (8004aac <HAL_DMA_IRQHandler+0x6ac>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d027      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <HAL_DMA_IRQHandler+0x6b0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d022      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_DMA_IRQHandler+0x6b4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d01d      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_DMA_IRQHandler+0x6b8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d018      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <HAL_DMA_IRQHandler+0x6bc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d013      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <HAL_DMA_IRQHandler+0x6c0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00e      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <HAL_DMA_IRQHandler+0x6c4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <HAL_DMA_IRQHandler+0x6c8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x678>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <HAL_DMA_IRQHandler+0x6cc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d12b      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x6d0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf14      	ite	ne
 8004a86:	2301      	movne	r3, #1
 8004a88:	2300      	moveq	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	e02a      	b.n	8004ae4 <HAL_DMA_IRQHandler+0x6e4>
 8004a8e:	bf00      	nop
 8004a90:	40020010 	.word	0x40020010
 8004a94:	40020028 	.word	0x40020028
 8004a98:	40020040 	.word	0x40020040
 8004a9c:	40020058 	.word	0x40020058
 8004aa0:	40020070 	.word	0x40020070
 8004aa4:	40020088 	.word	0x40020088
 8004aa8:	400200a0 	.word	0x400200a0
 8004aac:	400200b8 	.word	0x400200b8
 8004ab0:	40020410 	.word	0x40020410
 8004ab4:	40020428 	.word	0x40020428
 8004ab8:	40020440 	.word	0x40020440
 8004abc:	40020458 	.word	0x40020458
 8004ac0:	40020470 	.word	0x40020470
 8004ac4:	40020488 	.word	0x40020488
 8004ac8:	400204a0 	.word	0x400204a0
 8004acc:	400204b8 	.word	0x400204b8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf14      	ite	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	2300      	moveq	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8087 	beq.w	8004bf8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2220      	movs	r2, #32
 8004af4:	409a      	lsls	r2, r3
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d139      	bne.n	8004b7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0216 	bic.w	r2, r2, #22
 8004b14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <HAL_DMA_IRQHandler+0x736>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0208 	bic.w	r2, r2, #8
 8004b44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	223f      	movs	r2, #63	; 0x3f
 8004b50:	409a      	lsls	r2, r3
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 834a 	beq.w	8005204 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
          }
          return;
 8004b78:	e344      	b.n	8005204 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d018      	beq.n	8004bba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d108      	bne.n	8004ba8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02c      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
 8004ba6:	e027      	b.n	8004bf8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d023      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
 8004bb8:	e01e      	b.n	8004bf8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10f      	bne.n	8004be8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0210 	bic.w	r2, r2, #16
 8004bd6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8306 	beq.w	800520e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8088 	beq.w	8004d20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2204      	movs	r2, #4
 8004c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a7a      	ldr	r2, [pc, #488]	; (8004e08 <HAL_DMA_IRQHandler+0xa08>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d04a      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a79      	ldr	r2, [pc, #484]	; (8004e0c <HAL_DMA_IRQHandler+0xa0c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d045      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a77      	ldr	r2, [pc, #476]	; (8004e10 <HAL_DMA_IRQHandler+0xa10>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d040      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a76      	ldr	r2, [pc, #472]	; (8004e14 <HAL_DMA_IRQHandler+0xa14>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d03b      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a74      	ldr	r2, [pc, #464]	; (8004e18 <HAL_DMA_IRQHandler+0xa18>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d036      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a73      	ldr	r2, [pc, #460]	; (8004e1c <HAL_DMA_IRQHandler+0xa1c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d031      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a71      	ldr	r2, [pc, #452]	; (8004e20 <HAL_DMA_IRQHandler+0xa20>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d02c      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a70      	ldr	r2, [pc, #448]	; (8004e24 <HAL_DMA_IRQHandler+0xa24>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d027      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a6e      	ldr	r2, [pc, #440]	; (8004e28 <HAL_DMA_IRQHandler+0xa28>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d022      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a6d      	ldr	r2, [pc, #436]	; (8004e2c <HAL_DMA_IRQHandler+0xa2c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d01d      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a6b      	ldr	r2, [pc, #428]	; (8004e30 <HAL_DMA_IRQHandler+0xa30>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d018      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6a      	ldr	r2, [pc, #424]	; (8004e34 <HAL_DMA_IRQHandler+0xa34>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d013      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a68      	ldr	r2, [pc, #416]	; (8004e38 <HAL_DMA_IRQHandler+0xa38>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00e      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a67      	ldr	r2, [pc, #412]	; (8004e3c <HAL_DMA_IRQHandler+0xa3c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d009      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a65      	ldr	r2, [pc, #404]	; (8004e40 <HAL_DMA_IRQHandler+0xa40>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x8b8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a64      	ldr	r2, [pc, #400]	; (8004e44 <HAL_DMA_IRQHandler+0xa44>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d108      	bne.n	8004cca <HAL_DMA_IRQHandler+0x8ca>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e007      	b.n	8004cda <HAL_DMA_IRQHandler+0x8da>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d307      	bcc.n	8004cf6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f2      	bne.n	8004cda <HAL_DMA_IRQHandler+0x8da>
 8004cf4:	e000      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004cf6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2203      	movs	r2, #3
 8004d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004d16:	e003      	b.n	8004d20 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8272 	beq.w	800520e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
 8004d32:	e26c      	b.n	800520e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a43      	ldr	r2, [pc, #268]	; (8004e48 <HAL_DMA_IRQHandler+0xa48>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d022      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x984>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a42      	ldr	r2, [pc, #264]	; (8004e4c <HAL_DMA_IRQHandler+0xa4c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d01d      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x984>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a40      	ldr	r2, [pc, #256]	; (8004e50 <HAL_DMA_IRQHandler+0xa50>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d018      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x984>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a3f      	ldr	r2, [pc, #252]	; (8004e54 <HAL_DMA_IRQHandler+0xa54>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x984>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a3d      	ldr	r2, [pc, #244]	; (8004e58 <HAL_DMA_IRQHandler+0xa58>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00e      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x984>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <HAL_DMA_IRQHandler+0xa5c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d009      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x984>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <HAL_DMA_IRQHandler+0xa60>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x984>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a39      	ldr	r2, [pc, #228]	; (8004e64 <HAL_DMA_IRQHandler+0xa64>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d101      	bne.n	8004d88 <HAL_DMA_IRQHandler+0x988>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_DMA_IRQHandler+0x98a>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 823f 	beq.w	800520e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2204      	movs	r2, #4
 8004da2:	409a      	lsls	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80cd 	beq.w	8004f48 <HAL_DMA_IRQHandler+0xb48>
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80c7 	beq.w	8004f48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d049      	beq.n	8004e68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8210 	beq.w	8005208 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004df0:	e20a      	b.n	8005208 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8206 	beq.w	8005208 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e04:	e200      	b.n	8005208 <HAL_DMA_IRQHandler+0xe08>
 8004e06:	bf00      	nop
 8004e08:	40020010 	.word	0x40020010
 8004e0c:	40020028 	.word	0x40020028
 8004e10:	40020040 	.word	0x40020040
 8004e14:	40020058 	.word	0x40020058
 8004e18:	40020070 	.word	0x40020070
 8004e1c:	40020088 	.word	0x40020088
 8004e20:	400200a0 	.word	0x400200a0
 8004e24:	400200b8 	.word	0x400200b8
 8004e28:	40020410 	.word	0x40020410
 8004e2c:	40020428 	.word	0x40020428
 8004e30:	40020440 	.word	0x40020440
 8004e34:	40020458 	.word	0x40020458
 8004e38:	40020470 	.word	0x40020470
 8004e3c:	40020488 	.word	0x40020488
 8004e40:	400204a0 	.word	0x400204a0
 8004e44:	400204b8 	.word	0x400204b8
 8004e48:	58025408 	.word	0x58025408
 8004e4c:	5802541c 	.word	0x5802541c
 8004e50:	58025430 	.word	0x58025430
 8004e54:	58025444 	.word	0x58025444
 8004e58:	58025458 	.word	0x58025458
 8004e5c:	5802546c 	.word	0x5802546c
 8004e60:	58025480 	.word	0x58025480
 8004e64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d160      	bne.n	8004f34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a8c      	ldr	r2, [pc, #560]	; (80050a8 <HAL_DMA_IRQHandler+0xca8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d04a      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a8a      	ldr	r2, [pc, #552]	; (80050ac <HAL_DMA_IRQHandler+0xcac>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d045      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a89      	ldr	r2, [pc, #548]	; (80050b0 <HAL_DMA_IRQHandler+0xcb0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d040      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a87      	ldr	r2, [pc, #540]	; (80050b4 <HAL_DMA_IRQHandler+0xcb4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d03b      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a86      	ldr	r2, [pc, #536]	; (80050b8 <HAL_DMA_IRQHandler+0xcb8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d036      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a84      	ldr	r2, [pc, #528]	; (80050bc <HAL_DMA_IRQHandler+0xcbc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d031      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a83      	ldr	r2, [pc, #524]	; (80050c0 <HAL_DMA_IRQHandler+0xcc0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d02c      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a81      	ldr	r2, [pc, #516]	; (80050c4 <HAL_DMA_IRQHandler+0xcc4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d027      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a80      	ldr	r2, [pc, #512]	; (80050c8 <HAL_DMA_IRQHandler+0xcc8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a7e      	ldr	r2, [pc, #504]	; (80050cc <HAL_DMA_IRQHandler+0xccc>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01d      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7d      	ldr	r2, [pc, #500]	; (80050d0 <HAL_DMA_IRQHandler+0xcd0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7b      	ldr	r2, [pc, #492]	; (80050d4 <HAL_DMA_IRQHandler+0xcd4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7a      	ldr	r2, [pc, #488]	; (80050d8 <HAL_DMA_IRQHandler+0xcd8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a78      	ldr	r2, [pc, #480]	; (80050dc <HAL_DMA_IRQHandler+0xcdc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a77      	ldr	r2, [pc, #476]	; (80050e0 <HAL_DMA_IRQHandler+0xce0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xb12>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a75      	ldr	r2, [pc, #468]	; (80050e4 <HAL_DMA_IRQHandler+0xce4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d108      	bne.n	8004f24 <HAL_DMA_IRQHandler+0xb24>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0208 	bic.w	r2, r2, #8
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e007      	b.n	8004f34 <HAL_DMA_IRQHandler+0xb34>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0204 	bic.w	r2, r2, #4
 8004f32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8165 	beq.w	8005208 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f46:	e15f      	b.n	8005208 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2202      	movs	r2, #2
 8004f52:	409a      	lsls	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80c5 	beq.w	80050e8 <HAL_DMA_IRQHandler+0xce8>
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80bf 	beq.w	80050e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	2202      	movs	r2, #2
 8004f74:	409a      	lsls	r2, r3
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d018      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 813a 	beq.w	800520c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa0:	e134      	b.n	800520c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8130 	beq.w	800520c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fb4:	e12a      	b.n	800520c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d168      	bne.n	8005092 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a38      	ldr	r2, [pc, #224]	; (80050a8 <HAL_DMA_IRQHandler+0xca8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d04a      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a37      	ldr	r2, [pc, #220]	; (80050ac <HAL_DMA_IRQHandler+0xcac>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d045      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a35      	ldr	r2, [pc, #212]	; (80050b0 <HAL_DMA_IRQHandler+0xcb0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d040      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a34      	ldr	r2, [pc, #208]	; (80050b4 <HAL_DMA_IRQHandler+0xcb4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d03b      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a32      	ldr	r2, [pc, #200]	; (80050b8 <HAL_DMA_IRQHandler+0xcb8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d036      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a31      	ldr	r2, [pc, #196]	; (80050bc <HAL_DMA_IRQHandler+0xcbc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d031      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <HAL_DMA_IRQHandler+0xcc0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d02c      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2e      	ldr	r2, [pc, #184]	; (80050c4 <HAL_DMA_IRQHandler+0xcc4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d027      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <HAL_DMA_IRQHandler+0xcc8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2b      	ldr	r2, [pc, #172]	; (80050cc <HAL_DMA_IRQHandler+0xccc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01d      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <HAL_DMA_IRQHandler+0xcd0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a28      	ldr	r2, [pc, #160]	; (80050d4 <HAL_DMA_IRQHandler+0xcd4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <HAL_DMA_IRQHandler+0xcd8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a25      	ldr	r2, [pc, #148]	; (80050dc <HAL_DMA_IRQHandler+0xcdc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <HAL_DMA_IRQHandler+0xce0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_DMA_IRQHandler+0xc60>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <HAL_DMA_IRQHandler+0xce4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d108      	bne.n	8005072 <HAL_DMA_IRQHandler+0xc72>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0214 	bic.w	r2, r2, #20
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e007      	b.n	8005082 <HAL_DMA_IRQHandler+0xc82>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 020a 	bic.w	r2, r2, #10
 8005080:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80b8 	beq.w	800520c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050a4:	e0b2      	b.n	800520c <HAL_DMA_IRQHandler+0xe0c>
 80050a6:	bf00      	nop
 80050a8:	40020010 	.word	0x40020010
 80050ac:	40020028 	.word	0x40020028
 80050b0:	40020040 	.word	0x40020040
 80050b4:	40020058 	.word	0x40020058
 80050b8:	40020070 	.word	0x40020070
 80050bc:	40020088 	.word	0x40020088
 80050c0:	400200a0 	.word	0x400200a0
 80050c4:	400200b8 	.word	0x400200b8
 80050c8:	40020410 	.word	0x40020410
 80050cc:	40020428 	.word	0x40020428
 80050d0:	40020440 	.word	0x40020440
 80050d4:	40020458 	.word	0x40020458
 80050d8:	40020470 	.word	0x40020470
 80050dc:	40020488 	.word	0x40020488
 80050e0:	400204a0 	.word	0x400204a0
 80050e4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2208      	movs	r2, #8
 80050f2:	409a      	lsls	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8088 	beq.w	800520e <HAL_DMA_IRQHandler+0xe0e>
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8082 	beq.w	800520e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a41      	ldr	r2, [pc, #260]	; (8005214 <HAL_DMA_IRQHandler+0xe14>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d04a      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a3f      	ldr	r2, [pc, #252]	; (8005218 <HAL_DMA_IRQHandler+0xe18>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d045      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3e      	ldr	r2, [pc, #248]	; (800521c <HAL_DMA_IRQHandler+0xe1c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d040      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <HAL_DMA_IRQHandler+0xe20>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d03b      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a3b      	ldr	r2, [pc, #236]	; (8005224 <HAL_DMA_IRQHandler+0xe24>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d036      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a39      	ldr	r2, [pc, #228]	; (8005228 <HAL_DMA_IRQHandler+0xe28>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d031      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a38      	ldr	r2, [pc, #224]	; (800522c <HAL_DMA_IRQHandler+0xe2c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d02c      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a36      	ldr	r2, [pc, #216]	; (8005230 <HAL_DMA_IRQHandler+0xe30>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d027      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a35      	ldr	r2, [pc, #212]	; (8005234 <HAL_DMA_IRQHandler+0xe34>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d022      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a33      	ldr	r2, [pc, #204]	; (8005238 <HAL_DMA_IRQHandler+0xe38>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01d      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a32      	ldr	r2, [pc, #200]	; (800523c <HAL_DMA_IRQHandler+0xe3c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d018      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a30      	ldr	r2, [pc, #192]	; (8005240 <HAL_DMA_IRQHandler+0xe40>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2f      	ldr	r2, [pc, #188]	; (8005244 <HAL_DMA_IRQHandler+0xe44>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2d      	ldr	r2, [pc, #180]	; (8005248 <HAL_DMA_IRQHandler+0xe48>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2c      	ldr	r2, [pc, #176]	; (800524c <HAL_DMA_IRQHandler+0xe4c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_DMA_IRQHandler+0xdaa>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <HAL_DMA_IRQHandler+0xe50>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d108      	bne.n	80051bc <HAL_DMA_IRQHandler+0xdbc>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 021c 	bic.w	r2, r2, #28
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e007      	b.n	80051cc <HAL_DMA_IRQHandler+0xdcc>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 020e 	bic.w	r2, r2, #14
 80051ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2201      	movs	r2, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	4798      	blx	r3
 8005202:	e004      	b.n	800520e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800520c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800520e:	3728      	adds	r7, #40	; 0x28
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40020010 	.word	0x40020010
 8005218:	40020028 	.word	0x40020028
 800521c:	40020040 	.word	0x40020040
 8005220:	40020058 	.word	0x40020058
 8005224:	40020070 	.word	0x40020070
 8005228:	40020088 	.word	0x40020088
 800522c:	400200a0 	.word	0x400200a0
 8005230:	400200b8 	.word	0x400200b8
 8005234:	40020410 	.word	0x40020410
 8005238:	40020428 	.word	0x40020428
 800523c:	40020440 	.word	0x40020440
 8005240:	40020458 	.word	0x40020458
 8005244:	40020470 	.word	0x40020470
 8005248:	40020488 	.word	0x40020488
 800524c:	400204a0 	.word	0x400204a0
 8005250:	400204b8 	.word	0x400204b8

08005254 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a84      	ldr	r2, [pc, #528]	; (8005484 <DMA_SetConfig+0x230>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d072      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a82      	ldr	r2, [pc, #520]	; (8005488 <DMA_SetConfig+0x234>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d06d      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a81      	ldr	r2, [pc, #516]	; (800548c <DMA_SetConfig+0x238>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d068      	beq.n	800535e <DMA_SetConfig+0x10a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a7f      	ldr	r2, [pc, #508]	; (8005490 <DMA_SetConfig+0x23c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d063      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7e      	ldr	r2, [pc, #504]	; (8005494 <DMA_SetConfig+0x240>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d05e      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a7c      	ldr	r2, [pc, #496]	; (8005498 <DMA_SetConfig+0x244>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d059      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a7b      	ldr	r2, [pc, #492]	; (800549c <DMA_SetConfig+0x248>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d054      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a79      	ldr	r2, [pc, #484]	; (80054a0 <DMA_SetConfig+0x24c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d04f      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a78      	ldr	r2, [pc, #480]	; (80054a4 <DMA_SetConfig+0x250>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d04a      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a76      	ldr	r2, [pc, #472]	; (80054a8 <DMA_SetConfig+0x254>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d045      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a75      	ldr	r2, [pc, #468]	; (80054ac <DMA_SetConfig+0x258>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d040      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a73      	ldr	r2, [pc, #460]	; (80054b0 <DMA_SetConfig+0x25c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d03b      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a72      	ldr	r2, [pc, #456]	; (80054b4 <DMA_SetConfig+0x260>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d036      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a70      	ldr	r2, [pc, #448]	; (80054b8 <DMA_SetConfig+0x264>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <DMA_SetConfig+0x10a>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6f      	ldr	r2, [pc, #444]	; (80054bc <DMA_SetConfig+0x268>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d02c      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a6d      	ldr	r2, [pc, #436]	; (80054c0 <DMA_SetConfig+0x26c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d027      	beq.n	800535e <DMA_SetConfig+0x10a>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a6c      	ldr	r2, [pc, #432]	; (80054c4 <DMA_SetConfig+0x270>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a6a      	ldr	r2, [pc, #424]	; (80054c8 <DMA_SetConfig+0x274>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01d      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a69      	ldr	r2, [pc, #420]	; (80054cc <DMA_SetConfig+0x278>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <DMA_SetConfig+0x10a>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a67      	ldr	r2, [pc, #412]	; (80054d0 <DMA_SetConfig+0x27c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a66      	ldr	r2, [pc, #408]	; (80054d4 <DMA_SetConfig+0x280>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a64      	ldr	r2, [pc, #400]	; (80054d8 <DMA_SetConfig+0x284>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <DMA_SetConfig+0x10a>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a63      	ldr	r2, [pc, #396]	; (80054dc <DMA_SetConfig+0x288>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <DMA_SetConfig+0x10a>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a61      	ldr	r2, [pc, #388]	; (80054e0 <DMA_SetConfig+0x28c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <DMA_SetConfig+0x10e>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <DMA_SetConfig+0x110>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005370:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005382:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a3e      	ldr	r2, [pc, #248]	; (8005484 <DMA_SetConfig+0x230>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d04a      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a3d      	ldr	r2, [pc, #244]	; (8005488 <DMA_SetConfig+0x234>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d045      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a3b      	ldr	r2, [pc, #236]	; (800548c <DMA_SetConfig+0x238>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d040      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a3a      	ldr	r2, [pc, #232]	; (8005490 <DMA_SetConfig+0x23c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d03b      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a38      	ldr	r2, [pc, #224]	; (8005494 <DMA_SetConfig+0x240>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d036      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a37      	ldr	r2, [pc, #220]	; (8005498 <DMA_SetConfig+0x244>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d031      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a35      	ldr	r2, [pc, #212]	; (800549c <DMA_SetConfig+0x248>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02c      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a34      	ldr	r2, [pc, #208]	; (80054a0 <DMA_SetConfig+0x24c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d027      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a32      	ldr	r2, [pc, #200]	; (80054a4 <DMA_SetConfig+0x250>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d022      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a31      	ldr	r2, [pc, #196]	; (80054a8 <DMA_SetConfig+0x254>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d01d      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <DMA_SetConfig+0x258>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <DMA_SetConfig+0x25c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a2c      	ldr	r2, [pc, #176]	; (80054b4 <DMA_SetConfig+0x260>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2b      	ldr	r2, [pc, #172]	; (80054b8 <DMA_SetConfig+0x264>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a29      	ldr	r2, [pc, #164]	; (80054bc <DMA_SetConfig+0x268>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <DMA_SetConfig+0x1d0>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a28      	ldr	r2, [pc, #160]	; (80054c0 <DMA_SetConfig+0x26c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d101      	bne.n	8005428 <DMA_SetConfig+0x1d4>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <DMA_SetConfig+0x1d6>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d05a      	beq.n	80054e4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	223f      	movs	r2, #63	; 0x3f
 8005438:	409a      	lsls	r2, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800544c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d108      	bne.n	8005470 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800546e:	e087      	b.n	8005580 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]
}
 8005480:	e07e      	b.n	8005580 <DMA_SetConfig+0x32c>
 8005482:	bf00      	nop
 8005484:	40020010 	.word	0x40020010
 8005488:	40020028 	.word	0x40020028
 800548c:	40020040 	.word	0x40020040
 8005490:	40020058 	.word	0x40020058
 8005494:	40020070 	.word	0x40020070
 8005498:	40020088 	.word	0x40020088
 800549c:	400200a0 	.word	0x400200a0
 80054a0:	400200b8 	.word	0x400200b8
 80054a4:	40020410 	.word	0x40020410
 80054a8:	40020428 	.word	0x40020428
 80054ac:	40020440 	.word	0x40020440
 80054b0:	40020458 	.word	0x40020458
 80054b4:	40020470 	.word	0x40020470
 80054b8:	40020488 	.word	0x40020488
 80054bc:	400204a0 	.word	0x400204a0
 80054c0:	400204b8 	.word	0x400204b8
 80054c4:	58025408 	.word	0x58025408
 80054c8:	5802541c 	.word	0x5802541c
 80054cc:	58025430 	.word	0x58025430
 80054d0:	58025444 	.word	0x58025444
 80054d4:	58025458 	.word	0x58025458
 80054d8:	5802546c 	.word	0x5802546c
 80054dc:	58025480 	.word	0x58025480
 80054e0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a28      	ldr	r2, [pc, #160]	; (800558c <DMA_SetConfig+0x338>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d022      	beq.n	8005534 <DMA_SetConfig+0x2e0>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a27      	ldr	r2, [pc, #156]	; (8005590 <DMA_SetConfig+0x33c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d01d      	beq.n	8005534 <DMA_SetConfig+0x2e0>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <DMA_SetConfig+0x340>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d018      	beq.n	8005534 <DMA_SetConfig+0x2e0>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a24      	ldr	r2, [pc, #144]	; (8005598 <DMA_SetConfig+0x344>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <DMA_SetConfig+0x2e0>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	; (800559c <DMA_SetConfig+0x348>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00e      	beq.n	8005534 <DMA_SetConfig+0x2e0>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <DMA_SetConfig+0x34c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d009      	beq.n	8005534 <DMA_SetConfig+0x2e0>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <DMA_SetConfig+0x350>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <DMA_SetConfig+0x2e0>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <DMA_SetConfig+0x354>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d101      	bne.n	8005538 <DMA_SetConfig+0x2e4>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <DMA_SetConfig+0x2e6>
 8005538:	2300      	movs	r3, #0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d020      	beq.n	8005580 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2201      	movs	r2, #1
 8005548:	409a      	lsls	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d108      	bne.n	8005570 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	60da      	str	r2, [r3, #12]
}
 800556e:	e007      	b.n	8005580 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]
}
 8005580:	bf00      	nop
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	58025408 	.word	0x58025408
 8005590:	5802541c 	.word	0x5802541c
 8005594:	58025430 	.word	0x58025430
 8005598:	58025444 	.word	0x58025444
 800559c:	58025458 	.word	0x58025458
 80055a0:	5802546c 	.word	0x5802546c
 80055a4:	58025480 	.word	0x58025480
 80055a8:	58025494 	.word	0x58025494

080055ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a42      	ldr	r2, [pc, #264]	; (80056c4 <DMA_CalcBaseAndBitshift+0x118>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04a      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a41      	ldr	r2, [pc, #260]	; (80056c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d045      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3f      	ldr	r2, [pc, #252]	; (80056cc <DMA_CalcBaseAndBitshift+0x120>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d040      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a3e      	ldr	r2, [pc, #248]	; (80056d0 <DMA_CalcBaseAndBitshift+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d03b      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a3c      	ldr	r2, [pc, #240]	; (80056d4 <DMA_CalcBaseAndBitshift+0x128>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d036      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d031      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a39      	ldr	r2, [pc, #228]	; (80056dc <DMA_CalcBaseAndBitshift+0x130>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02c      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a38      	ldr	r2, [pc, #224]	; (80056e0 <DMA_CalcBaseAndBitshift+0x134>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d027      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a36      	ldr	r2, [pc, #216]	; (80056e4 <DMA_CalcBaseAndBitshift+0x138>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a35      	ldr	r2, [pc, #212]	; (80056e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01d      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a33      	ldr	r2, [pc, #204]	; (80056ec <DMA_CalcBaseAndBitshift+0x140>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a32      	ldr	r2, [pc, #200]	; (80056f0 <DMA_CalcBaseAndBitshift+0x144>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a30      	ldr	r2, [pc, #192]	; (80056f4 <DMA_CalcBaseAndBitshift+0x148>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2f      	ldr	r2, [pc, #188]	; (80056f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2d      	ldr	r2, [pc, #180]	; (80056fc <DMA_CalcBaseAndBitshift+0x150>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <DMA_CalcBaseAndBitshift+0xa8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <DMA_CalcBaseAndBitshift+0x154>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <DMA_CalcBaseAndBitshift+0xac>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <DMA_CalcBaseAndBitshift+0xae>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d024      	beq.n	80056a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	3b10      	subs	r3, #16
 8005666:	4a27      	ldr	r2, [pc, #156]	; (8005704 <DMA_CalcBaseAndBitshift+0x158>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	4a24      	ldr	r2, [pc, #144]	; (8005708 <DMA_CalcBaseAndBitshift+0x15c>)
 8005678:	5cd3      	ldrb	r3, [r2, r3]
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d908      	bls.n	8005698 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	4b1f      	ldr	r3, [pc, #124]	; (800570c <DMA_CalcBaseAndBitshift+0x160>)
 800568e:	4013      	ands	r3, r2
 8005690:	1d1a      	adds	r2, r3, #4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	659a      	str	r2, [r3, #88]	; 0x58
 8005696:	e00d      	b.n	80056b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	4b1b      	ldr	r3, [pc, #108]	; (800570c <DMA_CalcBaseAndBitshift+0x160>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6593      	str	r3, [r2, #88]	; 0x58
 80056a6:	e005      	b.n	80056b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40020010 	.word	0x40020010
 80056c8:	40020028 	.word	0x40020028
 80056cc:	40020040 	.word	0x40020040
 80056d0:	40020058 	.word	0x40020058
 80056d4:	40020070 	.word	0x40020070
 80056d8:	40020088 	.word	0x40020088
 80056dc:	400200a0 	.word	0x400200a0
 80056e0:	400200b8 	.word	0x400200b8
 80056e4:	40020410 	.word	0x40020410
 80056e8:	40020428 	.word	0x40020428
 80056ec:	40020440 	.word	0x40020440
 80056f0:	40020458 	.word	0x40020458
 80056f4:	40020470 	.word	0x40020470
 80056f8:	40020488 	.word	0x40020488
 80056fc:	400204a0 	.word	0x400204a0
 8005700:	400204b8 	.word	0x400204b8
 8005704:	aaaaaaab 	.word	0xaaaaaaab
 8005708:	0800cc2c 	.word	0x0800cc2c
 800570c:	fffffc00 	.word	0xfffffc00

08005710 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d120      	bne.n	8005766 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	2b03      	cmp	r3, #3
 800572a:	d858      	bhi.n	80057de <DMA_CheckFifoParam+0xce>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <DMA_CheckFifoParam+0x24>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005745 	.word	0x08005745
 8005738:	08005757 	.word	0x08005757
 800573c:	08005745 	.word	0x08005745
 8005740:	080057df 	.word	0x080057df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d048      	beq.n	80057e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005754:	e045      	b.n	80057e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800575e:	d142      	bne.n	80057e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005764:	e03f      	b.n	80057e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d123      	bne.n	80057b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	2b03      	cmp	r3, #3
 8005776:	d838      	bhi.n	80057ea <DMA_CheckFifoParam+0xda>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <DMA_CheckFifoParam+0x70>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	08005791 	.word	0x08005791
 8005784:	08005797 	.word	0x08005797
 8005788:	08005791 	.word	0x08005791
 800578c:	080057a9 	.word	0x080057a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
        break;
 8005794:	e030      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d025      	beq.n	80057ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057a6:	e022      	b.n	80057ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057b0:	d11f      	bne.n	80057f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057b6:	e01c      	b.n	80057f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d902      	bls.n	80057c6 <DMA_CheckFifoParam+0xb6>
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d003      	beq.n	80057cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80057c4:	e018      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
        break;
 80057ca:	e015      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
    break;
 80057dc:	e00b      	b.n	80057f6 <DMA_CheckFifoParam+0xe6>
        break;
 80057de:	bf00      	nop
 80057e0:	e00a      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>
        break;
 80057e2:	bf00      	nop
 80057e4:	e008      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>
        break;
 80057e6:	bf00      	nop
 80057e8:	e006      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>
        break;
 80057ea:	bf00      	nop
 80057ec:	e004      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>
        break;
 80057ee:	bf00      	nop
 80057f0:	e002      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>
        break;
 80057f2:	bf00      	nop
 80057f4:	e000      	b.n	80057f8 <DMA_CheckFifoParam+0xe8>
    break;
 80057f6:	bf00      	nop
    }
  }

  return status;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop

08005808 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a38      	ldr	r2, [pc, #224]	; (80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d022      	beq.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a36      	ldr	r2, [pc, #216]	; (8005900 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01d      	beq.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a35      	ldr	r2, [pc, #212]	; (8005904 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d018      	beq.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a33      	ldr	r2, [pc, #204]	; (8005908 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a32      	ldr	r2, [pc, #200]	; (800590c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a30      	ldr	r2, [pc, #192]	; (8005910 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2d      	ldr	r2, [pc, #180]	; (8005918 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01a      	beq.n	80058a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	3b08      	subs	r3, #8
 8005878:	4a28      	ldr	r2, [pc, #160]	; (800591c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4b26      	ldr	r3, [pc, #152]	; (8005920 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a24      	ldr	r2, [pc, #144]	; (8005924 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005894:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	2201      	movs	r2, #1
 800589e:	409a      	lsls	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80058a4:	e024      	b.n	80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	3b10      	subs	r3, #16
 80058ae:	4a1e      	ldr	r2, [pc, #120]	; (8005928 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4a1c      	ldr	r2, [pc, #112]	; (800592c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d806      	bhi.n	80058ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d902      	bls.n	80058ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3308      	adds	r3, #8
 80058cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a16      	ldr	r2, [pc, #88]	; (8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80058e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	2201      	movs	r2, #1
 80058ea:	409a      	lsls	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	58025408 	.word	0x58025408
 8005900:	5802541c 	.word	0x5802541c
 8005904:	58025430 	.word	0x58025430
 8005908:	58025444 	.word	0x58025444
 800590c:	58025458 	.word	0x58025458
 8005910:	5802546c 	.word	0x5802546c
 8005914:	58025480 	.word	0x58025480
 8005918:	58025494 	.word	0x58025494
 800591c:	cccccccd 	.word	0xcccccccd
 8005920:	16009600 	.word	0x16009600
 8005924:	58025880 	.word	0x58025880
 8005928:	aaaaaaab 	.word	0xaaaaaaab
 800592c:	400204b8 	.word	0x400204b8
 8005930:	4002040f 	.word	0x4002040f
 8005934:	10008200 	.word	0x10008200
 8005938:	40020880 	.word	0x40020880

0800593c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d04a      	beq.n	80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b08      	cmp	r3, #8
 8005956:	d847      	bhi.n	80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a25      	ldr	r2, [pc, #148]	; (80059f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a24      	ldr	r2, [pc, #144]	; (80059f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d01d      	beq.n	80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a22      	ldr	r2, [pc, #136]	; (80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a21      	ldr	r2, [pc, #132]	; (8005a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1e      	ldr	r2, [pc, #120]	; (8005a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1c      	ldr	r2, [pc, #112]	; (8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a1b      	ldr	r2, [pc, #108]	; (8005a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d101      	bne.n	80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80059ac:	2300      	movs	r3, #0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	461a      	mov	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80059c4:	671a      	str	r2, [r3, #112]	; 0x70
 80059c6:	e009      	b.n	80059dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3b01      	subs	r3, #1
 80059e0:	2201      	movs	r2, #1
 80059e2:	409a      	lsls	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80059e8:	bf00      	nop
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	58025408 	.word	0x58025408
 80059f8:	5802541c 	.word	0x5802541c
 80059fc:	58025430 	.word	0x58025430
 8005a00:	58025444 	.word	0x58025444
 8005a04:	58025458 	.word	0x58025458
 8005a08:	5802546c 	.word	0x5802546c
 8005a0c:	58025480 	.word	0x58025480
 8005a10:	58025494 	.word	0x58025494
 8005a14:	1600963f 	.word	0x1600963f
 8005a18:	58025940 	.word	0x58025940
 8005a1c:	1000823f 	.word	0x1000823f
 8005a20:	40020940 	.word	0x40020940

08005a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a32:	4b89      	ldr	r3, [pc, #548]	; (8005c58 <HAL_GPIO_Init+0x234>)
 8005a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a36:	e194      	b.n	8005d62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	4013      	ands	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 8186 	beq.w	8005d5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d00b      	beq.n	8005a70 <HAL_GPIO_Init+0x4c>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d007      	beq.n	8005a70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a64:	2b11      	cmp	r3, #17
 8005a66:	d003      	beq.n	8005a70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b12      	cmp	r3, #18
 8005a6e:	d130      	bne.n	8005ad2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4013      	ands	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	f003 0201 	and.w	r2, r3, #1
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	2203      	movs	r2, #3
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d003      	beq.n	8005b12 <HAL_GPIO_Init+0xee>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b12      	cmp	r3, #18
 8005b10:	d123      	bne.n	8005b5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	08da      	lsrs	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3208      	adds	r2, #8
 8005b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	220f      	movs	r2, #15
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	08da      	lsrs	r2, r3, #3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3208      	adds	r2, #8
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	2203      	movs	r2, #3
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f003 0203 	and.w	r2, r3, #3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80e0 	beq.w	8005d5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b9c:	4b2f      	ldr	r3, [pc, #188]	; (8005c5c <HAL_GPIO_Init+0x238>)
 8005b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ba2:	4a2e      	ldr	r2, [pc, #184]	; (8005c5c <HAL_GPIO_Init+0x238>)
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005bac:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <HAL_GPIO_Init+0x238>)
 8005bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bba:	4a29      	ldr	r2, [pc, #164]	; (8005c60 <HAL_GPIO_Init+0x23c>)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	089b      	lsrs	r3, r3, #2
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	220f      	movs	r2, #15
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <HAL_GPIO_Init+0x240>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d052      	beq.n	8005c8c <HAL_GPIO_Init+0x268>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <HAL_GPIO_Init+0x244>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d031      	beq.n	8005c52 <HAL_GPIO_Init+0x22e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <HAL_GPIO_Init+0x248>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d02b      	beq.n	8005c4e <HAL_GPIO_Init+0x22a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <HAL_GPIO_Init+0x24c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d025      	beq.n	8005c4a <HAL_GPIO_Init+0x226>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <HAL_GPIO_Init+0x250>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01f      	beq.n	8005c46 <HAL_GPIO_Init+0x222>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1b      	ldr	r2, [pc, #108]	; (8005c78 <HAL_GPIO_Init+0x254>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d019      	beq.n	8005c42 <HAL_GPIO_Init+0x21e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <HAL_GPIO_Init+0x258>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_GPIO_Init+0x21a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <HAL_GPIO_Init+0x25c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00d      	beq.n	8005c3a <HAL_GPIO_Init+0x216>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_GPIO_Init+0x260>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d007      	beq.n	8005c36 <HAL_GPIO_Init+0x212>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <HAL_GPIO_Init+0x264>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d101      	bne.n	8005c32 <HAL_GPIO_Init+0x20e>
 8005c2e:	2309      	movs	r3, #9
 8005c30:	e02d      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c32:	230a      	movs	r3, #10
 8005c34:	e02b      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c36:	2308      	movs	r3, #8
 8005c38:	e029      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c3a:	2307      	movs	r3, #7
 8005c3c:	e027      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c3e:	2306      	movs	r3, #6
 8005c40:	e025      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c42:	2305      	movs	r3, #5
 8005c44:	e023      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c46:	2304      	movs	r3, #4
 8005c48:	e021      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e01f      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e01d      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e01b      	b.n	8005c8e <HAL_GPIO_Init+0x26a>
 8005c56:	bf00      	nop
 8005c58:	58000080 	.word	0x58000080
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	58000400 	.word	0x58000400
 8005c64:	58020000 	.word	0x58020000
 8005c68:	58020400 	.word	0x58020400
 8005c6c:	58020800 	.word	0x58020800
 8005c70:	58020c00 	.word	0x58020c00
 8005c74:	58021000 	.word	0x58021000
 8005c78:	58021400 	.word	0x58021400
 8005c7c:	58021800 	.word	0x58021800
 8005c80:	58021c00 	.word	0x58021c00
 8005c84:	58022000 	.word	0x58022000
 8005c88:	58022400 	.word	0x58022400
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	f002 0203 	and.w	r2, r2, #3
 8005c94:	0092      	lsls	r2, r2, #2
 8005c96:	4093      	lsls	r3, r2
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c9e:	4938      	ldr	r1, [pc, #224]	; (8005d80 <HAL_GPIO_Init+0x35c>)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	089b      	lsrs	r3, r3, #2
 8005ca4:	3302      	adds	r3, #2
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f ae63 	bne.w	8005a38 <HAL_GPIO_Init+0x14>
  }
}
 8005d72:	bf00      	nop
 8005d74:	3724      	adds	r7, #36	; 0x24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	58000400 	.word	0x58000400

08005d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]
 8005d90:	4613      	mov	r3, r2
 8005d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d94:	787b      	ldrb	r3, [r7, #1]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d9a:	887a      	ldrh	r2, [r7, #2]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005da0:	e003      	b.n	8005daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	041a      	lsls	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	619a      	str	r2, [r3, #24]
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	887b      	ldrh	r3, [r7, #2]
 8005dc8:	401a      	ands	r2, r3
 8005dca:	887b      	ldrh	r3, [r7, #2]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d104      	bne.n	8005dda <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	041a      	lsls	r2, r3, #16
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005dd8:	e002      	b.n	8005de0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005dda:	887a      	ldrh	r2, [r7, #2]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	619a      	str	r2, [r3, #24]
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d00a      	beq.n	8005e16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d001      	beq.n	8005e12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e01f      	b.n	8005e52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	e01d      	b.n	8005e52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f023 0207 	bic.w	r2, r3, #7
 8005e1e:	490f      	ldr	r1, [pc, #60]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e26:	f7fc f955 	bl	80020d4 <HAL_GetTick>
 8005e2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e2c:	e009      	b.n	8005e42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e2e:	f7fc f951 	bl	80020d4 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3c:	d901      	bls.n	8005e42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e007      	b.n	8005e52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_PWREx_ConfigSupply+0x70>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4e:	d1ee      	bne.n	8005e2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	58024800 	.word	0x58024800

08005e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e3c4      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8087 	beq.w	8005f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e80:	4ba2      	ldr	r3, [pc, #648]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e8a:	4ba0      	ldr	r3, [pc, #640]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d007      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x46>
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	2b18      	cmp	r3, #24
 8005e9a:	d110      	bne.n	8005ebe <HAL_RCC_OscConfig+0x5e>
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d10b      	bne.n	8005ebe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea6:	4b99      	ldr	r3, [pc, #612]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d06c      	beq.n	8005f8c <HAL_RCC_OscConfig+0x12c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d168      	bne.n	8005f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e39e      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec6:	d106      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x76>
 8005ec8:	4b90      	ldr	r3, [pc, #576]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a8f      	ldr	r2, [pc, #572]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e02e      	b.n	8005f34 <HAL_RCC_OscConfig+0xd4>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10c      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x98>
 8005ede:	4b8b      	ldr	r3, [pc, #556]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a8a      	ldr	r2, [pc, #552]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	4b88      	ldr	r3, [pc, #544]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a87      	ldr	r2, [pc, #540]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	e01d      	b.n	8005f34 <HAL_RCC_OscConfig+0xd4>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCC_OscConfig+0xbc>
 8005f02:	4b82      	ldr	r3, [pc, #520]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a81      	ldr	r2, [pc, #516]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	4b7f      	ldr	r3, [pc, #508]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a7e      	ldr	r2, [pc, #504]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	e00b      	b.n	8005f34 <HAL_RCC_OscConfig+0xd4>
 8005f1c:	4b7b      	ldr	r3, [pc, #492]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a7a      	ldr	r2, [pc, #488]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	4b78      	ldr	r3, [pc, #480]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a77      	ldr	r2, [pc, #476]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d013      	beq.n	8005f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3c:	f7fc f8ca 	bl	80020d4 <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f44:	f7fc f8c6 	bl	80020d4 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b64      	cmp	r3, #100	; 0x64
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e352      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f56:	4b6d      	ldr	r3, [pc, #436]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0xe4>
 8005f62:	e014      	b.n	8005f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f64:	f7fc f8b6 	bl	80020d4 <HAL_GetTick>
 8005f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f6c:	f7fc f8b2 	bl	80020d4 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b64      	cmp	r3, #100	; 0x64
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e33e      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f7e:	4b63      	ldr	r3, [pc, #396]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x10c>
 8005f8a:	e000      	b.n	8005f8e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8092 	beq.w	80060c0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f9c:	4b5b      	ldr	r3, [pc, #364]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fa4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fa6:	4b59      	ldr	r3, [pc, #356]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x162>
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	2b18      	cmp	r3, #24
 8005fb6:	d12d      	bne.n	8006014 <HAL_RCC_OscConfig+0x1b4>
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d128      	bne.n	8006014 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fc2:	4b52      	ldr	r3, [pc, #328]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_RCC_OscConfig+0x17a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e310      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fda:	f7fc f8a9 	bl	8002130 <HAL_GetREVID>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d80a      	bhi.n	8005ffe <HAL_RCC_OscConfig+0x19e>
 8005fe8:	4b48      	ldr	r3, [pc, #288]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	031b      	lsls	r3, r3, #12
 8005ff6:	4945      	ldr	r1, [pc, #276]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ffc:	e060      	b.n	80060c0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffe:	4b43      	ldr	r3, [pc, #268]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	061b      	lsls	r3, r3, #24
 800600c:	493f      	ldr	r1, [pc, #252]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 800600e:	4313      	orrs	r3, r2
 8006010:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006012:	e055      	b.n	80060c0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d038      	beq.n	800608e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800601c:	4b3b      	ldr	r3, [pc, #236]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f023 0219 	bic.w	r2, r3, #25
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4938      	ldr	r1, [pc, #224]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602e:	f7fc f851 	bl	80020d4 <HAL_GetTick>
 8006032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006036:	f7fc f84d 	bl	80020d4 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e2d9      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006048:	4b30      	ldr	r3, [pc, #192]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f0      	beq.n	8006036 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006054:	f7fc f86c 	bl	8002130 <HAL_GetREVID>
 8006058:	4602      	mov	r2, r0
 800605a:	f241 0303 	movw	r3, #4099	; 0x1003
 800605e:	429a      	cmp	r2, r3
 8006060:	d80a      	bhi.n	8006078 <HAL_RCC_OscConfig+0x218>
 8006062:	4b2a      	ldr	r3, [pc, #168]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	031b      	lsls	r3, r3, #12
 8006070:	4926      	ldr	r1, [pc, #152]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8006072:	4313      	orrs	r3, r2
 8006074:	604b      	str	r3, [r1, #4]
 8006076:	e023      	b.n	80060c0 <HAL_RCC_OscConfig+0x260>
 8006078:	4b24      	ldr	r3, [pc, #144]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	061b      	lsls	r3, r3, #24
 8006086:	4921      	ldr	r1, [pc, #132]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8006088:	4313      	orrs	r3, r2
 800608a:	604b      	str	r3, [r1, #4]
 800608c:	e018      	b.n	80060c0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800608e:	4b1f      	ldr	r3, [pc, #124]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1e      	ldr	r2, [pc, #120]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 8006094:	f023 0301 	bic.w	r3, r3, #1
 8006098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fc f81b 	bl	80020d4 <HAL_GetTick>
 800609e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060a2:	f7fc f817 	bl	80020d4 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e2a3      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060b4:	4b15      	ldr	r3, [pc, #84]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f0      	bne.n	80060a2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 8091 	beq.w	80061f0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d007      	beq.n	80060f4 <HAL_RCC_OscConfig+0x294>
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2b18      	cmp	r3, #24
 80060e8:	d12f      	bne.n	800614a <HAL_RCC_OscConfig+0x2ea>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d12a      	bne.n	800614a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <HAL_RCC_OscConfig+0x2ac>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_RCC_OscConfig+0x2b0>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	2b80      	cmp	r3, #128	; 0x80
 8006106:	d003      	beq.n	8006110 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e277      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
 800610c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006110:	f7fc f80e 	bl	8002130 <HAL_GetREVID>
 8006114:	4602      	mov	r2, r0
 8006116:	f241 0303 	movw	r3, #4099	; 0x1003
 800611a:	429a      	cmp	r2, r3
 800611c:	d80a      	bhi.n	8006134 <HAL_RCC_OscConfig+0x2d4>
 800611e:	4ba2      	ldr	r3, [pc, #648]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	069b      	lsls	r3, r3, #26
 800612c:	499e      	ldr	r1, [pc, #632]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800612e:	4313      	orrs	r3, r2
 8006130:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006132:	e05d      	b.n	80061f0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006134:	4b9c      	ldr	r3, [pc, #624]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	061b      	lsls	r3, r3, #24
 8006142:	4999      	ldr	r1, [pc, #612]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006144:	4313      	orrs	r3, r2
 8006146:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006148:	e052      	b.n	80061f0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d035      	beq.n	80061be <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006152:	4b95      	ldr	r3, [pc, #596]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a94      	ldr	r2, [pc, #592]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fb ffb9 	bl	80020d4 <HAL_GetTick>
 8006162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006166:	f7fb ffb5 	bl	80020d4 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e241      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006178:	4b8b      	ldr	r3, [pc, #556]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006184:	f7fb ffd4 	bl	8002130 <HAL_GetREVID>
 8006188:	4602      	mov	r2, r0
 800618a:	f241 0303 	movw	r3, #4099	; 0x1003
 800618e:	429a      	cmp	r2, r3
 8006190:	d80a      	bhi.n	80061a8 <HAL_RCC_OscConfig+0x348>
 8006192:	4b85      	ldr	r3, [pc, #532]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	069b      	lsls	r3, r3, #26
 80061a0:	4981      	ldr	r1, [pc, #516]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	604b      	str	r3, [r1, #4]
 80061a6:	e023      	b.n	80061f0 <HAL_RCC_OscConfig+0x390>
 80061a8:	4b7f      	ldr	r3, [pc, #508]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	061b      	lsls	r3, r3, #24
 80061b6:	497c      	ldr	r1, [pc, #496]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60cb      	str	r3, [r1, #12]
 80061bc:	e018      	b.n	80061f0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061be:	4b7a      	ldr	r3, [pc, #488]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a79      	ldr	r2, [pc, #484]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80061c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ca:	f7fb ff83 	bl	80020d4 <HAL_GetTick>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061d2:	f7fb ff7f 	bl	80020d4 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e20b      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061e4:	4b70      	ldr	r3, [pc, #448]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f0      	bne.n	80061d2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d036      	beq.n	800626a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d019      	beq.n	8006238 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006204:	4b68      	ldr	r3, [pc, #416]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006208:	4a67      	ldr	r2, [pc, #412]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006210:	f7fb ff60 	bl	80020d4 <HAL_GetTick>
 8006214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006218:	f7fb ff5c 	bl	80020d4 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e1e8      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800622a:	4b5f      	ldr	r3, [pc, #380]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800622c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f0      	beq.n	8006218 <HAL_RCC_OscConfig+0x3b8>
 8006236:	e018      	b.n	800626a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006238:	4b5b      	ldr	r3, [pc, #364]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	4a5a      	ldr	r2, [pc, #360]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006244:	f7fb ff46 	bl	80020d4 <HAL_GetTick>
 8006248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624c:	f7fb ff42 	bl	80020d4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e1ce      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800625e:	4b52      	ldr	r3, [pc, #328]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d036      	beq.n	80062e4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d019      	beq.n	80062b2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800627e:	4b4a      	ldr	r3, [pc, #296]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a49      	ldr	r2, [pc, #292]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006288:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800628a:	f7fb ff23 	bl	80020d4 <HAL_GetTick>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006292:	f7fb ff1f 	bl	80020d4 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e1ab      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062a4:	4b40      	ldr	r3, [pc, #256]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f0      	beq.n	8006292 <HAL_RCC_OscConfig+0x432>
 80062b0:	e018      	b.n	80062e4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062b2:	4b3d      	ldr	r3, [pc, #244]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a3c      	ldr	r2, [pc, #240]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80062b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062be:	f7fb ff09 	bl	80020d4 <HAL_GetTick>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062c6:	f7fb ff05 	bl	80020d4 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e191      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062d8:	4b33      	ldr	r3, [pc, #204]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f0      	bne.n	80062c6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8086 	beq.w	80063fe <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062f2:	4b2e      	ldr	r3, [pc, #184]	; (80063ac <HAL_RCC_OscConfig+0x54c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2d      	ldr	r2, [pc, #180]	; (80063ac <HAL_RCC_OscConfig+0x54c>)
 80062f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062fe:	f7fb fee9 	bl	80020d4 <HAL_GetTick>
 8006302:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006306:	f7fb fee5 	bl	80020d4 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b64      	cmp	r3, #100	; 0x64
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e171      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006318:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_RCC_OscConfig+0x54c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0f0      	beq.n	8006306 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d106      	bne.n	800633a <HAL_RCC_OscConfig+0x4da>
 800632c:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	6713      	str	r3, [r2, #112]	; 0x70
 8006338:	e02d      	b.n	8006396 <HAL_RCC_OscConfig+0x536>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10c      	bne.n	800635c <HAL_RCC_OscConfig+0x4fc>
 8006342:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006346:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	6713      	str	r3, [r2, #112]	; 0x70
 800634e:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006354:	f023 0304 	bic.w	r3, r3, #4
 8006358:	6713      	str	r3, [r2, #112]	; 0x70
 800635a:	e01c      	b.n	8006396 <HAL_RCC_OscConfig+0x536>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b05      	cmp	r3, #5
 8006362:	d10c      	bne.n	800637e <HAL_RCC_OscConfig+0x51e>
 8006364:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006368:	4a0f      	ldr	r2, [pc, #60]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800636a:	f043 0304 	orr.w	r3, r3, #4
 800636e:	6713      	str	r3, [r2, #112]	; 0x70
 8006370:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	6713      	str	r3, [r2, #112]	; 0x70
 800637c:	e00b      	b.n	8006396 <HAL_RCC_OscConfig+0x536>
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	6713      	str	r3, [r2, #112]	; 0x70
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	4a06      	ldr	r2, [pc, #24]	; (80063a8 <HAL_RCC_OscConfig+0x548>)
 8006390:	f023 0304 	bic.w	r3, r3, #4
 8006394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01a      	beq.n	80063d4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639e:	f7fb fe99 	bl	80020d4 <HAL_GetTick>
 80063a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063a4:	e00f      	b.n	80063c6 <HAL_RCC_OscConfig+0x566>
 80063a6:	bf00      	nop
 80063a8:	58024400 	.word	0x58024400
 80063ac:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063b0:	f7fb fe90 	bl	80020d4 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e11a      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063c6:	4b8f      	ldr	r3, [pc, #572]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0ee      	beq.n	80063b0 <HAL_RCC_OscConfig+0x550>
 80063d2:	e014      	b.n	80063fe <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d4:	f7fb fe7e 	bl	80020d4 <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063dc:	f7fb fe7a 	bl	80020d4 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e104      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063f2:	4b84      	ldr	r3, [pc, #528]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80063f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1ee      	bne.n	80063dc <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 80f9 	beq.w	80065fa <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006408:	4b7e      	ldr	r3, [pc, #504]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006410:	2b18      	cmp	r3, #24
 8006412:	f000 80b4 	beq.w	800657e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	2b02      	cmp	r3, #2
 800641c:	f040 8095 	bne.w	800654a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006420:	4b78      	ldr	r3, [pc, #480]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a77      	ldr	r2, [pc, #476]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800642a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642c:	f7fb fe52 	bl	80020d4 <HAL_GetTick>
 8006430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006434:	f7fb fe4e 	bl	80020d4 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e0da      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006446:	4b6f      	ldr	r3, [pc, #444]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006452:	4b6c      	ldr	r3, [pc, #432]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006456:	4b6c      	ldr	r3, [pc, #432]	; (8006608 <HAL_RCC_OscConfig+0x7a8>)
 8006458:	4013      	ands	r3, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006462:	0112      	lsls	r2, r2, #4
 8006464:	430a      	orrs	r2, r1
 8006466:	4967      	ldr	r1, [pc, #412]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006468:	4313      	orrs	r3, r2
 800646a:	628b      	str	r3, [r1, #40]	; 0x28
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	3b01      	subs	r3, #1
 8006472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	3b01      	subs	r3, #1
 800647c:	025b      	lsls	r3, r3, #9
 800647e:	b29b      	uxth	r3, r3
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	3b01      	subs	r3, #1
 8006488:	041b      	lsls	r3, r3, #16
 800648a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	3b01      	subs	r3, #1
 8006496:	061b      	lsls	r3, r3, #24
 8006498:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800649c:	4959      	ldr	r1, [pc, #356]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80064a2:	4b58      	ldr	r3, [pc, #352]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	4a57      	ldr	r2, [pc, #348]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064ae:	4b55      	ldr	r3, [pc, #340]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b2:	4b56      	ldr	r3, [pc, #344]	; (800660c <HAL_RCC_OscConfig+0x7ac>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064ba:	00d2      	lsls	r2, r2, #3
 80064bc:	4951      	ldr	r1, [pc, #324]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80064c2:	4b50      	ldr	r3, [pc, #320]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	f023 020c 	bic.w	r2, r3, #12
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	494d      	ldr	r1, [pc, #308]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80064d4:	4b4b      	ldr	r3, [pc, #300]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f023 0202 	bic.w	r2, r3, #2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e0:	4948      	ldr	r1, [pc, #288]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064e6:	4b47      	ldr	r3, [pc, #284]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	4a46      	ldr	r2, [pc, #280]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f2:	4b44      	ldr	r3, [pc, #272]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	4a43      	ldr	r2, [pc, #268]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064fe:	4b41      	ldr	r3, [pc, #260]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	4a40      	ldr	r2, [pc, #256]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800650a:	4b3e      	ldr	r3, [pc, #248]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 800650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650e:	4a3d      	ldr	r2, [pc, #244]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006516:	4b3b      	ldr	r3, [pc, #236]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a3a      	ldr	r2, [pc, #232]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 800651c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006522:	f7fb fdd7 	bl	80020d4 <HAL_GetTick>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652a:	f7fb fdd3 	bl	80020d4 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e05f      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800653c:	4b31      	ldr	r3, [pc, #196]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0f0      	beq.n	800652a <HAL_RCC_OscConfig+0x6ca>
 8006548:	e057      	b.n	80065fa <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654a:	4b2e      	ldr	r3, [pc, #184]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2d      	ldr	r2, [pc, #180]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006556:	f7fb fdbd 	bl	80020d4 <HAL_GetTick>
 800655a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800655e:	f7fb fdb9 	bl	80020d4 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e045      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006570:	4b24      	ldr	r3, [pc, #144]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <HAL_RCC_OscConfig+0x6fe>
 800657c:	e03d      	b.n	80065fa <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006584:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <HAL_RCC_OscConfig+0x7a4>)
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	2b01      	cmp	r3, #1
 8006590:	d031      	beq.n	80065f6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f003 0203 	and.w	r2, r3, #3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800659c:	429a      	cmp	r2, r3
 800659e:	d12a      	bne.n	80065f6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	091b      	lsrs	r3, r3, #4
 80065a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d122      	bne.n	80065f6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d11a      	bne.n	80065f6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	0a5b      	lsrs	r3, r3, #9
 80065c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065cc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d111      	bne.n	80065f6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d108      	bne.n	80065f6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	0e1b      	lsrs	r3, r3, #24
 80065e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d001      	beq.n	80065fa <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3730      	adds	r7, #48	; 0x30
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	58024400 	.word	0x58024400
 8006608:	fffffc0c 	.word	0xfffffc0c
 800660c:	ffff0007 	.word	0xffff0007

08006610 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e19c      	b.n	800695e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006624:	4b8a      	ldr	r3, [pc, #552]	; (8006850 <HAL_RCC_ClockConfig+0x240>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d910      	bls.n	8006654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006632:	4b87      	ldr	r3, [pc, #540]	; (8006850 <HAL_RCC_ClockConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f023 020f 	bic.w	r2, r3, #15
 800663a:	4985      	ldr	r1, [pc, #532]	; (8006850 <HAL_RCC_ClockConfig+0x240>)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	4313      	orrs	r3, r2
 8006640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006642:	4b83      	ldr	r3, [pc, #524]	; (8006850 <HAL_RCC_ClockConfig+0x240>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e184      	b.n	800695e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d010      	beq.n	8006682 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	4b7b      	ldr	r3, [pc, #492]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800666c:	429a      	cmp	r2, r3
 800666e:	d908      	bls.n	8006682 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006670:	4b78      	ldr	r3, [pc, #480]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	4975      	ldr	r1, [pc, #468]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 800667e:	4313      	orrs	r3, r2
 8006680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d010      	beq.n	80066b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695a      	ldr	r2, [r3, #20]
 8006692:	4b70      	ldr	r3, [pc, #448]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800669a:	429a      	cmp	r2, r3
 800669c:	d908      	bls.n	80066b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800669e:	4b6d      	ldr	r3, [pc, #436]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	496a      	ldr	r1, [pc, #424]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d010      	beq.n	80066de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	4b64      	ldr	r3, [pc, #400]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d908      	bls.n	80066de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066cc:	4b61      	ldr	r3, [pc, #388]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	495e      	ldr	r1, [pc, #376]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d010      	beq.n	800670c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69da      	ldr	r2, [r3, #28]
 80066ee:	4b59      	ldr	r3, [pc, #356]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d908      	bls.n	800670c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80066fa:	4b56      	ldr	r3, [pc, #344]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	4953      	ldr	r1, [pc, #332]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006708:	4313      	orrs	r3, r2
 800670a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d010      	beq.n	800673a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	4b4d      	ldr	r3, [pc, #308]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	429a      	cmp	r2, r3
 8006726:	d908      	bls.n	800673a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006728:	4b4a      	ldr	r3, [pc, #296]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f023 020f 	bic.w	r2, r3, #15
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	4947      	ldr	r1, [pc, #284]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006736:	4313      	orrs	r3, r2
 8006738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d055      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006746:	4b43      	ldr	r3, [pc, #268]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	4940      	ldr	r1, [pc, #256]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006754:	4313      	orrs	r3, r2
 8006756:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d107      	bne.n	8006770 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006760:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d121      	bne.n	80067b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0f6      	b.n	800695e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d107      	bne.n	8006788 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006778:	4b36      	ldr	r3, [pc, #216]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d115      	bne.n	80067b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0ea      	b.n	800695e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d107      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006790:	4b30      	ldr	r3, [pc, #192]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	2b00      	cmp	r3, #0
 800679a:	d109      	bne.n	80067b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e0de      	b.n	800695e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067a0:	4b2c      	ldr	r3, [pc, #176]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0d6      	b.n	800695e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f023 0207 	bic.w	r2, r3, #7
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4925      	ldr	r1, [pc, #148]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c2:	f7fb fc87 	bl	80020d4 <HAL_GetTick>
 80067c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c8:	e00a      	b.n	80067e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ca:	f7fb fc83 	bl	80020d4 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e0be      	b.n	800695e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e0:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d1eb      	bne.n	80067ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d010      	beq.n	8006820 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	429a      	cmp	r2, r3
 800680c:	d208      	bcs.n	8006820 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800680e:	4b11      	ldr	r3, [pc, #68]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f023 020f 	bic.w	r2, r3, #15
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	490e      	ldr	r1, [pc, #56]	; (8006854 <HAL_RCC_ClockConfig+0x244>)
 800681c:	4313      	orrs	r3, r2
 800681e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_RCC_ClockConfig+0x240>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d214      	bcs.n	8006858 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682e:	4b08      	ldr	r3, [pc, #32]	; (8006850 <HAL_RCC_ClockConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f023 020f 	bic.w	r2, r3, #15
 8006836:	4906      	ldr	r1, [pc, #24]	; (8006850 <HAL_RCC_ClockConfig+0x240>)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	4313      	orrs	r3, r2
 800683c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683e:	4b04      	ldr	r3, [pc, #16]	; (8006850 <HAL_RCC_ClockConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d005      	beq.n	8006858 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e086      	b.n	800695e <HAL_RCC_ClockConfig+0x34e>
 8006850:	52002000 	.word	0x52002000
 8006854:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d010      	beq.n	8006886 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	4b3f      	ldr	r3, [pc, #252]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006870:	429a      	cmp	r2, r3
 8006872:	d208      	bcs.n	8006886 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006874:	4b3c      	ldr	r3, [pc, #240]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	4939      	ldr	r1, [pc, #228]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 8006882:	4313      	orrs	r3, r2
 8006884:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d010      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695a      	ldr	r2, [r3, #20]
 8006896:	4b34      	ldr	r3, [pc, #208]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800689e:	429a      	cmp	r2, r3
 80068a0:	d208      	bcs.n	80068b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068a2:	4b31      	ldr	r3, [pc, #196]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	492e      	ldr	r1, [pc, #184]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d010      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699a      	ldr	r2, [r3, #24]
 80068c4:	4b28      	ldr	r3, [pc, #160]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d208      	bcs.n	80068e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	4922      	ldr	r1, [pc, #136]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d010      	beq.n	8006910 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69da      	ldr	r2, [r3, #28]
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d208      	bcs.n	8006910 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068fe:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	4917      	ldr	r1, [pc, #92]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 800690c:	4313      	orrs	r3, r2
 800690e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006910:	f000 f834 	bl	800697c <HAL_RCC_GetSysClockFreq>
 8006914:	4601      	mov	r1, r0
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	0a1b      	lsrs	r3, r3, #8
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	4a12      	ldr	r2, [pc, #72]	; (800696c <HAL_RCC_ClockConfig+0x35c>)
 8006922:	5cd3      	ldrb	r3, [r2, r3]
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	fa21 f303 	lsr.w	r3, r1, r3
 800692c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800692e:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <HAL_RCC_ClockConfig+0x358>)
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	4a0d      	ldr	r2, [pc, #52]	; (800696c <HAL_RCC_ClockConfig+0x35c>)
 8006938:	5cd3      	ldrb	r3, [r2, r3]
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
 8006944:	4a0a      	ldr	r2, [pc, #40]	; (8006970 <HAL_RCC_ClockConfig+0x360>)
 8006946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006948:	4a0a      	ldr	r2, [pc, #40]	; (8006974 <HAL_RCC_ClockConfig+0x364>)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800694e:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <HAL_RCC_ClockConfig+0x368>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f7fb fb74 	bl	8002040 <HAL_InitTick>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	58024400 	.word	0x58024400
 800696c:	0800cc1c 	.word	0x0800cc1c
 8006970:	2400001c 	.word	0x2400001c
 8006974:	24000018 	.word	0x24000018
 8006978:	24000020 	.word	0x24000020

0800697c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800697c:	b480      	push	{r7}
 800697e:	b089      	sub	sp, #36	; 0x24
 8006980:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006982:	4baf      	ldr	r3, [pc, #700]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800698a:	2b18      	cmp	r3, #24
 800698c:	f200 814e 	bhi.w	8006c2c <HAL_RCC_GetSysClockFreq+0x2b0>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069fd 	.word	0x080069fd
 800699c:	08006c2d 	.word	0x08006c2d
 80069a0:	08006c2d 	.word	0x08006c2d
 80069a4:	08006c2d 	.word	0x08006c2d
 80069a8:	08006c2d 	.word	0x08006c2d
 80069ac:	08006c2d 	.word	0x08006c2d
 80069b0:	08006c2d 	.word	0x08006c2d
 80069b4:	08006c2d 	.word	0x08006c2d
 80069b8:	08006a23 	.word	0x08006a23
 80069bc:	08006c2d 	.word	0x08006c2d
 80069c0:	08006c2d 	.word	0x08006c2d
 80069c4:	08006c2d 	.word	0x08006c2d
 80069c8:	08006c2d 	.word	0x08006c2d
 80069cc:	08006c2d 	.word	0x08006c2d
 80069d0:	08006c2d 	.word	0x08006c2d
 80069d4:	08006c2d 	.word	0x08006c2d
 80069d8:	08006a29 	.word	0x08006a29
 80069dc:	08006c2d 	.word	0x08006c2d
 80069e0:	08006c2d 	.word	0x08006c2d
 80069e4:	08006c2d 	.word	0x08006c2d
 80069e8:	08006c2d 	.word	0x08006c2d
 80069ec:	08006c2d 	.word	0x08006c2d
 80069f0:	08006c2d 	.word	0x08006c2d
 80069f4:	08006c2d 	.word	0x08006c2d
 80069f8:	08006a2f 	.word	0x08006a2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069fc:	4b90      	ldr	r3, [pc, #576]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a08:	4b8d      	ldr	r3, [pc, #564]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	08db      	lsrs	r3, r3, #3
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	4a8c      	ldr	r2, [pc, #560]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a14:	fa22 f303 	lsr.w	r3, r2, r3
 8006a18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006a1a:	e10a      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a1c:	4b89      	ldr	r3, [pc, #548]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a1e:	61bb      	str	r3, [r7, #24]
    break;
 8006a20:	e107      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a22:	4b89      	ldr	r3, [pc, #548]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006a24:	61bb      	str	r3, [r7, #24]
    break;
 8006a26:	e104      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006a28:	4b88      	ldr	r3, [pc, #544]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006a2a:	61bb      	str	r3, [r7, #24]
    break;
 8006a2c:	e101      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a2e:	4b84      	ldr	r3, [pc, #528]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a38:	4b81      	ldr	r3, [pc, #516]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	091b      	lsrs	r3, r3, #4
 8006a3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a44:	4b7e      	ldr	r3, [pc, #504]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a4e:	4b7c      	ldr	r3, [pc, #496]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a52:	08db      	lsrs	r3, r3, #3
 8006a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 80da 	beq.w	8006c26 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d05a      	beq.n	8006b2e <HAL_RCC_GetSysClockFreq+0x1b2>
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d302      	bcc.n	8006a82 <HAL_RCC_GetSysClockFreq+0x106>
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d078      	beq.n	8006b72 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006a80:	e099      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a82:	4b6f      	ldr	r3, [pc, #444]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d02d      	beq.n	8006aea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a8e:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	08db      	lsrs	r3, r3, #3
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	4a6a      	ldr	r2, [pc, #424]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab8:	4b61      	ldr	r3, [pc, #388]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006acc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006c50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006ae8:	e087      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006c54 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afc:	4b50      	ldr	r3, [pc, #320]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b10:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006c50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b2c:	e065      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b38:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006c58 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b40:	4b3f      	ldr	r3, [pc, #252]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b50:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b54:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006c50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b70:	e043      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006c5c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b84:	4b2e      	ldr	r3, [pc, #184]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8c:	ee07 3a90 	vmov	s15, r3
 8006b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b94:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b98:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006c50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bb4:	e021      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	ee07 3a90 	vmov	s15, r3
 8006bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006c58 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc8:	4b1d      	ldr	r3, [pc, #116]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bdc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006c50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006be0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006bfa:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	0a5b      	lsrs	r3, r3, #9
 8006c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c04:	3301      	adds	r3, #1
 8006c06:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1e:	ee17 3a90 	vmov	r3, s15
 8006c22:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c24:	e005      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61bb      	str	r3, [r7, #24]
    break;
 8006c2a:	e002      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006c2e:	61bb      	str	r3, [r7, #24]
    break;
 8006c30:	bf00      	nop
  }

  return sysclockfreq;
 8006c32:	69bb      	ldr	r3, [r7, #24]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3724      	adds	r7, #36	; 0x24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	58024400 	.word	0x58024400
 8006c44:	03d09000 	.word	0x03d09000
 8006c48:	003d0900 	.word	0x003d0900
 8006c4c:	017d7840 	.word	0x017d7840
 8006c50:	46000000 	.word	0x46000000
 8006c54:	4c742400 	.word	0x4c742400
 8006c58:	4a742400 	.word	0x4a742400
 8006c5c:	4bbebc20 	.word	0x4bbebc20

08006c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c66:	f7ff fe89 	bl	800697c <HAL_RCC_GetSysClockFreq>
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	0a1b      	lsrs	r3, r3, #8
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	4a0f      	ldr	r2, [pc, #60]	; (8006cb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c78:	5cd3      	ldrb	r3, [r2, r3]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8006c82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	4a09      	ldr	r2, [pc, #36]	; (8006cb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c8e:	5cd3      	ldrb	r3, [r2, r3]
 8006c90:	f003 031f 	and.w	r3, r3, #31
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9a:	4a07      	ldr	r2, [pc, #28]	; (8006cb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c9e:	4a07      	ldr	r2, [pc, #28]	; (8006cbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ca4:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	0800cc1c 	.word	0x0800cc1c
 8006cb8:	2400001c 	.word	0x2400001c
 8006cbc:	24000018 	.word	0x24000018

08006cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cc4:	f7ff ffcc 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8006cc8:	4601      	mov	r1, r0
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	091b      	lsrs	r3, r3, #4
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	4a04      	ldr	r2, [pc, #16]	; (8006ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cd6:	5cd3      	ldrb	r3, [r2, r3]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	58024400 	.word	0x58024400
 8006ce8:	0800cc1c 	.word	0x0800cc1c

08006cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cf0:	f7ff ffb6 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8006cf4:	4601      	mov	r1, r0
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	4a04      	ldr	r2, [pc, #16]	; (8006d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d02:	5cd3      	ldrb	r3, [r2, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	0800cc1c 	.word	0x0800cc1c

08006d18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d20:	2300      	movs	r3, #0
 8006d22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d24:	2300      	movs	r3, #0
 8006d26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d03d      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3c:	d013      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d42:	d802      	bhi.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006d48:	e01f      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d4e:	d013      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006d50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d54:	d01c      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006d56:	e018      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d58:	4baf      	ldr	r3, [pc, #700]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	4aae      	ldr	r2, [pc, #696]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d64:	e015      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	2102      	movs	r1, #2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 fd23 	bl	80087b8 <RCCEx_PLL2_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d76:	e00c      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3324      	adds	r3, #36	; 0x24
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 fdcc 	bl	800891c <RCCEx_PLL3_Config>
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d88:	e003      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8e:	e000      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d109      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d98:	4b9f      	ldr	r3, [pc, #636]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da4:	499c      	ldr	r1, [pc, #624]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	650b      	str	r3, [r1, #80]	; 0x50
 8006daa:	e001      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d03d      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d826      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006de1 	.word	0x08006de1
 8006dd0:	08006def 	.word	0x08006def
 8006dd4:	08006e01 	.word	0x08006e01
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e19 	.word	0x08006e19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de0:	4b8d      	ldr	r3, [pc, #564]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4a8c      	ldr	r2, [pc, #560]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dec:	e015      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 fcdf 	bl	80087b8 <RCCEx_PLL2_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dfe:	e00c      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3324      	adds	r3, #36	; 0x24
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fd88 	bl	800891c <RCCEx_PLL3_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e10:	e003      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75fb      	strb	r3, [r7, #23]
      break;
 8006e16:	e000      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e20:	4b7d      	ldr	r3, [pc, #500]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e24:	f023 0207 	bic.w	r2, r3, #7
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	497a      	ldr	r1, [pc, #488]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	650b      	str	r3, [r1, #80]	; 0x50
 8006e32:	e001      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d03e      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e48:	2b80      	cmp	r3, #128	; 0x80
 8006e4a:	d01c      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006e4c:	2b80      	cmp	r3, #128	; 0x80
 8006e4e:	d804      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006e54:	2b40      	cmp	r3, #64	; 0x40
 8006e56:	d00d      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006e58:	e01e      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e5c:	d01f      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e62:	d01e      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e64:	e018      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e66:	4b6c      	ldr	r3, [pc, #432]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	4a6b      	ldr	r2, [pc, #428]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e72:	e017      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f001 fc9c 	bl	80087b8 <RCCEx_PLL2_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e84:	e00e      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3324      	adds	r3, #36	; 0x24
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fd45 	bl	800891c <RCCEx_PLL3_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e96:	e005      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9c:	e002      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d109      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006eaa:	4b5b      	ldr	r3, [pc, #364]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb6:	4958      	ldr	r1, [pc, #352]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	650b      	str	r3, [r1, #80]	; 0x50
 8006ebc:	e001      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d044      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed8:	d01f      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ede:	d805      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ee8:	d00e      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006eea:	e01f      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006eec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ef0:	d01f      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ef6:	d01e      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006ef8:	e018      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006efa:	4b47      	ldr	r3, [pc, #284]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	4a46      	ldr	r2, [pc, #280]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f06:	e017      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fc52 	bl	80087b8 <RCCEx_PLL2_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f18:	e00e      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3324      	adds	r3, #36	; 0x24
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fcfb 	bl	800891c <RCCEx_PLL3_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f2a:	e005      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f30:	e002      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006f32:	bf00      	nop
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f3e:	4b36      	ldr	r3, [pc, #216]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f42:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f4c:	4932      	ldr	r1, [pc, #200]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	658b      	str	r3, [r1, #88]	; 0x58
 8006f52:	e001      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d044      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f6e:	d01f      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f74:	d805      	bhi.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006f7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f7e:	d00e      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f80:	e01f      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f86:	d01f      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f8c:	d01e      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f8e:	e018      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f90:	4b21      	ldr	r3, [pc, #132]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a20      	ldr	r2, [pc, #128]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f9c:	e017      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 fc07 	bl	80087b8 <RCCEx_PLL2_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006fae:	e00e      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3324      	adds	r3, #36	; 0x24
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fcb0 	bl	800891c <RCCEx_PLL3_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc0:	e005      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc6:	e002      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006fc8:	bf00      	nop
 8006fca:	e000      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006fd4:	4b10      	ldr	r3, [pc, #64]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fe2:	490d      	ldr	r1, [pc, #52]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	658b      	str	r3, [r1, #88]	; 0x58
 8006fe8:	e001      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d035      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d00c      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007002:	2b10      	cmp	r3, #16
 8007004:	d802      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01b      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800700a:	e017      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800700c:	2b20      	cmp	r3, #32
 800700e:	d00c      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007010:	2b30      	cmp	r3, #48	; 0x30
 8007012:	d018      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007014:	e012      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701c:	4baf      	ldr	r3, [pc, #700]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4aae      	ldr	r2, [pc, #696]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007028:	e00e      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	2102      	movs	r1, #2
 8007030:	4618      	mov	r0, r3
 8007032:	f001 fbc1 	bl	80087b8 <RCCEx_PLL2_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800703a:	e005      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
      break;
 8007040:	e002      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007042:	bf00      	nop
 8007044:	e000      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800704e:	4ba3      	ldr	r3, [pc, #652]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007052:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705a:	49a0      	ldr	r1, [pc, #640]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800705c:	4313      	orrs	r3, r2
 800705e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007060:	e001      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d042      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707a:	d01f      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800707c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007080:	d805      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708a:	d00e      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x392>
 800708c:	e01f      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800708e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007092:	d01f      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007098:	d01e      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800709a:	e018      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800709c:	4b8f      	ldr	r3, [pc, #572]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	4a8e      	ldr	r2, [pc, #568]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070a8:	e017      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	2100      	movs	r1, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f001 fb81 	bl	80087b8 <RCCEx_PLL2_Config>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070ba:	e00e      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 fc2a 	bl	800891c <RCCEx_PLL3_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070cc:	e005      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
      break;
 80070d2:	e002      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80070d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d109      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80070e0:	4b7e      	ldr	r3, [pc, #504]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ec:	497b      	ldr	r1, [pc, #492]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	650b      	str	r3, [r1, #80]	; 0x50
 80070f2:	e001      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d042      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800710c:	d01b      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800710e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007112:	d805      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d022      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800711e:	e01b      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007124:	d01d      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007126:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800712a:	d01c      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800712c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007130:	d01b      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007132:	e011      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3304      	adds	r3, #4
 8007138:	2101      	movs	r1, #1
 800713a:	4618      	mov	r0, r3
 800713c:	f001 fb3c 	bl	80087b8 <RCCEx_PLL2_Config>
 8007140:	4603      	mov	r3, r0
 8007142:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007144:	e012      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3324      	adds	r3, #36	; 0x24
 800714a:	2101      	movs	r1, #1
 800714c:	4618      	mov	r0, r3
 800714e:	f001 fbe5 	bl	800891c <RCCEx_PLL3_Config>
 8007152:	4603      	mov	r3, r0
 8007154:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007156:	e009      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	75fb      	strb	r3, [r7, #23]
      break;
 800715c:	e006      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800715e:	bf00      	nop
 8007160:	e004      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007162:	bf00      	nop
 8007164:	e002      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007166:	bf00      	nop
 8007168:	e000      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800716a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007172:	4b5a      	ldr	r3, [pc, #360]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007176:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717e:	4957      	ldr	r1, [pc, #348]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007180:	4313      	orrs	r3, r2
 8007182:	650b      	str	r3, [r1, #80]	; 0x50
 8007184:	e001      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d044      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800719c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a0:	d01b      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a6:	d805      	bhi.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d022      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80071ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b0:	d00a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80071b2:	e01b      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80071b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b8:	d01d      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80071ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071be:	d01c      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80071c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071c4:	d01b      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80071c6:	e011      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3304      	adds	r3, #4
 80071cc:	2101      	movs	r1, #1
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 faf2 	bl	80087b8 <RCCEx_PLL2_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80071d8:	e012      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3324      	adds	r3, #36	; 0x24
 80071de:	2101      	movs	r1, #1
 80071e0:	4618      	mov	r0, r3
 80071e2:	f001 fb9b 	bl	800891c <RCCEx_PLL3_Config>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80071ea:	e009      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
      break;
 80071f0:	e006      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071f2:	bf00      	nop
 80071f4:	e004      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071f6:	bf00      	nop
 80071f8:	e002      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071fa:	bf00      	nop
 80071fc:	e000      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007200:	7dfb      	ldrb	r3, [r7, #23]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007206:	4b35      	ldr	r3, [pc, #212]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007214:	4931      	ldr	r1, [pc, #196]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007216:	4313      	orrs	r3, r2
 8007218:	658b      	str	r3, [r1, #88]	; 0x58
 800721a:	e001      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02d      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007234:	d005      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800723a:	d009      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d013      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007240:	e00f      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007242:	4b26      	ldr	r3, [pc, #152]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	4a25      	ldr	r2, [pc, #148]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800724e:	e00c      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	2101      	movs	r1, #1
 8007256:	4618      	mov	r0, r3
 8007258:	f001 faae 	bl	80087b8 <RCCEx_PLL2_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007260:	e003      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	75fb      	strb	r3, [r7, #23]
      break;
 8007266:	e000      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007270:	4b1a      	ldr	r3, [pc, #104]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727c:	4917      	ldr	r1, [pc, #92]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800727e:	4313      	orrs	r3, r2
 8007280:	650b      	str	r3, [r1, #80]	; 0x50
 8007282:	e001      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d035      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007298:	2b03      	cmp	r3, #3
 800729a:	d81b      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072e1 	.word	0x080072e1
 80072a8:	080072b5 	.word	0x080072b5
 80072ac:	080072c3 	.word	0x080072c3
 80072b0:	080072e1 	.word	0x080072e1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b4:	4b09      	ldr	r3, [pc, #36]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	4a08      	ldr	r2, [pc, #32]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80072c0:	e00f      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3304      	adds	r3, #4
 80072c6:	2102      	movs	r1, #2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fa75 	bl	80087b8 <RCCEx_PLL2_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80072d2:	e006      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
      break;
 80072d8:	e003      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80072da:	bf00      	nop
 80072dc:	58024400 	.word	0x58024400
      break;
 80072e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d109      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072e8:	4bba      	ldr	r3, [pc, #744]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ec:	f023 0203 	bic.w	r2, r3, #3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f4:	49b7      	ldr	r1, [pc, #732]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072fa:	e001      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
 80072fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8086 	beq.w	800741a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800730e:	4bb2      	ldr	r3, [pc, #712]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4ab1      	ldr	r2, [pc, #708]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007318:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800731a:	f7fa fedb 	bl	80020d4 <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007320:	e009      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007322:	f7fa fed7 	bl	80020d4 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b64      	cmp	r3, #100	; 0x64
 800732e:	d902      	bls.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	75fb      	strb	r3, [r7, #23]
        break;
 8007334:	e005      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007336:	4ba8      	ldr	r3, [pc, #672]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0ef      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d166      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007348:	4ba2      	ldr	r3, [pc, #648]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800734a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007352:	4053      	eors	r3, r2
 8007354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007358:	2b00      	cmp	r3, #0
 800735a:	d013      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800735c:	4b9d      	ldr	r3, [pc, #628]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800735e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007364:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007366:	4b9b      	ldr	r3, [pc, #620]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	4a9a      	ldr	r2, [pc, #616]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800736c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007370:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007372:	4b98      	ldr	r3, [pc, #608]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007376:	4a97      	ldr	r2, [pc, #604]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800737c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800737e:	4a95      	ldr	r2, [pc, #596]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800738a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738e:	d115      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fa fea0 	bl	80020d4 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007396:	e00b      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007398:	f7fa fe9c 	bl	80020d4 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d902      	bls.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	75fb      	strb	r3, [r7, #23]
            break;
 80073ae:	e005      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073b0:	4b88      	ldr	r3, [pc, #544]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0ed      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d126      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073d0:	d10d      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80073d2:	4b80      	ldr	r3, [pc, #512]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073e0:	0919      	lsrs	r1, r3, #4
 80073e2:	4b7e      	ldr	r3, [pc, #504]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80073e4:	400b      	ands	r3, r1
 80073e6:	497b      	ldr	r1, [pc, #492]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	610b      	str	r3, [r1, #16]
 80073ec:	e005      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80073ee:	4b79      	ldr	r3, [pc, #484]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	4a78      	ldr	r2, [pc, #480]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80073f8:	6113      	str	r3, [r2, #16]
 80073fa:	4b76      	ldr	r3, [pc, #472]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007408:	4972      	ldr	r1, [pc, #456]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800740a:	4313      	orrs	r3, r2
 800740c:	670b      	str	r3, [r1, #112]	; 0x70
 800740e:	e004      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007410:	7dfb      	ldrb	r3, [r7, #23]
 8007412:	75bb      	strb	r3, [r7, #22]
 8007414:	e001      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d07d      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800742a:	2b28      	cmp	r3, #40	; 0x28
 800742c:	d866      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007503 	.word	0x08007503
 8007438:	080074fd 	.word	0x080074fd
 800743c:	080074fd 	.word	0x080074fd
 8007440:	080074fd 	.word	0x080074fd
 8007444:	080074fd 	.word	0x080074fd
 8007448:	080074fd 	.word	0x080074fd
 800744c:	080074fd 	.word	0x080074fd
 8007450:	080074fd 	.word	0x080074fd
 8007454:	080074d9 	.word	0x080074d9
 8007458:	080074fd 	.word	0x080074fd
 800745c:	080074fd 	.word	0x080074fd
 8007460:	080074fd 	.word	0x080074fd
 8007464:	080074fd 	.word	0x080074fd
 8007468:	080074fd 	.word	0x080074fd
 800746c:	080074fd 	.word	0x080074fd
 8007470:	080074fd 	.word	0x080074fd
 8007474:	080074eb 	.word	0x080074eb
 8007478:	080074fd 	.word	0x080074fd
 800747c:	080074fd 	.word	0x080074fd
 8007480:	080074fd 	.word	0x080074fd
 8007484:	080074fd 	.word	0x080074fd
 8007488:	080074fd 	.word	0x080074fd
 800748c:	080074fd 	.word	0x080074fd
 8007490:	080074fd 	.word	0x080074fd
 8007494:	08007503 	.word	0x08007503
 8007498:	080074fd 	.word	0x080074fd
 800749c:	080074fd 	.word	0x080074fd
 80074a0:	080074fd 	.word	0x080074fd
 80074a4:	080074fd 	.word	0x080074fd
 80074a8:	080074fd 	.word	0x080074fd
 80074ac:	080074fd 	.word	0x080074fd
 80074b0:	080074fd 	.word	0x080074fd
 80074b4:	08007503 	.word	0x08007503
 80074b8:	080074fd 	.word	0x080074fd
 80074bc:	080074fd 	.word	0x080074fd
 80074c0:	080074fd 	.word	0x080074fd
 80074c4:	080074fd 	.word	0x080074fd
 80074c8:	080074fd 	.word	0x080074fd
 80074cc:	080074fd 	.word	0x080074fd
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	08007503 	.word	0x08007503
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	2101      	movs	r1, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 f96a 	bl	80087b8 <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80074e8:	e00c      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3324      	adds	r3, #36	; 0x24
 80074ee:	2101      	movs	r1, #1
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 fa13 	bl	800891c <RCCEx_PLL3_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80074fa:	e003      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007500:	e000      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800750a:	4b32      	ldr	r3, [pc, #200]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007516:	492f      	ldr	r1, [pc, #188]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007518:	4313      	orrs	r3, r2
 800751a:	654b      	str	r3, [r1, #84]	; 0x54
 800751c:	e001      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d037      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007532:	2b05      	cmp	r3, #5
 8007534:	d820      	bhi.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007536:	a201      	add	r2, pc, #4	; (adr r2, 800753c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	0800757f 	.word	0x0800757f
 8007540:	08007555 	.word	0x08007555
 8007544:	08007567 	.word	0x08007567
 8007548:	0800757f 	.word	0x0800757f
 800754c:	0800757f 	.word	0x0800757f
 8007550:	0800757f 	.word	0x0800757f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3304      	adds	r3, #4
 8007558:	2101      	movs	r1, #1
 800755a:	4618      	mov	r0, r3
 800755c:	f001 f92c 	bl	80087b8 <RCCEx_PLL2_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007564:	e00c      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3324      	adds	r3, #36	; 0x24
 800756a:	2101      	movs	r1, #1
 800756c:	4618      	mov	r0, r3
 800756e:	f001 f9d5 	bl	800891c <RCCEx_PLL3_Config>
 8007572:	4603      	mov	r3, r0
 8007574:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007576:	e003      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]
      break;
 800757c:	e000      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800757e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007586:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758a:	f023 0207 	bic.w	r2, r3, #7
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007592:	4910      	ldr	r1, [pc, #64]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007594:	4313      	orrs	r3, r2
 8007596:	654b      	str	r3, [r1, #84]	; 0x54
 8007598:	e001      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d040      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	2b05      	cmp	r3, #5
 80075b2:	d827      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	0800760b 	.word	0x0800760b
 80075c0:	080075e1 	.word	0x080075e1
 80075c4:	080075f3 	.word	0x080075f3
 80075c8:	0800760b 	.word	0x0800760b
 80075cc:	0800760b 	.word	0x0800760b
 80075d0:	0800760b 	.word	0x0800760b
 80075d4:	58024400 	.word	0x58024400
 80075d8:	58024800 	.word	0x58024800
 80075dc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3304      	adds	r3, #4
 80075e4:	2101      	movs	r1, #1
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f8e6 	bl	80087b8 <RCCEx_PLL2_Config>
 80075ec:	4603      	mov	r3, r0
 80075ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80075f0:	e00c      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3324      	adds	r3, #36	; 0x24
 80075f6:	2101      	movs	r1, #1
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 f98f 	bl	800891c <RCCEx_PLL3_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007602:	e003      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
      break;
 8007608:	e000      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800760a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007612:	4bb2      	ldr	r3, [pc, #712]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007616:	f023 0207 	bic.w	r2, r3, #7
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007620:	49ae      	ldr	r1, [pc, #696]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007622:	4313      	orrs	r3, r2
 8007624:	658b      	str	r3, [r1, #88]	; 0x58
 8007626:	e001      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d044      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800763e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007642:	d01b      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007648:	d805      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d022      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800764e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007652:	d00a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007654:	e01b      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765a:	d01d      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800765c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007660:	d01c      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007662:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007666:	d01b      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007668:	e011      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f001 f8a1 	bl	80087b8 <RCCEx_PLL2_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800767a:	e012      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3324      	adds	r3, #36	; 0x24
 8007680:	2102      	movs	r1, #2
 8007682:	4618      	mov	r0, r3
 8007684:	f001 f94a 	bl	800891c <RCCEx_PLL3_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800768c:	e009      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	75fb      	strb	r3, [r7, #23]
      break;
 8007692:	e006      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007694:	bf00      	nop
 8007696:	e004      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007698:	bf00      	nop
 800769a:	e002      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800769c:	bf00      	nop
 800769e:	e000      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80076a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076a8:	4b8c      	ldr	r3, [pc, #560]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b6:	4989      	ldr	r1, [pc, #548]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	654b      	str	r3, [r1, #84]	; 0x54
 80076bc:	e001      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d044      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d8:	d01b      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80076da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076de:	d805      	bhi.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d022      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80076e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80076ea:	e01b      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80076ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f0:	d01d      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80076f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076f6:	d01c      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80076f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076fc:	d01b      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80076fe:	e011      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f001 f856 	bl	80087b8 <RCCEx_PLL2_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007710:	e012      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3324      	adds	r3, #36	; 0x24
 8007716:	2102      	movs	r1, #2
 8007718:	4618      	mov	r0, r3
 800771a:	f001 f8ff 	bl	800891c <RCCEx_PLL3_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007722:	e009      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
      break;
 8007728:	e006      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800772a:	bf00      	nop
 800772c:	e004      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800772e:	bf00      	nop
 8007730:	e002      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800773e:	4b67      	ldr	r3, [pc, #412]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800774c:	4963      	ldr	r1, [pc, #396]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800774e:	4313      	orrs	r3, r2
 8007750:	658b      	str	r3, [r1, #88]	; 0x58
 8007752:	e001      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007760:	2b00      	cmp	r3, #0
 8007762:	d044      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800776a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800776e:	d01b      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007774:	d805      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d022      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800777a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777e:	d00a      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007780:	e01b      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007786:	d01d      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007788:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800778c:	d01c      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800778e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007792:	d01b      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007794:	e011      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3304      	adds	r3, #4
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f001 f80b 	bl	80087b8 <RCCEx_PLL2_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80077a6:	e012      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3324      	adds	r3, #36	; 0x24
 80077ac:	2102      	movs	r1, #2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 f8b4 	bl	800891c <RCCEx_PLL3_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80077b8:	e009      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
      break;
 80077be:	e006      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80077c0:	bf00      	nop
 80077c2:	e004      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80077c4:	bf00      	nop
 80077c6:	e002      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80077c8:	bf00      	nop
 80077ca:	e000      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80077cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077d4:	4b41      	ldr	r3, [pc, #260]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077e2:	493e      	ldr	r1, [pc, #248]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	658b      	str	r3, [r1, #88]	; 0x58
 80077e8:	e001      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01a      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007804:	d10a      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3324      	adds	r3, #36	; 0x24
 800780a:	2102      	movs	r1, #2
 800780c:	4618      	mov	r0, r3
 800780e:	f001 f885 	bl	800891c <RCCEx_PLL3_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800781c:	4b2f      	ldr	r3, [pc, #188]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800781e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007820:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800782a:	492c      	ldr	r1, [pc, #176]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800782c:	4313      	orrs	r3, r2
 800782e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0310 	and.w	r3, r3, #16
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01a      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007846:	d10a      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3324      	adds	r3, #36	; 0x24
 800784c:	2102      	movs	r1, #2
 800784e:	4618      	mov	r0, r3
 8007850:	f001 f864 	bl	800891c <RCCEx_PLL3_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800785e:	4b1f      	ldr	r3, [pc, #124]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007862:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800786c:	491b      	ldr	r1, [pc, #108]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800786e:	4313      	orrs	r3, r2
 8007870:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d032      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007888:	d00d      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800788a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788e:	d016      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d111      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3304      	adds	r3, #4
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f000 ff8c 	bl	80087b8 <RCCEx_PLL2_Config>
 80078a0:	4603      	mov	r3, r0
 80078a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80078a4:	e00c      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3324      	adds	r3, #36	; 0x24
 80078aa:	2102      	movs	r1, #2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 f835 	bl	800891c <RCCEx_PLL3_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80078b6:	e003      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
      break;
 80078bc:	e000      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80078be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10c      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078d4:	4901      	ldr	r1, [pc, #4]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	658b      	str	r3, [r1, #88]	; 0x58
 80078da:	e003      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80078dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d02f      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078fa:	d00c      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80078fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007900:	d015      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007906:	d10f      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007908:	4b71      	ldr	r3, [pc, #452]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	4a70      	ldr	r2, [pc, #448]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800790e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007914:	e00c      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3324      	adds	r3, #36	; 0x24
 800791a:	2101      	movs	r1, #1
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fffd 	bl	800891c <RCCEx_PLL3_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007926:	e003      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	75fb      	strb	r3, [r7, #23]
      break;
 800792c:	e000      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800792e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007936:	4b66      	ldr	r3, [pc, #408]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007944:	4962      	ldr	r1, [pc, #392]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007946:	4313      	orrs	r3, r2
 8007948:	654b      	str	r3, [r1, #84]	; 0x54
 800794a:	e001      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d029      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007968:	d007      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800796a:	e00f      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800796c:	4b58      	ldr	r3, [pc, #352]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	4a57      	ldr	r2, [pc, #348]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007978:	e00b      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3304      	adds	r3, #4
 800797e:	2102      	movs	r1, #2
 8007980:	4618      	mov	r0, r3
 8007982:	f000 ff19 	bl	80087b8 <RCCEx_PLL2_Config>
 8007986:	4603      	mov	r3, r0
 8007988:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800798a:	e002      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	75fb      	strb	r3, [r7, #23]
      break;
 8007990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007998:	4b4d      	ldr	r3, [pc, #308]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800799a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a4:	494a      	ldr	r1, [pc, #296]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079aa:	e001      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3324      	adds	r3, #36	; 0x24
 80079c0:	2102      	movs	r1, #2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 ffaa 	bl	800891c <RCCEx_PLL3_Config>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d02f      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e6:	d00c      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80079e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ec:	d802      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d011      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80079f2:	e00d      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80079f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f8:	d00f      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80079fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079fe:	d00e      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007a00:	e006      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a02:	4b33      	ldr	r3, [pc, #204]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	4a32      	ldr	r2, [pc, #200]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007a0e:	e007      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	75fb      	strb	r3, [r7, #23]
      break;
 8007a14:	e004      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a16:	bf00      	nop
 8007a18:	e002      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a1a:	bf00      	nop
 8007a1c:	e000      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a26:	4b2a      	ldr	r3, [pc, #168]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a32:	4927      	ldr	r1, [pc, #156]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	654b      	str	r3, [r1, #84]	; 0x54
 8007a38:	e001      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a4a:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a56:	491e      	ldr	r1, [pc, #120]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a68:	4b19      	ldr	r3, [pc, #100]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a74:	4916      	ldr	r1, [pc, #88]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	4a11      	ldr	r2, [pc, #68]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a90:	6113      	str	r3, [r2, #16]
 8007a92:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a9c:	490c      	ldr	r1, [pc, #48]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da08      	bge.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab6:	4906      	ldr	r1, [pc, #24]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007abc:	7dbb      	ldrb	r3, [r7, #22]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e000      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	58024400 	.word	0x58024400

08007ad4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b090      	sub	sp, #64	; 0x40
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae2:	d150      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007ae4:	4ba1      	ldr	r3, [pc, #644]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d844      	bhi.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007af4:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afa:	bf00      	nop
 8007afc:	08007b11 	.word	0x08007b11
 8007b00:	08007b21 	.word	0x08007b21
 8007b04:	08007b31 	.word	0x08007b31
 8007b08:	08007b79 	.word	0x08007b79
 8007b0c:	08007b41 	.word	0x08007b41
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fd03 	bl	8008520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1e:	e241      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b20:	f107 0318 	add.w	r3, r7, #24
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fa63 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b2e:	e239      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b30:	f107 030c 	add.w	r3, r7, #12
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fba7 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b3e:	e231      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b40:	4b8a      	ldr	r3, [pc, #552]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b50:	4b87      	ldr	r3, [pc, #540]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b54:	e226      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b5c:	d102      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007b5e:	4b85      	ldr	r3, [pc, #532]	; (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b62:	e21f      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b6a:	d102      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007b6c:	4b82      	ldr	r3, [pc, #520]	; (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b70:	e218      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b76:	e215      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b78:	4b80      	ldr	r3, [pc, #512]	; (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b7c:	e212      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b82:	bf00      	nop
 8007b84:	e20e      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b8c:	d14f      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007b8e:	4b77      	ldr	r3, [pc, #476]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007b96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	2b80      	cmp	r3, #128	; 0x80
 8007b9c:	d01c      	beq.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007b9e:	2b80      	cmp	r3, #128	; 0x80
 8007ba0:	d804      	bhi.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d008      	beq.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d00e      	beq.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007baa:	e03c      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007bac:	2bc0      	cmp	r3, #192	; 0xc0
 8007bae:	d037      	beq.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb4:	d018      	beq.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007bb6:	e036      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fcaf 	bl	8008520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc6:	e1ed      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc8:	f107 0318 	add.w	r3, r7, #24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fa0f 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd6:	e1e5      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd8:	f107 030c 	add.w	r3, r7, #12
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fb53 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be6:	e1dd      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007be8:	4b60      	ldr	r3, [pc, #384]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bf8:	4b5d      	ldr	r3, [pc, #372]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007bfc:	e1d2      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c04:	d102      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007c06:	4b5b      	ldr	r3, [pc, #364]	; (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c0a:	e1cb      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c12:	d102      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007c14:	4b58      	ldr	r3, [pc, #352]	; (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c18:	e1c4      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1e:	e1c1      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c20:	4b56      	ldr	r3, [pc, #344]	; (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c24:	e1be      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c2a:	bf00      	nop
 8007c2c:	e1ba      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c34:	d153      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007c36:	4b4d      	ldr	r3, [pc, #308]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007c3e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c46:	d01f      	beq.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c4c:	d805      	bhi.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c56:	d00f      	beq.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007c58:	e03d      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007c5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c5e:	d037      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007c60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c64:	d018      	beq.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007c66:	e036      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fc57 	bl	8008520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c76:	e195      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c78:	f107 0318 	add.w	r3, r7, #24
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f9b7 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c86:	e18d      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c88:	f107 030c 	add.w	r3, r7, #12
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 fafb 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c96:	e185      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c98:	4b34      	ldr	r3, [pc, #208]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ca8:	4b31      	ldr	r3, [pc, #196]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007cac:	e17a      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb4:	d102      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007cb6:	4b2f      	ldr	r3, [pc, #188]	; (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cba:	e173      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc2:	d102      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007cc4:	4b2c      	ldr	r3, [pc, #176]	; (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cc8:	e16c      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cce:	e169      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cd0:	4b2a      	ldr	r3, [pc, #168]	; (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd4:	e166      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cda:	bf00      	nop
 8007cdc:	e162      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce4:	d15d      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007ce6:	4b21      	ldr	r3, [pc, #132]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007cee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cf6:	d01f      	beq.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007cf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cfc:	d805      	bhi.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007d02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d06:	d00f      	beq.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007d08:	e047      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007d0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d0e:	d041      	beq.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d14:	d018      	beq.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007d16:	e040      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 fbff 	bl	8008520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d26:	e13d      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d28:	f107 0318 	add.w	r3, r7, #24
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f95f 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d36:	e135      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d38:	f107 030c 	add.w	r3, r7, #12
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 faa3 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d46:	e12d      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d48:	4b08      	ldr	r3, [pc, #32]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d5c:	e122      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d64:	d10c      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007d66:	4b03      	ldr	r3, [pc, #12]	; (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d6a:	e11b      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007d6c:	58024400 	.word	0x58024400
 8007d70:	03d09000 	.word	0x03d09000
 8007d74:	003d0900 	.word	0x003d0900
 8007d78:	017d7840 	.word	0x017d7840
 8007d7c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d86:	d102      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007d88:	4b89      	ldr	r3, [pc, #548]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d8c:	e10a      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d92:	e107      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d94:	4b87      	ldr	r3, [pc, #540]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d98:	e104      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9e:	bf00      	nop
 8007da0:	e100      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da8:	d153      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007daa:	4b83      	ldr	r3, [pc, #524]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dba:	d01f      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc0:	d805      	bhi.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dca:	d00f      	beq.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007dcc:	e03d      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dd2:	d037      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dd8:	d018      	beq.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007dda:	e036      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fb9d 	bl	8008520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dea:	e0db      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dec:	f107 0318 	add.w	r3, r7, #24
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f8fd 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfa:	e0d3      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dfc:	f107 030c 	add.w	r3, r7, #12
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fa41 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0a:	e0cb      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e0c:	4b6a      	ldr	r3, [pc, #424]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e1c:	4b67      	ldr	r3, [pc, #412]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e20:	e0c0      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e28:	d102      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007e2a:	4b65      	ldr	r3, [pc, #404]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2e:	e0b9      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e36:	d102      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007e38:	4b5d      	ldr	r3, [pc, #372]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e3c:	e0b2      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e42:	e0af      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e44:	4b5b      	ldr	r3, [pc, #364]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e48:	e0ac      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e4e:	bf00      	nop
 8007e50:	e0a8      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e58:	d13d      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e5a:	4b57      	ldr	r3, [pc, #348]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6a:	d00c      	beq.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e70:	d011      	beq.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d12b      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e76:	f107 0318 	add.w	r3, r7, #24
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f8b8 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e84:	e08e      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e86:	f107 030c 	add.w	r3, r7, #12
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f9fc 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e94:	e086      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e96:	4b48      	ldr	r3, [pc, #288]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ea6:	4b45      	ldr	r3, [pc, #276]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007eaa:	e07b      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb2:	d102      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007eb4:	4b42      	ldr	r3, [pc, #264]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb8:	e074      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec0:	d102      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007ec2:	4b3b      	ldr	r3, [pc, #236]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec6:	e06d      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ecc:	e06a      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed2:	bf00      	nop
 8007ed4:	e066      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007edc:	d11f      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007ede:	4b36      	ldr	r3, [pc, #216]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef2:	d008      	beq.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007ef4:	e00f      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fb10 	bl	8008520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f04:	e04e      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f06:	f107 0318 	add.w	r3, r7, #24
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f870 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f14:	e046      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f1a:	bf00      	nop
 8007f1c:	e042      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f24:	d13c      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007f26:	4b24      	ldr	r3, [pc, #144]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007f2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f36:	d01e      	beq.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f3c:	d805      	bhi.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f46:	d00e      	beq.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007f48:	e026      	b.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4e:	d01d      	beq.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f54:	d01d      	beq.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f5a:	d014      	beq.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007f5c:	e01c      	b.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007f5e:	f000 f831 	bl	8007fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f62:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007f64:	e01e      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f66:	f107 0318 	add.w	r3, r7, #24
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f840 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f74:	e016      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f76:	f107 030c 	add.w	r3, r7, #12
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f984 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f84:	e00e      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f8a:	e00b      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f90:	e008      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007f92:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f96:	e005      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f9c:	bf00      	nop
 8007f9e:	e001      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3740      	adds	r7, #64	; 0x40
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	017d7840 	.word	0x017d7840
 8007fb4:	00bb8000 	.word	0x00bb8000
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	03d09000 	.word	0x03d09000
 8007fc0:	003d0900 	.word	0x003d0900

08007fc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007fc8:	f7fe fe4a 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8007fcc:	4601      	mov	r1, r0
 8007fce:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	091b      	lsrs	r3, r3, #4
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	4a04      	ldr	r2, [pc, #16]	; (8007fec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007fda:	5cd3      	ldrb	r3, [r2, r3]
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	58024400 	.word	0x58024400
 8007fec:	0800cc1c 	.word	0x0800cc1c

08007ff0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b089      	sub	sp, #36	; 0x24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ff8:	4b9d      	ldr	r3, [pc, #628]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffc:	f003 0303 	and.w	r3, r3, #3
 8008000:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008002:	4b9b      	ldr	r3, [pc, #620]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008006:	0b1b      	lsrs	r3, r3, #12
 8008008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800800c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800800e:	4b98      	ldr	r3, [pc, #608]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	091b      	lsrs	r3, r3, #4
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800801a:	4b95      	ldr	r3, [pc, #596]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	08db      	lsrs	r3, r3, #3
 8008020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 810a 	beq.w	8008252 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d05a      	beq.n	80080fa <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008044:	2b01      	cmp	r3, #1
 8008046:	d302      	bcc.n	800804e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008048:	2b02      	cmp	r3, #2
 800804a:	d078      	beq.n	800813e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800804c:	e099      	b.n	8008182 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800804e:	4b88      	ldr	r3, [pc, #544]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d02d      	beq.n	80080b6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800805a:	4b85      	ldr	r3, [pc, #532]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	08db      	lsrs	r3, r3, #3
 8008060:	f003 0303 	and.w	r3, r3, #3
 8008064:	4a83      	ldr	r2, [pc, #524]	; (8008274 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008066:	fa22 f303 	lsr.w	r3, r2, r3
 800806a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	ee07 3a90 	vmov	s15, r3
 800807c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008084:	4b7a      	ldr	r3, [pc, #488]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808c:	ee07 3a90 	vmov	s15, r3
 8008090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008094:	ed97 6a03 	vldr	s12, [r7, #12]
 8008098:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008278 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800809c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080b4:	e087      	b.n	80081c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	ee07 3a90 	vmov	s15, r3
 80080bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800827c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80080c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c8:	4b69      	ldr	r3, [pc, #420]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80080dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008278 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080f8:	e065      	b.n	80081c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008104:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810c:	4b58      	ldr	r3, [pc, #352]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008120:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008278 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008138:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800813c:	e043      	b.n	80081c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	ee07 3a90 	vmov	s15, r3
 8008144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008148:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800814c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008150:	4b47      	ldr	r3, [pc, #284]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008158:	ee07 3a90 	vmov	s15, r3
 800815c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008160:	ed97 6a03 	vldr	s12, [r7, #12]
 8008164:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008278 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008180:	e021      	b.n	80081c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	ee07 3a90 	vmov	s15, r3
 8008188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008194:	4b36      	ldr	r3, [pc, #216]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008278 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80081ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081c4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80081c6:	4b2a      	ldr	r3, [pc, #168]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	0a5b      	lsrs	r3, r3, #9
 80081cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ec:	ee17 2a90 	vmov	r2, s15
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80081f4:	4b1e      	ldr	r3, [pc, #120]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	0c1b      	lsrs	r3, r3, #16
 80081fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800820a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800820e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800821a:	ee17 2a90 	vmov	r2, s15
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008222:	4b13      	ldr	r3, [pc, #76]	; (8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	0e1b      	lsrs	r3, r3, #24
 8008228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800822c:	ee07 3a90 	vmov	s15, r3
 8008230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008238:	ee37 7a87 	vadd.f32	s14, s15, s14
 800823c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008248:	ee17 2a90 	vmov	r2, s15
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008250:	e008      	b.n	8008264 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	609a      	str	r2, [r3, #8]
}
 8008264:	bf00      	nop
 8008266:	3724      	adds	r7, #36	; 0x24
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	58024400 	.word	0x58024400
 8008274:	03d09000 	.word	0x03d09000
 8008278:	46000000 	.word	0x46000000
 800827c:	4c742400 	.word	0x4c742400
 8008280:	4a742400 	.word	0x4a742400
 8008284:	4bbebc20 	.word	0x4bbebc20

08008288 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008288:	b480      	push	{r7}
 800828a:	b089      	sub	sp, #36	; 0x24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008290:	4b9d      	ldr	r3, [pc, #628]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800829a:	4b9b      	ldr	r3, [pc, #620]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	0d1b      	lsrs	r3, r3, #20
 80082a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082a6:	4b98      	ldr	r3, [pc, #608]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	0a1b      	lsrs	r3, r3, #8
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80082b2:	4b95      	ldr	r3, [pc, #596]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b6:	08db      	lsrs	r3, r3, #3
 80082b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	fb02 f303 	mul.w	r3, r2, r3
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 810a 	beq.w	80084ea <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d05a      	beq.n	8008392 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d302      	bcc.n	80082e6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d078      	beq.n	80083d6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80082e4:	e099      	b.n	800841a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082e6:	4b88      	ldr	r3, [pc, #544]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d02d      	beq.n	800834e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082f2:	4b85      	ldr	r3, [pc, #532]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	08db      	lsrs	r3, r3, #3
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	4a83      	ldr	r2, [pc, #524]	; (800850c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80082fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008302:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	ee07 3a90 	vmov	s15, r3
 8008314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831c:	4b7a      	ldr	r3, [pc, #488]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008330:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008348:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800834c:	e087      	b.n	800845e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008358:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008514 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800835c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008360:	4b69      	ldr	r3, [pc, #420]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008368:	ee07 3a90 	vmov	s15, r3
 800836c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008370:	ed97 6a03 	vldr	s12, [r7, #12]
 8008374:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008390:	e065      	b.n	800845e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	ee07 3a90 	vmov	s15, r3
 8008398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80083a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a4:	4b58      	ldr	r3, [pc, #352]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ac:	ee07 3a90 	vmov	s15, r3
 80083b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80083b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80083bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083d4:	e043      	b.n	800845e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	ee07 3a90 	vmov	s15, r3
 80083dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800851c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80083e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e8:	4b47      	ldr	r3, [pc, #284]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80083fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800840c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008414:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008418:	e021      	b.n	800845e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008424:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008518 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842c:	4b36      	ldr	r3, [pc, #216]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008440:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800844c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008458:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800845c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800845e:	4b2a      	ldr	r3, [pc, #168]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	0a5b      	lsrs	r3, r3, #9
 8008464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008478:	edd7 6a07 	vldr	s13, [r7, #28]
 800847c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008484:	ee17 2a90 	vmov	r2, s15
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800848c:	4b1e      	ldr	r3, [pc, #120]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	0c1b      	lsrs	r3, r3, #16
 8008492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084b2:	ee17 2a90 	vmov	r2, s15
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80084ba:	4b13      	ldr	r3, [pc, #76]	; (8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	0e1b      	lsrs	r3, r3, #24
 80084c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c4:	ee07 3a90 	vmov	s15, r3
 80084c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80084d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084e0:	ee17 2a90 	vmov	r2, s15
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084e8:	e008      	b.n	80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	609a      	str	r2, [r3, #8]
}
 80084fc:	bf00      	nop
 80084fe:	3724      	adds	r7, #36	; 0x24
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	58024400 	.word	0x58024400
 800850c:	03d09000 	.word	0x03d09000
 8008510:	46000000 	.word	0x46000000
 8008514:	4c742400 	.word	0x4c742400
 8008518:	4a742400 	.word	0x4a742400
 800851c:	4bbebc20 	.word	0x4bbebc20

08008520 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008520:	b480      	push	{r7}
 8008522:	b089      	sub	sp, #36	; 0x24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008528:	4b9d      	ldr	r3, [pc, #628]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	f003 0303 	and.w	r3, r3, #3
 8008530:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008532:	4b9b      	ldr	r3, [pc, #620]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008536:	091b      	lsrs	r3, r3, #4
 8008538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800853c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800853e:	4b98      	ldr	r3, [pc, #608]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008548:	4b95      	ldr	r3, [pc, #596]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800854a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854c:	08db      	lsrs	r3, r3, #3
 800854e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	fb02 f303 	mul.w	r3, r2, r3
 8008558:	ee07 3a90 	vmov	s15, r3
 800855c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008560:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 810a 	beq.w	8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d05a      	beq.n	8008628 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008572:	2b01      	cmp	r3, #1
 8008574:	d302      	bcc.n	800857c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008576:	2b02      	cmp	r3, #2
 8008578:	d078      	beq.n	800866c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800857a:	e099      	b.n	80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800857c:	4b88      	ldr	r3, [pc, #544]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	2b00      	cmp	r3, #0
 8008586:	d02d      	beq.n	80085e4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008588:	4b85      	ldr	r3, [pc, #532]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	08db      	lsrs	r3, r3, #3
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	4a84      	ldr	r2, [pc, #528]	; (80087a4 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
 8008598:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	ee07 3a90 	vmov	s15, r3
 80085a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b2:	4b7b      	ldr	r3, [pc, #492]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085e2:	e087      	b.n	80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80085f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f6:	4b6a      	ldr	r3, [pc, #424]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008606:	ed97 6a03 	vldr	s12, [r7, #12]
 800860a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800860e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800861a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008626:	e065      	b.n	80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008632:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863a:	4b59      	ldr	r3, [pc, #356]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864a:	ed97 6a03 	vldr	s12, [r7, #12]
 800864e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800866a:	e043      	b.n	80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008676:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800867a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867e:	4b48      	ldr	r3, [pc, #288]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008692:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ae:	e021      	b.n	80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80086be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c2:	4b37      	ldr	r3, [pc, #220]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087a8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80086da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086f2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80086f4:	4b2a      	ldr	r3, [pc, #168]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	0a5b      	lsrs	r3, r3, #9
 80086fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800870a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800871a:	ee17 2a90 	vmov	r2, s15
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008722:	4b1f      	ldr	r3, [pc, #124]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008726:	0c1b      	lsrs	r3, r3, #16
 8008728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800873c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008748:	ee17 2a90 	vmov	r2, s15
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008750:	4b13      	ldr	r3, [pc, #76]	; (80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	0e1b      	lsrs	r3, r3, #24
 8008756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800876a:	edd7 6a07 	vldr	s13, [r7, #28]
 800876e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008776:	ee17 2a90 	vmov	r2, s15
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800877e:	e008      	b.n	8008792 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	609a      	str	r2, [r3, #8]
}
 8008792:	bf00      	nop
 8008794:	3724      	adds	r7, #36	; 0x24
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	58024400 	.word	0x58024400
 80087a4:	03d09000 	.word	0x03d09000
 80087a8:	46000000 	.word	0x46000000
 80087ac:	4c742400 	.word	0x4c742400
 80087b0:	4a742400 	.word	0x4a742400
 80087b4:	4bbebc20 	.word	0x4bbebc20

080087b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087c6:	4b53      	ldr	r3, [pc, #332]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d101      	bne.n	80087d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e099      	b.n	800890a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087d6:	4b4f      	ldr	r3, [pc, #316]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a4e      	ldr	r2, [pc, #312]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80087dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e2:	f7f9 fc77 	bl	80020d4 <HAL_GetTick>
 80087e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087e8:	e008      	b.n	80087fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087ea:	f7f9 fc73 	bl	80020d4 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d901      	bls.n	80087fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e086      	b.n	800890a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087fc:	4b45      	ldr	r3, [pc, #276]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1f0      	bne.n	80087ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008808:	4b42      	ldr	r3, [pc, #264]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	031b      	lsls	r3, r3, #12
 8008816:	493f      	ldr	r1, [pc, #252]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008818:	4313      	orrs	r3, r2
 800881a:	628b      	str	r3, [r1, #40]	; 0x28
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	3b01      	subs	r3, #1
 8008822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	3b01      	subs	r3, #1
 800882c:	025b      	lsls	r3, r3, #9
 800882e:	b29b      	uxth	r3, r3
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	3b01      	subs	r3, #1
 8008838:	041b      	lsls	r3, r3, #16
 800883a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	3b01      	subs	r3, #1
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800884c:	4931      	ldr	r1, [pc, #196]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008852:	4b30      	ldr	r3, [pc, #192]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	492d      	ldr	r1, [pc, #180]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008860:	4313      	orrs	r3, r2
 8008862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008864:	4b2b      	ldr	r3, [pc, #172]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	f023 0220 	bic.w	r2, r3, #32
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	4928      	ldr	r1, [pc, #160]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008872:	4313      	orrs	r3, r2
 8008874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008876:	4b27      	ldr	r3, [pc, #156]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	4a26      	ldr	r2, [pc, #152]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 800887c:	f023 0310 	bic.w	r3, r3, #16
 8008880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008882:	4b24      	ldr	r3, [pc, #144]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008886:	4b24      	ldr	r3, [pc, #144]	; (8008918 <RCCEx_PLL2_Config+0x160>)
 8008888:	4013      	ands	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	69d2      	ldr	r2, [r2, #28]
 800888e:	00d2      	lsls	r2, r2, #3
 8008890:	4920      	ldr	r1, [pc, #128]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008892:	4313      	orrs	r3, r2
 8008894:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008896:	4b1f      	ldr	r3, [pc, #124]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	4a1e      	ldr	r2, [pc, #120]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 800889c:	f043 0310 	orr.w	r3, r3, #16
 80088a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80088a8:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	4a19      	ldr	r2, [pc, #100]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088b4:	e00f      	b.n	80088d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d106      	bne.n	80088ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088bc:	4b15      	ldr	r3, [pc, #84]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	4a14      	ldr	r2, [pc, #80]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088c8:	e005      	b.n	80088d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088ca:	4b12      	ldr	r3, [pc, #72]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	4a11      	ldr	r2, [pc, #68]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088d6:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a0e      	ldr	r2, [pc, #56]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e2:	f7f9 fbf7 	bl	80020d4 <HAL_GetTick>
 80088e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088e8:	e008      	b.n	80088fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088ea:	f7f9 fbf3 	bl	80020d4 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e006      	b.n	800890a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <RCCEx_PLL2_Config+0x15c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0f0      	beq.n	80088ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	58024400 	.word	0x58024400
 8008918:	ffff0007 	.word	0xffff0007

0800891c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800892a:	4b53      	ldr	r3, [pc, #332]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	2b03      	cmp	r3, #3
 8008934:	d101      	bne.n	800893a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e099      	b.n	8008a6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800893a:	4b4f      	ldr	r3, [pc, #316]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a4e      	ldr	r2, [pc, #312]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008946:	f7f9 fbc5 	bl	80020d4 <HAL_GetTick>
 800894a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800894c:	e008      	b.n	8008960 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800894e:	f7f9 fbc1 	bl	80020d4 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e086      	b.n	8008a6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008960:	4b45      	ldr	r3, [pc, #276]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f0      	bne.n	800894e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800896c:	4b42      	ldr	r3, [pc, #264]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 800896e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008970:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	051b      	lsls	r3, r3, #20
 800897a:	493f      	ldr	r1, [pc, #252]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 800897c:	4313      	orrs	r3, r2
 800897e:	628b      	str	r3, [r1, #40]	; 0x28
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	3b01      	subs	r3, #1
 8008986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	3b01      	subs	r3, #1
 8008990:	025b      	lsls	r3, r3, #9
 8008992:	b29b      	uxth	r3, r3
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	3b01      	subs	r3, #1
 800899c:	041b      	lsls	r3, r3, #16
 800899e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089a2:	431a      	orrs	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	061b      	lsls	r3, r3, #24
 80089ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089b0:	4931      	ldr	r1, [pc, #196]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089b6:	4b30      	ldr	r3, [pc, #192]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	492d      	ldr	r1, [pc, #180]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089c8:	4b2b      	ldr	r3, [pc, #172]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	4928      	ldr	r1, [pc, #160]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089da:	4b27      	ldr	r3, [pc, #156]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	4a26      	ldr	r2, [pc, #152]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089e6:	4b24      	ldr	r3, [pc, #144]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ea:	4b24      	ldr	r3, [pc, #144]	; (8008a7c <RCCEx_PLL3_Config+0x160>)
 80089ec:	4013      	ands	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	69d2      	ldr	r2, [r2, #28]
 80089f2:	00d2      	lsls	r2, r2, #3
 80089f4:	4920      	ldr	r1, [pc, #128]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089fa:	4b1f      	ldr	r3, [pc, #124]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	4a1e      	ldr	r2, [pc, #120]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	4a19      	ldr	r2, [pc, #100]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a18:	e00f      	b.n	8008a3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d106      	bne.n	8008a2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	4a14      	ldr	r2, [pc, #80]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a2c:	e005      	b.n	8008a3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a2e:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	4a11      	ldr	r2, [pc, #68]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a3a:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a0e      	ldr	r2, [pc, #56]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a46:	f7f9 fb45 	bl	80020d4 <HAL_GetTick>
 8008a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a4c:	e008      	b.n	8008a60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a4e:	f7f9 fb41 	bl	80020d4 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e006      	b.n	8008a6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a60:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <RCCEx_PLL3_Config+0x15c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0f0      	beq.n	8008a4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	ffff0007 	.word	0xffff0007

08008a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e01d      	b.n	8008ace <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7f8 ff18 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f000 fa4c 	bl	8008f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0201 	orr.w	r2, r2, #1
 8008aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <HAL_TIM_Base_Start_IT+0x50>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b06      	cmp	r3, #6
 8008b00:	d00b      	beq.n	8008b1a <HAL_TIM_Base_Start_IT+0x42>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b08:	d007      	beq.n	8008b1a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f042 0201 	orr.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	00010007 	.word	0x00010007

08008b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d122      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d11b      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0202 	mvn.w	r2, #2
 8008b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9d6 	bl	8008f20 <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f9c8 	bl	8008f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f9d9 	bl	8008f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d122      	bne.n	8008bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d11b      	bne.n	8008bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0204 	mvn.w	r2, #4
 8008bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f9ac 	bl	8008f20 <HAL_TIM_IC_CaptureCallback>
 8008bc8:	e005      	b.n	8008bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f99e 	bl	8008f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f9af 	bl	8008f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d122      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0308 	and.w	r3, r3, #8
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d11b      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f06f 0208 	mvn.w	r2, #8
 8008c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2204      	movs	r2, #4
 8008c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f982 	bl	8008f20 <HAL_TIM_IC_CaptureCallback>
 8008c1c:	e005      	b.n	8008c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f974 	bl	8008f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f985 	bl	8008f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0310 	and.w	r3, r3, #16
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	d122      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f003 0310 	and.w	r3, r3, #16
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d11b      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f06f 0210 	mvn.w	r2, #16
 8008c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2208      	movs	r2, #8
 8008c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f958 	bl	8008f20 <HAL_TIM_IC_CaptureCallback>
 8008c70:	e005      	b.n	8008c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f94a 	bl	8008f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f95b 	bl	8008f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d10e      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d107      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f06f 0201 	mvn.w	r2, #1
 8008ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7f7 fe8e 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cba:	2b80      	cmp	r3, #128	; 0x80
 8008cbc:	d10e      	bne.n	8008cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc8:	2b80      	cmp	r3, #128	; 0x80
 8008cca:	d107      	bne.n	8008cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fb0a 	bl	80092f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cea:	d10e      	bne.n	8008d0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf6:	2b80      	cmp	r3, #128	; 0x80
 8008cf8:	d107      	bne.n	8008d0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fafd 	bl	8009304 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d10e      	bne.n	8008d36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d107      	bne.n	8008d36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f909 	bl	8008f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	f003 0320 	and.w	r3, r3, #32
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	d10e      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d107      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f06f 0220 	mvn.w	r2, #32
 8008d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fabd 	bl	80092dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_TIM_ConfigClockSource+0x18>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e0b7      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x188>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4b57      	ldr	r3, [pc, #348]	; (8008efc <HAL_TIM_ConfigClockSource+0x190>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008daa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b70      	cmp	r3, #112	; 0x70
 8008dba:	d02e      	beq.n	8008e1a <HAL_TIM_ConfigClockSource+0xae>
 8008dbc:	2b70      	cmp	r3, #112	; 0x70
 8008dbe:	d812      	bhi.n	8008de6 <HAL_TIM_ConfigClockSource+0x7a>
 8008dc0:	2b30      	cmp	r3, #48	; 0x30
 8008dc2:	f000 8084 	beq.w	8008ece <HAL_TIM_ConfigClockSource+0x162>
 8008dc6:	2b30      	cmp	r3, #48	; 0x30
 8008dc8:	d806      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x6c>
 8008dca:	2b10      	cmp	r3, #16
 8008dcc:	d07f      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x162>
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d07d      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x162>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d07b      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008dd6:	e084      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008dd8:	2b50      	cmp	r3, #80	; 0x50
 8008dda:	d048      	beq.n	8008e6e <HAL_TIM_ConfigClockSource+0x102>
 8008ddc:	2b60      	cmp	r3, #96	; 0x60
 8008dde:	d056      	beq.n	8008e8e <HAL_TIM_ConfigClockSource+0x122>
 8008de0:	2b40      	cmp	r3, #64	; 0x40
 8008de2:	d064      	beq.n	8008eae <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008de4:	e07d      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008de6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008dea:	d070      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x162>
 8008dec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008df0:	d809      	bhi.n	8008e06 <HAL_TIM_ConfigClockSource+0x9a>
 8008df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008df6:	d027      	beq.n	8008e48 <HAL_TIM_ConfigClockSource+0xdc>
 8008df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dfc:	d067      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x162>
 8008dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e02:	d06d      	beq.n	8008ee0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e04:	e06d      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008e06:	4a3e      	ldr	r2, [pc, #248]	; (8008f00 <HAL_TIM_ConfigClockSource+0x194>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d060      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x162>
 8008e0c:	4a3d      	ldr	r2, [pc, #244]	; (8008f04 <HAL_TIM_ConfigClockSource+0x198>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d05d      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x162>
 8008e12:	4a3d      	ldr	r2, [pc, #244]	; (8008f08 <HAL_TIM_ConfigClockSource+0x19c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d05a      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008e18:	e063      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	6899      	ldr	r1, [r3, #8]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f000 f9af 	bl	800918c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	609a      	str	r2, [r3, #8]
      break;
 8008e46:	e04c      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	6899      	ldr	r1, [r3, #8]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f000 f998 	bl	800918c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689a      	ldr	r2, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e6a:	609a      	str	r2, [r3, #8]
      break;
 8008e6c:	e039      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	6859      	ldr	r1, [r3, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f000 f908 	bl	8009090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2150      	movs	r1, #80	; 0x50
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 f962 	bl	8009150 <TIM_ITRx_SetConfig>
      break;
 8008e8c:	e029      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	6859      	ldr	r1, [r3, #4]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	f000 f927 	bl	80090ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2160      	movs	r1, #96	; 0x60
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f952 	bl	8009150 <TIM_ITRx_SetConfig>
      break;
 8008eac:	e019      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	6859      	ldr	r1, [r3, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f000 f8e8 	bl	8009090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2140      	movs	r1, #64	; 0x40
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f942 	bl	8009150 <TIM_ITRx_SetConfig>
      break;
 8008ecc:	e009      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4610      	mov	r0, r2
 8008eda:	f000 f939 	bl	8009150 <TIM_ITRx_SetConfig>
      break;
 8008ede:	e000      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008ee0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	ffceff88 	.word	0xffceff88
 8008f00:	00100030 	.word	0x00100030
 8008f04:	00100040 	.word	0x00100040
 8008f08:	00100020 	.word	0x00100020

08008f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a40      	ldr	r2, [pc, #256]	; (8009070 <TIM_Base_SetConfig+0x114>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d013      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f7a:	d00f      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a3d      	ldr	r2, [pc, #244]	; (8009074 <TIM_Base_SetConfig+0x118>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00b      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a3c      	ldr	r2, [pc, #240]	; (8009078 <TIM_Base_SetConfig+0x11c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d007      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a3b      	ldr	r2, [pc, #236]	; (800907c <TIM_Base_SetConfig+0x120>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_Base_SetConfig+0x40>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a3a      	ldr	r2, [pc, #232]	; (8009080 <TIM_Base_SetConfig+0x124>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d108      	bne.n	8008fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a2f      	ldr	r2, [pc, #188]	; (8009070 <TIM_Base_SetConfig+0x114>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d01f      	beq.n	8008ff6 <TIM_Base_SetConfig+0x9a>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fbc:	d01b      	beq.n	8008ff6 <TIM_Base_SetConfig+0x9a>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a2c      	ldr	r2, [pc, #176]	; (8009074 <TIM_Base_SetConfig+0x118>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d017      	beq.n	8008ff6 <TIM_Base_SetConfig+0x9a>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a2b      	ldr	r2, [pc, #172]	; (8009078 <TIM_Base_SetConfig+0x11c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d013      	beq.n	8008ff6 <TIM_Base_SetConfig+0x9a>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a2a      	ldr	r2, [pc, #168]	; (800907c <TIM_Base_SetConfig+0x120>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d00f      	beq.n	8008ff6 <TIM_Base_SetConfig+0x9a>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a29      	ldr	r2, [pc, #164]	; (8009080 <TIM_Base_SetConfig+0x124>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00b      	beq.n	8008ff6 <TIM_Base_SetConfig+0x9a>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a28      	ldr	r2, [pc, #160]	; (8009084 <TIM_Base_SetConfig+0x128>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d007      	beq.n	8008ff6 <TIM_Base_SetConfig+0x9a>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a27      	ldr	r2, [pc, #156]	; (8009088 <TIM_Base_SetConfig+0x12c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d003      	beq.n	8008ff6 <TIM_Base_SetConfig+0x9a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a26      	ldr	r2, [pc, #152]	; (800908c <TIM_Base_SetConfig+0x130>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d108      	bne.n	8009008 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4313      	orrs	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a10      	ldr	r2, [pc, #64]	; (8009070 <TIM_Base_SetConfig+0x114>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d00f      	beq.n	8009054 <TIM_Base_SetConfig+0xf8>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a12      	ldr	r2, [pc, #72]	; (8009080 <TIM_Base_SetConfig+0x124>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00b      	beq.n	8009054 <TIM_Base_SetConfig+0xf8>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a11      	ldr	r2, [pc, #68]	; (8009084 <TIM_Base_SetConfig+0x128>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d007      	beq.n	8009054 <TIM_Base_SetConfig+0xf8>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a10      	ldr	r2, [pc, #64]	; (8009088 <TIM_Base_SetConfig+0x12c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d003      	beq.n	8009054 <TIM_Base_SetConfig+0xf8>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a0f      	ldr	r2, [pc, #60]	; (800908c <TIM_Base_SetConfig+0x130>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d103      	bne.n	800905c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	691a      	ldr	r2, [r3, #16]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	615a      	str	r2, [r3, #20]
}
 8009062:	bf00      	nop
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40010000 	.word	0x40010000
 8009074:	40000400 	.word	0x40000400
 8009078:	40000800 	.word	0x40000800
 800907c:	40000c00 	.word	0x40000c00
 8009080:	40010400 	.word	0x40010400
 8009084:	40014000 	.word	0x40014000
 8009088:	40014400 	.word	0x40014400
 800908c:	40014800 	.word	0x40014800

08009090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	f023 0201 	bic.w	r2, r3, #1
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f023 030a 	bic.w	r3, r3, #10
 80090cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	621a      	str	r2, [r3, #32]
}
 80090e2:	bf00      	nop
 80090e4:	371c      	adds	r7, #28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b087      	sub	sp, #28
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	f023 0210 	bic.w	r2, r3, #16
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	031b      	lsls	r3, r3, #12
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4313      	orrs	r3, r2
 8009122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800912a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	011b      	lsls	r3, r3, #4
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	4313      	orrs	r3, r2
 8009134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	621a      	str	r2, [r3, #32]
}
 8009142:	bf00      	nop
 8009144:	371c      	adds	r7, #28
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <TIM_ITRx_SetConfig+0x38>)
 8009164:	4013      	ands	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4313      	orrs	r3, r2
 800916e:	f043 0307 	orr.w	r3, r3, #7
 8009172:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	609a      	str	r2, [r3, #8]
}
 800917a:	bf00      	nop
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	ffcfff8f 	.word	0xffcfff8f

0800918c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	021a      	lsls	r2, r3, #8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	609a      	str	r2, [r3, #8]
}
 80091c0:	bf00      	nop
 80091c2:	371c      	adds	r7, #28
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e068      	b.n	80092b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2202      	movs	r2, #2
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a2e      	ldr	r2, [pc, #184]	; (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d004      	beq.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a2d      	ldr	r2, [pc, #180]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d108      	bne.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800921e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	4313      	orrs	r3, r2
 8009228:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009230:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1e      	ldr	r2, [pc, #120]	; (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d01d      	beq.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009256:	d018      	beq.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a1b      	ldr	r2, [pc, #108]	; (80092cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d013      	beq.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a1a      	ldr	r2, [pc, #104]	; (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d00e      	beq.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a18      	ldr	r2, [pc, #96]	; (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d009      	beq.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a13      	ldr	r2, [pc, #76]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d004      	beq.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a14      	ldr	r2, [pc, #80]	; (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d10c      	bne.n	80092a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	4313      	orrs	r3, r2
 800929a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	40010000 	.word	0x40010000
 80092c8:	40010400 	.word	0x40010400
 80092cc:	40000400 	.word	0x40000400
 80092d0:	40000800 	.word	0x40000800
 80092d4:	40000c00 	.word	0x40000c00
 80092d8:	40001800 	.word	0x40001800

080092dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d101      	bne.n	800932a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e042      	b.n	80093b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009330:	2b00      	cmp	r3, #0
 8009332:	d106      	bne.n	8009342 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7f8 fb33 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2224      	movs	r2, #36	; 0x24
 8009346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0201 	bic.w	r2, r2, #1
 8009358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fc3c 	bl	8009bd8 <UART_SetConfig>
 8009360:	4603      	mov	r3, r0
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e022      	b.n	80093b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 fdae 	bl	800bed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0201 	orr.w	r2, r2, #1
 80093a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f002 fe35 	bl	800c018 <UART_CheckIdleState>
 80093ae:	4603      	mov	r3, r0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08a      	sub	sp, #40	; 0x28
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	4613      	mov	r3, r2
 80093c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	f040 8083 	bne.w	80094da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <HAL_UART_Transmit+0x28>
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e07b      	b.n	80094dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_UART_Transmit+0x3a>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e074      	b.n	80094dc <HAL_UART_Transmit+0x124>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2221      	movs	r2, #33	; 0x21
 8009406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800940a:	f7f8 fe63 	bl	80020d4 <HAL_GetTick>
 800940e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	88fa      	ldrh	r2, [r7, #6]
 800941c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009428:	d108      	bne.n	800943c <HAL_UART_Transmit+0x84>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d104      	bne.n	800943c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	61bb      	str	r3, [r7, #24]
 800943a:	e003      	b.n	8009444 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009440:	2300      	movs	r3, #0
 8009442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009444:	e02c      	b.n	80094a0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2200      	movs	r2, #0
 800944e:	2180      	movs	r1, #128	; 0x80
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f002 fe29 	bl	800c0a8 <UART_WaitOnFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e03d      	b.n	80094dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009474:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	3302      	adds	r3, #2
 800947a:	61bb      	str	r3, [r7, #24]
 800947c:	e007      	b.n	800948e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	781a      	ldrb	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	3301      	adds	r3, #1
 800948c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29a      	uxth	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1cc      	bne.n	8009446 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2200      	movs	r2, #0
 80094b4:	2140      	movs	r1, #64	; 0x40
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f002 fdf6 	bl	800c0a8 <UART_WaitOnFlagUntilTimeout>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e00a      	b.n	80094dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e000      	b.n	80094dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80094da:	2302      	movs	r3, #2
  }
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3720      	adds	r7, #32
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	4613      	mov	r3, r2
 80094f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	d168      	bne.n	80095ce <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <HAL_UART_Transmit_IT+0x24>
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e061      	b.n	80095d0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009512:	2b01      	cmp	r3, #1
 8009514:	d101      	bne.n	800951a <HAL_UART_Transmit_IT+0x36>
 8009516:	2302      	movs	r3, #2
 8009518:	e05a      	b.n	80095d0 <HAL_UART_Transmit_IT+0xec>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	88fa      	ldrh	r2, [r7, #6]
 800952c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	88fa      	ldrh	r2, [r7, #6]
 8009534:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2221      	movs	r2, #33	; 0x21
 800954a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009556:	d11c      	bne.n	8009592 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009560:	d107      	bne.n	8009572 <HAL_UART_Transmit_IT+0x8e>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d103      	bne.n	8009572 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4a1b      	ldr	r2, [pc, #108]	; (80095dc <HAL_UART_Transmit_IT+0xf8>)
 800956e:	671a      	str	r2, [r3, #112]	; 0x70
 8009570:	e002      	b.n	8009578 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4a1a      	ldr	r2, [pc, #104]	; (80095e0 <HAL_UART_Transmit_IT+0xfc>)
 8009576:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800958e:	609a      	str	r2, [r3, #8]
 8009590:	e01b      	b.n	80095ca <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959a:	d107      	bne.n	80095ac <HAL_UART_Transmit_IT+0xc8>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4a0f      	ldr	r2, [pc, #60]	; (80095e4 <HAL_UART_Transmit_IT+0x100>)
 80095a8:	671a      	str	r2, [r3, #112]	; 0x70
 80095aa:	e002      	b.n	80095b2 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4a0e      	ldr	r2, [pc, #56]	; (80095e8 <HAL_UART_Transmit_IT+0x104>)
 80095b0:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095c8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e000      	b.n	80095d0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80095ce:	2302      	movs	r3, #2
  }
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	0800c4e7 	.word	0x0800c4e7
 80095e0:	0800c44d 	.word	0x0800c44d
 80095e4:	0800c3cf 	.word	0x0800c3cf
 80095e8:	0800c35b 	.word	0x0800c35b

080095ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009600:	2b20      	cmp	r3, #32
 8009602:	f040 80bc 	bne.w	800977e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <HAL_UART_Receive_IT+0x26>
 800960c:	88fb      	ldrh	r3, [r7, #6]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e0b4      	b.n	8009780 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_UART_Receive_IT+0x38>
 8009620:	2302      	movs	r3, #2
 8009622:	e0ad      	b.n	8009780 <HAL_UART_Receive_IT+0x194>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	88fa      	ldrh	r2, [r7, #6]
 8009636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	88fa      	ldrh	r2, [r7, #6]
 800963e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009650:	d10e      	bne.n	8009670 <HAL_UART_Receive_IT+0x84>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d105      	bne.n	8009666 <HAL_UART_Receive_IT+0x7a>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009660:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009664:	e02d      	b.n	80096c2 <HAL_UART_Receive_IT+0xd6>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	22ff      	movs	r2, #255	; 0xff
 800966a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800966e:	e028      	b.n	80096c2 <HAL_UART_Receive_IT+0xd6>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10d      	bne.n	8009694 <HAL_UART_Receive_IT+0xa8>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d104      	bne.n	800968a <HAL_UART_Receive_IT+0x9e>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	22ff      	movs	r2, #255	; 0xff
 8009684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009688:	e01b      	b.n	80096c2 <HAL_UART_Receive_IT+0xd6>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	227f      	movs	r2, #127	; 0x7f
 800968e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009692:	e016      	b.n	80096c2 <HAL_UART_Receive_IT+0xd6>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800969c:	d10d      	bne.n	80096ba <HAL_UART_Receive_IT+0xce>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d104      	bne.n	80096b0 <HAL_UART_Receive_IT+0xc4>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	227f      	movs	r2, #127	; 0x7f
 80096aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096ae:	e008      	b.n	80096c2 <HAL_UART_Receive_IT+0xd6>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	223f      	movs	r2, #63	; 0x3f
 80096b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096b8:	e003      	b.n	80096c2 <HAL_UART_Receive_IT+0xd6>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2222      	movs	r2, #34	; 0x22
 80096ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0201 	orr.w	r2, r2, #1
 80096e0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ea:	d12a      	bne.n	8009742 <HAL_UART_Receive_IT+0x156>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096f2:	88fa      	ldrh	r2, [r7, #6]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d324      	bcc.n	8009742 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009700:	d107      	bne.n	8009712 <HAL_UART_Receive_IT+0x126>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d103      	bne.n	8009712 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4a1f      	ldr	r2, [pc, #124]	; (800978c <HAL_UART_Receive_IT+0x1a0>)
 800970e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009710:	e002      	b.n	8009718 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4a1e      	ldr	r2, [pc, #120]	; (8009790 <HAL_UART_Receive_IT+0x1a4>)
 8009716:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800972e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689a      	ldr	r2, [r3, #8]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800973e:	609a      	str	r2, [r3, #8]
 8009740:	e01b      	b.n	800977a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800974a:	d107      	bne.n	800975c <HAL_UART_Receive_IT+0x170>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d103      	bne.n	800975c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4a0f      	ldr	r2, [pc, #60]	; (8009794 <HAL_UART_Receive_IT+0x1a8>)
 8009758:	66da      	str	r2, [r3, #108]	; 0x6c
 800975a:	e002      	b.n	8009762 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4a0e      	ldr	r2, [pc, #56]	; (8009798 <HAL_UART_Receive_IT+0x1ac>)
 8009760:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009778:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	e000      	b.n	8009780 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800977e:	2302      	movs	r3, #2
  }
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	0800c81d 	.word	0x0800c81d
 8009790:	0800c715 	.word	0x0800c715
 8009794:	0800c669 	.word	0x0800c669
 8009798:	0800c5bf 	.word	0x0800c5bf

0800979c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097b0:	2b20      	cmp	r3, #32
 80097b2:	d170      	bne.n	8009896 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <HAL_UART_Receive_DMA+0x24>
 80097ba:	88fb      	ldrh	r3, [r7, #6]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e069      	b.n	8009898 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Receive_DMA+0x36>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e062      	b.n	8009898 <HAL_UART_Receive_DMA+0xfc>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	88fa      	ldrh	r2, [r7, #6]
 80097e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2222      	movs	r2, #34	; 0x22
 80097f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d02c      	beq.n	800985a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009804:	4a26      	ldr	r2, [pc, #152]	; (80098a0 <HAL_UART_Receive_DMA+0x104>)
 8009806:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800980c:	4a25      	ldr	r2, [pc, #148]	; (80098a4 <HAL_UART_Receive_DMA+0x108>)
 800980e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009814:	4a24      	ldr	r2, [pc, #144]	; (80098a8 <HAL_UART_Receive_DMA+0x10c>)
 8009816:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800981c:	2200      	movs	r2, #0
 800981e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3324      	adds	r3, #36	; 0x24
 800982a:	4619      	mov	r1, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009830:	461a      	mov	r2, r3
 8009832:	88fb      	ldrh	r3, [r7, #6]
 8009834:	f7fa f936 	bl	8003aa4 <HAL_DMA_Start_IT>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00d      	beq.n	800985a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2210      	movs	r2, #16
 8009842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e01e      	b.n	8009898 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009870:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f042 0201 	orr.w	r2, r2, #1
 8009880:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009890:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	e000      	b.n	8009898 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009896:	2302      	movs	r3, #2
  }
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	0800c22d 	.word	0x0800c22d
 80098a4:	0800c293 	.word	0x0800c293
 80098a8:	0800c2af 	.word	0x0800c2af

080098ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80098d2:	4013      	ands	r3, r2
 80098d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d118      	bne.n	800990e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d013      	beq.n	800990e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d104      	bne.n	80098fa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 8145 	beq.w	8009b8e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
      }
      return;
 800990c:	e13f      	b.n	8009b8e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 80e8 	beq.w	8009ae6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	4ba1      	ldr	r3, [pc, #644]	; (8009ba0 <HAL_UART_IRQHandler+0x2f4>)
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d105      	bne.n	800992c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	4ba0      	ldr	r3, [pc, #640]	; (8009ba4 <HAL_UART_IRQHandler+0x2f8>)
 8009924:	4013      	ands	r3, r2
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 80dd 	beq.w	8009ae6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	d010      	beq.n	8009958 <HAL_UART_IRQHandler+0xac>
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2201      	movs	r2, #1
 8009946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994e:	f043 0201 	orr.w	r2, r3, #1
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	d010      	beq.n	8009984 <HAL_UART_IRQHandler+0xd8>
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00b      	beq.n	8009984 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2202      	movs	r2, #2
 8009972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997a:	f043 0204 	orr.w	r2, r3, #4
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	f003 0304 	and.w	r3, r3, #4
 800998a:	2b00      	cmp	r3, #0
 800998c:	d010      	beq.n	80099b0 <HAL_UART_IRQHandler+0x104>
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2204      	movs	r2, #4
 800999e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a6:	f043 0202 	orr.w	r2, r3, #2
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	f003 0308 	and.w	r3, r3, #8
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d015      	beq.n	80099e6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	f003 0320 	and.w	r3, r3, #32
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	4b76      	ldr	r3, [pc, #472]	; (8009ba0 <HAL_UART_IRQHandler+0x2f4>)
 80099c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2208      	movs	r2, #8
 80099d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099dc:	f043 0208 	orr.w	r2, r3, #8
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d011      	beq.n	8009a14 <HAL_UART_IRQHandler+0x168>
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0a:	f043 0220 	orr.w	r2, r3, #32
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80b9 	beq.w	8009b92 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d011      	beq.n	8009a4e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d104      	bne.n	8009a3e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d007      	beq.n	8009a4e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a54:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a60:	2b40      	cmp	r3, #64	; 0x40
 8009a62:	d004      	beq.n	8009a6e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d031      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f002 fbb8 	bl	800c1e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d123      	bne.n	8009aca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a90:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d013      	beq.n	8009ac2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a9e:	4a42      	ldr	r2, [pc, #264]	; (8009ba8 <HAL_UART_IRQHandler+0x2fc>)
 8009aa0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fa fa66 	bl	8003f78 <HAL_DMA_Abort_IT>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d017      	beq.n	8009ae2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac0:	e00f      	b.n	8009ae2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f87c 	bl	8009bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac8:	e00b      	b.n	8009ae2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f878 	bl	8009bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad0:	e007      	b.n	8009ae2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f874 	bl	8009bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009ae0:	e057      	b.n	8009b92 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae2:	bf00      	nop
    return;
 8009ae4:	e055      	b.n	8009b92 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00d      	beq.n	8009b0c <HAL_UART_IRQHandler+0x260>
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d008      	beq.n	8009b0c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f002 ff0d 	bl	800c924 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b0a:	e045      	b.n	8009b98 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d012      	beq.n	8009b3c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d104      	bne.n	8009b2a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d008      	beq.n	8009b3c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d031      	beq.n	8009b96 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	4798      	blx	r3
    }
    return;
 8009b3a:	e02c      	b.n	8009b96 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d008      	beq.n	8009b58 <HAL_UART_IRQHandler+0x2ac>
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f002 fd1a 	bl	800c58a <UART_EndTransmit_IT>
    return;
 8009b56:	e01f      	b.n	8009b98 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d008      	beq.n	8009b74 <HAL_UART_IRQHandler+0x2c8>
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f002 feed 	bl	800c94c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b72:	e011      	b.n	8009b98 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00c      	beq.n	8009b98 <HAL_UART_IRQHandler+0x2ec>
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da09      	bge.n	8009b98 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f002 fed7 	bl	800c938 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b8a:	bf00      	nop
 8009b8c:	e004      	b.n	8009b98 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009b8e:	bf00      	nop
 8009b90:	e002      	b.n	8009b98 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009b92:	bf00      	nop
 8009b94:	e000      	b.n	8009b98 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009b96:	bf00      	nop
  }
}
 8009b98:	3720      	adds	r7, #32
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	10000001 	.word	0x10000001
 8009ba4:	04000120 	.word	0x04000120
 8009ba8:	0800c32f 	.word	0x0800c32f

08009bac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	0000      	movs	r0, r0
	...

08009bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bd8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009bdc:	b090      	sub	sp, #64	; 0x40
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	4bc1      	ldr	r3, [pc, #772]	; (8009f20 <UART_SetConfig+0x348>)
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c22:	430b      	orrs	r3, r1
 8009c24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4ab7      	ldr	r2, [pc, #732]	; (8009f24 <UART_SetConfig+0x34c>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d004      	beq.n	8009c56 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c52:	4313      	orrs	r3, r2
 8009c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	4bb2      	ldr	r3, [pc, #712]	; (8009f28 <UART_SetConfig+0x350>)
 8009c5e:	4013      	ands	r3, r2
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c66:	430b      	orrs	r3, r1
 8009c68:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c70:	f023 010f 	bic.w	r1, r3, #15
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4aa9      	ldr	r2, [pc, #676]	; (8009f2c <UART_SetConfig+0x354>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d177      	bne.n	8009d7a <UART_SetConfig+0x1a2>
 8009c8a:	4ba9      	ldr	r3, [pc, #676]	; (8009f30 <UART_SetConfig+0x358>)
 8009c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c92:	2b28      	cmp	r3, #40	; 0x28
 8009c94:	d86c      	bhi.n	8009d70 <UART_SetConfig+0x198>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <UART_SetConfig+0xc4>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009d41 	.word	0x08009d41
 8009ca0:	08009d71 	.word	0x08009d71
 8009ca4:	08009d71 	.word	0x08009d71
 8009ca8:	08009d71 	.word	0x08009d71
 8009cac:	08009d71 	.word	0x08009d71
 8009cb0:	08009d71 	.word	0x08009d71
 8009cb4:	08009d71 	.word	0x08009d71
 8009cb8:	08009d71 	.word	0x08009d71
 8009cbc:	08009d49 	.word	0x08009d49
 8009cc0:	08009d71 	.word	0x08009d71
 8009cc4:	08009d71 	.word	0x08009d71
 8009cc8:	08009d71 	.word	0x08009d71
 8009ccc:	08009d71 	.word	0x08009d71
 8009cd0:	08009d71 	.word	0x08009d71
 8009cd4:	08009d71 	.word	0x08009d71
 8009cd8:	08009d71 	.word	0x08009d71
 8009cdc:	08009d51 	.word	0x08009d51
 8009ce0:	08009d71 	.word	0x08009d71
 8009ce4:	08009d71 	.word	0x08009d71
 8009ce8:	08009d71 	.word	0x08009d71
 8009cec:	08009d71 	.word	0x08009d71
 8009cf0:	08009d71 	.word	0x08009d71
 8009cf4:	08009d71 	.word	0x08009d71
 8009cf8:	08009d71 	.word	0x08009d71
 8009cfc:	08009d59 	.word	0x08009d59
 8009d00:	08009d71 	.word	0x08009d71
 8009d04:	08009d71 	.word	0x08009d71
 8009d08:	08009d71 	.word	0x08009d71
 8009d0c:	08009d71 	.word	0x08009d71
 8009d10:	08009d71 	.word	0x08009d71
 8009d14:	08009d71 	.word	0x08009d71
 8009d18:	08009d71 	.word	0x08009d71
 8009d1c:	08009d61 	.word	0x08009d61
 8009d20:	08009d71 	.word	0x08009d71
 8009d24:	08009d71 	.word	0x08009d71
 8009d28:	08009d71 	.word	0x08009d71
 8009d2c:	08009d71 	.word	0x08009d71
 8009d30:	08009d71 	.word	0x08009d71
 8009d34:	08009d71 	.word	0x08009d71
 8009d38:	08009d71 	.word	0x08009d71
 8009d3c:	08009d69 	.word	0x08009d69
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d46:	e233      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009d48:	2304      	movs	r3, #4
 8009d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d4e:	e22f      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009d50:	2308      	movs	r3, #8
 8009d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d56:	e22b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009d58:	2310      	movs	r3, #16
 8009d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d5e:	e227      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009d60:	2320      	movs	r3, #32
 8009d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d66:	e223      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009d68:	2340      	movs	r3, #64	; 0x40
 8009d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d6e:	e21f      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009d70:	2380      	movs	r3, #128	; 0x80
 8009d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d76:	bf00      	nop
 8009d78:	e21a      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a6d      	ldr	r2, [pc, #436]	; (8009f34 <UART_SetConfig+0x35c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d132      	bne.n	8009dea <UART_SetConfig+0x212>
 8009d84:	4b6a      	ldr	r3, [pc, #424]	; (8009f30 <UART_SetConfig+0x358>)
 8009d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	2b05      	cmp	r3, #5
 8009d8e:	d827      	bhi.n	8009de0 <UART_SetConfig+0x208>
 8009d90:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <UART_SetConfig+0x1c0>)
 8009d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d96:	bf00      	nop
 8009d98:	08009db1 	.word	0x08009db1
 8009d9c:	08009db9 	.word	0x08009db9
 8009da0:	08009dc1 	.word	0x08009dc1
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dd1 	.word	0x08009dd1
 8009dac:	08009dd9 	.word	0x08009dd9
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009db6:	e1fb      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009db8:	2304      	movs	r3, #4
 8009dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dbe:	e1f7      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dc6:	e1f3      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dce:	e1ef      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dd6:	e1eb      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dde:	e1e7      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009de0:	2380      	movs	r3, #128	; 0x80
 8009de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009de6:	bf00      	nop
 8009de8:	e1e2      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a52      	ldr	r2, [pc, #328]	; (8009f38 <UART_SetConfig+0x360>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d132      	bne.n	8009e5a <UART_SetConfig+0x282>
 8009df4:	4b4e      	ldr	r3, [pc, #312]	; (8009f30 <UART_SetConfig+0x358>)
 8009df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df8:	f003 0307 	and.w	r3, r3, #7
 8009dfc:	2b05      	cmp	r3, #5
 8009dfe:	d827      	bhi.n	8009e50 <UART_SetConfig+0x278>
 8009e00:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <UART_SetConfig+0x230>)
 8009e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e06:	bf00      	nop
 8009e08:	08009e21 	.word	0x08009e21
 8009e0c:	08009e29 	.word	0x08009e29
 8009e10:	08009e31 	.word	0x08009e31
 8009e14:	08009e39 	.word	0x08009e39
 8009e18:	08009e41 	.word	0x08009e41
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e26:	e1c3      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009e28:	2304      	movs	r3, #4
 8009e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e2e:	e1bf      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009e30:	2308      	movs	r3, #8
 8009e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e36:	e1bb      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e3e:	e1b7      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009e40:	2320      	movs	r3, #32
 8009e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e46:	e1b3      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009e48:	2340      	movs	r3, #64	; 0x40
 8009e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e4e:	e1af      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009e50:	2380      	movs	r3, #128	; 0x80
 8009e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e56:	bf00      	nop
 8009e58:	e1aa      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a37      	ldr	r2, [pc, #220]	; (8009f3c <UART_SetConfig+0x364>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d132      	bne.n	8009eca <UART_SetConfig+0x2f2>
 8009e64:	4b32      	ldr	r3, [pc, #200]	; (8009f30 <UART_SetConfig+0x358>)
 8009e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e68:	f003 0307 	and.w	r3, r3, #7
 8009e6c:	2b05      	cmp	r3, #5
 8009e6e:	d827      	bhi.n	8009ec0 <UART_SetConfig+0x2e8>
 8009e70:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x2a0>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009e91 	.word	0x08009e91
 8009e7c:	08009e99 	.word	0x08009e99
 8009e80:	08009ea1 	.word	0x08009ea1
 8009e84:	08009ea9 	.word	0x08009ea9
 8009e88:	08009eb1 	.word	0x08009eb1
 8009e8c:	08009eb9 	.word	0x08009eb9
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e96:	e18b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009e98:	2304      	movs	r3, #4
 8009e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e9e:	e187      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ea6:	e183      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eae:	e17f      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eb6:	e17b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009eb8:	2340      	movs	r3, #64	; 0x40
 8009eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ebe:	e177      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ec6:	bf00      	nop
 8009ec8:	e172      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a1c      	ldr	r2, [pc, #112]	; (8009f40 <UART_SetConfig+0x368>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d144      	bne.n	8009f5e <UART_SetConfig+0x386>
 8009ed4:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <UART_SetConfig+0x358>)
 8009ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	2b05      	cmp	r3, #5
 8009ede:	d839      	bhi.n	8009f54 <UART_SetConfig+0x37c>
 8009ee0:	a201      	add	r2, pc, #4	; (adr r2, 8009ee8 <UART_SetConfig+0x310>)
 8009ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee6:	bf00      	nop
 8009ee8:	08009f01 	.word	0x08009f01
 8009eec:	08009f09 	.word	0x08009f09
 8009ef0:	08009f11 	.word	0x08009f11
 8009ef4:	08009f19 	.word	0x08009f19
 8009ef8:	08009f45 	.word	0x08009f45
 8009efc:	08009f4d 	.word	0x08009f4d
 8009f00:	2300      	movs	r3, #0
 8009f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f06:	e153      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009f08:	2304      	movs	r3, #4
 8009f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f0e:	e14f      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009f10:	2308      	movs	r3, #8
 8009f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f16:	e14b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f1e:	e147      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009f20:	cfff69f3 	.word	0xcfff69f3
 8009f24:	58000c00 	.word	0x58000c00
 8009f28:	11fff4ff 	.word	0x11fff4ff
 8009f2c:	40011000 	.word	0x40011000
 8009f30:	58024400 	.word	0x58024400
 8009f34:	40004400 	.word	0x40004400
 8009f38:	40004800 	.word	0x40004800
 8009f3c:	40004c00 	.word	0x40004c00
 8009f40:	40005000 	.word	0x40005000
 8009f44:	2320      	movs	r3, #32
 8009f46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f4a:	e131      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009f4c:	2340      	movs	r3, #64	; 0x40
 8009f4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f52:	e12d      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009f54:	2380      	movs	r3, #128	; 0x80
 8009f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f5a:	bf00      	nop
 8009f5c:	e128      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4ac3      	ldr	r2, [pc, #780]	; (800a270 <UART_SetConfig+0x698>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d178      	bne.n	800a05a <UART_SetConfig+0x482>
 8009f68:	4bc2      	ldr	r3, [pc, #776]	; (800a274 <UART_SetConfig+0x69c>)
 8009f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f70:	2b28      	cmp	r3, #40	; 0x28
 8009f72:	d86d      	bhi.n	800a050 <UART_SetConfig+0x478>
 8009f74:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <UART_SetConfig+0x3a4>)
 8009f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7a:	bf00      	nop
 8009f7c:	0800a021 	.word	0x0800a021
 8009f80:	0800a051 	.word	0x0800a051
 8009f84:	0800a051 	.word	0x0800a051
 8009f88:	0800a051 	.word	0x0800a051
 8009f8c:	0800a051 	.word	0x0800a051
 8009f90:	0800a051 	.word	0x0800a051
 8009f94:	0800a051 	.word	0x0800a051
 8009f98:	0800a051 	.word	0x0800a051
 8009f9c:	0800a029 	.word	0x0800a029
 8009fa0:	0800a051 	.word	0x0800a051
 8009fa4:	0800a051 	.word	0x0800a051
 8009fa8:	0800a051 	.word	0x0800a051
 8009fac:	0800a051 	.word	0x0800a051
 8009fb0:	0800a051 	.word	0x0800a051
 8009fb4:	0800a051 	.word	0x0800a051
 8009fb8:	0800a051 	.word	0x0800a051
 8009fbc:	0800a031 	.word	0x0800a031
 8009fc0:	0800a051 	.word	0x0800a051
 8009fc4:	0800a051 	.word	0x0800a051
 8009fc8:	0800a051 	.word	0x0800a051
 8009fcc:	0800a051 	.word	0x0800a051
 8009fd0:	0800a051 	.word	0x0800a051
 8009fd4:	0800a051 	.word	0x0800a051
 8009fd8:	0800a051 	.word	0x0800a051
 8009fdc:	0800a039 	.word	0x0800a039
 8009fe0:	0800a051 	.word	0x0800a051
 8009fe4:	0800a051 	.word	0x0800a051
 8009fe8:	0800a051 	.word	0x0800a051
 8009fec:	0800a051 	.word	0x0800a051
 8009ff0:	0800a051 	.word	0x0800a051
 8009ff4:	0800a051 	.word	0x0800a051
 8009ff8:	0800a051 	.word	0x0800a051
 8009ffc:	0800a041 	.word	0x0800a041
 800a000:	0800a051 	.word	0x0800a051
 800a004:	0800a051 	.word	0x0800a051
 800a008:	0800a051 	.word	0x0800a051
 800a00c:	0800a051 	.word	0x0800a051
 800a010:	0800a051 	.word	0x0800a051
 800a014:	0800a051 	.word	0x0800a051
 800a018:	0800a051 	.word	0x0800a051
 800a01c:	0800a049 	.word	0x0800a049
 800a020:	2301      	movs	r3, #1
 800a022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a026:	e0c3      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a028:	2304      	movs	r3, #4
 800a02a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a02e:	e0bf      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a030:	2308      	movs	r3, #8
 800a032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a036:	e0bb      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a038:	2310      	movs	r3, #16
 800a03a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a03e:	e0b7      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a040:	2320      	movs	r3, #32
 800a042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a046:	e0b3      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a048:	2340      	movs	r3, #64	; 0x40
 800a04a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a04e:	e0af      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a050:	2380      	movs	r3, #128	; 0x80
 800a052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a056:	bf00      	nop
 800a058:	e0aa      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a86      	ldr	r2, [pc, #536]	; (800a278 <UART_SetConfig+0x6a0>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d132      	bne.n	800a0ca <UART_SetConfig+0x4f2>
 800a064:	4b83      	ldr	r3, [pc, #524]	; (800a274 <UART_SetConfig+0x69c>)
 800a066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	2b05      	cmp	r3, #5
 800a06e:	d827      	bhi.n	800a0c0 <UART_SetConfig+0x4e8>
 800a070:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <UART_SetConfig+0x4a0>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a091 	.word	0x0800a091
 800a07c:	0800a099 	.word	0x0800a099
 800a080:	0800a0a1 	.word	0x0800a0a1
 800a084:	0800a0a9 	.word	0x0800a0a9
 800a088:	0800a0b1 	.word	0x0800a0b1
 800a08c:	0800a0b9 	.word	0x0800a0b9
 800a090:	2300      	movs	r3, #0
 800a092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a096:	e08b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a098:	2304      	movs	r3, #4
 800a09a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a09e:	e087      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0a6:	e083      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ae:	e07f      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a0b0:	2320      	movs	r3, #32
 800a0b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0b6:	e07b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a0b8:	2340      	movs	r3, #64	; 0x40
 800a0ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0be:	e077      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a0c0:	2380      	movs	r3, #128	; 0x80
 800a0c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0c6:	bf00      	nop
 800a0c8:	e072      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a6b      	ldr	r2, [pc, #428]	; (800a27c <UART_SetConfig+0x6a4>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d132      	bne.n	800a13a <UART_SetConfig+0x562>
 800a0d4:	4b67      	ldr	r3, [pc, #412]	; (800a274 <UART_SetConfig+0x69c>)
 800a0d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	2b05      	cmp	r3, #5
 800a0de:	d827      	bhi.n	800a130 <UART_SetConfig+0x558>
 800a0e0:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <UART_SetConfig+0x510>)
 800a0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e6:	bf00      	nop
 800a0e8:	0800a101 	.word	0x0800a101
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a111 	.word	0x0800a111
 800a0f4:	0800a119 	.word	0x0800a119
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	2300      	movs	r3, #0
 800a102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a106:	e053      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a108:	2304      	movs	r3, #4
 800a10a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a10e:	e04f      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a110:	2308      	movs	r3, #8
 800a112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a116:	e04b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a118:	2310      	movs	r3, #16
 800a11a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a11e:	e047      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a120:	2320      	movs	r3, #32
 800a122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a126:	e043      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a128:	2340      	movs	r3, #64	; 0x40
 800a12a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a12e:	e03f      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a136:	bf00      	nop
 800a138:	e03a      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a50      	ldr	r2, [pc, #320]	; (800a280 <UART_SetConfig+0x6a8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d132      	bne.n	800a1aa <UART_SetConfig+0x5d2>
 800a144:	4b4b      	ldr	r3, [pc, #300]	; (800a274 <UART_SetConfig+0x69c>)
 800a146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	2b05      	cmp	r3, #5
 800a14e:	d827      	bhi.n	800a1a0 <UART_SetConfig+0x5c8>
 800a150:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <UART_SetConfig+0x580>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a171 	.word	0x0800a171
 800a15c:	0800a179 	.word	0x0800a179
 800a160:	0800a181 	.word	0x0800a181
 800a164:	0800a189 	.word	0x0800a189
 800a168:	0800a191 	.word	0x0800a191
 800a16c:	0800a199 	.word	0x0800a199
 800a170:	2302      	movs	r3, #2
 800a172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a176:	e01b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a178:	2304      	movs	r3, #4
 800a17a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a17e:	e017      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a180:	2308      	movs	r3, #8
 800a182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a186:	e013      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a188:	2310      	movs	r3, #16
 800a18a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a18e:	e00f      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a190:	2320      	movs	r3, #32
 800a192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a196:	e00b      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a198:	2340      	movs	r3, #64	; 0x40
 800a19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a19e:	e007      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a1a0:	2380      	movs	r3, #128	; 0x80
 800a1a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1a6:	bf00      	nop
 800a1a8:	e002      	b.n	800a1b0 <UART_SetConfig+0x5d8>
 800a1aa:	2380      	movs	r3, #128	; 0x80
 800a1ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a32      	ldr	r2, [pc, #200]	; (800a280 <UART_SetConfig+0x6a8>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	f040 86f7 	bne.w	800afaa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	f000 80c0 	beq.w	800a346 <UART_SetConfig+0x76e>
 800a1c6:	2b08      	cmp	r3, #8
 800a1c8:	dc04      	bgt.n	800a1d4 <UART_SetConfig+0x5fc>
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d00c      	beq.n	800a1e8 <UART_SetConfig+0x610>
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	d065      	beq.n	800a29e <UART_SetConfig+0x6c6>
 800a1d2:	e27a      	b.n	800a6ca <UART_SetConfig+0xaf2>
 800a1d4:	2b20      	cmp	r3, #32
 800a1d6:	f000 81b0 	beq.w	800a53a <UART_SetConfig+0x962>
 800a1da:	2b40      	cmp	r3, #64	; 0x40
 800a1dc:	f000 821e 	beq.w	800a61c <UART_SetConfig+0xa44>
 800a1e0:	2b10      	cmp	r3, #16
 800a1e2:	f000 8104 	beq.w	800a3ee <UART_SetConfig+0x816>
 800a1e6:	e270      	b.n	800a6ca <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a1e8:	f7fd feec 	bl	8007fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d04e      	beq.n	800a294 <UART_SetConfig+0x6bc>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d048      	beq.n	800a290 <UART_SetConfig+0x6b8>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	2b02      	cmp	r3, #2
 800a204:	d042      	beq.n	800a28c <UART_SetConfig+0x6b4>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d03c      	beq.n	800a288 <UART_SetConfig+0x6b0>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	2b04      	cmp	r3, #4
 800a214:	d036      	beq.n	800a284 <UART_SetConfig+0x6ac>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b05      	cmp	r3, #5
 800a21c:	d026      	beq.n	800a26c <UART_SetConfig+0x694>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2b06      	cmp	r3, #6
 800a224:	d020      	beq.n	800a268 <UART_SetConfig+0x690>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	2b07      	cmp	r3, #7
 800a22c:	d01a      	beq.n	800a264 <UART_SetConfig+0x68c>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	2b08      	cmp	r3, #8
 800a234:	d014      	beq.n	800a260 <UART_SetConfig+0x688>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b09      	cmp	r3, #9
 800a23c:	d00e      	beq.n	800a25c <UART_SetConfig+0x684>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a242:	2b0a      	cmp	r3, #10
 800a244:	d008      	beq.n	800a258 <UART_SetConfig+0x680>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b0b      	cmp	r3, #11
 800a24c:	d102      	bne.n	800a254 <UART_SetConfig+0x67c>
 800a24e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a252:	e020      	b.n	800a296 <UART_SetConfig+0x6be>
 800a254:	2301      	movs	r3, #1
 800a256:	e01e      	b.n	800a296 <UART_SetConfig+0x6be>
 800a258:	2380      	movs	r3, #128	; 0x80
 800a25a:	e01c      	b.n	800a296 <UART_SetConfig+0x6be>
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	e01a      	b.n	800a296 <UART_SetConfig+0x6be>
 800a260:	2320      	movs	r3, #32
 800a262:	e018      	b.n	800a296 <UART_SetConfig+0x6be>
 800a264:	2310      	movs	r3, #16
 800a266:	e016      	b.n	800a296 <UART_SetConfig+0x6be>
 800a268:	230c      	movs	r3, #12
 800a26a:	e014      	b.n	800a296 <UART_SetConfig+0x6be>
 800a26c:	230a      	movs	r3, #10
 800a26e:	e012      	b.n	800a296 <UART_SetConfig+0x6be>
 800a270:	40011400 	.word	0x40011400
 800a274:	58024400 	.word	0x58024400
 800a278:	40007800 	.word	0x40007800
 800a27c:	40007c00 	.word	0x40007c00
 800a280:	58000c00 	.word	0x58000c00
 800a284:	2308      	movs	r3, #8
 800a286:	e006      	b.n	800a296 <UART_SetConfig+0x6be>
 800a288:	2306      	movs	r3, #6
 800a28a:	e004      	b.n	800a296 <UART_SetConfig+0x6be>
 800a28c:	2304      	movs	r3, #4
 800a28e:	e002      	b.n	800a296 <UART_SetConfig+0x6be>
 800a290:	2302      	movs	r3, #2
 800a292:	e000      	b.n	800a296 <UART_SetConfig+0x6be>
 800a294:	2301      	movs	r3, #1
 800a296:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a29c:	e219      	b.n	800a6d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a29e:	f107 0318 	add.w	r3, r7, #24
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fd fea4 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a2a8:	69fa      	ldr	r2, [r7, #28]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d044      	beq.n	800a33c <UART_SetConfig+0x764>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d03e      	beq.n	800a338 <UART_SetConfig+0x760>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d038      	beq.n	800a334 <UART_SetConfig+0x75c>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d032      	beq.n	800a330 <UART_SetConfig+0x758>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d02c      	beq.n	800a32c <UART_SetConfig+0x754>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2b05      	cmp	r3, #5
 800a2d8:	d026      	beq.n	800a328 <UART_SetConfig+0x750>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	2b06      	cmp	r3, #6
 800a2e0:	d020      	beq.n	800a324 <UART_SetConfig+0x74c>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	2b07      	cmp	r3, #7
 800a2e8:	d01a      	beq.n	800a320 <UART_SetConfig+0x748>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d014      	beq.n	800a31c <UART_SetConfig+0x744>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d00e      	beq.n	800a318 <UART_SetConfig+0x740>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	2b0a      	cmp	r3, #10
 800a300:	d008      	beq.n	800a314 <UART_SetConfig+0x73c>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2b0b      	cmp	r3, #11
 800a308:	d102      	bne.n	800a310 <UART_SetConfig+0x738>
 800a30a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a30e:	e016      	b.n	800a33e <UART_SetConfig+0x766>
 800a310:	2301      	movs	r3, #1
 800a312:	e014      	b.n	800a33e <UART_SetConfig+0x766>
 800a314:	2380      	movs	r3, #128	; 0x80
 800a316:	e012      	b.n	800a33e <UART_SetConfig+0x766>
 800a318:	2340      	movs	r3, #64	; 0x40
 800a31a:	e010      	b.n	800a33e <UART_SetConfig+0x766>
 800a31c:	2320      	movs	r3, #32
 800a31e:	e00e      	b.n	800a33e <UART_SetConfig+0x766>
 800a320:	2310      	movs	r3, #16
 800a322:	e00c      	b.n	800a33e <UART_SetConfig+0x766>
 800a324:	230c      	movs	r3, #12
 800a326:	e00a      	b.n	800a33e <UART_SetConfig+0x766>
 800a328:	230a      	movs	r3, #10
 800a32a:	e008      	b.n	800a33e <UART_SetConfig+0x766>
 800a32c:	2308      	movs	r3, #8
 800a32e:	e006      	b.n	800a33e <UART_SetConfig+0x766>
 800a330:	2306      	movs	r3, #6
 800a332:	e004      	b.n	800a33e <UART_SetConfig+0x766>
 800a334:	2304      	movs	r3, #4
 800a336:	e002      	b.n	800a33e <UART_SetConfig+0x766>
 800a338:	2302      	movs	r3, #2
 800a33a:	e000      	b.n	800a33e <UART_SetConfig+0x766>
 800a33c:	2301      	movs	r3, #1
 800a33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a344:	e1c5      	b.n	800a6d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a346:	f107 030c 	add.w	r3, r7, #12
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fd ff9c 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b00      	cmp	r3, #0
 800a358:	d044      	beq.n	800a3e4 <UART_SetConfig+0x80c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d03e      	beq.n	800a3e0 <UART_SetConfig+0x808>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	2b02      	cmp	r3, #2
 800a368:	d038      	beq.n	800a3dc <UART_SetConfig+0x804>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d032      	beq.n	800a3d8 <UART_SetConfig+0x800>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	2b04      	cmp	r3, #4
 800a378:	d02c      	beq.n	800a3d4 <UART_SetConfig+0x7fc>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	2b05      	cmp	r3, #5
 800a380:	d026      	beq.n	800a3d0 <UART_SetConfig+0x7f8>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	2b06      	cmp	r3, #6
 800a388:	d020      	beq.n	800a3cc <UART_SetConfig+0x7f4>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	2b07      	cmp	r3, #7
 800a390:	d01a      	beq.n	800a3c8 <UART_SetConfig+0x7f0>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	2b08      	cmp	r3, #8
 800a398:	d014      	beq.n	800a3c4 <UART_SetConfig+0x7ec>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	2b09      	cmp	r3, #9
 800a3a0:	d00e      	beq.n	800a3c0 <UART_SetConfig+0x7e8>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	2b0a      	cmp	r3, #10
 800a3a8:	d008      	beq.n	800a3bc <UART_SetConfig+0x7e4>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	2b0b      	cmp	r3, #11
 800a3b0:	d102      	bne.n	800a3b8 <UART_SetConfig+0x7e0>
 800a3b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3b6:	e016      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e014      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3bc:	2380      	movs	r3, #128	; 0x80
 800a3be:	e012      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3c0:	2340      	movs	r3, #64	; 0x40
 800a3c2:	e010      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3c4:	2320      	movs	r3, #32
 800a3c6:	e00e      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	e00c      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3cc:	230c      	movs	r3, #12
 800a3ce:	e00a      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3d0:	230a      	movs	r3, #10
 800a3d2:	e008      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3d4:	2308      	movs	r3, #8
 800a3d6:	e006      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3d8:	2306      	movs	r3, #6
 800a3da:	e004      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	e002      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e000      	b.n	800a3e6 <UART_SetConfig+0x80e>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3ec:	e171      	b.n	800a6d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3ee:	4b7a      	ldr	r3, [pc, #488]	; (800a5d8 <UART_SetConfig+0xa00>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d054      	beq.n	800a4a4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a3fa:	4b77      	ldr	r3, [pc, #476]	; (800a5d8 <UART_SetConfig+0xa00>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	08db      	lsrs	r3, r3, #3
 800a400:	f003 0303 	and.w	r3, r3, #3
 800a404:	4a75      	ldr	r2, [pc, #468]	; (800a5dc <UART_SetConfig+0xa04>)
 800a406:	40da      	lsrs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d044      	beq.n	800a49a <UART_SetConfig+0x8c2>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	2b01      	cmp	r3, #1
 800a416:	d03e      	beq.n	800a496 <UART_SetConfig+0x8be>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d038      	beq.n	800a492 <UART_SetConfig+0x8ba>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	2b03      	cmp	r3, #3
 800a426:	d032      	beq.n	800a48e <UART_SetConfig+0x8b6>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d02c      	beq.n	800a48a <UART_SetConfig+0x8b2>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	2b05      	cmp	r3, #5
 800a436:	d026      	beq.n	800a486 <UART_SetConfig+0x8ae>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	2b06      	cmp	r3, #6
 800a43e:	d020      	beq.n	800a482 <UART_SetConfig+0x8aa>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	2b07      	cmp	r3, #7
 800a446:	d01a      	beq.n	800a47e <UART_SetConfig+0x8a6>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d014      	beq.n	800a47a <UART_SetConfig+0x8a2>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a454:	2b09      	cmp	r3, #9
 800a456:	d00e      	beq.n	800a476 <UART_SetConfig+0x89e>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	2b0a      	cmp	r3, #10
 800a45e:	d008      	beq.n	800a472 <UART_SetConfig+0x89a>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	2b0b      	cmp	r3, #11
 800a466:	d102      	bne.n	800a46e <UART_SetConfig+0x896>
 800a468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a46c:	e016      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a46e:	2301      	movs	r3, #1
 800a470:	e014      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a472:	2380      	movs	r3, #128	; 0x80
 800a474:	e012      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a476:	2340      	movs	r3, #64	; 0x40
 800a478:	e010      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a47a:	2320      	movs	r3, #32
 800a47c:	e00e      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a47e:	2310      	movs	r3, #16
 800a480:	e00c      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a482:	230c      	movs	r3, #12
 800a484:	e00a      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a486:	230a      	movs	r3, #10
 800a488:	e008      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a48a:	2308      	movs	r3, #8
 800a48c:	e006      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a48e:	2306      	movs	r3, #6
 800a490:	e004      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a492:	2304      	movs	r3, #4
 800a494:	e002      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a496:	2302      	movs	r3, #2
 800a498:	e000      	b.n	800a49c <UART_SetConfig+0x8c4>
 800a49a:	2301      	movs	r3, #1
 800a49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a4a2:	e116      	b.n	800a6d2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d043      	beq.n	800a534 <UART_SetConfig+0x95c>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d03d      	beq.n	800a530 <UART_SetConfig+0x958>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d037      	beq.n	800a52c <UART_SetConfig+0x954>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d031      	beq.n	800a528 <UART_SetConfig+0x950>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	d02b      	beq.n	800a524 <UART_SetConfig+0x94c>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	2b05      	cmp	r3, #5
 800a4d2:	d025      	beq.n	800a520 <UART_SetConfig+0x948>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b06      	cmp	r3, #6
 800a4da:	d01f      	beq.n	800a51c <UART_SetConfig+0x944>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	2b07      	cmp	r3, #7
 800a4e2:	d019      	beq.n	800a518 <UART_SetConfig+0x940>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	2b08      	cmp	r3, #8
 800a4ea:	d013      	beq.n	800a514 <UART_SetConfig+0x93c>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	2b09      	cmp	r3, #9
 800a4f2:	d00d      	beq.n	800a510 <UART_SetConfig+0x938>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	2b0a      	cmp	r3, #10
 800a4fa:	d007      	beq.n	800a50c <UART_SetConfig+0x934>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	2b0b      	cmp	r3, #11
 800a502:	d101      	bne.n	800a508 <UART_SetConfig+0x930>
 800a504:	4b36      	ldr	r3, [pc, #216]	; (800a5e0 <UART_SetConfig+0xa08>)
 800a506:	e016      	b.n	800a536 <UART_SetConfig+0x95e>
 800a508:	4b34      	ldr	r3, [pc, #208]	; (800a5dc <UART_SetConfig+0xa04>)
 800a50a:	e014      	b.n	800a536 <UART_SetConfig+0x95e>
 800a50c:	4b35      	ldr	r3, [pc, #212]	; (800a5e4 <UART_SetConfig+0xa0c>)
 800a50e:	e012      	b.n	800a536 <UART_SetConfig+0x95e>
 800a510:	4b35      	ldr	r3, [pc, #212]	; (800a5e8 <UART_SetConfig+0xa10>)
 800a512:	e010      	b.n	800a536 <UART_SetConfig+0x95e>
 800a514:	4b35      	ldr	r3, [pc, #212]	; (800a5ec <UART_SetConfig+0xa14>)
 800a516:	e00e      	b.n	800a536 <UART_SetConfig+0x95e>
 800a518:	4b35      	ldr	r3, [pc, #212]	; (800a5f0 <UART_SetConfig+0xa18>)
 800a51a:	e00c      	b.n	800a536 <UART_SetConfig+0x95e>
 800a51c:	4b35      	ldr	r3, [pc, #212]	; (800a5f4 <UART_SetConfig+0xa1c>)
 800a51e:	e00a      	b.n	800a536 <UART_SetConfig+0x95e>
 800a520:	4b35      	ldr	r3, [pc, #212]	; (800a5f8 <UART_SetConfig+0xa20>)
 800a522:	e008      	b.n	800a536 <UART_SetConfig+0x95e>
 800a524:	4b35      	ldr	r3, [pc, #212]	; (800a5fc <UART_SetConfig+0xa24>)
 800a526:	e006      	b.n	800a536 <UART_SetConfig+0x95e>
 800a528:	4b35      	ldr	r3, [pc, #212]	; (800a600 <UART_SetConfig+0xa28>)
 800a52a:	e004      	b.n	800a536 <UART_SetConfig+0x95e>
 800a52c:	4b35      	ldr	r3, [pc, #212]	; (800a604 <UART_SetConfig+0xa2c>)
 800a52e:	e002      	b.n	800a536 <UART_SetConfig+0x95e>
 800a530:	4b35      	ldr	r3, [pc, #212]	; (800a608 <UART_SetConfig+0xa30>)
 800a532:	e000      	b.n	800a536 <UART_SetConfig+0x95e>
 800a534:	4b29      	ldr	r3, [pc, #164]	; (800a5dc <UART_SetConfig+0xa04>)
 800a536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a538:	e0cb      	b.n	800a6d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d046      	beq.n	800a5d0 <UART_SetConfig+0x9f8>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	2b01      	cmp	r3, #1
 800a548:	d040      	beq.n	800a5cc <UART_SetConfig+0x9f4>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d03a      	beq.n	800a5c8 <UART_SetConfig+0x9f0>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	2b03      	cmp	r3, #3
 800a558:	d034      	beq.n	800a5c4 <UART_SetConfig+0x9ec>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d02e      	beq.n	800a5c0 <UART_SetConfig+0x9e8>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	2b05      	cmp	r3, #5
 800a568:	d028      	beq.n	800a5bc <UART_SetConfig+0x9e4>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	2b06      	cmp	r3, #6
 800a570:	d022      	beq.n	800a5b8 <UART_SetConfig+0x9e0>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	2b07      	cmp	r3, #7
 800a578:	d01c      	beq.n	800a5b4 <UART_SetConfig+0x9dc>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d016      	beq.n	800a5b0 <UART_SetConfig+0x9d8>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	2b09      	cmp	r3, #9
 800a588:	d00f      	beq.n	800a5aa <UART_SetConfig+0x9d2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	2b0a      	cmp	r3, #10
 800a590:	d008      	beq.n	800a5a4 <UART_SetConfig+0x9cc>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	2b0b      	cmp	r3, #11
 800a598:	d102      	bne.n	800a5a0 <UART_SetConfig+0x9c8>
 800a59a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a59e:	e018      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5a0:	4b13      	ldr	r3, [pc, #76]	; (800a5f0 <UART_SetConfig+0xa18>)
 800a5a2:	e016      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5a4:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a5a8:	e013      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a5ae:	e010      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5b0:	4b16      	ldr	r3, [pc, #88]	; (800a60c <UART_SetConfig+0xa34>)
 800a5b2:	e00e      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <UART_SetConfig+0xa08>)
 800a5b6:	e00c      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5b8:	4b15      	ldr	r3, [pc, #84]	; (800a610 <UART_SetConfig+0xa38>)
 800a5ba:	e00a      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5bc:	4b15      	ldr	r3, [pc, #84]	; (800a614 <UART_SetConfig+0xa3c>)
 800a5be:	e008      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5c0:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <UART_SetConfig+0xa0c>)
 800a5c2:	e006      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5c4:	4b14      	ldr	r3, [pc, #80]	; (800a618 <UART_SetConfig+0xa40>)
 800a5c6:	e004      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5c8:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <UART_SetConfig+0xa10>)
 800a5ca:	e002      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5cc:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <UART_SetConfig+0xa14>)
 800a5ce:	e000      	b.n	800a5d2 <UART_SetConfig+0x9fa>
 800a5d0:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <UART_SetConfig+0xa18>)
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5d4:	e07d      	b.n	800a6d2 <UART_SetConfig+0xafa>
 800a5d6:	bf00      	nop
 800a5d8:	58024400 	.word	0x58024400
 800a5dc:	03d09000 	.word	0x03d09000
 800a5e0:	0003d090 	.word	0x0003d090
 800a5e4:	0007a120 	.word	0x0007a120
 800a5e8:	000f4240 	.word	0x000f4240
 800a5ec:	001e8480 	.word	0x001e8480
 800a5f0:	003d0900 	.word	0x003d0900
 800a5f4:	00516155 	.word	0x00516155
 800a5f8:	0061a800 	.word	0x0061a800
 800a5fc:	007a1200 	.word	0x007a1200
 800a600:	00a2c2aa 	.word	0x00a2c2aa
 800a604:	00f42400 	.word	0x00f42400
 800a608:	01e84800 	.word	0x01e84800
 800a60c:	0001e848 	.word	0x0001e848
 800a610:	00051615 	.word	0x00051615
 800a614:	00061a80 	.word	0x00061a80
 800a618:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	d04e      	beq.n	800a6c2 <UART_SetConfig+0xaea>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d047      	beq.n	800a6bc <UART_SetConfig+0xae4>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b02      	cmp	r3, #2
 800a632:	d040      	beq.n	800a6b6 <UART_SetConfig+0xade>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d039      	beq.n	800a6b0 <UART_SetConfig+0xad8>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b04      	cmp	r3, #4
 800a642:	d032      	beq.n	800a6aa <UART_SetConfig+0xad2>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b05      	cmp	r3, #5
 800a64a:	d02b      	beq.n	800a6a4 <UART_SetConfig+0xacc>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b06      	cmp	r3, #6
 800a652:	d024      	beq.n	800a69e <UART_SetConfig+0xac6>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b07      	cmp	r3, #7
 800a65a:	d01d      	beq.n	800a698 <UART_SetConfig+0xac0>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b08      	cmp	r3, #8
 800a662:	d016      	beq.n	800a692 <UART_SetConfig+0xaba>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b09      	cmp	r3, #9
 800a66a:	d00f      	beq.n	800a68c <UART_SetConfig+0xab4>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b0a      	cmp	r3, #10
 800a672:	d008      	beq.n	800a686 <UART_SetConfig+0xaae>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b0b      	cmp	r3, #11
 800a67a:	d101      	bne.n	800a680 <UART_SetConfig+0xaa8>
 800a67c:	2380      	movs	r3, #128	; 0x80
 800a67e:	e022      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a684:	e01f      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a68a:	e01c      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a68c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a690:	e019      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a696:	e016      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a69c:	e013      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a69e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a6a2:	e010      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a6a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a6a8:	e00d      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a6aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6ae:	e00a      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a6b0:	f241 5355 	movw	r3, #5461	; 0x1555
 800a6b4:	e007      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a6b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6ba:	e004      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a6bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6c0:	e001      	b.n	800a6c6 <UART_SetConfig+0xaee>
 800a6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6c8:	e003      	b.n	800a6d2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a6d0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f001 83e8 	beq.w	800beaa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	4413      	add	r3, r2
 800a6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d305      	bcc.n	800a6f6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d904      	bls.n	800a700 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fc:	f001 bbd5 	b.w	800beaa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a700:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a704:	2b08      	cmp	r3, #8
 800a706:	f000 8154 	beq.w	800a9b2 <UART_SetConfig+0xdda>
 800a70a:	2b08      	cmp	r3, #8
 800a70c:	dc06      	bgt.n	800a71c <UART_SetConfig+0xb44>
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d00f      	beq.n	800a732 <UART_SetConfig+0xb5a>
 800a712:	2b04      	cmp	r3, #4
 800a714:	f000 80ac 	beq.w	800a870 <UART_SetConfig+0xc98>
 800a718:	f000 bc30 	b.w	800af7c <UART_SetConfig+0x13a4>
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	f000 832d 	beq.w	800ad7c <UART_SetConfig+0x11a4>
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	f000 83a5 	beq.w	800ae72 <UART_SetConfig+0x129a>
 800a728:	2b10      	cmp	r3, #16
 800a72a:	f000 81e3 	beq.w	800aaf4 <UART_SetConfig+0xf1c>
 800a72e:	f000 bc25 	b.w	800af7c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a732:	f7fd fc47 	bl	8007fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a736:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	4618      	mov	r0, r3
 800a73c:	f04f 0100 	mov.w	r1, #0
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b00      	cmp	r3, #0
 800a746:	d067      	beq.n	800a818 <UART_SetConfig+0xc40>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d05e      	beq.n	800a80e <UART_SetConfig+0xc36>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b02      	cmp	r3, #2
 800a756:	d055      	beq.n	800a804 <UART_SetConfig+0xc2c>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d04c      	beq.n	800a7fa <UART_SetConfig+0xc22>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b04      	cmp	r3, #4
 800a766:	d043      	beq.n	800a7f0 <UART_SetConfig+0xc18>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b05      	cmp	r3, #5
 800a76e:	d03a      	beq.n	800a7e6 <UART_SetConfig+0xc0e>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b06      	cmp	r3, #6
 800a776:	d031      	beq.n	800a7dc <UART_SetConfig+0xc04>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b07      	cmp	r3, #7
 800a77e:	d028      	beq.n	800a7d2 <UART_SetConfig+0xbfa>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b08      	cmp	r3, #8
 800a786:	d01f      	beq.n	800a7c8 <UART_SetConfig+0xbf0>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b09      	cmp	r3, #9
 800a78e:	d016      	beq.n	800a7be <UART_SetConfig+0xbe6>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b0a      	cmp	r3, #10
 800a796:	d00d      	beq.n	800a7b4 <UART_SetConfig+0xbdc>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b0b      	cmp	r3, #11
 800a79e:	d104      	bne.n	800a7aa <UART_SetConfig+0xbd2>
 800a7a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7a4:	f04f 0400 	mov.w	r4, #0
 800a7a8:	e03a      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7aa:	f04f 0301 	mov.w	r3, #1
 800a7ae:	f04f 0400 	mov.w	r4, #0
 800a7b2:	e035      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a7b8:	f04f 0400 	mov.w	r4, #0
 800a7bc:	e030      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7be:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a7c2:	f04f 0400 	mov.w	r4, #0
 800a7c6:	e02b      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7c8:	f04f 0320 	mov.w	r3, #32
 800a7cc:	f04f 0400 	mov.w	r4, #0
 800a7d0:	e026      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7d2:	f04f 0310 	mov.w	r3, #16
 800a7d6:	f04f 0400 	mov.w	r4, #0
 800a7da:	e021      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7dc:	f04f 030c 	mov.w	r3, #12
 800a7e0:	f04f 0400 	mov.w	r4, #0
 800a7e4:	e01c      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7e6:	f04f 030a 	mov.w	r3, #10
 800a7ea:	f04f 0400 	mov.w	r4, #0
 800a7ee:	e017      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7f0:	f04f 0308 	mov.w	r3, #8
 800a7f4:	f04f 0400 	mov.w	r4, #0
 800a7f8:	e012      	b.n	800a820 <UART_SetConfig+0xc48>
 800a7fa:	f04f 0306 	mov.w	r3, #6
 800a7fe:	f04f 0400 	mov.w	r4, #0
 800a802:	e00d      	b.n	800a820 <UART_SetConfig+0xc48>
 800a804:	f04f 0304 	mov.w	r3, #4
 800a808:	f04f 0400 	mov.w	r4, #0
 800a80c:	e008      	b.n	800a820 <UART_SetConfig+0xc48>
 800a80e:	f04f 0302 	mov.w	r3, #2
 800a812:	f04f 0400 	mov.w	r4, #0
 800a816:	e003      	b.n	800a820 <UART_SetConfig+0xc48>
 800a818:	f04f 0301 	mov.w	r3, #1
 800a81c:	f04f 0400 	mov.w	r4, #0
 800a820:	461a      	mov	r2, r3
 800a822:	4623      	mov	r3, r4
 800a824:	f7f5 fd58 	bl	80002d8 <__aeabi_uldivmod>
 800a828:	4603      	mov	r3, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	4619      	mov	r1, r3
 800a82e:	4622      	mov	r2, r4
 800a830:	f04f 0300 	mov.w	r3, #0
 800a834:	f04f 0400 	mov.w	r4, #0
 800a838:	0214      	lsls	r4, r2, #8
 800a83a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a83e:	020b      	lsls	r3, r1, #8
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	6852      	ldr	r2, [r2, #4]
 800a844:	0852      	lsrs	r2, r2, #1
 800a846:	4611      	mov	r1, r2
 800a848:	f04f 0200 	mov.w	r2, #0
 800a84c:	eb13 0b01 	adds.w	fp, r3, r1
 800a850:	eb44 0c02 	adc.w	ip, r4, r2
 800a854:	4658      	mov	r0, fp
 800a856:	4661      	mov	r1, ip
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f04f 0400 	mov.w	r4, #0
 800a860:	461a      	mov	r2, r3
 800a862:	4623      	mov	r3, r4
 800a864:	f7f5 fd38 	bl	80002d8 <__aeabi_uldivmod>
 800a868:	4603      	mov	r3, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a86e:	e389      	b.n	800af84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a870:	f107 0318 	add.w	r3, r7, #24
 800a874:	4618      	mov	r0, r3
 800a876:	f7fd fbbb 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f04f 0100 	mov.w	r1, #0
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	d067      	beq.n	800a95a <UART_SetConfig+0xd82>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d05e      	beq.n	800a950 <UART_SetConfig+0xd78>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b02      	cmp	r3, #2
 800a898:	d055      	beq.n	800a946 <UART_SetConfig+0xd6e>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d04c      	beq.n	800a93c <UART_SetConfig+0xd64>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d043      	beq.n	800a932 <UART_SetConfig+0xd5a>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d03a      	beq.n	800a928 <UART_SetConfig+0xd50>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b06      	cmp	r3, #6
 800a8b8:	d031      	beq.n	800a91e <UART_SetConfig+0xd46>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b07      	cmp	r3, #7
 800a8c0:	d028      	beq.n	800a914 <UART_SetConfig+0xd3c>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b08      	cmp	r3, #8
 800a8c8:	d01f      	beq.n	800a90a <UART_SetConfig+0xd32>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d016      	beq.n	800a900 <UART_SetConfig+0xd28>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b0a      	cmp	r3, #10
 800a8d8:	d00d      	beq.n	800a8f6 <UART_SetConfig+0xd1e>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b0b      	cmp	r3, #11
 800a8e0:	d104      	bne.n	800a8ec <UART_SetConfig+0xd14>
 800a8e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8e6:	f04f 0400 	mov.w	r4, #0
 800a8ea:	e03a      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a8ec:	f04f 0301 	mov.w	r3, #1
 800a8f0:	f04f 0400 	mov.w	r4, #0
 800a8f4:	e035      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a8f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a8fa:	f04f 0400 	mov.w	r4, #0
 800a8fe:	e030      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a900:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a904:	f04f 0400 	mov.w	r4, #0
 800a908:	e02b      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a90a:	f04f 0320 	mov.w	r3, #32
 800a90e:	f04f 0400 	mov.w	r4, #0
 800a912:	e026      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a914:	f04f 0310 	mov.w	r3, #16
 800a918:	f04f 0400 	mov.w	r4, #0
 800a91c:	e021      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a91e:	f04f 030c 	mov.w	r3, #12
 800a922:	f04f 0400 	mov.w	r4, #0
 800a926:	e01c      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a928:	f04f 030a 	mov.w	r3, #10
 800a92c:	f04f 0400 	mov.w	r4, #0
 800a930:	e017      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a932:	f04f 0308 	mov.w	r3, #8
 800a936:	f04f 0400 	mov.w	r4, #0
 800a93a:	e012      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a93c:	f04f 0306 	mov.w	r3, #6
 800a940:	f04f 0400 	mov.w	r4, #0
 800a944:	e00d      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a946:	f04f 0304 	mov.w	r3, #4
 800a94a:	f04f 0400 	mov.w	r4, #0
 800a94e:	e008      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a950:	f04f 0302 	mov.w	r3, #2
 800a954:	f04f 0400 	mov.w	r4, #0
 800a958:	e003      	b.n	800a962 <UART_SetConfig+0xd8a>
 800a95a:	f04f 0301 	mov.w	r3, #1
 800a95e:	f04f 0400 	mov.w	r4, #0
 800a962:	461a      	mov	r2, r3
 800a964:	4623      	mov	r3, r4
 800a966:	f7f5 fcb7 	bl	80002d8 <__aeabi_uldivmod>
 800a96a:	4603      	mov	r3, r0
 800a96c:	460c      	mov	r4, r1
 800a96e:	4619      	mov	r1, r3
 800a970:	4622      	mov	r2, r4
 800a972:	f04f 0300 	mov.w	r3, #0
 800a976:	f04f 0400 	mov.w	r4, #0
 800a97a:	0214      	lsls	r4, r2, #8
 800a97c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a980:	020b      	lsls	r3, r1, #8
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	6852      	ldr	r2, [r2, #4]
 800a986:	0852      	lsrs	r2, r2, #1
 800a988:	4611      	mov	r1, r2
 800a98a:	f04f 0200 	mov.w	r2, #0
 800a98e:	eb13 0b01 	adds.w	fp, r3, r1
 800a992:	eb44 0c02 	adc.w	ip, r4, r2
 800a996:	4658      	mov	r0, fp
 800a998:	4661      	mov	r1, ip
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f04f 0400 	mov.w	r4, #0
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	f7f5 fc97 	bl	80002d8 <__aeabi_uldivmod>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a9b0:	e2e8      	b.n	800af84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b2:	f107 030c 	add.w	r3, r7, #12
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fd fc66 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f04f 0100 	mov.w	r1, #0
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d067      	beq.n	800aa9c <UART_SetConfig+0xec4>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d05e      	beq.n	800aa92 <UART_SetConfig+0xeba>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d055      	beq.n	800aa88 <UART_SetConfig+0xeb0>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b03      	cmp	r3, #3
 800a9e2:	d04c      	beq.n	800aa7e <UART_SetConfig+0xea6>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	d043      	beq.n	800aa74 <UART_SetConfig+0xe9c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	2b05      	cmp	r3, #5
 800a9f2:	d03a      	beq.n	800aa6a <UART_SetConfig+0xe92>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b06      	cmp	r3, #6
 800a9fa:	d031      	beq.n	800aa60 <UART_SetConfig+0xe88>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b07      	cmp	r3, #7
 800aa02:	d028      	beq.n	800aa56 <UART_SetConfig+0xe7e>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2b08      	cmp	r3, #8
 800aa0a:	d01f      	beq.n	800aa4c <UART_SetConfig+0xe74>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b09      	cmp	r3, #9
 800aa12:	d016      	beq.n	800aa42 <UART_SetConfig+0xe6a>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b0a      	cmp	r3, #10
 800aa1a:	d00d      	beq.n	800aa38 <UART_SetConfig+0xe60>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b0b      	cmp	r3, #11
 800aa22:	d104      	bne.n	800aa2e <UART_SetConfig+0xe56>
 800aa24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa28:	f04f 0400 	mov.w	r4, #0
 800aa2c:	e03a      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa2e:	f04f 0301 	mov.w	r3, #1
 800aa32:	f04f 0400 	mov.w	r4, #0
 800aa36:	e035      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa38:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aa3c:	f04f 0400 	mov.w	r4, #0
 800aa40:	e030      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa42:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa46:	f04f 0400 	mov.w	r4, #0
 800aa4a:	e02b      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa4c:	f04f 0320 	mov.w	r3, #32
 800aa50:	f04f 0400 	mov.w	r4, #0
 800aa54:	e026      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa56:	f04f 0310 	mov.w	r3, #16
 800aa5a:	f04f 0400 	mov.w	r4, #0
 800aa5e:	e021      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa60:	f04f 030c 	mov.w	r3, #12
 800aa64:	f04f 0400 	mov.w	r4, #0
 800aa68:	e01c      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa6a:	f04f 030a 	mov.w	r3, #10
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	e017      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa74:	f04f 0308 	mov.w	r3, #8
 800aa78:	f04f 0400 	mov.w	r4, #0
 800aa7c:	e012      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa7e:	f04f 0306 	mov.w	r3, #6
 800aa82:	f04f 0400 	mov.w	r4, #0
 800aa86:	e00d      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa88:	f04f 0304 	mov.w	r3, #4
 800aa8c:	f04f 0400 	mov.w	r4, #0
 800aa90:	e008      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa92:	f04f 0302 	mov.w	r3, #2
 800aa96:	f04f 0400 	mov.w	r4, #0
 800aa9a:	e003      	b.n	800aaa4 <UART_SetConfig+0xecc>
 800aa9c:	f04f 0301 	mov.w	r3, #1
 800aaa0:	f04f 0400 	mov.w	r4, #0
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	4623      	mov	r3, r4
 800aaa8:	f7f5 fc16 	bl	80002d8 <__aeabi_uldivmod>
 800aaac:	4603      	mov	r3, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	4619      	mov	r1, r3
 800aab2:	4622      	mov	r2, r4
 800aab4:	f04f 0300 	mov.w	r3, #0
 800aab8:	f04f 0400 	mov.w	r4, #0
 800aabc:	0214      	lsls	r4, r2, #8
 800aabe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aac2:	020b      	lsls	r3, r1, #8
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6852      	ldr	r2, [r2, #4]
 800aac8:	0852      	lsrs	r2, r2, #1
 800aaca:	4611      	mov	r1, r2
 800aacc:	f04f 0200 	mov.w	r2, #0
 800aad0:	eb13 0b01 	adds.w	fp, r3, r1
 800aad4:	eb44 0c02 	adc.w	ip, r4, r2
 800aad8:	4658      	mov	r0, fp
 800aada:	4661      	mov	r1, ip
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f04f 0400 	mov.w	r4, #0
 800aae4:	461a      	mov	r2, r3
 800aae6:	4623      	mov	r3, r4
 800aae8:	f7f5 fbf6 	bl	80002d8 <__aeabi_uldivmod>
 800aaec:	4603      	mov	r3, r0
 800aaee:	460c      	mov	r4, r1
 800aaf0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aaf2:	e247      	b.n	800af84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaf4:	4b96      	ldr	r3, [pc, #600]	; (800ad50 <UART_SetConfig+0x1178>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0320 	and.w	r3, r3, #32
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80a3 	beq.w	800ac48 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab02:	4b93      	ldr	r3, [pc, #588]	; (800ad50 <UART_SetConfig+0x1178>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	08db      	lsrs	r3, r3, #3
 800ab08:	f003 0303 	and.w	r3, r3, #3
 800ab0c:	4a91      	ldr	r2, [pc, #580]	; (800ad54 <UART_SetConfig+0x117c>)
 800ab0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab12:	4618      	mov	r0, r3
 800ab14:	f04f 0100 	mov.w	r1, #0
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d067      	beq.n	800abf0 <UART_SetConfig+0x1018>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d05e      	beq.n	800abe6 <UART_SetConfig+0x100e>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d055      	beq.n	800abdc <UART_SetConfig+0x1004>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d04c      	beq.n	800abd2 <UART_SetConfig+0xffa>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d043      	beq.n	800abc8 <UART_SetConfig+0xff0>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	2b05      	cmp	r3, #5
 800ab46:	d03a      	beq.n	800abbe <UART_SetConfig+0xfe6>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	2b06      	cmp	r3, #6
 800ab4e:	d031      	beq.n	800abb4 <UART_SetConfig+0xfdc>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b07      	cmp	r3, #7
 800ab56:	d028      	beq.n	800abaa <UART_SetConfig+0xfd2>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2b08      	cmp	r3, #8
 800ab5e:	d01f      	beq.n	800aba0 <UART_SetConfig+0xfc8>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b09      	cmp	r3, #9
 800ab66:	d016      	beq.n	800ab96 <UART_SetConfig+0xfbe>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b0a      	cmp	r3, #10
 800ab6e:	d00d      	beq.n	800ab8c <UART_SetConfig+0xfb4>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b0b      	cmp	r3, #11
 800ab76:	d104      	bne.n	800ab82 <UART_SetConfig+0xfaa>
 800ab78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab7c:	f04f 0400 	mov.w	r4, #0
 800ab80:	e03a      	b.n	800abf8 <UART_SetConfig+0x1020>
 800ab82:	f04f 0301 	mov.w	r3, #1
 800ab86:	f04f 0400 	mov.w	r4, #0
 800ab8a:	e035      	b.n	800abf8 <UART_SetConfig+0x1020>
 800ab8c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ab90:	f04f 0400 	mov.w	r4, #0
 800ab94:	e030      	b.n	800abf8 <UART_SetConfig+0x1020>
 800ab96:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ab9a:	f04f 0400 	mov.w	r4, #0
 800ab9e:	e02b      	b.n	800abf8 <UART_SetConfig+0x1020>
 800aba0:	f04f 0320 	mov.w	r3, #32
 800aba4:	f04f 0400 	mov.w	r4, #0
 800aba8:	e026      	b.n	800abf8 <UART_SetConfig+0x1020>
 800abaa:	f04f 0310 	mov.w	r3, #16
 800abae:	f04f 0400 	mov.w	r4, #0
 800abb2:	e021      	b.n	800abf8 <UART_SetConfig+0x1020>
 800abb4:	f04f 030c 	mov.w	r3, #12
 800abb8:	f04f 0400 	mov.w	r4, #0
 800abbc:	e01c      	b.n	800abf8 <UART_SetConfig+0x1020>
 800abbe:	f04f 030a 	mov.w	r3, #10
 800abc2:	f04f 0400 	mov.w	r4, #0
 800abc6:	e017      	b.n	800abf8 <UART_SetConfig+0x1020>
 800abc8:	f04f 0308 	mov.w	r3, #8
 800abcc:	f04f 0400 	mov.w	r4, #0
 800abd0:	e012      	b.n	800abf8 <UART_SetConfig+0x1020>
 800abd2:	f04f 0306 	mov.w	r3, #6
 800abd6:	f04f 0400 	mov.w	r4, #0
 800abda:	e00d      	b.n	800abf8 <UART_SetConfig+0x1020>
 800abdc:	f04f 0304 	mov.w	r3, #4
 800abe0:	f04f 0400 	mov.w	r4, #0
 800abe4:	e008      	b.n	800abf8 <UART_SetConfig+0x1020>
 800abe6:	f04f 0302 	mov.w	r3, #2
 800abea:	f04f 0400 	mov.w	r4, #0
 800abee:	e003      	b.n	800abf8 <UART_SetConfig+0x1020>
 800abf0:	f04f 0301 	mov.w	r3, #1
 800abf4:	f04f 0400 	mov.w	r4, #0
 800abf8:	461a      	mov	r2, r3
 800abfa:	4623      	mov	r3, r4
 800abfc:	f7f5 fb6c 	bl	80002d8 <__aeabi_uldivmod>
 800ac00:	4603      	mov	r3, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	4619      	mov	r1, r3
 800ac06:	4622      	mov	r2, r4
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	f04f 0400 	mov.w	r4, #0
 800ac10:	0214      	lsls	r4, r2, #8
 800ac12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac16:	020b      	lsls	r3, r1, #8
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	6852      	ldr	r2, [r2, #4]
 800ac1c:	0852      	lsrs	r2, r2, #1
 800ac1e:	4611      	mov	r1, r2
 800ac20:	f04f 0200 	mov.w	r2, #0
 800ac24:	eb13 0b01 	adds.w	fp, r3, r1
 800ac28:	eb44 0c02 	adc.w	ip, r4, r2
 800ac2c:	4658      	mov	r0, fp
 800ac2e:	4661      	mov	r1, ip
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	f04f 0400 	mov.w	r4, #0
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4623      	mov	r3, r4
 800ac3c:	f7f5 fb4c 	bl	80002d8 <__aeabi_uldivmod>
 800ac40:	4603      	mov	r3, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800ac46:	e19d      	b.n	800af84 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d05b      	beq.n	800ad08 <UART_SetConfig+0x1130>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d053      	beq.n	800ad00 <UART_SetConfig+0x1128>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d04b      	beq.n	800acf8 <UART_SetConfig+0x1120>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d043      	beq.n	800acf0 <UART_SetConfig+0x1118>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d03b      	beq.n	800ace8 <UART_SetConfig+0x1110>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	2b05      	cmp	r3, #5
 800ac76:	d033      	beq.n	800ace0 <UART_SetConfig+0x1108>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	2b06      	cmp	r3, #6
 800ac7e:	d02b      	beq.n	800acd8 <UART_SetConfig+0x1100>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	2b07      	cmp	r3, #7
 800ac86:	d023      	beq.n	800acd0 <UART_SetConfig+0x10f8>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d01b      	beq.n	800acc8 <UART_SetConfig+0x10f0>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	2b09      	cmp	r3, #9
 800ac96:	d013      	beq.n	800acc0 <UART_SetConfig+0x10e8>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9c:	2b0a      	cmp	r3, #10
 800ac9e:	d00b      	beq.n	800acb8 <UART_SetConfig+0x10e0>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca4:	2b0b      	cmp	r3, #11
 800aca6:	d103      	bne.n	800acb0 <UART_SetConfig+0x10d8>
 800aca8:	4b2a      	ldr	r3, [pc, #168]	; (800ad54 <UART_SetConfig+0x117c>)
 800acaa:	f04f 0400 	mov.w	r4, #0
 800acae:	e02e      	b.n	800ad0e <UART_SetConfig+0x1136>
 800acb0:	4b29      	ldr	r3, [pc, #164]	; (800ad58 <UART_SetConfig+0x1180>)
 800acb2:	f04f 0403 	mov.w	r4, #3
 800acb6:	e02a      	b.n	800ad0e <UART_SetConfig+0x1136>
 800acb8:	4b28      	ldr	r3, [pc, #160]	; (800ad5c <UART_SetConfig+0x1184>)
 800acba:	f04f 0400 	mov.w	r4, #0
 800acbe:	e026      	b.n	800ad0e <UART_SetConfig+0x1136>
 800acc0:	4b27      	ldr	r3, [pc, #156]	; (800ad60 <UART_SetConfig+0x1188>)
 800acc2:	f04f 0400 	mov.w	r4, #0
 800acc6:	e022      	b.n	800ad0e <UART_SetConfig+0x1136>
 800acc8:	4b26      	ldr	r3, [pc, #152]	; (800ad64 <UART_SetConfig+0x118c>)
 800acca:	f04f 0400 	mov.w	r4, #0
 800acce:	e01e      	b.n	800ad0e <UART_SetConfig+0x1136>
 800acd0:	4b25      	ldr	r3, [pc, #148]	; (800ad68 <UART_SetConfig+0x1190>)
 800acd2:	f04f 0400 	mov.w	r4, #0
 800acd6:	e01a      	b.n	800ad0e <UART_SetConfig+0x1136>
 800acd8:	a419      	add	r4, pc, #100	; (adr r4, 800ad40 <UART_SetConfig+0x1168>)
 800acda:	e9d4 3400 	ldrd	r3, r4, [r4]
 800acde:	e016      	b.n	800ad0e <UART_SetConfig+0x1136>
 800ace0:	4b22      	ldr	r3, [pc, #136]	; (800ad6c <UART_SetConfig+0x1194>)
 800ace2:	f04f 0400 	mov.w	r4, #0
 800ace6:	e012      	b.n	800ad0e <UART_SetConfig+0x1136>
 800ace8:	4b21      	ldr	r3, [pc, #132]	; (800ad70 <UART_SetConfig+0x1198>)
 800acea:	f04f 0400 	mov.w	r4, #0
 800acee:	e00e      	b.n	800ad0e <UART_SetConfig+0x1136>
 800acf0:	a415      	add	r4, pc, #84	; (adr r4, 800ad48 <UART_SetConfig+0x1170>)
 800acf2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800acf6:	e00a      	b.n	800ad0e <UART_SetConfig+0x1136>
 800acf8:	4b1e      	ldr	r3, [pc, #120]	; (800ad74 <UART_SetConfig+0x119c>)
 800acfa:	f04f 0400 	mov.w	r4, #0
 800acfe:	e006      	b.n	800ad0e <UART_SetConfig+0x1136>
 800ad00:	4b1d      	ldr	r3, [pc, #116]	; (800ad78 <UART_SetConfig+0x11a0>)
 800ad02:	f04f 0401 	mov.w	r4, #1
 800ad06:	e002      	b.n	800ad0e <UART_SetConfig+0x1136>
 800ad08:	4b13      	ldr	r3, [pc, #76]	; (800ad58 <UART_SetConfig+0x1180>)
 800ad0a:	f04f 0403 	mov.w	r4, #3
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	6852      	ldr	r2, [r2, #4]
 800ad12:	0852      	lsrs	r2, r2, #1
 800ad14:	4611      	mov	r1, r2
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	eb13 0b01 	adds.w	fp, r3, r1
 800ad1e:	eb44 0c02 	adc.w	ip, r4, r2
 800ad22:	4658      	mov	r0, fp
 800ad24:	4661      	mov	r1, ip
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f04f 0400 	mov.w	r4, #0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4623      	mov	r3, r4
 800ad32:	f7f5 fad1 	bl	80002d8 <__aeabi_uldivmod>
 800ad36:	4603      	mov	r3, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ad3c:	e122      	b.n	800af84 <UART_SetConfig+0x13ac>
 800ad3e:	bf00      	nop
 800ad40:	51615500 	.word	0x51615500
 800ad44:	00000000 	.word	0x00000000
 800ad48:	a2c2aa00 	.word	0xa2c2aa00
 800ad4c:	00000000 	.word	0x00000000
 800ad50:	58024400 	.word	0x58024400
 800ad54:	03d09000 	.word	0x03d09000
 800ad58:	d0900000 	.word	0xd0900000
 800ad5c:	07a12000 	.word	0x07a12000
 800ad60:	0f424000 	.word	0x0f424000
 800ad64:	1e848000 	.word	0x1e848000
 800ad68:	3d090000 	.word	0x3d090000
 800ad6c:	61a80000 	.word	0x61a80000
 800ad70:	7a120000 	.word	0x7a120000
 800ad74:	f4240000 	.word	0xf4240000
 800ad78:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d05b      	beq.n	800ae3c <UART_SetConfig+0x1264>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d053      	beq.n	800ae34 <UART_SetConfig+0x125c>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d04b      	beq.n	800ae2c <UART_SetConfig+0x1254>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad98:	2b03      	cmp	r3, #3
 800ad9a:	d043      	beq.n	800ae24 <UART_SetConfig+0x124c>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	2b04      	cmp	r3, #4
 800ada2:	d03b      	beq.n	800ae1c <UART_SetConfig+0x1244>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2b05      	cmp	r3, #5
 800adaa:	d033      	beq.n	800ae14 <UART_SetConfig+0x123c>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2b06      	cmp	r3, #6
 800adb2:	d02b      	beq.n	800ae0c <UART_SetConfig+0x1234>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b07      	cmp	r3, #7
 800adba:	d023      	beq.n	800ae04 <UART_SetConfig+0x122c>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b08      	cmp	r3, #8
 800adc2:	d01b      	beq.n	800adfc <UART_SetConfig+0x1224>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b09      	cmp	r3, #9
 800adca:	d013      	beq.n	800adf4 <UART_SetConfig+0x121c>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b0a      	cmp	r3, #10
 800add2:	d00b      	beq.n	800adec <UART_SetConfig+0x1214>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b0b      	cmp	r3, #11
 800adda:	d103      	bne.n	800ade4 <UART_SetConfig+0x120c>
 800addc:	4bc0      	ldr	r3, [pc, #768]	; (800b0e0 <UART_SetConfig+0x1508>)
 800adde:	f04f 0400 	mov.w	r4, #0
 800ade2:	e02e      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ade4:	4bbf      	ldr	r3, [pc, #764]	; (800b0e4 <UART_SetConfig+0x150c>)
 800ade6:	f04f 0400 	mov.w	r4, #0
 800adea:	e02a      	b.n	800ae42 <UART_SetConfig+0x126a>
 800adec:	4bbe      	ldr	r3, [pc, #760]	; (800b0e8 <UART_SetConfig+0x1510>)
 800adee:	f04f 0400 	mov.w	r4, #0
 800adf2:	e026      	b.n	800ae42 <UART_SetConfig+0x126a>
 800adf4:	4bbd      	ldr	r3, [pc, #756]	; (800b0ec <UART_SetConfig+0x1514>)
 800adf6:	f04f 0400 	mov.w	r4, #0
 800adfa:	e022      	b.n	800ae42 <UART_SetConfig+0x126a>
 800adfc:	4bbc      	ldr	r3, [pc, #752]	; (800b0f0 <UART_SetConfig+0x1518>)
 800adfe:	f04f 0400 	mov.w	r4, #0
 800ae02:	e01e      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ae04:	4bbb      	ldr	r3, [pc, #748]	; (800b0f4 <UART_SetConfig+0x151c>)
 800ae06:	f04f 0400 	mov.w	r4, #0
 800ae0a:	e01a      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ae0c:	a4b0      	add	r4, pc, #704	; (adr r4, 800b0d0 <UART_SetConfig+0x14f8>)
 800ae0e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae12:	e016      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ae14:	4bb8      	ldr	r3, [pc, #736]	; (800b0f8 <UART_SetConfig+0x1520>)
 800ae16:	f04f 0400 	mov.w	r4, #0
 800ae1a:	e012      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ae1c:	4bb7      	ldr	r3, [pc, #732]	; (800b0fc <UART_SetConfig+0x1524>)
 800ae1e:	f04f 0400 	mov.w	r4, #0
 800ae22:	e00e      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ae24:	a4ac      	add	r4, pc, #688	; (adr r4, 800b0d8 <UART_SetConfig+0x1500>)
 800ae26:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae2a:	e00a      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ae2c:	4bb4      	ldr	r3, [pc, #720]	; (800b100 <UART_SetConfig+0x1528>)
 800ae2e:	f04f 0400 	mov.w	r4, #0
 800ae32:	e006      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ae34:	4bb3      	ldr	r3, [pc, #716]	; (800b104 <UART_SetConfig+0x152c>)
 800ae36:	f04f 0400 	mov.w	r4, #0
 800ae3a:	e002      	b.n	800ae42 <UART_SetConfig+0x126a>
 800ae3c:	4ba9      	ldr	r3, [pc, #676]	; (800b0e4 <UART_SetConfig+0x150c>)
 800ae3e:	f04f 0400 	mov.w	r4, #0
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	6852      	ldr	r2, [r2, #4]
 800ae46:	0852      	lsrs	r2, r2, #1
 800ae48:	4611      	mov	r1, r2
 800ae4a:	f04f 0200 	mov.w	r2, #0
 800ae4e:	eb13 0b01 	adds.w	fp, r3, r1
 800ae52:	eb44 0c02 	adc.w	ip, r4, r2
 800ae56:	4658      	mov	r0, fp
 800ae58:	4661      	mov	r1, ip
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f04f 0400 	mov.w	r4, #0
 800ae62:	461a      	mov	r2, r3
 800ae64:	4623      	mov	r3, r4
 800ae66:	f7f5 fa37 	bl	80002d8 <__aeabi_uldivmod>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae70:	e088      	b.n	800af84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d064      	beq.n	800af44 <UART_SetConfig+0x136c>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d05b      	beq.n	800af3a <UART_SetConfig+0x1362>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d052      	beq.n	800af30 <UART_SetConfig+0x1358>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d04a      	beq.n	800af28 <UART_SetConfig+0x1350>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d041      	beq.n	800af1e <UART_SetConfig+0x1346>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	2b05      	cmp	r3, #5
 800aea0:	d039      	beq.n	800af16 <UART_SetConfig+0x133e>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	2b06      	cmp	r3, #6
 800aea8:	d031      	beq.n	800af0e <UART_SetConfig+0x1336>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeae:	2b07      	cmp	r3, #7
 800aeb0:	d028      	beq.n	800af04 <UART_SetConfig+0x132c>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	2b08      	cmp	r3, #8
 800aeb8:	d01f      	beq.n	800aefa <UART_SetConfig+0x1322>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	2b09      	cmp	r3, #9
 800aec0:	d016      	beq.n	800aef0 <UART_SetConfig+0x1318>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec6:	2b0a      	cmp	r3, #10
 800aec8:	d00d      	beq.n	800aee6 <UART_SetConfig+0x130e>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	2b0b      	cmp	r3, #11
 800aed0:	d104      	bne.n	800aedc <UART_SetConfig+0x1304>
 800aed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aed6:	f04f 0400 	mov.w	r4, #0
 800aeda:	e037      	b.n	800af4c <UART_SetConfig+0x1374>
 800aedc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aee0:	f04f 0400 	mov.w	r4, #0
 800aee4:	e032      	b.n	800af4c <UART_SetConfig+0x1374>
 800aee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aeea:	f04f 0400 	mov.w	r4, #0
 800aeee:	e02d      	b.n	800af4c <UART_SetConfig+0x1374>
 800aef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aef4:	f04f 0400 	mov.w	r4, #0
 800aef8:	e028      	b.n	800af4c <UART_SetConfig+0x1374>
 800aefa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aefe:	f04f 0400 	mov.w	r4, #0
 800af02:	e023      	b.n	800af4c <UART_SetConfig+0x1374>
 800af04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af08:	f04f 0400 	mov.w	r4, #0
 800af0c:	e01e      	b.n	800af4c <UART_SetConfig+0x1374>
 800af0e:	4b7e      	ldr	r3, [pc, #504]	; (800b108 <UART_SetConfig+0x1530>)
 800af10:	f04f 0400 	mov.w	r4, #0
 800af14:	e01a      	b.n	800af4c <UART_SetConfig+0x1374>
 800af16:	4b7d      	ldr	r3, [pc, #500]	; (800b10c <UART_SetConfig+0x1534>)
 800af18:	f04f 0400 	mov.w	r4, #0
 800af1c:	e016      	b.n	800af4c <UART_SetConfig+0x1374>
 800af1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af22:	f04f 0400 	mov.w	r4, #0
 800af26:	e011      	b.n	800af4c <UART_SetConfig+0x1374>
 800af28:	4b79      	ldr	r3, [pc, #484]	; (800b110 <UART_SetConfig+0x1538>)
 800af2a:	f04f 0400 	mov.w	r4, #0
 800af2e:	e00d      	b.n	800af4c <UART_SetConfig+0x1374>
 800af30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af34:	f04f 0400 	mov.w	r4, #0
 800af38:	e008      	b.n	800af4c <UART_SetConfig+0x1374>
 800af3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af3e:	f04f 0400 	mov.w	r4, #0
 800af42:	e003      	b.n	800af4c <UART_SetConfig+0x1374>
 800af44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800af48:	f04f 0400 	mov.w	r4, #0
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	6852      	ldr	r2, [r2, #4]
 800af50:	0852      	lsrs	r2, r2, #1
 800af52:	4611      	mov	r1, r2
 800af54:	f04f 0200 	mov.w	r2, #0
 800af58:	eb13 0b01 	adds.w	fp, r3, r1
 800af5c:	eb44 0c02 	adc.w	ip, r4, r2
 800af60:	4658      	mov	r0, fp
 800af62:	4661      	mov	r1, ip
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f04f 0400 	mov.w	r4, #0
 800af6c:	461a      	mov	r2, r3
 800af6e:	4623      	mov	r3, r4
 800af70:	f7f5 f9b2 	bl	80002d8 <__aeabi_uldivmod>
 800af74:	4603      	mov	r3, r0
 800af76:	460c      	mov	r4, r1
 800af78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af7a:	e003      	b.n	800af84 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800af82:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af8a:	d309      	bcc.n	800afa0 <UART_SetConfig+0x13c8>
 800af8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af92:	d205      	bcs.n	800afa0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af9a:	60da      	str	r2, [r3, #12]
 800af9c:	f000 bf85 	b.w	800beaa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa6:	f000 bf80 	b.w	800beaa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afb2:	f040 83da 	bne.w	800b76a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800afb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800afba:	2b40      	cmp	r3, #64	; 0x40
 800afbc:	f200 83b3 	bhi.w	800b726 <UART_SetConfig+0x1b4e>
 800afc0:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <UART_SetConfig+0x13f0>)
 800afc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc6:	bf00      	nop
 800afc8:	0800b115 	.word	0x0800b115
 800afcc:	0800b1cd 	.word	0x0800b1cd
 800afd0:	0800b727 	.word	0x0800b727
 800afd4:	0800b727 	.word	0x0800b727
 800afd8:	0800b285 	.word	0x0800b285
 800afdc:	0800b727 	.word	0x0800b727
 800afe0:	0800b727 	.word	0x0800b727
 800afe4:	0800b727 	.word	0x0800b727
 800afe8:	0800b341 	.word	0x0800b341
 800afec:	0800b727 	.word	0x0800b727
 800aff0:	0800b727 	.word	0x0800b727
 800aff4:	0800b727 	.word	0x0800b727
 800aff8:	0800b727 	.word	0x0800b727
 800affc:	0800b727 	.word	0x0800b727
 800b000:	0800b727 	.word	0x0800b727
 800b004:	0800b727 	.word	0x0800b727
 800b008:	0800b3fd 	.word	0x0800b3fd
 800b00c:	0800b727 	.word	0x0800b727
 800b010:	0800b727 	.word	0x0800b727
 800b014:	0800b727 	.word	0x0800b727
 800b018:	0800b727 	.word	0x0800b727
 800b01c:	0800b727 	.word	0x0800b727
 800b020:	0800b727 	.word	0x0800b727
 800b024:	0800b727 	.word	0x0800b727
 800b028:	0800b727 	.word	0x0800b727
 800b02c:	0800b727 	.word	0x0800b727
 800b030:	0800b727 	.word	0x0800b727
 800b034:	0800b727 	.word	0x0800b727
 800b038:	0800b727 	.word	0x0800b727
 800b03c:	0800b727 	.word	0x0800b727
 800b040:	0800b727 	.word	0x0800b727
 800b044:	0800b727 	.word	0x0800b727
 800b048:	0800b56f 	.word	0x0800b56f
 800b04c:	0800b727 	.word	0x0800b727
 800b050:	0800b727 	.word	0x0800b727
 800b054:	0800b727 	.word	0x0800b727
 800b058:	0800b727 	.word	0x0800b727
 800b05c:	0800b727 	.word	0x0800b727
 800b060:	0800b727 	.word	0x0800b727
 800b064:	0800b727 	.word	0x0800b727
 800b068:	0800b727 	.word	0x0800b727
 800b06c:	0800b727 	.word	0x0800b727
 800b070:	0800b727 	.word	0x0800b727
 800b074:	0800b727 	.word	0x0800b727
 800b078:	0800b727 	.word	0x0800b727
 800b07c:	0800b727 	.word	0x0800b727
 800b080:	0800b727 	.word	0x0800b727
 800b084:	0800b727 	.word	0x0800b727
 800b088:	0800b727 	.word	0x0800b727
 800b08c:	0800b727 	.word	0x0800b727
 800b090:	0800b727 	.word	0x0800b727
 800b094:	0800b727 	.word	0x0800b727
 800b098:	0800b727 	.word	0x0800b727
 800b09c:	0800b727 	.word	0x0800b727
 800b0a0:	0800b727 	.word	0x0800b727
 800b0a4:	0800b727 	.word	0x0800b727
 800b0a8:	0800b727 	.word	0x0800b727
 800b0ac:	0800b727 	.word	0x0800b727
 800b0b0:	0800b727 	.word	0x0800b727
 800b0b4:	0800b727 	.word	0x0800b727
 800b0b8:	0800b727 	.word	0x0800b727
 800b0bc:	0800b727 	.word	0x0800b727
 800b0c0:	0800b727 	.word	0x0800b727
 800b0c4:	0800b727 	.word	0x0800b727
 800b0c8:	0800b665 	.word	0x0800b665
 800b0cc:	f3af 8000 	nop.w
 800b0d0:	05161500 	.word	0x05161500
 800b0d4:	00000000 	.word	0x00000000
 800b0d8:	0a2c2a00 	.word	0x0a2c2a00
 800b0dc:	00000000 	.word	0x00000000
 800b0e0:	003d0900 	.word	0x003d0900
 800b0e4:	3d090000 	.word	0x3d090000
 800b0e8:	007a1200 	.word	0x007a1200
 800b0ec:	00f42400 	.word	0x00f42400
 800b0f0:	01e84800 	.word	0x01e84800
 800b0f4:	03d09000 	.word	0x03d09000
 800b0f8:	061a8000 	.word	0x061a8000
 800b0fc:	07a12000 	.word	0x07a12000
 800b100:	0f424000 	.word	0x0f424000
 800b104:	1e848000 	.word	0x1e848000
 800b108:	000aaa00 	.word	0x000aaa00
 800b10c:	000ccc00 	.word	0x000ccc00
 800b110:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b114:	f7fb fdd4 	bl	8006cc0 <HAL_RCC_GetPCLK1Freq>
 800b118:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d044      	beq.n	800b1ac <UART_SetConfig+0x15d4>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	2b01      	cmp	r3, #1
 800b128:	d03e      	beq.n	800b1a8 <UART_SetConfig+0x15d0>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d038      	beq.n	800b1a4 <UART_SetConfig+0x15cc>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b136:	2b03      	cmp	r3, #3
 800b138:	d032      	beq.n	800b1a0 <UART_SetConfig+0x15c8>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13e:	2b04      	cmp	r3, #4
 800b140:	d02c      	beq.n	800b19c <UART_SetConfig+0x15c4>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	2b05      	cmp	r3, #5
 800b148:	d026      	beq.n	800b198 <UART_SetConfig+0x15c0>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	2b06      	cmp	r3, #6
 800b150:	d020      	beq.n	800b194 <UART_SetConfig+0x15bc>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b156:	2b07      	cmp	r3, #7
 800b158:	d01a      	beq.n	800b190 <UART_SetConfig+0x15b8>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	2b08      	cmp	r3, #8
 800b160:	d014      	beq.n	800b18c <UART_SetConfig+0x15b4>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	2b09      	cmp	r3, #9
 800b168:	d00e      	beq.n	800b188 <UART_SetConfig+0x15b0>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	2b0a      	cmp	r3, #10
 800b170:	d008      	beq.n	800b184 <UART_SetConfig+0x15ac>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	2b0b      	cmp	r3, #11
 800b178:	d102      	bne.n	800b180 <UART_SetConfig+0x15a8>
 800b17a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b17e:	e016      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b180:	2301      	movs	r3, #1
 800b182:	e014      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b184:	2380      	movs	r3, #128	; 0x80
 800b186:	e012      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b188:	2340      	movs	r3, #64	; 0x40
 800b18a:	e010      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b18c:	2320      	movs	r3, #32
 800b18e:	e00e      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b190:	2310      	movs	r3, #16
 800b192:	e00c      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b194:	230c      	movs	r3, #12
 800b196:	e00a      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b198:	230a      	movs	r3, #10
 800b19a:	e008      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b19c:	2308      	movs	r3, #8
 800b19e:	e006      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b1a0:	2306      	movs	r3, #6
 800b1a2:	e004      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b1a4:	2304      	movs	r3, #4
 800b1a6:	e002      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e000      	b.n	800b1ae <UART_SetConfig+0x15d6>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b4:	005a      	lsls	r2, r3, #1
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	085b      	lsrs	r3, r3, #1
 800b1bc:	441a      	add	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1ca:	e2b0      	b.n	800b72e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1cc:	f7fb fd8e 	bl	8006cec <HAL_RCC_GetPCLK2Freq>
 800b1d0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d044      	beq.n	800b264 <UART_SetConfig+0x168c>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d03e      	beq.n	800b260 <UART_SetConfig+0x1688>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d038      	beq.n	800b25c <UART_SetConfig+0x1684>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d032      	beq.n	800b258 <UART_SetConfig+0x1680>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f6:	2b04      	cmp	r3, #4
 800b1f8:	d02c      	beq.n	800b254 <UART_SetConfig+0x167c>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	2b05      	cmp	r3, #5
 800b200:	d026      	beq.n	800b250 <UART_SetConfig+0x1678>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b06      	cmp	r3, #6
 800b208:	d020      	beq.n	800b24c <UART_SetConfig+0x1674>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2b07      	cmp	r3, #7
 800b210:	d01a      	beq.n	800b248 <UART_SetConfig+0x1670>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	2b08      	cmp	r3, #8
 800b218:	d014      	beq.n	800b244 <UART_SetConfig+0x166c>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	2b09      	cmp	r3, #9
 800b220:	d00e      	beq.n	800b240 <UART_SetConfig+0x1668>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	2b0a      	cmp	r3, #10
 800b228:	d008      	beq.n	800b23c <UART_SetConfig+0x1664>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	2b0b      	cmp	r3, #11
 800b230:	d102      	bne.n	800b238 <UART_SetConfig+0x1660>
 800b232:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b236:	e016      	b.n	800b266 <UART_SetConfig+0x168e>
 800b238:	2301      	movs	r3, #1
 800b23a:	e014      	b.n	800b266 <UART_SetConfig+0x168e>
 800b23c:	2380      	movs	r3, #128	; 0x80
 800b23e:	e012      	b.n	800b266 <UART_SetConfig+0x168e>
 800b240:	2340      	movs	r3, #64	; 0x40
 800b242:	e010      	b.n	800b266 <UART_SetConfig+0x168e>
 800b244:	2320      	movs	r3, #32
 800b246:	e00e      	b.n	800b266 <UART_SetConfig+0x168e>
 800b248:	2310      	movs	r3, #16
 800b24a:	e00c      	b.n	800b266 <UART_SetConfig+0x168e>
 800b24c:	230c      	movs	r3, #12
 800b24e:	e00a      	b.n	800b266 <UART_SetConfig+0x168e>
 800b250:	230a      	movs	r3, #10
 800b252:	e008      	b.n	800b266 <UART_SetConfig+0x168e>
 800b254:	2308      	movs	r3, #8
 800b256:	e006      	b.n	800b266 <UART_SetConfig+0x168e>
 800b258:	2306      	movs	r3, #6
 800b25a:	e004      	b.n	800b266 <UART_SetConfig+0x168e>
 800b25c:	2304      	movs	r3, #4
 800b25e:	e002      	b.n	800b266 <UART_SetConfig+0x168e>
 800b260:	2302      	movs	r3, #2
 800b262:	e000      	b.n	800b266 <UART_SetConfig+0x168e>
 800b264:	2301      	movs	r3, #1
 800b266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b268:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26c:	005a      	lsls	r2, r3, #1
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	085b      	lsrs	r3, r3, #1
 800b274:	441a      	add	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27e:	b29b      	uxth	r3, r3
 800b280:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b282:	e254      	b.n	800b72e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b284:	f107 0318 	add.w	r3, r7, #24
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fc feb1 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b294:	2b00      	cmp	r3, #0
 800b296:	d044      	beq.n	800b322 <UART_SetConfig+0x174a>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d03e      	beq.n	800b31e <UART_SetConfig+0x1746>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d038      	beq.n	800b31a <UART_SetConfig+0x1742>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d032      	beq.n	800b316 <UART_SetConfig+0x173e>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d02c      	beq.n	800b312 <UART_SetConfig+0x173a>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	2b05      	cmp	r3, #5
 800b2be:	d026      	beq.n	800b30e <UART_SetConfig+0x1736>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	2b06      	cmp	r3, #6
 800b2c6:	d020      	beq.n	800b30a <UART_SetConfig+0x1732>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2cc:	2b07      	cmp	r3, #7
 800b2ce:	d01a      	beq.n	800b306 <UART_SetConfig+0x172e>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	2b08      	cmp	r3, #8
 800b2d6:	d014      	beq.n	800b302 <UART_SetConfig+0x172a>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	2b09      	cmp	r3, #9
 800b2de:	d00e      	beq.n	800b2fe <UART_SetConfig+0x1726>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	2b0a      	cmp	r3, #10
 800b2e6:	d008      	beq.n	800b2fa <UART_SetConfig+0x1722>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	2b0b      	cmp	r3, #11
 800b2ee:	d102      	bne.n	800b2f6 <UART_SetConfig+0x171e>
 800b2f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2f4:	e016      	b.n	800b324 <UART_SetConfig+0x174c>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e014      	b.n	800b324 <UART_SetConfig+0x174c>
 800b2fa:	2380      	movs	r3, #128	; 0x80
 800b2fc:	e012      	b.n	800b324 <UART_SetConfig+0x174c>
 800b2fe:	2340      	movs	r3, #64	; 0x40
 800b300:	e010      	b.n	800b324 <UART_SetConfig+0x174c>
 800b302:	2320      	movs	r3, #32
 800b304:	e00e      	b.n	800b324 <UART_SetConfig+0x174c>
 800b306:	2310      	movs	r3, #16
 800b308:	e00c      	b.n	800b324 <UART_SetConfig+0x174c>
 800b30a:	230c      	movs	r3, #12
 800b30c:	e00a      	b.n	800b324 <UART_SetConfig+0x174c>
 800b30e:	230a      	movs	r3, #10
 800b310:	e008      	b.n	800b324 <UART_SetConfig+0x174c>
 800b312:	2308      	movs	r3, #8
 800b314:	e006      	b.n	800b324 <UART_SetConfig+0x174c>
 800b316:	2306      	movs	r3, #6
 800b318:	e004      	b.n	800b324 <UART_SetConfig+0x174c>
 800b31a:	2304      	movs	r3, #4
 800b31c:	e002      	b.n	800b324 <UART_SetConfig+0x174c>
 800b31e:	2302      	movs	r3, #2
 800b320:	e000      	b.n	800b324 <UART_SetConfig+0x174c>
 800b322:	2301      	movs	r3, #1
 800b324:	fbb2 f3f3 	udiv	r3, r2, r3
 800b328:	005a      	lsls	r2, r3, #1
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	085b      	lsrs	r3, r3, #1
 800b330:	441a      	add	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	fbb2 f3f3 	udiv	r3, r2, r3
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b33e:	e1f6      	b.n	800b72e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b340:	f107 030c 	add.w	r3, r7, #12
 800b344:	4618      	mov	r0, r3
 800b346:	f7fc ff9f 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	2b00      	cmp	r3, #0
 800b352:	d044      	beq.n	800b3de <UART_SetConfig+0x1806>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d03e      	beq.n	800b3da <UART_SetConfig+0x1802>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	2b02      	cmp	r3, #2
 800b362:	d038      	beq.n	800b3d6 <UART_SetConfig+0x17fe>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d032      	beq.n	800b3d2 <UART_SetConfig+0x17fa>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	2b04      	cmp	r3, #4
 800b372:	d02c      	beq.n	800b3ce <UART_SetConfig+0x17f6>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b378:	2b05      	cmp	r3, #5
 800b37a:	d026      	beq.n	800b3ca <UART_SetConfig+0x17f2>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	2b06      	cmp	r3, #6
 800b382:	d020      	beq.n	800b3c6 <UART_SetConfig+0x17ee>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b388:	2b07      	cmp	r3, #7
 800b38a:	d01a      	beq.n	800b3c2 <UART_SetConfig+0x17ea>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b390:	2b08      	cmp	r3, #8
 800b392:	d014      	beq.n	800b3be <UART_SetConfig+0x17e6>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	2b09      	cmp	r3, #9
 800b39a:	d00e      	beq.n	800b3ba <UART_SetConfig+0x17e2>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	2b0a      	cmp	r3, #10
 800b3a2:	d008      	beq.n	800b3b6 <UART_SetConfig+0x17de>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	2b0b      	cmp	r3, #11
 800b3aa:	d102      	bne.n	800b3b2 <UART_SetConfig+0x17da>
 800b3ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b0:	e016      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e014      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3b6:	2380      	movs	r3, #128	; 0x80
 800b3b8:	e012      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3ba:	2340      	movs	r3, #64	; 0x40
 800b3bc:	e010      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3be:	2320      	movs	r3, #32
 800b3c0:	e00e      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3c2:	2310      	movs	r3, #16
 800b3c4:	e00c      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3c6:	230c      	movs	r3, #12
 800b3c8:	e00a      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3ca:	230a      	movs	r3, #10
 800b3cc:	e008      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3ce:	2308      	movs	r3, #8
 800b3d0:	e006      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3d2:	2306      	movs	r3, #6
 800b3d4:	e004      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3d6:	2304      	movs	r3, #4
 800b3d8:	e002      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	e000      	b.n	800b3e0 <UART_SetConfig+0x1808>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3e4:	005a      	lsls	r2, r3, #1
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	085b      	lsrs	r3, r3, #1
 800b3ec:	441a      	add	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3fa:	e198      	b.n	800b72e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3fc:	4b87      	ldr	r3, [pc, #540]	; (800b61c <UART_SetConfig+0x1a44>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0320 	and.w	r3, r3, #32
 800b404:	2b00      	cmp	r3, #0
 800b406:	d05e      	beq.n	800b4c6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b408:	4b84      	ldr	r3, [pc, #528]	; (800b61c <UART_SetConfig+0x1a44>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	08db      	lsrs	r3, r3, #3
 800b40e:	f003 0303 	and.w	r3, r3, #3
 800b412:	4a83      	ldr	r2, [pc, #524]	; (800b620 <UART_SetConfig+0x1a48>)
 800b414:	40da      	lsrs	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d044      	beq.n	800b4a8 <UART_SetConfig+0x18d0>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	2b01      	cmp	r3, #1
 800b424:	d03e      	beq.n	800b4a4 <UART_SetConfig+0x18cc>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d038      	beq.n	800b4a0 <UART_SetConfig+0x18c8>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b432:	2b03      	cmp	r3, #3
 800b434:	d032      	beq.n	800b49c <UART_SetConfig+0x18c4>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43a:	2b04      	cmp	r3, #4
 800b43c:	d02c      	beq.n	800b498 <UART_SetConfig+0x18c0>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b442:	2b05      	cmp	r3, #5
 800b444:	d026      	beq.n	800b494 <UART_SetConfig+0x18bc>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44a:	2b06      	cmp	r3, #6
 800b44c:	d020      	beq.n	800b490 <UART_SetConfig+0x18b8>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	2b07      	cmp	r3, #7
 800b454:	d01a      	beq.n	800b48c <UART_SetConfig+0x18b4>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	2b08      	cmp	r3, #8
 800b45c:	d014      	beq.n	800b488 <UART_SetConfig+0x18b0>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b462:	2b09      	cmp	r3, #9
 800b464:	d00e      	beq.n	800b484 <UART_SetConfig+0x18ac>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46a:	2b0a      	cmp	r3, #10
 800b46c:	d008      	beq.n	800b480 <UART_SetConfig+0x18a8>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	2b0b      	cmp	r3, #11
 800b474:	d102      	bne.n	800b47c <UART_SetConfig+0x18a4>
 800b476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b47a:	e016      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e014      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b480:	2380      	movs	r3, #128	; 0x80
 800b482:	e012      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b484:	2340      	movs	r3, #64	; 0x40
 800b486:	e010      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b488:	2320      	movs	r3, #32
 800b48a:	e00e      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b48c:	2310      	movs	r3, #16
 800b48e:	e00c      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b490:	230c      	movs	r3, #12
 800b492:	e00a      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b494:	230a      	movs	r3, #10
 800b496:	e008      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b498:	2308      	movs	r3, #8
 800b49a:	e006      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b49c:	2306      	movs	r3, #6
 800b49e:	e004      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	e002      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	e000      	b.n	800b4aa <UART_SetConfig+0x18d2>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ae:	005a      	lsls	r2, r3, #1
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	085b      	lsrs	r3, r3, #1
 800b4b6:	441a      	add	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b4c4:	e133      	b.n	800b72e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d043      	beq.n	800b556 <UART_SetConfig+0x197e>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d03d      	beq.n	800b552 <UART_SetConfig+0x197a>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d037      	beq.n	800b54e <UART_SetConfig+0x1976>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d031      	beq.n	800b54a <UART_SetConfig+0x1972>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	d02b      	beq.n	800b546 <UART_SetConfig+0x196e>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	2b05      	cmp	r3, #5
 800b4f4:	d025      	beq.n	800b542 <UART_SetConfig+0x196a>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fa:	2b06      	cmp	r3, #6
 800b4fc:	d01f      	beq.n	800b53e <UART_SetConfig+0x1966>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	2b07      	cmp	r3, #7
 800b504:	d019      	beq.n	800b53a <UART_SetConfig+0x1962>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	2b08      	cmp	r3, #8
 800b50c:	d013      	beq.n	800b536 <UART_SetConfig+0x195e>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	2b09      	cmp	r3, #9
 800b514:	d00d      	beq.n	800b532 <UART_SetConfig+0x195a>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	2b0a      	cmp	r3, #10
 800b51c:	d007      	beq.n	800b52e <UART_SetConfig+0x1956>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	2b0b      	cmp	r3, #11
 800b524:	d101      	bne.n	800b52a <UART_SetConfig+0x1952>
 800b526:	4b3f      	ldr	r3, [pc, #252]	; (800b624 <UART_SetConfig+0x1a4c>)
 800b528:	e016      	b.n	800b558 <UART_SetConfig+0x1980>
 800b52a:	4b3f      	ldr	r3, [pc, #252]	; (800b628 <UART_SetConfig+0x1a50>)
 800b52c:	e014      	b.n	800b558 <UART_SetConfig+0x1980>
 800b52e:	4b3f      	ldr	r3, [pc, #252]	; (800b62c <UART_SetConfig+0x1a54>)
 800b530:	e012      	b.n	800b558 <UART_SetConfig+0x1980>
 800b532:	4b3f      	ldr	r3, [pc, #252]	; (800b630 <UART_SetConfig+0x1a58>)
 800b534:	e010      	b.n	800b558 <UART_SetConfig+0x1980>
 800b536:	4b3f      	ldr	r3, [pc, #252]	; (800b634 <UART_SetConfig+0x1a5c>)
 800b538:	e00e      	b.n	800b558 <UART_SetConfig+0x1980>
 800b53a:	4b3f      	ldr	r3, [pc, #252]	; (800b638 <UART_SetConfig+0x1a60>)
 800b53c:	e00c      	b.n	800b558 <UART_SetConfig+0x1980>
 800b53e:	4b3f      	ldr	r3, [pc, #252]	; (800b63c <UART_SetConfig+0x1a64>)
 800b540:	e00a      	b.n	800b558 <UART_SetConfig+0x1980>
 800b542:	4b3f      	ldr	r3, [pc, #252]	; (800b640 <UART_SetConfig+0x1a68>)
 800b544:	e008      	b.n	800b558 <UART_SetConfig+0x1980>
 800b546:	4b3f      	ldr	r3, [pc, #252]	; (800b644 <UART_SetConfig+0x1a6c>)
 800b548:	e006      	b.n	800b558 <UART_SetConfig+0x1980>
 800b54a:	4b3f      	ldr	r3, [pc, #252]	; (800b648 <UART_SetConfig+0x1a70>)
 800b54c:	e004      	b.n	800b558 <UART_SetConfig+0x1980>
 800b54e:	4b3f      	ldr	r3, [pc, #252]	; (800b64c <UART_SetConfig+0x1a74>)
 800b550:	e002      	b.n	800b558 <UART_SetConfig+0x1980>
 800b552:	4b33      	ldr	r3, [pc, #204]	; (800b620 <UART_SetConfig+0x1a48>)
 800b554:	e000      	b.n	800b558 <UART_SetConfig+0x1980>
 800b556:	4b34      	ldr	r3, [pc, #208]	; (800b628 <UART_SetConfig+0x1a50>)
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	6852      	ldr	r2, [r2, #4]
 800b55c:	0852      	lsrs	r2, r2, #1
 800b55e:	441a      	add	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	fbb2 f3f3 	udiv	r3, r2, r3
 800b568:	b29b      	uxth	r3, r3
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b56c:	e0df      	b.n	800b72e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b572:	2b00      	cmp	r3, #0
 800b574:	d045      	beq.n	800b602 <UART_SetConfig+0x1a2a>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d03f      	beq.n	800b5fe <UART_SetConfig+0x1a26>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	2b02      	cmp	r3, #2
 800b584:	d039      	beq.n	800b5fa <UART_SetConfig+0x1a22>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d033      	beq.n	800b5f6 <UART_SetConfig+0x1a1e>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b592:	2b04      	cmp	r3, #4
 800b594:	d02d      	beq.n	800b5f2 <UART_SetConfig+0x1a1a>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	2b05      	cmp	r3, #5
 800b59c:	d027      	beq.n	800b5ee <UART_SetConfig+0x1a16>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	2b06      	cmp	r3, #6
 800b5a4:	d021      	beq.n	800b5ea <UART_SetConfig+0x1a12>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	2b07      	cmp	r3, #7
 800b5ac:	d01b      	beq.n	800b5e6 <UART_SetConfig+0x1a0e>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	2b08      	cmp	r3, #8
 800b5b4:	d015      	beq.n	800b5e2 <UART_SetConfig+0x1a0a>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	2b09      	cmp	r3, #9
 800b5bc:	d00f      	beq.n	800b5de <UART_SetConfig+0x1a06>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	2b0a      	cmp	r3, #10
 800b5c4:	d008      	beq.n	800b5d8 <UART_SetConfig+0x1a00>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	2b0b      	cmp	r3, #11
 800b5cc:	d102      	bne.n	800b5d4 <UART_SetConfig+0x19fc>
 800b5ce:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b5d2:	e017      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5d4:	4b18      	ldr	r3, [pc, #96]	; (800b638 <UART_SetConfig+0x1a60>)
 800b5d6:	e015      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b5dc:	e012      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5de:	4b1c      	ldr	r3, [pc, #112]	; (800b650 <UART_SetConfig+0x1a78>)
 800b5e0:	e010      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5e2:	4b1c      	ldr	r3, [pc, #112]	; (800b654 <UART_SetConfig+0x1a7c>)
 800b5e4:	e00e      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5e6:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <UART_SetConfig+0x1a4c>)
 800b5e8:	e00c      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	; (800b658 <UART_SetConfig+0x1a80>)
 800b5ec:	e00a      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5ee:	4b1b      	ldr	r3, [pc, #108]	; (800b65c <UART_SetConfig+0x1a84>)
 800b5f0:	e008      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5f2:	4b0e      	ldr	r3, [pc, #56]	; (800b62c <UART_SetConfig+0x1a54>)
 800b5f4:	e006      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5f6:	4b1a      	ldr	r3, [pc, #104]	; (800b660 <UART_SetConfig+0x1a88>)
 800b5f8:	e004      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	; (800b630 <UART_SetConfig+0x1a58>)
 800b5fc:	e002      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b5fe:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <UART_SetConfig+0x1a5c>)
 800b600:	e000      	b.n	800b604 <UART_SetConfig+0x1a2c>
 800b602:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <UART_SetConfig+0x1a60>)
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6852      	ldr	r2, [r2, #4]
 800b608:	0852      	lsrs	r2, r2, #1
 800b60a:	441a      	add	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	fbb2 f3f3 	udiv	r3, r2, r3
 800b614:	b29b      	uxth	r3, r3
 800b616:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b618:	e089      	b.n	800b72e <UART_SetConfig+0x1b56>
 800b61a:	bf00      	nop
 800b61c:	58024400 	.word	0x58024400
 800b620:	03d09000 	.word	0x03d09000
 800b624:	0007a120 	.word	0x0007a120
 800b628:	07a12000 	.word	0x07a12000
 800b62c:	000f4240 	.word	0x000f4240
 800b630:	001e8480 	.word	0x001e8480
 800b634:	003d0900 	.word	0x003d0900
 800b638:	007a1200 	.word	0x007a1200
 800b63c:	00a2c2aa 	.word	0x00a2c2aa
 800b640:	00c35000 	.word	0x00c35000
 800b644:	00f42400 	.word	0x00f42400
 800b648:	01458554 	.word	0x01458554
 800b64c:	01e84800 	.word	0x01e84800
 800b650:	0001e848 	.word	0x0001e848
 800b654:	0003d090 	.word	0x0003d090
 800b658:	000a2c2a 	.word	0x000a2c2a
 800b65c:	000c3500 	.word	0x000c3500
 800b660:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d04f      	beq.n	800b70c <UART_SetConfig+0x1b34>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2b01      	cmp	r3, #1
 800b672:	d048      	beq.n	800b706 <UART_SetConfig+0x1b2e>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d041      	beq.n	800b700 <UART_SetConfig+0x1b28>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b03      	cmp	r3, #3
 800b682:	d03a      	beq.n	800b6fa <UART_SetConfig+0x1b22>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	2b04      	cmp	r3, #4
 800b68a:	d033      	beq.n	800b6f4 <UART_SetConfig+0x1b1c>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b05      	cmp	r3, #5
 800b692:	d02c      	beq.n	800b6ee <UART_SetConfig+0x1b16>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	2b06      	cmp	r3, #6
 800b69a:	d025      	beq.n	800b6e8 <UART_SetConfig+0x1b10>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b07      	cmp	r3, #7
 800b6a2:	d01e      	beq.n	800b6e2 <UART_SetConfig+0x1b0a>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	2b08      	cmp	r3, #8
 800b6aa:	d017      	beq.n	800b6dc <UART_SetConfig+0x1b04>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	d010      	beq.n	800b6d6 <UART_SetConfig+0x1afe>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b0a      	cmp	r3, #10
 800b6ba:	d009      	beq.n	800b6d0 <UART_SetConfig+0x1af8>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b0b      	cmp	r3, #11
 800b6c2:	d102      	bne.n	800b6ca <UART_SetConfig+0x1af2>
 800b6c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6c8:	e022      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b6ce:	e01f      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6d4:	e01c      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6da:	e019      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6e0:	e016      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6e6:	e013      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6e8:	f241 5354 	movw	r3, #5460	; 0x1554
 800b6ec:	e010      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6ee:	f641 1398 	movw	r3, #6552	; 0x1998
 800b6f2:	e00d      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6f8:	e00a      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b6fa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b6fe:	e007      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b704:	e004      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b70a:	e001      	b.n	800b710 <UART_SetConfig+0x1b38>
 800b70c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	6852      	ldr	r2, [r2, #4]
 800b714:	0852      	lsrs	r2, r2, #1
 800b716:	441a      	add	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b720:	b29b      	uxth	r3, r3
 800b722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b724:	e003      	b.n	800b72e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b72c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b730:	2b0f      	cmp	r3, #15
 800b732:	d916      	bls.n	800b762 <UART_SetConfig+0x1b8a>
 800b734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b73a:	d212      	bcs.n	800b762 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73e:	b29b      	uxth	r3, r3
 800b740:	f023 030f 	bic.w	r3, r3, #15
 800b744:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	085b      	lsrs	r3, r3, #1
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	f003 0307 	and.w	r3, r3, #7
 800b750:	b29a      	uxth	r2, r3
 800b752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b754:	4313      	orrs	r3, r2
 800b756:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b75e:	60da      	str	r2, [r3, #12]
 800b760:	e3a3      	b.n	800beaa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b768:	e39f      	b.n	800beaa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b76a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b76e:	2b40      	cmp	r3, #64	; 0x40
 800b770:	f200 8388 	bhi.w	800be84 <UART_SetConfig+0x22ac>
 800b774:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <UART_SetConfig+0x1ba4>)
 800b776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77a:	bf00      	nop
 800b77c:	0800b881 	.word	0x0800b881
 800b780:	0800b937 	.word	0x0800b937
 800b784:	0800be85 	.word	0x0800be85
 800b788:	0800be85 	.word	0x0800be85
 800b78c:	0800b9ed 	.word	0x0800b9ed
 800b790:	0800be85 	.word	0x0800be85
 800b794:	0800be85 	.word	0x0800be85
 800b798:	0800be85 	.word	0x0800be85
 800b79c:	0800baa7 	.word	0x0800baa7
 800b7a0:	0800be85 	.word	0x0800be85
 800b7a4:	0800be85 	.word	0x0800be85
 800b7a8:	0800be85 	.word	0x0800be85
 800b7ac:	0800be85 	.word	0x0800be85
 800b7b0:	0800be85 	.word	0x0800be85
 800b7b4:	0800be85 	.word	0x0800be85
 800b7b8:	0800be85 	.word	0x0800be85
 800b7bc:	0800bb61 	.word	0x0800bb61
 800b7c0:	0800be85 	.word	0x0800be85
 800b7c4:	0800be85 	.word	0x0800be85
 800b7c8:	0800be85 	.word	0x0800be85
 800b7cc:	0800be85 	.word	0x0800be85
 800b7d0:	0800be85 	.word	0x0800be85
 800b7d4:	0800be85 	.word	0x0800be85
 800b7d8:	0800be85 	.word	0x0800be85
 800b7dc:	0800be85 	.word	0x0800be85
 800b7e0:	0800be85 	.word	0x0800be85
 800b7e4:	0800be85 	.word	0x0800be85
 800b7e8:	0800be85 	.word	0x0800be85
 800b7ec:	0800be85 	.word	0x0800be85
 800b7f0:	0800be85 	.word	0x0800be85
 800b7f4:	0800be85 	.word	0x0800be85
 800b7f8:	0800be85 	.word	0x0800be85
 800b7fc:	0800bcd1 	.word	0x0800bcd1
 800b800:	0800be85 	.word	0x0800be85
 800b804:	0800be85 	.word	0x0800be85
 800b808:	0800be85 	.word	0x0800be85
 800b80c:	0800be85 	.word	0x0800be85
 800b810:	0800be85 	.word	0x0800be85
 800b814:	0800be85 	.word	0x0800be85
 800b818:	0800be85 	.word	0x0800be85
 800b81c:	0800be85 	.word	0x0800be85
 800b820:	0800be85 	.word	0x0800be85
 800b824:	0800be85 	.word	0x0800be85
 800b828:	0800be85 	.word	0x0800be85
 800b82c:	0800be85 	.word	0x0800be85
 800b830:	0800be85 	.word	0x0800be85
 800b834:	0800be85 	.word	0x0800be85
 800b838:	0800be85 	.word	0x0800be85
 800b83c:	0800be85 	.word	0x0800be85
 800b840:	0800be85 	.word	0x0800be85
 800b844:	0800be85 	.word	0x0800be85
 800b848:	0800be85 	.word	0x0800be85
 800b84c:	0800be85 	.word	0x0800be85
 800b850:	0800be85 	.word	0x0800be85
 800b854:	0800be85 	.word	0x0800be85
 800b858:	0800be85 	.word	0x0800be85
 800b85c:	0800be85 	.word	0x0800be85
 800b860:	0800be85 	.word	0x0800be85
 800b864:	0800be85 	.word	0x0800be85
 800b868:	0800be85 	.word	0x0800be85
 800b86c:	0800be85 	.word	0x0800be85
 800b870:	0800be85 	.word	0x0800be85
 800b874:	0800be85 	.word	0x0800be85
 800b878:	0800be85 	.word	0x0800be85
 800b87c:	0800bdc5 	.word	0x0800bdc5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b880:	f7fb fa1e 	bl	8006cc0 <HAL_RCC_GetPCLK1Freq>
 800b884:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d044      	beq.n	800b918 <UART_SetConfig+0x1d40>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	2b01      	cmp	r3, #1
 800b894:	d03e      	beq.n	800b914 <UART_SetConfig+0x1d3c>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d038      	beq.n	800b910 <UART_SetConfig+0x1d38>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	2b03      	cmp	r3, #3
 800b8a4:	d032      	beq.n	800b90c <UART_SetConfig+0x1d34>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	d02c      	beq.n	800b908 <UART_SetConfig+0x1d30>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	2b05      	cmp	r3, #5
 800b8b4:	d026      	beq.n	800b904 <UART_SetConfig+0x1d2c>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b06      	cmp	r3, #6
 800b8bc:	d020      	beq.n	800b900 <UART_SetConfig+0x1d28>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	2b07      	cmp	r3, #7
 800b8c4:	d01a      	beq.n	800b8fc <UART_SetConfig+0x1d24>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b08      	cmp	r3, #8
 800b8cc:	d014      	beq.n	800b8f8 <UART_SetConfig+0x1d20>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b09      	cmp	r3, #9
 800b8d4:	d00e      	beq.n	800b8f4 <UART_SetConfig+0x1d1c>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b0a      	cmp	r3, #10
 800b8dc:	d008      	beq.n	800b8f0 <UART_SetConfig+0x1d18>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	2b0b      	cmp	r3, #11
 800b8e4:	d102      	bne.n	800b8ec <UART_SetConfig+0x1d14>
 800b8e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8ea:	e016      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e014      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b8f0:	2380      	movs	r3, #128	; 0x80
 800b8f2:	e012      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b8f4:	2340      	movs	r3, #64	; 0x40
 800b8f6:	e010      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b8f8:	2320      	movs	r3, #32
 800b8fa:	e00e      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b8fc:	2310      	movs	r3, #16
 800b8fe:	e00c      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b900:	230c      	movs	r3, #12
 800b902:	e00a      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b904:	230a      	movs	r3, #10
 800b906:	e008      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b908:	2308      	movs	r3, #8
 800b90a:	e006      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b90c:	2306      	movs	r3, #6
 800b90e:	e004      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b910:	2304      	movs	r3, #4
 800b912:	e002      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b914:	2302      	movs	r3, #2
 800b916:	e000      	b.n	800b91a <UART_SetConfig+0x1d42>
 800b918:	2301      	movs	r3, #1
 800b91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b91c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	441a      	add	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b930:	b29b      	uxth	r3, r3
 800b932:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b934:	e2aa      	b.n	800be8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b936:	f7fb f9d9 	bl	8006cec <HAL_RCC_GetPCLK2Freq>
 800b93a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b940:	2b00      	cmp	r3, #0
 800b942:	d044      	beq.n	800b9ce <UART_SetConfig+0x1df6>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d03e      	beq.n	800b9ca <UART_SetConfig+0x1df2>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	2b02      	cmp	r3, #2
 800b952:	d038      	beq.n	800b9c6 <UART_SetConfig+0x1dee>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d032      	beq.n	800b9c2 <UART_SetConfig+0x1dea>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	2b04      	cmp	r3, #4
 800b962:	d02c      	beq.n	800b9be <UART_SetConfig+0x1de6>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b968:	2b05      	cmp	r3, #5
 800b96a:	d026      	beq.n	800b9ba <UART_SetConfig+0x1de2>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	2b06      	cmp	r3, #6
 800b972:	d020      	beq.n	800b9b6 <UART_SetConfig+0x1dde>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	2b07      	cmp	r3, #7
 800b97a:	d01a      	beq.n	800b9b2 <UART_SetConfig+0x1dda>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	2b08      	cmp	r3, #8
 800b982:	d014      	beq.n	800b9ae <UART_SetConfig+0x1dd6>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	2b09      	cmp	r3, #9
 800b98a:	d00e      	beq.n	800b9aa <UART_SetConfig+0x1dd2>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	2b0a      	cmp	r3, #10
 800b992:	d008      	beq.n	800b9a6 <UART_SetConfig+0x1dce>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b998:	2b0b      	cmp	r3, #11
 800b99a:	d102      	bne.n	800b9a2 <UART_SetConfig+0x1dca>
 800b99c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9a0:	e016      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e014      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9a6:	2380      	movs	r3, #128	; 0x80
 800b9a8:	e012      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9aa:	2340      	movs	r3, #64	; 0x40
 800b9ac:	e010      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9ae:	2320      	movs	r3, #32
 800b9b0:	e00e      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9b2:	2310      	movs	r3, #16
 800b9b4:	e00c      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9b6:	230c      	movs	r3, #12
 800b9b8:	e00a      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9ba:	230a      	movs	r3, #10
 800b9bc:	e008      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9be:	2308      	movs	r3, #8
 800b9c0:	e006      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9c2:	2306      	movs	r3, #6
 800b9c4:	e004      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9c6:	2304      	movs	r3, #4
 800b9c8:	e002      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	e000      	b.n	800b9d0 <UART_SetConfig+0x1df8>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9d2:	fbb2 f2f3 	udiv	r2, r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	085b      	lsrs	r3, r3, #1
 800b9dc:	441a      	add	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9ea:	e24f      	b.n	800be8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9ec:	f107 0318 	add.w	r3, r7, #24
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fc fafd 	bl	8007ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d044      	beq.n	800ba8a <UART_SetConfig+0x1eb2>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d03e      	beq.n	800ba86 <UART_SetConfig+0x1eae>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d038      	beq.n	800ba82 <UART_SetConfig+0x1eaa>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba14:	2b03      	cmp	r3, #3
 800ba16:	d032      	beq.n	800ba7e <UART_SetConfig+0x1ea6>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	d02c      	beq.n	800ba7a <UART_SetConfig+0x1ea2>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	2b05      	cmp	r3, #5
 800ba26:	d026      	beq.n	800ba76 <UART_SetConfig+0x1e9e>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	2b06      	cmp	r3, #6
 800ba2e:	d020      	beq.n	800ba72 <UART_SetConfig+0x1e9a>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	2b07      	cmp	r3, #7
 800ba36:	d01a      	beq.n	800ba6e <UART_SetConfig+0x1e96>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	2b08      	cmp	r3, #8
 800ba3e:	d014      	beq.n	800ba6a <UART_SetConfig+0x1e92>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba44:	2b09      	cmp	r3, #9
 800ba46:	d00e      	beq.n	800ba66 <UART_SetConfig+0x1e8e>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4c:	2b0a      	cmp	r3, #10
 800ba4e:	d008      	beq.n	800ba62 <UART_SetConfig+0x1e8a>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba54:	2b0b      	cmp	r3, #11
 800ba56:	d102      	bne.n	800ba5e <UART_SetConfig+0x1e86>
 800ba58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba5c:	e016      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e014      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba62:	2380      	movs	r3, #128	; 0x80
 800ba64:	e012      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba66:	2340      	movs	r3, #64	; 0x40
 800ba68:	e010      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba6a:	2320      	movs	r3, #32
 800ba6c:	e00e      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba6e:	2310      	movs	r3, #16
 800ba70:	e00c      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba72:	230c      	movs	r3, #12
 800ba74:	e00a      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba76:	230a      	movs	r3, #10
 800ba78:	e008      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba7a:	2308      	movs	r3, #8
 800ba7c:	e006      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba7e:	2306      	movs	r3, #6
 800ba80:	e004      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba82:	2304      	movs	r3, #4
 800ba84:	e002      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e000      	b.n	800ba8c <UART_SetConfig+0x1eb4>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	085b      	lsrs	r3, r3, #1
 800ba96:	441a      	add	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baa4:	e1f2      	b.n	800be8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baa6:	f107 030c 	add.w	r3, r7, #12
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fc fbec 	bl	8008288 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d044      	beq.n	800bb44 <UART_SetConfig+0x1f6c>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d03e      	beq.n	800bb40 <UART_SetConfig+0x1f68>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d038      	beq.n	800bb3c <UART_SetConfig+0x1f64>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d032      	beq.n	800bb38 <UART_SetConfig+0x1f60>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad6:	2b04      	cmp	r3, #4
 800bad8:	d02c      	beq.n	800bb34 <UART_SetConfig+0x1f5c>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bade:	2b05      	cmp	r3, #5
 800bae0:	d026      	beq.n	800bb30 <UART_SetConfig+0x1f58>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae6:	2b06      	cmp	r3, #6
 800bae8:	d020      	beq.n	800bb2c <UART_SetConfig+0x1f54>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	2b07      	cmp	r3, #7
 800baf0:	d01a      	beq.n	800bb28 <UART_SetConfig+0x1f50>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	2b08      	cmp	r3, #8
 800baf8:	d014      	beq.n	800bb24 <UART_SetConfig+0x1f4c>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	2b09      	cmp	r3, #9
 800bb00:	d00e      	beq.n	800bb20 <UART_SetConfig+0x1f48>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	2b0a      	cmp	r3, #10
 800bb08:	d008      	beq.n	800bb1c <UART_SetConfig+0x1f44>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0e:	2b0b      	cmp	r3, #11
 800bb10:	d102      	bne.n	800bb18 <UART_SetConfig+0x1f40>
 800bb12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb16:	e016      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e014      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb1c:	2380      	movs	r3, #128	; 0x80
 800bb1e:	e012      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb20:	2340      	movs	r3, #64	; 0x40
 800bb22:	e010      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb24:	2320      	movs	r3, #32
 800bb26:	e00e      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb28:	2310      	movs	r3, #16
 800bb2a:	e00c      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb2c:	230c      	movs	r3, #12
 800bb2e:	e00a      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb30:	230a      	movs	r3, #10
 800bb32:	e008      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb34:	2308      	movs	r3, #8
 800bb36:	e006      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb38:	2306      	movs	r3, #6
 800bb3a:	e004      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb3c:	2304      	movs	r3, #4
 800bb3e:	e002      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb40:	2302      	movs	r3, #2
 800bb42:	e000      	b.n	800bb46 <UART_SetConfig+0x1f6e>
 800bb44:	2301      	movs	r3, #1
 800bb46:	fbb2 f2f3 	udiv	r2, r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	085b      	lsrs	r3, r3, #1
 800bb50:	441a      	add	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb5e:	e195      	b.n	800be8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb60:	4b87      	ldr	r3, [pc, #540]	; (800bd80 <UART_SetConfig+0x21a8>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 0320 	and.w	r3, r3, #32
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d05d      	beq.n	800bc28 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb6c:	4b84      	ldr	r3, [pc, #528]	; (800bd80 <UART_SetConfig+0x21a8>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	08db      	lsrs	r3, r3, #3
 800bb72:	f003 0303 	and.w	r3, r3, #3
 800bb76:	4a83      	ldr	r2, [pc, #524]	; (800bd84 <UART_SetConfig+0x21ac>)
 800bb78:	40da      	lsrs	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d044      	beq.n	800bc0c <UART_SetConfig+0x2034>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d03e      	beq.n	800bc08 <UART_SetConfig+0x2030>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d038      	beq.n	800bc04 <UART_SetConfig+0x202c>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d032      	beq.n	800bc00 <UART_SetConfig+0x2028>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	2b04      	cmp	r3, #4
 800bba0:	d02c      	beq.n	800bbfc <UART_SetConfig+0x2024>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	2b05      	cmp	r3, #5
 800bba8:	d026      	beq.n	800bbf8 <UART_SetConfig+0x2020>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbae:	2b06      	cmp	r3, #6
 800bbb0:	d020      	beq.n	800bbf4 <UART_SetConfig+0x201c>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	2b07      	cmp	r3, #7
 800bbb8:	d01a      	beq.n	800bbf0 <UART_SetConfig+0x2018>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	2b08      	cmp	r3, #8
 800bbc0:	d014      	beq.n	800bbec <UART_SetConfig+0x2014>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	2b09      	cmp	r3, #9
 800bbc8:	d00e      	beq.n	800bbe8 <UART_SetConfig+0x2010>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	2b0a      	cmp	r3, #10
 800bbd0:	d008      	beq.n	800bbe4 <UART_SetConfig+0x200c>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	2b0b      	cmp	r3, #11
 800bbd8:	d102      	bne.n	800bbe0 <UART_SetConfig+0x2008>
 800bbda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbde:	e016      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e014      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bbe4:	2380      	movs	r3, #128	; 0x80
 800bbe6:	e012      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bbe8:	2340      	movs	r3, #64	; 0x40
 800bbea:	e010      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bbec:	2320      	movs	r3, #32
 800bbee:	e00e      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bbf0:	2310      	movs	r3, #16
 800bbf2:	e00c      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bbf4:	230c      	movs	r3, #12
 800bbf6:	e00a      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bbf8:	230a      	movs	r3, #10
 800bbfa:	e008      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	e006      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bc00:	2306      	movs	r3, #6
 800bc02:	e004      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bc04:	2304      	movs	r3, #4
 800bc06:	e002      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e000      	b.n	800bc0e <UART_SetConfig+0x2036>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	085b      	lsrs	r3, r3, #1
 800bc18:	441a      	add	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bc26:	e131      	b.n	800be8c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d043      	beq.n	800bcb8 <UART_SetConfig+0x20e0>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d03d      	beq.n	800bcb4 <UART_SetConfig+0x20dc>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d037      	beq.n	800bcb0 <UART_SetConfig+0x20d8>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d031      	beq.n	800bcac <UART_SetConfig+0x20d4>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	d02b      	beq.n	800bca8 <UART_SetConfig+0x20d0>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	2b05      	cmp	r3, #5
 800bc56:	d025      	beq.n	800bca4 <UART_SetConfig+0x20cc>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	2b06      	cmp	r3, #6
 800bc5e:	d01f      	beq.n	800bca0 <UART_SetConfig+0x20c8>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	2b07      	cmp	r3, #7
 800bc66:	d019      	beq.n	800bc9c <UART_SetConfig+0x20c4>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	2b08      	cmp	r3, #8
 800bc6e:	d013      	beq.n	800bc98 <UART_SetConfig+0x20c0>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	d00d      	beq.n	800bc94 <UART_SetConfig+0x20bc>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b0a      	cmp	r3, #10
 800bc7e:	d007      	beq.n	800bc90 <UART_SetConfig+0x20b8>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	2b0b      	cmp	r3, #11
 800bc86:	d101      	bne.n	800bc8c <UART_SetConfig+0x20b4>
 800bc88:	4b3f      	ldr	r3, [pc, #252]	; (800bd88 <UART_SetConfig+0x21b0>)
 800bc8a:	e016      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bc8c:	4b3d      	ldr	r3, [pc, #244]	; (800bd84 <UART_SetConfig+0x21ac>)
 800bc8e:	e014      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bc90:	4b3e      	ldr	r3, [pc, #248]	; (800bd8c <UART_SetConfig+0x21b4>)
 800bc92:	e012      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bc94:	4b3e      	ldr	r3, [pc, #248]	; (800bd90 <UART_SetConfig+0x21b8>)
 800bc96:	e010      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bc98:	4b3e      	ldr	r3, [pc, #248]	; (800bd94 <UART_SetConfig+0x21bc>)
 800bc9a:	e00e      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bc9c:	4b3e      	ldr	r3, [pc, #248]	; (800bd98 <UART_SetConfig+0x21c0>)
 800bc9e:	e00c      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bca0:	4b3e      	ldr	r3, [pc, #248]	; (800bd9c <UART_SetConfig+0x21c4>)
 800bca2:	e00a      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bca4:	4b3e      	ldr	r3, [pc, #248]	; (800bda0 <UART_SetConfig+0x21c8>)
 800bca6:	e008      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bca8:	4b3e      	ldr	r3, [pc, #248]	; (800bda4 <UART_SetConfig+0x21cc>)
 800bcaa:	e006      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bcac:	4b3e      	ldr	r3, [pc, #248]	; (800bda8 <UART_SetConfig+0x21d0>)
 800bcae:	e004      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bcb0:	4b3e      	ldr	r3, [pc, #248]	; (800bdac <UART_SetConfig+0x21d4>)
 800bcb2:	e002      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bcb4:	4b3e      	ldr	r3, [pc, #248]	; (800bdb0 <UART_SetConfig+0x21d8>)
 800bcb6:	e000      	b.n	800bcba <UART_SetConfig+0x20e2>
 800bcb8:	4b32      	ldr	r3, [pc, #200]	; (800bd84 <UART_SetConfig+0x21ac>)
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	6852      	ldr	r2, [r2, #4]
 800bcbe:	0852      	lsrs	r2, r2, #1
 800bcc0:	441a      	add	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcce:	e0dd      	b.n	800be8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d046      	beq.n	800bd66 <UART_SetConfig+0x218e>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d040      	beq.n	800bd62 <UART_SetConfig+0x218a>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d03a      	beq.n	800bd5e <UART_SetConfig+0x2186>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	2b03      	cmp	r3, #3
 800bcee:	d034      	beq.n	800bd5a <UART_SetConfig+0x2182>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	2b04      	cmp	r3, #4
 800bcf6:	d02e      	beq.n	800bd56 <UART_SetConfig+0x217e>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	2b05      	cmp	r3, #5
 800bcfe:	d028      	beq.n	800bd52 <UART_SetConfig+0x217a>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	2b06      	cmp	r3, #6
 800bd06:	d022      	beq.n	800bd4e <UART_SetConfig+0x2176>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	2b07      	cmp	r3, #7
 800bd0e:	d01c      	beq.n	800bd4a <UART_SetConfig+0x2172>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	2b08      	cmp	r3, #8
 800bd16:	d016      	beq.n	800bd46 <UART_SetConfig+0x216e>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	2b09      	cmp	r3, #9
 800bd1e:	d00f      	beq.n	800bd40 <UART_SetConfig+0x2168>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	2b0a      	cmp	r3, #10
 800bd26:	d008      	beq.n	800bd3a <UART_SetConfig+0x2162>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	2b0b      	cmp	r3, #11
 800bd2e:	d102      	bne.n	800bd36 <UART_SetConfig+0x215e>
 800bd30:	f643 5309 	movw	r3, #15625	; 0x3d09
 800bd34:	e018      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd36:	4b18      	ldr	r3, [pc, #96]	; (800bd98 <UART_SetConfig+0x21c0>)
 800bd38:	e016      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd3a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800bd3e:	e013      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd40:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bd44:	e010      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd46:	4b1b      	ldr	r3, [pc, #108]	; (800bdb4 <UART_SetConfig+0x21dc>)
 800bd48:	e00e      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd4a:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <UART_SetConfig+0x21b0>)
 800bd4c:	e00c      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd4e:	4b1a      	ldr	r3, [pc, #104]	; (800bdb8 <UART_SetConfig+0x21e0>)
 800bd50:	e00a      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd52:	4b1a      	ldr	r3, [pc, #104]	; (800bdbc <UART_SetConfig+0x21e4>)
 800bd54:	e008      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd56:	4b0d      	ldr	r3, [pc, #52]	; (800bd8c <UART_SetConfig+0x21b4>)
 800bd58:	e006      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd5a:	4b19      	ldr	r3, [pc, #100]	; (800bdc0 <UART_SetConfig+0x21e8>)
 800bd5c:	e004      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd5e:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <UART_SetConfig+0x21b8>)
 800bd60:	e002      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd62:	4b0c      	ldr	r3, [pc, #48]	; (800bd94 <UART_SetConfig+0x21bc>)
 800bd64:	e000      	b.n	800bd68 <UART_SetConfig+0x2190>
 800bd66:	4b0c      	ldr	r3, [pc, #48]	; (800bd98 <UART_SetConfig+0x21c0>)
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	6852      	ldr	r2, [r2, #4]
 800bd6c:	0852      	lsrs	r2, r2, #1
 800bd6e:	441a      	add	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd7c:	e086      	b.n	800be8c <UART_SetConfig+0x22b4>
 800bd7e:	bf00      	nop
 800bd80:	58024400 	.word	0x58024400
 800bd84:	03d09000 	.word	0x03d09000
 800bd88:	0003d090 	.word	0x0003d090
 800bd8c:	0007a120 	.word	0x0007a120
 800bd90:	000f4240 	.word	0x000f4240
 800bd94:	001e8480 	.word	0x001e8480
 800bd98:	003d0900 	.word	0x003d0900
 800bd9c:	00516155 	.word	0x00516155
 800bda0:	0061a800 	.word	0x0061a800
 800bda4:	007a1200 	.word	0x007a1200
 800bda8:	00a2c2aa 	.word	0x00a2c2aa
 800bdac:	00f42400 	.word	0x00f42400
 800bdb0:	01e84800 	.word	0x01e84800
 800bdb4:	0001e848 	.word	0x0001e848
 800bdb8:	00051615 	.word	0x00051615
 800bdbc:	00061a80 	.word	0x00061a80
 800bdc0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d04e      	beq.n	800be6a <UART_SetConfig+0x2292>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d047      	beq.n	800be64 <UART_SetConfig+0x228c>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	d040      	beq.n	800be5e <UART_SetConfig+0x2286>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d039      	beq.n	800be58 <UART_SetConfig+0x2280>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde8:	2b04      	cmp	r3, #4
 800bdea:	d032      	beq.n	800be52 <UART_SetConfig+0x227a>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	2b05      	cmp	r3, #5
 800bdf2:	d02b      	beq.n	800be4c <UART_SetConfig+0x2274>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	2b06      	cmp	r3, #6
 800bdfa:	d024      	beq.n	800be46 <UART_SetConfig+0x226e>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	2b07      	cmp	r3, #7
 800be02:	d01d      	beq.n	800be40 <UART_SetConfig+0x2268>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	2b08      	cmp	r3, #8
 800be0a:	d016      	beq.n	800be3a <UART_SetConfig+0x2262>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	2b09      	cmp	r3, #9
 800be12:	d00f      	beq.n	800be34 <UART_SetConfig+0x225c>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	2b0a      	cmp	r3, #10
 800be1a:	d008      	beq.n	800be2e <UART_SetConfig+0x2256>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	2b0b      	cmp	r3, #11
 800be22:	d101      	bne.n	800be28 <UART_SetConfig+0x2250>
 800be24:	2380      	movs	r3, #128	; 0x80
 800be26:	e022      	b.n	800be6e <UART_SetConfig+0x2296>
 800be28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be2c:	e01f      	b.n	800be6e <UART_SetConfig+0x2296>
 800be2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be32:	e01c      	b.n	800be6e <UART_SetConfig+0x2296>
 800be34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be38:	e019      	b.n	800be6e <UART_SetConfig+0x2296>
 800be3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be3e:	e016      	b.n	800be6e <UART_SetConfig+0x2296>
 800be40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be44:	e013      	b.n	800be6e <UART_SetConfig+0x2296>
 800be46:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800be4a:	e010      	b.n	800be6e <UART_SetConfig+0x2296>
 800be4c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800be50:	e00d      	b.n	800be6e <UART_SetConfig+0x2296>
 800be52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be56:	e00a      	b.n	800be6e <UART_SetConfig+0x2296>
 800be58:	f241 5355 	movw	r3, #5461	; 0x1555
 800be5c:	e007      	b.n	800be6e <UART_SetConfig+0x2296>
 800be5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be62:	e004      	b.n	800be6e <UART_SetConfig+0x2296>
 800be64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be68:	e001      	b.n	800be6e <UART_SetConfig+0x2296>
 800be6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	6852      	ldr	r2, [r2, #4]
 800be72:	0852      	lsrs	r2, r2, #1
 800be74:	441a      	add	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be7e:	b29b      	uxth	r3, r3
 800be80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be82:	e003      	b.n	800be8c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800be8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8e:	2b0f      	cmp	r3, #15
 800be90:	d908      	bls.n	800bea4 <UART_SetConfig+0x22cc>
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be98:	d204      	bcs.n	800bea4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea0:	60da      	str	r2, [r3, #12]
 800bea2:	e002      	b.n	800beaa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bec6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800beca:	4618      	mov	r0, r3
 800becc:	3740      	adds	r7, #64	; 0x40
 800bece:	46bd      	mov	sp, r7
 800bed0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee0:	f003 0301 	and.w	r3, r3, #1
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00a      	beq.n	800befe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	f003 0302 	and.w	r3, r3, #2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	f003 0308 	and.w	r3, r3, #8
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf68:	f003 0310 	and.w	r3, r3, #16
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00a      	beq.n	800bf86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8a:	f003 0320 	and.w	r3, r3, #32
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d01a      	beq.n	800bfea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	430a      	orrs	r2, r1
 800bfc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfd2:	d10a      	bne.n	800bfea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00a      	beq.n	800c00c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	430a      	orrs	r2, r1
 800c00a:	605a      	str	r2, [r3, #4]
  }
}
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c028:	f7f6 f854 	bl	80020d4 <HAL_GetTick>
 800c02c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 0308 	and.w	r3, r3, #8
 800c038:	2b08      	cmp	r3, #8
 800c03a:	d10e      	bne.n	800c05a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c03c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f82c 	bl	800c0a8 <UART_WaitOnFlagUntilTimeout>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c056:	2303      	movs	r3, #3
 800c058:	e022      	b.n	800c0a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b04      	cmp	r3, #4
 800c066:	d10e      	bne.n	800c086 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f816 	bl	800c0a8 <UART_WaitOnFlagUntilTimeout>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c082:	2303      	movs	r3, #3
 800c084:	e00c      	b.n	800c0a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2220      	movs	r2, #32
 800c092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0b8:	e062      	b.n	800c180 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c0:	d05e      	beq.n	800c180 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0c2:	f7f6 f807 	bl	80020d4 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	69ba      	ldr	r2, [r7, #24]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d11d      	bne.n	800c114 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c0e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	689a      	ldr	r2, [r3, #8]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f022 0201 	bic.w	r2, r2, #1
 800c0f6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2220      	movs	r2, #32
 800c0fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2220      	movs	r2, #32
 800c104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e045      	b.n	800c1a0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 0304 	and.w	r3, r3, #4
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d02e      	beq.n	800c180 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c12c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c130:	d126      	bne.n	800c180 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c13a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c14a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689a      	ldr	r2, [r3, #8]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f022 0201 	bic.w	r2, r2, #1
 800c15a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2220      	movs	r2, #32
 800c160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2220      	movs	r2, #32
 800c168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2220      	movs	r2, #32
 800c170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e00f      	b.n	800c1a0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	69da      	ldr	r2, [r3, #28]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	4013      	ands	r3, r2
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	bf0c      	ite	eq
 800c190:	2301      	moveq	r3, #1
 800c192:	2300      	movne	r3, #0
 800c194:	b2db      	uxtb	r3, r3
 800c196:	461a      	mov	r2, r3
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d08d      	beq.n	800c0ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c1be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689a      	ldr	r2, [r3, #8]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c1ce:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2220      	movs	r2, #32
 800c1d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c1fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6899      	ldr	r1, [r3, #8]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	4b08      	ldr	r3, [pc, #32]	; (800c228 <UART_EndRxTransfer+0x44>)
 800c208:	400b      	ands	r3, r1
 800c20a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2220      	movs	r2, #32
 800c210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c21a:	bf00      	nop
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	effffffe 	.word	0xeffffffe

0800c22c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c242:	d01f      	beq.n	800c284 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c25a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	689a      	ldr	r2, [r3, #8]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f022 0201 	bic.w	r2, r2, #1
 800c26a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	689a      	ldr	r2, [r3, #8]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c27a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2220      	movs	r2, #32
 800c280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7f4 fa39 	bl	80006fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c28a:	bf00      	nop
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b084      	sub	sp, #16
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f7fd fc83 	bl	8009bac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2a6:	bf00      	nop
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b086      	sub	sp, #24
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d6:	2b80      	cmp	r3, #128	; 0x80
 800c2d8:	d109      	bne.n	800c2ee <UART_DMAError+0x40>
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	2b21      	cmp	r3, #33	; 0x21
 800c2de:	d106      	bne.n	800c2ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c2e8:	6978      	ldr	r0, [r7, #20]
 800c2ea:	f7ff ff5d 	bl	800c1a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f8:	2b40      	cmp	r3, #64	; 0x40
 800c2fa:	d109      	bne.n	800c310 <UART_DMAError+0x62>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b22      	cmp	r3, #34	; 0x22
 800c300:	d106      	bne.n	800c310 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2200      	movs	r2, #0
 800c306:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c30a:	6978      	ldr	r0, [r7, #20]
 800c30c:	f7ff ff6a 	bl	800c1e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c316:	f043 0210 	orr.w	r2, r3, #16
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c320:	6978      	ldr	r0, [r7, #20]
 800c322:	f7fd fc4d 	bl	8009bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c326:	bf00      	nop
 800c328:	3718      	adds	r7, #24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f7fd fc37 	bl	8009bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b083      	sub	sp, #12
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c368:	2b21      	cmp	r3, #33	; 0x21
 800c36a:	d12a      	bne.n	800c3c2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c372:	b29b      	uxth	r3, r3
 800c374:	2b00      	cmp	r3, #0
 800c376:	d110      	bne.n	800c39a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c386:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c396:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c398:	e013      	b.n	800c3c2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c39e:	781a      	ldrb	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3dc:	2b21      	cmp	r3, #33	; 0x21
 800c3de:	d12f      	bne.n	800c440 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d110      	bne.n	800c40e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3fa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c40a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c40c:	e018      	b.n	800c440 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c412:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	881b      	ldrh	r3, [r3, #0]
 800c418:	461a      	mov	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c422:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c428:	1c9a      	adds	r2, r3, #2
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c434:	b29b      	uxth	r3, r3
 800c436:	3b01      	subs	r3, #1
 800c438:	b29a      	uxth	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c440:	bf00      	nop
 800c442:	3714      	adds	r7, #20
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c45a:	2b21      	cmp	r3, #33	; 0x21
 800c45c:	d13d      	bne.n	800c4da <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c464:	81fb      	strh	r3, [r7, #14]
 800c466:	e035      	b.n	800c4d4 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c46e:	b29b      	uxth	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	d111      	bne.n	800c498 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689a      	ldr	r2, [r3, #8]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c482:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c492:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c494:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c496:	e020      	b.n	800c4da <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d013      	beq.n	800c4ce <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4aa:	781a      	ldrb	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4b6:	1c5a      	adds	r2, r3, #1
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c4ce:	89fb      	ldrh	r3, [r7, #14]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	81fb      	strh	r3, [r7, #14]
 800c4d4:	89fb      	ldrh	r3, [r7, #14]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1c6      	bne.n	800c468 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c4da:	bf00      	nop
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b085      	sub	sp, #20
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4f4:	2b21      	cmp	r3, #33	; 0x21
 800c4f6:	d142      	bne.n	800c57e <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4fe:	81fb      	strh	r3, [r7, #14]
 800c500:	e03a      	b.n	800c578 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c508:	b29b      	uxth	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d111      	bne.n	800c532 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c51c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c52c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c52e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c530:	e025      	b.n	800c57e <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	69db      	ldr	r3, [r3, #28]
 800c538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d018      	beq.n	800c572 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c544:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c554:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c55a:	1c9a      	adds	r2, r3, #2
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c566:	b29b      	uxth	r3, r3
 800c568:	3b01      	subs	r3, #1
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c572:	89fb      	ldrh	r3, [r7, #14]
 800c574:	3b01      	subs	r3, #1
 800c576:	81fb      	strh	r3, [r7, #14]
 800c578:	89fb      	ldrh	r3, [r7, #14]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1c1      	bne.n	800c502 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c57e:	bf00      	nop
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7f4 f861 	bl	8000678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5b6:	bf00      	nop
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5cc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5d4:	2b22      	cmp	r3, #34	; 0x22
 800c5d6:	d13b      	bne.n	800c650 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5de:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c5e0:	89bb      	ldrh	r3, [r7, #12]
 800c5e2:	b2d9      	uxtb	r1, r3
 800c5e4:	89fb      	ldrh	r3, [r7, #14]
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ec:	400a      	ands	r2, r1
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5f6:	1c5a      	adds	r2, r3, #1
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c602:	b29b      	uxth	r3, r3
 800c604:	3b01      	subs	r3, #1
 800c606:	b29a      	uxth	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c614:	b29b      	uxth	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d122      	bne.n	800c660 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c628:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0201 	bic.w	r2, r2, #1
 800c638:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2220      	movs	r2, #32
 800c63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7f4 f857 	bl	80006fc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c64e:	e007      	b.n	800c660 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	699a      	ldr	r2, [r3, #24]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f042 0208 	orr.w	r2, r2, #8
 800c65e:	619a      	str	r2, [r3, #24]
}
 800c660:	bf00      	nop
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c676:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c67e:	2b22      	cmp	r3, #34	; 0x22
 800c680:	d13b      	bne.n	800c6fa <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c688:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c68e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c690:	89ba      	ldrh	r2, [r7, #12]
 800c692:	89fb      	ldrh	r3, [r7, #14]
 800c694:	4013      	ands	r3, r2
 800c696:	b29a      	uxth	r2, r3
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6a0:	1c9a      	adds	r2, r3, #2
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d122      	bne.n	800c70a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c6d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	689a      	ldr	r2, [r3, #8]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f022 0201 	bic.w	r2, r2, #1
 800c6e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7f4 f802 	bl	80006fc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6f8:	e007      	b.n	800c70a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	699a      	ldr	r2, [r3, #24]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f042 0208 	orr.w	r2, r2, #8
 800c708:	619a      	str	r2, [r3, #24]
}
 800c70a:	bf00      	nop
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c722:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c72a:	2b22      	cmp	r3, #34	; 0x22
 800c72c:	d166      	bne.n	800c7fc <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c734:	81fb      	strh	r3, [r7, #14]
 800c736:	e03d      	b.n	800c7b4 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c740:	893b      	ldrh	r3, [r7, #8]
 800c742:	b2d9      	uxtb	r1, r3
 800c744:	89bb      	ldrh	r3, [r7, #12]
 800c746:	b2da      	uxtb	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c74c:	400a      	ands	r2, r1
 800c74e:	b2d2      	uxtb	r2, r2
 800c750:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c762:	b29b      	uxth	r3, r3
 800c764:	3b01      	subs	r3, #1
 800c766:	b29a      	uxth	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c774:	b29b      	uxth	r3, r3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d119      	bne.n	800c7ae <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c788:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6899      	ldr	r1, [r3, #8]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	4b1f      	ldr	r3, [pc, #124]	; (800c814 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c796:	400b      	ands	r3, r1
 800c798:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2220      	movs	r2, #32
 800c79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7f3 ffa7 	bl	80006fc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c7ae:	89fb      	ldrh	r3, [r7, #14]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	81fb      	strh	r3, [r7, #14]
 800c7b4:	89fb      	ldrh	r3, [r7, #14]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1be      	bne.n	800c738 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7c0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7c2:	897b      	ldrh	r3, [r7, #10]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d021      	beq.n	800c80c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7ce:	897a      	ldrh	r2, [r7, #10]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d21b      	bcs.n	800c80c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	689a      	ldr	r2, [r3, #8]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c7e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4a0c      	ldr	r2, [pc, #48]	; (800c818 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c7e8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f042 0220 	orr.w	r2, r2, #32
 800c7f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c7fa:	e007      	b.n	800c80c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	699a      	ldr	r2, [r3, #24]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f042 0208 	orr.w	r2, r2, #8
 800c80a:	619a      	str	r2, [r3, #24]
}
 800c80c:	bf00      	nop
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	effffffe 	.word	0xeffffffe
 800c818:	0800c5bf 	.word	0x0800c5bf

0800c81c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c82a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c832:	2b22      	cmp	r3, #34	; 0x22
 800c834:	d166      	bne.n	800c904 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c83c:	82fb      	strh	r3, [r7, #22]
 800c83e:	e03d      	b.n	800c8bc <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c846:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c84c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c84e:	8a3a      	ldrh	r2, [r7, #16]
 800c850:	8abb      	ldrh	r3, [r7, #20]
 800c852:	4013      	ands	r3, r2
 800c854:	b29a      	uxth	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c85e:	1c9a      	adds	r2, r3, #2
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	3b01      	subs	r3, #1
 800c86e:	b29a      	uxth	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d119      	bne.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c890:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6899      	ldr	r1, [r3, #8]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	4b1f      	ldr	r3, [pc, #124]	; (800c91c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c89e:	400b      	ands	r3, r1
 800c8a0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7f3 ff23 	bl	80006fc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c8b6:	8afb      	ldrh	r3, [r7, #22]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	82fb      	strh	r3, [r7, #22]
 800c8bc:	8afb      	ldrh	r3, [r7, #22]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1be      	bne.n	800c840 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8c8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c8ca:	8a7b      	ldrh	r3, [r7, #18]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d021      	beq.n	800c914 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8d6:	8a7a      	ldrh	r2, [r7, #18]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d21b      	bcs.n	800c914 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	689a      	ldr	r2, [r3, #8]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c8ea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a0c      	ldr	r2, [pc, #48]	; (800c920 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c8f0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f042 0220 	orr.w	r2, r2, #32
 800c900:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c902:	e007      	b.n	800c914 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	699a      	ldr	r2, [r3, #24]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f042 0208 	orr.w	r2, r2, #8
 800c912:	619a      	str	r2, [r3, #24]
}
 800c914:	bf00      	nop
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	effffffe 	.word	0xeffffffe
 800c920:	0800c669 	.word	0x0800c669

0800c924 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d101      	bne.n	800c976 <HAL_UARTEx_DisableFifoMode+0x16>
 800c972:	2302      	movs	r3, #2
 800c974:	e027      	b.n	800c9c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2224      	movs	r2, #36	; 0x24
 800c982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f022 0201 	bic.w	r2, r2, #1
 800c99c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c9a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2220      	movs	r2, #32
 800c9b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d101      	bne.n	800c9ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	e02d      	b.n	800ca46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2224      	movs	r2, #36	; 0x24
 800c9f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f022 0201 	bic.w	r2, r2, #1
 800ca10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	430a      	orrs	r2, r1
 800ca24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f850 	bl	800cacc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2220      	movs	r2, #32
 800ca38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d101      	bne.n	800ca66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca62:	2302      	movs	r3, #2
 800ca64:	e02d      	b.n	800cac2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2224      	movs	r2, #36	; 0x24
 800ca72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f022 0201 	bic.w	r2, r2, #1
 800ca8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f812 	bl	800cacc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2220      	movs	r2, #32
 800cab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cacc:	b480      	push	{r7}
 800cace:	b089      	sub	sp, #36	; 0x24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cad4:	4a2f      	ldr	r2, [pc, #188]	; (800cb94 <UARTEx_SetNbDataToProcess+0xc8>)
 800cad6:	f107 0314 	add.w	r3, r7, #20
 800cada:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cade:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800cae2:	4a2d      	ldr	r2, [pc, #180]	; (800cb98 <UARTEx_SetNbDataToProcess+0xcc>)
 800cae4:	f107 030c 	add.w	r3, r7, #12
 800cae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d108      	bne.n	800cb0a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb08:	e03d      	b.n	800cb86 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb0a:	2308      	movs	r3, #8
 800cb0c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb0e:	2308      	movs	r3, #8
 800cb10:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	0e5b      	lsrs	r3, r3, #25
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	f003 0307 	and.w	r3, r3, #7
 800cb20:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	0f5b      	lsrs	r3, r3, #29
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	f003 0307 	and.w	r3, r3, #7
 800cb30:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cb32:	7fbb      	ldrb	r3, [r7, #30]
 800cb34:	7f3a      	ldrb	r2, [r7, #28]
 800cb36:	f107 0120 	add.w	r1, r7, #32
 800cb3a:	440a      	add	r2, r1
 800cb3c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cb40:	fb02 f303 	mul.w	r3, r2, r3
 800cb44:	7f3a      	ldrb	r2, [r7, #28]
 800cb46:	f107 0120 	add.w	r1, r7, #32
 800cb4a:	440a      	add	r2, r1
 800cb4c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cb50:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cb5c:	7ffb      	ldrb	r3, [r7, #31]
 800cb5e:	7f7a      	ldrb	r2, [r7, #29]
 800cb60:	f107 0120 	add.w	r1, r7, #32
 800cb64:	440a      	add	r2, r1
 800cb66:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cb6a:	fb02 f303 	mul.w	r3, r2, r3
 800cb6e:	7f7a      	ldrb	r2, [r7, #29]
 800cb70:	f107 0120 	add.w	r1, r7, #32
 800cb74:	440a      	add	r2, r1
 800cb76:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cb7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cb86:	bf00      	nop
 800cb88:	3724      	adds	r7, #36	; 0x24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	0800cc0c 	.word	0x0800cc0c
 800cb98:	0800cc14 	.word	0x0800cc14

0800cb9c <__libc_init_array>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	4e0d      	ldr	r6, [pc, #52]	; (800cbd4 <__libc_init_array+0x38>)
 800cba0:	4c0d      	ldr	r4, [pc, #52]	; (800cbd8 <__libc_init_array+0x3c>)
 800cba2:	1ba4      	subs	r4, r4, r6
 800cba4:	10a4      	asrs	r4, r4, #2
 800cba6:	2500      	movs	r5, #0
 800cba8:	42a5      	cmp	r5, r4
 800cbaa:	d109      	bne.n	800cbc0 <__libc_init_array+0x24>
 800cbac:	4e0b      	ldr	r6, [pc, #44]	; (800cbdc <__libc_init_array+0x40>)
 800cbae:	4c0c      	ldr	r4, [pc, #48]	; (800cbe0 <__libc_init_array+0x44>)
 800cbb0:	f000 f820 	bl	800cbf4 <_init>
 800cbb4:	1ba4      	subs	r4, r4, r6
 800cbb6:	10a4      	asrs	r4, r4, #2
 800cbb8:	2500      	movs	r5, #0
 800cbba:	42a5      	cmp	r5, r4
 800cbbc:	d105      	bne.n	800cbca <__libc_init_array+0x2e>
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbc4:	4798      	blx	r3
 800cbc6:	3501      	adds	r5, #1
 800cbc8:	e7ee      	b.n	800cba8 <__libc_init_array+0xc>
 800cbca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbce:	4798      	blx	r3
 800cbd0:	3501      	adds	r5, #1
 800cbd2:	e7f2      	b.n	800cbba <__libc_init_array+0x1e>
 800cbd4:	0800cc3c 	.word	0x0800cc3c
 800cbd8:	0800cc3c 	.word	0x0800cc3c
 800cbdc:	0800cc3c 	.word	0x0800cc3c
 800cbe0:	0800cc40 	.word	0x0800cc40

0800cbe4 <memset>:
 800cbe4:	4402      	add	r2, r0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d100      	bne.n	800cbee <memset+0xa>
 800cbec:	4770      	bx	lr
 800cbee:	f803 1b01 	strb.w	r1, [r3], #1
 800cbf2:	e7f9      	b.n	800cbe8 <memset+0x4>

0800cbf4 <_init>:
 800cbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf6:	bf00      	nop
 800cbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbfa:	bc08      	pop	{r3}
 800cbfc:	469e      	mov	lr, r3
 800cbfe:	4770      	bx	lr

0800cc00 <_fini>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	bf00      	nop
 800cc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc06:	bc08      	pop	{r3}
 800cc08:	469e      	mov	lr, r3
 800cc0a:	4770      	bx	lr
