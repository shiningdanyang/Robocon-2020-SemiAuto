
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7dc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800ca74  0800ca74  0001ca74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca9c  0800ca9c  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca9c  0800ca9c  0001ca9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800caa4  0800caa4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caa4  0800caa4  0001caa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800caa8  0800caa8  0001caa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  24000000  0800caac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac4  24000038  0800cae0  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000afc  0800cae0  00020afc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea5a  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c62  00000000  00000000  0003eabc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  00041720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  00042bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000383b5  00000000  00000000  00043f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011087  00000000  00000000  0007c325  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173257  00000000  00000000  0008d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00200603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005884  00000000  00000000  00200680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ca5c 	.word	0x0800ca5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	0800ca5c 	.word	0x0800ca5c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	24000024 	.word	0x24000024
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f008 fee4 	bl	8009458 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f008 ffb7 	bl	8009608 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f008 ffb2 	bl	8009608 <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000014 	.word	0x24000014
 80006ac:	24000a5c 	.word	0x24000a5c
 80006b0:	24000988 	.word	0x24000988
 80006b4:	24000a14 	.word	0x24000a14
 80006b8:	240001bc 	.word	0x240001bc
 80006bc:	24000680 	.word	0x24000680
 80006c0:	24000878 	.word	0x24000878

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000878 	.word	0x24000878
 800072c:	2400025a 	.word	0x2400025a
 8000730:	240001bc 	.word	0x240001bc
 8000734:	24000958 	.word	0x24000958
 8000738:	24000988 	.word	0x24000988
 800073c:	24000748 	.word	0x24000748
 8000740:	24000088 	.word	0x24000088
 8000744:	24000114 	.word	0x24000114

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 fd46 	bl	8009224 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f008 fe58 	bl	8009458 <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000878 	.word	0x24000878
 80007c8:	24000059 	.word	0x24000059
 80007cc:	240001bc 	.word	0x240001bc
 80007d0:	24000958 	.word	0x24000958
 80007d4:	24000988 	.word	0x24000988
 80007d8:	24000a5c 	.word	0x24000a5c
 80007dc:	24000014 	.word	0x24000014
 80007e0:	24000ae0 	.word	0x24000ae0
 80007e4:	24000088 	.word	0x24000088
 80007e8:	24000960 	.word	0x24000960

080007ec <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <compassReset+0x24>)
 80007f2:	2261      	movs	r2, #97	; 0x61
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <compassReset+0x24>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <compassReset+0x28>)
 80007fc:	f008 fda8 	bl	8009350 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000800:	f000 f818 	bl	8000834 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <compassReset+0x24>)
 8000806:	227a      	movs	r2, #122	; 0x7a
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	24000878 	.word	0x24000878

08000818 <compassRequest>:
void compassRequest(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	; (800082c <compassRequest+0x14>)
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <compassRequest+0x18>)
 8000822:	f008 fd95 	bl	8009350 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000000 	.word	0x24000000
 8000830:	24000878 	.word	0x24000878

08000834 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <wait4CompassTx+0x20>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fb      	beq.n	800083a <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <wait4CompassTx+0x20>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	2400025a 	.word	0x2400025a

08000858 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 800085c:	2209      	movs	r2, #9
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <spinalCordTrans+0x18>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <spinalCordTrans+0x1c>)
 8000862:	f008 fd75 	bl	8009350 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000866:	f000 f807 	bl	8000878 <wait4SpinalCordTx>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	24000014 	.word	0x24000014
 8000874:	24000988 	.word	0x24000988

08000878 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0fb      	beq.n	800087e <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	24000748 	.word	0x24000748

0800089c <peripheralADC_Init>:
uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 80008a0:	2203      	movs	r2, #3
 80008a2:	4903      	ldr	r1, [pc, #12]	; (80008b0 <peripheralADC_Init+0x14>)
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <peripheralADC_Init+0x18>)
 80008a6:	f001 ff2f 	bl	8002708 <HAL_ADC_Start_DMA>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	24000a78 	.word	0x24000a78
 80008b4:	24000774 	.word	0x24000774

080008b8 <controlMotor1>:
void roR_pit_yaw_mixSpeed(void);
void brake(void);

#ifdef SPINAL_CORD_MODE_ONEWAY
void controlMotor1(int _speed)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bfb8      	it	lt
 80008c6:	425b      	neglt	r3, r3
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <controlMotor1+0x48>)
 80008cc:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db07      	blt.n	80008e4 <controlMotor1+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <controlMotor1+0x48>)
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <controlMotor1+0x48>)
 80008e0:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 80008e2:	e006      	b.n	80008f2 <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <controlMotor1+0x48>)
 80008e6:	7a1b      	ldrb	r3, [r3, #8]
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <controlMotor1+0x48>)
 80008f0:	721a      	strb	r2, [r3, #8]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	24000014 	.word	0x24000014

08000904 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <controlMotor2+0x48>)
 8000918:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db07      	blt.n	8000930 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <controlMotor2+0x48>)
 8000922:	7a1b      	ldrb	r3, [r3, #8]
 8000924:	f023 0302 	bic.w	r3, r3, #2
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <controlMotor2+0x48>)
 800092c:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 800092e:	e006      	b.n	800093e <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <controlMotor2+0x48>)
 8000932:	7a1b      	ldrb	r3, [r3, #8]
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <controlMotor2+0x48>)
 800093c:	721a      	strb	r2, [r3, #8]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	24000014 	.word	0x24000014

08000950 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	bfb8      	it	lt
 800095e:	425b      	neglt	r3, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <controlMotor3+0x48>)
 8000964:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db07      	blt.n	800097c <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <controlMotor3+0x48>)
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	f023 0304 	bic.w	r3, r3, #4
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <controlMotor3+0x48>)
 8000978:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 800097a:	e006      	b.n	800098a <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <controlMotor3+0x48>)
 800097e:	7a1b      	ldrb	r3, [r3, #8]
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <controlMotor3+0x48>)
 8000988:	721a      	strb	r2, [r3, #8]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	24000014 	.word	0x24000014

0800099c <controlMotor4>:
void controlMotor4(int _speed)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bfb8      	it	lt
 80009aa:	425b      	neglt	r3, r3
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <controlMotor4+0x48>)
 80009b0:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db07      	blt.n	80009c8 <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <controlMotor4+0x48>)
 80009ba:	7a1b      	ldrb	r3, [r3, #8]
 80009bc:	f023 0308 	bic.w	r3, r3, #8
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <controlMotor4+0x48>)
 80009c4:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 80009c6:	e006      	b.n	80009d6 <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <controlMotor4+0x48>)
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <controlMotor4+0x48>)
 80009d4:	721a      	strb	r2, [r3, #8]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	24000014 	.word	0x24000014

080009e8 <testPWM>:
void testPWM(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
  for(int i = -1; i > -255; --i)
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e034      	b.n	8000a60 <testPWM+0x78>
  {
	  controlMotor1(i);
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff ff5e 	bl	80008b8 <controlMotor1>
	  controlMotor2(i);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff ff81 	bl	8000904 <controlMotor2>
	  controlMotor3(i);
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f7ff ffa4 	bl	8000950 <controlMotor3>
	  controlMotor4(i);
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff ffc7 	bl	800099c <controlMotor4>
	  PS2TxPacket[0]=spinalCordTxPacket[motor1Dir]+65;
 8000a0e:	4b71      	ldr	r3, [pc, #452]	; (8000bd4 <testPWM+0x1ec>)
 8000a10:	7a5b      	ldrb	r3, [r3, #9]
 8000a12:	3341      	adds	r3, #65	; 0x41
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b70      	ldr	r3, [pc, #448]	; (8000bd8 <testPWM+0x1f0>)
 8000a18:	701a      	strb	r2, [r3, #0]
	  PS2TxPacket[1]=spinalCordTxPacket[motor2Dir]+65;
 8000a1a:	4b6e      	ldr	r3, [pc, #440]	; (8000bd4 <testPWM+0x1ec>)
 8000a1c:	7a9b      	ldrb	r3, [r3, #10]
 8000a1e:	3341      	adds	r3, #65	; 0x41
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <testPWM+0x1f0>)
 8000a24:	705a      	strb	r2, [r3, #1]
	  PS2TxPacket[2]=spinalCordTxPacket[motor3Dir]+65;
 8000a26:	4b6b      	ldr	r3, [pc, #428]	; (8000bd4 <testPWM+0x1ec>)
 8000a28:	7adb      	ldrb	r3, [r3, #11]
 8000a2a:	3341      	adds	r3, #65	; 0x41
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b6a      	ldr	r3, [pc, #424]	; (8000bd8 <testPWM+0x1f0>)
 8000a30:	709a      	strb	r2, [r3, #2]
	  PS2TxPacket[3]=spinalCordTxPacket[motor4Dir]+65;
 8000a32:	4b68      	ldr	r3, [pc, #416]	; (8000bd4 <testPWM+0x1ec>)
 8000a34:	7b1b      	ldrb	r3, [r3, #12]
 8000a36:	3341      	adds	r3, #65	; 0x41
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b67      	ldr	r3, [pc, #412]	; (8000bd8 <testPWM+0x1f0>)
 8000a3c:	70da      	strb	r2, [r3, #3]
	  PS2TxPacket[4]= '\n';
 8000a3e:	4b66      	ldr	r3, [pc, #408]	; (8000bd8 <testPWM+0x1f0>)
 8000a40:	220a      	movs	r2, #10
 8000a42:	711a      	strb	r2, [r3, #4]
	  spinalCordTrans();
 8000a44:	f7ff ff08 	bl	8000858 <spinalCordTrans>
	  HAL_UART_Transmit(&PS2, PS2TxPacket, 5, 50);
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	4962      	ldr	r1, [pc, #392]	; (8000bd8 <testPWM+0x1f0>)
 8000a4e:	4863      	ldr	r0, [pc, #396]	; (8000bdc <testPWM+0x1f4>)
 8000a50:	f008 fbe8 	bl	8009224 <HAL_UART_Transmit>
	  HAL_Delay(20);
 8000a54:	2014      	movs	r0, #20
 8000a56:	f001 fa97 	bl	8001f88 <HAL_Delay>
  for(int i = -1; i > -255; --i)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8000a66:	dac6      	bge.n	80009f6 <testPWM+0xe>
  }
  for(int i = -255; i < 0; ++i)
 8000a68:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	e034      	b.n	8000ada <testPWM+0xf2>
  {
	  controlMotor1(i);
 8000a70:	68b8      	ldr	r0, [r7, #8]
 8000a72:	f7ff ff21 	bl	80008b8 <controlMotor1>
	  controlMotor2(i);
 8000a76:	68b8      	ldr	r0, [r7, #8]
 8000a78:	f7ff ff44 	bl	8000904 <controlMotor2>
	  controlMotor3(i);
 8000a7c:	68b8      	ldr	r0, [r7, #8]
 8000a7e:	f7ff ff67 	bl	8000950 <controlMotor3>
	  controlMotor4(i);
 8000a82:	68b8      	ldr	r0, [r7, #8]
 8000a84:	f7ff ff8a 	bl	800099c <controlMotor4>
	  PS2TxPacket[0]=spinalCordTxPacket[motor1Dir]+65;
 8000a88:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <testPWM+0x1ec>)
 8000a8a:	7a5b      	ldrb	r3, [r3, #9]
 8000a8c:	3341      	adds	r3, #65	; 0x41
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b51      	ldr	r3, [pc, #324]	; (8000bd8 <testPWM+0x1f0>)
 8000a92:	701a      	strb	r2, [r3, #0]
	  PS2TxPacket[1]=spinalCordTxPacket[motor2Dir]+65;
 8000a94:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <testPWM+0x1ec>)
 8000a96:	7a9b      	ldrb	r3, [r3, #10]
 8000a98:	3341      	adds	r3, #65	; 0x41
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b4e      	ldr	r3, [pc, #312]	; (8000bd8 <testPWM+0x1f0>)
 8000a9e:	705a      	strb	r2, [r3, #1]
	  PS2TxPacket[2]=spinalCordTxPacket[motor3Dir]+65;
 8000aa0:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <testPWM+0x1ec>)
 8000aa2:	7adb      	ldrb	r3, [r3, #11]
 8000aa4:	3341      	adds	r3, #65	; 0x41
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <testPWM+0x1f0>)
 8000aaa:	709a      	strb	r2, [r3, #2]
	  PS2TxPacket[3]=spinalCordTxPacket[motor4Dir]+65;
 8000aac:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <testPWM+0x1ec>)
 8000aae:	7b1b      	ldrb	r3, [r3, #12]
 8000ab0:	3341      	adds	r3, #65	; 0x41
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <testPWM+0x1f0>)
 8000ab6:	70da      	strb	r2, [r3, #3]
	  PS2TxPacket[4]= '\n';
 8000ab8:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <testPWM+0x1f0>)
 8000aba:	220a      	movs	r2, #10
 8000abc:	711a      	strb	r2, [r3, #4]
	  spinalCordTrans();
 8000abe:	f7ff fecb 	bl	8000858 <spinalCordTrans>
	  HAL_UART_Transmit(&PS2, PS2TxPacket, 5, 50);
 8000ac2:	2332      	movs	r3, #50	; 0x32
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	4944      	ldr	r1, [pc, #272]	; (8000bd8 <testPWM+0x1f0>)
 8000ac8:	4844      	ldr	r0, [pc, #272]	; (8000bdc <testPWM+0x1f4>)
 8000aca:	f008 fbab 	bl	8009224 <HAL_UART_Transmit>
	  HAL_Delay(20);
 8000ace:	2014      	movs	r0, #20
 8000ad0:	f001 fa5a 	bl	8001f88 <HAL_Delay>
  for(int i = -255; i < 0; ++i)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	dbc7      	blt.n	8000a70 <testPWM+0x88>
  }
  for(int i = 1 ; i < 255; ++i)
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	e034      	b.n	8000b50 <testPWM+0x168>
  {
	  controlMotor1(i);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fee6 	bl	80008b8 <controlMotor1>
	  controlMotor2(i);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff09 	bl	8000904 <controlMotor2>
	  controlMotor3(i);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ff2c 	bl	8000950 <controlMotor3>
	  controlMotor4(i);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff4f 	bl	800099c <controlMotor4>
	  PS2TxPacket[0]=spinalCordTxPacket[motor1Dir]+65;
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <testPWM+0x1ec>)
 8000b00:	7a5b      	ldrb	r3, [r3, #9]
 8000b02:	3341      	adds	r3, #65	; 0x41
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <testPWM+0x1f0>)
 8000b08:	701a      	strb	r2, [r3, #0]
	  PS2TxPacket[1]=spinalCordTxPacket[motor2Dir]+65;
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <testPWM+0x1ec>)
 8000b0c:	7a9b      	ldrb	r3, [r3, #10]
 8000b0e:	3341      	adds	r3, #65	; 0x41
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <testPWM+0x1f0>)
 8000b14:	705a      	strb	r2, [r3, #1]
	  PS2TxPacket[2]=spinalCordTxPacket[motor3Dir]+65;
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <testPWM+0x1ec>)
 8000b18:	7adb      	ldrb	r3, [r3, #11]
 8000b1a:	3341      	adds	r3, #65	; 0x41
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <testPWM+0x1f0>)
 8000b20:	709a      	strb	r2, [r3, #2]
	  PS2TxPacket[3]=spinalCordTxPacket[motor4Dir]+65;
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <testPWM+0x1ec>)
 8000b24:	7b1b      	ldrb	r3, [r3, #12]
 8000b26:	3341      	adds	r3, #65	; 0x41
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <testPWM+0x1f0>)
 8000b2c:	70da      	strb	r2, [r3, #3]
	  PS2TxPacket[4]= '\n';
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <testPWM+0x1f0>)
 8000b30:	220a      	movs	r2, #10
 8000b32:	711a      	strb	r2, [r3, #4]
	  spinalCordTrans();
 8000b34:	f7ff fe90 	bl	8000858 <spinalCordTrans>
	  HAL_UART_Transmit(&PS2, PS2TxPacket, 5, 50);
 8000b38:	2332      	movs	r3, #50	; 0x32
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	4926      	ldr	r1, [pc, #152]	; (8000bd8 <testPWM+0x1f0>)
 8000b3e:	4827      	ldr	r0, [pc, #156]	; (8000bdc <testPWM+0x1f4>)
 8000b40:	f008 fb70 	bl	8009224 <HAL_UART_Transmit>
	  HAL_Delay(20);
 8000b44:	2014      	movs	r0, #20
 8000b46:	f001 fa1f 	bl	8001f88 <HAL_Delay>
  for(int i = 1 ; i < 255; ++i)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2bfe      	cmp	r3, #254	; 0xfe
 8000b54:	ddc7      	ble.n	8000ae6 <testPWM+0xfe>
  }
  for(int i = 255; i > 0; --i)
 8000b56:	23ff      	movs	r3, #255	; 0xff
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	e034      	b.n	8000bc6 <testPWM+0x1de>
  {
	  controlMotor1(i);
 8000b5c:	6838      	ldr	r0, [r7, #0]
 8000b5e:	f7ff feab 	bl	80008b8 <controlMotor1>
	  controlMotor2(i);
 8000b62:	6838      	ldr	r0, [r7, #0]
 8000b64:	f7ff fece 	bl	8000904 <controlMotor2>
	  controlMotor3(i);
 8000b68:	6838      	ldr	r0, [r7, #0]
 8000b6a:	f7ff fef1 	bl	8000950 <controlMotor3>
	  controlMotor4(i);
 8000b6e:	6838      	ldr	r0, [r7, #0]
 8000b70:	f7ff ff14 	bl	800099c <controlMotor4>
	  PS2TxPacket[0]=spinalCordTxPacket[motor1Dir]+65;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <testPWM+0x1ec>)
 8000b76:	7a5b      	ldrb	r3, [r3, #9]
 8000b78:	3341      	adds	r3, #65	; 0x41
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <testPWM+0x1f0>)
 8000b7e:	701a      	strb	r2, [r3, #0]
	  PS2TxPacket[1]=spinalCordTxPacket[motor2Dir]+65;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <testPWM+0x1ec>)
 8000b82:	7a9b      	ldrb	r3, [r3, #10]
 8000b84:	3341      	adds	r3, #65	; 0x41
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <testPWM+0x1f0>)
 8000b8a:	705a      	strb	r2, [r3, #1]
	  PS2TxPacket[2]=spinalCordTxPacket[motor3Dir]+65;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <testPWM+0x1ec>)
 8000b8e:	7adb      	ldrb	r3, [r3, #11]
 8000b90:	3341      	adds	r3, #65	; 0x41
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <testPWM+0x1f0>)
 8000b96:	709a      	strb	r2, [r3, #2]
	  PS2TxPacket[3]=spinalCordTxPacket[motor4Dir]+65;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <testPWM+0x1ec>)
 8000b9a:	7b1b      	ldrb	r3, [r3, #12]
 8000b9c:	3341      	adds	r3, #65	; 0x41
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <testPWM+0x1f0>)
 8000ba2:	70da      	strb	r2, [r3, #3]
	  PS2TxPacket[4]= '\n';
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <testPWM+0x1f0>)
 8000ba6:	220a      	movs	r2, #10
 8000ba8:	711a      	strb	r2, [r3, #4]
	  spinalCordTrans();
 8000baa:	f7ff fe55 	bl	8000858 <spinalCordTrans>
	  HAL_UART_Transmit(&PS2, PS2TxPacket, 5, 50);
 8000bae:	2332      	movs	r3, #50	; 0x32
 8000bb0:	2205      	movs	r2, #5
 8000bb2:	4909      	ldr	r1, [pc, #36]	; (8000bd8 <testPWM+0x1f0>)
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <testPWM+0x1f4>)
 8000bb6:	f008 fb35 	bl	8009224 <HAL_UART_Transmit>
	  HAL_Delay(20);
 8000bba:	2014      	movs	r0, #20
 8000bbc:	f001 f9e4 	bl	8001f88 <HAL_Delay>
  for(int i = 255; i > 0; --i)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcc7      	bgt.n	8000b5c <testPWM+0x174>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	24000014 	.word	0x24000014
 8000bd8:	2400000c 	.word	0x2400000c
 8000bdc:	240001bc 	.word	0x240001bc

08000be0 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fe67 	bl	80008b8 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8000bea:	f04f 30ff 	mov.w	r0, #4294967295
 8000bee:	f7ff fe89 	bl	8000904 <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff feac 	bl	8000950 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff fece 	bl	800099c <controlMotor4>
	spinalCordTrans();
 8000c00:	f7ff fe2a 	bl	8000858 <spinalCordTrans>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <positionControl_Init+0x18>)
 8000c0e:	f008 f807 	bl	8008c20 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <positionControl_Init+0x1c>)
 8000c18:	f005 f958 	bl	8005ecc <HAL_GPIO_WritePin>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24000a80 	.word	0x24000a80
 8000c24:	58021000 	.word	0x58021000

08000c28 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d16e      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8000c3c:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d16a      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8000c44:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d11e      	bne.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c52:	4837      	ldr	r0, [pc, #220]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c54:	f005 f93a 	bl	8005ecc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5c:	4834      	ldr	r0, [pc, #208]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c5e:	f005 f94e 	bl	8005efe <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c6a:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000c6c:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c74:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8000c76:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2bc7      	cmp	r3, #199	; 0xc7
 8000c7c:	dd05      	ble.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d11f      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c98:	4825      	ldr	r0, [pc, #148]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c9a:	f005 f917 	bl	8005ecc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca2:	4823      	ldr	r0, [pc, #140]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ca4:	f005 f92b 	bl	8005efe <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000cb0:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cba:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000cc4:	db05      	blt.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d11f      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce0:	4813      	ldr	r0, [pc, #76]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ce2:	f005 f8f3 	bl	8005ecc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000cec:	f005 f907 	bl	8005efe <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000cf8:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000d02:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000d0c:	db05      	blt.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000a80 	.word	0x24000a80
 8000d28:	24000910 	.word	0x24000910
 8000d2c:	24000a38 	.word	0x24000a38
 8000d30:	58020c00 	.word	0x58020c00
 8000d34:	24000908 	.word	0x24000908
 8000d38:	2400095c 	.word	0x2400095c

08000d3c <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e01f      	b.n	8000d8c <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d005      	beq.n	8000d68 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2104      	movs	r1, #4
 8000d60:	480e      	ldr	r0, [pc, #56]	; (8000d9c <SendByteSPI+0x60>)
 8000d62:	f005 f8b3 	bl	8005ecc <HAL_GPIO_WritePin>
 8000d66:	e004      	b.n	8000d72 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <SendByteSPI+0x60>)
 8000d6e:	f005 f8ad 	bl	8005ecc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000d72:	2200      	movs	r2, #0
 8000d74:	2101      	movs	r1, #1
 8000d76:	480a      	ldr	r0, [pc, #40]	; (8000da0 <SendByteSPI+0x64>)
 8000d78:	f005 f8a8 	bl	8005ecc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <SendByteSPI+0x64>)
 8000d82:	f005 f8a3 	bl	8005ecc <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b07      	cmp	r3, #7
 8000d90:	dddc      	ble.n	8000d4c <SendByteSPI+0x10>

	}
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	58021800 	.word	0x58021800
 8000da0:	58020400 	.word	0x58020400

08000da4 <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000dae:	2201      	movs	r2, #1
 8000db0:	2101      	movs	r1, #1
 8000db2:	480f      	ldr	r0, [pc, #60]	; (8000df0 <ST7920_SendCmd+0x4c>)
 8000db4:	f005 f88a 	bl	8005ecc <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 8000db8:	20f8      	movs	r0, #248	; 0xf8
 8000dba:	f7ff ffbf 	bl	8000d3c <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f023 030f 	bic.w	r3, r3, #15
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffb8 	bl	8000d3c <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ffb2 	bl	8000d3c <SendByteSPI>
	delayUs(50);
 8000dd8:	2032      	movs	r0, #50	; 0x32
 8000dda:	f7ff fc1d 	bl	8000618 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	4803      	ldr	r0, [pc, #12]	; (8000df0 <ST7920_SendCmd+0x4c>)
 8000de4:	f005 f872 	bl	8005ecc <HAL_GPIO_WritePin>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58021800 	.word	0x58021800

08000df4 <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	481c      	ldr	r0, [pc, #112]	; (8000e70 <ST7920_Init+0x7c>)
 8000dfe:	f005 f865 	bl	8005ecc <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000e02:	200a      	movs	r0, #10
 8000e04:	f001 f8c0 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	4818      	ldr	r0, [pc, #96]	; (8000e70 <ST7920_Init+0x7c>)
 8000e0e:	f005 f85d 	bl	8005ecc <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000e12:	2032      	movs	r0, #50	; 0x32
 8000e14:	f001 f8b8 	bl	8001f88 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000e18:	2030      	movs	r0, #48	; 0x30
 8000e1a:	f7ff ffc3 	bl	8000da4 <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000e1e:	206e      	movs	r0, #110	; 0x6e
 8000e20:	f7ff fbfa 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000e24:	2030      	movs	r0, #48	; 0x30
 8000e26:	f7ff ffbd 	bl	8000da4 <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000e2a:	2028      	movs	r0, #40	; 0x28
 8000e2c:	f7ff fbf4 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000e30:	2008      	movs	r0, #8
 8000e32:	f7ff ffb7 	bl	8000da4 <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000e36:	206e      	movs	r0, #110	; 0x6e
 8000e38:	f7ff fbee 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ffb1 	bl	8000da4 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000e42:	200c      	movs	r0, #12
 8000e44:	f001 f8a0 	bl	8001f88 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000e48:	2006      	movs	r0, #6
 8000e4a:	f7ff ffab 	bl	8000da4 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f001 f89a 	bl	8001f88 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000e54:	200c      	movs	r0, #12
 8000e56:	f7ff ffa5 	bl	8000da4 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f001 f894 	bl	8001f88 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff ff9f 	bl	8000da4 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000e66:	2001      	movs	r0, #1
 8000e68:	f001 f88e 	bl	8001f88 <HAL_Delay>

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58021800 	.word	0x58021800

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e78:	f000 fff4 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7c:	f000 f832 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f000 fb12 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e84:	f000 fad0 	bl	8001428 <MX_DMA_Init>
  MX_ADC3_Init();
 8000e88:	f000 f8e2 	bl	8001050 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000e8c:	f000 f9e8 	bl	8001260 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e90:	f000 fa32 	bl	80012f8 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000e94:	f000 f960 	bl	8001158 <MX_TIM7_Init>
  MX_UART7_Init();
 8000e98:	f000 f996 	bl	80011c8 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000e9c:	f000 fa78 	bl	8001390 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8000ea0:	f7ff fb9a 	bl	80005d8 <delayUs_Init>
  peripheralUART_Init();
 8000ea4:	f7ff fbde 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 8000ea8:	f7ff fcf8 	bl	800089c <peripheralADC_Init>
  positionControl_Init();
 8000eac:	f7ff feac 	bl	8000c08 <positionControl_Init>
  ST7920_Init();
 8000eb0:	f7ff ffa0 	bl	8000df4 <ST7920_Init>

  tracking = 1000;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <main+0x68>)
 8000eb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eba:	601a      	str	r2, [r3, #0]
  brake();
 8000ebc:	f7ff fe90 	bl	8000be0 <brake>
  compassReset();
 8000ec0:	f7ff fc94 	bl	80007ec <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <main+0x6c>)
 8000eca:	f004 ffff 	bl	8005ecc <HAL_GPIO_WritePin>
  HAL_Delay(4000);
 8000ece:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000ed2:	f001 f859 	bl	8001f88 <HAL_Delay>
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_10);
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
//	  delayUs(2000000);
	  testPWM();
 8000ed6:	f7ff fd87 	bl	80009e8 <testPWM>
 8000eda:	e7fc      	b.n	8000ed6 <main+0x62>
 8000edc:	24000930 	.word	0x24000930
 8000ee0:	58020400 	.word	0x58020400

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0cc      	sub	sp, #304	; 0x130
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000eee:	224c      	movs	r2, #76	; 0x4c
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f00b fdaa 	bl	800ca4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00b fda3 	bl	800ca4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	23bc      	movs	r3, #188	; 0xbc
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2100      	movs	r1, #0
 8000f12:	f00b fd9b 	bl	800ca4c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f16:	2002      	movs	r0, #2
 8000f18:	f005 f80c 	bl	8005f34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	4b49      	ldr	r3, [pc, #292]	; (8001048 <SystemClock_Config+0x164>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	4a48      	ldr	r2, [pc, #288]	; (8001048 <SystemClock_Config+0x164>)
 8000f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f2c:	6193      	str	r3, [r2, #24]
 8000f2e:	4b46      	ldr	r3, [pc, #280]	; (8001048 <SystemClock_Config+0x164>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <SystemClock_Config+0x168>)
 8000f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3e:	4a43      	ldr	r2, [pc, #268]	; (800104c <SystemClock_Config+0x168>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <SystemClock_Config+0x168>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f56:	bf00      	nop
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <SystemClock_Config+0x164>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f64:	d1f8      	bne.n	8000f58 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f72:	2340      	movs	r3, #64	; 0x40
 8000f74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f84:	2304      	movs	r3, #4
 8000f86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f8a:	233c      	movs	r3, #60	; 0x3c
 8000f8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 fff5 	bl	8005fa8 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000fc4:	f000 fb9c 	bl	8001700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	233f      	movs	r3, #63	; 0x3f
 8000fca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fe6:	2340      	movs	r3, #64	; 0x40
 8000fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ff4:	2340      	movs	r3, #64	; 0x40
 8000ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ffa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ffe:	2104      	movs	r1, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f005 fba9 	bl	8006758 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800100c:	f000 fb78 	bl	8001700 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2203      	movs	r2, #3
 8001016:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	2200      	movs	r2, #0
 800101e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2200      	movs	r2, #0
 8001026:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4618      	mov	r0, r3
 800102e:	f005 ff17 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001038:	f000 fb62 	bl	8001700 <Error_Handler>
  }
}
 800103c:	bf00      	nop
 800103e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	58024800 	.word	0x58024800
 800104c:	58000400 	.word	0x58000400

08001050 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <MX_ADC3_Init+0xf4>)
 800106a:	4a37      	ldr	r2, [pc, #220]	; (8001148 <MX_ADC3_Init+0xf8>)
 800106c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <MX_ADC3_Init+0xf4>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b33      	ldr	r3, [pc, #204]	; (8001144 <MX_ADC3_Init+0xf4>)
 8001078:	2208      	movs	r2, #8
 800107a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <MX_ADC3_Init+0xf4>)
 800107e:	2201      	movs	r2, #1
 8001080:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <MX_ADC3_Init+0xf4>)
 8001084:	2204      	movs	r2, #4
 8001086:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_ADC3_Init+0xf4>)
 800108a:	2200      	movs	r2, #0
 800108c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <MX_ADC3_Init+0xf4>)
 8001090:	2201      	movs	r2, #1
 8001092:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_ADC3_Init+0xf4>)
 8001096:	2203      	movs	r2, #3
 8001098:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <MX_ADC3_Init+0xf4>)
 800109c:	2200      	movs	r2, #0
 800109e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <MX_ADC3_Init+0xf4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <MX_ADC3_Init+0xf4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <MX_ADC3_Init+0xf4>)
 80010ae:	2203      	movs	r2, #3
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <MX_ADC3_Init+0xf4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <MX_ADC3_Init+0xf4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_ADC3_Init+0xf4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010c6:	481f      	ldr	r0, [pc, #124]	; (8001144 <MX_ADC3_Init+0xf4>)
 80010c8:	f001 f97e 	bl	80023c8 <HAL_ADC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80010d2:	f000 fb15 	bl	8001700 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_ADC3_Init+0xfc>)
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010da:	2306      	movs	r3, #6
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80010de:	2306      	movs	r3, #6
 80010e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010e8:	2304      	movs	r3, #4
 80010ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <MX_ADC3_Init+0xf4>)
 80010f6:	f001 fbe9 	bl	80028cc <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001100:	f000 fafe 	bl	8001700 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_ADC3_Init+0x100>)
 8001106:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001108:	230c      	movs	r3, #12
 800110a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <MX_ADC3_Init+0xf4>)
 8001112:	f001 fbdb 	bl	80028cc <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800111c:	f000 faf0 	bl	8001700 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_ADC3_Init+0x104>)
 8001122:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001124:	2312      	movs	r3, #18
 8001126:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_ADC3_Init+0xf4>)
 800112e:	f001 fbcd 	bl	80028cc <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8001138:	f000 fae2 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	24000774 	.word	0x24000774
 8001148:	58026000 	.word	0x58026000
 800114c:	04300002 	.word	0x04300002
 8001150:	2a000400 	.word	0x2a000400
 8001154:	2e300800 	.word	0x2e300800

08001158 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_TIM7_Init+0x68>)
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <MX_TIM7_Init+0x6c>)
 800116c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_TIM7_Init+0x68>)
 8001170:	f640 125f 	movw	r2, #2399	; 0x95f
 8001174:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_TIM7_Init+0x68>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_TIM7_Init+0x68>)
 800117e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001182:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_TIM7_Init+0x68>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_TIM7_Init+0x68>)
 800118c:	f007 fd1c 	bl	8008bc8 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001196:	f000 fab3 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_TIM7_Init+0x68>)
 80011a8:	f007 ff46 	bl	8009038 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80011b2:	f000 faa5 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	24000a80 	.word	0x24000a80
 80011c4:	40001400 	.word	0x40001400

080011c8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_UART7_Init+0x90>)
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <MX_UART7_Init+0x94>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <MX_UART7_Init+0x90>)
 80011d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_UART7_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_UART7_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_UART7_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_UART7_Init+0x90>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_UART7_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_UART7_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_UART7_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_UART7_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_UART7_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001210:	4811      	ldr	r0, [pc, #68]	; (8001258 <MX_UART7_Init+0x90>)
 8001212:	f007 ffb7 	bl	8009184 <HAL_UART_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800121c:	f000 fa70 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_UART7_Init+0x90>)
 8001224:	f00b fb09 	bl	800c83a <HAL_UARTEx_SetTxFifoThreshold>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800122e:	f000 fa67 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4808      	ldr	r0, [pc, #32]	; (8001258 <MX_UART7_Init+0x90>)
 8001236:	f00b fb3e 	bl	800c8b6 <HAL_UARTEx_SetRxFifoThreshold>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001240:	f000 fa5e 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_UART7_Init+0x90>)
 8001246:	f00b fabf 	bl	800c7c8 <HAL_UARTEx_DisableFifoMode>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001250:	f000 fa56 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	24000088 	.word	0x24000088
 800125c:	40007800 	.word	0x40007800

08001260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <MX_USART1_UART_Init+0x94>)
 8001268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 80012aa:	f007 ff6b 	bl	8009184 <HAL_UART_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 fa24 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 80012bc:	f00b fabd 	bl	800c83a <HAL_UARTEx_SetTxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012c6:	f000 fa1b 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 80012ce:	f00b faf2 	bl	800c8b6 <HAL_UARTEx_SetRxFifoThreshold>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f000 fa12 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_USART1_UART_Init+0x90>)
 80012de:	f00b fa73 	bl	800c7c8 <HAL_UARTEx_DisableFifoMode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f000 fa0a 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	24000878 	.word	0x24000878
 80012f4:	40011000 	.word	0x40011000

080012f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_USART3_UART_Init+0x90>)
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <MX_USART3_UART_Init+0x94>)
 8001300:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001304:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001308:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_USART3_UART_Init+0x90>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_USART3_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_USART3_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001342:	f007 ff1f 	bl	8009184 <HAL_UART_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800134c:	f000 f9d8 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001354:	f00b fa71 	bl	800c83a <HAL_UARTEx_SetTxFifoThreshold>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800135e:	f000 f9cf 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001366:	f00b faa6 	bl	800c8b6 <HAL_UARTEx_SetRxFifoThreshold>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001370:	f000 f9c6 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_USART3_UART_Init+0x90>)
 8001376:	f00b fa27 	bl	800c7c8 <HAL_UARTEx_DisableFifoMode>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001380:	f000 f9be 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	240001bc 	.word	0x240001bc
 800138c:	40004800 	.word	0x40004800

08001390 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_USART6_UART_Init+0x90>)
 8001396:	4a23      	ldr	r2, [pc, #140]	; (8001424 <MX_USART6_UART_Init+0x94>)
 8001398:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_USART6_UART_Init+0x90>)
 800139c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013d8:	4811      	ldr	r0, [pc, #68]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013da:	f007 fed3 	bl	8009184 <HAL_UART_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80013e4:	f000 f98c 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e8:	2100      	movs	r1, #0
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013ec:	f00b fa25 	bl	800c83a <HAL_UARTEx_SetTxFifoThreshold>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80013f6:	f000 f983 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <MX_USART6_UART_Init+0x90>)
 80013fe:	f00b fa5a 	bl	800c8b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001408:	f000 f97a 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_USART6_UART_Init+0x90>)
 800140e:	f00b f9db 	bl	800c7c8 <HAL_UARTEx_DisableFifoMode>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001418:	f000 f972 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	24000988 	.word	0x24000988
 8001424:	40011400 	.word	0x40011400

08001428 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_DMA_Init+0x7c>)
 8001430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <MX_DMA_Init+0x7c>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_DMA_Init+0x7c>)
 8001440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_DMA_Init+0x7c>)
 800144e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <MX_DMA_Init+0x7c>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_DMA_Init+0x7c>)
 800145e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	200d      	movs	r0, #13
 8001470:	f002 f82b 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001474:	200d      	movs	r0, #13
 8001476:	f002 f842 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	200e      	movs	r0, #14
 8001480:	f002 f823 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001484:	200e      	movs	r0, #14
 8001486:	f002 f83a 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	203a      	movs	r0, #58	; 0x3a
 8001490:	f002 f81b 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001494:	203a      	movs	r0, #58	; 0x3a
 8001496:	f002 f832 	bl	80034fe <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	58024400 	.word	0x58024400

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014be:	4b89      	ldr	r3, [pc, #548]	; (80016e4 <MX_GPIO_Init+0x23c>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	4a87      	ldr	r2, [pc, #540]	; (80016e4 <MX_GPIO_Init+0x23c>)
 80014c6:	f043 0320 	orr.w	r3, r3, #32
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ce:	4b85      	ldr	r3, [pc, #532]	; (80016e4 <MX_GPIO_Init+0x23c>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <MX_GPIO_Init+0x23c>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	4a80      	ldr	r2, [pc, #512]	; (80016e4 <MX_GPIO_Init+0x23c>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ec:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <MX_GPIO_Init+0x23c>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <MX_GPIO_Init+0x23c>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	4a78      	ldr	r2, [pc, #480]	; (80016e4 <MX_GPIO_Init+0x23c>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <MX_GPIO_Init+0x23c>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001518:	4b72      	ldr	r3, [pc, #456]	; (80016e4 <MX_GPIO_Init+0x23c>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	4a71      	ldr	r2, [pc, #452]	; (80016e4 <MX_GPIO_Init+0x23c>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001528:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <MX_GPIO_Init+0x23c>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001536:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <MX_GPIO_Init+0x23c>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <MX_GPIO_Init+0x23c>)
 800153e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <MX_GPIO_Init+0x23c>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001554:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <MX_GPIO_Init+0x23c>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	4a62      	ldr	r2, [pc, #392]	; (80016e4 <MX_GPIO_Init+0x23c>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001564:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <MX_GPIO_Init+0x23c>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <MX_GPIO_Init+0x23c>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	4a5a      	ldr	r2, [pc, #360]	; (80016e4 <MX_GPIO_Init+0x23c>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <MX_GPIO_Init+0x23c>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f240 7104 	movw	r1, #1796	; 0x704
 8001596:	4854      	ldr	r0, [pc, #336]	; (80016e8 <MX_GPIO_Init+0x240>)
 8001598:	f004 fc98 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2110      	movs	r1, #16
 80015a0:	4852      	ldr	r0, [pc, #328]	; (80016ec <MX_GPIO_Init+0x244>)
 80015a2:	f004 fc93 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80015a6:	2200      	movs	r2, #0
 80015a8:	f242 0167 	movw	r1, #8295	; 0x2067
 80015ac:	4850      	ldr	r0, [pc, #320]	; (80016f0 <MX_GPIO_Init+0x248>)
 80015ae:	f004 fc8d 	bl	8005ecc <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 80015b2:	2200      	movs	r2, #0
 80015b4:	f643 610d 	movw	r1, #15885	; 0x3e0d
 80015b8:	484e      	ldr	r0, [pc, #312]	; (80016f4 <MX_GPIO_Init+0x24c>)
 80015ba:	f004 fc87 	bl	8005ecc <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2182      	movs	r1, #130	; 0x82
 80015c2:	484d      	ldr	r0, [pc, #308]	; (80016f8 <MX_GPIO_Init+0x250>)
 80015c4:	f004 fc82 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 80015ce:	484b      	ldr	r0, [pc, #300]	; (80016fc <MX_GPIO_Init+0x254>)
 80015d0:	f004 fc7c 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 80015d4:	f240 7304 	movw	r3, #1796	; 0x704
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	483e      	ldr	r0, [pc, #248]	; (80016e8 <MX_GPIO_Init+0x240>)
 80015ee:	f004 fabd 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f2:	2310      	movs	r3, #16
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4838      	ldr	r0, [pc, #224]	; (80016ec <MX_GPIO_Init+0x244>)
 800160a:	f004 faaf 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 800160e:	f242 0367 	movw	r3, #8295	; 0x2067
 8001612:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4832      	ldr	r0, [pc, #200]	; (80016f0 <MX_GPIO_Init+0x248>)
 8001628:	f004 faa0 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800162c:	230d      	movs	r3, #13
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	482c      	ldr	r0, [pc, #176]	; (80016f4 <MX_GPIO_Init+0x24c>)
 8001644:	f004 fa92 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4826      	ldr	r0, [pc, #152]	; (80016f8 <MX_GPIO_Init+0x250>)
 8001660:	f004 fa84 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8001664:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	481f      	ldr	r0, [pc, #124]	; (80016fc <MX_GPIO_Init+0x254>)
 800167e:	f004 fa75 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <MX_GPIO_Init+0x254>)
 800169c:	f004 fa66 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 80016a0:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 80016a4:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <MX_GPIO_Init+0x24c>)
 80016ba:	f004 fa57 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 80016be:	2302      	movs	r3, #2
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4808      	ldr	r0, [pc, #32]	; (80016f8 <MX_GPIO_Init+0x250>)
 80016d6:	f004 fa49 	bl	8005b6c <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	58024400 	.word	0x58024400
 80016e8:	58020000 	.word	0x58020000
 80016ec:	58020800 	.word	0x58020800
 80016f0:	58020400 	.word	0x58020400
 80016f4:	58021800 	.word	0x58021800
 80016f8:	58021000 	.word	0x58021000
 80016fc:	58020c00 	.word	0x58020c00

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_MspInit+0x30>)
 8001718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800171c:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x30>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x30>)
 8001728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	58024400 	.word	0x58024400

08001744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a33      	ldr	r2, [pc, #204]	; (8001830 <HAL_ADC_MspInit+0xec>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d15f      	bne.n	8001826 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001766:	4b33      	ldr	r3, [pc, #204]	; (8001834 <HAL_ADC_MspInit+0xf0>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	4a31      	ldr	r2, [pc, #196]	; (8001834 <HAL_ADC_MspInit+0xf0>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_ADC_MspInit+0xf0>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_ADC_MspInit+0xf0>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178a:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <HAL_ADC_MspInit+0xf0>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_ADC_MspInit+0xf0>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 80017a2:	2303      	movs	r3, #3
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a6:	2303      	movs	r3, #3
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4820      	ldr	r0, [pc, #128]	; (8001838 <HAL_ADC_MspInit+0xf4>)
 80017b6:	f004 f9d9 	bl	8005b6c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80017ba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80017be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80017c2:	f000 fc0f 	bl	8001fe4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_ADC_MspInit+0xf8>)
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_ADC_MspInit+0xfc>)
 80017ca:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_ADC_MspInit+0xf8>)
 80017ce:	2273      	movs	r2, #115	; 0x73
 80017d0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_ADC_MspInit+0xf8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_ADC_MspInit+0xf8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_ADC_MspInit+0xf8>)
 80017e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_ADC_MspInit+0xf8>)
 80017e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ec:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_ADC_MspInit+0xf8>)
 80017f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_ADC_MspInit+0xf8>)
 80017f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_ADC_MspInit+0xf8>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_ADC_MspInit+0xf8>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800180a:	480c      	ldr	r0, [pc, #48]	; (800183c <HAL_ADC_MspInit+0xf8>)
 800180c:	f001 fe92 	bl	8003534 <HAL_DMA_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001816:	f7ff ff73 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_ADC_MspInit+0xf8>)
 800181e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_ADC_MspInit+0xf8>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	; 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	58026000 	.word	0x58026000
 8001834:	58024400 	.word	0x58024400
 8001838:	58020800 	.word	0x58020800
 800183c:	240006a8 	.word	0x240006a8
 8001840:	40020040 	.word	0x40020040

08001844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <HAL_TIM_Base_MspInit+0x48>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d116      	bne.n	8001884 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_TIM_Base_MspInit+0x4c>)
 8001858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185c:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_TIM_Base_MspInit+0x4c>)
 800185e:	f043 0320 	orr.w	r3, r3, #32
 8001862:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_TIM_Base_MspInit+0x4c>)
 8001868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2037      	movs	r0, #55	; 0x37
 800187a:	f001 fe26 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800187e:	2037      	movs	r0, #55	; 0x37
 8001880:	f001 fe3d 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40001400 	.word	0x40001400
 8001890:	58024400 	.word	0x58024400

08001894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b090      	sub	sp, #64	; 0x40
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4aa3      	ldr	r2, [pc, #652]	; (8001b40 <HAL_UART_MspInit+0x2ac>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d136      	bne.n	8001924 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80018b6:	4ba3      	ldr	r3, [pc, #652]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 80018b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018bc:	4aa1      	ldr	r2, [pc, #644]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 80018be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018c6:	4b9f      	ldr	r3, [pc, #636]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 80018c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d4:	4b9b      	ldr	r3, [pc, #620]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	4a9a      	ldr	r2, [pc, #616]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 80018dc:	f043 0320 	orr.w	r3, r3, #32
 80018e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e4:	4b97      	ldr	r3, [pc, #604]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 80018f2:	23c0      	movs	r3, #192	; 0xc0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001902:	2307      	movs	r3, #7
 8001904:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	488e      	ldr	r0, [pc, #568]	; (8001b48 <HAL_UART_MspInit+0x2b4>)
 800190e:	f004 f92d 	bl	8005b6c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2104      	movs	r1, #4
 8001916:	2052      	movs	r0, #82	; 0x52
 8001918:	f001 fdd7 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800191c:	2052      	movs	r0, #82	; 0x52
 800191e:	f001 fdee 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001922:	e108      	b.n	8001b36 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a88      	ldr	r2, [pc, #544]	; (8001b4c <HAL_UART_MspInit+0x2b8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d165      	bne.n	80019fa <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 800192e:	4b85      	ldr	r3, [pc, #532]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001934:	4a83      	ldr	r2, [pc, #524]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001936:	f043 0310 	orr.w	r3, r3, #16
 800193a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800193e:	4b81      	ldr	r3, [pc, #516]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b7d      	ldr	r3, [pc, #500]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001952:	4a7c      	ldr	r2, [pc, #496]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195c:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 800196a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800197c:	2304      	movs	r3, #4
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001984:	4619      	mov	r1, r3
 8001986:	4872      	ldr	r0, [pc, #456]	; (8001b50 <HAL_UART_MspInit+0x2bc>)
 8001988:	f004 f8f0 	bl	8005b6c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 800198c:	4b71      	ldr	r3, [pc, #452]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 800198e:	4a72      	ldr	r2, [pc, #456]	; (8001b58 <HAL_UART_MspInit+0x2c4>)
 8001990:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001992:	4b70      	ldr	r3, [pc, #448]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 8001994:	2229      	movs	r2, #41	; 0x29
 8001996:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001998:	4b6e      	ldr	r3, [pc, #440]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199e:	4b6d      	ldr	r3, [pc, #436]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a4:	4b6b      	ldr	r3, [pc, #428]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ac:	4b69      	ldr	r3, [pc, #420]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b2:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80019b8:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c0:	4b64      	ldr	r3, [pc, #400]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019cc:	4861      	ldr	r0, [pc, #388]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019ce:	f001 fdb1 	bl	8003534 <HAL_DMA_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_MspInit+0x148>
      Error_Handler();
 80019d8:	f7ff fe92 	bl	8001700 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a5d      	ldr	r2, [pc, #372]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019e0:	679a      	str	r2, [r3, #120]	; 0x78
 80019e2:	4a5c      	ldr	r2, [pc, #368]	; (8001b54 <HAL_UART_MspInit+0x2c0>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2101      	movs	r1, #1
 80019ec:	2025      	movs	r0, #37	; 0x25
 80019ee:	f001 fd6c 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019f2:	2025      	movs	r0, #37	; 0x25
 80019f4:	f001 fd83 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 80019f8:	e09d      	b.n	8001b36 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a57      	ldr	r2, [pc, #348]	; (8001b5c <HAL_UART_MspInit+0x2c8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d15d      	bne.n	8001ac0 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a04:	4b4f      	ldr	r3, [pc, #316]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a0a:	4a4e      	ldr	r2, [pc, #312]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a14:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a46      	ldr	r2, [pc, #280]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001a40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a52:	2307      	movs	r3, #7
 8001a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	483c      	ldr	r0, [pc, #240]	; (8001b50 <HAL_UART_MspInit+0x2bc>)
 8001a5e:	f004 f885 	bl	8005b6c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a64:	4a3f      	ldr	r2, [pc, #252]	; (8001b64 <HAL_UART_MspInit+0x2d0>)
 8001a66:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a6a:	222d      	movs	r2, #45	; 0x2d
 8001a6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6e:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a74:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a80:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a94:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001aa2:	482f      	ldr	r0, [pc, #188]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001aa4:	f001 fd46 	bl	8003534 <HAL_DMA_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001aae:	f7ff fe27 	bl	8001700 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a2a      	ldr	r2, [pc, #168]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001ab6:	679a      	str	r2, [r3, #120]	; 0x78
 8001ab8:	4a29      	ldr	r2, [pc, #164]	; (8001b60 <HAL_UART_MspInit+0x2cc>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001abe:	e03a      	b.n	8001b36 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <HAL_UART_MspInit+0x2d4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d135      	bne.n	8001b36 <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001ad2:	f043 0320 	orr.w	r3, r3, #32
 8001ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_UART_MspInit+0x2b0>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001b06:	23c0      	movs	r3, #192	; 0xc0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001b16:	2307      	movs	r3, #7
 8001b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4812      	ldr	r0, [pc, #72]	; (8001b6c <HAL_UART_MspInit+0x2d8>)
 8001b22:	f004 f823 	bl	8005b6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2102      	movs	r1, #2
 8001b2a:	2047      	movs	r0, #71	; 0x47
 8001b2c:	f001 fccd 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b30:	2047      	movs	r0, #71	; 0x47
 8001b32:	f001 fce4 	bl	80034fe <HAL_NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3740      	adds	r7, #64	; 0x40
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40007800 	.word	0x40007800
 8001b44:	58024400 	.word	0x58024400
 8001b48:	58021400 	.word	0x58021400
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	58020400 	.word	0x58020400
 8001b54:	240007dc 	.word	0x240007dc
 8001b58:	40020058 	.word	0x40020058
 8001b5c:	40004800 	.word	0x40004800
 8001b60:	2400012c 	.word	0x2400012c
 8001b64:	40020440 	.word	0x40020440
 8001b68:	40011400 	.word	0x40011400
 8001b6c:	58020800 	.word	0x58020800

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <SysTick_Handler+0x2c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <SysTick_Handler+0x2c>)
 8001bce:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SysTick_Handler+0x2c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d904      	bls.n	8001be2 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Handler+0x2c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001bde:	f7fe fe1b 	bl	8000818 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f000 f9b1 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	24000868 	.word	0x24000868

08001bf0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA1_Stream2_IRQHandler+0x10>)
 8001bf6:	f002 fca7 	bl	8004548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	240006a8 	.word	0x240006a8

08001c04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <DMA1_Stream3_IRQHandler+0x24>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <DMA1_Stream3_IRQHandler+0x24>)
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <DMA1_Stream3_IRQHandler+0x28>)
 8001c1c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c1e:	4804      	ldr	r0, [pc, #16]	; (8001c30 <DMA1_Stream3_IRQHandler+0x2c>)
 8001c20:	f002 fc92 	bl	8004548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	24000680 	.word	0x24000680
 8001c2c:	24000738 	.word	0x24000738
 8001c30:	240007dc 	.word	0x240007dc

08001c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <USART1_IRQHandler+0x10>)
 8001c3a:	f007 fd6d 	bl	8009718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000878 	.word	0x24000878

08001c48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM7_IRQHandler+0x10>)
 8001c4e:	f007 f811 	bl	8008c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	24000a80 	.word	0x24000a80

08001c5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001c60:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <DMA2_Stream2_IRQHandler+0xa8>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d135      	bne.n	8001cd4 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <DMA2_Stream2_IRQHandler+0xac>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	b2d1      	uxtb	r1, r2
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <DMA2_Stream2_IRQHandler+0xac>)
 8001c72:	7011      	strb	r1, [r2, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <DMA2_Stream2_IRQHandler+0xb0>)
 8001c78:	7819      	ldrb	r1, [r3, #0]
 8001c7a:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <DMA2_Stream2_IRQHandler+0xb4>)
 8001c7c:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <DMA2_Stream2_IRQHandler+0xac>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d926      	bls.n	8001cd4 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <DMA2_Stream2_IRQHandler+0xac>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <DMA2_Stream2_IRQHandler+0xa8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <DMA2_Stream2_IRQHandler+0xb4>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <DMA2_Stream2_IRQHandler+0xb4>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <DMA2_Stream2_IRQHandler+0xb8>)
 8001ca6:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <DMA2_Stream2_IRQHandler+0xb4>)
 8001caa:	789b      	ldrb	r3, [r3, #2]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <DMA2_Stream2_IRQHandler+0xb4>)
 8001cb2:	78db      	ldrb	r3, [r3, #3]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <DMA2_Stream2_IRQHandler+0xbc>)
 8001cbc:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <DMA2_Stream2_IRQHandler+0xb4>)
 8001cc0:	791b      	ldrb	r3, [r3, #4]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <DMA2_Stream2_IRQHandler+0xb4>)
 8001cc8:	795b      	ldrb	r3, [r3, #5]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <DMA2_Stream2_IRQHandler+0xc0>)
 8001cd2:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <DMA2_Stream2_IRQHandler+0xb0>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2baa      	cmp	r3, #170	; 0xaa
 8001cda:	d106      	bne.n	8001cea <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <DMA2_Stream2_IRQHandler+0xa8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e006      	b.n	8001cf8 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <DMA2_Stream2_IRQHandler+0xa8>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d002      	beq.n	8001cf8 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <DMA2_Stream2_IRQHandler+0xa8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <DMA2_Stream2_IRQHandler+0xc4>)
 8001cfa:	f002 fc25 	bl	8004548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24000054 	.word	0x24000054
 8001d08:	2400076c 	.word	0x2400076c
 8001d0c:	24000a14 	.word	0x24000a14
 8001d10:	24000678 	.word	0x24000678
 8001d14:	24000914 	.word	0x24000914
 8001d18:	24000918 	.word	0x24000918
 8001d1c:	24000a48 	.word	0x24000a48
 8001d20:	2400012c 	.word	0x2400012c

08001d24 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART6_IRQHandler+0x10>)
 8001d2a:	f007 fcf5 	bl	8009718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000988 	.word	0x24000988

08001d38 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <UART7_IRQHandler+0x10>)
 8001d3e:	f007 fceb 	bl	8009718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	24000088 	.word	0x24000088

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <SystemInit+0xac>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <SystemInit+0xac>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d60:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <SystemInit+0xb0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <SystemInit+0xb0>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <SystemInit+0xb0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <SystemInit+0xb0>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4921      	ldr	r1, [pc, #132]	; (8001dfc <SystemInit+0xb0>)
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <SystemInit+0xb4>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <SystemInit+0xb0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <SystemInit+0xb0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <SystemInit+0xb0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <SystemInit+0xb0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <SystemInit+0xb0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <SystemInit+0xb0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <SystemInit+0xb0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <SystemInit+0xb0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <SystemInit+0xb0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <SystemInit+0xb0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <SystemInit+0xb0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <SystemInit+0xb0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <SystemInit+0xb0>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <SystemInit+0xb0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <SystemInit+0xb8>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <SystemInit+0xbc>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dde:	d202      	bcs.n	8001de6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <SystemInit+0xc0>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SystemInit+0xac>)
 8001de8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e04:	5c001000 	.word	0x5c001000
 8001e08:	ffff0000 	.word	0xffff0000
 8001e0c:	51008108 	.word	0x51008108

08001e10 <Reset_Handler>:
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e48 <LoopFillZerobss+0x14>
 8001e14:	2100      	movs	r1, #0
 8001e16:	e003      	b.n	8001e20 <LoopCopyDataInit>

08001e18 <CopyDataInit>:
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <LoopFillZerobss+0x18>)
 8001e1a:	585b      	ldr	r3, [r3, r1]
 8001e1c:	5043      	str	r3, [r0, r1]
 8001e1e:	3104      	adds	r1, #4

08001e20 <LoopCopyDataInit>:
 8001e20:	480b      	ldr	r0, [pc, #44]	; (8001e50 <LoopFillZerobss+0x1c>)
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <LoopFillZerobss+0x20>)
 8001e24:	1842      	adds	r2, r0, r1
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3f6      	bcc.n	8001e18 <CopyDataInit>
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <LoopFillZerobss+0x24>)
 8001e2c:	e002      	b.n	8001e34 <LoopFillZerobss>

08001e2e <FillZerobss>:
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f842 3b04 	str.w	r3, [r2], #4

08001e34 <LoopFillZerobss>:
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <LoopFillZerobss+0x28>)
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3f9      	bcc.n	8001e2e <FillZerobss>
 8001e3a:	f7ff ff87 	bl	8001d4c <SystemInit>
 8001e3e:	f00a fde1 	bl	800ca04 <__libc_init_array>
 8001e42:	f7ff f817 	bl	8000e74 <main>
 8001e46:	4770      	bx	lr
 8001e48:	24080000 	.word	0x24080000
 8001e4c:	0800caac 	.word	0x0800caac
 8001e50:	24000000 	.word	0x24000000
 8001e54:	24000034 	.word	0x24000034
 8001e58:	24000038 	.word	0x24000038
 8001e5c:	24000afc 	.word	0x24000afc

08001e60 <ADC3_IRQHandler>:
 8001e60:	e7fe      	b.n	8001e60 <ADC3_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	f001 fb22 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e70:	f004 fe28 	bl	8006ac4 <HAL_RCC_GetSysClockFreq>
 8001e74:	4601      	mov	r1, r0
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_Init+0x68>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_Init+0x6c>)
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa21 f303 	lsr.w	r3, r1, r3
 8001e8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_Init+0x68>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_Init+0x6c>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <HAL_Init+0x70>)
 8001ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_Init+0x74>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f000 f814 	bl	8001edc <HAL_InitTick>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e002      	b.n	8001ec4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ebe:	f7ff fc27 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	0800ca84 	.word	0x0800ca84
 8001ed4:	24000028 	.word	0x24000028
 8001ed8:	24000024 	.word	0x24000024

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_InitTick+0x60>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e021      	b.n	8001f34 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_InitTick+0x64>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_InitTick+0x60>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fb07 	bl	800351a <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f001 fad1 	bl	80034ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x68>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	24000030 	.word	0x24000030
 8001f40:	24000024 	.word	0x24000024
 8001f44:	2400002c 	.word	0x2400002c

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	24000030 	.word	0x24000030
 8001f6c:	24000af8 	.word	0x24000af8

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	24000af8 	.word	0x24000af8

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_Delay+0x40>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	24000030 	.word	0x24000030

08001fcc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetREVID+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	5c001000 	.word	0x5c001000

08001fe4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	4904      	ldr	r1, [pc, #16]	; (800200c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	58000400 	.word	0x58000400

08002010 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	609a      	str	r2, [r3, #8]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002078:	b490      	push	{r4, r7}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3360      	adds	r3, #96	; 0x60
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	430b      	orrs	r3, r1
 80020a4:	4313      	orrs	r3, r2
 80020a6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc90      	pop	{r4, r7}
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	431a      	orrs	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020e4:	b490      	push	{r4, r7}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3360      	adds	r3, #96	; 0x60
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4313      	orrs	r3, r2
 8002108:	6023      	str	r3, [r4, #0]
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bc90      	pop	{r4, r7}
 8002112:	4770      	bx	lr

08002114 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800213a:	b490      	push	{r4, r7}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3330      	adds	r3, #48	; 0x30
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	4413      	add	r3, r2
 8002158:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800215a:	6822      	ldr	r2, [r4, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	211f      	movs	r1, #31
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	f003 011f 	and.w	r1, r3, #31
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bc90      	pop	{r4, r7}
 800218a:	4770      	bx	lr

0800218c <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60da      	str	r2, [r3, #12]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021b2:	b490      	push	{r4, r7}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3314      	adds	r3, #20
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	0e5b      	lsrs	r3, r3, #25
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	4413      	add	r3, r2
 80021d0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021d2:	6822      	ldr	r2, [r4, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0d1b      	lsrs	r3, r3, #20
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2107      	movs	r1, #7
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	401a      	ands	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	0d1b      	lsrs	r3, r3, #20
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc90      	pop	{r4, r7}
 8002200:	4770      	bx	lr
	...

08002204 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800221c:	43db      	mvns	r3, r3
 800221e:	401a      	ands	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0318 	and.w	r3, r3, #24
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002228:	40d9      	lsrs	r1, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	400b      	ands	r3, r1
 800222e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002232:	431a      	orrs	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	000fffff 	.word	0x000fffff

0800224c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 031f 	and.w	r3, r3, #31
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6093      	str	r3, [r2, #8]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	5fffffc0 	.word	0x5fffffc0

0800228c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800229c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a0:	d101      	bne.n	80022a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	6fffffc0 	.word	0x6fffffc0

080022dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f0:	d101      	bne.n	80022f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <LL_ADC_Enable+0x24>)
 8002312:	4013      	ands	r3, r2
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	7fffffc0 	.word	0x7fffffc0

0800232c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <LL_ADC_IsEnabled+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_IsEnabled+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <LL_ADC_REG_StartConversion+0x24>)
 8002362:	4013      	ands	r3, r2
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	7fffffc0 	.word	0x7fffffc0

0800237c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b04      	cmp	r3, #4
 800238e:	d101      	bne.n	8002394 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d101      	bne.n	80023ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e18e      	b.n	8002700 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff f9a7 	bl	8001744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff3f 	bl	800228c <LL_ADC_IsDeepPowerDownEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff25 	bl	8002268 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff5a 	bl	80022dc <LL_ADC_IsInternalRegulatorEnabled>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d113      	bne.n	8002456 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff3e 	bl	80022b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002438:	4b9a      	ldr	r3, [pc, #616]	; (80026a4 <HAL_ADC_Init+0x2dc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	4a9a      	ldr	r2, [pc, #616]	; (80026a8 <HAL_ADC_Init+0x2e0>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002448:	e002      	b.n	8002450 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3b01      	subs	r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f9      	bne.n	800244a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff3e 	bl	80022dc <LL_ADC_IsInternalRegulatorEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff78 	bl	800237c <LL_ADC_REG_IsConversionOngoing>
 800248c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 8129 	bne.w	80026ee <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 8125 	bne.w	80026ee <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024ac:	f043 0202 	orr.w	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff37 	bl	800232c <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d136      	bne.n	8002532 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a78      	ldr	r2, [pc, #480]	; (80026ac <HAL_ADC_Init+0x2e4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_ADC_Init+0x110>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a77      	ldr	r2, [pc, #476]	; (80026b0 <HAL_ADC_Init+0x2e8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d10e      	bne.n	80024f6 <HAL_ADC_Init+0x12e>
 80024d8:	4874      	ldr	r0, [pc, #464]	; (80026ac <HAL_ADC_Init+0x2e4>)
 80024da:	f7ff ff27 	bl	800232c <LL_ADC_IsEnabled>
 80024de:	4604      	mov	r4, r0
 80024e0:	4873      	ldr	r0, [pc, #460]	; (80026b0 <HAL_ADC_Init+0x2e8>)
 80024e2:	f7ff ff23 	bl	800232c <LL_ADC_IsEnabled>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4323      	orrs	r3, r4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e008      	b.n	8002508 <HAL_ADC_Init+0x140>
 80024f6:	486f      	ldr	r0, [pc, #444]	; (80026b4 <HAL_ADC_Init+0x2ec>)
 80024f8:	f7ff ff18 	bl	800232c <LL_ADC_IsEnabled>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d012      	beq.n	8002532 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a66      	ldr	r2, [pc, #408]	; (80026ac <HAL_ADC_Init+0x2e4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_ADC_Init+0x158>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <HAL_ADC_Init+0x2e8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_ADC_Init+0x15c>
 8002520:	4a65      	ldr	r2, [pc, #404]	; (80026b8 <HAL_ADC_Init+0x2f0>)
 8002522:	e000      	b.n	8002526 <HAL_ADC_Init+0x15e>
 8002524:	4a65      	ldr	r2, [pc, #404]	; (80026bc <HAL_ADC_Init+0x2f4>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4619      	mov	r1, r3
 800252c:	4610      	mov	r0, r2
 800252e:	f7ff fd6f 	bl	8002010 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002532:	f7ff fd4b 	bl	8001fcc <HAL_GetREVID>
 8002536:	4602      	mov	r2, r0
 8002538:	f241 0303 	movw	r3, #4099	; 0x1003
 800253c:	429a      	cmp	r2, r3
 800253e:	d914      	bls.n	800256a <HAL_ADC_Init+0x1a2>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b10      	cmp	r3, #16
 8002546:	d110      	bne.n	800256a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7d5b      	ldrb	r3, [r3, #21]
 800254c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002552:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002558:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7f1b      	ldrb	r3, [r3, #28]
 800255e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002560:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002562:	f043 030c 	orr.w	r3, r3, #12
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e00d      	b.n	8002586 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7d5b      	ldrb	r3, [r3, #21]
 800256e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002574:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800257a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7f1b      	ldrb	r3, [r3, #28]
 8002580:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7f1b      	ldrb	r3, [r3, #28]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d106      	bne.n	800259c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	3b01      	subs	r3, #1
 8002594:	045b      	lsls	r3, r3, #17
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <HAL_ADC_Init+0x2f8>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fed3 	bl	800237c <LL_ADC_REG_IsConversionOngoing>
 80025d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fee0 	bl	80023a2 <LL_ADC_INJ_IsConversionOngoing>
 80025e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d14a      	bne.n	8002680 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d147      	bne.n	8002680 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7d1b      	ldrb	r3, [r3, #20]
 80025f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_ADC_Init+0x2fc>)
 8002606:	4013      	ands	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	69b9      	ldr	r1, [r7, #24]
 800260e:	430b      	orrs	r3, r1
 8002610:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002618:	2b01      	cmp	r3, #1
 800261a:	d11b      	bne.n	8002654 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_ADC_Init+0x300>)
 800262a:	4013      	ands	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002630:	3a01      	subs	r2, #1
 8002632:	0411      	lsls	r1, r2, #16
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800263e:	4311      	orrs	r1, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002644:	430a      	orrs	r2, r1
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	e007      	b.n	8002664 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fd52 	bl	8003124 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d121      	bne.n	80026cc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f023 010f 	bic.w	r1, r3, #15
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
 80026a0:	e01c      	b.n	80026dc <HAL_ADC_Init+0x314>
 80026a2:	bf00      	nop
 80026a4:	24000024 	.word	0x24000024
 80026a8:	053e2d63 	.word	0x053e2d63
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40022100 	.word	0x40022100
 80026b4:	58026000 	.word	0x58026000
 80026b8:	40022300 	.word	0x40022300
 80026bc:	58026300 	.word	0x58026300
 80026c0:	fff0c003 	.word	0xfff0c003
 80026c4:	ffffbffc 	.word	0xffffbffc
 80026c8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 020f 	bic.w	r2, r2, #15
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f023 0303 	bic.w	r3, r3, #3
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
 80026ec:	e007      	b.n	80026fe <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3724      	adds	r7, #36	; 0x24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd90      	pop	{r4, r7, pc}

08002708 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a55      	ldr	r2, [pc, #340]	; (8002870 <HAL_ADC_Start_DMA+0x168>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <HAL_ADC_Start_DMA+0x20>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_ADC_Start_DMA+0x16c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d101      	bne.n	800272c <HAL_ADC_Start_DMA+0x24>
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_ADC_Start_DMA+0x170>)
 800272a:	e000      	b.n	800272e <HAL_ADC_Start_DMA+0x26>
 800272c:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_ADC_Start_DMA+0x174>)
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fd8c 	bl	800224c <LL_ADC_GetMultimode>
 8002734:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fe1e 	bl	800237c <LL_ADC_REG_IsConversionOngoing>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f040 808c 	bne.w	8002860 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_ADC_Start_DMA+0x4e>
 8002752:	2302      	movs	r3, #2
 8002754:	e087      	b.n	8002866 <HAL_ADC_Start_DMA+0x15e>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b05      	cmp	r3, #5
 8002768:	d002      	beq.n	8002770 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b09      	cmp	r3, #9
 800276e:	d170      	bne.n	8002852 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fbbf 	bl	8002ef4 <ADC_Enable>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d163      	bne.n	8002848 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002784:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <HAL_ADC_Start_DMA+0x178>)
 8002786:	4013      	ands	r3, r2
 8002788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_ADC_Start_DMA+0x16c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d002      	beq.n	80027a0 <HAL_ADC_Start_DMA+0x98>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	e000      	b.n	80027a2 <HAL_ADC_Start_DMA+0x9a>
 80027a0:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_ADC_Start_DMA+0x168>)
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d002      	beq.n	80027b0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f023 0206 	bic.w	r2, r3, #6
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	659a      	str	r2, [r3, #88]	; 0x58
 80027d4:	e002      	b.n	80027dc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	4a28      	ldr	r2, [pc, #160]	; (8002884 <HAL_ADC_Start_DMA+0x17c>)
 80027e2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <HAL_ADC_Start_DMA+0x180>)
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	4a26      	ldr	r2, [pc, #152]	; (800288c <HAL_ADC_Start_DMA+0x184>)
 80027f2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	221c      	movs	r2, #28
 80027fa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0210 	orr.w	r2, r2, #16
 8002812:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f7ff fcb4 	bl	800218c <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3340      	adds	r3, #64	; 0x40
 800282e:	4619      	mov	r1, r3
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f001 f9da 	bl	8003bec <HAL_DMA_Start_IT>
 8002838:	4603      	mov	r3, r0
 800283a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fd87 	bl	8002354 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002846:	e00d      	b.n	8002864 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002850:	e008      	b.n	8002864 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800285e:	e001      	b.n	8002864 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002860:	2302      	movs	r3, #2
 8002862:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002864:	7dfb      	ldrb	r3, [r7, #23]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000
 8002874:	40022100 	.word	0x40022100
 8002878:	40022300 	.word	0x40022300
 800287c:	58026300 	.word	0x58026300
 8002880:	fffff0fe 	.word	0xfffff0fe
 8002884:	08002ffd 	.word	0x08002ffd
 8002888:	080030d5 	.word	0x080030d5
 800288c:	080030f1 	.word	0x080030f1

08002890 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b099      	sub	sp, #100	; 0x64
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a99      	ldr	r2, [pc, #612]	; (8002b4c <HAL_ADC_ConfigChannel+0x280>)
 80028e6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x2a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e2e6      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x5f8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fd3a 	bl	800237c <LL_ADC_REG_IsConversionOngoing>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 82cb 	bne.w	8002ea6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002918:	2b00      	cmp	r3, #0
 800291a:	d108      	bne.n	800292e <HAL_ADC_ConfigChannel+0x62>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	2201      	movs	r2, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	e00f      	b.n	800294e <HAL_ADC_ConfigChannel+0x82>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800293c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2201      	movs	r2, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	69d1      	ldr	r1, [r2, #28]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	f7ff fbe6 	bl	800213a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fd02 	bl	800237c <LL_ADC_REG_IsConversionOngoing>
 8002978:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fd0f 	bl	80023a2 <LL_ADC_INJ_IsConversionOngoing>
 8002984:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 80b3 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800298e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 80af 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff fc05 	bl	80021b2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029a8:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <HAL_ADC_ConfigChannel+0x284>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80029b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b4:	d10b      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x102>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	e01d      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x13e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x128>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	e00a      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x13e>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d027      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6919      	ldr	r1, [r3, #16]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a22:	f7ff fb29 	bl	8002078 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6919      	ldr	r1, [r3, #16]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	7e5b      	ldrb	r3, [r3, #25]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d102      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x170>
 8002a36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a3a:	e000      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x172>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f7ff fb50 	bl	80020e4 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6919      	ldr	r1, [r3, #16]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	7e1b      	ldrb	r3, [r3, #24]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x18e>
 8002a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a58:	e000      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x190>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f7ff fb28 	bl	80020b2 <LL_ADC_SetDataRightShift>
 8002a62:	e047      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d107      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d107      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aaa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ace:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	069b      	lsls	r3, r3, #26
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fc17 	bl	800232c <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 81d9 	bne.w	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f7ff fb76 	bl	8002204 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <HAL_ADC_ConfigChannel+0x280>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	f040 8101 	bne.w	8002d26 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10f      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x288>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	bf94      	ite	ls
 8002b44:	2301      	movls	r3, #1
 8002b46:	2300      	movhi	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e016      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x2ae>
 8002b4c:	47ff0000 	.word	0x47ff0000
 8002b50:	5c001000 	.word	0x5c001000
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d064      	beq.n	8002c48 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d107      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x2ce>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	069b      	lsls	r3, r3, #26
 8002b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b98:	e00e      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x2ec>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x30c>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	e010      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x32e>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	ea42 0103 	orr.w	r1, r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x354>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 021f 	and.w	r2, r3, #31
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	051b      	lsls	r3, r3, #20
 8002c1e:	e011      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x378>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c44:	430b      	orrs	r3, r1
 8002c46:	e069      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d107      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x398>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c62:	e00e      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x3b6>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	61fb      	str	r3, [r7, #28]
  return result;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	069b      	lsls	r3, r3, #26
 8002c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x3d6>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	e010      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x3f8>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	617b      	str	r3, [r7, #20]
  return result;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	ea42 0103 	orr.w	r1, r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x424>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3b1e      	subs	r3, #30
 8002ce8:	051b      	lsls	r3, r3, #20
 8002cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cee:	e014      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x44e>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
  return result;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	3b1e      	subs	r3, #30
 8002d14:	051b      	lsls	r3, r3, #20
 8002d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	6892      	ldr	r2, [r2, #8]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f7ff fa46 	bl	80021b2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f280 80c4 	bge.w	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_ADC_ConfigChannel+0x600>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0x478>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a64      	ldr	r2, [pc, #400]	; (8002ed0 <HAL_ADC_ConfigChannel+0x604>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x47c>
 8002d44:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_ADC_ConfigChannel+0x608>)
 8002d46:	e000      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x47e>
 8002d48:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <HAL_ADC_ConfigChannel+0x60c>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f986 	bl	800205c <LL_ADC_GetCommonPathInternalCh>
 8002d50:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <HAL_ADC_ConfigChannel+0x600>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x49a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5b      	ldr	r2, [pc, #364]	; (8002ed0 <HAL_ADC_ConfigChannel+0x604>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10e      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x4b8>
 8002d66:	4859      	ldr	r0, [pc, #356]	; (8002ecc <HAL_ADC_ConfigChannel+0x600>)
 8002d68:	f7ff fae0 	bl	800232c <LL_ADC_IsEnabled>
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	4858      	ldr	r0, [pc, #352]	; (8002ed0 <HAL_ADC_ConfigChannel+0x604>)
 8002d70:	f7ff fadc 	bl	800232c <LL_ADC_IsEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4323      	orrs	r3, r4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e008      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x4ca>
 8002d84:	4855      	ldr	r0, [pc, #340]	; (8002edc <HAL_ADC_ConfigChannel+0x610>)
 8002d86:	f7ff fad1 	bl	800232c <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d07b      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a50      	ldr	r2, [pc, #320]	; (8002ee0 <HAL_ADC_ConfigChannel+0x614>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d12e      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x536>
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d129      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <HAL_ADC_ConfigChannel+0x610>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d17f      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a43      	ldr	r2, [pc, #268]	; (8002ecc <HAL_ADC_ConfigChannel+0x600>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x500>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a42      	ldr	r2, [pc, #264]	; (8002ed0 <HAL_ADC_ConfigChannel+0x604>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x504>
 8002dcc:	4a41      	ldr	r2, [pc, #260]	; (8002ed4 <HAL_ADC_ConfigChannel+0x608>)
 8002dce:	e000      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x506>
 8002dd0:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_ADC_ConfigChannel+0x60c>)
 8002dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f7ff f92b 	bl	8002036 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002de0:	4b40      	ldr	r3, [pc, #256]	; (8002ee4 <HAL_ADC_ConfigChannel+0x618>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	4a40      	ldr	r2, [pc, #256]	; (8002ee8 <HAL_ADC_ConfigChannel+0x61c>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002df2:	e002      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e00:	e05a      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a39      	ldr	r2, [pc, #228]	; (8002eec <HAL_ADC_ConfigChannel+0x620>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d11e      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x57e>
 8002e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d119      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a30      	ldr	r2, [pc, #192]	; (8002edc <HAL_ADC_ConfigChannel+0x610>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d14b      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <HAL_ADC_ConfigChannel+0x600>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x568>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a28      	ldr	r2, [pc, #160]	; (8002ed0 <HAL_ADC_ConfigChannel+0x604>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x56c>
 8002e34:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_ADC_ConfigChannel+0x608>)
 8002e36:	e000      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x56e>
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <HAL_ADC_ConfigChannel+0x60c>)
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f7ff f8f7 	bl	8002036 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e48:	e036      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <HAL_ADC_ConfigChannel+0x624>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d131      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
 8002e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d12c      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_ADC_ConfigChannel+0x610>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d127      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <HAL_ADC_ConfigChannel+0x600>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_ADC_ConfigChannel+0x5b0>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_ADC_ConfigChannel+0x604>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x5b4>
 8002e7c:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <HAL_ADC_ConfigChannel+0x608>)
 8002e7e:	e000      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x5b6>
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_ADC_ConfigChannel+0x60c>)
 8002e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7ff f8d3 	bl	8002036 <LL_ADC_SetCommonPathInternalCh>
 8002e90:	e012      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ea4:	e008      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3764      	adds	r7, #100	; 0x64
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40022100 	.word	0x40022100
 8002ed4:	40022300 	.word	0x40022300
 8002ed8:	58026300 	.word	0x58026300
 8002edc:	58026000 	.word	0x58026000
 8002ee0:	cb840000 	.word	0xcb840000
 8002ee4:	24000024 	.word	0x24000024
 8002ee8:	053e2d63 	.word	0x053e2d63
 8002eec:	c7520000 	.word	0xc7520000
 8002ef0:	cfb80000 	.word	0xcfb80000

08002ef4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fa13 	bl	800232c <LL_ADC_IsEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d167      	bne.n	8002fdc <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <ADC_Enable+0xf4>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	f043 0210 	orr.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e053      	b.n	8002fde <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f9e2 	bl	8002304 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f40:	f7ff f816 	bl	8001f70 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a28      	ldr	r2, [pc, #160]	; (8002fec <ADC_Enable+0xf8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <ADC_Enable+0x66>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <ADC_Enable+0xfc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <ADC_Enable+0x6a>
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <ADC_Enable+0x100>)
 8002f5c:	e000      	b.n	8002f60 <ADC_Enable+0x6c>
 8002f5e:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <ADC_Enable+0x104>)
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f973 	bl	800224c <LL_ADC_GetMultimode>
 8002f66:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <ADC_Enable+0xfc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d002      	beq.n	8002f78 <ADC_Enable+0x84>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e000      	b.n	8002f7a <ADC_Enable+0x86>
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <ADC_Enable+0xf8>)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d025      	beq.n	8002fce <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d129      	bne.n	8002fdc <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f88:	e021      	b.n	8002fce <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f9cc 	bl	800232c <LL_ADC_IsEnabled>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d104      	bne.n	8002fa4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f9b0 	bl	8002304 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fa4:	f7fe ffe4 	bl	8001f70 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d90d      	bls.n	8002fce <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	f043 0210 	orr.w	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	f043 0201 	orr.w	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e007      	b.n	8002fde <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d1d6      	bne.n	8002f8a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	8000003f 	.word	0x8000003f
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40022100 	.word	0x40022100
 8002ff4:	40022300 	.word	0x40022300
 8002ff8:	58026300 	.word	0x58026300

08002ffc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003012:	2b00      	cmp	r3, #0
 8003014:	d14b      	bne.n	80030ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d021      	beq.n	8003074 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f86d 	bl	8002114 <LL_ADC_REG_IsTriggerSourceSWStart>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d032      	beq.n	80030a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d12b      	bne.n	80030a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d11f      	bne.n	80030a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
 8003072:	e018      	b.n	80030a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d111      	bne.n	80030a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff fbf2 	bl	8002890 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030ac:	e00e      	b.n	80030cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7ff fbfc 	bl	80028b8 <HAL_ADC_ErrorCallback>
}
 80030c0:	e004      	b.n	80030cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff fbde 	bl	80028a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	f043 0204 	orr.w	r2, r3, #4
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fbce 	bl	80028b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a70      	ldr	r2, [pc, #448]	; (80032f4 <ADC_ConfigureBoostMode+0x1d0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <ADC_ConfigureBoostMode+0x1c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6f      	ldr	r2, [pc, #444]	; (80032f8 <ADC_ConfigureBoostMode+0x1d4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d109      	bne.n	8003154 <ADC_ConfigureBoostMode+0x30>
 8003140:	4b6e      	ldr	r3, [pc, #440]	; (80032fc <ADC_ConfigureBoostMode+0x1d8>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e008      	b.n	8003166 <ADC_ConfigureBoostMode+0x42>
 8003154:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <ADC_ConfigureBoostMode+0x1dc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01a      	beq.n	80031a0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800316a:	f003 fe1d 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 800316e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003178:	d006      	beq.n	8003188 <ADC_ConfigureBoostMode+0x64>
 800317a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800317e:	d00b      	beq.n	8003198 <ADC_ConfigureBoostMode+0x74>
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d000      	beq.n	8003188 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003186:	e05d      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	60fb      	str	r3, [r7, #12]
        break;
 8003196:	e055      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	60fb      	str	r3, [r7, #12]
        break;
 800319e:	e051      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031a4:	f004 fd3a 	bl	8007c1c <HAL_RCCEx_GetPeriphCLKFreq>
 80031a8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031b2:	d02a      	beq.n	800320a <ADC_ConfigureBoostMode+0xe6>
 80031b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031b8:	d813      	bhi.n	80031e2 <ADC_ConfigureBoostMode+0xbe>
 80031ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031be:	d024      	beq.n	800320a <ADC_ConfigureBoostMode+0xe6>
 80031c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031c4:	d806      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0xb0>
 80031c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031ca:	d01e      	beq.n	800320a <ADC_ConfigureBoostMode+0xe6>
 80031cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031d0:	d01b      	beq.n	800320a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80031d2:	e037      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80031d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d8:	d017      	beq.n	800320a <ADC_ConfigureBoostMode+0xe6>
 80031da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031de:	d014      	beq.n	800320a <ADC_ConfigureBoostMode+0xe6>
        break;
 80031e0:	e030      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80031e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031e6:	d021      	beq.n	800322c <ADC_ConfigureBoostMode+0x108>
 80031e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031ec:	d806      	bhi.n	80031fc <ADC_ConfigureBoostMode+0xd8>
 80031ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031f2:	d013      	beq.n	800321c <ADC_ConfigureBoostMode+0xf8>
 80031f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f8:	d014      	beq.n	8003224 <ADC_ConfigureBoostMode+0x100>
        break;
 80031fa:	e023      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80031fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003200:	d018      	beq.n	8003234 <ADC_ConfigureBoostMode+0x110>
 8003202:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003206:	d019      	beq.n	800323c <ADC_ConfigureBoostMode+0x118>
        break;
 8003208:	e01c      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0c9b      	lsrs	r3, r3, #18
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	60fb      	str	r3, [r7, #12]
        break;
 800321a:	e013      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
      break;
 8003222:	e00f      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	60fb      	str	r3, [r7, #12]
        break;
 800322a:	e00b      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	60fb      	str	r3, [r7, #12]
        break;
 8003232:	e007      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	09db      	lsrs	r3, r3, #7
 8003238:	60fb      	str	r3, [r7, #12]
        break;
 800323a:	e003      	b.n	8003244 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	60fb      	str	r3, [r7, #12]
        break;
 8003242:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003244:	f7fe fec2 	bl	8001fcc <HAL_GetREVID>
 8003248:	4602      	mov	r2, r0
 800324a:	f241 0303 	movw	r3, #4099	; 0x1003
 800324e:	429a      	cmp	r2, r3
 8003250:	d815      	bhi.n	800327e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <ADC_ConfigureBoostMode+0x1e0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d908      	bls.n	800326c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003268:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800326a:	e03e      	b.n	80032ea <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327a:	609a      	str	r2, [r3, #8]
}
 800327c:	e035      	b.n	80032ea <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a20      	ldr	r2, [pc, #128]	; (8003308 <ADC_ConfigureBoostMode+0x1e4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d808      	bhi.n	800329e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	e025      	b.n	80032ea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a1a      	ldr	r2, [pc, #104]	; (800330c <ADC_ConfigureBoostMode+0x1e8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d80a      	bhi.n	80032bc <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b8:	609a      	str	r2, [r3, #8]
}
 80032ba:	e016      	b.n	80032ea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a14      	ldr	r2, [pc, #80]	; (8003310 <ADC_ConfigureBoostMode+0x1ec>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d80a      	bhi.n	80032da <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d6:	609a      	str	r2, [r3, #8]
}
 80032d8:	e007      	b.n	80032ea <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032e8:	609a      	str	r2, [r3, #8]
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40022100 	.word	0x40022100
 80032fc:	40022300 	.word	0x40022300
 8003300:	58026300 	.word	0x58026300
 8003304:	01312d00 	.word	0x01312d00
 8003308:	005f5e10 	.word	0x005f5e10
 800330c:	00bebc20 	.word	0x00bebc20
 8003310:	017d7840 	.word	0x017d7840

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <__NVIC_SetPriorityGrouping+0x40>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 800333e:	4313      	orrs	r3, r2
 8003340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003342:	4a04      	ldr	r2, [pc, #16]	; (8003354 <__NVIC_SetPriorityGrouping+0x40>)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	60d3      	str	r3, [r2, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00
 8003358:	05fa0000 	.word	0x05fa0000

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff29 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034d8:	f7ff ff40 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	6978      	ldr	r0, [r7, #20]
 80034e4:	f7ff ff90 	bl	8003408 <NVIC_EncodePriority>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff5f 	bl	80033b4 <__NVIC_SetPriority>
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff33 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ffa4 	bl	8003470 <SysTick_Config>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7fe fd18 	bl	8001f70 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e316      	b.n	8003b7a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a66      	ldr	r2, [pc, #408]	; (80036ec <HAL_DMA_Init+0x1b8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d04a      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a65      	ldr	r2, [pc, #404]	; (80036f0 <HAL_DMA_Init+0x1bc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d045      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a63      	ldr	r2, [pc, #396]	; (80036f4 <HAL_DMA_Init+0x1c0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d040      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a62      	ldr	r2, [pc, #392]	; (80036f8 <HAL_DMA_Init+0x1c4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d03b      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a60      	ldr	r2, [pc, #384]	; (80036fc <HAL_DMA_Init+0x1c8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d036      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5f      	ldr	r2, [pc, #380]	; (8003700 <HAL_DMA_Init+0x1cc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d031      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <HAL_DMA_Init+0x1d0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d02c      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5c      	ldr	r2, [pc, #368]	; (8003708 <HAL_DMA_Init+0x1d4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d027      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5a      	ldr	r2, [pc, #360]	; (800370c <HAL_DMA_Init+0x1d8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d022      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a59      	ldr	r2, [pc, #356]	; (8003710 <HAL_DMA_Init+0x1dc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d01d      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a57      	ldr	r2, [pc, #348]	; (8003714 <HAL_DMA_Init+0x1e0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d018      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a56      	ldr	r2, [pc, #344]	; (8003718 <HAL_DMA_Init+0x1e4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a54      	ldr	r2, [pc, #336]	; (800371c <HAL_DMA_Init+0x1e8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a53      	ldr	r2, [pc, #332]	; (8003720 <HAL_DMA_Init+0x1ec>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a51      	ldr	r2, [pc, #324]	; (8003724 <HAL_DMA_Init+0x1f0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a50      	ldr	r2, [pc, #320]	; (8003728 <HAL_DMA_Init+0x1f4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_DMA_Init+0xbc>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_DMA_Init+0xbe>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 813b 	beq.w	800386e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a37      	ldr	r2, [pc, #220]	; (80036ec <HAL_DMA_Init+0x1b8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04a      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a36      	ldr	r2, [pc, #216]	; (80036f0 <HAL_DMA_Init+0x1bc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d045      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a34      	ldr	r2, [pc, #208]	; (80036f4 <HAL_DMA_Init+0x1c0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d040      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a33      	ldr	r2, [pc, #204]	; (80036f8 <HAL_DMA_Init+0x1c4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d03b      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_DMA_Init+0x1c8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d036      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a30      	ldr	r2, [pc, #192]	; (8003700 <HAL_DMA_Init+0x1cc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d031      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <HAL_DMA_Init+0x1d0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02c      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <HAL_DMA_Init+0x1d4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d027      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <HAL_DMA_Init+0x1d8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <HAL_DMA_Init+0x1dc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01d      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a28      	ldr	r2, [pc, #160]	; (8003714 <HAL_DMA_Init+0x1e0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a27      	ldr	r2, [pc, #156]	; (8003718 <HAL_DMA_Init+0x1e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <HAL_DMA_Init+0x1e8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_DMA_Init+0x1ec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a22      	ldr	r2, [pc, #136]	; (8003724 <HAL_DMA_Init+0x1f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_DMA_Init+0x1f4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <HAL_DMA_Init+0x186>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e007      	b.n	80036ca <HAL_DMA_Init+0x196>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036ca:	e02f      	b.n	800372c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036cc:	f7fe fc50 	bl	8001f70 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d928      	bls.n	800372c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2203      	movs	r2, #3
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e246      	b.n	8003b7a <HAL_DMA_Init+0x646>
 80036ec:	40020010 	.word	0x40020010
 80036f0:	40020028 	.word	0x40020028
 80036f4:	40020040 	.word	0x40020040
 80036f8:	40020058 	.word	0x40020058
 80036fc:	40020070 	.word	0x40020070
 8003700:	40020088 	.word	0x40020088
 8003704:	400200a0 	.word	0x400200a0
 8003708:	400200b8 	.word	0x400200b8
 800370c:	40020410 	.word	0x40020410
 8003710:	40020428 	.word	0x40020428
 8003714:	40020440 	.word	0x40020440
 8003718:	40020458 	.word	0x40020458
 800371c:	40020470 	.word	0x40020470
 8003720:	40020488 	.word	0x40020488
 8003724:	400204a0 	.word	0x400204a0
 8003728:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1c8      	bne.n	80036cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4b83      	ldr	r3, [pc, #524]	; (8003954 <HAL_DMA_Init+0x420>)
 8003746:	4013      	ands	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003752:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2b04      	cmp	r3, #4
 800377e:	d107      	bne.n	8003790 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4313      	orrs	r3, r2
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003790:	4b71      	ldr	r3, [pc, #452]	; (8003958 <HAL_DMA_Init+0x424>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b71      	ldr	r3, [pc, #452]	; (800395c <HAL_DMA_Init+0x428>)
 8003796:	4013      	ands	r3, r2
 8003798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800379c:	d328      	bcc.n	80037f0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b28      	cmp	r3, #40	; 0x28
 80037a4:	d903      	bls.n	80037ae <HAL_DMA_Init+0x27a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b2e      	cmp	r3, #46	; 0x2e
 80037ac:	d917      	bls.n	80037de <HAL_DMA_Init+0x2aa>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b3e      	cmp	r3, #62	; 0x3e
 80037b4:	d903      	bls.n	80037be <HAL_DMA_Init+0x28a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b42      	cmp	r3, #66	; 0x42
 80037bc:	d90f      	bls.n	80037de <HAL_DMA_Init+0x2aa>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b46      	cmp	r3, #70	; 0x46
 80037c4:	d903      	bls.n	80037ce <HAL_DMA_Init+0x29a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b48      	cmp	r3, #72	; 0x48
 80037cc:	d907      	bls.n	80037de <HAL_DMA_Init+0x2aa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b4e      	cmp	r3, #78	; 0x4e
 80037d4:	d905      	bls.n	80037e2 <HAL_DMA_Init+0x2ae>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b52      	cmp	r3, #82	; 0x52
 80037dc:	d801      	bhi.n	80037e2 <HAL_DMA_Init+0x2ae>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_DMA_Init+0x2b0>
 80037e2:	2300      	movs	r3, #0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0307 	bic.w	r3, r3, #7
 8003806:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b04      	cmp	r3, #4
 8003818:	d117      	bne.n	800384a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00e      	beq.n	800384a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f002 f813 	bl	8005858 <DMA_CheckFifoParam>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2240      	movs	r2, #64	; 0x40
 800383c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e197      	b.n	8003b7a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f001 ff4e 	bl	80056f4 <DMA_CalcBaseAndBitshift>
 8003858:	4603      	mov	r3, r0
 800385a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	223f      	movs	r2, #63	; 0x3f
 8003866:	409a      	lsls	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e0cd      	b.n	8003a0a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a3b      	ldr	r2, [pc, #236]	; (8003960 <HAL_DMA_Init+0x42c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_DMA_Init+0x38a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_DMA_Init+0x430>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <HAL_DMA_Init+0x38a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a38      	ldr	r2, [pc, #224]	; (8003968 <HAL_DMA_Init+0x434>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_DMA_Init+0x38a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a36      	ldr	r2, [pc, #216]	; (800396c <HAL_DMA_Init+0x438>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_DMA_Init+0x38a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a35      	ldr	r2, [pc, #212]	; (8003970 <HAL_DMA_Init+0x43c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_DMA_Init+0x38a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a33      	ldr	r2, [pc, #204]	; (8003974 <HAL_DMA_Init+0x440>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_DMA_Init+0x38a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a32      	ldr	r2, [pc, #200]	; (8003978 <HAL_DMA_Init+0x444>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_DMA_Init+0x38a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a30      	ldr	r2, [pc, #192]	; (800397c <HAL_DMA_Init+0x448>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_DMA_Init+0x38e>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <HAL_DMA_Init+0x390>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8097 	beq.w	80039f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a24      	ldr	r2, [pc, #144]	; (8003960 <HAL_DMA_Init+0x42c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d021      	beq.n	8003918 <HAL_DMA_Init+0x3e4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <HAL_DMA_Init+0x430>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01c      	beq.n	8003918 <HAL_DMA_Init+0x3e4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a21      	ldr	r2, [pc, #132]	; (8003968 <HAL_DMA_Init+0x434>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d017      	beq.n	8003918 <HAL_DMA_Init+0x3e4>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_DMA_Init+0x438>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d012      	beq.n	8003918 <HAL_DMA_Init+0x3e4>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_DMA_Init+0x43c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00d      	beq.n	8003918 <HAL_DMA_Init+0x3e4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <HAL_DMA_Init+0x440>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d008      	beq.n	8003918 <HAL_DMA_Init+0x3e4>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <HAL_DMA_Init+0x444>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <HAL_DMA_Init+0x3e4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_DMA_Init+0x448>)
 8003916:	4293      	cmp	r3, r2
 8003918:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_DMA_Init+0x44c>)
 8003936:	4013      	ands	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d020      	beq.n	8003984 <HAL_DMA_Init+0x450>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d102      	bne.n	8003950 <HAL_DMA_Init+0x41c>
 800394a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800394e:	e01a      	b.n	8003986 <HAL_DMA_Init+0x452>
 8003950:	2300      	movs	r3, #0
 8003952:	e018      	b.n	8003986 <HAL_DMA_Init+0x452>
 8003954:	fe10803f 	.word	0xfe10803f
 8003958:	5c001000 	.word	0x5c001000
 800395c:	ffff0000 	.word	0xffff0000
 8003960:	58025408 	.word	0x58025408
 8003964:	5802541c 	.word	0x5802541c
 8003968:	58025430 	.word	0x58025430
 800396c:	58025444 	.word	0x58025444
 8003970:	58025458 	.word	0x58025458
 8003974:	5802546c 	.word	0x5802546c
 8003978:	58025480 	.word	0x58025480
 800397c:	58025494 	.word	0x58025494
 8003980:	fffe000f 	.word	0xfffe000f
 8003984:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800398c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800399c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <HAL_DMA_Init+0x650>)
 80039cc:	4413      	add	r3, r2
 80039ce:	4a6e      	ldr	r2, [pc, #440]	; (8003b88 <HAL_DMA_Init+0x654>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f001 fe89 	bl	80056f4 <DMA_CalcBaseAndBitshift>
 80039e2:	4603      	mov	r3, r0
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2201      	movs	r2, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	e008      	b.n	8003a0a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2240      	movs	r2, #64	; 0x40
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2203      	movs	r2, #3
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0b7      	b.n	8003b7a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5f      	ldr	r2, [pc, #380]	; (8003b8c <HAL_DMA_Init+0x658>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d072      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5d      	ldr	r2, [pc, #372]	; (8003b90 <HAL_DMA_Init+0x65c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d06d      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a5c      	ldr	r2, [pc, #368]	; (8003b94 <HAL_DMA_Init+0x660>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d068      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5a      	ldr	r2, [pc, #360]	; (8003b98 <HAL_DMA_Init+0x664>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d063      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a59      	ldr	r2, [pc, #356]	; (8003b9c <HAL_DMA_Init+0x668>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d05e      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a57      	ldr	r2, [pc, #348]	; (8003ba0 <HAL_DMA_Init+0x66c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d059      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a56      	ldr	r2, [pc, #344]	; (8003ba4 <HAL_DMA_Init+0x670>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d054      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a54      	ldr	r2, [pc, #336]	; (8003ba8 <HAL_DMA_Init+0x674>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d04f      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a53      	ldr	r2, [pc, #332]	; (8003bac <HAL_DMA_Init+0x678>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d04a      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a51      	ldr	r2, [pc, #324]	; (8003bb0 <HAL_DMA_Init+0x67c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d045      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a50      	ldr	r2, [pc, #320]	; (8003bb4 <HAL_DMA_Init+0x680>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d040      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a4e      	ldr	r2, [pc, #312]	; (8003bb8 <HAL_DMA_Init+0x684>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d03b      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <HAL_DMA_Init+0x688>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d036      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	; (8003bc0 <HAL_DMA_Init+0x68c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d031      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <HAL_DMA_Init+0x690>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d02c      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <HAL_DMA_Init+0x694>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d027      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a47      	ldr	r2, [pc, #284]	; (8003bcc <HAL_DMA_Init+0x698>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a45      	ldr	r2, [pc, #276]	; (8003bd0 <HAL_DMA_Init+0x69c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01d      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a44      	ldr	r2, [pc, #272]	; (8003bd4 <HAL_DMA_Init+0x6a0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a42      	ldr	r2, [pc, #264]	; (8003bd8 <HAL_DMA_Init+0x6a4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a41      	ldr	r2, [pc, #260]	; (8003bdc <HAL_DMA_Init+0x6a8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3f      	ldr	r2, [pc, #252]	; (8003be0 <HAL_DMA_Init+0x6ac>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a3e      	ldr	r2, [pc, #248]	; (8003be4 <HAL_DMA_Init+0x6b0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_DMA_Init+0x5c6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a3c      	ldr	r2, [pc, #240]	; (8003be8 <HAL_DMA_Init+0x6b4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <HAL_DMA_Init+0x5ca>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_DMA_Init+0x5cc>
 8003afe:	2300      	movs	r3, #0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d032      	beq.n	8003b6a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f001 ff23 	bl	8005950 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b80      	cmp	r3, #128	; 0x80
 8003b10:	d102      	bne.n	8003b18 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b2c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_DMA_Init+0x624>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d80c      	bhi.n	8003b58 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f001 ffa0 	bl	8005a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	e008      	b.n	8003b6a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	a7fdabf8 	.word	0xa7fdabf8
 8003b88:	cccccccd 	.word	0xcccccccd
 8003b8c:	40020010 	.word	0x40020010
 8003b90:	40020028 	.word	0x40020028
 8003b94:	40020040 	.word	0x40020040
 8003b98:	40020058 	.word	0x40020058
 8003b9c:	40020070 	.word	0x40020070
 8003ba0:	40020088 	.word	0x40020088
 8003ba4:	400200a0 	.word	0x400200a0
 8003ba8:	400200b8 	.word	0x400200b8
 8003bac:	40020410 	.word	0x40020410
 8003bb0:	40020428 	.word	0x40020428
 8003bb4:	40020440 	.word	0x40020440
 8003bb8:	40020458 	.word	0x40020458
 8003bbc:	40020470 	.word	0x40020470
 8003bc0:	40020488 	.word	0x40020488
 8003bc4:	400204a0 	.word	0x400204a0
 8003bc8:	400204b8 	.word	0x400204b8
 8003bcc:	58025408 	.word	0x58025408
 8003bd0:	5802541c 	.word	0x5802541c
 8003bd4:	58025430 	.word	0x58025430
 8003bd8:	58025444 	.word	0x58025444
 8003bdc:	58025458 	.word	0x58025458
 8003be0:	5802546c 	.word	0x5802546c
 8003be4:	58025480 	.word	0x58025480
 8003be8:	58025494 	.word	0x58025494

08003bec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e226      	b.n	8004056 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_DMA_Start_IT+0x2a>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e21f      	b.n	8004056 <HAL_DMA_Start_IT+0x46a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f040 820a 	bne.w	8004040 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a68      	ldr	r2, [pc, #416]	; (8003de0 <HAL_DMA_Start_IT+0x1f4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d04a      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a66      	ldr	r2, [pc, #408]	; (8003de4 <HAL_DMA_Start_IT+0x1f8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d045      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <HAL_DMA_Start_IT+0x1fc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d040      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a63      	ldr	r2, [pc, #396]	; (8003dec <HAL_DMA_Start_IT+0x200>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d03b      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a62      	ldr	r2, [pc, #392]	; (8003df0 <HAL_DMA_Start_IT+0x204>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d036      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a60      	ldr	r2, [pc, #384]	; (8003df4 <HAL_DMA_Start_IT+0x208>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d031      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5f      	ldr	r2, [pc, #380]	; (8003df8 <HAL_DMA_Start_IT+0x20c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d02c      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a5d      	ldr	r2, [pc, #372]	; (8003dfc <HAL_DMA_Start_IT+0x210>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d027      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a5c      	ldr	r2, [pc, #368]	; (8003e00 <HAL_DMA_Start_IT+0x214>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <HAL_DMA_Start_IT+0x218>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a59      	ldr	r2, [pc, #356]	; (8003e08 <HAL_DMA_Start_IT+0x21c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <HAL_DMA_Start_IT+0x220>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a56      	ldr	r2, [pc, #344]	; (8003e10 <HAL_DMA_Start_IT+0x224>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a54      	ldr	r2, [pc, #336]	; (8003e14 <HAL_DMA_Start_IT+0x228>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a53      	ldr	r2, [pc, #332]	; (8003e18 <HAL_DMA_Start_IT+0x22c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a51      	ldr	r2, [pc, #324]	; (8003e1c <HAL_DMA_Start_IT+0x230>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <HAL_DMA_Start_IT+0x100>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e007      	b.n	8003cfc <HAL_DMA_Start_IT+0x110>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f001 fb4a 	bl	800539c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a34      	ldr	r2, [pc, #208]	; (8003de0 <HAL_DMA_Start_IT+0x1f4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d04a      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a33      	ldr	r2, [pc, #204]	; (8003de4 <HAL_DMA_Start_IT+0x1f8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d045      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_DMA_Start_IT+0x1fc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d040      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a30      	ldr	r2, [pc, #192]	; (8003dec <HAL_DMA_Start_IT+0x200>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d03b      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <HAL_DMA_Start_IT+0x204>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d036      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2d      	ldr	r2, [pc, #180]	; (8003df4 <HAL_DMA_Start_IT+0x208>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d031      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_DMA_Start_IT+0x20c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02c      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <HAL_DMA_Start_IT+0x210>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d027      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <HAL_DMA_Start_IT+0x214>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d022      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <HAL_DMA_Start_IT+0x218>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d01d      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <HAL_DMA_Start_IT+0x21c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d018      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a24      	ldr	r2, [pc, #144]	; (8003e0c <HAL_DMA_Start_IT+0x220>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <HAL_DMA_Start_IT+0x224>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <HAL_DMA_Start_IT+0x228>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_DMA_Start_IT+0x22c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_DMA_Start_IT+0x1bc>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <HAL_DMA_Start_IT+0x230>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_DMA_Start_IT+0x1c0>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_DMA_Start_IT+0x1c2>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d036      	beq.n	8003e20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 021e 	bic.w	r2, r3, #30
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0216 	orr.w	r2, r2, #22
 8003dc4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d03e      	beq.n	8003e4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0208 	orr.w	r2, r2, #8
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e035      	b.n	8003e4c <HAL_DMA_Start_IT+0x260>
 8003de0:	40020010 	.word	0x40020010
 8003de4:	40020028 	.word	0x40020028
 8003de8:	40020040 	.word	0x40020040
 8003dec:	40020058 	.word	0x40020058
 8003df0:	40020070 	.word	0x40020070
 8003df4:	40020088 	.word	0x40020088
 8003df8:	400200a0 	.word	0x400200a0
 8003dfc:	400200b8 	.word	0x400200b8
 8003e00:	40020410 	.word	0x40020410
 8003e04:	40020428 	.word	0x40020428
 8003e08:	40020440 	.word	0x40020440
 8003e0c:	40020458 	.word	0x40020458
 8003e10:	40020470 	.word	0x40020470
 8003e14:	40020488 	.word	0x40020488
 8003e18:	400204a0 	.word	0x400204a0
 8003e1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 020e 	bic.w	r2, r3, #14
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 020a 	orr.w	r2, r2, #10
 8003e32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0204 	orr.w	r2, r2, #4
 8003e4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a83      	ldr	r2, [pc, #524]	; (8004060 <HAL_DMA_Start_IT+0x474>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d072      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a82      	ldr	r2, [pc, #520]	; (8004064 <HAL_DMA_Start_IT+0x478>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d06d      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a80      	ldr	r2, [pc, #512]	; (8004068 <HAL_DMA_Start_IT+0x47c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d068      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7f      	ldr	r2, [pc, #508]	; (800406c <HAL_DMA_Start_IT+0x480>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d063      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7d      	ldr	r2, [pc, #500]	; (8004070 <HAL_DMA_Start_IT+0x484>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d05e      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7c      	ldr	r2, [pc, #496]	; (8004074 <HAL_DMA_Start_IT+0x488>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d059      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a7a      	ldr	r2, [pc, #488]	; (8004078 <HAL_DMA_Start_IT+0x48c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d054      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a79      	ldr	r2, [pc, #484]	; (800407c <HAL_DMA_Start_IT+0x490>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d04f      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a77      	ldr	r2, [pc, #476]	; (8004080 <HAL_DMA_Start_IT+0x494>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a76      	ldr	r2, [pc, #472]	; (8004084 <HAL_DMA_Start_IT+0x498>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	; (8004088 <HAL_DMA_Start_IT+0x49c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a73      	ldr	r2, [pc, #460]	; (800408c <HAL_DMA_Start_IT+0x4a0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a71      	ldr	r2, [pc, #452]	; (8004090 <HAL_DMA_Start_IT+0x4a4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a70      	ldr	r2, [pc, #448]	; (8004094 <HAL_DMA_Start_IT+0x4a8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <HAL_DMA_Start_IT+0x4ac>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6d      	ldr	r2, [pc, #436]	; (800409c <HAL_DMA_Start_IT+0x4b0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6b      	ldr	r2, [pc, #428]	; (80040a0 <HAL_DMA_Start_IT+0x4b4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6a      	ldr	r2, [pc, #424]	; (80040a4 <HAL_DMA_Start_IT+0x4b8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a68      	ldr	r2, [pc, #416]	; (80040a8 <HAL_DMA_Start_IT+0x4bc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a67      	ldr	r2, [pc, #412]	; (80040ac <HAL_DMA_Start_IT+0x4c0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a65      	ldr	r2, [pc, #404]	; (80040b0 <HAL_DMA_Start_IT+0x4c4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a64      	ldr	r2, [pc, #400]	; (80040b4 <HAL_DMA_Start_IT+0x4c8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a62      	ldr	r2, [pc, #392]	; (80040b8 <HAL_DMA_Start_IT+0x4cc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_Start_IT+0x350>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a61      	ldr	r2, [pc, #388]	; (80040bc <HAL_DMA_Start_IT+0x4d0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <HAL_DMA_Start_IT+0x354>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_DMA_Start_IT+0x356>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01a      	beq.n	8003f7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a37      	ldr	r2, [pc, #220]	; (8004060 <HAL_DMA_Start_IT+0x474>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04a      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a36      	ldr	r2, [pc, #216]	; (8004064 <HAL_DMA_Start_IT+0x478>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d045      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a34      	ldr	r2, [pc, #208]	; (8004068 <HAL_DMA_Start_IT+0x47c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d040      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a33      	ldr	r2, [pc, #204]	; (800406c <HAL_DMA_Start_IT+0x480>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d03b      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a31      	ldr	r2, [pc, #196]	; (8004070 <HAL_DMA_Start_IT+0x484>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d036      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a30      	ldr	r2, [pc, #192]	; (8004074 <HAL_DMA_Start_IT+0x488>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d031      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <HAL_DMA_Start_IT+0x48c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02c      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2d      	ldr	r2, [pc, #180]	; (800407c <HAL_DMA_Start_IT+0x490>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d027      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <HAL_DMA_Start_IT+0x494>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d022      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <HAL_DMA_Start_IT+0x498>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d01d      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a28      	ldr	r2, [pc, #160]	; (8004088 <HAL_DMA_Start_IT+0x49c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d018      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a27      	ldr	r2, [pc, #156]	; (800408c <HAL_DMA_Start_IT+0x4a0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a25      	ldr	r2, [pc, #148]	; (8004090 <HAL_DMA_Start_IT+0x4a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a24      	ldr	r2, [pc, #144]	; (8004094 <HAL_DMA_Start_IT+0x4a8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a22      	ldr	r2, [pc, #136]	; (8004098 <HAL_DMA_Start_IT+0x4ac>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_DMA_Start_IT+0x430>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a21      	ldr	r2, [pc, #132]	; (800409c <HAL_DMA_Start_IT+0x4b0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <HAL_DMA_Start_IT+0x442>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e012      	b.n	8004054 <HAL_DMA_Start_IT+0x468>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e009      	b.n	8004054 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800404e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40020010 	.word	0x40020010
 8004064:	40020028 	.word	0x40020028
 8004068:	40020040 	.word	0x40020040
 800406c:	40020058 	.word	0x40020058
 8004070:	40020070 	.word	0x40020070
 8004074:	40020088 	.word	0x40020088
 8004078:	400200a0 	.word	0x400200a0
 800407c:	400200b8 	.word	0x400200b8
 8004080:	40020410 	.word	0x40020410
 8004084:	40020428 	.word	0x40020428
 8004088:	40020440 	.word	0x40020440
 800408c:	40020458 	.word	0x40020458
 8004090:	40020470 	.word	0x40020470
 8004094:	40020488 	.word	0x40020488
 8004098:	400204a0 	.word	0x400204a0
 800409c:	400204b8 	.word	0x400204b8
 80040a0:	58025408 	.word	0x58025408
 80040a4:	5802541c 	.word	0x5802541c
 80040a8:	58025430 	.word	0x58025430
 80040ac:	58025444 	.word	0x58025444
 80040b0:	58025458 	.word	0x58025458
 80040b4:	5802546c 	.word	0x5802546c
 80040b8:	58025480 	.word	0x58025480
 80040bc:	58025494 	.word	0x58025494

080040c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e205      	b.n	80044de <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e1fa      	b.n	80044de <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a8c      	ldr	r2, [pc, #560]	; (8004320 <HAL_DMA_Abort_IT+0x260>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d04a      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a8b      	ldr	r2, [pc, #556]	; (8004324 <HAL_DMA_Abort_IT+0x264>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d045      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a89      	ldr	r2, [pc, #548]	; (8004328 <HAL_DMA_Abort_IT+0x268>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d040      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a88      	ldr	r2, [pc, #544]	; (800432c <HAL_DMA_Abort_IT+0x26c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d03b      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a86      	ldr	r2, [pc, #536]	; (8004330 <HAL_DMA_Abort_IT+0x270>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d036      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a85      	ldr	r2, [pc, #532]	; (8004334 <HAL_DMA_Abort_IT+0x274>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d031      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a83      	ldr	r2, [pc, #524]	; (8004338 <HAL_DMA_Abort_IT+0x278>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02c      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a82      	ldr	r2, [pc, #520]	; (800433c <HAL_DMA_Abort_IT+0x27c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d027      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a80      	ldr	r2, [pc, #512]	; (8004340 <HAL_DMA_Abort_IT+0x280>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d022      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7f      	ldr	r2, [pc, #508]	; (8004344 <HAL_DMA_Abort_IT+0x284>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d01d      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a7d      	ldr	r2, [pc, #500]	; (8004348 <HAL_DMA_Abort_IT+0x288>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d018      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7c      	ldr	r2, [pc, #496]	; (800434c <HAL_DMA_Abort_IT+0x28c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a7a      	ldr	r2, [pc, #488]	; (8004350 <HAL_DMA_Abort_IT+0x290>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a79      	ldr	r2, [pc, #484]	; (8004354 <HAL_DMA_Abort_IT+0x294>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a77      	ldr	r2, [pc, #476]	; (8004358 <HAL_DMA_Abort_IT+0x298>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_DMA_Abort_IT+0xc8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a76      	ldr	r2, [pc, #472]	; (800435c <HAL_DMA_Abort_IT+0x29c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d101      	bne.n	800418c <HAL_DMA_Abort_IT+0xcc>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <HAL_DMA_Abort_IT+0xce>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d065      	beq.n	800425e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2204      	movs	r2, #4
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a60      	ldr	r2, [pc, #384]	; (8004320 <HAL_DMA_Abort_IT+0x260>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04a      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5e      	ldr	r2, [pc, #376]	; (8004324 <HAL_DMA_Abort_IT+0x264>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d045      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a5d      	ldr	r2, [pc, #372]	; (8004328 <HAL_DMA_Abort_IT+0x268>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d040      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5b      	ldr	r2, [pc, #364]	; (800432c <HAL_DMA_Abort_IT+0x26c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d03b      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5a      	ldr	r2, [pc, #360]	; (8004330 <HAL_DMA_Abort_IT+0x270>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d036      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a58      	ldr	r2, [pc, #352]	; (8004334 <HAL_DMA_Abort_IT+0x274>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d031      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a57      	ldr	r2, [pc, #348]	; (8004338 <HAL_DMA_Abort_IT+0x278>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d02c      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a55      	ldr	r2, [pc, #340]	; (800433c <HAL_DMA_Abort_IT+0x27c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d027      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a54      	ldr	r2, [pc, #336]	; (8004340 <HAL_DMA_Abort_IT+0x280>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a52      	ldr	r2, [pc, #328]	; (8004344 <HAL_DMA_Abort_IT+0x284>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01d      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a51      	ldr	r2, [pc, #324]	; (8004348 <HAL_DMA_Abort_IT+0x288>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a4f      	ldr	r2, [pc, #316]	; (800434c <HAL_DMA_Abort_IT+0x28c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a4e      	ldr	r2, [pc, #312]	; (8004350 <HAL_DMA_Abort_IT+0x290>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a4c      	ldr	r2, [pc, #304]	; (8004354 <HAL_DMA_Abort_IT+0x294>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a4b      	ldr	r2, [pc, #300]	; (8004358 <HAL_DMA_Abort_IT+0x298>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_DMA_Abort_IT+0x17a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a49      	ldr	r2, [pc, #292]	; (800435c <HAL_DMA_Abort_IT+0x29c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <HAL_DMA_Abort_IT+0x18c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e147      	b.n	80044dc <HAL_DMA_Abort_IT+0x41c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	e13e      	b.n	80044dc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 020e 	bic.w	r2, r2, #14
 800426c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_DMA_Abort_IT+0x260>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d04a      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_DMA_Abort_IT+0x264>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d045      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_DMA_Abort_IT+0x268>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d040      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_DMA_Abort_IT+0x26c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d03b      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a25      	ldr	r2, [pc, #148]	; (8004330 <HAL_DMA_Abort_IT+0x270>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d036      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_DMA_Abort_IT+0x274>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d031      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_DMA_Abort_IT+0x278>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d02c      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_DMA_Abort_IT+0x27c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d027      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_DMA_Abort_IT+0x280>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_DMA_Abort_IT+0x284>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01d      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_DMA_Abort_IT+0x288>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_DMA_Abort_IT+0x28c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_DMA_Abort_IT+0x290>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_DMA_Abort_IT+0x294>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <HAL_DMA_Abort_IT+0x298>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_DMA_Abort_IT+0x24e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_DMA_Abort_IT+0x29c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d128      	bne.n	8004360 <HAL_DMA_Abort_IT+0x2a0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e027      	b.n	8004370 <HAL_DMA_Abort_IT+0x2b0>
 8004320:	40020010 	.word	0x40020010
 8004324:	40020028 	.word	0x40020028
 8004328:	40020040 	.word	0x40020040
 800432c:	40020058 	.word	0x40020058
 8004330:	40020070 	.word	0x40020070
 8004334:	40020088 	.word	0x40020088
 8004338:	400200a0 	.word	0x400200a0
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	40020440 	.word	0x40020440
 800434c:	40020458 	.word	0x40020458
 8004350:	40020470 	.word	0x40020470
 8004354:	40020488 	.word	0x40020488
 8004358:	400204a0 	.word	0x400204a0
 800435c:	400204b8 	.word	0x400204b8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5c      	ldr	r2, [pc, #368]	; (80044e8 <HAL_DMA_Abort_IT+0x428>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d072      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5b      	ldr	r2, [pc, #364]	; (80044ec <HAL_DMA_Abort_IT+0x42c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d06d      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a59      	ldr	r2, [pc, #356]	; (80044f0 <HAL_DMA_Abort_IT+0x430>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d068      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <HAL_DMA_Abort_IT+0x434>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d063      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a56      	ldr	r2, [pc, #344]	; (80044f8 <HAL_DMA_Abort_IT+0x438>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d05e      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a55      	ldr	r2, [pc, #340]	; (80044fc <HAL_DMA_Abort_IT+0x43c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d059      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a53      	ldr	r2, [pc, #332]	; (8004500 <HAL_DMA_Abort_IT+0x440>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d054      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_DMA_Abort_IT+0x444>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d04f      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a50      	ldr	r2, [pc, #320]	; (8004508 <HAL_DMA_Abort_IT+0x448>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d04a      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a4f      	ldr	r2, [pc, #316]	; (800450c <HAL_DMA_Abort_IT+0x44c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d045      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <HAL_DMA_Abort_IT+0x450>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d040      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a4c      	ldr	r2, [pc, #304]	; (8004514 <HAL_DMA_Abort_IT+0x454>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d03b      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <HAL_DMA_Abort_IT+0x458>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d036      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a49      	ldr	r2, [pc, #292]	; (800451c <HAL_DMA_Abort_IT+0x45c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d031      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a47      	ldr	r2, [pc, #284]	; (8004520 <HAL_DMA_Abort_IT+0x460>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d02c      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a46      	ldr	r2, [pc, #280]	; (8004524 <HAL_DMA_Abort_IT+0x464>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d027      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a44      	ldr	r2, [pc, #272]	; (8004528 <HAL_DMA_Abort_IT+0x468>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d022      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a43      	ldr	r2, [pc, #268]	; (800452c <HAL_DMA_Abort_IT+0x46c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d01d      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a41      	ldr	r2, [pc, #260]	; (8004530 <HAL_DMA_Abort_IT+0x470>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d018      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a40      	ldr	r2, [pc, #256]	; (8004534 <HAL_DMA_Abort_IT+0x474>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a3e      	ldr	r2, [pc, #248]	; (8004538 <HAL_DMA_Abort_IT+0x478>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a3d      	ldr	r2, [pc, #244]	; (800453c <HAL_DMA_Abort_IT+0x47c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a3b      	ldr	r2, [pc, #236]	; (8004540 <HAL_DMA_Abort_IT+0x480>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_DMA_Abort_IT+0x3a0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a3a      	ldr	r2, [pc, #232]	; (8004544 <HAL_DMA_Abort_IT+0x484>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_DMA_Abort_IT+0x3a4>
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_DMA_Abort_IT+0x3a6>
 8004464:	2300      	movs	r3, #0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d028      	beq.n	80044bc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004478:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	2201      	movs	r2, #1
 800448a:	409a      	lsls	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004498:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00c      	beq.n	80044bc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40020010 	.word	0x40020010
 80044ec:	40020028 	.word	0x40020028
 80044f0:	40020040 	.word	0x40020040
 80044f4:	40020058 	.word	0x40020058
 80044f8:	40020070 	.word	0x40020070
 80044fc:	40020088 	.word	0x40020088
 8004500:	400200a0 	.word	0x400200a0
 8004504:	400200b8 	.word	0x400200b8
 8004508:	40020410 	.word	0x40020410
 800450c:	40020428 	.word	0x40020428
 8004510:	40020440 	.word	0x40020440
 8004514:	40020458 	.word	0x40020458
 8004518:	40020470 	.word	0x40020470
 800451c:	40020488 	.word	0x40020488
 8004520:	400204a0 	.word	0x400204a0
 8004524:	400204b8 	.word	0x400204b8
 8004528:	58025408 	.word	0x58025408
 800452c:	5802541c 	.word	0x5802541c
 8004530:	58025430 	.word	0x58025430
 8004534:	58025444 	.word	0x58025444
 8004538:	58025458 	.word	0x58025458
 800453c:	5802546c 	.word	0x5802546c
 8004540:	58025480 	.word	0x58025480
 8004544:	58025494 	.word	0x58025494

08004548 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004554:	4b67      	ldr	r3, [pc, #412]	; (80046f4 <HAL_DMA_IRQHandler+0x1ac>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a67      	ldr	r2, [pc, #412]	; (80046f8 <HAL_DMA_IRQHandler+0x1b0>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	0a9b      	lsrs	r3, r3, #10
 8004560:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5f      	ldr	r2, [pc, #380]	; (80046fc <HAL_DMA_IRQHandler+0x1b4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d04a      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5d      	ldr	r2, [pc, #372]	; (8004700 <HAL_DMA_IRQHandler+0x1b8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d045      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a5c      	ldr	r2, [pc, #368]	; (8004704 <HAL_DMA_IRQHandler+0x1bc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d040      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5a      	ldr	r2, [pc, #360]	; (8004708 <HAL_DMA_IRQHandler+0x1c0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d03b      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a59      	ldr	r2, [pc, #356]	; (800470c <HAL_DMA_IRQHandler+0x1c4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d036      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a57      	ldr	r2, [pc, #348]	; (8004710 <HAL_DMA_IRQHandler+0x1c8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d031      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a56      	ldr	r2, [pc, #344]	; (8004714 <HAL_DMA_IRQHandler+0x1cc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d02c      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a54      	ldr	r2, [pc, #336]	; (8004718 <HAL_DMA_IRQHandler+0x1d0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d027      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a53      	ldr	r2, [pc, #332]	; (800471c <HAL_DMA_IRQHandler+0x1d4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d022      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a51      	ldr	r2, [pc, #324]	; (8004720 <HAL_DMA_IRQHandler+0x1d8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01d      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a50      	ldr	r2, [pc, #320]	; (8004724 <HAL_DMA_IRQHandler+0x1dc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d018      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a4e      	ldr	r2, [pc, #312]	; (8004728 <HAL_DMA_IRQHandler+0x1e0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4d      	ldr	r2, [pc, #308]	; (800472c <HAL_DMA_IRQHandler+0x1e4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a4b      	ldr	r2, [pc, #300]	; (8004730 <HAL_DMA_IRQHandler+0x1e8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <HAL_DMA_IRQHandler+0x1ec>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_DMA_IRQHandler+0xd2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a48      	ldr	r2, [pc, #288]	; (8004738 <HAL_DMA_IRQHandler+0x1f0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_DMA_IRQHandler+0xd6>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_DMA_IRQHandler+0xd8>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 842b 	beq.w	8004e7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	2208      	movs	r2, #8
 8004630:	409a      	lsls	r2, r3
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80a2 	beq.w	8004780 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2e      	ldr	r2, [pc, #184]	; (80046fc <HAL_DMA_IRQHandler+0x1b4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d04a      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2d      	ldr	r2, [pc, #180]	; (8004700 <HAL_DMA_IRQHandler+0x1b8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d045      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <HAL_DMA_IRQHandler+0x1bc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d040      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <HAL_DMA_IRQHandler+0x1c0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d03b      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a28      	ldr	r2, [pc, #160]	; (800470c <HAL_DMA_IRQHandler+0x1c4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d036      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a27      	ldr	r2, [pc, #156]	; (8004710 <HAL_DMA_IRQHandler+0x1c8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d031      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a25      	ldr	r2, [pc, #148]	; (8004714 <HAL_DMA_IRQHandler+0x1cc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d02c      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a24      	ldr	r2, [pc, #144]	; (8004718 <HAL_DMA_IRQHandler+0x1d0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d027      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <HAL_DMA_IRQHandler+0x1d4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d022      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a21      	ldr	r2, [pc, #132]	; (8004720 <HAL_DMA_IRQHandler+0x1d8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d01d      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <HAL_DMA_IRQHandler+0x1dc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d018      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <HAL_DMA_IRQHandler+0x1e0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1c      	ldr	r2, [pc, #112]	; (800472c <HAL_DMA_IRQHandler+0x1e4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00e      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <HAL_DMA_IRQHandler+0x1e8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d009      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a19      	ldr	r2, [pc, #100]	; (8004734 <HAL_DMA_IRQHandler+0x1ec>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_DMA_IRQHandler+0x194>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_DMA_IRQHandler+0x1f0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d12f      	bne.n	800473c <HAL_DMA_IRQHandler+0x1f4>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	e02e      	b.n	8004750 <HAL_DMA_IRQHandler+0x208>
 80046f2:	bf00      	nop
 80046f4:	24000024 	.word	0x24000024
 80046f8:	1b4e81b5 	.word	0x1b4e81b5
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf14      	ite	ne
 800474a:	2301      	movne	r3, #1
 800474c:	2300      	moveq	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0204 	bic.w	r2, r2, #4
 8004762:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2208      	movs	r2, #8
 800476e:	409a      	lsls	r2, r3
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004778:	f043 0201 	orr.w	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d06e      	beq.n	8004874 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a69      	ldr	r2, [pc, #420]	; (8004940 <HAL_DMA_IRQHandler+0x3f8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d04a      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a67      	ldr	r2, [pc, #412]	; (8004944 <HAL_DMA_IRQHandler+0x3fc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d045      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a66      	ldr	r2, [pc, #408]	; (8004948 <HAL_DMA_IRQHandler+0x400>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d040      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a64      	ldr	r2, [pc, #400]	; (800494c <HAL_DMA_IRQHandler+0x404>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d03b      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a63      	ldr	r2, [pc, #396]	; (8004950 <HAL_DMA_IRQHandler+0x408>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d036      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a61      	ldr	r2, [pc, #388]	; (8004954 <HAL_DMA_IRQHandler+0x40c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d031      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a60      	ldr	r2, [pc, #384]	; (8004958 <HAL_DMA_IRQHandler+0x410>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d02c      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5e      	ldr	r2, [pc, #376]	; (800495c <HAL_DMA_IRQHandler+0x414>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d027      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5d      	ldr	r2, [pc, #372]	; (8004960 <HAL_DMA_IRQHandler+0x418>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5b      	ldr	r2, [pc, #364]	; (8004964 <HAL_DMA_IRQHandler+0x41c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01d      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a5a      	ldr	r2, [pc, #360]	; (8004968 <HAL_DMA_IRQHandler+0x420>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a58      	ldr	r2, [pc, #352]	; (800496c <HAL_DMA_IRQHandler+0x424>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a57      	ldr	r2, [pc, #348]	; (8004970 <HAL_DMA_IRQHandler+0x428>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a55      	ldr	r2, [pc, #340]	; (8004974 <HAL_DMA_IRQHandler+0x42c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a54      	ldr	r2, [pc, #336]	; (8004978 <HAL_DMA_IRQHandler+0x430>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2ee>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a52      	ldr	r2, [pc, #328]	; (800497c <HAL_DMA_IRQHandler+0x434>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10a      	bne.n	800484c <HAL_DMA_IRQHandler+0x304>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e003      	b.n	8004854 <HAL_DMA_IRQHandler+0x30c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2300      	movs	r3, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f043 0202 	orr.w	r2, r3, #2
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2204      	movs	r2, #4
 800487e:	409a      	lsls	r2, r3
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 808f 	beq.w	80049a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2c      	ldr	r2, [pc, #176]	; (8004940 <HAL_DMA_IRQHandler+0x3f8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d04a      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <HAL_DMA_IRQHandler+0x3fc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d045      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a29      	ldr	r2, [pc, #164]	; (8004948 <HAL_DMA_IRQHandler+0x400>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d040      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a27      	ldr	r2, [pc, #156]	; (800494c <HAL_DMA_IRQHandler+0x404>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d03b      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a26      	ldr	r2, [pc, #152]	; (8004950 <HAL_DMA_IRQHandler+0x408>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d036      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a24      	ldr	r2, [pc, #144]	; (8004954 <HAL_DMA_IRQHandler+0x40c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d031      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a23      	ldr	r2, [pc, #140]	; (8004958 <HAL_DMA_IRQHandler+0x410>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d02c      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a21      	ldr	r2, [pc, #132]	; (800495c <HAL_DMA_IRQHandler+0x414>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d027      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <HAL_DMA_IRQHandler+0x418>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d022      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_DMA_IRQHandler+0x41c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01d      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_DMA_IRQHandler+0x420>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d018      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_DMA_IRQHandler+0x424>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <HAL_DMA_IRQHandler+0x428>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00e      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a18      	ldr	r2, [pc, #96]	; (8004974 <HAL_DMA_IRQHandler+0x42c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d009      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a17      	ldr	r2, [pc, #92]	; (8004978 <HAL_DMA_IRQHandler+0x430>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_DMA_IRQHandler+0x3e2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a15      	ldr	r2, [pc, #84]	; (800497c <HAL_DMA_IRQHandler+0x434>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d12a      	bne.n	8004980 <HAL_DMA_IRQHandler+0x438>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e023      	b.n	8004988 <HAL_DMA_IRQHandler+0x440>
 8004940:	40020010 	.word	0x40020010
 8004944:	40020028 	.word	0x40020028
 8004948:	40020040 	.word	0x40020040
 800494c:	40020058 	.word	0x40020058
 8004950:	40020070 	.word	0x40020070
 8004954:	40020088 	.word	0x40020088
 8004958:	400200a0 	.word	0x400200a0
 800495c:	400200b8 	.word	0x400200b8
 8004960:	40020410 	.word	0x40020410
 8004964:	40020428 	.word	0x40020428
 8004968:	40020440 	.word	0x40020440
 800496c:	40020458 	.word	0x40020458
 8004970:	40020470 	.word	0x40020470
 8004974:	40020488 	.word	0x40020488
 8004978:	400204a0 	.word	0x400204a0
 800497c:	400204b8 	.word	0x400204b8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	2204      	movs	r2, #4
 8004996:	409a      	lsls	r2, r3
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	f043 0204 	orr.w	r2, r3, #4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2210      	movs	r2, #16
 80049b2:	409a      	lsls	r2, r3
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80a6 	beq.w	8004b0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a85      	ldr	r2, [pc, #532]	; (8004bd8 <HAL_DMA_IRQHandler+0x690>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d04a      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a83      	ldr	r2, [pc, #524]	; (8004bdc <HAL_DMA_IRQHandler+0x694>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d045      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a82      	ldr	r2, [pc, #520]	; (8004be0 <HAL_DMA_IRQHandler+0x698>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d040      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a80      	ldr	r2, [pc, #512]	; (8004be4 <HAL_DMA_IRQHandler+0x69c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d03b      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a7f      	ldr	r2, [pc, #508]	; (8004be8 <HAL_DMA_IRQHandler+0x6a0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d036      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7d      	ldr	r2, [pc, #500]	; (8004bec <HAL_DMA_IRQHandler+0x6a4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d031      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7c      	ldr	r2, [pc, #496]	; (8004bf0 <HAL_DMA_IRQHandler+0x6a8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d02c      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a7a      	ldr	r2, [pc, #488]	; (8004bf4 <HAL_DMA_IRQHandler+0x6ac>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d027      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a79      	ldr	r2, [pc, #484]	; (8004bf8 <HAL_DMA_IRQHandler+0x6b0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d022      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a77      	ldr	r2, [pc, #476]	; (8004bfc <HAL_DMA_IRQHandler+0x6b4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01d      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a76      	ldr	r2, [pc, #472]	; (8004c00 <HAL_DMA_IRQHandler+0x6b8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d018      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a74      	ldr	r2, [pc, #464]	; (8004c04 <HAL_DMA_IRQHandler+0x6bc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a73      	ldr	r2, [pc, #460]	; (8004c08 <HAL_DMA_IRQHandler+0x6c0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a71      	ldr	r2, [pc, #452]	; (8004c0c <HAL_DMA_IRQHandler+0x6c4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a70      	ldr	r2, [pc, #448]	; (8004c10 <HAL_DMA_IRQHandler+0x6c8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x516>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a6e      	ldr	r2, [pc, #440]	; (8004c14 <HAL_DMA_IRQHandler+0x6cc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d10a      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x52c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e009      	b.n	8004a88 <HAL_DMA_IRQHandler+0x540>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03e      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	2210      	movs	r2, #16
 8004a96:	409a      	lsls	r2, r3
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d108      	bne.n	8004aca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d024      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
 8004ac8:	e01f      	b.n	8004b0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01b      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
 8004ada:	e016      	b.n	8004b0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0208 	bic.w	r2, r2, #8
 8004af8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2220      	movs	r2, #32
 8004b14:	409a      	lsls	r2, r3
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8110 	beq.w	8004d40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2c      	ldr	r2, [pc, #176]	; (8004bd8 <HAL_DMA_IRQHandler+0x690>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d04a      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2b      	ldr	r2, [pc, #172]	; (8004bdc <HAL_DMA_IRQHandler+0x694>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d045      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a29      	ldr	r2, [pc, #164]	; (8004be0 <HAL_DMA_IRQHandler+0x698>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d040      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <HAL_DMA_IRQHandler+0x69c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d03b      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a26      	ldr	r2, [pc, #152]	; (8004be8 <HAL_DMA_IRQHandler+0x6a0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d036      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a25      	ldr	r2, [pc, #148]	; (8004bec <HAL_DMA_IRQHandler+0x6a4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d031      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <HAL_DMA_IRQHandler+0x6a8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d02c      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <HAL_DMA_IRQHandler+0x6ac>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d027      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <HAL_DMA_IRQHandler+0x6b0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <HAL_DMA_IRQHandler+0x6b4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d01d      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <HAL_DMA_IRQHandler+0x6b8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <HAL_DMA_IRQHandler+0x6bc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1a      	ldr	r2, [pc, #104]	; (8004c08 <HAL_DMA_IRQHandler+0x6c0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_DMA_IRQHandler+0x6c4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <HAL_DMA_IRQHandler+0x6c8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x678>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <HAL_DMA_IRQHandler+0x6cc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d12b      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x6d0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e02a      	b.n	8004c2c <HAL_DMA_IRQHandler+0x6e4>
 8004bd6:	bf00      	nop
 8004bd8:	40020010 	.word	0x40020010
 8004bdc:	40020028 	.word	0x40020028
 8004be0:	40020040 	.word	0x40020040
 8004be4:	40020058 	.word	0x40020058
 8004be8:	40020070 	.word	0x40020070
 8004bec:	40020088 	.word	0x40020088
 8004bf0:	400200a0 	.word	0x400200a0
 8004bf4:	400200b8 	.word	0x400200b8
 8004bf8:	40020410 	.word	0x40020410
 8004bfc:	40020428 	.word	0x40020428
 8004c00:	40020440 	.word	0x40020440
 8004c04:	40020458 	.word	0x40020458
 8004c08:	40020470 	.word	0x40020470
 8004c0c:	40020488 	.word	0x40020488
 8004c10:	400204a0 	.word	0x400204a0
 8004c14:	400204b8 	.word	0x400204b8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8087 	beq.w	8004d40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d139      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0216 	bic.w	r2, r2, #22
 8004c5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <HAL_DMA_IRQHandler+0x736>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0208 	bic.w	r2, r2, #8
 8004c8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	223f      	movs	r2, #63	; 0x3f
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 834a 	beq.w	800534c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
          }
          return;
 8004cc0:	e344      	b.n	800534c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d018      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d108      	bne.n	8004cf0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d02c      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
 8004cee:	e027      	b.n	8004d40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d023      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
 8004d00:	e01e      	b.n	8004d40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10f      	bne.n	8004d30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0210 	bic.w	r2, r2, #16
 8004d1e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8306 	beq.w	8005356 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8088 	beq.w	8004e68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a7a      	ldr	r2, [pc, #488]	; (8004f50 <HAL_DMA_IRQHandler+0xa08>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d04a      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a79      	ldr	r2, [pc, #484]	; (8004f54 <HAL_DMA_IRQHandler+0xa0c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d045      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a77      	ldr	r2, [pc, #476]	; (8004f58 <HAL_DMA_IRQHandler+0xa10>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d040      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a76      	ldr	r2, [pc, #472]	; (8004f5c <HAL_DMA_IRQHandler+0xa14>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d03b      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a74      	ldr	r2, [pc, #464]	; (8004f60 <HAL_DMA_IRQHandler+0xa18>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d036      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a73      	ldr	r2, [pc, #460]	; (8004f64 <HAL_DMA_IRQHandler+0xa1c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d031      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a71      	ldr	r2, [pc, #452]	; (8004f68 <HAL_DMA_IRQHandler+0xa20>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d02c      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a70      	ldr	r2, [pc, #448]	; (8004f6c <HAL_DMA_IRQHandler+0xa24>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d027      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6e      	ldr	r2, [pc, #440]	; (8004f70 <HAL_DMA_IRQHandler+0xa28>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d022      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6d      	ldr	r2, [pc, #436]	; (8004f74 <HAL_DMA_IRQHandler+0xa2c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d01d      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6b      	ldr	r2, [pc, #428]	; (8004f78 <HAL_DMA_IRQHandler+0xa30>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d018      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a6a      	ldr	r2, [pc, #424]	; (8004f7c <HAL_DMA_IRQHandler+0xa34>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a68      	ldr	r2, [pc, #416]	; (8004f80 <HAL_DMA_IRQHandler+0xa38>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00e      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a67      	ldr	r2, [pc, #412]	; (8004f84 <HAL_DMA_IRQHandler+0xa3c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d009      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a65      	ldr	r2, [pc, #404]	; (8004f88 <HAL_DMA_IRQHandler+0xa40>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x8b8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a64      	ldr	r2, [pc, #400]	; (8004f8c <HAL_DMA_IRQHandler+0xa44>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <HAL_DMA_IRQHandler+0x8ca>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e007      	b.n	8004e22 <HAL_DMA_IRQHandler+0x8da>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d307      	bcc.n	8004e3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f2      	bne.n	8004e22 <HAL_DMA_IRQHandler+0x8da>
 8004e3c:	e000      	b.n	8004e40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e3e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e5e:	e003      	b.n	8004e68 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8272 	beq.w	8005356 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
 8004e7a:	e26c      	b.n	8005356 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a43      	ldr	r2, [pc, #268]	; (8004f90 <HAL_DMA_IRQHandler+0xa48>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x984>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a42      	ldr	r2, [pc, #264]	; (8004f94 <HAL_DMA_IRQHandler+0xa4c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01d      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x984>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a40      	ldr	r2, [pc, #256]	; (8004f98 <HAL_DMA_IRQHandler+0xa50>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x984>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a3f      	ldr	r2, [pc, #252]	; (8004f9c <HAL_DMA_IRQHandler+0xa54>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x984>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3d      	ldr	r2, [pc, #244]	; (8004fa0 <HAL_DMA_IRQHandler+0xa58>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x984>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a3c      	ldr	r2, [pc, #240]	; (8004fa4 <HAL_DMA_IRQHandler+0xa5c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x984>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3a      	ldr	r2, [pc, #232]	; (8004fa8 <HAL_DMA_IRQHandler+0xa60>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x984>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a39      	ldr	r2, [pc, #228]	; (8004fac <HAL_DMA_IRQHandler+0xa64>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <HAL_DMA_IRQHandler+0x988>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_DMA_IRQHandler+0x98a>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 823f 	beq.w	8005356 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	2204      	movs	r2, #4
 8004eea:	409a      	lsls	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80cd 	beq.w	8005090 <HAL_DMA_IRQHandler+0xb48>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80c7 	beq.w	8005090 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d049      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8210 	beq.w	8005350 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f38:	e20a      	b.n	8005350 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8206 	beq.w	8005350 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f4c:	e200      	b.n	8005350 <HAL_DMA_IRQHandler+0xe08>
 8004f4e:	bf00      	nop
 8004f50:	40020010 	.word	0x40020010
 8004f54:	40020028 	.word	0x40020028
 8004f58:	40020040 	.word	0x40020040
 8004f5c:	40020058 	.word	0x40020058
 8004f60:	40020070 	.word	0x40020070
 8004f64:	40020088 	.word	0x40020088
 8004f68:	400200a0 	.word	0x400200a0
 8004f6c:	400200b8 	.word	0x400200b8
 8004f70:	40020410 	.word	0x40020410
 8004f74:	40020428 	.word	0x40020428
 8004f78:	40020440 	.word	0x40020440
 8004f7c:	40020458 	.word	0x40020458
 8004f80:	40020470 	.word	0x40020470
 8004f84:	40020488 	.word	0x40020488
 8004f88:	400204a0 	.word	0x400204a0
 8004f8c:	400204b8 	.word	0x400204b8
 8004f90:	58025408 	.word	0x58025408
 8004f94:	5802541c 	.word	0x5802541c
 8004f98:	58025430 	.word	0x58025430
 8004f9c:	58025444 	.word	0x58025444
 8004fa0:	58025458 	.word	0x58025458
 8004fa4:	5802546c 	.word	0x5802546c
 8004fa8:	58025480 	.word	0x58025480
 8004fac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d160      	bne.n	800507c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a8c      	ldr	r2, [pc, #560]	; (80051f0 <HAL_DMA_IRQHandler+0xca8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d04a      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a8a      	ldr	r2, [pc, #552]	; (80051f4 <HAL_DMA_IRQHandler+0xcac>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d045      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a89      	ldr	r2, [pc, #548]	; (80051f8 <HAL_DMA_IRQHandler+0xcb0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d040      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a87      	ldr	r2, [pc, #540]	; (80051fc <HAL_DMA_IRQHandler+0xcb4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d03b      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a86      	ldr	r2, [pc, #536]	; (8005200 <HAL_DMA_IRQHandler+0xcb8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d036      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a84      	ldr	r2, [pc, #528]	; (8005204 <HAL_DMA_IRQHandler+0xcbc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d031      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a83      	ldr	r2, [pc, #524]	; (8005208 <HAL_DMA_IRQHandler+0xcc0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d02c      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a81      	ldr	r2, [pc, #516]	; (800520c <HAL_DMA_IRQHandler+0xcc4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d027      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a80      	ldr	r2, [pc, #512]	; (8005210 <HAL_DMA_IRQHandler+0xcc8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7e      	ldr	r2, [pc, #504]	; (8005214 <HAL_DMA_IRQHandler+0xccc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01d      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7d      	ldr	r2, [pc, #500]	; (8005218 <HAL_DMA_IRQHandler+0xcd0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a7b      	ldr	r2, [pc, #492]	; (800521c <HAL_DMA_IRQHandler+0xcd4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a7a      	ldr	r2, [pc, #488]	; (8005220 <HAL_DMA_IRQHandler+0xcd8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a78      	ldr	r2, [pc, #480]	; (8005224 <HAL_DMA_IRQHandler+0xcdc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a77      	ldr	r2, [pc, #476]	; (8005228 <HAL_DMA_IRQHandler+0xce0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_DMA_IRQHandler+0xb12>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a75      	ldr	r2, [pc, #468]	; (800522c <HAL_DMA_IRQHandler+0xce4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d108      	bne.n	800506c <HAL_DMA_IRQHandler+0xb24>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0208 	bic.w	r2, r2, #8
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	e007      	b.n	800507c <HAL_DMA_IRQHandler+0xb34>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0204 	bic.w	r2, r2, #4
 800507a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8165 	beq.w	8005350 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800508e:	e15f      	b.n	8005350 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	2202      	movs	r2, #2
 800509a:	409a      	lsls	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80c5 	beq.w	8005230 <HAL_DMA_IRQHandler+0xce8>
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80bf 	beq.w	8005230 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2202      	movs	r2, #2
 80050bc:	409a      	lsls	r2, r3
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d018      	beq.n	80050fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 813a 	beq.w	8005354 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050e8:	e134      	b.n	8005354 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8130 	beq.w	8005354 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050fc:	e12a      	b.n	8005354 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d168      	bne.n	80051da <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a38      	ldr	r2, [pc, #224]	; (80051f0 <HAL_DMA_IRQHandler+0xca8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d04a      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a37      	ldr	r2, [pc, #220]	; (80051f4 <HAL_DMA_IRQHandler+0xcac>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d045      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a35      	ldr	r2, [pc, #212]	; (80051f8 <HAL_DMA_IRQHandler+0xcb0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d040      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a34      	ldr	r2, [pc, #208]	; (80051fc <HAL_DMA_IRQHandler+0xcb4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d03b      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a32      	ldr	r2, [pc, #200]	; (8005200 <HAL_DMA_IRQHandler+0xcb8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d036      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a31      	ldr	r2, [pc, #196]	; (8005204 <HAL_DMA_IRQHandler+0xcbc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d031      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <HAL_DMA_IRQHandler+0xcc0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02c      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2e      	ldr	r2, [pc, #184]	; (800520c <HAL_DMA_IRQHandler+0xcc4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d027      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <HAL_DMA_IRQHandler+0xcc8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d022      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <HAL_DMA_IRQHandler+0xccc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d01d      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <HAL_DMA_IRQHandler+0xcd0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d018      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a28      	ldr	r2, [pc, #160]	; (800521c <HAL_DMA_IRQHandler+0xcd4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d013      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a26      	ldr	r2, [pc, #152]	; (8005220 <HAL_DMA_IRQHandler+0xcd8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00e      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a25      	ldr	r2, [pc, #148]	; (8005224 <HAL_DMA_IRQHandler+0xcdc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d009      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a23      	ldr	r2, [pc, #140]	; (8005228 <HAL_DMA_IRQHandler+0xce0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <HAL_DMA_IRQHandler+0xc60>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a22      	ldr	r2, [pc, #136]	; (800522c <HAL_DMA_IRQHandler+0xce4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d108      	bne.n	80051ba <HAL_DMA_IRQHandler+0xc72>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0214 	bic.w	r2, r2, #20
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e007      	b.n	80051ca <HAL_DMA_IRQHandler+0xc82>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 020a 	bic.w	r2, r2, #10
 80051c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80b8 	beq.w	8005354 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051ec:	e0b2      	b.n	8005354 <HAL_DMA_IRQHandler+0xe0c>
 80051ee:	bf00      	nop
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2208      	movs	r2, #8
 800523a:	409a      	lsls	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8088 	beq.w	8005356 <HAL_DMA_IRQHandler+0xe0e>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8082 	beq.w	8005356 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a41      	ldr	r2, [pc, #260]	; (800535c <HAL_DMA_IRQHandler+0xe14>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d04a      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3f      	ldr	r2, [pc, #252]	; (8005360 <HAL_DMA_IRQHandler+0xe18>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d045      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a3e      	ldr	r2, [pc, #248]	; (8005364 <HAL_DMA_IRQHandler+0xe1c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d040      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a3c      	ldr	r2, [pc, #240]	; (8005368 <HAL_DMA_IRQHandler+0xe20>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d03b      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a3b      	ldr	r2, [pc, #236]	; (800536c <HAL_DMA_IRQHandler+0xe24>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d036      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a39      	ldr	r2, [pc, #228]	; (8005370 <HAL_DMA_IRQHandler+0xe28>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d031      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a38      	ldr	r2, [pc, #224]	; (8005374 <HAL_DMA_IRQHandler+0xe2c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d02c      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a36      	ldr	r2, [pc, #216]	; (8005378 <HAL_DMA_IRQHandler+0xe30>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d027      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a35      	ldr	r2, [pc, #212]	; (800537c <HAL_DMA_IRQHandler+0xe34>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d022      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a33      	ldr	r2, [pc, #204]	; (8005380 <HAL_DMA_IRQHandler+0xe38>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01d      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a32      	ldr	r2, [pc, #200]	; (8005384 <HAL_DMA_IRQHandler+0xe3c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d018      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a30      	ldr	r2, [pc, #192]	; (8005388 <HAL_DMA_IRQHandler+0xe40>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2f      	ldr	r2, [pc, #188]	; (800538c <HAL_DMA_IRQHandler+0xe44>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00e      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2d      	ldr	r2, [pc, #180]	; (8005390 <HAL_DMA_IRQHandler+0xe48>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <HAL_DMA_IRQHandler+0xe4c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d004      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xdaa>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <HAL_DMA_IRQHandler+0xe50>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d108      	bne.n	8005304 <HAL_DMA_IRQHandler+0xdbc>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 021c 	bic.w	r2, r2, #28
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e007      	b.n	8005314 <HAL_DMA_IRQHandler+0xdcc>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 020e 	bic.w	r2, r2, #14
 8005312:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2201      	movs	r2, #1
 800531e:	409a      	lsls	r2, r3
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
 800534a:	e004      	b.n	8005356 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800534c:	bf00      	nop
 800534e:	e002      	b.n	8005356 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005354:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005356:	3728      	adds	r7, #40	; 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40020010 	.word	0x40020010
 8005360:	40020028 	.word	0x40020028
 8005364:	40020040 	.word	0x40020040
 8005368:	40020058 	.word	0x40020058
 800536c:	40020070 	.word	0x40020070
 8005370:	40020088 	.word	0x40020088
 8005374:	400200a0 	.word	0x400200a0
 8005378:	400200b8 	.word	0x400200b8
 800537c:	40020410 	.word	0x40020410
 8005380:	40020428 	.word	0x40020428
 8005384:	40020440 	.word	0x40020440
 8005388:	40020458 	.word	0x40020458
 800538c:	40020470 	.word	0x40020470
 8005390:	40020488 	.word	0x40020488
 8005394:	400204a0 	.word	0x400204a0
 8005398:	400204b8 	.word	0x400204b8

0800539c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a84      	ldr	r2, [pc, #528]	; (80055cc <DMA_SetConfig+0x230>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d072      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a82      	ldr	r2, [pc, #520]	; (80055d0 <DMA_SetConfig+0x234>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d06d      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a81      	ldr	r2, [pc, #516]	; (80055d4 <DMA_SetConfig+0x238>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d068      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a7f      	ldr	r2, [pc, #508]	; (80055d8 <DMA_SetConfig+0x23c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d063      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7e      	ldr	r2, [pc, #504]	; (80055dc <DMA_SetConfig+0x240>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d05e      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a7c      	ldr	r2, [pc, #496]	; (80055e0 <DMA_SetConfig+0x244>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d059      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a7b      	ldr	r2, [pc, #492]	; (80055e4 <DMA_SetConfig+0x248>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d054      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a79      	ldr	r2, [pc, #484]	; (80055e8 <DMA_SetConfig+0x24c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04f      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a78      	ldr	r2, [pc, #480]	; (80055ec <DMA_SetConfig+0x250>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d04a      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a76      	ldr	r2, [pc, #472]	; (80055f0 <DMA_SetConfig+0x254>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d045      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a75      	ldr	r2, [pc, #468]	; (80055f4 <DMA_SetConfig+0x258>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d040      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a73      	ldr	r2, [pc, #460]	; (80055f8 <DMA_SetConfig+0x25c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d03b      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a72      	ldr	r2, [pc, #456]	; (80055fc <DMA_SetConfig+0x260>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d036      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a70      	ldr	r2, [pc, #448]	; (8005600 <DMA_SetConfig+0x264>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d031      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a6f      	ldr	r2, [pc, #444]	; (8005604 <DMA_SetConfig+0x268>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d02c      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6d      	ldr	r2, [pc, #436]	; (8005608 <DMA_SetConfig+0x26c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d027      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6c      	ldr	r2, [pc, #432]	; (800560c <DMA_SetConfig+0x270>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a6a      	ldr	r2, [pc, #424]	; (8005610 <DMA_SetConfig+0x274>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01d      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a69      	ldr	r2, [pc, #420]	; (8005614 <DMA_SetConfig+0x278>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a67      	ldr	r2, [pc, #412]	; (8005618 <DMA_SetConfig+0x27c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a66      	ldr	r2, [pc, #408]	; (800561c <DMA_SetConfig+0x280>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a64      	ldr	r2, [pc, #400]	; (8005620 <DMA_SetConfig+0x284>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a63      	ldr	r2, [pc, #396]	; (8005624 <DMA_SetConfig+0x288>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <DMA_SetConfig+0x10a>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a61      	ldr	r2, [pc, #388]	; (8005628 <DMA_SetConfig+0x28c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d101      	bne.n	80054aa <DMA_SetConfig+0x10e>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <DMA_SetConfig+0x110>
 80054aa:	2300      	movs	r3, #0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a3e      	ldr	r2, [pc, #248]	; (80055cc <DMA_SetConfig+0x230>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d04a      	beq.n	800556c <DMA_SetConfig+0x1d0>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3d      	ldr	r2, [pc, #244]	; (80055d0 <DMA_SetConfig+0x234>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d045      	beq.n	800556c <DMA_SetConfig+0x1d0>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a3b      	ldr	r2, [pc, #236]	; (80055d4 <DMA_SetConfig+0x238>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d040      	beq.n	800556c <DMA_SetConfig+0x1d0>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3a      	ldr	r2, [pc, #232]	; (80055d8 <DMA_SetConfig+0x23c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d03b      	beq.n	800556c <DMA_SetConfig+0x1d0>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a38      	ldr	r2, [pc, #224]	; (80055dc <DMA_SetConfig+0x240>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d036      	beq.n	800556c <DMA_SetConfig+0x1d0>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a37      	ldr	r2, [pc, #220]	; (80055e0 <DMA_SetConfig+0x244>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d031      	beq.n	800556c <DMA_SetConfig+0x1d0>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a35      	ldr	r2, [pc, #212]	; (80055e4 <DMA_SetConfig+0x248>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d02c      	beq.n	800556c <DMA_SetConfig+0x1d0>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a34      	ldr	r2, [pc, #208]	; (80055e8 <DMA_SetConfig+0x24c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d027      	beq.n	800556c <DMA_SetConfig+0x1d0>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a32      	ldr	r2, [pc, #200]	; (80055ec <DMA_SetConfig+0x250>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d022      	beq.n	800556c <DMA_SetConfig+0x1d0>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a31      	ldr	r2, [pc, #196]	; (80055f0 <DMA_SetConfig+0x254>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d01d      	beq.n	800556c <DMA_SetConfig+0x1d0>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2f      	ldr	r2, [pc, #188]	; (80055f4 <DMA_SetConfig+0x258>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d018      	beq.n	800556c <DMA_SetConfig+0x1d0>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2e      	ldr	r2, [pc, #184]	; (80055f8 <DMA_SetConfig+0x25c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <DMA_SetConfig+0x1d0>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <DMA_SetConfig+0x260>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <DMA_SetConfig+0x1d0>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <DMA_SetConfig+0x264>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <DMA_SetConfig+0x1d0>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a29      	ldr	r2, [pc, #164]	; (8005604 <DMA_SetConfig+0x268>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <DMA_SetConfig+0x1d0>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a28      	ldr	r2, [pc, #160]	; (8005608 <DMA_SetConfig+0x26c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d101      	bne.n	8005570 <DMA_SetConfig+0x1d4>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <DMA_SetConfig+0x1d6>
 8005570:	2300      	movs	r3, #0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d05a      	beq.n	800562c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	223f      	movs	r2, #63	; 0x3f
 8005580:	409a      	lsls	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005594:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d108      	bne.n	80055b8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055b6:	e087      	b.n	80056c8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]
}
 80055c8:	e07e      	b.n	80056c8 <DMA_SetConfig+0x32c>
 80055ca:	bf00      	nop
 80055cc:	40020010 	.word	0x40020010
 80055d0:	40020028 	.word	0x40020028
 80055d4:	40020040 	.word	0x40020040
 80055d8:	40020058 	.word	0x40020058
 80055dc:	40020070 	.word	0x40020070
 80055e0:	40020088 	.word	0x40020088
 80055e4:	400200a0 	.word	0x400200a0
 80055e8:	400200b8 	.word	0x400200b8
 80055ec:	40020410 	.word	0x40020410
 80055f0:	40020428 	.word	0x40020428
 80055f4:	40020440 	.word	0x40020440
 80055f8:	40020458 	.word	0x40020458
 80055fc:	40020470 	.word	0x40020470
 8005600:	40020488 	.word	0x40020488
 8005604:	400204a0 	.word	0x400204a0
 8005608:	400204b8 	.word	0x400204b8
 800560c:	58025408 	.word	0x58025408
 8005610:	5802541c 	.word	0x5802541c
 8005614:	58025430 	.word	0x58025430
 8005618:	58025444 	.word	0x58025444
 800561c:	58025458 	.word	0x58025458
 8005620:	5802546c 	.word	0x5802546c
 8005624:	58025480 	.word	0x58025480
 8005628:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a28      	ldr	r2, [pc, #160]	; (80056d4 <DMA_SetConfig+0x338>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d022      	beq.n	800567c <DMA_SetConfig+0x2e0>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <DMA_SetConfig+0x33c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d01d      	beq.n	800567c <DMA_SetConfig+0x2e0>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a25      	ldr	r2, [pc, #148]	; (80056dc <DMA_SetConfig+0x340>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d018      	beq.n	800567c <DMA_SetConfig+0x2e0>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a24      	ldr	r2, [pc, #144]	; (80056e0 <DMA_SetConfig+0x344>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <DMA_SetConfig+0x2e0>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <DMA_SetConfig+0x348>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00e      	beq.n	800567c <DMA_SetConfig+0x2e0>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <DMA_SetConfig+0x34c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d009      	beq.n	800567c <DMA_SetConfig+0x2e0>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <DMA_SetConfig+0x350>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <DMA_SetConfig+0x2e0>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1e      	ldr	r2, [pc, #120]	; (80056f0 <DMA_SetConfig+0x354>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <DMA_SetConfig+0x2e4>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <DMA_SetConfig+0x2e6>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d020      	beq.n	80056c8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2201      	movs	r2, #1
 8005690:	409a      	lsls	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d108      	bne.n	80056b8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	60da      	str	r2, [r3, #12]
}
 80056b6:	e007      	b.n	80056c8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	60da      	str	r2, [r3, #12]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	58025408 	.word	0x58025408
 80056d8:	5802541c 	.word	0x5802541c
 80056dc:	58025430 	.word	0x58025430
 80056e0:	58025444 	.word	0x58025444
 80056e4:	58025458 	.word	0x58025458
 80056e8:	5802546c 	.word	0x5802546c
 80056ec:	58025480 	.word	0x58025480
 80056f0:	58025494 	.word	0x58025494

080056f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a42      	ldr	r2, [pc, #264]	; (800580c <DMA_CalcBaseAndBitshift+0x118>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d04a      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a41      	ldr	r2, [pc, #260]	; (8005810 <DMA_CalcBaseAndBitshift+0x11c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d045      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a3f      	ldr	r2, [pc, #252]	; (8005814 <DMA_CalcBaseAndBitshift+0x120>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d040      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a3e      	ldr	r2, [pc, #248]	; (8005818 <DMA_CalcBaseAndBitshift+0x124>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d03b      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a3c      	ldr	r2, [pc, #240]	; (800581c <DMA_CalcBaseAndBitshift+0x128>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d036      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a3b      	ldr	r2, [pc, #236]	; (8005820 <DMA_CalcBaseAndBitshift+0x12c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d031      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a39      	ldr	r2, [pc, #228]	; (8005824 <DMA_CalcBaseAndBitshift+0x130>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d02c      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a38      	ldr	r2, [pc, #224]	; (8005828 <DMA_CalcBaseAndBitshift+0x134>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d027      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a36      	ldr	r2, [pc, #216]	; (800582c <DMA_CalcBaseAndBitshift+0x138>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d022      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a35      	ldr	r2, [pc, #212]	; (8005830 <DMA_CalcBaseAndBitshift+0x13c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d01d      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a33      	ldr	r2, [pc, #204]	; (8005834 <DMA_CalcBaseAndBitshift+0x140>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d018      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a32      	ldr	r2, [pc, #200]	; (8005838 <DMA_CalcBaseAndBitshift+0x144>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a30      	ldr	r2, [pc, #192]	; (800583c <DMA_CalcBaseAndBitshift+0x148>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2f      	ldr	r2, [pc, #188]	; (8005840 <DMA_CalcBaseAndBitshift+0x14c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2d      	ldr	r2, [pc, #180]	; (8005844 <DMA_CalcBaseAndBitshift+0x150>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <DMA_CalcBaseAndBitshift+0xa8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2c      	ldr	r2, [pc, #176]	; (8005848 <DMA_CalcBaseAndBitshift+0x154>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d101      	bne.n	80057a0 <DMA_CalcBaseAndBitshift+0xac>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <DMA_CalcBaseAndBitshift+0xae>
 80057a0:	2300      	movs	r3, #0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d024      	beq.n	80057f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	3b10      	subs	r3, #16
 80057ae:	4a27      	ldr	r2, [pc, #156]	; (800584c <DMA_CalcBaseAndBitshift+0x158>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	4a24      	ldr	r2, [pc, #144]	; (8005850 <DMA_CalcBaseAndBitshift+0x15c>)
 80057c0:	5cd3      	ldrb	r3, [r2, r3]
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d908      	bls.n	80057e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <DMA_CalcBaseAndBitshift+0x160>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	1d1a      	adds	r2, r3, #4
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	659a      	str	r2, [r3, #88]	; 0x58
 80057de:	e00d      	b.n	80057fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <DMA_CalcBaseAndBitshift+0x160>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6593      	str	r3, [r2, #88]	; 0x58
 80057ee:	e005      	b.n	80057fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40020010 	.word	0x40020010
 8005810:	40020028 	.word	0x40020028
 8005814:	40020040 	.word	0x40020040
 8005818:	40020058 	.word	0x40020058
 800581c:	40020070 	.word	0x40020070
 8005820:	40020088 	.word	0x40020088
 8005824:	400200a0 	.word	0x400200a0
 8005828:	400200b8 	.word	0x400200b8
 800582c:	40020410 	.word	0x40020410
 8005830:	40020428 	.word	0x40020428
 8005834:	40020440 	.word	0x40020440
 8005838:	40020458 	.word	0x40020458
 800583c:	40020470 	.word	0x40020470
 8005840:	40020488 	.word	0x40020488
 8005844:	400204a0 	.word	0x400204a0
 8005848:	400204b8 	.word	0x400204b8
 800584c:	aaaaaaab 	.word	0xaaaaaaab
 8005850:	0800ca94 	.word	0x0800ca94
 8005854:	fffffc00 	.word	0xfffffc00

08005858 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d120      	bne.n	80058ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	2b03      	cmp	r3, #3
 8005872:	d858      	bhi.n	8005926 <DMA_CheckFifoParam+0xce>
 8005874:	a201      	add	r2, pc, #4	; (adr r2, 800587c <DMA_CheckFifoParam+0x24>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	0800588d 	.word	0x0800588d
 8005880:	0800589f 	.word	0x0800589f
 8005884:	0800588d 	.word	0x0800588d
 8005888:	08005927 	.word	0x08005927
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d048      	beq.n	800592a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800589c:	e045      	b.n	800592a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058a6:	d142      	bne.n	800592e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058ac:	e03f      	b.n	800592e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b6:	d123      	bne.n	8005900 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d838      	bhi.n	8005932 <DMA_CheckFifoParam+0xda>
 80058c0:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <DMA_CheckFifoParam+0x70>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	080058df 	.word	0x080058df
 80058d0:	080058d9 	.word	0x080058d9
 80058d4:	080058f1 	.word	0x080058f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
        break;
 80058dc:	e030      	b.n	8005940 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d025      	beq.n	8005936 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058ee:	e022      	b.n	8005936 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058f8:	d11f      	bne.n	800593a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058fe:	e01c      	b.n	800593a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	2b02      	cmp	r3, #2
 8005906:	d902      	bls.n	800590e <DMA_CheckFifoParam+0xb6>
 8005908:	2b03      	cmp	r3, #3
 800590a:	d003      	beq.n	8005914 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800590c:	e018      	b.n	8005940 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
        break;
 8005912:	e015      	b.n	8005940 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00e      	beq.n	800593e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
    break;
 8005924:	e00b      	b.n	800593e <DMA_CheckFifoParam+0xe6>
        break;
 8005926:	bf00      	nop
 8005928:	e00a      	b.n	8005940 <DMA_CheckFifoParam+0xe8>
        break;
 800592a:	bf00      	nop
 800592c:	e008      	b.n	8005940 <DMA_CheckFifoParam+0xe8>
        break;
 800592e:	bf00      	nop
 8005930:	e006      	b.n	8005940 <DMA_CheckFifoParam+0xe8>
        break;
 8005932:	bf00      	nop
 8005934:	e004      	b.n	8005940 <DMA_CheckFifoParam+0xe8>
        break;
 8005936:	bf00      	nop
 8005938:	e002      	b.n	8005940 <DMA_CheckFifoParam+0xe8>
        break;
 800593a:	bf00      	nop
 800593c:	e000      	b.n	8005940 <DMA_CheckFifoParam+0xe8>
    break;
 800593e:	bf00      	nop
    }
  }

  return status;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop

08005950 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a38      	ldr	r2, [pc, #224]	; (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d022      	beq.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a36      	ldr	r2, [pc, #216]	; (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01d      	beq.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a35      	ldr	r2, [pc, #212]	; (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d018      	beq.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a33      	ldr	r2, [pc, #204]	; (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a32      	ldr	r2, [pc, #200]	; (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00e      	beq.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a30      	ldr	r2, [pc, #192]	; (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2f      	ldr	r2, [pc, #188]	; (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2d      	ldr	r2, [pc, #180]	; (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01a      	beq.n	80059ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	3b08      	subs	r3, #8
 80059c0:	4a28      	ldr	r2, [pc, #160]	; (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	461a      	mov	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a24      	ldr	r2, [pc, #144]	; (8005a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	2201      	movs	r2, #1
 80059e6:	409a      	lsls	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059ec:	e024      	b.n	8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	3b10      	subs	r3, #16
 80059f6:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4a1c      	ldr	r2, [pc, #112]	; (8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d806      	bhi.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4a1b      	ldr	r2, [pc, #108]	; (8005a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d902      	bls.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3308      	adds	r3, #8
 8005a14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	461a      	mov	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2201      	movs	r2, #1
 8005a32:	409a      	lsls	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	58025408 	.word	0x58025408
 8005a48:	5802541c 	.word	0x5802541c
 8005a4c:	58025430 	.word	0x58025430
 8005a50:	58025444 	.word	0x58025444
 8005a54:	58025458 	.word	0x58025458
 8005a58:	5802546c 	.word	0x5802546c
 8005a5c:	58025480 	.word	0x58025480
 8005a60:	58025494 	.word	0x58025494
 8005a64:	cccccccd 	.word	0xcccccccd
 8005a68:	16009600 	.word	0x16009600
 8005a6c:	58025880 	.word	0x58025880
 8005a70:	aaaaaaab 	.word	0xaaaaaaab
 8005a74:	400204b8 	.word	0x400204b8
 8005a78:	4002040f 	.word	0x4002040f
 8005a7c:	10008200 	.word	0x10008200
 8005a80:	40020880 	.word	0x40020880

08005a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d04a      	beq.n	8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d847      	bhi.n	8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d022      	beq.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01d      	beq.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d018      	beq.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00e      	beq.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1e      	ldr	r2, [pc, #120]	; (8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d009      	beq.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4b17      	ldr	r3, [pc, #92]	; (8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b0c:	671a      	str	r2, [r3, #112]	; 0x70
 8005b0e:	e009      	b.n	8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a11      	ldr	r2, [pc, #68]	; (8005b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	2201      	movs	r2, #1
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	58025408 	.word	0x58025408
 8005b40:	5802541c 	.word	0x5802541c
 8005b44:	58025430 	.word	0x58025430
 8005b48:	58025444 	.word	0x58025444
 8005b4c:	58025458 	.word	0x58025458
 8005b50:	5802546c 	.word	0x5802546c
 8005b54:	58025480 	.word	0x58025480
 8005b58:	58025494 	.word	0x58025494
 8005b5c:	1600963f 	.word	0x1600963f
 8005b60:	58025940 	.word	0x58025940
 8005b64:	1000823f 	.word	0x1000823f
 8005b68:	40020940 	.word	0x40020940

08005b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b089      	sub	sp, #36	; 0x24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b7a:	4b89      	ldr	r3, [pc, #548]	; (8005da0 <HAL_GPIO_Init+0x234>)
 8005b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b7e:	e194      	b.n	8005eaa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	2101      	movs	r1, #1
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8186 	beq.w	8005ea4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d00b      	beq.n	8005bb8 <HAL_GPIO_Init+0x4c>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d007      	beq.n	8005bb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005bac:	2b11      	cmp	r3, #17
 8005bae:	d003      	beq.n	8005bb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b12      	cmp	r3, #18
 8005bb6:	d130      	bne.n	8005c1a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bee:	2201      	movs	r2, #1
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	f003 0201 	and.w	r2, r3, #1
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	2203      	movs	r2, #3
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d003      	beq.n	8005c5a <HAL_GPIO_Init+0xee>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b12      	cmp	r3, #18
 8005c58:	d123      	bne.n	8005ca2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	08da      	lsrs	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3208      	adds	r2, #8
 8005c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	220f      	movs	r2, #15
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	08da      	lsrs	r2, r3, #3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3208      	adds	r2, #8
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	2203      	movs	r2, #3
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f003 0203 	and.w	r2, r3, #3
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80e0 	beq.w	8005ea4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce4:	4b2f      	ldr	r3, [pc, #188]	; (8005da4 <HAL_GPIO_Init+0x238>)
 8005ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cea:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <HAL_GPIO_Init+0x238>)
 8005cec:	f043 0302 	orr.w	r3, r3, #2
 8005cf0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005cf4:	4b2b      	ldr	r3, [pc, #172]	; (8005da4 <HAL_GPIO_Init+0x238>)
 8005cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d02:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <HAL_GPIO_Init+0x23c>)
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	3302      	adds	r3, #2
 8005d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	220f      	movs	r2, #15
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a20      	ldr	r2, [pc, #128]	; (8005dac <HAL_GPIO_Init+0x240>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d052      	beq.n	8005dd4 <HAL_GPIO_Init+0x268>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <HAL_GPIO_Init+0x244>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d031      	beq.n	8005d9a <HAL_GPIO_Init+0x22e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <HAL_GPIO_Init+0x248>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02b      	beq.n	8005d96 <HAL_GPIO_Init+0x22a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1d      	ldr	r2, [pc, #116]	; (8005db8 <HAL_GPIO_Init+0x24c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d025      	beq.n	8005d92 <HAL_GPIO_Init+0x226>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <HAL_GPIO_Init+0x250>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01f      	beq.n	8005d8e <HAL_GPIO_Init+0x222>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <HAL_GPIO_Init+0x254>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d019      	beq.n	8005d8a <HAL_GPIO_Init+0x21e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <HAL_GPIO_Init+0x258>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_GPIO_Init+0x21a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a19      	ldr	r2, [pc, #100]	; (8005dc8 <HAL_GPIO_Init+0x25c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00d      	beq.n	8005d82 <HAL_GPIO_Init+0x216>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a18      	ldr	r2, [pc, #96]	; (8005dcc <HAL_GPIO_Init+0x260>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <HAL_GPIO_Init+0x212>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <HAL_GPIO_Init+0x264>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d101      	bne.n	8005d7a <HAL_GPIO_Init+0x20e>
 8005d76:	2309      	movs	r3, #9
 8005d78:	e02d      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d7a:	230a      	movs	r3, #10
 8005d7c:	e02b      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	e029      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d82:	2307      	movs	r3, #7
 8005d84:	e027      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d86:	2306      	movs	r3, #6
 8005d88:	e025      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d8a:	2305      	movs	r3, #5
 8005d8c:	e023      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d8e:	2304      	movs	r3, #4
 8005d90:	e021      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d92:	2303      	movs	r3, #3
 8005d94:	e01f      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e01d      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e01b      	b.n	8005dd6 <HAL_GPIO_Init+0x26a>
 8005d9e:	bf00      	nop
 8005da0:	58000080 	.word	0x58000080
 8005da4:	58024400 	.word	0x58024400
 8005da8:	58000400 	.word	0x58000400
 8005dac:	58020000 	.word	0x58020000
 8005db0:	58020400 	.word	0x58020400
 8005db4:	58020800 	.word	0x58020800
 8005db8:	58020c00 	.word	0x58020c00
 8005dbc:	58021000 	.word	0x58021000
 8005dc0:	58021400 	.word	0x58021400
 8005dc4:	58021800 	.word	0x58021800
 8005dc8:	58021c00 	.word	0x58021c00
 8005dcc:	58022000 	.word	0x58022000
 8005dd0:	58022400 	.word	0x58022400
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	f002 0203 	and.w	r2, r2, #3
 8005ddc:	0092      	lsls	r2, r2, #2
 8005dde:	4093      	lsls	r3, r2
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005de6:	4938      	ldr	r1, [pc, #224]	; (8005ec8 <HAL_GPIO_Init+0x35c>)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	089b      	lsrs	r3, r3, #2
 8005dec:	3302      	adds	r3, #2
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	43db      	mvns	r3, r3
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	43db      	mvns	r3, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4013      	ands	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f47f ae63 	bne.w	8005b80 <HAL_GPIO_Init+0x14>
  }
}
 8005eba:	bf00      	nop
 8005ebc:	3724      	adds	r7, #36	; 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	58000400 	.word	0x58000400

08005ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	807b      	strh	r3, [r7, #2]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005edc:	787b      	ldrb	r3, [r7, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ee2:	887a      	ldrh	r2, [r7, #2]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ee8:	e003      	b.n	8005ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005eea:	887b      	ldrh	r3, [r7, #2]
 8005eec:	041a      	lsls	r2, r3, #16
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	619a      	str	r2, [r3, #24]
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	887b      	ldrh	r3, [r7, #2]
 8005f10:	401a      	ands	r2, r3
 8005f12:	887b      	ldrh	r3, [r7, #2]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d104      	bne.n	8005f22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f18:	887b      	ldrh	r3, [r7, #2]
 8005f1a:	041a      	lsls	r2, r3, #16
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005f20:	e002      	b.n	8005f28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005f22:	887a      	ldrh	r2, [r7, #2]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	619a      	str	r2, [r3, #24]
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f3c:	4b19      	ldr	r3, [pc, #100]	; (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d00a      	beq.n	8005f5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f48:	4b16      	ldr	r3, [pc, #88]	; (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d001      	beq.n	8005f5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01f      	b.n	8005f9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e01d      	b.n	8005f9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f5e:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f023 0207 	bic.w	r2, r3, #7
 8005f66:	490f      	ldr	r1, [pc, #60]	; (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f6e:	f7fb ffff 	bl	8001f70 <HAL_GetTick>
 8005f72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f74:	e009      	b.n	8005f8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f76:	f7fb fffb 	bl	8001f70 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f84:	d901      	bls.n	8005f8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e007      	b.n	8005f9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <HAL_PWREx_ConfigSupply+0x70>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f96:	d1ee      	bne.n	8005f76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	58024800 	.word	0x58024800

08005fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e3c4      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 8087 	beq.w	80060d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc8:	4ba2      	ldr	r3, [pc, #648]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd2:	4ba0      	ldr	r3, [pc, #640]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d007      	beq.n	8005fee <HAL_RCC_OscConfig+0x46>
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	2b18      	cmp	r3, #24
 8005fe2:	d110      	bne.n	8006006 <HAL_RCC_OscConfig+0x5e>
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d10b      	bne.n	8006006 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fee:	4b99      	ldr	r3, [pc, #612]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d06c      	beq.n	80060d4 <HAL_RCC_OscConfig+0x12c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d168      	bne.n	80060d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e39e      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600e:	d106      	bne.n	800601e <HAL_RCC_OscConfig+0x76>
 8006010:	4b90      	ldr	r3, [pc, #576]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a8f      	ldr	r2, [pc, #572]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e02e      	b.n	800607c <HAL_RCC_OscConfig+0xd4>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10c      	bne.n	8006040 <HAL_RCC_OscConfig+0x98>
 8006026:	4b8b      	ldr	r3, [pc, #556]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a8a      	ldr	r2, [pc, #552]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 800602c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	4b88      	ldr	r3, [pc, #544]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a87      	ldr	r2, [pc, #540]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e01d      	b.n	800607c <HAL_RCC_OscConfig+0xd4>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006048:	d10c      	bne.n	8006064 <HAL_RCC_OscConfig+0xbc>
 800604a:	4b82      	ldr	r3, [pc, #520]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a81      	ldr	r2, [pc, #516]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b7f      	ldr	r3, [pc, #508]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a7e      	ldr	r2, [pc, #504]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e00b      	b.n	800607c <HAL_RCC_OscConfig+0xd4>
 8006064:	4b7b      	ldr	r3, [pc, #492]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a7a      	ldr	r2, [pc, #488]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 800606a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	4b78      	ldr	r3, [pc, #480]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a77      	ldr	r2, [pc, #476]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800607a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d013      	beq.n	80060ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006084:	f7fb ff74 	bl	8001f70 <HAL_GetTick>
 8006088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800608c:	f7fb ff70 	bl	8001f70 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b64      	cmp	r3, #100	; 0x64
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e352      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800609e:	4b6d      	ldr	r3, [pc, #436]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0xe4>
 80060aa:	e014      	b.n	80060d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fb ff60 	bl	8001f70 <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b4:	f7fb ff5c 	bl	8001f70 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	; 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e33e      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060c6:	4b63      	ldr	r3, [pc, #396]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0x10c>
 80060d2:	e000      	b.n	80060d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8092 	beq.w	8006208 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e4:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060ee:	4b59      	ldr	r3, [pc, #356]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <HAL_RCC_OscConfig+0x162>
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	2b18      	cmp	r3, #24
 80060fe:	d12d      	bne.n	800615c <HAL_RCC_OscConfig+0x1b4>
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d128      	bne.n	800615c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800610a:	4b52      	ldr	r3, [pc, #328]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_RCC_OscConfig+0x17a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e310      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006122:	f7fb ff53 	bl	8001fcc <HAL_GetREVID>
 8006126:	4602      	mov	r2, r0
 8006128:	f241 0303 	movw	r3, #4099	; 0x1003
 800612c:	429a      	cmp	r2, r3
 800612e:	d80a      	bhi.n	8006146 <HAL_RCC_OscConfig+0x19e>
 8006130:	4b48      	ldr	r3, [pc, #288]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	031b      	lsls	r3, r3, #12
 800613e:	4945      	ldr	r1, [pc, #276]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006140:	4313      	orrs	r3, r2
 8006142:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006144:	e060      	b.n	8006208 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006146:	4b43      	ldr	r3, [pc, #268]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	061b      	lsls	r3, r3, #24
 8006154:	493f      	ldr	r1, [pc, #252]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006156:	4313      	orrs	r3, r2
 8006158:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800615a:	e055      	b.n	8006208 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d038      	beq.n	80061d6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006164:	4b3b      	ldr	r3, [pc, #236]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f023 0219 	bic.w	r2, r3, #25
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	4938      	ldr	r1, [pc, #224]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006172:	4313      	orrs	r3, r2
 8006174:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006176:	f7fb fefb 	bl	8001f70 <HAL_GetTick>
 800617a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800617e:	f7fb fef7 	bl	8001f70 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e2d9      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006190:	4b30      	ldr	r3, [pc, #192]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619c:	f7fb ff16 	bl	8001fcc <HAL_GetREVID>
 80061a0:	4602      	mov	r2, r0
 80061a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d80a      	bhi.n	80061c0 <HAL_RCC_OscConfig+0x218>
 80061aa:	4b2a      	ldr	r3, [pc, #168]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	031b      	lsls	r3, r3, #12
 80061b8:	4926      	ldr	r1, [pc, #152]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	604b      	str	r3, [r1, #4]
 80061be:	e023      	b.n	8006208 <HAL_RCC_OscConfig+0x260>
 80061c0:	4b24      	ldr	r3, [pc, #144]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	061b      	lsls	r3, r3, #24
 80061ce:	4921      	ldr	r1, [pc, #132]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
 80061d4:	e018      	b.n	8006208 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e2:	f7fb fec5 	bl	8001f70 <HAL_GetTick>
 80061e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ea:	f7fb fec1 	bl	8001f70 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e2a3      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061fc:	4b15      	ldr	r3, [pc, #84]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8091 	beq.w	8006338 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800621e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006220:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b08      	cmp	r3, #8
 800622a:	d007      	beq.n	800623c <HAL_RCC_OscConfig+0x294>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b18      	cmp	r3, #24
 8006230:	d12f      	bne.n	8006292 <HAL_RCC_OscConfig+0x2ea>
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	2b01      	cmp	r3, #1
 800623a:	d12a      	bne.n	8006292 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_RCC_OscConfig+0x2ac>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_RCC_OscConfig+0x2b0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	2b80      	cmp	r3, #128	; 0x80
 800624e:	d003      	beq.n	8006258 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e277      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
 8006254:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006258:	f7fb feb8 	bl	8001fcc <HAL_GetREVID>
 800625c:	4602      	mov	r2, r0
 800625e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006262:	429a      	cmp	r2, r3
 8006264:	d80a      	bhi.n	800627c <HAL_RCC_OscConfig+0x2d4>
 8006266:	4ba2      	ldr	r3, [pc, #648]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	069b      	lsls	r3, r3, #26
 8006274:	499e      	ldr	r1, [pc, #632]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006276:	4313      	orrs	r3, r2
 8006278:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800627a:	e05d      	b.n	8006338 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800627c:	4b9c      	ldr	r3, [pc, #624]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	061b      	lsls	r3, r3, #24
 800628a:	4999      	ldr	r1, [pc, #612]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800628c:	4313      	orrs	r3, r2
 800628e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006290:	e052      	b.n	8006338 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d035      	beq.n	8006306 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800629a:	4b95      	ldr	r3, [pc, #596]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a94      	ldr	r2, [pc, #592]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a6:	f7fb fe63 	bl	8001f70 <HAL_GetTick>
 80062aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062ae:	f7fb fe5f 	bl	8001f70 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e241      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062c0:	4b8b      	ldr	r3, [pc, #556]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0f0      	beq.n	80062ae <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062cc:	f7fb fe7e 	bl	8001fcc <HAL_GetREVID>
 80062d0:	4602      	mov	r2, r0
 80062d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d80a      	bhi.n	80062f0 <HAL_RCC_OscConfig+0x348>
 80062da:	4b85      	ldr	r3, [pc, #532]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	069b      	lsls	r3, r3, #26
 80062e8:	4981      	ldr	r1, [pc, #516]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	604b      	str	r3, [r1, #4]
 80062ee:	e023      	b.n	8006338 <HAL_RCC_OscConfig+0x390>
 80062f0:	4b7f      	ldr	r3, [pc, #508]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	061b      	lsls	r3, r3, #24
 80062fe:	497c      	ldr	r1, [pc, #496]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006300:	4313      	orrs	r3, r2
 8006302:	60cb      	str	r3, [r1, #12]
 8006304:	e018      	b.n	8006338 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006306:	4b7a      	ldr	r3, [pc, #488]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a79      	ldr	r2, [pc, #484]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800630c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fb fe2d 	bl	8001f70 <HAL_GetTick>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800631a:	f7fb fe29 	bl	8001f70 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e20b      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800632c:	4b70      	ldr	r3, [pc, #448]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f0      	bne.n	800631a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d036      	beq.n	80063b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d019      	beq.n	8006380 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800634c:	4b68      	ldr	r3, [pc, #416]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800634e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006350:	4a67      	ldr	r2, [pc, #412]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006358:	f7fb fe0a 	bl	8001f70 <HAL_GetTick>
 800635c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006360:	f7fb fe06 	bl	8001f70 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e1e8      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006372:	4b5f      	ldr	r3, [pc, #380]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0f0      	beq.n	8006360 <HAL_RCC_OscConfig+0x3b8>
 800637e:	e018      	b.n	80063b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006380:	4b5b      	ldr	r3, [pc, #364]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006384:	4a5a      	ldr	r2, [pc, #360]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638c:	f7fb fdf0 	bl	8001f70 <HAL_GetTick>
 8006390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006394:	f7fb fdec 	bl	8001f70 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e1ce      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063a6:	4b52      	ldr	r3, [pc, #328]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80063a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d036      	beq.n	800642c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d019      	beq.n	80063fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063c6:	4b4a      	ldr	r3, [pc, #296]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a49      	ldr	r2, [pc, #292]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80063cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063d2:	f7fb fdcd 	bl	8001f70 <HAL_GetTick>
 80063d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063da:	f7fb fdc9 	bl	8001f70 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e1ab      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063ec:	4b40      	ldr	r3, [pc, #256]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f0      	beq.n	80063da <HAL_RCC_OscConfig+0x432>
 80063f8:	e018      	b.n	800642c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063fa:	4b3d      	ldr	r3, [pc, #244]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a3c      	ldr	r2, [pc, #240]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006404:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006406:	f7fb fdb3 	bl	8001f70 <HAL_GetTick>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800640e:	f7fb fdaf 	bl	8001f70 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e191      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006420:	4b33      	ldr	r3, [pc, #204]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f0      	bne.n	800640e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8086 	beq.w	8006546 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800643a:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <HAL_RCC_OscConfig+0x54c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a2d      	ldr	r2, [pc, #180]	; (80064f4 <HAL_RCC_OscConfig+0x54c>)
 8006440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006446:	f7fb fd93 	bl	8001f70 <HAL_GetTick>
 800644a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800644c:	e008      	b.n	8006460 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800644e:	f7fb fd8f 	bl	8001f70 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b64      	cmp	r3, #100	; 0x64
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e171      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006460:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <HAL_RCC_OscConfig+0x54c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0f0      	beq.n	800644e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d106      	bne.n	8006482 <HAL_RCC_OscConfig+0x4da>
 8006474:	4b1e      	ldr	r3, [pc, #120]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006478:	4a1d      	ldr	r2, [pc, #116]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6713      	str	r3, [r2, #112]	; 0x70
 8006480:	e02d      	b.n	80064de <HAL_RCC_OscConfig+0x536>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10c      	bne.n	80064a4 <HAL_RCC_OscConfig+0x4fc>
 800648a:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006490:	f023 0301 	bic.w	r3, r3, #1
 8006494:	6713      	str	r3, [r2, #112]	; 0x70
 8006496:	4b16      	ldr	r3, [pc, #88]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 8006498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649a:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 800649c:	f023 0304 	bic.w	r3, r3, #4
 80064a0:	6713      	str	r3, [r2, #112]	; 0x70
 80064a2:	e01c      	b.n	80064de <HAL_RCC_OscConfig+0x536>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	d10c      	bne.n	80064c6 <HAL_RCC_OscConfig+0x51e>
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b0:	4a0f      	ldr	r2, [pc, #60]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80064b2:	f043 0304 	orr.w	r3, r3, #4
 80064b6:	6713      	str	r3, [r2, #112]	; 0x70
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a0c      	ldr	r2, [pc, #48]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
 80064c4:	e00b      	b.n	80064de <HAL_RCC_OscConfig+0x536>
 80064c6:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	6713      	str	r3, [r2, #112]	; 0x70
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	4a06      	ldr	r2, [pc, #24]	; (80064f0 <HAL_RCC_OscConfig+0x548>)
 80064d8:	f023 0304 	bic.w	r3, r3, #4
 80064dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01a      	beq.n	800651c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e6:	f7fb fd43 	bl	8001f70 <HAL_GetTick>
 80064ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064ec:	e00f      	b.n	800650e <HAL_RCC_OscConfig+0x566>
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
 80064f4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f8:	f7fb fd3a 	bl	8001f70 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f241 3288 	movw	r2, #5000	; 0x1388
 8006506:	4293      	cmp	r3, r2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e11a      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800650e:	4b8f      	ldr	r3, [pc, #572]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0ee      	beq.n	80064f8 <HAL_RCC_OscConfig+0x550>
 800651a:	e014      	b.n	8006546 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651c:	f7fb fd28 	bl	8001f70 <HAL_GetTick>
 8006520:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006522:	e00a      	b.n	800653a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006524:	f7fb fd24 	bl	8001f70 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e104      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800653a:	4b84      	ldr	r3, [pc, #528]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ee      	bne.n	8006524 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80f9 	beq.w	8006742 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006550:	4b7e      	ldr	r3, [pc, #504]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006558:	2b18      	cmp	r3, #24
 800655a:	f000 80b4 	beq.w	80066c6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b02      	cmp	r3, #2
 8006564:	f040 8095 	bne.w	8006692 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006568:	4b78      	ldr	r3, [pc, #480]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a77      	ldr	r2, [pc, #476]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800656e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fb fcfc 	bl	8001f70 <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800657c:	f7fb fcf8 	bl	8001f70 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e0da      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800658e:	4b6f      	ldr	r3, [pc, #444]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800659a:	4b6c      	ldr	r3, [pc, #432]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800659c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800659e:	4b6c      	ldr	r3, [pc, #432]	; (8006750 <HAL_RCC_OscConfig+0x7a8>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065aa:	0112      	lsls	r2, r2, #4
 80065ac:	430a      	orrs	r2, r1
 80065ae:	4967      	ldr	r1, [pc, #412]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	628b      	str	r3, [r1, #40]	; 0x28
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	3b01      	subs	r3, #1
 80065ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	3b01      	subs	r3, #1
 80065c4:	025b      	lsls	r3, r3, #9
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	3b01      	subs	r3, #1
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	3b01      	subs	r3, #1
 80065de:	061b      	lsls	r3, r3, #24
 80065e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065e4:	4959      	ldr	r1, [pc, #356]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80065ea:	4b58      	ldr	r3, [pc, #352]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	4a57      	ldr	r2, [pc, #348]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065f6:	4b55      	ldr	r3, [pc, #340]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 80065f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065fa:	4b56      	ldr	r3, [pc, #344]	; (8006754 <HAL_RCC_OscConfig+0x7ac>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006602:	00d2      	lsls	r2, r2, #3
 8006604:	4951      	ldr	r1, [pc, #324]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006606:	4313      	orrs	r3, r2
 8006608:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800660a:	4b50      	ldr	r3, [pc, #320]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	f023 020c 	bic.w	r2, r3, #12
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	494d      	ldr	r1, [pc, #308]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006618:	4313      	orrs	r3, r2
 800661a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800661c:	4b4b      	ldr	r3, [pc, #300]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	f023 0202 	bic.w	r2, r3, #2
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006628:	4948      	ldr	r1, [pc, #288]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800662a:	4313      	orrs	r3, r2
 800662c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800662e:	4b47      	ldr	r3, [pc, #284]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	4a46      	ldr	r2, [pc, #280]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663a:	4b44      	ldr	r3, [pc, #272]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	4a43      	ldr	r2, [pc, #268]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006646:	4b41      	ldr	r3, [pc, #260]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	4a40      	ldr	r2, [pc, #256]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 800664c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006650:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006652:	4b3e      	ldr	r3, [pc, #248]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	4a3d      	ldr	r2, [pc, #244]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800665e:	4b3b      	ldr	r3, [pc, #236]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a3a      	ldr	r2, [pc, #232]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666a:	f7fb fc81 	bl	8001f70 <HAL_GetTick>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006672:	f7fb fc7d 	bl	8001f70 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e05f      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006684:	4b31      	ldr	r3, [pc, #196]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x6ca>
 8006690:	e057      	b.n	8006742 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006692:	4b2e      	ldr	r3, [pc, #184]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a2d      	ldr	r2, [pc, #180]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 8006698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800669c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669e:	f7fb fc67 	bl	8001f70 <HAL_GetTick>
 80066a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a6:	f7fb fc63 	bl	8001f70 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e045      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066b8:	4b24      	ldr	r3, [pc, #144]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f0      	bne.n	80066a6 <HAL_RCC_OscConfig+0x6fe>
 80066c4:	e03d      	b.n	8006742 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066c6:	4b21      	ldr	r3, [pc, #132]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066cc:	4b1f      	ldr	r3, [pc, #124]	; (800674c <HAL_RCC_OscConfig+0x7a4>)
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d031      	beq.n	800673e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f003 0203 	and.w	r2, r3, #3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d12a      	bne.n	800673e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d122      	bne.n	800673e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006704:	429a      	cmp	r2, r3
 8006706:	d11a      	bne.n	800673e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	0a5b      	lsrs	r3, r3, #9
 800670c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006716:	429a      	cmp	r2, r3
 8006718:	d111      	bne.n	800673e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006728:	429a      	cmp	r2, r3
 800672a:	d108      	bne.n	800673e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	0e1b      	lsrs	r3, r3, #24
 8006730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006738:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d001      	beq.n	8006742 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3730      	adds	r7, #48	; 0x30
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	58024400 	.word	0x58024400
 8006750:	fffffc0c 	.word	0xfffffc0c
 8006754:	ffff0007 	.word	0xffff0007

08006758 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e19c      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800676c:	4b8a      	ldr	r3, [pc, #552]	; (8006998 <HAL_RCC_ClockConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d910      	bls.n	800679c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	4b87      	ldr	r3, [pc, #540]	; (8006998 <HAL_RCC_ClockConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f023 020f 	bic.w	r2, r3, #15
 8006782:	4985      	ldr	r1, [pc, #532]	; (8006998 <HAL_RCC_ClockConfig+0x240>)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	4313      	orrs	r3, r2
 8006788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800678a:	4b83      	ldr	r3, [pc, #524]	; (8006998 <HAL_RCC_ClockConfig+0x240>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d001      	beq.n	800679c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e184      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d010      	beq.n	80067ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	4b7b      	ldr	r3, [pc, #492]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d908      	bls.n	80067ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067b8:	4b78      	ldr	r3, [pc, #480]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	4975      	ldr	r1, [pc, #468]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d010      	beq.n	80067f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695a      	ldr	r2, [r3, #20]
 80067da:	4b70      	ldr	r3, [pc, #448]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d908      	bls.n	80067f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067e6:	4b6d      	ldr	r3, [pc, #436]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	496a      	ldr	r1, [pc, #424]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b00      	cmp	r3, #0
 8006802:	d010      	beq.n	8006826 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	4b64      	ldr	r3, [pc, #400]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006810:	429a      	cmp	r2, r3
 8006812:	d908      	bls.n	8006826 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006814:	4b61      	ldr	r3, [pc, #388]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	495e      	ldr	r1, [pc, #376]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006822:	4313      	orrs	r3, r2
 8006824:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d010      	beq.n	8006854 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	4b59      	ldr	r3, [pc, #356]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800683e:	429a      	cmp	r2, r3
 8006840:	d908      	bls.n	8006854 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006842:	4b56      	ldr	r3, [pc, #344]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	4953      	ldr	r1, [pc, #332]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006850:	4313      	orrs	r3, r2
 8006852:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d010      	beq.n	8006882 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	4b4d      	ldr	r3, [pc, #308]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	429a      	cmp	r2, r3
 800686e:	d908      	bls.n	8006882 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006870:	4b4a      	ldr	r3, [pc, #296]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f023 020f 	bic.w	r2, r3, #15
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	4947      	ldr	r1, [pc, #284]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 800687e:	4313      	orrs	r3, r2
 8006880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d055      	beq.n	800693a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800688e:	4b43      	ldr	r3, [pc, #268]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	4940      	ldr	r1, [pc, #256]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 800689c:	4313      	orrs	r3, r2
 800689e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068a8:	4b3c      	ldr	r3, [pc, #240]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d121      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0f6      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d107      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068c0:	4b36      	ldr	r3, [pc, #216]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d115      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e0ea      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d107      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068d8:	4b30      	ldr	r3, [pc, #192]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0de      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068e8:	4b2c      	ldr	r3, [pc, #176]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0d6      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068f8:	4b28      	ldr	r3, [pc, #160]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f023 0207 	bic.w	r2, r3, #7
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4925      	ldr	r1, [pc, #148]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006906:	4313      	orrs	r3, r2
 8006908:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690a:	f7fb fb31 	bl	8001f70 <HAL_GetTick>
 800690e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006910:	e00a      	b.n	8006928 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006912:	f7fb fb2d 	bl	8001f70 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e0be      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006928:	4b1c      	ldr	r3, [pc, #112]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	429a      	cmp	r2, r3
 8006938:	d1eb      	bne.n	8006912 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d010      	beq.n	8006968 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	4b14      	ldr	r3, [pc, #80]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	429a      	cmp	r2, r3
 8006954:	d208      	bcs.n	8006968 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f023 020f 	bic.w	r2, r3, #15
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	490e      	ldr	r1, [pc, #56]	; (800699c <HAL_RCC_ClockConfig+0x244>)
 8006964:	4313      	orrs	r3, r2
 8006966:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006968:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <HAL_RCC_ClockConfig+0x240>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d214      	bcs.n	80069a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006976:	4b08      	ldr	r3, [pc, #32]	; (8006998 <HAL_RCC_ClockConfig+0x240>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 020f 	bic.w	r2, r3, #15
 800697e:	4906      	ldr	r1, [pc, #24]	; (8006998 <HAL_RCC_ClockConfig+0x240>)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	4313      	orrs	r3, r2
 8006984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b04      	ldr	r3, [pc, #16]	; (8006998 <HAL_RCC_ClockConfig+0x240>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d005      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e086      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x34e>
 8006998:	52002000 	.word	0x52002000
 800699c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d010      	beq.n	80069ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	4b3f      	ldr	r3, [pc, #252]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d208      	bcs.n	80069ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069bc:	4b3c      	ldr	r3, [pc, #240]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	4939      	ldr	r1, [pc, #228]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d010      	beq.n	80069fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695a      	ldr	r2, [r3, #20]
 80069de:	4b34      	ldr	r3, [pc, #208]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d208      	bcs.n	80069fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069ea:	4b31      	ldr	r3, [pc, #196]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	492e      	ldr	r1, [pc, #184]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d010      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699a      	ldr	r2, [r3, #24]
 8006a0c:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d208      	bcs.n	8006a2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a18:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	4922      	ldr	r1, [pc, #136]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d010      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69da      	ldr	r2, [r3, #28]
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d208      	bcs.n	8006a58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a46:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	4917      	ldr	r1, [pc, #92]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a58:	f000 f834 	bl	8006ac4 <HAL_RCC_GetSysClockFreq>
 8006a5c:	4601      	mov	r1, r0
 8006a5e:	4b14      	ldr	r3, [pc, #80]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	4a12      	ldr	r2, [pc, #72]	; (8006ab4 <HAL_RCC_ClockConfig+0x35c>)
 8006a6a:	5cd3      	ldrb	r3, [r2, r3]
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	fa21 f303 	lsr.w	r3, r1, r3
 8006a74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a76:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <HAL_RCC_ClockConfig+0x358>)
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	4a0d      	ldr	r2, [pc, #52]	; (8006ab4 <HAL_RCC_ClockConfig+0x35c>)
 8006a80:	5cd3      	ldrb	r3, [r2, r3]
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8c:	4a0a      	ldr	r2, [pc, #40]	; (8006ab8 <HAL_RCC_ClockConfig+0x360>)
 8006a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a90:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <HAL_RCC_ClockConfig+0x364>)
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <HAL_RCC_ClockConfig+0x368>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fb fa1e 	bl	8001edc <HAL_InitTick>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
 8006ab4:	0800ca84 	.word	0x0800ca84
 8006ab8:	24000028 	.word	0x24000028
 8006abc:	24000024 	.word	0x24000024
 8006ac0:	2400002c 	.word	0x2400002c

08006ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b089      	sub	sp, #36	; 0x24
 8006ac8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aca:	4baf      	ldr	r3, [pc, #700]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ad2:	2b18      	cmp	r3, #24
 8006ad4:	f200 814e 	bhi.w	8006d74 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006ad8:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006d75 	.word	0x08006d75
 8006ae8:	08006d75 	.word	0x08006d75
 8006aec:	08006d75 	.word	0x08006d75
 8006af0:	08006d75 	.word	0x08006d75
 8006af4:	08006d75 	.word	0x08006d75
 8006af8:	08006d75 	.word	0x08006d75
 8006afc:	08006d75 	.word	0x08006d75
 8006b00:	08006b6b 	.word	0x08006b6b
 8006b04:	08006d75 	.word	0x08006d75
 8006b08:	08006d75 	.word	0x08006d75
 8006b0c:	08006d75 	.word	0x08006d75
 8006b10:	08006d75 	.word	0x08006d75
 8006b14:	08006d75 	.word	0x08006d75
 8006b18:	08006d75 	.word	0x08006d75
 8006b1c:	08006d75 	.word	0x08006d75
 8006b20:	08006b71 	.word	0x08006b71
 8006b24:	08006d75 	.word	0x08006d75
 8006b28:	08006d75 	.word	0x08006d75
 8006b2c:	08006d75 	.word	0x08006d75
 8006b30:	08006d75 	.word	0x08006d75
 8006b34:	08006d75 	.word	0x08006d75
 8006b38:	08006d75 	.word	0x08006d75
 8006b3c:	08006d75 	.word	0x08006d75
 8006b40:	08006b77 	.word	0x08006b77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b44:	4b90      	ldr	r3, [pc, #576]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b50:	4b8d      	ldr	r3, [pc, #564]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	08db      	lsrs	r3, r3, #3
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	4a8c      	ldr	r2, [pc, #560]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b62:	e10a      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b64:	4b89      	ldr	r3, [pc, #548]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b66:	61bb      	str	r3, [r7, #24]
    break;
 8006b68:	e107      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b6a:	4b89      	ldr	r3, [pc, #548]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b6c:	61bb      	str	r3, [r7, #24]
    break;
 8006b6e:	e104      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006b70:	4b88      	ldr	r3, [pc, #544]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006b72:	61bb      	str	r3, [r7, #24]
    break;
 8006b74:	e101      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b76:	4b84      	ldr	r3, [pc, #528]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b80:	4b81      	ldr	r3, [pc, #516]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b8c:	4b7e      	ldr	r3, [pc, #504]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b96:	4b7c      	ldr	r3, [pc, #496]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9a:	08db      	lsrs	r3, r3, #3
 8006b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80da 	beq.w	8006d6e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d05a      	beq.n	8006c76 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d302      	bcc.n	8006bca <HAL_RCC_GetSysClockFreq+0x106>
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d078      	beq.n	8006cba <HAL_RCC_GetSysClockFreq+0x1f6>
 8006bc8:	e099      	b.n	8006cfe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bca:	4b6f      	ldr	r3, [pc, #444]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02d      	beq.n	8006c32 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bd6:	4b6c      	ldr	r3, [pc, #432]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	08db      	lsrs	r3, r3, #3
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	4a6a      	ldr	r2, [pc, #424]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006be2:	fa22 f303 	lsr.w	r3, r2, r3
 8006be6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c00:	4b61      	ldr	r3, [pc, #388]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c14:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c30:	e087      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006d9c <HAL_RCC_GetSysClockFreq+0x2d8>
 8006c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c44:	4b50      	ldr	r3, [pc, #320]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c54:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c58:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c74:	e065      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c80:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006da0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c88:	4b3f      	ldr	r3, [pc, #252]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c98:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb8:	e043      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	ee07 3a90 	vmov	s15, r3
 8006cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006da4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ccc:	4b2e      	ldr	r3, [pc, #184]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd4:	ee07 3a90 	vmov	s15, r3
 8006cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfc:	e021      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	ee07 3a90 	vmov	s15, r3
 8006d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d08:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006da0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d10:	4b1d      	ldr	r3, [pc, #116]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d18:	ee07 3a90 	vmov	s15, r3
 8006d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d20:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d24:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d40:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d42:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d46:	0a5b      	lsrs	r3, r3, #9
 8006d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d66:	ee17 3a90 	vmov	r3, s15
 8006d6a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006d6c:	e005      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61bb      	str	r3, [r7, #24]
    break;
 8006d72:	e002      	b.n	8006d7a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006d74:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006d76:	61bb      	str	r3, [r7, #24]
    break;
 8006d78:	bf00      	nop
  }

  return sysclockfreq;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3724      	adds	r7, #36	; 0x24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	003d0900 	.word	0x003d0900
 8006d94:	017d7840 	.word	0x017d7840
 8006d98:	46000000 	.word	0x46000000
 8006d9c:	4c742400 	.word	0x4c742400
 8006da0:	4a742400 	.word	0x4a742400
 8006da4:	4bbebc20 	.word	0x4bbebc20

08006da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dae:	f7ff fe89 	bl	8006ac4 <HAL_RCC_GetSysClockFreq>
 8006db2:	4601      	mov	r1, r0
 8006db4:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	4a0f      	ldr	r2, [pc, #60]	; (8006dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8006dc0:	5cd3      	ldrb	r3, [r2, r3]
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8006dca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8006dd6:	5cd3      	ldrb	r3, [r2, r3]
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	4a07      	ldr	r2, [pc, #28]	; (8006e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8006de4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006dec:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dee:	681b      	ldr	r3, [r3, #0]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	0800ca84 	.word	0x0800ca84
 8006e00:	24000028 	.word	0x24000028
 8006e04:	24000024 	.word	0x24000024

08006e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e0c:	f7ff ffcc 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8006e10:	4601      	mov	r1, r0
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e1e:	5cd3      	ldrb	r3, [r2, r3]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	0800ca84 	.word	0x0800ca84

08006e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e38:	f7ff ffb6 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8006e3c:	4601      	mov	r1, r0
 8006e3e:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e4a:	5cd3      	ldrb	r3, [r2, r3]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	0800ca84 	.word	0x0800ca84

08006e60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e68:	2300      	movs	r3, #0
 8006e6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d03d      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e84:	d013      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e8a:	d802      	bhi.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006e90:	e01f      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e96:	d013      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006e98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e9c:	d01c      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e9e:	e018      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea0:	4baf      	ldr	r3, [pc, #700]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	4aae      	ldr	r2, [pc, #696]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006eac:	e015      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	2102      	movs	r1, #2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 fd23 	bl	8008900 <RCCEx_PLL2_Config>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ebe:	e00c      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3324      	adds	r3, #36	; 0x24
 8006ec4:	2102      	movs	r1, #2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fdcc 	bl	8008a64 <RCCEx_PLL3_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ed0:	e003      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed6:	e000      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ee0:	4b9f      	ldr	r3, [pc, #636]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eec:	499c      	ldr	r1, [pc, #624]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ef2:	e001      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d03d      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d826      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006f0c:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f37 	.word	0x08006f37
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	08006f61 	.word	0x08006f61
 8006f24:	08006f61 	.word	0x08006f61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f28:	4b8d      	ldr	r3, [pc, #564]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4a8c      	ldr	r2, [pc, #560]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f34:	e015      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 fcdf 	bl	8008900 <RCCEx_PLL2_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f46:	e00c      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3324      	adds	r3, #36	; 0x24
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 fd88 	bl	8008a64 <RCCEx_PLL3_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f58:	e003      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5e:	e000      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d109      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f68:	4b7d      	ldr	r3, [pc, #500]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6c:	f023 0207 	bic.w	r2, r3, #7
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f74:	497a      	ldr	r1, [pc, #488]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	650b      	str	r3, [r1, #80]	; 0x50
 8006f7a:	e001      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d03e      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	2b80      	cmp	r3, #128	; 0x80
 8006f92:	d01c      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006f94:	2b80      	cmp	r3, #128	; 0x80
 8006f96:	d804      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d008      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f9c:	2b40      	cmp	r3, #64	; 0x40
 8006f9e:	d00d      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006fa0:	e01e      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8006fa4:	d01f      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006faa:	d01e      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006fac:	e018      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fae:	4b6c      	ldr	r3, [pc, #432]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	4a6b      	ldr	r2, [pc, #428]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fba:	e017      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 fc9c 	bl	8008900 <RCCEx_PLL2_Config>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fcc:	e00e      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3324      	adds	r3, #36	; 0x24
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fd45 	bl	8008a64 <RCCEx_PLL3_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fde:	e005      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe4:	e002      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d109      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ff2:	4b5b      	ldr	r3, [pc, #364]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffe:	4958      	ldr	r1, [pc, #352]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007000:	4313      	orrs	r3, r2
 8007002:	650b      	str	r3, [r1, #80]	; 0x50
 8007004:	e001      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007012:	2b00      	cmp	r3, #0
 8007014:	d044      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800701c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007020:	d01f      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007026:	d805      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800702c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007030:	d00e      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007032:	e01f      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007034:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007038:	d01f      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800703a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800703e:	d01e      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007040:	e018      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007042:	4b47      	ldr	r3, [pc, #284]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	4a46      	ldr	r2, [pc, #280]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800704e:	e017      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3304      	adds	r3, #4
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f001 fc52 	bl	8008900 <RCCEx_PLL2_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007060:	e00e      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3324      	adds	r3, #36	; 0x24
 8007066:	2100      	movs	r1, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f001 fcfb 	bl	8008a64 <RCCEx_PLL3_Config>
 800706e:	4603      	mov	r3, r0
 8007070:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007072:	e005      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	75fb      	strb	r3, [r7, #23]
      break;
 8007078:	e002      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800707e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007086:	4b36      	ldr	r3, [pc, #216]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007094:	4932      	ldr	r1, [pc, #200]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007096:	4313      	orrs	r3, r2
 8007098:	658b      	str	r3, [r1, #88]	; 0x58
 800709a:	e001      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d044      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070b6:	d01f      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80070b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070bc:	d805      	bhi.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80070c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070c6:	d00e      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80070c8:	e01f      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80070ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070ce:	d01f      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80070d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070d4:	d01e      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80070d6:	e018      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d8:	4b21      	ldr	r3, [pc, #132]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	4a20      	ldr	r2, [pc, #128]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070e4:	e017      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2100      	movs	r1, #0
 80070ec:	4618      	mov	r0, r3
 80070ee:	f001 fc07 	bl	8008900 <RCCEx_PLL2_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070f6:	e00e      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3324      	adds	r3, #36	; 0x24
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fcb0 	bl	8008a64 <RCCEx_PLL3_Config>
 8007104:	4603      	mov	r3, r0
 8007106:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007108:	e005      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
      break;
 800710e:	e002      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007110:	bf00      	nop
 8007112:	e000      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800711c:	4b10      	ldr	r3, [pc, #64]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800711e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007120:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800712a:	490d      	ldr	r1, [pc, #52]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800712c:	4313      	orrs	r3, r2
 800712e:	658b      	str	r3, [r1, #88]	; 0x58
 8007130:	e001      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d035      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007146:	2b10      	cmp	r3, #16
 8007148:	d00c      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800714a:	2b10      	cmp	r3, #16
 800714c:	d802      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01b      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007152:	e017      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007154:	2b20      	cmp	r3, #32
 8007156:	d00c      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007158:	2b30      	cmp	r3, #48	; 0x30
 800715a:	d018      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800715c:	e012      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800715e:	bf00      	nop
 8007160:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007164:	4baf      	ldr	r3, [pc, #700]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	4aae      	ldr	r2, [pc, #696]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800716a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007170:	e00e      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	2102      	movs	r1, #2
 8007178:	4618      	mov	r0, r3
 800717a:	f001 fbc1 	bl	8008900 <RCCEx_PLL2_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007182:	e005      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
      break;
 8007188:	e002      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800718e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007196:	4ba3      	ldr	r3, [pc, #652]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a2:	49a0      	ldr	r1, [pc, #640]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071a8:	e001      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d042      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c2:	d01f      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c8:	d805      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d2:	d00e      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80071d4:	e01f      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80071d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071da:	d01f      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80071dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071e0:	d01e      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80071e2:	e018      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e4:	4b8f      	ldr	r3, [pc, #572]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	4a8e      	ldr	r2, [pc, #568]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071f0:	e017      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3304      	adds	r3, #4
 80071f6:	2100      	movs	r1, #0
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 fb81 	bl	8008900 <RCCEx_PLL2_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007202:	e00e      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f001 fc2a 	bl	8008a64 <RCCEx_PLL3_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007214:	e005      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	75fb      	strb	r3, [r7, #23]
      break;
 800721a:	e002      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007228:	4b7e      	ldr	r3, [pc, #504]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800722a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007234:	497b      	ldr	r1, [pc, #492]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007236:	4313      	orrs	r3, r2
 8007238:	650b      	str	r3, [r1, #80]	; 0x50
 800723a:	e001      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d042      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007254:	d01b      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800725a:	d805      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d022      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007266:	e01b      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800726c:	d01d      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800726e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007272:	d01c      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007274:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007278:	d01b      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800727a:	e011      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	2101      	movs	r1, #1
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fb3c 	bl	8008900 <RCCEx_PLL2_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800728c:	e012      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3324      	adds	r3, #36	; 0x24
 8007292:	2101      	movs	r1, #1
 8007294:	4618      	mov	r0, r3
 8007296:	f001 fbe5 	bl	8008a64 <RCCEx_PLL3_Config>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800729e:	e009      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	75fb      	strb	r3, [r7, #23]
      break;
 80072a4:	e006      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80072a6:	bf00      	nop
 80072a8:	e004      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80072aa:	bf00      	nop
 80072ac:	e002      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80072ae:	bf00      	nop
 80072b0:	e000      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80072b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072ba:	4b5a      	ldr	r3, [pc, #360]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c6:	4957      	ldr	r1, [pc, #348]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	650b      	str	r3, [r1, #80]	; 0x50
 80072cc:	e001      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d044      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072e8:	d01b      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80072ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ee:	d805      	bhi.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d022      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80072f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072f8:	d00a      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80072fa:	e01b      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007300:	d01d      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007306:	d01c      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800730c:	d01b      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800730e:	e011      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	2101      	movs	r1, #1
 8007316:	4618      	mov	r0, r3
 8007318:	f001 faf2 	bl	8008900 <RCCEx_PLL2_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007320:	e012      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3324      	adds	r3, #36	; 0x24
 8007326:	2101      	movs	r1, #1
 8007328:	4618      	mov	r0, r3
 800732a:	f001 fb9b 	bl	8008a64 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007332:	e009      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	75fb      	strb	r3, [r7, #23]
      break;
 8007338:	e006      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800733a:	bf00      	nop
 800733c:	e004      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800733e:	bf00      	nop
 8007340:	e002      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007342:	bf00      	nop
 8007344:	e000      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800734e:	4b35      	ldr	r3, [pc, #212]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007352:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800735c:	4931      	ldr	r1, [pc, #196]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800735e:	4313      	orrs	r3, r2
 8007360:	658b      	str	r3, [r1, #88]	; 0x58
 8007362:	e001      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d02d      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800737c:	d005      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800737e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007382:	d009      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d013      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007388:	e00f      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800738a:	4b26      	ldr	r3, [pc, #152]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	4a25      	ldr	r2, [pc, #148]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007396:	e00c      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3304      	adds	r3, #4
 800739c:	2101      	movs	r1, #1
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 faae 	bl	8008900 <RCCEx_PLL2_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80073a8:	e003      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
      break;
 80073ae:	e000      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80073b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d109      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073b8:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c4:	4917      	ldr	r1, [pc, #92]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	650b      	str	r3, [r1, #80]	; 0x50
 80073ca:	e001      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d035      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d81b      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007429 	.word	0x08007429
 80073f0:	080073fd 	.word	0x080073fd
 80073f4:	0800740b 	.word	0x0800740b
 80073f8:	08007429 	.word	0x08007429
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fc:	4b09      	ldr	r3, [pc, #36]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	4a08      	ldr	r2, [pc, #32]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007408:	e00f      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3304      	adds	r3, #4
 800740e:	2102      	movs	r1, #2
 8007410:	4618      	mov	r0, r3
 8007412:	f001 fa75 	bl	8008900 <RCCEx_PLL2_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800741a:	e006      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	75fb      	strb	r3, [r7, #23]
      break;
 8007420:	e003      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007422:	bf00      	nop
 8007424:	58024400 	.word	0x58024400
      break;
 8007428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007430:	4bba      	ldr	r3, [pc, #744]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007434:	f023 0203 	bic.w	r2, r3, #3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	49b7      	ldr	r1, [pc, #732]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800743e:	4313      	orrs	r3, r2
 8007440:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007442:	e001      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8086 	beq.w	8007562 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007456:	4bb2      	ldr	r3, [pc, #712]	; (8007720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4ab1      	ldr	r2, [pc, #708]	; (8007720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800745c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007460:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007462:	f7fa fd85 	bl	8001f70 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007468:	e009      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800746a:	f7fa fd81 	bl	8001f70 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b64      	cmp	r3, #100	; 0x64
 8007476:	d902      	bls.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	75fb      	strb	r3, [r7, #23]
        break;
 800747c:	e005      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800747e:	4ba8      	ldr	r3, [pc, #672]	; (8007720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0ef      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d166      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007490:	4ba2      	ldr	r3, [pc, #648]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800749a:	4053      	eors	r3, r2
 800749c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d013      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074a4:	4b9d      	ldr	r3, [pc, #628]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074ae:	4b9b      	ldr	r3, [pc, #620]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b2:	4a9a      	ldr	r2, [pc, #616]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074ba:	4b98      	ldr	r3, [pc, #608]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	4a97      	ldr	r2, [pc, #604]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80074c6:	4a95      	ldr	r2, [pc, #596]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d6:	d115      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d8:	f7fa fd4a 	bl	8001f70 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074de:	e00b      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fa fd46 	bl	8001f70 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d902      	bls.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	75fb      	strb	r3, [r7, #23]
            break;
 80074f6:	e005      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074f8:	4b88      	ldr	r3, [pc, #544]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0ed      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d126      	bne.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007518:	d10d      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800751a:	4b80      	ldr	r3, [pc, #512]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007528:	0919      	lsrs	r1, r3, #4
 800752a:	4b7e      	ldr	r3, [pc, #504]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800752c:	400b      	ands	r3, r1
 800752e:	497b      	ldr	r1, [pc, #492]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007530:	4313      	orrs	r3, r2
 8007532:	610b      	str	r3, [r1, #16]
 8007534:	e005      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007536:	4b79      	ldr	r3, [pc, #484]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	4a78      	ldr	r2, [pc, #480]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800753c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007540:	6113      	str	r3, [r2, #16]
 8007542:	4b76      	ldr	r3, [pc, #472]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800754c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007550:	4972      	ldr	r1, [pc, #456]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007552:	4313      	orrs	r3, r2
 8007554:	670b      	str	r3, [r1, #112]	; 0x70
 8007556:	e004      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	75bb      	strb	r3, [r7, #22]
 800755c:	e001      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d07d      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007572:	2b28      	cmp	r3, #40	; 0x28
 8007574:	d866      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007576:	a201      	add	r2, pc, #4	; (adr r2, 800757c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	0800764b 	.word	0x0800764b
 8007580:	08007645 	.word	0x08007645
 8007584:	08007645 	.word	0x08007645
 8007588:	08007645 	.word	0x08007645
 800758c:	08007645 	.word	0x08007645
 8007590:	08007645 	.word	0x08007645
 8007594:	08007645 	.word	0x08007645
 8007598:	08007645 	.word	0x08007645
 800759c:	08007621 	.word	0x08007621
 80075a0:	08007645 	.word	0x08007645
 80075a4:	08007645 	.word	0x08007645
 80075a8:	08007645 	.word	0x08007645
 80075ac:	08007645 	.word	0x08007645
 80075b0:	08007645 	.word	0x08007645
 80075b4:	08007645 	.word	0x08007645
 80075b8:	08007645 	.word	0x08007645
 80075bc:	08007633 	.word	0x08007633
 80075c0:	08007645 	.word	0x08007645
 80075c4:	08007645 	.word	0x08007645
 80075c8:	08007645 	.word	0x08007645
 80075cc:	08007645 	.word	0x08007645
 80075d0:	08007645 	.word	0x08007645
 80075d4:	08007645 	.word	0x08007645
 80075d8:	08007645 	.word	0x08007645
 80075dc:	0800764b 	.word	0x0800764b
 80075e0:	08007645 	.word	0x08007645
 80075e4:	08007645 	.word	0x08007645
 80075e8:	08007645 	.word	0x08007645
 80075ec:	08007645 	.word	0x08007645
 80075f0:	08007645 	.word	0x08007645
 80075f4:	08007645 	.word	0x08007645
 80075f8:	08007645 	.word	0x08007645
 80075fc:	0800764b 	.word	0x0800764b
 8007600:	08007645 	.word	0x08007645
 8007604:	08007645 	.word	0x08007645
 8007608:	08007645 	.word	0x08007645
 800760c:	08007645 	.word	0x08007645
 8007610:	08007645 	.word	0x08007645
 8007614:	08007645 	.word	0x08007645
 8007618:	08007645 	.word	0x08007645
 800761c:	0800764b 	.word	0x0800764b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	2101      	movs	r1, #1
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f96a 	bl	8008900 <RCCEx_PLL2_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007630:	e00c      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3324      	adds	r3, #36	; 0x24
 8007636:	2101      	movs	r1, #1
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fa13 	bl	8008a64 <RCCEx_PLL3_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007642:	e003      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	75fb      	strb	r3, [r7, #23]
      break;
 8007648:	e000      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800764a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007652:	4b32      	ldr	r3, [pc, #200]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007656:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800765e:	492f      	ldr	r1, [pc, #188]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007660:	4313      	orrs	r3, r2
 8007662:	654b      	str	r3, [r1, #84]	; 0x54
 8007664:	e001      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d037      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767a:	2b05      	cmp	r3, #5
 800767c:	d820      	bhi.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800767e:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	080076c7 	.word	0x080076c7
 8007688:	0800769d 	.word	0x0800769d
 800768c:	080076af 	.word	0x080076af
 8007690:	080076c7 	.word	0x080076c7
 8007694:	080076c7 	.word	0x080076c7
 8007698:	080076c7 	.word	0x080076c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3304      	adds	r3, #4
 80076a0:	2101      	movs	r1, #1
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 f92c 	bl	8008900 <RCCEx_PLL2_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80076ac:	e00c      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3324      	adds	r3, #36	; 0x24
 80076b2:	2101      	movs	r1, #1
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 f9d5 	bl	8008a64 <RCCEx_PLL3_Config>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80076be:	e003      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
      break;
 80076c4:	e000      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80076c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d2:	f023 0207 	bic.w	r2, r3, #7
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076da:	4910      	ldr	r1, [pc, #64]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	654b      	str	r3, [r1, #84]	; 0x54
 80076e0:	e001      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d040      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f8:	2b05      	cmp	r3, #5
 80076fa:	d827      	bhi.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007753 	.word	0x08007753
 8007708:	08007729 	.word	0x08007729
 800770c:	0800773b 	.word	0x0800773b
 8007710:	08007753 	.word	0x08007753
 8007714:	08007753 	.word	0x08007753
 8007718:	08007753 	.word	0x08007753
 800771c:	58024400 	.word	0x58024400
 8007720:	58024800 	.word	0x58024800
 8007724:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3304      	adds	r3, #4
 800772c:	2101      	movs	r1, #1
 800772e:	4618      	mov	r0, r3
 8007730:	f001 f8e6 	bl	8008900 <RCCEx_PLL2_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007738:	e00c      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3324      	adds	r3, #36	; 0x24
 800773e:	2101      	movs	r1, #1
 8007740:	4618      	mov	r0, r3
 8007742:	f001 f98f 	bl	8008a64 <RCCEx_PLL3_Config>
 8007746:	4603      	mov	r3, r0
 8007748:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800774a:	e003      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	75fb      	strb	r3, [r7, #23]
      break;
 8007750:	e000      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800775a:	4bb2      	ldr	r3, [pc, #712]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800775c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775e:	f023 0207 	bic.w	r2, r3, #7
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	49ae      	ldr	r1, [pc, #696]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800776a:	4313      	orrs	r3, r2
 800776c:	658b      	str	r3, [r1, #88]	; 0x58
 800776e:	e001      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d044      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778a:	d01b      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800778c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007790:	d805      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d022      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800779c:	e01b      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800779e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a2:	d01d      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80077a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077a8:	d01c      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80077aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077ae:	d01b      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80077b0:	e011      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3304      	adds	r3, #4
 80077b6:	2100      	movs	r1, #0
 80077b8:	4618      	mov	r0, r3
 80077ba:	f001 f8a1 	bl	8008900 <RCCEx_PLL2_Config>
 80077be:	4603      	mov	r3, r0
 80077c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077c2:	e012      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3324      	adds	r3, #36	; 0x24
 80077c8:	2102      	movs	r1, #2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 f94a 	bl	8008a64 <RCCEx_PLL3_Config>
 80077d0:	4603      	mov	r3, r0
 80077d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077d4:	e009      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	75fb      	strb	r3, [r7, #23]
      break;
 80077da:	e006      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077dc:	bf00      	nop
 80077de:	e004      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077e0:	bf00      	nop
 80077e2:	e002      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077e4:	bf00      	nop
 80077e6:	e000      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077f0:	4b8c      	ldr	r3, [pc, #560]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077fe:	4989      	ldr	r1, [pc, #548]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007800:	4313      	orrs	r3, r2
 8007802:	654b      	str	r3, [r1, #84]	; 0x54
 8007804:	e001      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d044      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007820:	d01b      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007826:	d805      	bhi.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d022      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800782c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007830:	d00a      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007832:	e01b      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007838:	d01d      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800783a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800783e:	d01c      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007844:	d01b      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007846:	e011      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3304      	adds	r3, #4
 800784c:	2100      	movs	r1, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f001 f856 	bl	8008900 <RCCEx_PLL2_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007858:	e012      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3324      	adds	r3, #36	; 0x24
 800785e:	2102      	movs	r1, #2
 8007860:	4618      	mov	r0, r3
 8007862:	f001 f8ff 	bl	8008a64 <RCCEx_PLL3_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800786a:	e009      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	75fb      	strb	r3, [r7, #23]
      break;
 8007870:	e006      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007872:	bf00      	nop
 8007874:	e004      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007876:	bf00      	nop
 8007878:	e002      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800787e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007886:	4b67      	ldr	r3, [pc, #412]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800788a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007894:	4963      	ldr	r1, [pc, #396]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007896:	4313      	orrs	r3, r2
 8007898:	658b      	str	r3, [r1, #88]	; 0x58
 800789a:	e001      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d044      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078b6:	d01b      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80078b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078bc:	d805      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d022      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c6:	d00a      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80078c8:	e01b      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80078ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ce:	d01d      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80078d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078d4:	d01c      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80078d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078da:	d01b      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80078dc:	e011      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3304      	adds	r3, #4
 80078e2:	2100      	movs	r1, #0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 f80b 	bl	8008900 <RCCEx_PLL2_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078ee:	e012      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3324      	adds	r3, #36	; 0x24
 80078f4:	2102      	movs	r1, #2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f001 f8b4 	bl	8008a64 <RCCEx_PLL3_Config>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007900:	e009      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	75fb      	strb	r3, [r7, #23]
      break;
 8007906:	e006      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007908:	bf00      	nop
 800790a:	e004      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800790c:	bf00      	nop
 800790e:	e002      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007910:	bf00      	nop
 8007912:	e000      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800791c:	4b41      	ldr	r3, [pc, #260]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800791e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007920:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800792a:	493e      	ldr	r1, [pc, #248]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800792c:	4313      	orrs	r3, r2
 800792e:	658b      	str	r3, [r1, #88]	; 0x58
 8007930:	e001      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01a      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d10a      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3324      	adds	r3, #36	; 0x24
 8007952:	2102      	movs	r1, #2
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f885 	bl	8008a64 <RCCEx_PLL3_Config>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007964:	4b2f      	ldr	r3, [pc, #188]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007968:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007972:	492c      	ldr	r1, [pc, #176]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007974:	4313      	orrs	r3, r2
 8007976:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800798a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800798e:	d10a      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3324      	adds	r3, #36	; 0x24
 8007994:	2102      	movs	r1, #2
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f864 	bl	8008a64 <RCCEx_PLL3_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079a6:	4b1f      	ldr	r3, [pc, #124]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079b4:	491b      	ldr	r1, [pc, #108]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d032      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d0:	d00d      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80079d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d6:	d016      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d111      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 ff8c 	bl	8008900 <RCCEx_PLL2_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079ec:	e00c      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3324      	adds	r3, #36	; 0x24
 80079f2:	2102      	movs	r1, #2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 f835 	bl	8008a64 <RCCEx_PLL3_Config>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079fe:	e003      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10c      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a1c:	4901      	ldr	r1, [pc, #4]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	658b      	str	r3, [r1, #88]	; 0x58
 8007a22:	e003      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007a24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d02f      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a42:	d00c      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007a44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a48:	d015      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a4e:	d10f      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a50:	4b71      	ldr	r3, [pc, #452]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	4a70      	ldr	r2, [pc, #448]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a5c:	e00c      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3324      	adds	r3, #36	; 0x24
 8007a62:	2101      	movs	r1, #1
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fffd 	bl	8008a64 <RCCEx_PLL3_Config>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a6e:	e003      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	75fb      	strb	r3, [r7, #23]
      break;
 8007a74:	e000      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a7e:	4b66      	ldr	r3, [pc, #408]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8c:	4962      	ldr	r1, [pc, #392]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	654b      	str	r3, [r1, #84]	; 0x54
 8007a92:	e001      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d029      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab0:	d007      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007ab2:	e00f      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab4:	4b58      	ldr	r3, [pc, #352]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	4a57      	ldr	r2, [pc, #348]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ac0:	e00b      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 ff19 	bl	8008900 <RCCEx_PLL2_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ad2:	e002      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ae0:	4b4d      	ldr	r3, [pc, #308]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aec:	494a      	ldr	r1, [pc, #296]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007af2:	e001      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3324      	adds	r3, #36	; 0x24
 8007b08:	2102      	movs	r1, #2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 ffaa 	bl	8008a64 <RCCEx_PLL3_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d02f      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2e:	d00c      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b34:	d802      	bhi.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d011      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007b3a:	e00d      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b40:	d00f      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b46:	d00e      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007b48:	e006      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4a:	4b33      	ldr	r3, [pc, #204]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	4a32      	ldr	r2, [pc, #200]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b56:	e007      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5c:	e004      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b5e:	bf00      	nop
 8007b60:	e002      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b62:	bf00      	nop
 8007b64:	e000      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d109      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b6e:	4b2a      	ldr	r3, [pc, #168]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7a:	4927      	ldr	r1, [pc, #156]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	654b      	str	r3, [r1, #84]	; 0x54
 8007b80:	e001      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d008      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b92:	4b21      	ldr	r3, [pc, #132]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	491e      	ldr	r1, [pc, #120]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bb0:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bbc:	4916      	ldr	r1, [pc, #88]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	4a11      	ldr	r2, [pc, #68]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bd8:	6113      	str	r3, [r2, #16]
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007be4:	490c      	ldr	r1, [pc, #48]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da08      	bge.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bf2:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfe:	4906      	ldr	r1, [pc, #24]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007c04:	7dbb      	ldrb	r3, [r7, #22]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e000      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	58024400 	.word	0x58024400

08007c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b090      	sub	sp, #64	; 0x40
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2a:	d150      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007c2c:	4ba1      	ldr	r3, [pc, #644]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d844      	bhi.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c59 	.word	0x08007c59
 8007c48:	08007c69 	.word	0x08007c69
 8007c4c:	08007c79 	.word	0x08007c79
 8007c50:	08007cc1 	.word	0x08007cc1
 8007c54:	08007c89 	.word	0x08007c89
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fd03 	bl	8008668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c66:	e241      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c68:	f107 0318 	add.w	r3, r7, #24
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fa63 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c76:	e239      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c78:	f107 030c 	add.w	r3, r7, #12
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fba7 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c86:	e231      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c88:	4b8a      	ldr	r3, [pc, #552]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c98:	4b87      	ldr	r3, [pc, #540]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c9c:	e226      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ca4:	d102      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007ca6:	4b85      	ldr	r3, [pc, #532]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007caa:	e21f      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb2:	d102      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007cb4:	4b82      	ldr	r3, [pc, #520]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb8:	e218      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cbe:	e215      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cc0:	4b80      	ldr	r3, [pc, #512]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cc4:	e212      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cca:	bf00      	nop
 8007ccc:	e20e      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd4:	d14f      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007cd6:	4b77      	ldr	r3, [pc, #476]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007cde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d01c      	beq.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007ce6:	2b80      	cmp	r3, #128	; 0x80
 8007ce8:	d804      	bhi.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d00e      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007cf2:	e03c      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007cf4:	2bc0      	cmp	r3, #192	; 0xc0
 8007cf6:	d037      	beq.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cfc:	d018      	beq.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007cfe:	e036      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fcaf 	bl	8008668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0e:	e1ed      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d10:	f107 0318 	add.w	r3, r7, #24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fa0f 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d1e:	e1e5      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d20:	f107 030c 	add.w	r3, r7, #12
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fb53 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d2e:	e1dd      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d30:	4b60      	ldr	r3, [pc, #384]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d38:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d40:	4b5d      	ldr	r3, [pc, #372]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d44:	e1d2      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d4c:	d102      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007d4e:	4b5b      	ldr	r3, [pc, #364]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d52:	e1cb      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d5a:	d102      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007d5c:	4b58      	ldr	r3, [pc, #352]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d60:	e1c4      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d66:	e1c1      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d68:	4b56      	ldr	r3, [pc, #344]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d6c:	e1be      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d72:	bf00      	nop
 8007d74:	e1ba      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7c:	d153      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007d7e:	4b4d      	ldr	r3, [pc, #308]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007d86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d8e:	d01f      	beq.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d94:	d805      	bhi.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d9e:	d00f      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007da0:	e03d      	b.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007da2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007da6:	d037      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007dac:	d018      	beq.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007dae:	e036      	b.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fc57 	bl	8008668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dbe:	e195      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dc0:	f107 0318 	add.w	r3, r7, #24
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 f9b7 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dce:	e18d      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dd0:	f107 030c 	add.w	r3, r7, #12
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fafb 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dde:	e185      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007de0:	4b34      	ldr	r3, [pc, #208]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007df0:	4b31      	ldr	r3, [pc, #196]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007df4:	e17a      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dfc:	d102      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007dfe:	4b2f      	ldr	r3, [pc, #188]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e02:	e173      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e0a:	d102      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007e0c:	4b2c      	ldr	r3, [pc, #176]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e10:	e16c      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e16:	e169      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e18:	4b2a      	ldr	r3, [pc, #168]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1c:	e166      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e22:	bf00      	nop
 8007e24:	e162      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e2c:	d15d      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007e2e:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007e36:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e3e:	d01f      	beq.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e44:	d805      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007e4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e4e:	d00f      	beq.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007e50:	e047      	b.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e56:	d041      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e5c:	d018      	beq.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007e5e:	e040      	b.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fbff 	bl	8008668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e6e:	e13d      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e70:	f107 0318 	add.w	r3, r7, #24
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 f95f 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e7e:	e135      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e80:	f107 030c 	add.w	r3, r7, #12
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 faa3 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e8e:	e12d      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007ea4:	e122      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eac:	d10c      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007eae:	4b03      	ldr	r3, [pc, #12]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb2:	e11b      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	03d09000 	.word	0x03d09000
 8007ebc:	003d0900 	.word	0x003d0900
 8007ec0:	017d7840 	.word	0x017d7840
 8007ec4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ece:	d102      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007ed0:	4b89      	ldr	r3, [pc, #548]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed4:	e10a      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eda:	e107      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007edc:	4b87      	ldr	r3, [pc, #540]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee0:	e104      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee6:	bf00      	nop
 8007ee8:	e100      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef0:	d153      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007ef2:	4b83      	ldr	r3, [pc, #524]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007efa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f02:	d01f      	beq.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f08:	d805      	bhi.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f12:	d00f      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007f14:	e03d      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007f16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f1a:	d037      	beq.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f20:	d018      	beq.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007f22:	e036      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fb9d 	bl	8008668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f32:	e0db      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f34:	f107 0318 	add.w	r3, r7, #24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 f8fd 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f42:	e0d3      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f44:	f107 030c 	add.w	r3, r7, #12
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fa41 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f52:	e0cb      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f54:	4b6a      	ldr	r3, [pc, #424]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d102      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f64:	4b67      	ldr	r3, [pc, #412]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007f68:	e0c0      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f70:	d102      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007f72:	4b65      	ldr	r3, [pc, #404]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f76:	e0b9      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f7e:	d102      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007f80:	4b5d      	ldr	r3, [pc, #372]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f84:	e0b2      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f8a:	e0af      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f8c:	4b5b      	ldr	r3, [pc, #364]	; (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f90:	e0ac      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f96:	bf00      	nop
 8007f98:	e0a8      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fa0:	d13d      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007fa2:	4b57      	ldr	r3, [pc, #348]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007faa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb2:	d00c      	beq.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb8:	d011      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d12b      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbe:	f107 0318 	add.w	r3, r7, #24
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f8b8 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fcc:	e08e      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f9fc 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fdc:	e086      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fde:	4b48      	ldr	r3, [pc, #288]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007fee:	4b45      	ldr	r3, [pc, #276]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007ff2:	e07b      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ffa:	d102      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007ffc:	4b42      	ldr	r3, [pc, #264]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008000:	e074      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008008:	d102      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800800a:	4b3b      	ldr	r3, [pc, #236]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800800e:	e06d      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008014:	e06a      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801a:	bf00      	nop
 800801c:	e066      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008024:	d11f      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008026:	4b36      	ldr	r3, [pc, #216]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800802e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803a:	d008      	beq.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800803c:	e00f      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800803e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fb10 	bl	8008668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800804c:	e04e      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800804e:	f107 0318 	add.w	r3, r7, #24
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f870 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800805c:	e046      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008062:	bf00      	nop
 8008064:	e042      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800806c:	d13c      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800806e:	4b24      	ldr	r3, [pc, #144]	; (8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008072:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008076:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807e:	d01e      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008084:	d805      	bhi.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00d      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800808a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800808e:	d00e      	beq.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008090:	e026      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008096:	d01d      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800809c:	d01d      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800809e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080a2:	d014      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80080a4:	e01c      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80080a6:	f000 f831 	bl	800810c <HAL_RCCEx_GetD3PCLK1Freq>
 80080aa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80080ac:	e01e      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ae:	f107 0318 	add.w	r3, r7, #24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f840 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080bc:	e016      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080be:	f107 030c 	add.w	r3, r7, #12
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f984 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080cc:	e00e      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d2:	e00b      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d8:	e008      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80080da:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80080dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080de:	e005      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e4:	bf00      	nop
 80080e6:	e001      	b.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80080ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3740      	adds	r7, #64	; 0x40
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	017d7840 	.word	0x017d7840
 80080fc:	00bb8000 	.word	0x00bb8000
 8008100:	58024400 	.word	0x58024400
 8008104:	03d09000 	.word	0x03d09000
 8008108:	003d0900 	.word	0x003d0900

0800810c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008110:	f7fe fe4a 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8008114:	4601      	mov	r1, r0
 8008116:	4b06      	ldr	r3, [pc, #24]	; (8008130 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	091b      	lsrs	r3, r3, #4
 800811c:	f003 0307 	and.w	r3, r3, #7
 8008120:	4a04      	ldr	r2, [pc, #16]	; (8008134 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008122:	5cd3      	ldrb	r3, [r2, r3]
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800812c:	4618      	mov	r0, r3
 800812e:	bd80      	pop	{r7, pc}
 8008130:	58024400 	.word	0x58024400
 8008134:	0800ca84 	.word	0x0800ca84

08008138 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008138:	b480      	push	{r7}
 800813a:	b089      	sub	sp, #36	; 0x24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008140:	4b9d      	ldr	r3, [pc, #628]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	f003 0303 	and.w	r3, r3, #3
 8008148:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800814a:	4b9b      	ldr	r3, [pc, #620]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800814c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814e:	0b1b      	lsrs	r3, r3, #12
 8008150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008154:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008156:	4b98      	ldr	r3, [pc, #608]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	091b      	lsrs	r3, r3, #4
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008162:	4b95      	ldr	r3, [pc, #596]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008166:	08db      	lsrs	r3, r3, #3
 8008168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 810a 	beq.w	800839a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d05a      	beq.n	8008242 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800818c:	2b01      	cmp	r3, #1
 800818e:	d302      	bcc.n	8008196 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008190:	2b02      	cmp	r3, #2
 8008192:	d078      	beq.n	8008286 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008194:	e099      	b.n	80082ca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008196:	4b88      	ldr	r3, [pc, #544]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d02d      	beq.n	80081fe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081a2:	4b85      	ldr	r3, [pc, #532]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	08db      	lsrs	r3, r3, #3
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	4a83      	ldr	r2, [pc, #524]	; (80083bc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80081ae:	fa22 f303 	lsr.w	r3, r2, r3
 80081b2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	ee07 3a90 	vmov	s15, r3
 80081c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081cc:	4b7a      	ldr	r3, [pc, #488]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d4:	ee07 3a90 	vmov	s15, r3
 80081d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80081e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80081fc:	e087      	b.n	800830e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	ee07 3a90 	vmov	s15, r3
 8008204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008208:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80083c4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800820c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008210:	4b69      	ldr	r3, [pc, #420]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008218:	ee07 3a90 	vmov	s15, r3
 800821c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008220:	ed97 6a03 	vldr	s12, [r7, #12]
 8008224:	eddf 5a66 	vldr	s11, [pc, #408]	; 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800822c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008240:	e065      	b.n	800830e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008254:	4b58      	ldr	r3, [pc, #352]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008264:	ed97 6a03 	vldr	s12, [r7, #12]
 8008268:	eddf 5a55 	vldr	s11, [pc, #340]	; 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800826c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008280:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008284:	e043      	b.n	800830e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	ee07 3a90 	vmov	s15, r3
 800828c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008290:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008298:	4b47      	ldr	r3, [pc, #284]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a0:	ee07 3a90 	vmov	s15, r3
 80082a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082c8:	e021      	b.n	800830e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	ee07 3a90 	vmov	s15, r3
 80082d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80082d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082dc:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e4:	ee07 3a90 	vmov	s15, r3
 80082e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008308:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800830c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800830e:	4b2a      	ldr	r3, [pc, #168]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	0a5b      	lsrs	r3, r3, #9
 8008314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008328:	edd7 6a07 	vldr	s13, [r7, #28]
 800832c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008334:	ee17 2a90 	vmov	r2, s15
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800833c:	4b1e      	ldr	r3, [pc, #120]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	0c1b      	lsrs	r3, r3, #16
 8008342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008356:	edd7 6a07 	vldr	s13, [r7, #28]
 800835a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800835e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008362:	ee17 2a90 	vmov	r2, s15
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800836a:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	0e1b      	lsrs	r3, r3, #24
 8008370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008380:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008384:	edd7 6a07 	vldr	s13, [r7, #28]
 8008388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008390:	ee17 2a90 	vmov	r2, s15
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008398:	e008      	b.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	609a      	str	r2, [r3, #8]
}
 80083ac:	bf00      	nop
 80083ae:	3724      	adds	r7, #36	; 0x24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	58024400 	.word	0x58024400
 80083bc:	03d09000 	.word	0x03d09000
 80083c0:	46000000 	.word	0x46000000
 80083c4:	4c742400 	.word	0x4c742400
 80083c8:	4a742400 	.word	0x4a742400
 80083cc:	4bbebc20 	.word	0x4bbebc20

080083d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b089      	sub	sp, #36	; 0x24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083d8:	4b9d      	ldr	r3, [pc, #628]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80083e2:	4b9b      	ldr	r3, [pc, #620]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e6:	0d1b      	lsrs	r3, r3, #20
 80083e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083ee:	4b98      	ldr	r3, [pc, #608]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f2:	0a1b      	lsrs	r3, r3, #8
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80083fa:	4b95      	ldr	r3, [pc, #596]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fe:	08db      	lsrs	r3, r3, #3
 8008400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008412:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 810a 	beq.w	8008632 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d05a      	beq.n	80084da <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008424:	2b01      	cmp	r3, #1
 8008426:	d302      	bcc.n	800842e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008428:	2b02      	cmp	r3, #2
 800842a:	d078      	beq.n	800851e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800842c:	e099      	b.n	8008562 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800842e:	4b88      	ldr	r3, [pc, #544]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d02d      	beq.n	8008496 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800843a:	4b85      	ldr	r3, [pc, #532]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	08db      	lsrs	r3, r3, #3
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	4a83      	ldr	r2, [pc, #524]	; (8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008446:	fa22 f303 	lsr.w	r3, r2, r3
 800844a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008464:	4b7a      	ldr	r3, [pc, #488]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846c:	ee07 3a90 	vmov	s15, r3
 8008470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008474:	ed97 6a03 	vldr	s12, [r7, #12]
 8008478:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800847c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800848c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008490:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008494:	e087      	b.n	80085a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	ee07 3a90 	vmov	s15, r3
 800849c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800865c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80084a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a8:	4b69      	ldr	r3, [pc, #420]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80084bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80084c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084d8:	e065      	b.n	80085a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	ee07 3a90 	vmov	s15, r3
 80084e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80084e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ec:	4b58      	ldr	r3, [pc, #352]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008500:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800850c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008518:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800851c:	e043      	b.n	80085a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008528:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008664 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800852c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008530:	4b47      	ldr	r3, [pc, #284]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008540:	ed97 6a03 	vldr	s12, [r7, #12]
 8008544:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800854c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008560:	e021      	b.n	80085a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008574:	4b36      	ldr	r3, [pc, #216]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008584:	ed97 6a03 	vldr	s12, [r7, #12]
 8008588:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800858c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085a4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80085a6:	4b2a      	ldr	r3, [pc, #168]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	0a5b      	lsrs	r3, r3, #9
 80085ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085cc:	ee17 2a90 	vmov	r2, s15
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80085d4:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	0c1b      	lsrs	r3, r3, #16
 80085da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80085f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085fa:	ee17 2a90 	vmov	r2, s15
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008602:	4b13      	ldr	r3, [pc, #76]	; (8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	0e1b      	lsrs	r3, r3, #24
 8008608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008618:	ee37 7a87 	vadd.f32	s14, s15, s14
 800861c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008628:	ee17 2a90 	vmov	r2, s15
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008630:	e008      	b.n	8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	609a      	str	r2, [r3, #8]
}
 8008644:	bf00      	nop
 8008646:	3724      	adds	r7, #36	; 0x24
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	58024400 	.word	0x58024400
 8008654:	03d09000 	.word	0x03d09000
 8008658:	46000000 	.word	0x46000000
 800865c:	4c742400 	.word	0x4c742400
 8008660:	4a742400 	.word	0x4a742400
 8008664:	4bbebc20 	.word	0x4bbebc20

08008668 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008668:	b480      	push	{r7}
 800866a:	b089      	sub	sp, #36	; 0x24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008670:	4b9d      	ldr	r3, [pc, #628]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800867a:	4b9b      	ldr	r3, [pc, #620]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	091b      	lsrs	r3, r3, #4
 8008680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008684:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008686:	4b98      	ldr	r3, [pc, #608]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008690:	4b95      	ldr	r3, [pc, #596]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008694:	08db      	lsrs	r3, r3, #3
 8008696:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	fb02 f303 	mul.w	r3, r2, r3
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 810a 	beq.w	80088c8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d05a      	beq.n	8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d302      	bcc.n	80086c4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d078      	beq.n	80087b4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80086c2:	e099      	b.n	80087f8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086c4:	4b88      	ldr	r3, [pc, #544]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0320 	and.w	r3, r3, #32
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02d      	beq.n	800872c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086d0:	4b85      	ldr	r3, [pc, #532]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	08db      	lsrs	r3, r3, #3
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	4a84      	ldr	r2, [pc, #528]	; (80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80086dc:	fa22 f303 	lsr.w	r3, r2, r3
 80086e0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b7b      	ldr	r3, [pc, #492]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a03 	vldr	s12, [r7, #12]
 800870e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800872a:	e087      	b.n	800883c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b6a      	ldr	r3, [pc, #424]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008752:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800876e:	e065      	b.n	800883c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b59      	ldr	r3, [pc, #356]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a03 	vldr	s12, [r7, #12]
 8008796:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087b2:	e043      	b.n	800883c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b48      	ldr	r3, [pc, #288]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087f6:	e021      	b.n	800883c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b37      	ldr	r3, [pc, #220]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a03 	vldr	s12, [r7, #12]
 800881e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800883a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800883c:	4b2a      	ldr	r3, [pc, #168]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	0a5b      	lsrs	r3, r3, #9
 8008842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008856:	edd7 6a07 	vldr	s13, [r7, #28]
 800885a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800885e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008862:	ee17 2a90 	vmov	r2, s15
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800886a:	4b1f      	ldr	r3, [pc, #124]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008884:	edd7 6a07 	vldr	s13, [r7, #28]
 8008888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800888c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008890:	ee17 2a90 	vmov	r2, s15
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008898:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	0e1b      	lsrs	r3, r3, #24
 800889e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088be:	ee17 2a90 	vmov	r2, s15
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80088c6:	e008      	b.n	80088da <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	609a      	str	r2, [r3, #8]
}
 80088da:	bf00      	nop
 80088dc:	3724      	adds	r7, #36	; 0x24
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	58024400 	.word	0x58024400
 80088ec:	03d09000 	.word	0x03d09000
 80088f0:	46000000 	.word	0x46000000
 80088f4:	4c742400 	.word	0x4c742400
 80088f8:	4a742400 	.word	0x4a742400
 80088fc:	4bbebc20 	.word	0x4bbebc20

08008900 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800890e:	4b53      	ldr	r3, [pc, #332]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	2b03      	cmp	r3, #3
 8008918:	d101      	bne.n	800891e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e099      	b.n	8008a52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800891e:	4b4f      	ldr	r3, [pc, #316]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a4e      	ldr	r2, [pc, #312]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008924:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800892a:	f7f9 fb21 	bl	8001f70 <HAL_GetTick>
 800892e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008930:	e008      	b.n	8008944 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008932:	f7f9 fb1d 	bl	8001f70 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	d901      	bls.n	8008944 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e086      	b.n	8008a52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008944:	4b45      	ldr	r3, [pc, #276]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1f0      	bne.n	8008932 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008950:	4b42      	ldr	r3, [pc, #264]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008954:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	031b      	lsls	r3, r3, #12
 800895e:	493f      	ldr	r1, [pc, #252]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008960:	4313      	orrs	r3, r2
 8008962:	628b      	str	r3, [r1, #40]	; 0x28
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	3b01      	subs	r3, #1
 800896a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	3b01      	subs	r3, #1
 8008974:	025b      	lsls	r3, r3, #9
 8008976:	b29b      	uxth	r3, r3
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	3b01      	subs	r3, #1
 8008980:	041b      	lsls	r3, r3, #16
 8008982:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008986:	431a      	orrs	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	3b01      	subs	r3, #1
 800898e:	061b      	lsls	r3, r3, #24
 8008990:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008994:	4931      	ldr	r1, [pc, #196]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800899a:	4b30      	ldr	r3, [pc, #192]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	492d      	ldr	r1, [pc, #180]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80089ac:	4b2b      	ldr	r3, [pc, #172]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	f023 0220 	bic.w	r2, r3, #32
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	4928      	ldr	r1, [pc, #160]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80089be:	4b27      	ldr	r3, [pc, #156]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	4a26      	ldr	r2, [pc, #152]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089ca:	4b24      	ldr	r3, [pc, #144]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089ce:	4b24      	ldr	r3, [pc, #144]	; (8008a60 <RCCEx_PLL2_Config+0x160>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	69d2      	ldr	r2, [r2, #28]
 80089d6:	00d2      	lsls	r2, r2, #3
 80089d8:	4920      	ldr	r1, [pc, #128]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089de:	4b1f      	ldr	r3, [pc, #124]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	4a1e      	ldr	r2, [pc, #120]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089e4:	f043 0310 	orr.w	r3, r3, #16
 80089e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d106      	bne.n	80089fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089f0:	4b1a      	ldr	r3, [pc, #104]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	4a19      	ldr	r2, [pc, #100]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 80089f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089fc:	e00f      	b.n	8008a1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d106      	bne.n	8008a12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a04:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	4a14      	ldr	r2, [pc, #80]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a10:	e005      	b.n	8008a1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a12:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	4a11      	ldr	r2, [pc, #68]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a0e      	ldr	r2, [pc, #56]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a2a:	f7f9 faa1 	bl	8001f70 <HAL_GetTick>
 8008a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a30:	e008      	b.n	8008a44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a32:	f7f9 fa9d 	bl	8001f70 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d901      	bls.n	8008a44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e006      	b.n	8008a52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <RCCEx_PLL2_Config+0x15c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0f0      	beq.n	8008a32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	58024400 	.word	0x58024400
 8008a60:	ffff0007 	.word	0xffff0007

08008a64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a72:	4b53      	ldr	r3, [pc, #332]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d101      	bne.n	8008a82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e099      	b.n	8008bb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a82:	4b4f      	ldr	r3, [pc, #316]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a4e      	ldr	r2, [pc, #312]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a8e:	f7f9 fa6f 	bl	8001f70 <HAL_GetTick>
 8008a92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a94:	e008      	b.n	8008aa8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a96:	f7f9 fa6b 	bl	8001f70 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d901      	bls.n	8008aa8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e086      	b.n	8008bb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aa8:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1f0      	bne.n	8008a96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ab4:	4b42      	ldr	r3, [pc, #264]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	051b      	lsls	r3, r3, #20
 8008ac2:	493f      	ldr	r1, [pc, #252]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	628b      	str	r3, [r1, #40]	; 0x28
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	025b      	lsls	r3, r3, #9
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	041b      	lsls	r3, r3, #16
 8008ae6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	061b      	lsls	r3, r3, #24
 8008af4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008af8:	4931      	ldr	r1, [pc, #196]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008afe:	4b30      	ldr	r3, [pc, #192]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	492d      	ldr	r1, [pc, #180]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b10:	4b2b      	ldr	r3, [pc, #172]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	4928      	ldr	r1, [pc, #160]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b22:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	4a26      	ldr	r2, [pc, #152]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b2e:	4b24      	ldr	r3, [pc, #144]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b32:	4b24      	ldr	r3, [pc, #144]	; (8008bc4 <RCCEx_PLL3_Config+0x160>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	69d2      	ldr	r2, [r2, #28]
 8008b3a:	00d2      	lsls	r2, r2, #3
 8008b3c:	4920      	ldr	r1, [pc, #128]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b42:	4b1f      	ldr	r3, [pc, #124]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	4a1e      	ldr	r2, [pc, #120]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b54:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	4a19      	ldr	r2, [pc, #100]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b60:	e00f      	b.n	8008b82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d106      	bne.n	8008b76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b68:	4b15      	ldr	r3, [pc, #84]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	4a14      	ldr	r2, [pc, #80]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b74:	e005      	b.n	8008b82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b76:	4b12      	ldr	r3, [pc, #72]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	4a11      	ldr	r2, [pc, #68]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b82:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a0e      	ldr	r2, [pc, #56]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b8e:	f7f9 f9ef 	bl	8001f70 <HAL_GetTick>
 8008b92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b94:	e008      	b.n	8008ba8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b96:	f7f9 f9eb 	bl	8001f70 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d901      	bls.n	8008ba8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e006      	b.n	8008bb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <RCCEx_PLL3_Config+0x15c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0f0      	beq.n	8008b96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	58024400 	.word	0x58024400
 8008bc4:	ffff0007 	.word	0xffff0007

08008bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e01d      	b.n	8008c16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7f8 fe28 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f000 f97c 	bl	8008f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0201 	orr.w	r2, r2, #1
 8008c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689a      	ldr	r2, [r3, #8]
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <HAL_TIM_Base_Start_IT+0x50>)
 8008c40:	4013      	ands	r3, r2
 8008c42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b06      	cmp	r3, #6
 8008c48:	d00b      	beq.n	8008c62 <HAL_TIM_Base_Start_IT+0x42>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c50:	d007      	beq.n	8008c62 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f042 0201 	orr.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	00010007 	.word	0x00010007

08008c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d122      	bne.n	8008cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d11b      	bne.n	8008cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f06f 0202 	mvn.w	r2, #2
 8008ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f905 	bl	8008ec6 <HAL_TIM_IC_CaptureCallback>
 8008cbc:	e005      	b.n	8008cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f8f7 	bl	8008eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f908 	bl	8008eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	d122      	bne.n	8008d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d11b      	bne.n	8008d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f06f 0204 	mvn.w	r2, #4
 8008cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8db 	bl	8008ec6 <HAL_TIM_IC_CaptureCallback>
 8008d10:	e005      	b.n	8008d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f8cd 	bl	8008eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f8de 	bl	8008eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d122      	bne.n	8008d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0308 	and.w	r3, r3, #8
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d11b      	bne.n	8008d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f06f 0208 	mvn.w	r2, #8
 8008d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f8b1 	bl	8008ec6 <HAL_TIM_IC_CaptureCallback>
 8008d64:	e005      	b.n	8008d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f8a3 	bl	8008eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f8b4 	bl	8008eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	f003 0310 	and.w	r3, r3, #16
 8008d82:	2b10      	cmp	r3, #16
 8008d84:	d122      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 0310 	and.w	r3, r3, #16
 8008d90:	2b10      	cmp	r3, #16
 8008d92:	d11b      	bne.n	8008dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f06f 0210 	mvn.w	r2, #16
 8008d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2208      	movs	r2, #8
 8008da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f887 	bl	8008ec6 <HAL_TIM_IC_CaptureCallback>
 8008db8:	e005      	b.n	8008dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f879 	bl	8008eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f88a 	bl	8008eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d10e      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d107      	bne.n	8008df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0201 	mvn.w	r2, #1
 8008df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f7 ff18 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e02:	2b80      	cmp	r3, #128	; 0x80
 8008e04:	d10e      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e10:	2b80      	cmp	r3, #128	; 0x80
 8008e12:	d107      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f99c 	bl	800915c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e32:	d10e      	bne.n	8008e52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3e:	2b80      	cmp	r3, #128	; 0x80
 8008e40:	d107      	bne.n	8008e52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f98f 	bl	8009170 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5c:	2b40      	cmp	r3, #64	; 0x40
 8008e5e:	d10e      	bne.n	8008e7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
 8008e6c:	d107      	bne.n	8008e7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f838 	bl	8008eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d10e      	bne.n	8008eaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b20      	cmp	r3, #32
 8008e98:	d107      	bne.n	8008eaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f06f 0220 	mvn.w	r2, #32
 8008ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f94f 	bl	8009148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
	...

08008f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a40      	ldr	r2, [pc, #256]	; (8009018 <TIM_Base_SetConfig+0x114>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d013      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f22:	d00f      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a3d      	ldr	r2, [pc, #244]	; (800901c <TIM_Base_SetConfig+0x118>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00b      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a3c      	ldr	r2, [pc, #240]	; (8009020 <TIM_Base_SetConfig+0x11c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d007      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a3b      	ldr	r2, [pc, #236]	; (8009024 <TIM_Base_SetConfig+0x120>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d003      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a3a      	ldr	r2, [pc, #232]	; (8009028 <TIM_Base_SetConfig+0x124>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d108      	bne.n	8008f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a2f      	ldr	r2, [pc, #188]	; (8009018 <TIM_Base_SetConfig+0x114>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d01f      	beq.n	8008f9e <TIM_Base_SetConfig+0x9a>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f64:	d01b      	beq.n	8008f9e <TIM_Base_SetConfig+0x9a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a2c      	ldr	r2, [pc, #176]	; (800901c <TIM_Base_SetConfig+0x118>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d017      	beq.n	8008f9e <TIM_Base_SetConfig+0x9a>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a2b      	ldr	r2, [pc, #172]	; (8009020 <TIM_Base_SetConfig+0x11c>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d013      	beq.n	8008f9e <TIM_Base_SetConfig+0x9a>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a2a      	ldr	r2, [pc, #168]	; (8009024 <TIM_Base_SetConfig+0x120>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d00f      	beq.n	8008f9e <TIM_Base_SetConfig+0x9a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a29      	ldr	r2, [pc, #164]	; (8009028 <TIM_Base_SetConfig+0x124>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00b      	beq.n	8008f9e <TIM_Base_SetConfig+0x9a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a28      	ldr	r2, [pc, #160]	; (800902c <TIM_Base_SetConfig+0x128>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d007      	beq.n	8008f9e <TIM_Base_SetConfig+0x9a>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a27      	ldr	r2, [pc, #156]	; (8009030 <TIM_Base_SetConfig+0x12c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d003      	beq.n	8008f9e <TIM_Base_SetConfig+0x9a>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a26      	ldr	r2, [pc, #152]	; (8009034 <TIM_Base_SetConfig+0x130>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d108      	bne.n	8008fb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a10      	ldr	r2, [pc, #64]	; (8009018 <TIM_Base_SetConfig+0x114>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00f      	beq.n	8008ffc <TIM_Base_SetConfig+0xf8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a12      	ldr	r2, [pc, #72]	; (8009028 <TIM_Base_SetConfig+0x124>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00b      	beq.n	8008ffc <TIM_Base_SetConfig+0xf8>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a11      	ldr	r2, [pc, #68]	; (800902c <TIM_Base_SetConfig+0x128>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d007      	beq.n	8008ffc <TIM_Base_SetConfig+0xf8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a10      	ldr	r2, [pc, #64]	; (8009030 <TIM_Base_SetConfig+0x12c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d003      	beq.n	8008ffc <TIM_Base_SetConfig+0xf8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a0f      	ldr	r2, [pc, #60]	; (8009034 <TIM_Base_SetConfig+0x130>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d103      	bne.n	8009004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	615a      	str	r2, [r3, #20]
}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	40010000 	.word	0x40010000
 800901c:	40000400 	.word	0x40000400
 8009020:	40000800 	.word	0x40000800
 8009024:	40000c00 	.word	0x40000c00
 8009028:	40010400 	.word	0x40010400
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400
 8009034:	40014800 	.word	0x40014800

08009038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800904c:	2302      	movs	r3, #2
 800904e:	e068      	b.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2202      	movs	r2, #2
 800905c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a2e      	ldr	r2, [pc, #184]	; (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d004      	beq.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a2d      	ldr	r2, [pc, #180]	; (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d108      	bne.n	8009096 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800908a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	4313      	orrs	r3, r2
 8009094:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a1e      	ldr	r2, [pc, #120]	; (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d01d      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c2:	d018      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a1b      	ldr	r2, [pc, #108]	; (8009138 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d013      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a1a      	ldr	r2, [pc, #104]	; (800913c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00e      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a18      	ldr	r2, [pc, #96]	; (8009140 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d009      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a13      	ldr	r2, [pc, #76]	; (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d004      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a14      	ldr	r2, [pc, #80]	; (8009144 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d10c      	bne.n	8009110 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	4313      	orrs	r3, r2
 8009106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40010000 	.word	0x40010000
 8009134:	40010400 	.word	0x40010400
 8009138:	40000400 	.word	0x40000400
 800913c:	40000800 	.word	0x40000800
 8009140:	40000c00 	.word	0x40000c00
 8009144:	40001800 	.word	0x40001800

08009148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e042      	b.n	800921c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800919c:	2b00      	cmp	r3, #0
 800919e:	d106      	bne.n	80091ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7f8 fb73 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2224      	movs	r2, #36	; 0x24
 80091b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 0201 	bic.w	r2, r2, #1
 80091c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fc3a 	bl	8009a40 <UART_SetConfig>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e022      	b.n	800921c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f002 fdac 	bl	800bd3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0201 	orr.w	r2, r2, #1
 8009212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f002 fe33 	bl	800be80 <UART_CheckIdleState>
 800921a:	4603      	mov	r3, r0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08a      	sub	sp, #40	; 0x28
 8009228:	af02      	add	r7, sp, #8
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	4613      	mov	r3, r2
 8009232:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800923a:	2b20      	cmp	r3, #32
 800923c:	f040 8083 	bne.w	8009346 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <HAL_UART_Transmit+0x28>
 8009246:	88fb      	ldrh	r3, [r7, #6]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e07b      	b.n	8009348 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009256:	2b01      	cmp	r3, #1
 8009258:	d101      	bne.n	800925e <HAL_UART_Transmit+0x3a>
 800925a:	2302      	movs	r3, #2
 800925c:	e074      	b.n	8009348 <HAL_UART_Transmit+0x124>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2221      	movs	r2, #33	; 0x21
 8009272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009276:	f7f8 fe7b 	bl	8001f70 <HAL_GetTick>
 800927a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	88fa      	ldrh	r2, [r7, #6]
 8009288:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009294:	d108      	bne.n	80092a8 <HAL_UART_Transmit+0x84>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d104      	bne.n	80092a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	61bb      	str	r3, [r7, #24]
 80092a6:	e003      	b.n	80092b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092ac:	2300      	movs	r3, #0
 80092ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80092b0:	e02c      	b.n	800930c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2180      	movs	r1, #128	; 0x80
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f002 fe27 	bl	800bf10 <UART_WaitOnFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e03d      	b.n	8009348 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10b      	bne.n	80092ea <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	3302      	adds	r3, #2
 80092e6:	61bb      	str	r3, [r7, #24]
 80092e8:	e007      	b.n	80092fa <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	781a      	ldrb	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	3301      	adds	r3, #1
 80092f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009300:	b29b      	uxth	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009312:	b29b      	uxth	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1cc      	bne.n	80092b2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2200      	movs	r2, #0
 8009320:	2140      	movs	r1, #64	; 0x40
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f002 fdf4 	bl	800bf10 <UART_WaitOnFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e00a      	b.n	8009348 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2220      	movs	r2, #32
 8009336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	e000      	b.n	8009348 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009346:	2302      	movs	r3, #2
  }
}
 8009348:	4618      	mov	r0, r3
 800934a:	3720      	adds	r7, #32
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009364:	2b20      	cmp	r3, #32
 8009366:	d168      	bne.n	800943a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <HAL_UART_Transmit_IT+0x24>
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e061      	b.n	800943c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800937e:	2b01      	cmp	r3, #1
 8009380:	d101      	bne.n	8009386 <HAL_UART_Transmit_IT+0x36>
 8009382:	2302      	movs	r3, #2
 8009384:	e05a      	b.n	800943c <HAL_UART_Transmit_IT+0xec>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	88fa      	ldrh	r2, [r7, #6]
 80093a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2221      	movs	r2, #33	; 0x21
 80093b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c2:	d11c      	bne.n	80093fe <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093cc:	d107      	bne.n	80093de <HAL_UART_Transmit_IT+0x8e>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4a1b      	ldr	r2, [pc, #108]	; (8009448 <HAL_UART_Transmit_IT+0xf8>)
 80093da:	671a      	str	r2, [r3, #112]	; 0x70
 80093dc:	e002      	b.n	80093e4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4a1a      	ldr	r2, [pc, #104]	; (800944c <HAL_UART_Transmit_IT+0xfc>)
 80093e2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80093fa:	609a      	str	r2, [r3, #8]
 80093fc:	e01b      	b.n	8009436 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009406:	d107      	bne.n	8009418 <HAL_UART_Transmit_IT+0xc8>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a0f      	ldr	r2, [pc, #60]	; (8009450 <HAL_UART_Transmit_IT+0x100>)
 8009414:	671a      	str	r2, [r3, #112]	; 0x70
 8009416:	e002      	b.n	800941e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4a0e      	ldr	r2, [pc, #56]	; (8009454 <HAL_UART_Transmit_IT+0x104>)
 800941c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009434:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	e000      	b.n	800943c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800943a:	2302      	movs	r3, #2
  }
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	0800c34f 	.word	0x0800c34f
 800944c:	0800c2b5 	.word	0x0800c2b5
 8009450:	0800c237 	.word	0x0800c237
 8009454:	0800c1c3 	.word	0x0800c1c3

08009458 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800946c:	2b20      	cmp	r3, #32
 800946e:	f040 80bc 	bne.w	80095ea <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_UART_Receive_IT+0x26>
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e0b4      	b.n	80095ec <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009488:	2b01      	cmp	r3, #1
 800948a:	d101      	bne.n	8009490 <HAL_UART_Receive_IT+0x38>
 800948c:	2302      	movs	r3, #2
 800948e:	e0ad      	b.n	80095ec <HAL_UART_Receive_IT+0x194>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	88fa      	ldrh	r2, [r7, #6]
 80094a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	88fa      	ldrh	r2, [r7, #6]
 80094aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094bc:	d10e      	bne.n	80094dc <HAL_UART_Receive_IT+0x84>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d105      	bne.n	80094d2 <HAL_UART_Receive_IT+0x7a>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80094cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094d0:	e02d      	b.n	800952e <HAL_UART_Receive_IT+0xd6>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	22ff      	movs	r2, #255	; 0xff
 80094d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094da:	e028      	b.n	800952e <HAL_UART_Receive_IT+0xd6>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10d      	bne.n	8009500 <HAL_UART_Receive_IT+0xa8>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <HAL_UART_Receive_IT+0x9e>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	22ff      	movs	r2, #255	; 0xff
 80094f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094f4:	e01b      	b.n	800952e <HAL_UART_Receive_IT+0xd6>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	227f      	movs	r2, #127	; 0x7f
 80094fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094fe:	e016      	b.n	800952e <HAL_UART_Receive_IT+0xd6>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009508:	d10d      	bne.n	8009526 <HAL_UART_Receive_IT+0xce>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d104      	bne.n	800951c <HAL_UART_Receive_IT+0xc4>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	227f      	movs	r2, #127	; 0x7f
 8009516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800951a:	e008      	b.n	800952e <HAL_UART_Receive_IT+0xd6>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	223f      	movs	r2, #63	; 0x3f
 8009520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009524:	e003      	b.n	800952e <HAL_UART_Receive_IT+0xd6>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2222      	movs	r2, #34	; 0x22
 800953a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0201 	orr.w	r2, r2, #1
 800954c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009556:	d12a      	bne.n	80095ae <HAL_UART_Receive_IT+0x156>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	429a      	cmp	r2, r3
 8009562:	d324      	bcc.n	80095ae <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800956c:	d107      	bne.n	800957e <HAL_UART_Receive_IT+0x126>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d103      	bne.n	800957e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4a1f      	ldr	r2, [pc, #124]	; (80095f8 <HAL_UART_Receive_IT+0x1a0>)
 800957a:	66da      	str	r2, [r3, #108]	; 0x6c
 800957c:	e002      	b.n	8009584 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4a1e      	ldr	r2, [pc, #120]	; (80095fc <HAL_UART_Receive_IT+0x1a4>)
 8009582:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800959a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80095aa:	609a      	str	r2, [r3, #8]
 80095ac:	e01b      	b.n	80095e6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095b6:	d107      	bne.n	80095c8 <HAL_UART_Receive_IT+0x170>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <HAL_UART_Receive_IT+0x1a8>)
 80095c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80095c6:	e002      	b.n	80095ce <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4a0e      	ldr	r2, [pc, #56]	; (8009604 <HAL_UART_Receive_IT+0x1ac>)
 80095cc:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80095e4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e000      	b.n	80095ec <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80095ea:	2302      	movs	r3, #2
  }
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	0800c685 	.word	0x0800c685
 80095fc:	0800c57d 	.word	0x0800c57d
 8009600:	0800c4d1 	.word	0x0800c4d1
 8009604:	0800c427 	.word	0x0800c427

08009608 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800961c:	2b20      	cmp	r3, #32
 800961e:	d170      	bne.n	8009702 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d002      	beq.n	800962c <HAL_UART_Receive_DMA+0x24>
 8009626:	88fb      	ldrh	r3, [r7, #6]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e069      	b.n	8009704 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009636:	2b01      	cmp	r3, #1
 8009638:	d101      	bne.n	800963e <HAL_UART_Receive_DMA+0x36>
 800963a:	2302      	movs	r3, #2
 800963c:	e062      	b.n	8009704 <HAL_UART_Receive_DMA+0xfc>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	88fa      	ldrh	r2, [r7, #6]
 8009650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2222      	movs	r2, #34	; 0x22
 8009660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009668:	2b00      	cmp	r3, #0
 800966a:	d02c      	beq.n	80096c6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009670:	4a26      	ldr	r2, [pc, #152]	; (800970c <HAL_UART_Receive_DMA+0x104>)
 8009672:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009678:	4a25      	ldr	r2, [pc, #148]	; (8009710 <HAL_UART_Receive_DMA+0x108>)
 800967a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009680:	4a24      	ldr	r2, [pc, #144]	; (8009714 <HAL_UART_Receive_DMA+0x10c>)
 8009682:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009688:	2200      	movs	r2, #0
 800968a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3324      	adds	r3, #36	; 0x24
 8009696:	4619      	mov	r1, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800969c:	461a      	mov	r2, r3
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	f7fa faa4 	bl	8003bec <HAL_DMA_Start_IT>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2210      	movs	r2, #16
 80096ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2220      	movs	r2, #32
 80096be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e01e      	b.n	8009704 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096dc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f042 0201 	orr.w	r2, r2, #1
 80096ec:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096fc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	e000      	b.n	8009704 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009702:	2302      	movs	r3, #2
  }
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	0800c095 	.word	0x0800c095
 8009710:	0800c0fb 	.word	0x0800c0fb
 8009714:	0800c117 	.word	0x0800c117

08009718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009738:	69fa      	ldr	r2, [r7, #28]
 800973a:	f640 030f 	movw	r3, #2063	; 0x80f
 800973e:	4013      	ands	r3, r2
 8009740:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d118      	bne.n	800977a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	d013      	beq.n	800977a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	f003 0320 	and.w	r3, r3, #32
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 8145 	beq.w	80099fa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	4798      	blx	r3
      }
      return;
 8009778:	e13f      	b.n	80099fa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 80e8 	beq.w	8009952 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	4ba1      	ldr	r3, [pc, #644]	; (8009a0c <HAL_UART_IRQHandler+0x2f4>)
 8009786:	4013      	ands	r3, r2
 8009788:	2b00      	cmp	r3, #0
 800978a:	d105      	bne.n	8009798 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	4ba0      	ldr	r3, [pc, #640]	; (8009a10 <HAL_UART_IRQHandler+0x2f8>)
 8009790:	4013      	ands	r3, r2
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80dd 	beq.w	8009952 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d010      	beq.n	80097c4 <HAL_UART_IRQHandler+0xac>
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2201      	movs	r2, #1
 80097b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ba:	f043 0201 	orr.w	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d010      	beq.n	80097f0 <HAL_UART_IRQHandler+0xd8>
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2202      	movs	r2, #2
 80097de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e6:	f043 0204 	orr.w	r2, r3, #4
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d010      	beq.n	800981c <HAL_UART_IRQHandler+0x104>
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2204      	movs	r2, #4
 800980a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009812:	f043 0202 	orr.w	r2, r3, #2
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	f003 0308 	and.w	r3, r3, #8
 8009822:	2b00      	cmp	r3, #0
 8009824:	d015      	beq.n	8009852 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b00      	cmp	r3, #0
 800982e:	d104      	bne.n	800983a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	4b76      	ldr	r3, [pc, #472]	; (8009a0c <HAL_UART_IRQHandler+0x2f4>)
 8009834:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00b      	beq.n	8009852 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2208      	movs	r2, #8
 8009840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009848:	f043 0208 	orr.w	r2, r3, #8
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009858:	2b00      	cmp	r3, #0
 800985a:	d011      	beq.n	8009880 <HAL_UART_IRQHandler+0x168>
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00c      	beq.n	8009880 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800986e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009876:	f043 0220 	orr.w	r2, r3, #32
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 80b9 	beq.w	80099fe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	f003 0320 	and.w	r3, r3, #32
 8009892:	2b00      	cmp	r3, #0
 8009894:	d011      	beq.n	80098ba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	f003 0320 	and.w	r3, r3, #32
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d004      	beq.n	80098da <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d031      	beq.n	800993e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f002 fbb6 	bl	800c04c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ea:	2b40      	cmp	r3, #64	; 0x40
 80098ec:	d123      	bne.n	8009936 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009902:	2b00      	cmp	r3, #0
 8009904:	d013      	beq.n	800992e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800990a:	4a42      	ldr	r2, [pc, #264]	; (8009a14 <HAL_UART_IRQHandler+0x2fc>)
 800990c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009912:	4618      	mov	r0, r3
 8009914:	f7fa fbd4 	bl	80040c0 <HAL_DMA_Abort_IT>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d017      	beq.n	800994e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009928:	4610      	mov	r0, r2
 800992a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992c:	e00f      	b.n	800994e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f87c 	bl	8009a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	e00b      	b.n	800994e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f878 	bl	8009a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993c:	e007      	b.n	800994e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f874 	bl	8009a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800994c:	e057      	b.n	80099fe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994e:	bf00      	nop
    return;
 8009950:	e055      	b.n	80099fe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00d      	beq.n	8009978 <HAL_UART_IRQHandler+0x260>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800996e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f002 ff0b 	bl	800c78c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009976:	e045      	b.n	8009a04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800997e:	2b00      	cmp	r3, #0
 8009980:	d012      	beq.n	80099a8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009988:	2b00      	cmp	r3, #0
 800998a:	d104      	bne.n	8009996 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999a:	2b00      	cmp	r3, #0
 800999c:	d031      	beq.n	8009a02 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	4798      	blx	r3
    }
    return;
 80099a6:	e02c      	b.n	8009a02 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d008      	beq.n	80099c4 <HAL_UART_IRQHandler+0x2ac>
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f002 fd18 	bl	800c3f2 <UART_EndTransmit_IT>
    return;
 80099c2:	e01f      	b.n	8009a04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d008      	beq.n	80099e0 <HAL_UART_IRQHandler+0x2c8>
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f002 feeb 	bl	800c7b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099de:	e011      	b.n	8009a04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00c      	beq.n	8009a04 <HAL_UART_IRQHandler+0x2ec>
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	da09      	bge.n	8009a04 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f002 fed5 	bl	800c7a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099f6:	bf00      	nop
 80099f8:	e004      	b.n	8009a04 <HAL_UART_IRQHandler+0x2ec>
      return;
 80099fa:	bf00      	nop
 80099fc:	e002      	b.n	8009a04 <HAL_UART_IRQHandler+0x2ec>
    return;
 80099fe:	bf00      	nop
 8009a00:	e000      	b.n	8009a04 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009a02:	bf00      	nop
  }
}
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	10000001 	.word	0x10000001
 8009a10:	04000120 	.word	0x04000120
 8009a14:	0800c197 	.word	0x0800c197

08009a18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009a44:	b090      	sub	sp, #64	; 0x40
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689a      	ldr	r2, [r3, #8]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	431a      	orrs	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a76:	4313      	orrs	r3, r2
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	4bc1      	ldr	r3, [pc, #772]	; (8009d88 <UART_SetConfig+0x348>)
 8009a82:	4013      	ands	r3, r2
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6812      	ldr	r2, [r2, #0]
 8009a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a8a:	430b      	orrs	r3, r1
 8009a8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4ab7      	ldr	r2, [pc, #732]	; (8009d8c <UART_SetConfig+0x34c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d004      	beq.n	8009abe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a1b      	ldr	r3, [r3, #32]
 8009ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009aba:	4313      	orrs	r3, r2
 8009abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	4bb2      	ldr	r3, [pc, #712]	; (8009d90 <UART_SetConfig+0x350>)
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	6812      	ldr	r2, [r2, #0]
 8009acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ace:	430b      	orrs	r3, r1
 8009ad0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	f023 010f 	bic.w	r1, r3, #15
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4aa9      	ldr	r2, [pc, #676]	; (8009d94 <UART_SetConfig+0x354>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d177      	bne.n	8009be2 <UART_SetConfig+0x1a2>
 8009af2:	4ba9      	ldr	r3, [pc, #676]	; (8009d98 <UART_SetConfig+0x358>)
 8009af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009afa:	2b28      	cmp	r3, #40	; 0x28
 8009afc:	d86c      	bhi.n	8009bd8 <UART_SetConfig+0x198>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0xc4>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009ba9 	.word	0x08009ba9
 8009b08:	08009bd9 	.word	0x08009bd9
 8009b0c:	08009bd9 	.word	0x08009bd9
 8009b10:	08009bd9 	.word	0x08009bd9
 8009b14:	08009bd9 	.word	0x08009bd9
 8009b18:	08009bd9 	.word	0x08009bd9
 8009b1c:	08009bd9 	.word	0x08009bd9
 8009b20:	08009bd9 	.word	0x08009bd9
 8009b24:	08009bb1 	.word	0x08009bb1
 8009b28:	08009bd9 	.word	0x08009bd9
 8009b2c:	08009bd9 	.word	0x08009bd9
 8009b30:	08009bd9 	.word	0x08009bd9
 8009b34:	08009bd9 	.word	0x08009bd9
 8009b38:	08009bd9 	.word	0x08009bd9
 8009b3c:	08009bd9 	.word	0x08009bd9
 8009b40:	08009bd9 	.word	0x08009bd9
 8009b44:	08009bb9 	.word	0x08009bb9
 8009b48:	08009bd9 	.word	0x08009bd9
 8009b4c:	08009bd9 	.word	0x08009bd9
 8009b50:	08009bd9 	.word	0x08009bd9
 8009b54:	08009bd9 	.word	0x08009bd9
 8009b58:	08009bd9 	.word	0x08009bd9
 8009b5c:	08009bd9 	.word	0x08009bd9
 8009b60:	08009bd9 	.word	0x08009bd9
 8009b64:	08009bc1 	.word	0x08009bc1
 8009b68:	08009bd9 	.word	0x08009bd9
 8009b6c:	08009bd9 	.word	0x08009bd9
 8009b70:	08009bd9 	.word	0x08009bd9
 8009b74:	08009bd9 	.word	0x08009bd9
 8009b78:	08009bd9 	.word	0x08009bd9
 8009b7c:	08009bd9 	.word	0x08009bd9
 8009b80:	08009bd9 	.word	0x08009bd9
 8009b84:	08009bc9 	.word	0x08009bc9
 8009b88:	08009bd9 	.word	0x08009bd9
 8009b8c:	08009bd9 	.word	0x08009bd9
 8009b90:	08009bd9 	.word	0x08009bd9
 8009b94:	08009bd9 	.word	0x08009bd9
 8009b98:	08009bd9 	.word	0x08009bd9
 8009b9c:	08009bd9 	.word	0x08009bd9
 8009ba0:	08009bd9 	.word	0x08009bd9
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bae:	e233      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bb6:	e22f      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009bb8:	2308      	movs	r3, #8
 8009bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bbe:	e22b      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bc6:	e227      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009bc8:	2320      	movs	r3, #32
 8009bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bce:	e223      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bd6:	e21f      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009bd8:	2380      	movs	r3, #128	; 0x80
 8009bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bde:	bf00      	nop
 8009be0:	e21a      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a6d      	ldr	r2, [pc, #436]	; (8009d9c <UART_SetConfig+0x35c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d132      	bne.n	8009c52 <UART_SetConfig+0x212>
 8009bec:	4b6a      	ldr	r3, [pc, #424]	; (8009d98 <UART_SetConfig+0x358>)
 8009bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf0:	f003 0307 	and.w	r3, r3, #7
 8009bf4:	2b05      	cmp	r3, #5
 8009bf6:	d827      	bhi.n	8009c48 <UART_SetConfig+0x208>
 8009bf8:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <UART_SetConfig+0x1c0>)
 8009bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfe:	bf00      	nop
 8009c00:	08009c19 	.word	0x08009c19
 8009c04:	08009c21 	.word	0x08009c21
 8009c08:	08009c29 	.word	0x08009c29
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c39 	.word	0x08009c39
 8009c14:	08009c41 	.word	0x08009c41
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c1e:	e1fb      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c20:	2304      	movs	r3, #4
 8009c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c26:	e1f7      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c2e:	e1f3      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c30:	2310      	movs	r3, #16
 8009c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c36:	e1ef      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c38:	2320      	movs	r3, #32
 8009c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c3e:	e1eb      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c46:	e1e7      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c48:	2380      	movs	r3, #128	; 0x80
 8009c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c4e:	bf00      	nop
 8009c50:	e1e2      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a52      	ldr	r2, [pc, #328]	; (8009da0 <UART_SetConfig+0x360>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d132      	bne.n	8009cc2 <UART_SetConfig+0x282>
 8009c5c:	4b4e      	ldr	r3, [pc, #312]	; (8009d98 <UART_SetConfig+0x358>)
 8009c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	2b05      	cmp	r3, #5
 8009c66:	d827      	bhi.n	8009cb8 <UART_SetConfig+0x278>
 8009c68:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <UART_SetConfig+0x230>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009c89 	.word	0x08009c89
 8009c74:	08009c91 	.word	0x08009c91
 8009c78:	08009c99 	.word	0x08009c99
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009ca9 	.word	0x08009ca9
 8009c84:	08009cb1 	.word	0x08009cb1
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c8e:	e1c3      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c90:	2304      	movs	r3, #4
 8009c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c96:	e1bf      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009c98:	2308      	movs	r3, #8
 8009c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c9e:	e1bb      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009ca0:	2310      	movs	r3, #16
 8009ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ca6:	e1b7      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009ca8:	2320      	movs	r3, #32
 8009caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cae:	e1b3      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009cb0:	2340      	movs	r3, #64	; 0x40
 8009cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cb6:	e1af      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009cb8:	2380      	movs	r3, #128	; 0x80
 8009cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cbe:	bf00      	nop
 8009cc0:	e1aa      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a37      	ldr	r2, [pc, #220]	; (8009da4 <UART_SetConfig+0x364>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d132      	bne.n	8009d32 <UART_SetConfig+0x2f2>
 8009ccc:	4b32      	ldr	r3, [pc, #200]	; (8009d98 <UART_SetConfig+0x358>)
 8009cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	2b05      	cmp	r3, #5
 8009cd6:	d827      	bhi.n	8009d28 <UART_SetConfig+0x2e8>
 8009cd8:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <UART_SetConfig+0x2a0>)
 8009cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cde:	bf00      	nop
 8009ce0:	08009cf9 	.word	0x08009cf9
 8009ce4:	08009d01 	.word	0x08009d01
 8009ce8:	08009d09 	.word	0x08009d09
 8009cec:	08009d11 	.word	0x08009d11
 8009cf0:	08009d19 	.word	0x08009d19
 8009cf4:	08009d21 	.word	0x08009d21
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cfe:	e18b      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d00:	2304      	movs	r3, #4
 8009d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d06:	e187      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d0e:	e183      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d10:	2310      	movs	r3, #16
 8009d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d16:	e17f      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d1e:	e17b      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d20:	2340      	movs	r3, #64	; 0x40
 8009d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d26:	e177      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d28:	2380      	movs	r3, #128	; 0x80
 8009d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d2e:	bf00      	nop
 8009d30:	e172      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a1c      	ldr	r2, [pc, #112]	; (8009da8 <UART_SetConfig+0x368>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d144      	bne.n	8009dc6 <UART_SetConfig+0x386>
 8009d3c:	4b16      	ldr	r3, [pc, #88]	; (8009d98 <UART_SetConfig+0x358>)
 8009d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	2b05      	cmp	r3, #5
 8009d46:	d839      	bhi.n	8009dbc <UART_SetConfig+0x37c>
 8009d48:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <UART_SetConfig+0x310>)
 8009d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4e:	bf00      	nop
 8009d50:	08009d69 	.word	0x08009d69
 8009d54:	08009d71 	.word	0x08009d71
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009dad 	.word	0x08009dad
 8009d64:	08009db5 	.word	0x08009db5
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d6e:	e153      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d70:	2304      	movs	r3, #4
 8009d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d76:	e14f      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d7e:	e14b      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d80:	2310      	movs	r3, #16
 8009d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d86:	e147      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009d88:	cfff69f3 	.word	0xcfff69f3
 8009d8c:	58000c00 	.word	0x58000c00
 8009d90:	11fff4ff 	.word	0x11fff4ff
 8009d94:	40011000 	.word	0x40011000
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	40004400 	.word	0x40004400
 8009da0:	40004800 	.word	0x40004800
 8009da4:	40004c00 	.word	0x40004c00
 8009da8:	40005000 	.word	0x40005000
 8009dac:	2320      	movs	r3, #32
 8009dae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009db2:	e131      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009db4:	2340      	movs	r3, #64	; 0x40
 8009db6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dba:	e12d      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009dbc:	2380      	movs	r3, #128	; 0x80
 8009dbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dc2:	bf00      	nop
 8009dc4:	e128      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4ac3      	ldr	r2, [pc, #780]	; (800a0d8 <UART_SetConfig+0x698>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d178      	bne.n	8009ec2 <UART_SetConfig+0x482>
 8009dd0:	4bc2      	ldr	r3, [pc, #776]	; (800a0dc <UART_SetConfig+0x69c>)
 8009dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dd8:	2b28      	cmp	r3, #40	; 0x28
 8009dda:	d86d      	bhi.n	8009eb8 <UART_SetConfig+0x478>
 8009ddc:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <UART_SetConfig+0x3a4>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009e89 	.word	0x08009e89
 8009de8:	08009eb9 	.word	0x08009eb9
 8009dec:	08009eb9 	.word	0x08009eb9
 8009df0:	08009eb9 	.word	0x08009eb9
 8009df4:	08009eb9 	.word	0x08009eb9
 8009df8:	08009eb9 	.word	0x08009eb9
 8009dfc:	08009eb9 	.word	0x08009eb9
 8009e00:	08009eb9 	.word	0x08009eb9
 8009e04:	08009e91 	.word	0x08009e91
 8009e08:	08009eb9 	.word	0x08009eb9
 8009e0c:	08009eb9 	.word	0x08009eb9
 8009e10:	08009eb9 	.word	0x08009eb9
 8009e14:	08009eb9 	.word	0x08009eb9
 8009e18:	08009eb9 	.word	0x08009eb9
 8009e1c:	08009eb9 	.word	0x08009eb9
 8009e20:	08009eb9 	.word	0x08009eb9
 8009e24:	08009e99 	.word	0x08009e99
 8009e28:	08009eb9 	.word	0x08009eb9
 8009e2c:	08009eb9 	.word	0x08009eb9
 8009e30:	08009eb9 	.word	0x08009eb9
 8009e34:	08009eb9 	.word	0x08009eb9
 8009e38:	08009eb9 	.word	0x08009eb9
 8009e3c:	08009eb9 	.word	0x08009eb9
 8009e40:	08009eb9 	.word	0x08009eb9
 8009e44:	08009ea1 	.word	0x08009ea1
 8009e48:	08009eb9 	.word	0x08009eb9
 8009e4c:	08009eb9 	.word	0x08009eb9
 8009e50:	08009eb9 	.word	0x08009eb9
 8009e54:	08009eb9 	.word	0x08009eb9
 8009e58:	08009eb9 	.word	0x08009eb9
 8009e5c:	08009eb9 	.word	0x08009eb9
 8009e60:	08009eb9 	.word	0x08009eb9
 8009e64:	08009ea9 	.word	0x08009ea9
 8009e68:	08009eb9 	.word	0x08009eb9
 8009e6c:	08009eb9 	.word	0x08009eb9
 8009e70:	08009eb9 	.word	0x08009eb9
 8009e74:	08009eb9 	.word	0x08009eb9
 8009e78:	08009eb9 	.word	0x08009eb9
 8009e7c:	08009eb9 	.word	0x08009eb9
 8009e80:	08009eb9 	.word	0x08009eb9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	2301      	movs	r3, #1
 8009e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e8e:	e0c3      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009e90:	2304      	movs	r3, #4
 8009e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e96:	e0bf      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009e98:	2308      	movs	r3, #8
 8009e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e9e:	e0bb      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ea6:	e0b7      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eae:	e0b3      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eb6:	e0af      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ebe:	bf00      	nop
 8009ec0:	e0aa      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a86      	ldr	r2, [pc, #536]	; (800a0e0 <UART_SetConfig+0x6a0>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d132      	bne.n	8009f32 <UART_SetConfig+0x4f2>
 8009ecc:	4b83      	ldr	r3, [pc, #524]	; (800a0dc <UART_SetConfig+0x69c>)
 8009ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	2b05      	cmp	r3, #5
 8009ed6:	d827      	bhi.n	8009f28 <UART_SetConfig+0x4e8>
 8009ed8:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <UART_SetConfig+0x4a0>)
 8009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ede:	bf00      	nop
 8009ee0:	08009ef9 	.word	0x08009ef9
 8009ee4:	08009f01 	.word	0x08009f01
 8009ee8:	08009f09 	.word	0x08009f09
 8009eec:	08009f11 	.word	0x08009f11
 8009ef0:	08009f19 	.word	0x08009f19
 8009ef4:	08009f21 	.word	0x08009f21
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009efe:	e08b      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f00:	2304      	movs	r3, #4
 8009f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f06:	e087      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f08:	2308      	movs	r3, #8
 8009f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f0e:	e083      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f10:	2310      	movs	r3, #16
 8009f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f16:	e07f      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f18:	2320      	movs	r3, #32
 8009f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f1e:	e07b      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f26:	e077      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f28:	2380      	movs	r3, #128	; 0x80
 8009f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f2e:	bf00      	nop
 8009f30:	e072      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a6b      	ldr	r2, [pc, #428]	; (800a0e4 <UART_SetConfig+0x6a4>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d132      	bne.n	8009fa2 <UART_SetConfig+0x562>
 8009f3c:	4b67      	ldr	r3, [pc, #412]	; (800a0dc <UART_SetConfig+0x69c>)
 8009f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f40:	f003 0307 	and.w	r3, r3, #7
 8009f44:	2b05      	cmp	r3, #5
 8009f46:	d827      	bhi.n	8009f98 <UART_SetConfig+0x558>
 8009f48:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <UART_SetConfig+0x510>)
 8009f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4e:	bf00      	nop
 8009f50:	08009f69 	.word	0x08009f69
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	08009f79 	.word	0x08009f79
 8009f5c:	08009f81 	.word	0x08009f81
 8009f60:	08009f89 	.word	0x08009f89
 8009f64:	08009f91 	.word	0x08009f91
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f6e:	e053      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f70:	2304      	movs	r3, #4
 8009f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f76:	e04f      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f7e:	e04b      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f80:	2310      	movs	r3, #16
 8009f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f86:	e047      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f8e:	e043      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f90:	2340      	movs	r3, #64	; 0x40
 8009f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f96:	e03f      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009f98:	2380      	movs	r3, #128	; 0x80
 8009f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f9e:	bf00      	nop
 8009fa0:	e03a      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a50      	ldr	r2, [pc, #320]	; (800a0e8 <UART_SetConfig+0x6a8>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d132      	bne.n	800a012 <UART_SetConfig+0x5d2>
 8009fac:	4b4b      	ldr	r3, [pc, #300]	; (800a0dc <UART_SetConfig+0x69c>)
 8009fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb0:	f003 0307 	and.w	r3, r3, #7
 8009fb4:	2b05      	cmp	r3, #5
 8009fb6:	d827      	bhi.n	800a008 <UART_SetConfig+0x5c8>
 8009fb8:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <UART_SetConfig+0x580>)
 8009fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbe:	bf00      	nop
 8009fc0:	08009fd9 	.word	0x08009fd9
 8009fc4:	08009fe1 	.word	0x08009fe1
 8009fc8:	08009fe9 	.word	0x08009fe9
 8009fcc:	08009ff1 	.word	0x08009ff1
 8009fd0:	08009ff9 	.word	0x08009ff9
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fde:	e01b      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fe6:	e017      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fee:	e013      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ff6:	e00f      	b.n	800a018 <UART_SetConfig+0x5d8>
 8009ff8:	2320      	movs	r3, #32
 8009ffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ffe:	e00b      	b.n	800a018 <UART_SetConfig+0x5d8>
 800a000:	2340      	movs	r3, #64	; 0x40
 800a002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a006:	e007      	b.n	800a018 <UART_SetConfig+0x5d8>
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a00e:	bf00      	nop
 800a010:	e002      	b.n	800a018 <UART_SetConfig+0x5d8>
 800a012:	2380      	movs	r3, #128	; 0x80
 800a014:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a32      	ldr	r2, [pc, #200]	; (800a0e8 <UART_SetConfig+0x6a8>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	f040 86f7 	bne.w	800ae12 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a028:	2b08      	cmp	r3, #8
 800a02a:	f000 80c0 	beq.w	800a1ae <UART_SetConfig+0x76e>
 800a02e:	2b08      	cmp	r3, #8
 800a030:	dc04      	bgt.n	800a03c <UART_SetConfig+0x5fc>
 800a032:	2b02      	cmp	r3, #2
 800a034:	d00c      	beq.n	800a050 <UART_SetConfig+0x610>
 800a036:	2b04      	cmp	r3, #4
 800a038:	d065      	beq.n	800a106 <UART_SetConfig+0x6c6>
 800a03a:	e27a      	b.n	800a532 <UART_SetConfig+0xaf2>
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	f000 81b0 	beq.w	800a3a2 <UART_SetConfig+0x962>
 800a042:	2b40      	cmp	r3, #64	; 0x40
 800a044:	f000 821e 	beq.w	800a484 <UART_SetConfig+0xa44>
 800a048:	2b10      	cmp	r3, #16
 800a04a:	f000 8104 	beq.w	800a256 <UART_SetConfig+0x816>
 800a04e:	e270      	b.n	800a532 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a050:	f7fe f85c 	bl	800810c <HAL_RCCEx_GetD3PCLK1Freq>
 800a054:	4602      	mov	r2, r0
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d04e      	beq.n	800a0fc <UART_SetConfig+0x6bc>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	2b01      	cmp	r3, #1
 800a064:	d048      	beq.n	800a0f8 <UART_SetConfig+0x6b8>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d042      	beq.n	800a0f4 <UART_SetConfig+0x6b4>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	2b03      	cmp	r3, #3
 800a074:	d03c      	beq.n	800a0f0 <UART_SetConfig+0x6b0>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d036      	beq.n	800a0ec <UART_SetConfig+0x6ac>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	2b05      	cmp	r3, #5
 800a084:	d026      	beq.n	800a0d4 <UART_SetConfig+0x694>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08a:	2b06      	cmp	r3, #6
 800a08c:	d020      	beq.n	800a0d0 <UART_SetConfig+0x690>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a092:	2b07      	cmp	r3, #7
 800a094:	d01a      	beq.n	800a0cc <UART_SetConfig+0x68c>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	2b08      	cmp	r3, #8
 800a09c:	d014      	beq.n	800a0c8 <UART_SetConfig+0x688>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a2:	2b09      	cmp	r3, #9
 800a0a4:	d00e      	beq.n	800a0c4 <UART_SetConfig+0x684>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	2b0a      	cmp	r3, #10
 800a0ac:	d008      	beq.n	800a0c0 <UART_SetConfig+0x680>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	2b0b      	cmp	r3, #11
 800a0b4:	d102      	bne.n	800a0bc <UART_SetConfig+0x67c>
 800a0b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0ba:	e020      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e01e      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0c0:	2380      	movs	r3, #128	; 0x80
 800a0c2:	e01c      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0c4:	2340      	movs	r3, #64	; 0x40
 800a0c6:	e01a      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	e018      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	e016      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	e014      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0d4:	230a      	movs	r3, #10
 800a0d6:	e012      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0d8:	40011400 	.word	0x40011400
 800a0dc:	58024400 	.word	0x58024400
 800a0e0:	40007800 	.word	0x40007800
 800a0e4:	40007c00 	.word	0x40007c00
 800a0e8:	58000c00 	.word	0x58000c00
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	e006      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0f0:	2306      	movs	r3, #6
 800a0f2:	e004      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	e002      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e000      	b.n	800a0fe <UART_SetConfig+0x6be>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a102:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a104:	e219      	b.n	800a53a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a106:	f107 0318 	add.w	r3, r7, #24
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe f814 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a110:	69fa      	ldr	r2, [r7, #28]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	2b00      	cmp	r3, #0
 800a118:	d044      	beq.n	800a1a4 <UART_SetConfig+0x764>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d03e      	beq.n	800a1a0 <UART_SetConfig+0x760>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	2b02      	cmp	r3, #2
 800a128:	d038      	beq.n	800a19c <UART_SetConfig+0x75c>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d032      	beq.n	800a198 <UART_SetConfig+0x758>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a136:	2b04      	cmp	r3, #4
 800a138:	d02c      	beq.n	800a194 <UART_SetConfig+0x754>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	2b05      	cmp	r3, #5
 800a140:	d026      	beq.n	800a190 <UART_SetConfig+0x750>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	2b06      	cmp	r3, #6
 800a148:	d020      	beq.n	800a18c <UART_SetConfig+0x74c>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	2b07      	cmp	r3, #7
 800a150:	d01a      	beq.n	800a188 <UART_SetConfig+0x748>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	2b08      	cmp	r3, #8
 800a158:	d014      	beq.n	800a184 <UART_SetConfig+0x744>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	2b09      	cmp	r3, #9
 800a160:	d00e      	beq.n	800a180 <UART_SetConfig+0x740>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	2b0a      	cmp	r3, #10
 800a168:	d008      	beq.n	800a17c <UART_SetConfig+0x73c>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	2b0b      	cmp	r3, #11
 800a170:	d102      	bne.n	800a178 <UART_SetConfig+0x738>
 800a172:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a176:	e016      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a178:	2301      	movs	r3, #1
 800a17a:	e014      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a17c:	2380      	movs	r3, #128	; 0x80
 800a17e:	e012      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a180:	2340      	movs	r3, #64	; 0x40
 800a182:	e010      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a184:	2320      	movs	r3, #32
 800a186:	e00e      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a188:	2310      	movs	r3, #16
 800a18a:	e00c      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a18c:	230c      	movs	r3, #12
 800a18e:	e00a      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a190:	230a      	movs	r3, #10
 800a192:	e008      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a194:	2308      	movs	r3, #8
 800a196:	e006      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a198:	2306      	movs	r3, #6
 800a19a:	e004      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a19c:	2304      	movs	r3, #4
 800a19e:	e002      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e000      	b.n	800a1a6 <UART_SetConfig+0x766>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1ac:	e1c5      	b.n	800a53a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1ae:	f107 030c 	add.w	r3, r7, #12
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe f90c 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d044      	beq.n	800a24c <UART_SetConfig+0x80c>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d03e      	beq.n	800a248 <UART_SetConfig+0x808>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d038      	beq.n	800a244 <UART_SetConfig+0x804>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d032      	beq.n	800a240 <UART_SetConfig+0x800>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d02c      	beq.n	800a23c <UART_SetConfig+0x7fc>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b05      	cmp	r3, #5
 800a1e8:	d026      	beq.n	800a238 <UART_SetConfig+0x7f8>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b06      	cmp	r3, #6
 800a1f0:	d020      	beq.n	800a234 <UART_SetConfig+0x7f4>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	2b07      	cmp	r3, #7
 800a1f8:	d01a      	beq.n	800a230 <UART_SetConfig+0x7f0>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b08      	cmp	r3, #8
 800a200:	d014      	beq.n	800a22c <UART_SetConfig+0x7ec>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	2b09      	cmp	r3, #9
 800a208:	d00e      	beq.n	800a228 <UART_SetConfig+0x7e8>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	2b0a      	cmp	r3, #10
 800a210:	d008      	beq.n	800a224 <UART_SetConfig+0x7e4>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	2b0b      	cmp	r3, #11
 800a218:	d102      	bne.n	800a220 <UART_SetConfig+0x7e0>
 800a21a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a21e:	e016      	b.n	800a24e <UART_SetConfig+0x80e>
 800a220:	2301      	movs	r3, #1
 800a222:	e014      	b.n	800a24e <UART_SetConfig+0x80e>
 800a224:	2380      	movs	r3, #128	; 0x80
 800a226:	e012      	b.n	800a24e <UART_SetConfig+0x80e>
 800a228:	2340      	movs	r3, #64	; 0x40
 800a22a:	e010      	b.n	800a24e <UART_SetConfig+0x80e>
 800a22c:	2320      	movs	r3, #32
 800a22e:	e00e      	b.n	800a24e <UART_SetConfig+0x80e>
 800a230:	2310      	movs	r3, #16
 800a232:	e00c      	b.n	800a24e <UART_SetConfig+0x80e>
 800a234:	230c      	movs	r3, #12
 800a236:	e00a      	b.n	800a24e <UART_SetConfig+0x80e>
 800a238:	230a      	movs	r3, #10
 800a23a:	e008      	b.n	800a24e <UART_SetConfig+0x80e>
 800a23c:	2308      	movs	r3, #8
 800a23e:	e006      	b.n	800a24e <UART_SetConfig+0x80e>
 800a240:	2306      	movs	r3, #6
 800a242:	e004      	b.n	800a24e <UART_SetConfig+0x80e>
 800a244:	2304      	movs	r3, #4
 800a246:	e002      	b.n	800a24e <UART_SetConfig+0x80e>
 800a248:	2302      	movs	r3, #2
 800a24a:	e000      	b.n	800a24e <UART_SetConfig+0x80e>
 800a24c:	2301      	movs	r3, #1
 800a24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a254:	e171      	b.n	800a53a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a256:	4b7a      	ldr	r3, [pc, #488]	; (800a440 <UART_SetConfig+0xa00>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d054      	beq.n	800a30c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a262:	4b77      	ldr	r3, [pc, #476]	; (800a440 <UART_SetConfig+0xa00>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	08db      	lsrs	r3, r3, #3
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	4a75      	ldr	r2, [pc, #468]	; (800a444 <UART_SetConfig+0xa04>)
 800a26e:	40da      	lsrs	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2b00      	cmp	r3, #0
 800a276:	d044      	beq.n	800a302 <UART_SetConfig+0x8c2>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d03e      	beq.n	800a2fe <UART_SetConfig+0x8be>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	2b02      	cmp	r3, #2
 800a286:	d038      	beq.n	800a2fa <UART_SetConfig+0x8ba>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d032      	beq.n	800a2f6 <UART_SetConfig+0x8b6>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b04      	cmp	r3, #4
 800a296:	d02c      	beq.n	800a2f2 <UART_SetConfig+0x8b2>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b05      	cmp	r3, #5
 800a29e:	d026      	beq.n	800a2ee <UART_SetConfig+0x8ae>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	2b06      	cmp	r3, #6
 800a2a6:	d020      	beq.n	800a2ea <UART_SetConfig+0x8aa>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	2b07      	cmp	r3, #7
 800a2ae:	d01a      	beq.n	800a2e6 <UART_SetConfig+0x8a6>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b4:	2b08      	cmp	r3, #8
 800a2b6:	d014      	beq.n	800a2e2 <UART_SetConfig+0x8a2>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	2b09      	cmp	r3, #9
 800a2be:	d00e      	beq.n	800a2de <UART_SetConfig+0x89e>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	2b0a      	cmp	r3, #10
 800a2c6:	d008      	beq.n	800a2da <UART_SetConfig+0x89a>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	2b0b      	cmp	r3, #11
 800a2ce:	d102      	bne.n	800a2d6 <UART_SetConfig+0x896>
 800a2d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2d4:	e016      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e014      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2da:	2380      	movs	r3, #128	; 0x80
 800a2dc:	e012      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2de:	2340      	movs	r3, #64	; 0x40
 800a2e0:	e010      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2e2:	2320      	movs	r3, #32
 800a2e4:	e00e      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2e6:	2310      	movs	r3, #16
 800a2e8:	e00c      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2ea:	230c      	movs	r3, #12
 800a2ec:	e00a      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2ee:	230a      	movs	r3, #10
 800a2f0:	e008      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2f2:	2308      	movs	r3, #8
 800a2f4:	e006      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2f6:	2306      	movs	r3, #6
 800a2f8:	e004      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2fa:	2304      	movs	r3, #4
 800a2fc:	e002      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e000      	b.n	800a304 <UART_SetConfig+0x8c4>
 800a302:	2301      	movs	r3, #1
 800a304:	fbb2 f3f3 	udiv	r3, r2, r3
 800a308:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a30a:	e116      	b.n	800a53a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	d043      	beq.n	800a39c <UART_SetConfig+0x95c>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d03d      	beq.n	800a398 <UART_SetConfig+0x958>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b02      	cmp	r3, #2
 800a322:	d037      	beq.n	800a394 <UART_SetConfig+0x954>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d031      	beq.n	800a390 <UART_SetConfig+0x950>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b04      	cmp	r3, #4
 800a332:	d02b      	beq.n	800a38c <UART_SetConfig+0x94c>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b05      	cmp	r3, #5
 800a33a:	d025      	beq.n	800a388 <UART_SetConfig+0x948>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b06      	cmp	r3, #6
 800a342:	d01f      	beq.n	800a384 <UART_SetConfig+0x944>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b07      	cmp	r3, #7
 800a34a:	d019      	beq.n	800a380 <UART_SetConfig+0x940>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	2b08      	cmp	r3, #8
 800a352:	d013      	beq.n	800a37c <UART_SetConfig+0x93c>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	2b09      	cmp	r3, #9
 800a35a:	d00d      	beq.n	800a378 <UART_SetConfig+0x938>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	2b0a      	cmp	r3, #10
 800a362:	d007      	beq.n	800a374 <UART_SetConfig+0x934>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a368:	2b0b      	cmp	r3, #11
 800a36a:	d101      	bne.n	800a370 <UART_SetConfig+0x930>
 800a36c:	4b36      	ldr	r3, [pc, #216]	; (800a448 <UART_SetConfig+0xa08>)
 800a36e:	e016      	b.n	800a39e <UART_SetConfig+0x95e>
 800a370:	4b34      	ldr	r3, [pc, #208]	; (800a444 <UART_SetConfig+0xa04>)
 800a372:	e014      	b.n	800a39e <UART_SetConfig+0x95e>
 800a374:	4b35      	ldr	r3, [pc, #212]	; (800a44c <UART_SetConfig+0xa0c>)
 800a376:	e012      	b.n	800a39e <UART_SetConfig+0x95e>
 800a378:	4b35      	ldr	r3, [pc, #212]	; (800a450 <UART_SetConfig+0xa10>)
 800a37a:	e010      	b.n	800a39e <UART_SetConfig+0x95e>
 800a37c:	4b35      	ldr	r3, [pc, #212]	; (800a454 <UART_SetConfig+0xa14>)
 800a37e:	e00e      	b.n	800a39e <UART_SetConfig+0x95e>
 800a380:	4b35      	ldr	r3, [pc, #212]	; (800a458 <UART_SetConfig+0xa18>)
 800a382:	e00c      	b.n	800a39e <UART_SetConfig+0x95e>
 800a384:	4b35      	ldr	r3, [pc, #212]	; (800a45c <UART_SetConfig+0xa1c>)
 800a386:	e00a      	b.n	800a39e <UART_SetConfig+0x95e>
 800a388:	4b35      	ldr	r3, [pc, #212]	; (800a460 <UART_SetConfig+0xa20>)
 800a38a:	e008      	b.n	800a39e <UART_SetConfig+0x95e>
 800a38c:	4b35      	ldr	r3, [pc, #212]	; (800a464 <UART_SetConfig+0xa24>)
 800a38e:	e006      	b.n	800a39e <UART_SetConfig+0x95e>
 800a390:	4b35      	ldr	r3, [pc, #212]	; (800a468 <UART_SetConfig+0xa28>)
 800a392:	e004      	b.n	800a39e <UART_SetConfig+0x95e>
 800a394:	4b35      	ldr	r3, [pc, #212]	; (800a46c <UART_SetConfig+0xa2c>)
 800a396:	e002      	b.n	800a39e <UART_SetConfig+0x95e>
 800a398:	4b35      	ldr	r3, [pc, #212]	; (800a470 <UART_SetConfig+0xa30>)
 800a39a:	e000      	b.n	800a39e <UART_SetConfig+0x95e>
 800a39c:	4b29      	ldr	r3, [pc, #164]	; (800a444 <UART_SetConfig+0xa04>)
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3a0:	e0cb      	b.n	800a53a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d046      	beq.n	800a438 <UART_SetConfig+0x9f8>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d040      	beq.n	800a434 <UART_SetConfig+0x9f4>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d03a      	beq.n	800a430 <UART_SetConfig+0x9f0>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d034      	beq.n	800a42c <UART_SetConfig+0x9ec>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d02e      	beq.n	800a428 <UART_SetConfig+0x9e8>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	2b05      	cmp	r3, #5
 800a3d0:	d028      	beq.n	800a424 <UART_SetConfig+0x9e4>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	2b06      	cmp	r3, #6
 800a3d8:	d022      	beq.n	800a420 <UART_SetConfig+0x9e0>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	2b07      	cmp	r3, #7
 800a3e0:	d01c      	beq.n	800a41c <UART_SetConfig+0x9dc>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b08      	cmp	r3, #8
 800a3e8:	d016      	beq.n	800a418 <UART_SetConfig+0x9d8>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d00f      	beq.n	800a412 <UART_SetConfig+0x9d2>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	2b0a      	cmp	r3, #10
 800a3f8:	d008      	beq.n	800a40c <UART_SetConfig+0x9cc>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	2b0b      	cmp	r3, #11
 800a400:	d102      	bne.n	800a408 <UART_SetConfig+0x9c8>
 800a402:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a406:	e018      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a408:	4b13      	ldr	r3, [pc, #76]	; (800a458 <UART_SetConfig+0xa18>)
 800a40a:	e016      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a40c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a410:	e013      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a412:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a416:	e010      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a418:	4b16      	ldr	r3, [pc, #88]	; (800a474 <UART_SetConfig+0xa34>)
 800a41a:	e00e      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a41c:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <UART_SetConfig+0xa08>)
 800a41e:	e00c      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a420:	4b15      	ldr	r3, [pc, #84]	; (800a478 <UART_SetConfig+0xa38>)
 800a422:	e00a      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a424:	4b15      	ldr	r3, [pc, #84]	; (800a47c <UART_SetConfig+0xa3c>)
 800a426:	e008      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a428:	4b08      	ldr	r3, [pc, #32]	; (800a44c <UART_SetConfig+0xa0c>)
 800a42a:	e006      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a42c:	4b14      	ldr	r3, [pc, #80]	; (800a480 <UART_SetConfig+0xa40>)
 800a42e:	e004      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <UART_SetConfig+0xa10>)
 800a432:	e002      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a434:	4b07      	ldr	r3, [pc, #28]	; (800a454 <UART_SetConfig+0xa14>)
 800a436:	e000      	b.n	800a43a <UART_SetConfig+0x9fa>
 800a438:	4b07      	ldr	r3, [pc, #28]	; (800a458 <UART_SetConfig+0xa18>)
 800a43a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a43c:	e07d      	b.n	800a53a <UART_SetConfig+0xafa>
 800a43e:	bf00      	nop
 800a440:	58024400 	.word	0x58024400
 800a444:	03d09000 	.word	0x03d09000
 800a448:	0003d090 	.word	0x0003d090
 800a44c:	0007a120 	.word	0x0007a120
 800a450:	000f4240 	.word	0x000f4240
 800a454:	001e8480 	.word	0x001e8480
 800a458:	003d0900 	.word	0x003d0900
 800a45c:	00516155 	.word	0x00516155
 800a460:	0061a800 	.word	0x0061a800
 800a464:	007a1200 	.word	0x007a1200
 800a468:	00a2c2aa 	.word	0x00a2c2aa
 800a46c:	00f42400 	.word	0x00f42400
 800a470:	01e84800 	.word	0x01e84800
 800a474:	0001e848 	.word	0x0001e848
 800a478:	00051615 	.word	0x00051615
 800a47c:	00061a80 	.word	0x00061a80
 800a480:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d04e      	beq.n	800a52a <UART_SetConfig+0xaea>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a490:	2b01      	cmp	r3, #1
 800a492:	d047      	beq.n	800a524 <UART_SetConfig+0xae4>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d040      	beq.n	800a51e <UART_SetConfig+0xade>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d039      	beq.n	800a518 <UART_SetConfig+0xad8>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d032      	beq.n	800a512 <UART_SetConfig+0xad2>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b05      	cmp	r3, #5
 800a4b2:	d02b      	beq.n	800a50c <UART_SetConfig+0xacc>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	2b06      	cmp	r3, #6
 800a4ba:	d024      	beq.n	800a506 <UART_SetConfig+0xac6>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	2b07      	cmp	r3, #7
 800a4c2:	d01d      	beq.n	800a500 <UART_SetConfig+0xac0>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d016      	beq.n	800a4fa <UART_SetConfig+0xaba>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	2b09      	cmp	r3, #9
 800a4d2:	d00f      	beq.n	800a4f4 <UART_SetConfig+0xab4>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b0a      	cmp	r3, #10
 800a4da:	d008      	beq.n	800a4ee <UART_SetConfig+0xaae>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	2b0b      	cmp	r3, #11
 800a4e2:	d101      	bne.n	800a4e8 <UART_SetConfig+0xaa8>
 800a4e4:	2380      	movs	r3, #128	; 0x80
 800a4e6:	e022      	b.n	800a52e <UART_SetConfig+0xaee>
 800a4e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ec:	e01f      	b.n	800a52e <UART_SetConfig+0xaee>
 800a4ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4f2:	e01c      	b.n	800a52e <UART_SetConfig+0xaee>
 800a4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4f8:	e019      	b.n	800a52e <UART_SetConfig+0xaee>
 800a4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4fe:	e016      	b.n	800a52e <UART_SetConfig+0xaee>
 800a500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a504:	e013      	b.n	800a52e <UART_SetConfig+0xaee>
 800a506:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a50a:	e010      	b.n	800a52e <UART_SetConfig+0xaee>
 800a50c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a510:	e00d      	b.n	800a52e <UART_SetConfig+0xaee>
 800a512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a516:	e00a      	b.n	800a52e <UART_SetConfig+0xaee>
 800a518:	f241 5355 	movw	r3, #5461	; 0x1555
 800a51c:	e007      	b.n	800a52e <UART_SetConfig+0xaee>
 800a51e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a522:	e004      	b.n	800a52e <UART_SetConfig+0xaee>
 800a524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a528:	e001      	b.n	800a52e <UART_SetConfig+0xaee>
 800a52a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a530:	e003      	b.n	800a53a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a538:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f001 83e8 	beq.w	800bd12 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	4613      	mov	r3, r2
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	4413      	add	r3, r2
 800a54c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a54e:	429a      	cmp	r2, r3
 800a550:	d305      	bcc.n	800a55e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d904      	bls.n	800a568 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a564:	f001 bbd5 	b.w	800bd12 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a568:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a56c:	2b08      	cmp	r3, #8
 800a56e:	f000 8154 	beq.w	800a81a <UART_SetConfig+0xdda>
 800a572:	2b08      	cmp	r3, #8
 800a574:	dc06      	bgt.n	800a584 <UART_SetConfig+0xb44>
 800a576:	2b02      	cmp	r3, #2
 800a578:	d00f      	beq.n	800a59a <UART_SetConfig+0xb5a>
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	f000 80ac 	beq.w	800a6d8 <UART_SetConfig+0xc98>
 800a580:	f000 bc30 	b.w	800ade4 <UART_SetConfig+0x13a4>
 800a584:	2b20      	cmp	r3, #32
 800a586:	f000 832d 	beq.w	800abe4 <UART_SetConfig+0x11a4>
 800a58a:	2b40      	cmp	r3, #64	; 0x40
 800a58c:	f000 83a5 	beq.w	800acda <UART_SetConfig+0x129a>
 800a590:	2b10      	cmp	r3, #16
 800a592:	f000 81e3 	beq.w	800a95c <UART_SetConfig+0xf1c>
 800a596:	f000 bc25 	b.w	800ade4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a59a:	f7fd fdb7 	bl	800810c <HAL_RCCEx_GetD3PCLK1Freq>
 800a59e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f04f 0100 	mov.w	r1, #0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d067      	beq.n	800a680 <UART_SetConfig+0xc40>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d05e      	beq.n	800a676 <UART_SetConfig+0xc36>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d055      	beq.n	800a66c <UART_SetConfig+0xc2c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d04c      	beq.n	800a662 <UART_SetConfig+0xc22>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	d043      	beq.n	800a658 <UART_SetConfig+0xc18>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	2b05      	cmp	r3, #5
 800a5d6:	d03a      	beq.n	800a64e <UART_SetConfig+0xc0e>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5dc:	2b06      	cmp	r3, #6
 800a5de:	d031      	beq.n	800a644 <UART_SetConfig+0xc04>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e4:	2b07      	cmp	r3, #7
 800a5e6:	d028      	beq.n	800a63a <UART_SetConfig+0xbfa>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d01f      	beq.n	800a630 <UART_SetConfig+0xbf0>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	2b09      	cmp	r3, #9
 800a5f6:	d016      	beq.n	800a626 <UART_SetConfig+0xbe6>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	2b0a      	cmp	r3, #10
 800a5fe:	d00d      	beq.n	800a61c <UART_SetConfig+0xbdc>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	2b0b      	cmp	r3, #11
 800a606:	d104      	bne.n	800a612 <UART_SetConfig+0xbd2>
 800a608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a60c:	f04f 0400 	mov.w	r4, #0
 800a610:	e03a      	b.n	800a688 <UART_SetConfig+0xc48>
 800a612:	f04f 0301 	mov.w	r3, #1
 800a616:	f04f 0400 	mov.w	r4, #0
 800a61a:	e035      	b.n	800a688 <UART_SetConfig+0xc48>
 800a61c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a620:	f04f 0400 	mov.w	r4, #0
 800a624:	e030      	b.n	800a688 <UART_SetConfig+0xc48>
 800a626:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a62a:	f04f 0400 	mov.w	r4, #0
 800a62e:	e02b      	b.n	800a688 <UART_SetConfig+0xc48>
 800a630:	f04f 0320 	mov.w	r3, #32
 800a634:	f04f 0400 	mov.w	r4, #0
 800a638:	e026      	b.n	800a688 <UART_SetConfig+0xc48>
 800a63a:	f04f 0310 	mov.w	r3, #16
 800a63e:	f04f 0400 	mov.w	r4, #0
 800a642:	e021      	b.n	800a688 <UART_SetConfig+0xc48>
 800a644:	f04f 030c 	mov.w	r3, #12
 800a648:	f04f 0400 	mov.w	r4, #0
 800a64c:	e01c      	b.n	800a688 <UART_SetConfig+0xc48>
 800a64e:	f04f 030a 	mov.w	r3, #10
 800a652:	f04f 0400 	mov.w	r4, #0
 800a656:	e017      	b.n	800a688 <UART_SetConfig+0xc48>
 800a658:	f04f 0308 	mov.w	r3, #8
 800a65c:	f04f 0400 	mov.w	r4, #0
 800a660:	e012      	b.n	800a688 <UART_SetConfig+0xc48>
 800a662:	f04f 0306 	mov.w	r3, #6
 800a666:	f04f 0400 	mov.w	r4, #0
 800a66a:	e00d      	b.n	800a688 <UART_SetConfig+0xc48>
 800a66c:	f04f 0304 	mov.w	r3, #4
 800a670:	f04f 0400 	mov.w	r4, #0
 800a674:	e008      	b.n	800a688 <UART_SetConfig+0xc48>
 800a676:	f04f 0302 	mov.w	r3, #2
 800a67a:	f04f 0400 	mov.w	r4, #0
 800a67e:	e003      	b.n	800a688 <UART_SetConfig+0xc48>
 800a680:	f04f 0301 	mov.w	r3, #1
 800a684:	f04f 0400 	mov.w	r4, #0
 800a688:	461a      	mov	r2, r3
 800a68a:	4623      	mov	r3, r4
 800a68c:	f7f5 fe24 	bl	80002d8 <__aeabi_uldivmod>
 800a690:	4603      	mov	r3, r0
 800a692:	460c      	mov	r4, r1
 800a694:	4619      	mov	r1, r3
 800a696:	4622      	mov	r2, r4
 800a698:	f04f 0300 	mov.w	r3, #0
 800a69c:	f04f 0400 	mov.w	r4, #0
 800a6a0:	0214      	lsls	r4, r2, #8
 800a6a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a6a6:	020b      	lsls	r3, r1, #8
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6852      	ldr	r2, [r2, #4]
 800a6ac:	0852      	lsrs	r2, r2, #1
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	eb13 0b01 	adds.w	fp, r3, r1
 800a6b8:	eb44 0c02 	adc.w	ip, r4, r2
 800a6bc:	4658      	mov	r0, fp
 800a6be:	4661      	mov	r1, ip
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	f04f 0400 	mov.w	r4, #0
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	f7f5 fe04 	bl	80002d8 <__aeabi_uldivmod>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a6d6:	e389      	b.n	800adec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d8:	f107 0318 	add.w	r3, r7, #24
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fd fd2b 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f04f 0100 	mov.w	r1, #0
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d067      	beq.n	800a7c2 <UART_SetConfig+0xd82>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d05e      	beq.n	800a7b8 <UART_SetConfig+0xd78>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d055      	beq.n	800a7ae <UART_SetConfig+0xd6e>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b03      	cmp	r3, #3
 800a708:	d04c      	beq.n	800a7a4 <UART_SetConfig+0xd64>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d043      	beq.n	800a79a <UART_SetConfig+0xd5a>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	2b05      	cmp	r3, #5
 800a718:	d03a      	beq.n	800a790 <UART_SetConfig+0xd50>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	2b06      	cmp	r3, #6
 800a720:	d031      	beq.n	800a786 <UART_SetConfig+0xd46>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a726:	2b07      	cmp	r3, #7
 800a728:	d028      	beq.n	800a77c <UART_SetConfig+0xd3c>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	2b08      	cmp	r3, #8
 800a730:	d01f      	beq.n	800a772 <UART_SetConfig+0xd32>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	2b09      	cmp	r3, #9
 800a738:	d016      	beq.n	800a768 <UART_SetConfig+0xd28>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	2b0a      	cmp	r3, #10
 800a740:	d00d      	beq.n	800a75e <UART_SetConfig+0xd1e>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b0b      	cmp	r3, #11
 800a748:	d104      	bne.n	800a754 <UART_SetConfig+0xd14>
 800a74a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a74e:	f04f 0400 	mov.w	r4, #0
 800a752:	e03a      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a754:	f04f 0301 	mov.w	r3, #1
 800a758:	f04f 0400 	mov.w	r4, #0
 800a75c:	e035      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a75e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a762:	f04f 0400 	mov.w	r4, #0
 800a766:	e030      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a768:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a76c:	f04f 0400 	mov.w	r4, #0
 800a770:	e02b      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a772:	f04f 0320 	mov.w	r3, #32
 800a776:	f04f 0400 	mov.w	r4, #0
 800a77a:	e026      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a77c:	f04f 0310 	mov.w	r3, #16
 800a780:	f04f 0400 	mov.w	r4, #0
 800a784:	e021      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a786:	f04f 030c 	mov.w	r3, #12
 800a78a:	f04f 0400 	mov.w	r4, #0
 800a78e:	e01c      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a790:	f04f 030a 	mov.w	r3, #10
 800a794:	f04f 0400 	mov.w	r4, #0
 800a798:	e017      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a79a:	f04f 0308 	mov.w	r3, #8
 800a79e:	f04f 0400 	mov.w	r4, #0
 800a7a2:	e012      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a7a4:	f04f 0306 	mov.w	r3, #6
 800a7a8:	f04f 0400 	mov.w	r4, #0
 800a7ac:	e00d      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a7ae:	f04f 0304 	mov.w	r3, #4
 800a7b2:	f04f 0400 	mov.w	r4, #0
 800a7b6:	e008      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a7b8:	f04f 0302 	mov.w	r3, #2
 800a7bc:	f04f 0400 	mov.w	r4, #0
 800a7c0:	e003      	b.n	800a7ca <UART_SetConfig+0xd8a>
 800a7c2:	f04f 0301 	mov.w	r3, #1
 800a7c6:	f04f 0400 	mov.w	r4, #0
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4623      	mov	r3, r4
 800a7ce:	f7f5 fd83 	bl	80002d8 <__aeabi_uldivmod>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4622      	mov	r2, r4
 800a7da:	f04f 0300 	mov.w	r3, #0
 800a7de:	f04f 0400 	mov.w	r4, #0
 800a7e2:	0214      	lsls	r4, r2, #8
 800a7e4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a7e8:	020b      	lsls	r3, r1, #8
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	6852      	ldr	r2, [r2, #4]
 800a7ee:	0852      	lsrs	r2, r2, #1
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	f04f 0200 	mov.w	r2, #0
 800a7f6:	eb13 0b01 	adds.w	fp, r3, r1
 800a7fa:	eb44 0c02 	adc.w	ip, r4, r2
 800a7fe:	4658      	mov	r0, fp
 800a800:	4661      	mov	r1, ip
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	f04f 0400 	mov.w	r4, #0
 800a80a:	461a      	mov	r2, r3
 800a80c:	4623      	mov	r3, r4
 800a80e:	f7f5 fd63 	bl	80002d8 <__aeabi_uldivmod>
 800a812:	4603      	mov	r3, r0
 800a814:	460c      	mov	r4, r1
 800a816:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a818:	e2e8      	b.n	800adec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81a:	f107 030c 	add.w	r3, r7, #12
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fd fdd6 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	4618      	mov	r0, r3
 800a828:	f04f 0100 	mov.w	r1, #0
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	d067      	beq.n	800a904 <UART_SetConfig+0xec4>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d05e      	beq.n	800a8fa <UART_SetConfig+0xeba>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	2b02      	cmp	r3, #2
 800a842:	d055      	beq.n	800a8f0 <UART_SetConfig+0xeb0>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d04c      	beq.n	800a8e6 <UART_SetConfig+0xea6>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	2b04      	cmp	r3, #4
 800a852:	d043      	beq.n	800a8dc <UART_SetConfig+0xe9c>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	2b05      	cmp	r3, #5
 800a85a:	d03a      	beq.n	800a8d2 <UART_SetConfig+0xe92>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	2b06      	cmp	r3, #6
 800a862:	d031      	beq.n	800a8c8 <UART_SetConfig+0xe88>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	2b07      	cmp	r3, #7
 800a86a:	d028      	beq.n	800a8be <UART_SetConfig+0xe7e>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a870:	2b08      	cmp	r3, #8
 800a872:	d01f      	beq.n	800a8b4 <UART_SetConfig+0xe74>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a878:	2b09      	cmp	r3, #9
 800a87a:	d016      	beq.n	800a8aa <UART_SetConfig+0xe6a>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	2b0a      	cmp	r3, #10
 800a882:	d00d      	beq.n	800a8a0 <UART_SetConfig+0xe60>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	2b0b      	cmp	r3, #11
 800a88a:	d104      	bne.n	800a896 <UART_SetConfig+0xe56>
 800a88c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a890:	f04f 0400 	mov.w	r4, #0
 800a894:	e03a      	b.n	800a90c <UART_SetConfig+0xecc>
 800a896:	f04f 0301 	mov.w	r3, #1
 800a89a:	f04f 0400 	mov.w	r4, #0
 800a89e:	e035      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8a0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a8a4:	f04f 0400 	mov.w	r4, #0
 800a8a8:	e030      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a8ae:	f04f 0400 	mov.w	r4, #0
 800a8b2:	e02b      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8b4:	f04f 0320 	mov.w	r3, #32
 800a8b8:	f04f 0400 	mov.w	r4, #0
 800a8bc:	e026      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8be:	f04f 0310 	mov.w	r3, #16
 800a8c2:	f04f 0400 	mov.w	r4, #0
 800a8c6:	e021      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8c8:	f04f 030c 	mov.w	r3, #12
 800a8cc:	f04f 0400 	mov.w	r4, #0
 800a8d0:	e01c      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8d2:	f04f 030a 	mov.w	r3, #10
 800a8d6:	f04f 0400 	mov.w	r4, #0
 800a8da:	e017      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8dc:	f04f 0308 	mov.w	r3, #8
 800a8e0:	f04f 0400 	mov.w	r4, #0
 800a8e4:	e012      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8e6:	f04f 0306 	mov.w	r3, #6
 800a8ea:	f04f 0400 	mov.w	r4, #0
 800a8ee:	e00d      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8f0:	f04f 0304 	mov.w	r3, #4
 800a8f4:	f04f 0400 	mov.w	r4, #0
 800a8f8:	e008      	b.n	800a90c <UART_SetConfig+0xecc>
 800a8fa:	f04f 0302 	mov.w	r3, #2
 800a8fe:	f04f 0400 	mov.w	r4, #0
 800a902:	e003      	b.n	800a90c <UART_SetConfig+0xecc>
 800a904:	f04f 0301 	mov.w	r3, #1
 800a908:	f04f 0400 	mov.w	r4, #0
 800a90c:	461a      	mov	r2, r3
 800a90e:	4623      	mov	r3, r4
 800a910:	f7f5 fce2 	bl	80002d8 <__aeabi_uldivmod>
 800a914:	4603      	mov	r3, r0
 800a916:	460c      	mov	r4, r1
 800a918:	4619      	mov	r1, r3
 800a91a:	4622      	mov	r2, r4
 800a91c:	f04f 0300 	mov.w	r3, #0
 800a920:	f04f 0400 	mov.w	r4, #0
 800a924:	0214      	lsls	r4, r2, #8
 800a926:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a92a:	020b      	lsls	r3, r1, #8
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	6852      	ldr	r2, [r2, #4]
 800a930:	0852      	lsrs	r2, r2, #1
 800a932:	4611      	mov	r1, r2
 800a934:	f04f 0200 	mov.w	r2, #0
 800a938:	eb13 0b01 	adds.w	fp, r3, r1
 800a93c:	eb44 0c02 	adc.w	ip, r4, r2
 800a940:	4658      	mov	r0, fp
 800a942:	4661      	mov	r1, ip
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	f04f 0400 	mov.w	r4, #0
 800a94c:	461a      	mov	r2, r3
 800a94e:	4623      	mov	r3, r4
 800a950:	f7f5 fcc2 	bl	80002d8 <__aeabi_uldivmod>
 800a954:	4603      	mov	r3, r0
 800a956:	460c      	mov	r4, r1
 800a958:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a95a:	e247      	b.n	800adec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a95c:	4b96      	ldr	r3, [pc, #600]	; (800abb8 <UART_SetConfig+0x1178>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0320 	and.w	r3, r3, #32
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 80a3 	beq.w	800aab0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a96a:	4b93      	ldr	r3, [pc, #588]	; (800abb8 <UART_SetConfig+0x1178>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	08db      	lsrs	r3, r3, #3
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	4a91      	ldr	r2, [pc, #580]	; (800abbc <UART_SetConfig+0x117c>)
 800a976:	fa22 f303 	lsr.w	r3, r2, r3
 800a97a:	4618      	mov	r0, r3
 800a97c:	f04f 0100 	mov.w	r1, #0
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a984:	2b00      	cmp	r3, #0
 800a986:	d067      	beq.n	800aa58 <UART_SetConfig+0x1018>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d05e      	beq.n	800aa4e <UART_SetConfig+0x100e>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a994:	2b02      	cmp	r3, #2
 800a996:	d055      	beq.n	800aa44 <UART_SetConfig+0x1004>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d04c      	beq.n	800aa3a <UART_SetConfig+0xffa>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	d043      	beq.n	800aa30 <UART_SetConfig+0xff0>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	2b05      	cmp	r3, #5
 800a9ae:	d03a      	beq.n	800aa26 <UART_SetConfig+0xfe6>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	2b06      	cmp	r3, #6
 800a9b6:	d031      	beq.n	800aa1c <UART_SetConfig+0xfdc>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9bc:	2b07      	cmp	r3, #7
 800a9be:	d028      	beq.n	800aa12 <UART_SetConfig+0xfd2>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d01f      	beq.n	800aa08 <UART_SetConfig+0xfc8>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	2b09      	cmp	r3, #9
 800a9ce:	d016      	beq.n	800a9fe <UART_SetConfig+0xfbe>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d4:	2b0a      	cmp	r3, #10
 800a9d6:	d00d      	beq.n	800a9f4 <UART_SetConfig+0xfb4>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9dc:	2b0b      	cmp	r3, #11
 800a9de:	d104      	bne.n	800a9ea <UART_SetConfig+0xfaa>
 800a9e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9e4:	f04f 0400 	mov.w	r4, #0
 800a9e8:	e03a      	b.n	800aa60 <UART_SetConfig+0x1020>
 800a9ea:	f04f 0301 	mov.w	r3, #1
 800a9ee:	f04f 0400 	mov.w	r4, #0
 800a9f2:	e035      	b.n	800aa60 <UART_SetConfig+0x1020>
 800a9f4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a9f8:	f04f 0400 	mov.w	r4, #0
 800a9fc:	e030      	b.n	800aa60 <UART_SetConfig+0x1020>
 800a9fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa02:	f04f 0400 	mov.w	r4, #0
 800aa06:	e02b      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa08:	f04f 0320 	mov.w	r3, #32
 800aa0c:	f04f 0400 	mov.w	r4, #0
 800aa10:	e026      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa12:	f04f 0310 	mov.w	r3, #16
 800aa16:	f04f 0400 	mov.w	r4, #0
 800aa1a:	e021      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa1c:	f04f 030c 	mov.w	r3, #12
 800aa20:	f04f 0400 	mov.w	r4, #0
 800aa24:	e01c      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa26:	f04f 030a 	mov.w	r3, #10
 800aa2a:	f04f 0400 	mov.w	r4, #0
 800aa2e:	e017      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa30:	f04f 0308 	mov.w	r3, #8
 800aa34:	f04f 0400 	mov.w	r4, #0
 800aa38:	e012      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa3a:	f04f 0306 	mov.w	r3, #6
 800aa3e:	f04f 0400 	mov.w	r4, #0
 800aa42:	e00d      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa44:	f04f 0304 	mov.w	r3, #4
 800aa48:	f04f 0400 	mov.w	r4, #0
 800aa4c:	e008      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa4e:	f04f 0302 	mov.w	r3, #2
 800aa52:	f04f 0400 	mov.w	r4, #0
 800aa56:	e003      	b.n	800aa60 <UART_SetConfig+0x1020>
 800aa58:	f04f 0301 	mov.w	r3, #1
 800aa5c:	f04f 0400 	mov.w	r4, #0
 800aa60:	461a      	mov	r2, r3
 800aa62:	4623      	mov	r3, r4
 800aa64:	f7f5 fc38 	bl	80002d8 <__aeabi_uldivmod>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4622      	mov	r2, r4
 800aa70:	f04f 0300 	mov.w	r3, #0
 800aa74:	f04f 0400 	mov.w	r4, #0
 800aa78:	0214      	lsls	r4, r2, #8
 800aa7a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aa7e:	020b      	lsls	r3, r1, #8
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	6852      	ldr	r2, [r2, #4]
 800aa84:	0852      	lsrs	r2, r2, #1
 800aa86:	4611      	mov	r1, r2
 800aa88:	f04f 0200 	mov.w	r2, #0
 800aa8c:	eb13 0b01 	adds.w	fp, r3, r1
 800aa90:	eb44 0c02 	adc.w	ip, r4, r2
 800aa94:	4658      	mov	r0, fp
 800aa96:	4661      	mov	r1, ip
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f04f 0400 	mov.w	r4, #0
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4623      	mov	r3, r4
 800aaa4:	f7f5 fc18 	bl	80002d8 <__aeabi_uldivmod>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	460c      	mov	r4, r1
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800aaae:	e19d      	b.n	800adec <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d05b      	beq.n	800ab70 <UART_SetConfig+0x1130>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d053      	beq.n	800ab68 <UART_SetConfig+0x1128>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d04b      	beq.n	800ab60 <UART_SetConfig+0x1120>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d043      	beq.n	800ab58 <UART_SetConfig+0x1118>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	d03b      	beq.n	800ab50 <UART_SetConfig+0x1110>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	2b05      	cmp	r3, #5
 800aade:	d033      	beq.n	800ab48 <UART_SetConfig+0x1108>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae4:	2b06      	cmp	r3, #6
 800aae6:	d02b      	beq.n	800ab40 <UART_SetConfig+0x1100>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	2b07      	cmp	r3, #7
 800aaee:	d023      	beq.n	800ab38 <UART_SetConfig+0x10f8>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d01b      	beq.n	800ab30 <UART_SetConfig+0x10f0>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	2b09      	cmp	r3, #9
 800aafe:	d013      	beq.n	800ab28 <UART_SetConfig+0x10e8>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab04:	2b0a      	cmp	r3, #10
 800ab06:	d00b      	beq.n	800ab20 <UART_SetConfig+0x10e0>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0c:	2b0b      	cmp	r3, #11
 800ab0e:	d103      	bne.n	800ab18 <UART_SetConfig+0x10d8>
 800ab10:	4b2a      	ldr	r3, [pc, #168]	; (800abbc <UART_SetConfig+0x117c>)
 800ab12:	f04f 0400 	mov.w	r4, #0
 800ab16:	e02e      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab18:	4b29      	ldr	r3, [pc, #164]	; (800abc0 <UART_SetConfig+0x1180>)
 800ab1a:	f04f 0403 	mov.w	r4, #3
 800ab1e:	e02a      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab20:	4b28      	ldr	r3, [pc, #160]	; (800abc4 <UART_SetConfig+0x1184>)
 800ab22:	f04f 0400 	mov.w	r4, #0
 800ab26:	e026      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab28:	4b27      	ldr	r3, [pc, #156]	; (800abc8 <UART_SetConfig+0x1188>)
 800ab2a:	f04f 0400 	mov.w	r4, #0
 800ab2e:	e022      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab30:	4b26      	ldr	r3, [pc, #152]	; (800abcc <UART_SetConfig+0x118c>)
 800ab32:	f04f 0400 	mov.w	r4, #0
 800ab36:	e01e      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab38:	4b25      	ldr	r3, [pc, #148]	; (800abd0 <UART_SetConfig+0x1190>)
 800ab3a:	f04f 0400 	mov.w	r4, #0
 800ab3e:	e01a      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab40:	a419      	add	r4, pc, #100	; (adr r4, 800aba8 <UART_SetConfig+0x1168>)
 800ab42:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ab46:	e016      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab48:	4b22      	ldr	r3, [pc, #136]	; (800abd4 <UART_SetConfig+0x1194>)
 800ab4a:	f04f 0400 	mov.w	r4, #0
 800ab4e:	e012      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab50:	4b21      	ldr	r3, [pc, #132]	; (800abd8 <UART_SetConfig+0x1198>)
 800ab52:	f04f 0400 	mov.w	r4, #0
 800ab56:	e00e      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab58:	a415      	add	r4, pc, #84	; (adr r4, 800abb0 <UART_SetConfig+0x1170>)
 800ab5a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ab5e:	e00a      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab60:	4b1e      	ldr	r3, [pc, #120]	; (800abdc <UART_SetConfig+0x119c>)
 800ab62:	f04f 0400 	mov.w	r4, #0
 800ab66:	e006      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab68:	4b1d      	ldr	r3, [pc, #116]	; (800abe0 <UART_SetConfig+0x11a0>)
 800ab6a:	f04f 0401 	mov.w	r4, #1
 800ab6e:	e002      	b.n	800ab76 <UART_SetConfig+0x1136>
 800ab70:	4b13      	ldr	r3, [pc, #76]	; (800abc0 <UART_SetConfig+0x1180>)
 800ab72:	f04f 0403 	mov.w	r4, #3
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6852      	ldr	r2, [r2, #4]
 800ab7a:	0852      	lsrs	r2, r2, #1
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	f04f 0200 	mov.w	r2, #0
 800ab82:	eb13 0b01 	adds.w	fp, r3, r1
 800ab86:	eb44 0c02 	adc.w	ip, r4, r2
 800ab8a:	4658      	mov	r0, fp
 800ab8c:	4661      	mov	r1, ip
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f04f 0400 	mov.w	r4, #0
 800ab96:	461a      	mov	r2, r3
 800ab98:	4623      	mov	r3, r4
 800ab9a:	f7f5 fb9d 	bl	80002d8 <__aeabi_uldivmod>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	460c      	mov	r4, r1
 800aba2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aba4:	e122      	b.n	800adec <UART_SetConfig+0x13ac>
 800aba6:	bf00      	nop
 800aba8:	51615500 	.word	0x51615500
 800abac:	00000000 	.word	0x00000000
 800abb0:	a2c2aa00 	.word	0xa2c2aa00
 800abb4:	00000000 	.word	0x00000000
 800abb8:	58024400 	.word	0x58024400
 800abbc:	03d09000 	.word	0x03d09000
 800abc0:	d0900000 	.word	0xd0900000
 800abc4:	07a12000 	.word	0x07a12000
 800abc8:	0f424000 	.word	0x0f424000
 800abcc:	1e848000 	.word	0x1e848000
 800abd0:	3d090000 	.word	0x3d090000
 800abd4:	61a80000 	.word	0x61a80000
 800abd8:	7a120000 	.word	0x7a120000
 800abdc:	f4240000 	.word	0xf4240000
 800abe0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d05b      	beq.n	800aca4 <UART_SetConfig+0x1264>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d053      	beq.n	800ac9c <UART_SetConfig+0x125c>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d04b      	beq.n	800ac94 <UART_SetConfig+0x1254>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d043      	beq.n	800ac8c <UART_SetConfig+0x124c>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d03b      	beq.n	800ac84 <UART_SetConfig+0x1244>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	2b05      	cmp	r3, #5
 800ac12:	d033      	beq.n	800ac7c <UART_SetConfig+0x123c>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	2b06      	cmp	r3, #6
 800ac1a:	d02b      	beq.n	800ac74 <UART_SetConfig+0x1234>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac20:	2b07      	cmp	r3, #7
 800ac22:	d023      	beq.n	800ac6c <UART_SetConfig+0x122c>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d01b      	beq.n	800ac64 <UART_SetConfig+0x1224>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	2b09      	cmp	r3, #9
 800ac32:	d013      	beq.n	800ac5c <UART_SetConfig+0x121c>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	2b0a      	cmp	r3, #10
 800ac3a:	d00b      	beq.n	800ac54 <UART_SetConfig+0x1214>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac40:	2b0b      	cmp	r3, #11
 800ac42:	d103      	bne.n	800ac4c <UART_SetConfig+0x120c>
 800ac44:	4bc0      	ldr	r3, [pc, #768]	; (800af48 <UART_SetConfig+0x1508>)
 800ac46:	f04f 0400 	mov.w	r4, #0
 800ac4a:	e02e      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac4c:	4bbf      	ldr	r3, [pc, #764]	; (800af4c <UART_SetConfig+0x150c>)
 800ac4e:	f04f 0400 	mov.w	r4, #0
 800ac52:	e02a      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac54:	4bbe      	ldr	r3, [pc, #760]	; (800af50 <UART_SetConfig+0x1510>)
 800ac56:	f04f 0400 	mov.w	r4, #0
 800ac5a:	e026      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac5c:	4bbd      	ldr	r3, [pc, #756]	; (800af54 <UART_SetConfig+0x1514>)
 800ac5e:	f04f 0400 	mov.w	r4, #0
 800ac62:	e022      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac64:	4bbc      	ldr	r3, [pc, #752]	; (800af58 <UART_SetConfig+0x1518>)
 800ac66:	f04f 0400 	mov.w	r4, #0
 800ac6a:	e01e      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac6c:	4bbb      	ldr	r3, [pc, #748]	; (800af5c <UART_SetConfig+0x151c>)
 800ac6e:	f04f 0400 	mov.w	r4, #0
 800ac72:	e01a      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac74:	a4b0      	add	r4, pc, #704	; (adr r4, 800af38 <UART_SetConfig+0x14f8>)
 800ac76:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ac7a:	e016      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac7c:	4bb8      	ldr	r3, [pc, #736]	; (800af60 <UART_SetConfig+0x1520>)
 800ac7e:	f04f 0400 	mov.w	r4, #0
 800ac82:	e012      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac84:	4bb7      	ldr	r3, [pc, #732]	; (800af64 <UART_SetConfig+0x1524>)
 800ac86:	f04f 0400 	mov.w	r4, #0
 800ac8a:	e00e      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac8c:	a4ac      	add	r4, pc, #688	; (adr r4, 800af40 <UART_SetConfig+0x1500>)
 800ac8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ac92:	e00a      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac94:	4bb4      	ldr	r3, [pc, #720]	; (800af68 <UART_SetConfig+0x1528>)
 800ac96:	f04f 0400 	mov.w	r4, #0
 800ac9a:	e006      	b.n	800acaa <UART_SetConfig+0x126a>
 800ac9c:	4bb3      	ldr	r3, [pc, #716]	; (800af6c <UART_SetConfig+0x152c>)
 800ac9e:	f04f 0400 	mov.w	r4, #0
 800aca2:	e002      	b.n	800acaa <UART_SetConfig+0x126a>
 800aca4:	4ba9      	ldr	r3, [pc, #676]	; (800af4c <UART_SetConfig+0x150c>)
 800aca6:	f04f 0400 	mov.w	r4, #0
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	6852      	ldr	r2, [r2, #4]
 800acae:	0852      	lsrs	r2, r2, #1
 800acb0:	4611      	mov	r1, r2
 800acb2:	f04f 0200 	mov.w	r2, #0
 800acb6:	eb13 0b01 	adds.w	fp, r3, r1
 800acba:	eb44 0c02 	adc.w	ip, r4, r2
 800acbe:	4658      	mov	r0, fp
 800acc0:	4661      	mov	r1, ip
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f04f 0400 	mov.w	r4, #0
 800acca:	461a      	mov	r2, r3
 800accc:	4623      	mov	r3, r4
 800acce:	f7f5 fb03 	bl	80002d8 <__aeabi_uldivmod>
 800acd2:	4603      	mov	r3, r0
 800acd4:	460c      	mov	r4, r1
 800acd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800acd8:	e088      	b.n	800adec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d064      	beq.n	800adac <UART_SetConfig+0x136c>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d05b      	beq.n	800ada2 <UART_SetConfig+0x1362>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d052      	beq.n	800ad98 <UART_SetConfig+0x1358>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d04a      	beq.n	800ad90 <UART_SetConfig+0x1350>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d041      	beq.n	800ad86 <UART_SetConfig+0x1346>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad06:	2b05      	cmp	r3, #5
 800ad08:	d039      	beq.n	800ad7e <UART_SetConfig+0x133e>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	2b06      	cmp	r3, #6
 800ad10:	d031      	beq.n	800ad76 <UART_SetConfig+0x1336>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	2b07      	cmp	r3, #7
 800ad18:	d028      	beq.n	800ad6c <UART_SetConfig+0x132c>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	2b08      	cmp	r3, #8
 800ad20:	d01f      	beq.n	800ad62 <UART_SetConfig+0x1322>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad26:	2b09      	cmp	r3, #9
 800ad28:	d016      	beq.n	800ad58 <UART_SetConfig+0x1318>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	2b0a      	cmp	r3, #10
 800ad30:	d00d      	beq.n	800ad4e <UART_SetConfig+0x130e>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	2b0b      	cmp	r3, #11
 800ad38:	d104      	bne.n	800ad44 <UART_SetConfig+0x1304>
 800ad3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad3e:	f04f 0400 	mov.w	r4, #0
 800ad42:	e037      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad48:	f04f 0400 	mov.w	r4, #0
 800ad4c:	e032      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad52:	f04f 0400 	mov.w	r4, #0
 800ad56:	e02d      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ad5c:	f04f 0400 	mov.w	r4, #0
 800ad60:	e028      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ad66:	f04f 0400 	mov.w	r4, #0
 800ad6a:	e023      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad70:	f04f 0400 	mov.w	r4, #0
 800ad74:	e01e      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad76:	4b7e      	ldr	r3, [pc, #504]	; (800af70 <UART_SetConfig+0x1530>)
 800ad78:	f04f 0400 	mov.w	r4, #0
 800ad7c:	e01a      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad7e:	4b7d      	ldr	r3, [pc, #500]	; (800af74 <UART_SetConfig+0x1534>)
 800ad80:	f04f 0400 	mov.w	r4, #0
 800ad84:	e016      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ad8a:	f04f 0400 	mov.w	r4, #0
 800ad8e:	e011      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad90:	4b79      	ldr	r3, [pc, #484]	; (800af78 <UART_SetConfig+0x1538>)
 800ad92:	f04f 0400 	mov.w	r4, #0
 800ad96:	e00d      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ad98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad9c:	f04f 0400 	mov.w	r4, #0
 800ada0:	e008      	b.n	800adb4 <UART_SetConfig+0x1374>
 800ada2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ada6:	f04f 0400 	mov.w	r4, #0
 800adaa:	e003      	b.n	800adb4 <UART_SetConfig+0x1374>
 800adac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800adb0:	f04f 0400 	mov.w	r4, #0
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	6852      	ldr	r2, [r2, #4]
 800adb8:	0852      	lsrs	r2, r2, #1
 800adba:	4611      	mov	r1, r2
 800adbc:	f04f 0200 	mov.w	r2, #0
 800adc0:	eb13 0b01 	adds.w	fp, r3, r1
 800adc4:	eb44 0c02 	adc.w	ip, r4, r2
 800adc8:	4658      	mov	r0, fp
 800adca:	4661      	mov	r1, ip
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	f04f 0400 	mov.w	r4, #0
 800add4:	461a      	mov	r2, r3
 800add6:	4623      	mov	r3, r4
 800add8:	f7f5 fa7e 	bl	80002d8 <__aeabi_uldivmod>
 800addc:	4603      	mov	r3, r0
 800adde:	460c      	mov	r4, r1
 800ade0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ade2:	e003      	b.n	800adec <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800adea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adf2:	d309      	bcc.n	800ae08 <UART_SetConfig+0x13c8>
 800adf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adfa:	d205      	bcs.n	800ae08 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae02:	60da      	str	r2, [r3, #12]
 800ae04:	f000 bf85 	b.w	800bd12 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0e:	f000 bf80 	b.w	800bd12 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae1a:	f040 83da 	bne.w	800b5d2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800ae1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae22:	2b40      	cmp	r3, #64	; 0x40
 800ae24:	f200 83b3 	bhi.w	800b58e <UART_SetConfig+0x1b4e>
 800ae28:	a201      	add	r2, pc, #4	; (adr r2, 800ae30 <UART_SetConfig+0x13f0>)
 800ae2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2e:	bf00      	nop
 800ae30:	0800af7d 	.word	0x0800af7d
 800ae34:	0800b035 	.word	0x0800b035
 800ae38:	0800b58f 	.word	0x0800b58f
 800ae3c:	0800b58f 	.word	0x0800b58f
 800ae40:	0800b0ed 	.word	0x0800b0ed
 800ae44:	0800b58f 	.word	0x0800b58f
 800ae48:	0800b58f 	.word	0x0800b58f
 800ae4c:	0800b58f 	.word	0x0800b58f
 800ae50:	0800b1a9 	.word	0x0800b1a9
 800ae54:	0800b58f 	.word	0x0800b58f
 800ae58:	0800b58f 	.word	0x0800b58f
 800ae5c:	0800b58f 	.word	0x0800b58f
 800ae60:	0800b58f 	.word	0x0800b58f
 800ae64:	0800b58f 	.word	0x0800b58f
 800ae68:	0800b58f 	.word	0x0800b58f
 800ae6c:	0800b58f 	.word	0x0800b58f
 800ae70:	0800b265 	.word	0x0800b265
 800ae74:	0800b58f 	.word	0x0800b58f
 800ae78:	0800b58f 	.word	0x0800b58f
 800ae7c:	0800b58f 	.word	0x0800b58f
 800ae80:	0800b58f 	.word	0x0800b58f
 800ae84:	0800b58f 	.word	0x0800b58f
 800ae88:	0800b58f 	.word	0x0800b58f
 800ae8c:	0800b58f 	.word	0x0800b58f
 800ae90:	0800b58f 	.word	0x0800b58f
 800ae94:	0800b58f 	.word	0x0800b58f
 800ae98:	0800b58f 	.word	0x0800b58f
 800ae9c:	0800b58f 	.word	0x0800b58f
 800aea0:	0800b58f 	.word	0x0800b58f
 800aea4:	0800b58f 	.word	0x0800b58f
 800aea8:	0800b58f 	.word	0x0800b58f
 800aeac:	0800b58f 	.word	0x0800b58f
 800aeb0:	0800b3d7 	.word	0x0800b3d7
 800aeb4:	0800b58f 	.word	0x0800b58f
 800aeb8:	0800b58f 	.word	0x0800b58f
 800aebc:	0800b58f 	.word	0x0800b58f
 800aec0:	0800b58f 	.word	0x0800b58f
 800aec4:	0800b58f 	.word	0x0800b58f
 800aec8:	0800b58f 	.word	0x0800b58f
 800aecc:	0800b58f 	.word	0x0800b58f
 800aed0:	0800b58f 	.word	0x0800b58f
 800aed4:	0800b58f 	.word	0x0800b58f
 800aed8:	0800b58f 	.word	0x0800b58f
 800aedc:	0800b58f 	.word	0x0800b58f
 800aee0:	0800b58f 	.word	0x0800b58f
 800aee4:	0800b58f 	.word	0x0800b58f
 800aee8:	0800b58f 	.word	0x0800b58f
 800aeec:	0800b58f 	.word	0x0800b58f
 800aef0:	0800b58f 	.word	0x0800b58f
 800aef4:	0800b58f 	.word	0x0800b58f
 800aef8:	0800b58f 	.word	0x0800b58f
 800aefc:	0800b58f 	.word	0x0800b58f
 800af00:	0800b58f 	.word	0x0800b58f
 800af04:	0800b58f 	.word	0x0800b58f
 800af08:	0800b58f 	.word	0x0800b58f
 800af0c:	0800b58f 	.word	0x0800b58f
 800af10:	0800b58f 	.word	0x0800b58f
 800af14:	0800b58f 	.word	0x0800b58f
 800af18:	0800b58f 	.word	0x0800b58f
 800af1c:	0800b58f 	.word	0x0800b58f
 800af20:	0800b58f 	.word	0x0800b58f
 800af24:	0800b58f 	.word	0x0800b58f
 800af28:	0800b58f 	.word	0x0800b58f
 800af2c:	0800b58f 	.word	0x0800b58f
 800af30:	0800b4cd 	.word	0x0800b4cd
 800af34:	f3af 8000 	nop.w
 800af38:	05161500 	.word	0x05161500
 800af3c:	00000000 	.word	0x00000000
 800af40:	0a2c2a00 	.word	0x0a2c2a00
 800af44:	00000000 	.word	0x00000000
 800af48:	003d0900 	.word	0x003d0900
 800af4c:	3d090000 	.word	0x3d090000
 800af50:	007a1200 	.word	0x007a1200
 800af54:	00f42400 	.word	0x00f42400
 800af58:	01e84800 	.word	0x01e84800
 800af5c:	03d09000 	.word	0x03d09000
 800af60:	061a8000 	.word	0x061a8000
 800af64:	07a12000 	.word	0x07a12000
 800af68:	0f424000 	.word	0x0f424000
 800af6c:	1e848000 	.word	0x1e848000
 800af70:	000aaa00 	.word	0x000aaa00
 800af74:	000ccc00 	.word	0x000ccc00
 800af78:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af7c:	f7fb ff44 	bl	8006e08 <HAL_RCC_GetPCLK1Freq>
 800af80:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	2b00      	cmp	r3, #0
 800af88:	d044      	beq.n	800b014 <UART_SetConfig+0x15d4>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d03e      	beq.n	800b010 <UART_SetConfig+0x15d0>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	2b02      	cmp	r3, #2
 800af98:	d038      	beq.n	800b00c <UART_SetConfig+0x15cc>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	d032      	beq.n	800b008 <UART_SetConfig+0x15c8>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa6:	2b04      	cmp	r3, #4
 800afa8:	d02c      	beq.n	800b004 <UART_SetConfig+0x15c4>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	2b05      	cmp	r3, #5
 800afb0:	d026      	beq.n	800b000 <UART_SetConfig+0x15c0>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	2b06      	cmp	r3, #6
 800afb8:	d020      	beq.n	800affc <UART_SetConfig+0x15bc>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbe:	2b07      	cmp	r3, #7
 800afc0:	d01a      	beq.n	800aff8 <UART_SetConfig+0x15b8>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc6:	2b08      	cmp	r3, #8
 800afc8:	d014      	beq.n	800aff4 <UART_SetConfig+0x15b4>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	2b09      	cmp	r3, #9
 800afd0:	d00e      	beq.n	800aff0 <UART_SetConfig+0x15b0>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd6:	2b0a      	cmp	r3, #10
 800afd8:	d008      	beq.n	800afec <UART_SetConfig+0x15ac>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afde:	2b0b      	cmp	r3, #11
 800afe0:	d102      	bne.n	800afe8 <UART_SetConfig+0x15a8>
 800afe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afe6:	e016      	b.n	800b016 <UART_SetConfig+0x15d6>
 800afe8:	2301      	movs	r3, #1
 800afea:	e014      	b.n	800b016 <UART_SetConfig+0x15d6>
 800afec:	2380      	movs	r3, #128	; 0x80
 800afee:	e012      	b.n	800b016 <UART_SetConfig+0x15d6>
 800aff0:	2340      	movs	r3, #64	; 0x40
 800aff2:	e010      	b.n	800b016 <UART_SetConfig+0x15d6>
 800aff4:	2320      	movs	r3, #32
 800aff6:	e00e      	b.n	800b016 <UART_SetConfig+0x15d6>
 800aff8:	2310      	movs	r3, #16
 800affa:	e00c      	b.n	800b016 <UART_SetConfig+0x15d6>
 800affc:	230c      	movs	r3, #12
 800affe:	e00a      	b.n	800b016 <UART_SetConfig+0x15d6>
 800b000:	230a      	movs	r3, #10
 800b002:	e008      	b.n	800b016 <UART_SetConfig+0x15d6>
 800b004:	2308      	movs	r3, #8
 800b006:	e006      	b.n	800b016 <UART_SetConfig+0x15d6>
 800b008:	2306      	movs	r3, #6
 800b00a:	e004      	b.n	800b016 <UART_SetConfig+0x15d6>
 800b00c:	2304      	movs	r3, #4
 800b00e:	e002      	b.n	800b016 <UART_SetConfig+0x15d6>
 800b010:	2302      	movs	r3, #2
 800b012:	e000      	b.n	800b016 <UART_SetConfig+0x15d6>
 800b014:	2301      	movs	r3, #1
 800b016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b018:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01c:	005a      	lsls	r2, r3, #1
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	085b      	lsrs	r3, r3, #1
 800b024:	441a      	add	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b02e:	b29b      	uxth	r3, r3
 800b030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b032:	e2b0      	b.n	800b596 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b034:	f7fb fefe 	bl	8006e34 <HAL_RCC_GetPCLK2Freq>
 800b038:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d044      	beq.n	800b0cc <UART_SetConfig+0x168c>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	2b01      	cmp	r3, #1
 800b048:	d03e      	beq.n	800b0c8 <UART_SetConfig+0x1688>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d038      	beq.n	800b0c4 <UART_SetConfig+0x1684>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b056:	2b03      	cmp	r3, #3
 800b058:	d032      	beq.n	800b0c0 <UART_SetConfig+0x1680>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05e:	2b04      	cmp	r3, #4
 800b060:	d02c      	beq.n	800b0bc <UART_SetConfig+0x167c>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	2b05      	cmp	r3, #5
 800b068:	d026      	beq.n	800b0b8 <UART_SetConfig+0x1678>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	2b06      	cmp	r3, #6
 800b070:	d020      	beq.n	800b0b4 <UART_SetConfig+0x1674>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	2b07      	cmp	r3, #7
 800b078:	d01a      	beq.n	800b0b0 <UART_SetConfig+0x1670>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07e:	2b08      	cmp	r3, #8
 800b080:	d014      	beq.n	800b0ac <UART_SetConfig+0x166c>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b086:	2b09      	cmp	r3, #9
 800b088:	d00e      	beq.n	800b0a8 <UART_SetConfig+0x1668>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08e:	2b0a      	cmp	r3, #10
 800b090:	d008      	beq.n	800b0a4 <UART_SetConfig+0x1664>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b096:	2b0b      	cmp	r3, #11
 800b098:	d102      	bne.n	800b0a0 <UART_SetConfig+0x1660>
 800b09a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b09e:	e016      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e014      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0a4:	2380      	movs	r3, #128	; 0x80
 800b0a6:	e012      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0a8:	2340      	movs	r3, #64	; 0x40
 800b0aa:	e010      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0ac:	2320      	movs	r3, #32
 800b0ae:	e00e      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	e00c      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0b4:	230c      	movs	r3, #12
 800b0b6:	e00a      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0b8:	230a      	movs	r3, #10
 800b0ba:	e008      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0bc:	2308      	movs	r3, #8
 800b0be:	e006      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0c0:	2306      	movs	r3, #6
 800b0c2:	e004      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0c4:	2304      	movs	r3, #4
 800b0c6:	e002      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	e000      	b.n	800b0ce <UART_SetConfig+0x168e>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d4:	005a      	lsls	r2, r3, #1
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	441a      	add	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0ea:	e254      	b.n	800b596 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ec:	f107 0318 	add.w	r3, r7, #24
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fd f821 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0f6:	69fa      	ldr	r2, [r7, #28]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d044      	beq.n	800b18a <UART_SetConfig+0x174a>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	2b01      	cmp	r3, #1
 800b106:	d03e      	beq.n	800b186 <UART_SetConfig+0x1746>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d038      	beq.n	800b182 <UART_SetConfig+0x1742>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	2b03      	cmp	r3, #3
 800b116:	d032      	beq.n	800b17e <UART_SetConfig+0x173e>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d02c      	beq.n	800b17a <UART_SetConfig+0x173a>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	2b05      	cmp	r3, #5
 800b126:	d026      	beq.n	800b176 <UART_SetConfig+0x1736>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	2b06      	cmp	r3, #6
 800b12e:	d020      	beq.n	800b172 <UART_SetConfig+0x1732>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	2b07      	cmp	r3, #7
 800b136:	d01a      	beq.n	800b16e <UART_SetConfig+0x172e>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d014      	beq.n	800b16a <UART_SetConfig+0x172a>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	2b09      	cmp	r3, #9
 800b146:	d00e      	beq.n	800b166 <UART_SetConfig+0x1726>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b0a      	cmp	r3, #10
 800b14e:	d008      	beq.n	800b162 <UART_SetConfig+0x1722>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2b0b      	cmp	r3, #11
 800b156:	d102      	bne.n	800b15e <UART_SetConfig+0x171e>
 800b158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b15c:	e016      	b.n	800b18c <UART_SetConfig+0x174c>
 800b15e:	2301      	movs	r3, #1
 800b160:	e014      	b.n	800b18c <UART_SetConfig+0x174c>
 800b162:	2380      	movs	r3, #128	; 0x80
 800b164:	e012      	b.n	800b18c <UART_SetConfig+0x174c>
 800b166:	2340      	movs	r3, #64	; 0x40
 800b168:	e010      	b.n	800b18c <UART_SetConfig+0x174c>
 800b16a:	2320      	movs	r3, #32
 800b16c:	e00e      	b.n	800b18c <UART_SetConfig+0x174c>
 800b16e:	2310      	movs	r3, #16
 800b170:	e00c      	b.n	800b18c <UART_SetConfig+0x174c>
 800b172:	230c      	movs	r3, #12
 800b174:	e00a      	b.n	800b18c <UART_SetConfig+0x174c>
 800b176:	230a      	movs	r3, #10
 800b178:	e008      	b.n	800b18c <UART_SetConfig+0x174c>
 800b17a:	2308      	movs	r3, #8
 800b17c:	e006      	b.n	800b18c <UART_SetConfig+0x174c>
 800b17e:	2306      	movs	r3, #6
 800b180:	e004      	b.n	800b18c <UART_SetConfig+0x174c>
 800b182:	2304      	movs	r3, #4
 800b184:	e002      	b.n	800b18c <UART_SetConfig+0x174c>
 800b186:	2302      	movs	r3, #2
 800b188:	e000      	b.n	800b18c <UART_SetConfig+0x174c>
 800b18a:	2301      	movs	r3, #1
 800b18c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b190:	005a      	lsls	r2, r3, #1
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	085b      	lsrs	r3, r3, #1
 800b198:	441a      	add	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1a6:	e1f6      	b.n	800b596 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1a8:	f107 030c 	add.w	r3, r7, #12
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fd f90f 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d044      	beq.n	800b246 <UART_SetConfig+0x1806>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d03e      	beq.n	800b242 <UART_SetConfig+0x1802>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d038      	beq.n	800b23e <UART_SetConfig+0x17fe>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d032      	beq.n	800b23a <UART_SetConfig+0x17fa>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	2b04      	cmp	r3, #4
 800b1da:	d02c      	beq.n	800b236 <UART_SetConfig+0x17f6>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	2b05      	cmp	r3, #5
 800b1e2:	d026      	beq.n	800b232 <UART_SetConfig+0x17f2>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	2b06      	cmp	r3, #6
 800b1ea:	d020      	beq.n	800b22e <UART_SetConfig+0x17ee>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	2b07      	cmp	r3, #7
 800b1f2:	d01a      	beq.n	800b22a <UART_SetConfig+0x17ea>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d014      	beq.n	800b226 <UART_SetConfig+0x17e6>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	2b09      	cmp	r3, #9
 800b202:	d00e      	beq.n	800b222 <UART_SetConfig+0x17e2>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	2b0a      	cmp	r3, #10
 800b20a:	d008      	beq.n	800b21e <UART_SetConfig+0x17de>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	2b0b      	cmp	r3, #11
 800b212:	d102      	bne.n	800b21a <UART_SetConfig+0x17da>
 800b214:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b218:	e016      	b.n	800b248 <UART_SetConfig+0x1808>
 800b21a:	2301      	movs	r3, #1
 800b21c:	e014      	b.n	800b248 <UART_SetConfig+0x1808>
 800b21e:	2380      	movs	r3, #128	; 0x80
 800b220:	e012      	b.n	800b248 <UART_SetConfig+0x1808>
 800b222:	2340      	movs	r3, #64	; 0x40
 800b224:	e010      	b.n	800b248 <UART_SetConfig+0x1808>
 800b226:	2320      	movs	r3, #32
 800b228:	e00e      	b.n	800b248 <UART_SetConfig+0x1808>
 800b22a:	2310      	movs	r3, #16
 800b22c:	e00c      	b.n	800b248 <UART_SetConfig+0x1808>
 800b22e:	230c      	movs	r3, #12
 800b230:	e00a      	b.n	800b248 <UART_SetConfig+0x1808>
 800b232:	230a      	movs	r3, #10
 800b234:	e008      	b.n	800b248 <UART_SetConfig+0x1808>
 800b236:	2308      	movs	r3, #8
 800b238:	e006      	b.n	800b248 <UART_SetConfig+0x1808>
 800b23a:	2306      	movs	r3, #6
 800b23c:	e004      	b.n	800b248 <UART_SetConfig+0x1808>
 800b23e:	2304      	movs	r3, #4
 800b240:	e002      	b.n	800b248 <UART_SetConfig+0x1808>
 800b242:	2302      	movs	r3, #2
 800b244:	e000      	b.n	800b248 <UART_SetConfig+0x1808>
 800b246:	2301      	movs	r3, #1
 800b248:	fbb2 f3f3 	udiv	r3, r2, r3
 800b24c:	005a      	lsls	r2, r3, #1
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	441a      	add	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25e:	b29b      	uxth	r3, r3
 800b260:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b262:	e198      	b.n	800b596 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b264:	4b87      	ldr	r3, [pc, #540]	; (800b484 <UART_SetConfig+0x1a44>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 0320 	and.w	r3, r3, #32
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d05e      	beq.n	800b32e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b270:	4b84      	ldr	r3, [pc, #528]	; (800b484 <UART_SetConfig+0x1a44>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	08db      	lsrs	r3, r3, #3
 800b276:	f003 0303 	and.w	r3, r3, #3
 800b27a:	4a83      	ldr	r2, [pc, #524]	; (800b488 <UART_SetConfig+0x1a48>)
 800b27c:	40da      	lsrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	2b00      	cmp	r3, #0
 800b284:	d044      	beq.n	800b310 <UART_SetConfig+0x18d0>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d03e      	beq.n	800b30c <UART_SetConfig+0x18cc>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	2b02      	cmp	r3, #2
 800b294:	d038      	beq.n	800b308 <UART_SetConfig+0x18c8>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d032      	beq.n	800b304 <UART_SetConfig+0x18c4>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a2:	2b04      	cmp	r3, #4
 800b2a4:	d02c      	beq.n	800b300 <UART_SetConfig+0x18c0>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2aa:	2b05      	cmp	r3, #5
 800b2ac:	d026      	beq.n	800b2fc <UART_SetConfig+0x18bc>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b2:	2b06      	cmp	r3, #6
 800b2b4:	d020      	beq.n	800b2f8 <UART_SetConfig+0x18b8>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	2b07      	cmp	r3, #7
 800b2bc:	d01a      	beq.n	800b2f4 <UART_SetConfig+0x18b4>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c2:	2b08      	cmp	r3, #8
 800b2c4:	d014      	beq.n	800b2f0 <UART_SetConfig+0x18b0>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ca:	2b09      	cmp	r3, #9
 800b2cc:	d00e      	beq.n	800b2ec <UART_SetConfig+0x18ac>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d2:	2b0a      	cmp	r3, #10
 800b2d4:	d008      	beq.n	800b2e8 <UART_SetConfig+0x18a8>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	2b0b      	cmp	r3, #11
 800b2dc:	d102      	bne.n	800b2e4 <UART_SetConfig+0x18a4>
 800b2de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2e2:	e016      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e014      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b2e8:	2380      	movs	r3, #128	; 0x80
 800b2ea:	e012      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b2ec:	2340      	movs	r3, #64	; 0x40
 800b2ee:	e010      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b2f0:	2320      	movs	r3, #32
 800b2f2:	e00e      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b2f4:	2310      	movs	r3, #16
 800b2f6:	e00c      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b2f8:	230c      	movs	r3, #12
 800b2fa:	e00a      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b2fc:	230a      	movs	r3, #10
 800b2fe:	e008      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b300:	2308      	movs	r3, #8
 800b302:	e006      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b304:	2306      	movs	r3, #6
 800b306:	e004      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b308:	2304      	movs	r3, #4
 800b30a:	e002      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b30c:	2302      	movs	r3, #2
 800b30e:	e000      	b.n	800b312 <UART_SetConfig+0x18d2>
 800b310:	2301      	movs	r3, #1
 800b312:	fbb2 f3f3 	udiv	r3, r2, r3
 800b316:	005a      	lsls	r2, r3, #1
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	085b      	lsrs	r3, r3, #1
 800b31e:	441a      	add	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	fbb2 f3f3 	udiv	r3, r2, r3
 800b328:	b29b      	uxth	r3, r3
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b32c:	e133      	b.n	800b596 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	2b00      	cmp	r3, #0
 800b334:	d043      	beq.n	800b3be <UART_SetConfig+0x197e>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d03d      	beq.n	800b3ba <UART_SetConfig+0x197a>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b342:	2b02      	cmp	r3, #2
 800b344:	d037      	beq.n	800b3b6 <UART_SetConfig+0x1976>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d031      	beq.n	800b3b2 <UART_SetConfig+0x1972>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b352:	2b04      	cmp	r3, #4
 800b354:	d02b      	beq.n	800b3ae <UART_SetConfig+0x196e>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d025      	beq.n	800b3aa <UART_SetConfig+0x196a>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b362:	2b06      	cmp	r3, #6
 800b364:	d01f      	beq.n	800b3a6 <UART_SetConfig+0x1966>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	2b07      	cmp	r3, #7
 800b36c:	d019      	beq.n	800b3a2 <UART_SetConfig+0x1962>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	2b08      	cmp	r3, #8
 800b374:	d013      	beq.n	800b39e <UART_SetConfig+0x195e>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37a:	2b09      	cmp	r3, #9
 800b37c:	d00d      	beq.n	800b39a <UART_SetConfig+0x195a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	2b0a      	cmp	r3, #10
 800b384:	d007      	beq.n	800b396 <UART_SetConfig+0x1956>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38a:	2b0b      	cmp	r3, #11
 800b38c:	d101      	bne.n	800b392 <UART_SetConfig+0x1952>
 800b38e:	4b3f      	ldr	r3, [pc, #252]	; (800b48c <UART_SetConfig+0x1a4c>)
 800b390:	e016      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b392:	4b3f      	ldr	r3, [pc, #252]	; (800b490 <UART_SetConfig+0x1a50>)
 800b394:	e014      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b396:	4b3f      	ldr	r3, [pc, #252]	; (800b494 <UART_SetConfig+0x1a54>)
 800b398:	e012      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b39a:	4b3f      	ldr	r3, [pc, #252]	; (800b498 <UART_SetConfig+0x1a58>)
 800b39c:	e010      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b39e:	4b3f      	ldr	r3, [pc, #252]	; (800b49c <UART_SetConfig+0x1a5c>)
 800b3a0:	e00e      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b3a2:	4b3f      	ldr	r3, [pc, #252]	; (800b4a0 <UART_SetConfig+0x1a60>)
 800b3a4:	e00c      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b3a6:	4b3f      	ldr	r3, [pc, #252]	; (800b4a4 <UART_SetConfig+0x1a64>)
 800b3a8:	e00a      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b3aa:	4b3f      	ldr	r3, [pc, #252]	; (800b4a8 <UART_SetConfig+0x1a68>)
 800b3ac:	e008      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b3ae:	4b3f      	ldr	r3, [pc, #252]	; (800b4ac <UART_SetConfig+0x1a6c>)
 800b3b0:	e006      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b3b2:	4b3f      	ldr	r3, [pc, #252]	; (800b4b0 <UART_SetConfig+0x1a70>)
 800b3b4:	e004      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b3b6:	4b3f      	ldr	r3, [pc, #252]	; (800b4b4 <UART_SetConfig+0x1a74>)
 800b3b8:	e002      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b3ba:	4b33      	ldr	r3, [pc, #204]	; (800b488 <UART_SetConfig+0x1a48>)
 800b3bc:	e000      	b.n	800b3c0 <UART_SetConfig+0x1980>
 800b3be:	4b34      	ldr	r3, [pc, #208]	; (800b490 <UART_SetConfig+0x1a50>)
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6852      	ldr	r2, [r2, #4]
 800b3c4:	0852      	lsrs	r2, r2, #1
 800b3c6:	441a      	add	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3d4:	e0df      	b.n	800b596 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d045      	beq.n	800b46a <UART_SetConfig+0x1a2a>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d03f      	beq.n	800b466 <UART_SetConfig+0x1a26>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d039      	beq.n	800b462 <UART_SetConfig+0x1a22>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f2:	2b03      	cmp	r3, #3
 800b3f4:	d033      	beq.n	800b45e <UART_SetConfig+0x1a1e>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	2b04      	cmp	r3, #4
 800b3fc:	d02d      	beq.n	800b45a <UART_SetConfig+0x1a1a>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b402:	2b05      	cmp	r3, #5
 800b404:	d027      	beq.n	800b456 <UART_SetConfig+0x1a16>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40a:	2b06      	cmp	r3, #6
 800b40c:	d021      	beq.n	800b452 <UART_SetConfig+0x1a12>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b412:	2b07      	cmp	r3, #7
 800b414:	d01b      	beq.n	800b44e <UART_SetConfig+0x1a0e>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41a:	2b08      	cmp	r3, #8
 800b41c:	d015      	beq.n	800b44a <UART_SetConfig+0x1a0a>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	2b09      	cmp	r3, #9
 800b424:	d00f      	beq.n	800b446 <UART_SetConfig+0x1a06>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	2b0a      	cmp	r3, #10
 800b42c:	d008      	beq.n	800b440 <UART_SetConfig+0x1a00>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b432:	2b0b      	cmp	r3, #11
 800b434:	d102      	bne.n	800b43c <UART_SetConfig+0x19fc>
 800b436:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b43a:	e017      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b43c:	4b18      	ldr	r3, [pc, #96]	; (800b4a0 <UART_SetConfig+0x1a60>)
 800b43e:	e015      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b440:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b444:	e012      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b446:	4b1c      	ldr	r3, [pc, #112]	; (800b4b8 <UART_SetConfig+0x1a78>)
 800b448:	e010      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b44a:	4b1c      	ldr	r3, [pc, #112]	; (800b4bc <UART_SetConfig+0x1a7c>)
 800b44c:	e00e      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <UART_SetConfig+0x1a4c>)
 800b450:	e00c      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b452:	4b1b      	ldr	r3, [pc, #108]	; (800b4c0 <UART_SetConfig+0x1a80>)
 800b454:	e00a      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b456:	4b1b      	ldr	r3, [pc, #108]	; (800b4c4 <UART_SetConfig+0x1a84>)
 800b458:	e008      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b45a:	4b0e      	ldr	r3, [pc, #56]	; (800b494 <UART_SetConfig+0x1a54>)
 800b45c:	e006      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b45e:	4b1a      	ldr	r3, [pc, #104]	; (800b4c8 <UART_SetConfig+0x1a88>)
 800b460:	e004      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b462:	4b0d      	ldr	r3, [pc, #52]	; (800b498 <UART_SetConfig+0x1a58>)
 800b464:	e002      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b466:	4b0d      	ldr	r3, [pc, #52]	; (800b49c <UART_SetConfig+0x1a5c>)
 800b468:	e000      	b.n	800b46c <UART_SetConfig+0x1a2c>
 800b46a:	4b0d      	ldr	r3, [pc, #52]	; (800b4a0 <UART_SetConfig+0x1a60>)
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	6852      	ldr	r2, [r2, #4]
 800b470:	0852      	lsrs	r2, r2, #1
 800b472:	441a      	add	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b480:	e089      	b.n	800b596 <UART_SetConfig+0x1b56>
 800b482:	bf00      	nop
 800b484:	58024400 	.word	0x58024400
 800b488:	03d09000 	.word	0x03d09000
 800b48c:	0007a120 	.word	0x0007a120
 800b490:	07a12000 	.word	0x07a12000
 800b494:	000f4240 	.word	0x000f4240
 800b498:	001e8480 	.word	0x001e8480
 800b49c:	003d0900 	.word	0x003d0900
 800b4a0:	007a1200 	.word	0x007a1200
 800b4a4:	00a2c2aa 	.word	0x00a2c2aa
 800b4a8:	00c35000 	.word	0x00c35000
 800b4ac:	00f42400 	.word	0x00f42400
 800b4b0:	01458554 	.word	0x01458554
 800b4b4:	01e84800 	.word	0x01e84800
 800b4b8:	0001e848 	.word	0x0001e848
 800b4bc:	0003d090 	.word	0x0003d090
 800b4c0:	000a2c2a 	.word	0x000a2c2a
 800b4c4:	000c3500 	.word	0x000c3500
 800b4c8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d04f      	beq.n	800b574 <UART_SetConfig+0x1b34>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d048      	beq.n	800b56e <UART_SetConfig+0x1b2e>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d041      	beq.n	800b568 <UART_SetConfig+0x1b28>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e8:	2b03      	cmp	r3, #3
 800b4ea:	d03a      	beq.n	800b562 <UART_SetConfig+0x1b22>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	d033      	beq.n	800b55c <UART_SetConfig+0x1b1c>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f8:	2b05      	cmp	r3, #5
 800b4fa:	d02c      	beq.n	800b556 <UART_SetConfig+0x1b16>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b500:	2b06      	cmp	r3, #6
 800b502:	d025      	beq.n	800b550 <UART_SetConfig+0x1b10>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	2b07      	cmp	r3, #7
 800b50a:	d01e      	beq.n	800b54a <UART_SetConfig+0x1b0a>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b510:	2b08      	cmp	r3, #8
 800b512:	d017      	beq.n	800b544 <UART_SetConfig+0x1b04>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b518:	2b09      	cmp	r3, #9
 800b51a:	d010      	beq.n	800b53e <UART_SetConfig+0x1afe>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b520:	2b0a      	cmp	r3, #10
 800b522:	d009      	beq.n	800b538 <UART_SetConfig+0x1af8>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	2b0b      	cmp	r3, #11
 800b52a:	d102      	bne.n	800b532 <UART_SetConfig+0x1af2>
 800b52c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b530:	e022      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b536:	e01f      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b53c:	e01c      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b542:	e019      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b548:	e016      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b54a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b54e:	e013      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b550:	f241 5354 	movw	r3, #5460	; 0x1554
 800b554:	e010      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b556:	f641 1398 	movw	r3, #6552	; 0x1998
 800b55a:	e00d      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b55c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b560:	e00a      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b562:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b566:	e007      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b56c:	e004      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b56e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b572:	e001      	b.n	800b578 <UART_SetConfig+0x1b38>
 800b574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	6852      	ldr	r2, [r2, #4]
 800b57c:	0852      	lsrs	r2, r2, #1
 800b57e:	441a      	add	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	fbb2 f3f3 	udiv	r3, r2, r3
 800b588:	b29b      	uxth	r3, r3
 800b58a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b58c:	e003      	b.n	800b596 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b598:	2b0f      	cmp	r3, #15
 800b59a:	d916      	bls.n	800b5ca <UART_SetConfig+0x1b8a>
 800b59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a2:	d212      	bcs.n	800b5ca <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	f023 030f 	bic.w	r3, r3, #15
 800b5ac:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b0:	085b      	lsrs	r3, r3, #1
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	f003 0307 	and.w	r3, r3, #7
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b5c6:	60da      	str	r2, [r3, #12]
 800b5c8:	e3a3      	b.n	800bd12 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5d0:	e39f      	b.n	800bd12 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b5d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b5d6:	2b40      	cmp	r3, #64	; 0x40
 800b5d8:	f200 8388 	bhi.w	800bcec <UART_SetConfig+0x22ac>
 800b5dc:	a201      	add	r2, pc, #4	; (adr r2, 800b5e4 <UART_SetConfig+0x1ba4>)
 800b5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e2:	bf00      	nop
 800b5e4:	0800b6e9 	.word	0x0800b6e9
 800b5e8:	0800b79f 	.word	0x0800b79f
 800b5ec:	0800bced 	.word	0x0800bced
 800b5f0:	0800bced 	.word	0x0800bced
 800b5f4:	0800b855 	.word	0x0800b855
 800b5f8:	0800bced 	.word	0x0800bced
 800b5fc:	0800bced 	.word	0x0800bced
 800b600:	0800bced 	.word	0x0800bced
 800b604:	0800b90f 	.word	0x0800b90f
 800b608:	0800bced 	.word	0x0800bced
 800b60c:	0800bced 	.word	0x0800bced
 800b610:	0800bced 	.word	0x0800bced
 800b614:	0800bced 	.word	0x0800bced
 800b618:	0800bced 	.word	0x0800bced
 800b61c:	0800bced 	.word	0x0800bced
 800b620:	0800bced 	.word	0x0800bced
 800b624:	0800b9c9 	.word	0x0800b9c9
 800b628:	0800bced 	.word	0x0800bced
 800b62c:	0800bced 	.word	0x0800bced
 800b630:	0800bced 	.word	0x0800bced
 800b634:	0800bced 	.word	0x0800bced
 800b638:	0800bced 	.word	0x0800bced
 800b63c:	0800bced 	.word	0x0800bced
 800b640:	0800bced 	.word	0x0800bced
 800b644:	0800bced 	.word	0x0800bced
 800b648:	0800bced 	.word	0x0800bced
 800b64c:	0800bced 	.word	0x0800bced
 800b650:	0800bced 	.word	0x0800bced
 800b654:	0800bced 	.word	0x0800bced
 800b658:	0800bced 	.word	0x0800bced
 800b65c:	0800bced 	.word	0x0800bced
 800b660:	0800bced 	.word	0x0800bced
 800b664:	0800bb39 	.word	0x0800bb39
 800b668:	0800bced 	.word	0x0800bced
 800b66c:	0800bced 	.word	0x0800bced
 800b670:	0800bced 	.word	0x0800bced
 800b674:	0800bced 	.word	0x0800bced
 800b678:	0800bced 	.word	0x0800bced
 800b67c:	0800bced 	.word	0x0800bced
 800b680:	0800bced 	.word	0x0800bced
 800b684:	0800bced 	.word	0x0800bced
 800b688:	0800bced 	.word	0x0800bced
 800b68c:	0800bced 	.word	0x0800bced
 800b690:	0800bced 	.word	0x0800bced
 800b694:	0800bced 	.word	0x0800bced
 800b698:	0800bced 	.word	0x0800bced
 800b69c:	0800bced 	.word	0x0800bced
 800b6a0:	0800bced 	.word	0x0800bced
 800b6a4:	0800bced 	.word	0x0800bced
 800b6a8:	0800bced 	.word	0x0800bced
 800b6ac:	0800bced 	.word	0x0800bced
 800b6b0:	0800bced 	.word	0x0800bced
 800b6b4:	0800bced 	.word	0x0800bced
 800b6b8:	0800bced 	.word	0x0800bced
 800b6bc:	0800bced 	.word	0x0800bced
 800b6c0:	0800bced 	.word	0x0800bced
 800b6c4:	0800bced 	.word	0x0800bced
 800b6c8:	0800bced 	.word	0x0800bced
 800b6cc:	0800bced 	.word	0x0800bced
 800b6d0:	0800bced 	.word	0x0800bced
 800b6d4:	0800bced 	.word	0x0800bced
 800b6d8:	0800bced 	.word	0x0800bced
 800b6dc:	0800bced 	.word	0x0800bced
 800b6e0:	0800bced 	.word	0x0800bced
 800b6e4:	0800bc2d 	.word	0x0800bc2d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6e8:	f7fb fb8e 	bl	8006e08 <HAL_RCC_GetPCLK1Freq>
 800b6ec:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d044      	beq.n	800b780 <UART_SetConfig+0x1d40>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d03e      	beq.n	800b77c <UART_SetConfig+0x1d3c>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b702:	2b02      	cmp	r3, #2
 800b704:	d038      	beq.n	800b778 <UART_SetConfig+0x1d38>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d032      	beq.n	800b774 <UART_SetConfig+0x1d34>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	2b04      	cmp	r3, #4
 800b714:	d02c      	beq.n	800b770 <UART_SetConfig+0x1d30>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	2b05      	cmp	r3, #5
 800b71c:	d026      	beq.n	800b76c <UART_SetConfig+0x1d2c>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	2b06      	cmp	r3, #6
 800b724:	d020      	beq.n	800b768 <UART_SetConfig+0x1d28>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	2b07      	cmp	r3, #7
 800b72c:	d01a      	beq.n	800b764 <UART_SetConfig+0x1d24>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b732:	2b08      	cmp	r3, #8
 800b734:	d014      	beq.n	800b760 <UART_SetConfig+0x1d20>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	2b09      	cmp	r3, #9
 800b73c:	d00e      	beq.n	800b75c <UART_SetConfig+0x1d1c>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b742:	2b0a      	cmp	r3, #10
 800b744:	d008      	beq.n	800b758 <UART_SetConfig+0x1d18>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74a:	2b0b      	cmp	r3, #11
 800b74c:	d102      	bne.n	800b754 <UART_SetConfig+0x1d14>
 800b74e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b752:	e016      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b754:	2301      	movs	r3, #1
 800b756:	e014      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b758:	2380      	movs	r3, #128	; 0x80
 800b75a:	e012      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b75c:	2340      	movs	r3, #64	; 0x40
 800b75e:	e010      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b760:	2320      	movs	r3, #32
 800b762:	e00e      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b764:	2310      	movs	r3, #16
 800b766:	e00c      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b768:	230c      	movs	r3, #12
 800b76a:	e00a      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b76c:	230a      	movs	r3, #10
 800b76e:	e008      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b770:	2308      	movs	r3, #8
 800b772:	e006      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b774:	2306      	movs	r3, #6
 800b776:	e004      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b778:	2304      	movs	r3, #4
 800b77a:	e002      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b77c:	2302      	movs	r3, #2
 800b77e:	e000      	b.n	800b782 <UART_SetConfig+0x1d42>
 800b780:	2301      	movs	r3, #1
 800b782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b784:	fbb2 f2f3 	udiv	r2, r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	085b      	lsrs	r3, r3, #1
 800b78e:	441a      	add	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	fbb2 f3f3 	udiv	r3, r2, r3
 800b798:	b29b      	uxth	r3, r3
 800b79a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b79c:	e2aa      	b.n	800bcf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b79e:	f7fb fb49 	bl	8006e34 <HAL_RCC_GetPCLK2Freq>
 800b7a2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d044      	beq.n	800b836 <UART_SetConfig+0x1df6>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d03e      	beq.n	800b832 <UART_SetConfig+0x1df2>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d038      	beq.n	800b82e <UART_SetConfig+0x1dee>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	d032      	beq.n	800b82a <UART_SetConfig+0x1dea>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	2b04      	cmp	r3, #4
 800b7ca:	d02c      	beq.n	800b826 <UART_SetConfig+0x1de6>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d0:	2b05      	cmp	r3, #5
 800b7d2:	d026      	beq.n	800b822 <UART_SetConfig+0x1de2>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	2b06      	cmp	r3, #6
 800b7da:	d020      	beq.n	800b81e <UART_SetConfig+0x1dde>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	2b07      	cmp	r3, #7
 800b7e2:	d01a      	beq.n	800b81a <UART_SetConfig+0x1dda>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	2b08      	cmp	r3, #8
 800b7ea:	d014      	beq.n	800b816 <UART_SetConfig+0x1dd6>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	2b09      	cmp	r3, #9
 800b7f2:	d00e      	beq.n	800b812 <UART_SetConfig+0x1dd2>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f8:	2b0a      	cmp	r3, #10
 800b7fa:	d008      	beq.n	800b80e <UART_SetConfig+0x1dce>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	2b0b      	cmp	r3, #11
 800b802:	d102      	bne.n	800b80a <UART_SetConfig+0x1dca>
 800b804:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b808:	e016      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b80a:	2301      	movs	r3, #1
 800b80c:	e014      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b80e:	2380      	movs	r3, #128	; 0x80
 800b810:	e012      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b812:	2340      	movs	r3, #64	; 0x40
 800b814:	e010      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b816:	2320      	movs	r3, #32
 800b818:	e00e      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b81a:	2310      	movs	r3, #16
 800b81c:	e00c      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b81e:	230c      	movs	r3, #12
 800b820:	e00a      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b822:	230a      	movs	r3, #10
 800b824:	e008      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b826:	2308      	movs	r3, #8
 800b828:	e006      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b82a:	2306      	movs	r3, #6
 800b82c:	e004      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b82e:	2304      	movs	r3, #4
 800b830:	e002      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b832:	2302      	movs	r3, #2
 800b834:	e000      	b.n	800b838 <UART_SetConfig+0x1df8>
 800b836:	2301      	movs	r3, #1
 800b838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b83a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	085b      	lsrs	r3, r3, #1
 800b844:	441a      	add	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b84e:	b29b      	uxth	r3, r3
 800b850:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b852:	e24f      	b.n	800bcf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b854:	f107 0318 	add.w	r3, r7, #24
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fc fc6d 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b85e:	69fa      	ldr	r2, [r7, #28]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	2b00      	cmp	r3, #0
 800b866:	d044      	beq.n	800b8f2 <UART_SetConfig+0x1eb2>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d03e      	beq.n	800b8ee <UART_SetConfig+0x1eae>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b874:	2b02      	cmp	r3, #2
 800b876:	d038      	beq.n	800b8ea <UART_SetConfig+0x1eaa>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d032      	beq.n	800b8e6 <UART_SetConfig+0x1ea6>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	2b04      	cmp	r3, #4
 800b886:	d02c      	beq.n	800b8e2 <UART_SetConfig+0x1ea2>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88c:	2b05      	cmp	r3, #5
 800b88e:	d026      	beq.n	800b8de <UART_SetConfig+0x1e9e>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	2b06      	cmp	r3, #6
 800b896:	d020      	beq.n	800b8da <UART_SetConfig+0x1e9a>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	2b07      	cmp	r3, #7
 800b89e:	d01a      	beq.n	800b8d6 <UART_SetConfig+0x1e96>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	2b08      	cmp	r3, #8
 800b8a6:	d014      	beq.n	800b8d2 <UART_SetConfig+0x1e92>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	2b09      	cmp	r3, #9
 800b8ae:	d00e      	beq.n	800b8ce <UART_SetConfig+0x1e8e>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	2b0a      	cmp	r3, #10
 800b8b6:	d008      	beq.n	800b8ca <UART_SetConfig+0x1e8a>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2b0b      	cmp	r3, #11
 800b8be:	d102      	bne.n	800b8c6 <UART_SetConfig+0x1e86>
 800b8c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8c4:	e016      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e014      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8ca:	2380      	movs	r3, #128	; 0x80
 800b8cc:	e012      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8ce:	2340      	movs	r3, #64	; 0x40
 800b8d0:	e010      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8d2:	2320      	movs	r3, #32
 800b8d4:	e00e      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8d6:	2310      	movs	r3, #16
 800b8d8:	e00c      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8da:	230c      	movs	r3, #12
 800b8dc:	e00a      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8de:	230a      	movs	r3, #10
 800b8e0:	e008      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8e2:	2308      	movs	r3, #8
 800b8e4:	e006      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8e6:	2306      	movs	r3, #6
 800b8e8:	e004      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8ea:	2304      	movs	r3, #4
 800b8ec:	e002      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e000      	b.n	800b8f4 <UART_SetConfig+0x1eb4>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	085b      	lsrs	r3, r3, #1
 800b8fe:	441a      	add	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	fbb2 f3f3 	udiv	r3, r2, r3
 800b908:	b29b      	uxth	r3, r3
 800b90a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b90c:	e1f2      	b.n	800bcf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b90e:	f107 030c 	add.w	r3, r7, #12
 800b912:	4618      	mov	r0, r3
 800b914:	f7fc fd5c 	bl	80083d0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d044      	beq.n	800b9ac <UART_SetConfig+0x1f6c>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	2b01      	cmp	r3, #1
 800b928:	d03e      	beq.n	800b9a8 <UART_SetConfig+0x1f68>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d038      	beq.n	800b9a4 <UART_SetConfig+0x1f64>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b936:	2b03      	cmp	r3, #3
 800b938:	d032      	beq.n	800b9a0 <UART_SetConfig+0x1f60>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d02c      	beq.n	800b99c <UART_SetConfig+0x1f5c>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b946:	2b05      	cmp	r3, #5
 800b948:	d026      	beq.n	800b998 <UART_SetConfig+0x1f58>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94e:	2b06      	cmp	r3, #6
 800b950:	d020      	beq.n	800b994 <UART_SetConfig+0x1f54>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b956:	2b07      	cmp	r3, #7
 800b958:	d01a      	beq.n	800b990 <UART_SetConfig+0x1f50>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95e:	2b08      	cmp	r3, #8
 800b960:	d014      	beq.n	800b98c <UART_SetConfig+0x1f4c>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	2b09      	cmp	r3, #9
 800b968:	d00e      	beq.n	800b988 <UART_SetConfig+0x1f48>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96e:	2b0a      	cmp	r3, #10
 800b970:	d008      	beq.n	800b984 <UART_SetConfig+0x1f44>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	2b0b      	cmp	r3, #11
 800b978:	d102      	bne.n	800b980 <UART_SetConfig+0x1f40>
 800b97a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b97e:	e016      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b980:	2301      	movs	r3, #1
 800b982:	e014      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b984:	2380      	movs	r3, #128	; 0x80
 800b986:	e012      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b988:	2340      	movs	r3, #64	; 0x40
 800b98a:	e010      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b98c:	2320      	movs	r3, #32
 800b98e:	e00e      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b990:	2310      	movs	r3, #16
 800b992:	e00c      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b994:	230c      	movs	r3, #12
 800b996:	e00a      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b998:	230a      	movs	r3, #10
 800b99a:	e008      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b99c:	2308      	movs	r3, #8
 800b99e:	e006      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b9a0:	2306      	movs	r3, #6
 800b9a2:	e004      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b9a4:	2304      	movs	r3, #4
 800b9a6:	e002      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	e000      	b.n	800b9ae <UART_SetConfig+0x1f6e>
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	fbb2 f2f3 	udiv	r2, r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	085b      	lsrs	r3, r3, #1
 800b9b8:	441a      	add	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9c6:	e195      	b.n	800bcf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9c8:	4b87      	ldr	r3, [pc, #540]	; (800bbe8 <UART_SetConfig+0x21a8>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 0320 	and.w	r3, r3, #32
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d05d      	beq.n	800ba90 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9d4:	4b84      	ldr	r3, [pc, #528]	; (800bbe8 <UART_SetConfig+0x21a8>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	08db      	lsrs	r3, r3, #3
 800b9da:	f003 0303 	and.w	r3, r3, #3
 800b9de:	4a83      	ldr	r2, [pc, #524]	; (800bbec <UART_SetConfig+0x21ac>)
 800b9e0:	40da      	lsrs	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d044      	beq.n	800ba74 <UART_SetConfig+0x2034>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d03e      	beq.n	800ba70 <UART_SetConfig+0x2030>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d038      	beq.n	800ba6c <UART_SetConfig+0x202c>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	d032      	beq.n	800ba68 <UART_SetConfig+0x2028>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	d02c      	beq.n	800ba64 <UART_SetConfig+0x2024>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0e:	2b05      	cmp	r3, #5
 800ba10:	d026      	beq.n	800ba60 <UART_SetConfig+0x2020>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba16:	2b06      	cmp	r3, #6
 800ba18:	d020      	beq.n	800ba5c <UART_SetConfig+0x201c>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1e:	2b07      	cmp	r3, #7
 800ba20:	d01a      	beq.n	800ba58 <UART_SetConfig+0x2018>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	2b08      	cmp	r3, #8
 800ba28:	d014      	beq.n	800ba54 <UART_SetConfig+0x2014>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2e:	2b09      	cmp	r3, #9
 800ba30:	d00e      	beq.n	800ba50 <UART_SetConfig+0x2010>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba36:	2b0a      	cmp	r3, #10
 800ba38:	d008      	beq.n	800ba4c <UART_SetConfig+0x200c>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3e:	2b0b      	cmp	r3, #11
 800ba40:	d102      	bne.n	800ba48 <UART_SetConfig+0x2008>
 800ba42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba46:	e016      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e014      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba4c:	2380      	movs	r3, #128	; 0x80
 800ba4e:	e012      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba50:	2340      	movs	r3, #64	; 0x40
 800ba52:	e010      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba54:	2320      	movs	r3, #32
 800ba56:	e00e      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba58:	2310      	movs	r3, #16
 800ba5a:	e00c      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba5c:	230c      	movs	r3, #12
 800ba5e:	e00a      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba60:	230a      	movs	r3, #10
 800ba62:	e008      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba64:	2308      	movs	r3, #8
 800ba66:	e006      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba68:	2306      	movs	r3, #6
 800ba6a:	e004      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba6c:	2304      	movs	r3, #4
 800ba6e:	e002      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba70:	2302      	movs	r3, #2
 800ba72:	e000      	b.n	800ba76 <UART_SetConfig+0x2036>
 800ba74:	2301      	movs	r3, #1
 800ba76:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	085b      	lsrs	r3, r3, #1
 800ba80:	441a      	add	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800ba8e:	e131      	b.n	800bcf4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d043      	beq.n	800bb20 <UART_SetConfig+0x20e0>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d03d      	beq.n	800bb1c <UART_SetConfig+0x20dc>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d037      	beq.n	800bb18 <UART_SetConfig+0x20d8>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baac:	2b03      	cmp	r3, #3
 800baae:	d031      	beq.n	800bb14 <UART_SetConfig+0x20d4>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	d02b      	beq.n	800bb10 <UART_SetConfig+0x20d0>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	2b05      	cmp	r3, #5
 800babe:	d025      	beq.n	800bb0c <UART_SetConfig+0x20cc>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac4:	2b06      	cmp	r3, #6
 800bac6:	d01f      	beq.n	800bb08 <UART_SetConfig+0x20c8>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bacc:	2b07      	cmp	r3, #7
 800bace:	d019      	beq.n	800bb04 <UART_SetConfig+0x20c4>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad4:	2b08      	cmp	r3, #8
 800bad6:	d013      	beq.n	800bb00 <UART_SetConfig+0x20c0>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	2b09      	cmp	r3, #9
 800bade:	d00d      	beq.n	800bafc <UART_SetConfig+0x20bc>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae4:	2b0a      	cmp	r3, #10
 800bae6:	d007      	beq.n	800baf8 <UART_SetConfig+0x20b8>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	2b0b      	cmp	r3, #11
 800baee:	d101      	bne.n	800baf4 <UART_SetConfig+0x20b4>
 800baf0:	4b3f      	ldr	r3, [pc, #252]	; (800bbf0 <UART_SetConfig+0x21b0>)
 800baf2:	e016      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800baf4:	4b3d      	ldr	r3, [pc, #244]	; (800bbec <UART_SetConfig+0x21ac>)
 800baf6:	e014      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800baf8:	4b3e      	ldr	r3, [pc, #248]	; (800bbf4 <UART_SetConfig+0x21b4>)
 800bafa:	e012      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bafc:	4b3e      	ldr	r3, [pc, #248]	; (800bbf8 <UART_SetConfig+0x21b8>)
 800bafe:	e010      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb00:	4b3e      	ldr	r3, [pc, #248]	; (800bbfc <UART_SetConfig+0x21bc>)
 800bb02:	e00e      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb04:	4b3e      	ldr	r3, [pc, #248]	; (800bc00 <UART_SetConfig+0x21c0>)
 800bb06:	e00c      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb08:	4b3e      	ldr	r3, [pc, #248]	; (800bc04 <UART_SetConfig+0x21c4>)
 800bb0a:	e00a      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb0c:	4b3e      	ldr	r3, [pc, #248]	; (800bc08 <UART_SetConfig+0x21c8>)
 800bb0e:	e008      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb10:	4b3e      	ldr	r3, [pc, #248]	; (800bc0c <UART_SetConfig+0x21cc>)
 800bb12:	e006      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb14:	4b3e      	ldr	r3, [pc, #248]	; (800bc10 <UART_SetConfig+0x21d0>)
 800bb16:	e004      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb18:	4b3e      	ldr	r3, [pc, #248]	; (800bc14 <UART_SetConfig+0x21d4>)
 800bb1a:	e002      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb1c:	4b3e      	ldr	r3, [pc, #248]	; (800bc18 <UART_SetConfig+0x21d8>)
 800bb1e:	e000      	b.n	800bb22 <UART_SetConfig+0x20e2>
 800bb20:	4b32      	ldr	r3, [pc, #200]	; (800bbec <UART_SetConfig+0x21ac>)
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	6852      	ldr	r2, [r2, #4]
 800bb26:	0852      	lsrs	r2, r2, #1
 800bb28:	441a      	add	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb36:	e0dd      	b.n	800bcf4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d046      	beq.n	800bbce <UART_SetConfig+0x218e>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d040      	beq.n	800bbca <UART_SetConfig+0x218a>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d03a      	beq.n	800bbc6 <UART_SetConfig+0x2186>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	d034      	beq.n	800bbc2 <UART_SetConfig+0x2182>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	2b04      	cmp	r3, #4
 800bb5e:	d02e      	beq.n	800bbbe <UART_SetConfig+0x217e>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	2b05      	cmp	r3, #5
 800bb66:	d028      	beq.n	800bbba <UART_SetConfig+0x217a>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	2b06      	cmp	r3, #6
 800bb6e:	d022      	beq.n	800bbb6 <UART_SetConfig+0x2176>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	2b07      	cmp	r3, #7
 800bb76:	d01c      	beq.n	800bbb2 <UART_SetConfig+0x2172>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7c:	2b08      	cmp	r3, #8
 800bb7e:	d016      	beq.n	800bbae <UART_SetConfig+0x216e>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb84:	2b09      	cmp	r3, #9
 800bb86:	d00f      	beq.n	800bba8 <UART_SetConfig+0x2168>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8c:	2b0a      	cmp	r3, #10
 800bb8e:	d008      	beq.n	800bba2 <UART_SetConfig+0x2162>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb94:	2b0b      	cmp	r3, #11
 800bb96:	d102      	bne.n	800bb9e <UART_SetConfig+0x215e>
 800bb98:	f643 5309 	movw	r3, #15625	; 0x3d09
 800bb9c:	e018      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bb9e:	4b18      	ldr	r3, [pc, #96]	; (800bc00 <UART_SetConfig+0x21c0>)
 800bba0:	e016      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bba2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800bba6:	e013      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bba8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bbac:	e010      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbae:	4b1b      	ldr	r3, [pc, #108]	; (800bc1c <UART_SetConfig+0x21dc>)
 800bbb0:	e00e      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbb2:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <UART_SetConfig+0x21b0>)
 800bbb4:	e00c      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbb6:	4b1a      	ldr	r3, [pc, #104]	; (800bc20 <UART_SetConfig+0x21e0>)
 800bbb8:	e00a      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbba:	4b1a      	ldr	r3, [pc, #104]	; (800bc24 <UART_SetConfig+0x21e4>)
 800bbbc:	e008      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbbe:	4b0d      	ldr	r3, [pc, #52]	; (800bbf4 <UART_SetConfig+0x21b4>)
 800bbc0:	e006      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbc2:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <UART_SetConfig+0x21e8>)
 800bbc4:	e004      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbc6:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <UART_SetConfig+0x21b8>)
 800bbc8:	e002      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbca:	4b0c      	ldr	r3, [pc, #48]	; (800bbfc <UART_SetConfig+0x21bc>)
 800bbcc:	e000      	b.n	800bbd0 <UART_SetConfig+0x2190>
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <UART_SetConfig+0x21c0>)
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6852      	ldr	r2, [r2, #4]
 800bbd4:	0852      	lsrs	r2, r2, #1
 800bbd6:	441a      	add	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbe4:	e086      	b.n	800bcf4 <UART_SetConfig+0x22b4>
 800bbe6:	bf00      	nop
 800bbe8:	58024400 	.word	0x58024400
 800bbec:	03d09000 	.word	0x03d09000
 800bbf0:	0003d090 	.word	0x0003d090
 800bbf4:	0007a120 	.word	0x0007a120
 800bbf8:	000f4240 	.word	0x000f4240
 800bbfc:	001e8480 	.word	0x001e8480
 800bc00:	003d0900 	.word	0x003d0900
 800bc04:	00516155 	.word	0x00516155
 800bc08:	0061a800 	.word	0x0061a800
 800bc0c:	007a1200 	.word	0x007a1200
 800bc10:	00a2c2aa 	.word	0x00a2c2aa
 800bc14:	00f42400 	.word	0x00f42400
 800bc18:	01e84800 	.word	0x01e84800
 800bc1c:	0001e848 	.word	0x0001e848
 800bc20:	00051615 	.word	0x00051615
 800bc24:	00061a80 	.word	0x00061a80
 800bc28:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d04e      	beq.n	800bcd2 <UART_SetConfig+0x2292>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d047      	beq.n	800bccc <UART_SetConfig+0x228c>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d040      	beq.n	800bcc6 <UART_SetConfig+0x2286>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d039      	beq.n	800bcc0 <UART_SetConfig+0x2280>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	2b04      	cmp	r3, #4
 800bc52:	d032      	beq.n	800bcba <UART_SetConfig+0x227a>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	2b05      	cmp	r3, #5
 800bc5a:	d02b      	beq.n	800bcb4 <UART_SetConfig+0x2274>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	2b06      	cmp	r3, #6
 800bc62:	d024      	beq.n	800bcae <UART_SetConfig+0x226e>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	2b07      	cmp	r3, #7
 800bc6a:	d01d      	beq.n	800bca8 <UART_SetConfig+0x2268>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	2b08      	cmp	r3, #8
 800bc72:	d016      	beq.n	800bca2 <UART_SetConfig+0x2262>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b09      	cmp	r3, #9
 800bc7a:	d00f      	beq.n	800bc9c <UART_SetConfig+0x225c>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	2b0a      	cmp	r3, #10
 800bc82:	d008      	beq.n	800bc96 <UART_SetConfig+0x2256>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	2b0b      	cmp	r3, #11
 800bc8a:	d101      	bne.n	800bc90 <UART_SetConfig+0x2250>
 800bc8c:	2380      	movs	r3, #128	; 0x80
 800bc8e:	e022      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bc90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc94:	e01f      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bc96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc9a:	e01c      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bc9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bca0:	e019      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bca6:	e016      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcac:	e013      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bcae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bcb2:	e010      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bcb4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bcb8:	e00d      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bcba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcbe:	e00a      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bcc0:	f241 5355 	movw	r3, #5461	; 0x1555
 800bcc4:	e007      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bcc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcca:	e004      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bcd0:	e001      	b.n	800bcd6 <UART_SetConfig+0x2296>
 800bcd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	6852      	ldr	r2, [r2, #4]
 800bcda:	0852      	lsrs	r2, r2, #1
 800bcdc:	441a      	add	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcea:	e003      	b.n	800bcf4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bcf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf6:	2b0f      	cmp	r3, #15
 800bcf8:	d908      	bls.n	800bd0c <UART_SetConfig+0x22cc>
 800bcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd00:	d204      	bcs.n	800bd0c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd08:	60da      	str	r2, [r3, #12]
 800bd0a:	e002      	b.n	800bd12 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bd2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3740      	adds	r7, #64	; 0x40
 800bd36:	46bd      	mov	sp, r7
 800bd38:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bd3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd48:	f003 0301 	and.w	r3, r3, #1
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00a      	beq.n	800bd66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	430a      	orrs	r2, r1
 800bd64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6a:	f003 0302 	and.w	r3, r3, #2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00a      	beq.n	800bd88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	430a      	orrs	r2, r1
 800bd86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8c:	f003 0304 	and.w	r3, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00a      	beq.n	800bdaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	430a      	orrs	r2, r1
 800bda8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00a      	beq.n	800bdcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd0:	f003 0310 	and.w	r3, r3, #16
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00a      	beq.n	800bdee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	430a      	orrs	r2, r1
 800bdec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf2:	f003 0320 	and.w	r3, r3, #32
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00a      	beq.n	800be10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	430a      	orrs	r2, r1
 800be0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d01a      	beq.n	800be52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be3a:	d10a      	bne.n	800be52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	430a      	orrs	r2, r1
 800be72:	605a      	str	r2, [r3, #4]
  }
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af02      	add	r7, sp, #8
 800be86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800be90:	f7f6 f86e 	bl	8001f70 <HAL_GetTick>
 800be94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0308 	and.w	r3, r3, #8
 800bea0:	2b08      	cmp	r3, #8
 800bea2:	d10e      	bne.n	800bec2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f82c 	bl	800bf10 <UART_WaitOnFlagUntilTimeout>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e022      	b.n	800bf08 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 0304 	and.w	r3, r3, #4
 800becc:	2b04      	cmp	r3, #4
 800bece:	d10e      	bne.n	800beee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f816 	bl	800bf10 <UART_WaitOnFlagUntilTimeout>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beea:	2303      	movs	r3, #3
 800beec:	e00c      	b.n	800bf08 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2220      	movs	r2, #32
 800bef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2220      	movs	r2, #32
 800befa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf20:	e062      	b.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf28:	d05e      	beq.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf2a:	f7f6 f821 	bl	8001f70 <HAL_GetTick>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d302      	bcc.n	800bf40 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d11d      	bne.n	800bf7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bf4e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f022 0201 	bic.w	r2, r2, #1
 800bf5e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2220      	movs	r2, #32
 800bf64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2220      	movs	r2, #32
 800bf6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e045      	b.n	800c008 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0304 	and.w	r3, r3, #4
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d02e      	beq.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	69db      	ldr	r3, [r3, #28]
 800bf90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf98:	d126      	bne.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfa2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bfb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689a      	ldr	r2, [r3, #8]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f022 0201 	bic.w	r2, r2, #1
 800bfc2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2220      	movs	r2, #32
 800bfd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e00f      	b.n	800c008 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	69da      	ldr	r2, [r3, #28]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	4013      	ands	r3, r2
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	bf0c      	ite	eq
 800bff8:	2301      	moveq	r3, #1
 800bffa:	2300      	movne	r3, #0
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	461a      	mov	r2, r3
 800c000:	79fb      	ldrb	r3, [r7, #7]
 800c002:	429a      	cmp	r2, r3
 800c004:	d08d      	beq.n	800bf22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c026:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	689a      	ldr	r2, [r3, #8]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c036:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2220      	movs	r2, #32
 800c03c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c062:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6899      	ldr	r1, [r3, #8]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	4b08      	ldr	r3, [pc, #32]	; (800c090 <UART_EndRxTransfer+0x44>)
 800c070:	400b      	ands	r3, r1
 800c072:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2220      	movs	r2, #32
 800c078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c082:	bf00      	nop
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	effffffe 	.word	0xeffffffe

0800c094 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0aa:	d01f      	beq.n	800c0ec <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0c2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	689a      	ldr	r2, [r3, #8]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f022 0201 	bic.w	r2, r2, #1
 800c0d2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	689a      	ldr	r2, [r3, #8]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0e2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2220      	movs	r2, #32
 800c0e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f7f4 fb2b 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0f2:	bf00      	nop
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c106:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f7fd fc85 	bl	8009a18 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c10e:	bf00      	nop
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b086      	sub	sp, #24
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c12a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c132:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c13e:	2b80      	cmp	r3, #128	; 0x80
 800c140:	d109      	bne.n	800c156 <UART_DMAError+0x40>
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	2b21      	cmp	r3, #33	; 0x21
 800c146:	d106      	bne.n	800c156 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c150:	6978      	ldr	r0, [r7, #20]
 800c152:	f7ff ff5d 	bl	800c010 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c160:	2b40      	cmp	r3, #64	; 0x40
 800c162:	d109      	bne.n	800c178 <UART_DMAError+0x62>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b22      	cmp	r3, #34	; 0x22
 800c168:	d106      	bne.n	800c178 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c172:	6978      	ldr	r0, [r7, #20]
 800c174:	f7ff ff6a 	bl	800c04c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c17e:	f043 0210 	orr.w	r2, r3, #16
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c188:	6978      	ldr	r0, [r7, #20]
 800c18a:	f7fd fc4f 	bl	8009a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c18e:	bf00      	nop
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f7fd fc39 	bl	8009a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1ba:	bf00      	nop
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b083      	sub	sp, #12
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1d0:	2b21      	cmp	r3, #33	; 0x21
 800c1d2:	d12a      	bne.n	800c22a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d110      	bne.n	800c202 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1ee:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1fe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c200:	e013      	b.n	800c22a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c212:	1c5a      	adds	r2, r3, #1
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c21e:	b29b      	uxth	r3, r3
 800c220:	3b01      	subs	r3, #1
 800c222:	b29a      	uxth	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c236:	b480      	push	{r7}
 800c238:	b085      	sub	sp, #20
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c244:	2b21      	cmp	r3, #33	; 0x21
 800c246:	d12f      	bne.n	800c2a8 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c24e:	b29b      	uxth	r3, r3
 800c250:	2b00      	cmp	r3, #0
 800c252:	d110      	bne.n	800c276 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c262:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c272:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c274:	e018      	b.n	800c2a8 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c27a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	461a      	mov	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c28a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c290:	1c9a      	adds	r2, r3, #2
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c2a8:	bf00      	nop
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2c2:	2b21      	cmp	r3, #33	; 0x21
 800c2c4:	d13d      	bne.n	800c342 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2cc:	81fb      	strh	r3, [r7, #14]
 800c2ce:	e035      	b.n	800c33c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d111      	bne.n	800c300 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	689a      	ldr	r2, [r3, #8]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c2ea:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2fa:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c2fc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c2fe:	e020      	b.n	800c342 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d013      	beq.n	800c336 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c312:	781a      	ldrb	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	3b01      	subs	r3, #1
 800c32e:	b29a      	uxth	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c336:	89fb      	ldrh	r3, [r7, #14]
 800c338:	3b01      	subs	r3, #1
 800c33a:	81fb      	strh	r3, [r7, #14]
 800c33c:	89fb      	ldrh	r3, [r7, #14]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1c6      	bne.n	800c2d0 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c342:	bf00      	nop
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c34e:	b480      	push	{r7}
 800c350:	b085      	sub	sp, #20
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c35c:	2b21      	cmp	r3, #33	; 0x21
 800c35e:	d142      	bne.n	800c3e6 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c366:	81fb      	strh	r3, [r7, #14]
 800c368:	e03a      	b.n	800c3e0 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c370:	b29b      	uxth	r3, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	d111      	bne.n	800c39a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c384:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c394:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c396:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c398:	e025      	b.n	800c3e6 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	69db      	ldr	r3, [r3, #28]
 800c3a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d018      	beq.n	800c3da <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ac:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3bc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c2:	1c9a      	adds	r2, r3, #2
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c3da:	89fb      	ldrh	r3, [r7, #14]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	81fb      	strh	r3, [r7, #14]
 800c3e0:	89fb      	ldrh	r3, [r7, #14]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1c1      	bne.n	800c36a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c3e6:	bf00      	nop
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b082      	sub	sp, #8
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c408:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2220      	movs	r2, #32
 800c40e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7f4 f953 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c434:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c43c:	2b22      	cmp	r3, #34	; 0x22
 800c43e:	d13b      	bne.n	800c4b8 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c446:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c448:	89bb      	ldrh	r3, [r7, #12]
 800c44a:	b2d9      	uxtb	r1, r3
 800c44c:	89fb      	ldrh	r3, [r7, #14]
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c454:	400a      	ands	r2, r1
 800c456:	b2d2      	uxtb	r2, r2
 800c458:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	3b01      	subs	r3, #1
 800c46e:	b29a      	uxth	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d122      	bne.n	800c4c8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c490:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f022 0201 	bic.w	r2, r2, #1
 800c4a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7f4 f949 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4b6:	e007      	b.n	800c4c8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	699a      	ldr	r2, [r3, #24]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f042 0208 	orr.w	r2, r2, #8
 800c4c6:	619a      	str	r2, [r3, #24]
}
 800c4c8:	bf00      	nop
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4e6:	2b22      	cmp	r3, #34	; 0x22
 800c4e8:	d13b      	bne.n	800c562 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c4f8:	89ba      	ldrh	r2, [r7, #12]
 800c4fa:	89fb      	ldrh	r3, [r7, #14]
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c508:	1c9a      	adds	r2, r3, #2
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c514:	b29b      	uxth	r3, r3
 800c516:	3b01      	subs	r3, #1
 800c518:	b29a      	uxth	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c526:	b29b      	uxth	r3, r3
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d122      	bne.n	800c572 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c53a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	689a      	ldr	r2, [r3, #8]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f022 0201 	bic.w	r2, r2, #1
 800c54a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2220      	movs	r2, #32
 800c550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f7f4 f8f4 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c560:	e007      	b.n	800c572 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	699a      	ldr	r2, [r3, #24]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f042 0208 	orr.w	r2, r2, #8
 800c570:	619a      	str	r2, [r3, #24]
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c58a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c592:	2b22      	cmp	r3, #34	; 0x22
 800c594:	d166      	bne.n	800c664 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c59c:	81fb      	strh	r3, [r7, #14]
 800c59e:	e03d      	b.n	800c61c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c5a8:	893b      	ldrh	r3, [r7, #8]
 800c5aa:	b2d9      	uxtb	r1, r3
 800c5ac:	89bb      	ldrh	r3, [r7, #12]
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b4:	400a      	ands	r2, r1
 800c5b6:	b2d2      	uxtb	r2, r2
 800c5b8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d119      	bne.n	800c616 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5f0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6899      	ldr	r1, [r3, #8]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	4b1f      	ldr	r3, [pc, #124]	; (800c67c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c5fe:	400b      	ands	r3, r1
 800c600:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2220      	movs	r2, #32
 800c606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7f4 f899 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c616:	89fb      	ldrh	r3, [r7, #14]
 800c618:	3b01      	subs	r3, #1
 800c61a:	81fb      	strh	r3, [r7, #14]
 800c61c:	89fb      	ldrh	r3, [r7, #14]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1be      	bne.n	800c5a0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c628:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c62a:	897b      	ldrh	r3, [r7, #10]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d021      	beq.n	800c674 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c636:	897a      	ldrh	r2, [r7, #10]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d21b      	bcs.n	800c674 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	689a      	ldr	r2, [r3, #8]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c64a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a0c      	ldr	r2, [pc, #48]	; (800c680 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c650:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f042 0220 	orr.w	r2, r2, #32
 800c660:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c662:	e007      	b.n	800c674 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	699a      	ldr	r2, [r3, #24]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f042 0208 	orr.w	r2, r2, #8
 800c672:	619a      	str	r2, [r3, #24]
}
 800c674:	bf00      	nop
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	effffffe 	.word	0xeffffffe
 800c680:	0800c427 	.word	0x0800c427

0800c684 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c692:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c69a:	2b22      	cmp	r3, #34	; 0x22
 800c69c:	d166      	bne.n	800c76c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6a4:	82fb      	strh	r3, [r7, #22]
 800c6a6:	e03d      	b.n	800c724 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ae:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c6b6:	8a3a      	ldrh	r2, [r7, #16]
 800c6b8:	8abb      	ldrh	r3, [r7, #20]
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6c6:	1c9a      	adds	r2, r3, #2
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d119      	bne.n	800c71e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6f8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6899      	ldr	r1, [r3, #8]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	4b1f      	ldr	r3, [pc, #124]	; (800c784 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c706:	400b      	ands	r3, r1
 800c708:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2220      	movs	r2, #32
 800c70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7f4 f815 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c71e:	8afb      	ldrh	r3, [r7, #22]
 800c720:	3b01      	subs	r3, #1
 800c722:	82fb      	strh	r3, [r7, #22]
 800c724:	8afb      	ldrh	r3, [r7, #22]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1be      	bne.n	800c6a8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c730:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c732:	8a7b      	ldrh	r3, [r7, #18]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d021      	beq.n	800c77c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c73e:	8a7a      	ldrh	r2, [r7, #18]
 800c740:	429a      	cmp	r2, r3
 800c742:	d21b      	bcs.n	800c77c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689a      	ldr	r2, [r3, #8]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c752:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a0c      	ldr	r2, [pc, #48]	; (800c788 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c758:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f042 0220 	orr.w	r2, r2, #32
 800c768:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c76a:	e007      	b.n	800c77c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	699a      	ldr	r2, [r3, #24]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f042 0208 	orr.w	r2, r2, #8
 800c77a:	619a      	str	r2, [r3, #24]
}
 800c77c:	bf00      	nop
 800c77e:	3718      	adds	r7, #24
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	effffffe 	.word	0xeffffffe
 800c788:	0800c4d1 	.word	0x0800c4d1

0800c78c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c794:	bf00      	nop
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d101      	bne.n	800c7de <HAL_UARTEx_DisableFifoMode+0x16>
 800c7da:	2302      	movs	r3, #2
 800c7dc:	e027      	b.n	800c82e <HAL_UARTEx_DisableFifoMode+0x66>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2224      	movs	r2, #36	; 0x24
 800c7ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f022 0201 	bic.w	r2, r2, #1
 800c804:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c80c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2220      	movs	r2, #32
 800c820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b084      	sub	sp, #16
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d101      	bne.n	800c852 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c84e:	2302      	movs	r3, #2
 800c850:	e02d      	b.n	800c8ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2224      	movs	r2, #36	; 0x24
 800c85e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f022 0201 	bic.w	r2, r2, #1
 800c878:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	683a      	ldr	r2, [r7, #0]
 800c88a:	430a      	orrs	r2, r1
 800c88c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f850 	bl	800c934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2220      	movs	r2, #32
 800c8a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d101      	bne.n	800c8ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	e02d      	b.n	800c92a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2224      	movs	r2, #36	; 0x24
 800c8da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f022 0201 	bic.w	r2, r2, #1
 800c8f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	430a      	orrs	r2, r1
 800c908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f812 	bl	800c934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2220      	movs	r2, #32
 800c91c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
	...

0800c934 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c934:	b480      	push	{r7}
 800c936:	b089      	sub	sp, #36	; 0x24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c93c:	4a2f      	ldr	r2, [pc, #188]	; (800c9fc <UARTEx_SetNbDataToProcess+0xc8>)
 800c93e:	f107 0314 	add.w	r3, r7, #20
 800c942:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c946:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c94a:	4a2d      	ldr	r2, [pc, #180]	; (800ca00 <UARTEx_SetNbDataToProcess+0xcc>)
 800c94c:	f107 030c 	add.w	r3, r7, #12
 800c950:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c954:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d108      	bne.n	800c972 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c970:	e03d      	b.n	800c9ee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c972:	2308      	movs	r3, #8
 800c974:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c976:	2308      	movs	r3, #8
 800c978:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	0e5b      	lsrs	r3, r3, #25
 800c982:	b2db      	uxtb	r3, r3
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	0f5b      	lsrs	r3, r3, #29
 800c992:	b2db      	uxtb	r3, r3
 800c994:	f003 0307 	and.w	r3, r3, #7
 800c998:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c99a:	7fbb      	ldrb	r3, [r7, #30]
 800c99c:	7f3a      	ldrb	r2, [r7, #28]
 800c99e:	f107 0120 	add.w	r1, r7, #32
 800c9a2:	440a      	add	r2, r1
 800c9a4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c9a8:	fb02 f303 	mul.w	r3, r2, r3
 800c9ac:	7f3a      	ldrb	r2, [r7, #28]
 800c9ae:	f107 0120 	add.w	r1, r7, #32
 800c9b2:	440a      	add	r2, r1
 800c9b4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c9b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c9c4:	7ffb      	ldrb	r3, [r7, #31]
 800c9c6:	7f7a      	ldrb	r2, [r7, #29]
 800c9c8:	f107 0120 	add.w	r1, r7, #32
 800c9cc:	440a      	add	r2, r1
 800c9ce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c9d2:	fb02 f303 	mul.w	r3, r2, r3
 800c9d6:	7f7a      	ldrb	r2, [r7, #29]
 800c9d8:	f107 0120 	add.w	r1, r7, #32
 800c9dc:	440a      	add	r2, r1
 800c9de:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c9e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c9ee:	bf00      	nop
 800c9f0:	3724      	adds	r7, #36	; 0x24
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	0800ca74 	.word	0x0800ca74
 800ca00:	0800ca7c 	.word	0x0800ca7c

0800ca04 <__libc_init_array>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	4e0d      	ldr	r6, [pc, #52]	; (800ca3c <__libc_init_array+0x38>)
 800ca08:	4c0d      	ldr	r4, [pc, #52]	; (800ca40 <__libc_init_array+0x3c>)
 800ca0a:	1ba4      	subs	r4, r4, r6
 800ca0c:	10a4      	asrs	r4, r4, #2
 800ca0e:	2500      	movs	r5, #0
 800ca10:	42a5      	cmp	r5, r4
 800ca12:	d109      	bne.n	800ca28 <__libc_init_array+0x24>
 800ca14:	4e0b      	ldr	r6, [pc, #44]	; (800ca44 <__libc_init_array+0x40>)
 800ca16:	4c0c      	ldr	r4, [pc, #48]	; (800ca48 <__libc_init_array+0x44>)
 800ca18:	f000 f820 	bl	800ca5c <_init>
 800ca1c:	1ba4      	subs	r4, r4, r6
 800ca1e:	10a4      	asrs	r4, r4, #2
 800ca20:	2500      	movs	r5, #0
 800ca22:	42a5      	cmp	r5, r4
 800ca24:	d105      	bne.n	800ca32 <__libc_init_array+0x2e>
 800ca26:	bd70      	pop	{r4, r5, r6, pc}
 800ca28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca2c:	4798      	blx	r3
 800ca2e:	3501      	adds	r5, #1
 800ca30:	e7ee      	b.n	800ca10 <__libc_init_array+0xc>
 800ca32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca36:	4798      	blx	r3
 800ca38:	3501      	adds	r5, #1
 800ca3a:	e7f2      	b.n	800ca22 <__libc_init_array+0x1e>
 800ca3c:	0800caa4 	.word	0x0800caa4
 800ca40:	0800caa4 	.word	0x0800caa4
 800ca44:	0800caa4 	.word	0x0800caa4
 800ca48:	0800caa8 	.word	0x0800caa8

0800ca4c <memset>:
 800ca4c:	4402      	add	r2, r0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d100      	bne.n	800ca56 <memset+0xa>
 800ca54:	4770      	bx	lr
 800ca56:	f803 1b01 	strb.w	r1, [r3], #1
 800ca5a:	e7f9      	b.n	800ca50 <memset+0x4>

0800ca5c <_init>:
 800ca5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5e:	bf00      	nop
 800ca60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca62:	bc08      	pop	{r3}
 800ca64:	469e      	mov	lr, r3
 800ca66:	4770      	bx	lr

0800ca68 <_fini>:
 800ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6a:	bf00      	nop
 800ca6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6e:	bc08      	pop	{r3}
 800ca70:	469e      	mov	lr, r3
 800ca72:	4770      	bx	lr
