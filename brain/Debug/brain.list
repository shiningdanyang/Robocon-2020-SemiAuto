
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010574  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08010818  08010818  00020818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b40  08010b40  00030160  2**0
                  CONTENTS
  4 .ARM          00000008  08010b40  08010b40  00020b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b48  08010b48  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b48  08010b48  00020b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b4c  08010b4c  00020b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  24000000  08010b50  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c64  24000160  08010cb0  00030160  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000dc4  08010cb0  00030dc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224c1  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003458  00000000  00000000  0005264f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a8  00000000  00000000  00055aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  00057150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000392c1  00000000  00000000  000586d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132dc  00000000  00000000  00091999  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00175670  00000000  00000000  000a4c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021a2e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f0  00000000  00000000  0021a360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080107fc 	.word	0x080107fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	080107fc 	.word	0x080107fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <delayUs_Init+0x38>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10e      	bne.n	80006ae <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delayUs_Init+0x38>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <delayUs_Init+0x38>)
 8000696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800069a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <delayUs_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <delayUs_Init+0x3c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <delayUs_Init+0x3c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
    }
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000edf0 	.word	0xe000edf0
 80006bc:	e0001000 	.word	0xe0001000

080006c0 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <delayUs+0x40>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <delayUs+0x44>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <delayUs+0x48>)
 80006d4:	fba2 2303 	umull	r2, r3, r2, r3
 80006d8:	0c9a      	lsrs	r2, r3, #18
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	fb02 f303 	mul.w	r3, r2, r3
 80006e0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80006e2:	bf00      	nop
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <delayUs+0x40>)
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d8f8      	bhi.n	80006e4 <delayUs+0x24>
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0001000 	.word	0xe0001000
 8000704:	240000e8 	.word	0x240000e8
 8000708:	431bde83 	.word	0x431bde83

0800070c <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <peripheralUART_Init+0x50>)
 8000712:	22aa      	movs	r2, #170	; 0xaa
 8000714:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <peripheralUART_Init+0x50>)
 8000718:	22aa      	movs	r2, #170	; 0xaa
 800071a:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <peripheralUART_Init+0x50>)
 800071e:	22aa      	movs	r2, #170	; 0xaa
 8000720:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <peripheralUART_Init+0x50>)
 8000724:	22aa      	movs	r2, #170	; 0xaa
 8000726:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <peripheralUART_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	490b      	ldr	r1, [pc, #44]	; (8000760 <peripheralUART_Init+0x54>)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <peripheralUART_Init+0x58>)
 8000734:	f00b f934 	bl	800b9a0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	490b      	ldr	r1, [pc, #44]	; (8000768 <peripheralUART_Init+0x5c>)
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <peripheralUART_Init+0x60>)
 800073e:	f00b fa07 	bl	800bb50 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000742:	2202      	movs	r2, #2
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <peripheralUART_Init+0x64>)
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <peripheralUART_Init+0x68>)
 8000748:	f00b fa02 	bl	800bb50 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&zmanual, zmanualRxPacket, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	490a      	ldr	r1, [pc, #40]	; (8000778 <peripheralUART_Init+0x6c>)
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <peripheralUART_Init+0x70>)
 8000752:	f00b f9fd 	bl	800bb50 <HAL_UART_Receive_DMA>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000014 	.word	0x24000014
 8000760:	24000cc0 	.word	0x24000cc0
 8000764:	24000bf4 	.word	0x24000bf4
 8000768:	24000c80 	.word	0x24000c80
 800076c:	24000364 	.word	0x24000364
 8000770:	24000828 	.word	0x24000828
 8000774:	24000ae0 	.word	0x24000ae0
 8000778:	240008f8 	.word	0x240008f8
 800077c:	2400020c 	.word	0x2400020c

08000780 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_TxCpltCallback+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d103      	bne.n	800079c <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_UART_TxCpltCallback+0x68>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 800079a:	e01c      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_UART_TxCpltCallback+0x6c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d103      	bne.n	80007b0 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_TxCpltCallback+0x70>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
}
 80007ae:	e012      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_UART_TxCpltCallback+0x74>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d103      	bne.n	80007c4 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_UART_TxCpltCallback+0x78>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	e008      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_UART_TxCpltCallback+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d102      	bne.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_UART_TxCpltCallback+0x80>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	24000ae0 	.word	0x24000ae0
 80007e8:	240003fe 	.word	0x240003fe
 80007ec:	24000364 	.word	0x24000364
 80007f0:	24000bd2 	.word	0x24000bd2
 80007f4:	24000bf4 	.word	0x24000bf4
 80007f8:	24000910 	.word	0x24000910
 80007fc:	2400020c 	.word	0x2400020c
 8000800:	240002c0 	.word	0x240002c0

08000804 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_UART_RxCpltCallback+0x7c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d103      	bne.n	8000820 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_UART_RxCpltCallback+0x80>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 800081e:	e02b      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_RxCpltCallback+0x84>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d103      	bne.n	8000834 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_UART_RxCpltCallback+0x88>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	e021      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d112      	bne.n	8000866 <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_RxCpltCallback+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b74      	cmp	r3, #116	; 0x74
 8000846:	d105      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2209      	movs	r2, #9
 800084c:	4912      	ldr	r1, [pc, #72]	; (8000898 <HAL_UART_RxCpltCallback+0x94>)
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 8000850:	f00a ff8c 	bl	800b76c <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_RxCpltCallback+0x98>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	490d      	ldr	r1, [pc, #52]	; (8000894 <HAL_UART_RxCpltCallback+0x90>)
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 8000860:	f00b f89e 	bl	800b9a0 <HAL_UART_Receive_IT>
}
 8000864:	e008      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_UART_RxCpltCallback+0x9c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d102      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000ae0 	.word	0x24000ae0
 8000884:	240001ca 	.word	0x240001ca
 8000888:	24000364 	.word	0x24000364
 800088c:	24000bd2 	.word	0x24000bd2
 8000890:	24000bf4 	.word	0x24000bf4
 8000894:	24000cc0 	.word	0x24000cc0
 8000898:	24000014 	.word	0x24000014
 800089c:	24000d48 	.word	0x24000d48
 80008a0:	2400020c 	.word	0x2400020c
 80008a4:	24000bd8 	.word	0x24000bd8

080008a8 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <compassReset+0x24>)
 80008ae:	2261      	movs	r2, #97	; 0x61
 80008b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	4905      	ldr	r1, [pc, #20]	; (80008cc <compassReset+0x24>)
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <compassReset+0x28>)
 80008b8:	f00a ffee 	bl	800b898 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 80008bc:	f000 f818 	bl	80008f0 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <compassReset+0x24>)
 80008c2:	227a      	movs	r2, #122	; 0x7a
 80008c4:	701a      	strb	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	24000000 	.word	0x24000000
 80008d0:	24000ae0 	.word	0x24000ae0

080008d4 <compassRequest>:
void compassRequest(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	4903      	ldr	r1, [pc, #12]	; (80008e8 <compassRequest+0x14>)
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <compassRequest+0x18>)
 80008de:	f00a ffdb 	bl	800b898 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	24000000 	.word	0x24000000
 80008ec:	24000ae0 	.word	0x24000ae0

080008f0 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 80008f4:	bf00      	nop
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <wait4CompassTx+0x20>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0fb      	beq.n	80008f6 <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <wait4CompassTx+0x20>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	240003fe 	.word	0x240003fe

08000914 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 8000918:	2209      	movs	r2, #9
 800091a:	4904      	ldr	r1, [pc, #16]	; (800092c <spinalCordTrans+0x18>)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <spinalCordTrans+0x1c>)
 800091e:	f00a ffbb 	bl	800b898 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000922:	f000 f807 	bl	8000934 <wait4SpinalCordTx>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	24000014 	.word	0x24000014
 8000930:	24000bf4 	.word	0x24000bf4

08000934 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 8000938:	bf00      	nop
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <wait4SpinalCordTx+0x20>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0fb      	beq.n	800093a <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <wait4SpinalCordTx+0x20>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	24000910 	.word	0x24000910

08000958 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e01f      	b.n	80009a8 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000974:	2b00      	cmp	r3, #0
 8000976:	d005      	beq.n	8000984 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000978:	2201      	movs	r2, #1
 800097a:	2120      	movs	r1, #32
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <SendByteSPI+0x60>)
 800097e:	f007 fd49 	bl	8008414 <HAL_GPIO_WritePin>
 8000982:	e004      	b.n	800098e <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8000984:	2200      	movs	r2, #0
 8000986:	2120      	movs	r1, #32
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <SendByteSPI+0x60>)
 800098a:	f007 fd43 	bl	8008414 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <SendByteSPI+0x60>)
 8000994:	f007 fd3e 	bl	8008414 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000998:	2201      	movs	r2, #1
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <SendByteSPI+0x60>)
 800099e:	f007 fd39 	bl	8008414 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b07      	cmp	r3, #7
 80009ac:	dddc      	ble.n	8000968 <SendByteSPI+0x10>

	}
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	58021800 	.word	0x58021800

080009bc <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	480f      	ldr	r0, [pc, #60]	; (8000a0c <ST7920_SendCmd+0x50>)
 80009ce:	f007 fd21 	bl	8008414 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 80009d2:	20f8      	movs	r0, #248	; 0xf8
 80009d4:	f7ff ffc0 	bl	8000958 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f023 030f 	bic.w	r3, r3, #15
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffb9 	bl	8000958 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffb3 	bl	8000958 <SendByteSPI>
	delayUs(50);
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f7ff fe64 	bl	80006c0 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <ST7920_SendCmd+0x50>)
 8000a00:	f007 fd08 	bl	8008414 <HAL_GPIO_WritePin>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58021800 	.word	0x58021800

08000a10 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <ST7920_SendData+0x50>)
 8000a22:	f007 fcf7 	bl	8008414 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000a26:	20fa      	movs	r0, #250	; 0xfa
 8000a28:	f7ff ff96 	bl	8000958 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f023 030f 	bic.w	r3, r3, #15
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff8f 	bl	8000958 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff89 	bl	8000958 <SendByteSPI>
	delayUs(50);
 8000a46:	2032      	movs	r0, #50	; 0x32
 8000a48:	f7ff fe3a 	bl	80006c0 <delayUs>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <ST7920_SendData+0x50>)
 8000a54:	f007 fcde 	bl	8008414 <HAL_GPIO_WritePin>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58021800 	.word	0x58021800

08000a64 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
    switch (row)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d81e      	bhi.n	8000ab4 <ST7920_SendString+0x50>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <ST7920_SendString+0x18>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000a8d 	.word	0x08000a8d
 8000a80:	08000a97 	.word	0x08000a97
 8000a84:	08000aa1 	.word	0x08000aa1
 8000a88:	08000aab 	.word	0x08000aab
    {
        case 0:
            col |= 0x80;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	60bb      	str	r3, [r7, #8]
            break;
 8000a94:	e013      	b.n	8000abe <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000a9c:	60bb      	str	r3, [r7, #8]
            break;
 8000a9e:	e00e      	b.n	8000abe <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000aa6:	60bb      	str	r3, [r7, #8]
            break;
 8000aa8:	e009      	b.n	8000abe <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8000ab0:	60bb      	str	r3, [r7, #8]
            break;
 8000ab2:	e004      	b.n	8000abe <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aba:	60bb      	str	r3, [r7, #8]
            break;
 8000abc:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff7a 	bl	80009bc <ST7920_SendCmd>

    while (*string)
 8000ac8:	e006      	b.n	8000ad8 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff9c 	bl	8000a10 <ST7920_SendData>
    while (*string)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f4      	bne.n	8000aca <ST7920_SendString+0x66>
    	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <ST7920_Clear>:
}



void ST7920_Clear()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <ST7920_Clear+0x8c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d134      	bne.n	8000b60 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	e02d      	b.n	8000b58 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b1f      	cmp	r3, #31
 8000b00:	d80a      	bhi.n	8000b18 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff56 	bl	80009bc <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	f7ff ff53 	bl	80009bc <ST7920_SendCmd>
 8000b16:	e00d      	b.n	8000b34 <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	3b20      	subs	r3, #32
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff47 	bl	80009bc <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000b2e:	2088      	movs	r0, #136	; 0x88
 8000b30:	f7ff ff44 	bl	80009bc <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	e008      	b.n	8000b4c <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff68 	bl	8000a10 <ST7920_SendData>
				ST7920_SendData(0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ff65 	bl	8000a10 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d9f3      	bls.n	8000b3a <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	3301      	adds	r3, #1
 8000b56:	71bb      	strb	r3, [r7, #6]
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5c:	d9ce      	bls.n	8000afc <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8000b5e:	e005      	b.n	8000b6c <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff2b 	bl	80009bc <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8000b66:	2002      	movs	r0, #2
 8000b68:	f003 f9a6 	bl	8003eb8 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2400017d 	.word	0x2400017d

08000b78 <ST7920_Init>:


void ST7920_Init (void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <ST7920_Init+0x7c>)
 8000b82:	f007 fc47 	bl	8008414 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000b86:	200a      	movs	r0, #10
 8000b88:	f003 f996 	bl	8003eb8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <ST7920_Init+0x7c>)
 8000b92:	f007 fc3f 	bl	8008414 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000b96:	2032      	movs	r0, #50	; 0x32
 8000b98:	f003 f98e 	bl	8003eb8 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000b9c:	2030      	movs	r0, #48	; 0x30
 8000b9e:	f7ff ff0d 	bl	80009bc <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000ba2:	206e      	movs	r0, #110	; 0x6e
 8000ba4:	f7ff fd8c 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000ba8:	2030      	movs	r0, #48	; 0x30
 8000baa:	f7ff ff07 	bl	80009bc <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000bae:	2028      	movs	r0, #40	; 0x28
 8000bb0:	f7ff fd86 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000bb4:	2008      	movs	r0, #8
 8000bb6:	f7ff ff01 	bl	80009bc <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000bba:	206e      	movs	r0, #110	; 0x6e
 8000bbc:	f7ff fd80 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fefb 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f003 f976 	bl	8003eb8 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f7ff fef5 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f003 f970 	bl	8003eb8 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f7ff feef 	bl	80009bc <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000bde:	2001      	movs	r0, #1
 8000be0:	f003 f96a 	bl	8003eb8 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000be4:	2002      	movs	r0, #2
 8000be6:	f7ff fee9 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000bea:	2001      	movs	r0, #1
 8000bec:	f003 f964 	bl	8003eb8 <HAL_Delay>

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58021800 	.word	0x58021800

08000bf8 <peripheralADC_Init>:
//uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
//uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	4903      	ldr	r1, [pc, #12]	; (8000c0c <peripheralADC_Init+0x14>)
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <peripheralADC_Init+0x18>)
 8000c02:	f003 fd19 	bl	8004638 <HAL_ADC_Start_DMA>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	24000cdc 	.word	0x24000cdc
 8000c10:	240009d0 	.word	0x240009d0

08000c14 <controlMotor1>:
#ifdef SPINAL_CORD_MODE_ONEWAY



void controlMotor1(int _speed)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2bfa      	cmp	r3, #250	; 0xfa
 8000c20:	dd02      	ble.n	8000c28 <controlMotor1+0x14>
		_speed = 250;
 8000c22:	23fa      	movs	r3, #250	; 0xfa
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e010      	b.n	8000c4a <controlMotor1+0x36>
	else if(_speed<-250)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000c2e:	da03      	bge.n	8000c38 <controlMotor1+0x24>
		_speed = -250;
 8000c30:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e008      	b.n	8000c4a <controlMotor1+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	dc05      	bgt.n	8000c4a <controlMotor1+0x36>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f113 0f02 	cmn.w	r3, #2
 8000c44:	db01      	blt.n	8000c4a <controlMotor1+0x36>
		_speed = 3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bfb8      	it	lt
 8000c50:	425b      	neglt	r3, r3
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <controlMotor1+0x74>)
 8000c56:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db07      	blt.n	8000c6e <controlMotor1+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <controlMotor1+0x74>)
 8000c60:	7a1b      	ldrb	r3, [r3, #8]
 8000c62:	f023 0301 	bic.w	r3, r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <controlMotor1+0x74>)
 8000c6a:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 8000c6c:	e006      	b.n	8000c7c <controlMotor1+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <controlMotor1+0x74>)
 8000c70:	7a1b      	ldrb	r3, [r3, #8]
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <controlMotor1+0x74>)
 8000c7a:	721a      	strb	r2, [r3, #8]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	24000014 	.word	0x24000014

08000c8c <controlMotor2>:
void controlMotor2(int _speed)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2bfa      	cmp	r3, #250	; 0xfa
 8000c98:	dd02      	ble.n	8000ca0 <controlMotor2+0x14>
		_speed = 250;
 8000c9a:	23fa      	movs	r3, #250	; 0xfa
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	e010      	b.n	8000cc2 <controlMotor2+0x36>
	else if(_speed<-250)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000ca6:	da03      	bge.n	8000cb0 <controlMotor2+0x24>
		_speed = -250;
 8000ca8:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	e008      	b.n	8000cc2 <controlMotor2+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	dc05      	bgt.n	8000cc2 <controlMotor2+0x36>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f113 0f02 	cmn.w	r3, #2
 8000cbc:	db01      	blt.n	8000cc2 <controlMotor2+0x36>
		_speed = 3;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bfb8      	it	lt
 8000cc8:	425b      	neglt	r3, r3
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <controlMotor2+0x74>)
 8000cce:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db07      	blt.n	8000ce6 <controlMotor2+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <controlMotor2+0x74>)
 8000cd8:	7a1b      	ldrb	r3, [r3, #8]
 8000cda:	f023 0302 	bic.w	r3, r3, #2
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <controlMotor2+0x74>)
 8000ce2:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 8000ce4:	e006      	b.n	8000cf4 <controlMotor2+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <controlMotor2+0x74>)
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <controlMotor2+0x74>)
 8000cf2:	721a      	strb	r2, [r3, #8]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	24000014 	.word	0x24000014

08000d04 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2bfa      	cmp	r3, #250	; 0xfa
 8000d10:	dd02      	ble.n	8000d18 <controlMotor3+0x14>
		_speed = 250;
 8000d12:	23fa      	movs	r3, #250	; 0xfa
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e010      	b.n	8000d3a <controlMotor3+0x36>
	else if(_speed<-250)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000d1e:	da03      	bge.n	8000d28 <controlMotor3+0x24>
		_speed = -250;
 8000d20:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	e008      	b.n	8000d3a <controlMotor3+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dc05      	bgt.n	8000d3a <controlMotor3+0x36>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f113 0f02 	cmn.w	r3, #2
 8000d34:	db01      	blt.n	8000d3a <controlMotor3+0x36>
		_speed = 3;
 8000d36:	2303      	movs	r3, #3
 8000d38:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bfb8      	it	lt
 8000d40:	425b      	neglt	r3, r3
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <controlMotor3+0x74>)
 8000d46:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db07      	blt.n	8000d5e <controlMotor3+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <controlMotor3+0x74>)
 8000d50:	7a1b      	ldrb	r3, [r3, #8]
 8000d52:	f023 0304 	bic.w	r3, r3, #4
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <controlMotor3+0x74>)
 8000d5a:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 8000d5c:	e006      	b.n	8000d6c <controlMotor3+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <controlMotor3+0x74>)
 8000d60:	7a1b      	ldrb	r3, [r3, #8]
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <controlMotor3+0x74>)
 8000d6a:	721a      	strb	r2, [r3, #8]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	24000014 	.word	0x24000014

08000d7c <controlMotor4>:
void controlMotor4(int _speed)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2bfa      	cmp	r3, #250	; 0xfa
 8000d88:	dd02      	ble.n	8000d90 <controlMotor4+0x14>
		_speed = 250;
 8000d8a:	23fa      	movs	r3, #250	; 0xfa
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	e010      	b.n	8000db2 <controlMotor4+0x36>
	else if(_speed<-250)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000d96:	da03      	bge.n	8000da0 <controlMotor4+0x24>
		_speed = -250;
 8000d98:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	e008      	b.n	8000db2 <controlMotor4+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	dc05      	bgt.n	8000db2 <controlMotor4+0x36>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f113 0f02 	cmn.w	r3, #2
 8000dac:	db01      	blt.n	8000db2 <controlMotor4+0x36>
		_speed = 3;
 8000dae:	2303      	movs	r3, #3
 8000db0:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bfb8      	it	lt
 8000db8:	425b      	neglt	r3, r3
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <controlMotor4+0x74>)
 8000dbe:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db07      	blt.n	8000dd6 <controlMotor4+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <controlMotor4+0x74>)
 8000dc8:	7a1b      	ldrb	r3, [r3, #8]
 8000dca:	f023 0308 	bic.w	r3, r3, #8
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <controlMotor4+0x74>)
 8000dd2:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 8000dd4:	e006      	b.n	8000de4 <controlMotor4+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <controlMotor4+0x74>)
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <controlMotor4+0x74>)
 8000de2:	721a      	strb	r2, [r3, #8]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	24000014 	.word	0x24000014
 8000df4:	00000000 	.word	0x00000000

08000df8 <PIDyaw>:
  }
}
#endif

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <PIDyaw+0x120>)
 8000e12:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8000e14:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <PIDyaw+0x120>)
 8000e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <PIDyaw+0x124>)
 8000e24:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000e28:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <PIDyaw+0x120>)
 8000e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <PIDyaw+0x128>)
 8000e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e40:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <PIDyaw+0x12c>)
 8000e42:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <PIDyaw+0x120>)
 8000e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e54:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <PIDyaw+0x130>)
 8000e56:	ed93 7b00 	vldr	d7, [r3]
 8000e5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <PIDyaw+0x130>)
 8000e60:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 8000e64:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <PIDyaw+0x134>)
 8000e66:	ed93 6b00 	vldr	d6, [r3]
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <PIDyaw+0x124>)
 8000e6c:	ed93 7b00 	vldr	d7, [r3]
 8000e70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <PIDyaw+0x138>)
 8000e76:	ed93 5b00 	vldr	d5, [r3]
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <PIDyaw+0x12c>)
 8000e7c:	ed93 7b00 	vldr	d7, [r3]
 8000e80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <PIDyaw+0x13c>)
 8000e8a:	ed93 5b00 	vldr	d5, [r3]
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <PIDyaw+0x130>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <PIDyaw+0x140>)
 8000e9e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <PIDyaw+0x140>)
 8000ea4:	ed93 7b00 	vldr	d7, [r3]
 8000ea8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000f08 <PIDyaw+0x110>
 8000eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	dd05      	ble.n	8000ec2 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000eb6:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <PIDyaw+0x140>)
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	4c1f      	ldr	r4, [pc, #124]	; (8000f3c <PIDyaw+0x144>)
 8000ebe:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <PIDyaw+0x140>)
 8000ec4:	ed93 7b00 	vldr	d7, [r3]
 8000ec8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000f10 <PIDyaw+0x118>
 8000ecc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	d505      	bpl.n	8000ee2 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <PIDyaw+0x140>)
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	4c18      	ldr	r4, [pc, #96]	; (8000f40 <PIDyaw+0x148>)
 8000ede:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <PIDyaw+0x120>)
 8000ee4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <PIDyaw+0x128>)
 8000eea:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <PIDyaw+0x140>)
 8000eee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ef2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ef6:	eeb0 0b47 	vmov.f64	d0, d7
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc90      	pop	{r4, r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	405e0000 	.word	0x405e0000
 8000f10:	00000000 	.word	0x00000000
 8000f14:	c05e0000 	.word	0xc05e0000
 8000f18:	240008e8 	.word	0x240008e8
 8000f1c:	24000908 	.word	0x24000908
 8000f20:	24000360 	.word	0x24000360
 8000f24:	240001e8 	.word	0x240001e8
 8000f28:	240008e0 	.word	0x240008e0
 8000f2c:	24000028 	.word	0x24000028
 8000f30:	24000030 	.word	0x24000030
 8000f34:	24000038 	.word	0x24000038
 8000f38:	24000be8 	.word	0x24000be8
 8000f3c:	405e0000 	.word	0x405e0000
 8000f40:	c05e0000 	.word	0xc05e0000
 8000f44:	00000000 	.word	0x00000000

08000f48 <PIDroR>:

double PIDroR(int _roRValue, int _roRSetpoint)
{
 8000f48:	b490      	push	{r4, r7}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	roRError = _roRSetpoint - _roRValue;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <PIDroR+0x120>)
 8000f62:	801a      	strh	r2, [r3, #0]
	roRP = roRError;
 8000f64:	4b40      	ldr	r3, [pc, #256]	; (8001068 <PIDroR+0x120>)
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <PIDroR+0x124>)
 8000f74:	ed83 7b00 	vstr	d7, [r3]
	roRD = roRError - roRPreError;
 8000f78:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <PIDroR+0x120>)
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <PIDroR+0x128>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f90:	4b38      	ldr	r3, [pc, #224]	; (8001074 <PIDroR+0x12c>)
 8000f92:	ed83 7b00 	vstr	d7, [r3]
	roRI = roRError + roRI;
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <PIDroR+0x120>)
 8000f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <PIDroR+0x130>)
 8000fa6:	ed93 7b00 	vldr	d7, [r3]
 8000faa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <PIDroR+0x130>)
 8000fb0:	ed83 7b00 	vstr	d7, [r3]
	roRPID = roRKp*roRP + roRKd*roRD + roRKi*roRI;
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <PIDroR+0x134>)
 8000fb6:	ed93 6b00 	vldr	d6, [r3]
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <PIDroR+0x124>)
 8000fbc:	ed93 7b00 	vldr	d7, [r3]
 8000fc0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <PIDroR+0x138>)
 8000fc6:	ed93 5b00 	vldr	d5, [r3]
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <PIDroR+0x12c>)
 8000fcc:	ed93 7b00 	vldr	d7, [r3]
 8000fd0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fd4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <PIDroR+0x13c>)
 8000fda:	ed93 5b00 	vldr	d5, [r3]
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <PIDroR+0x130>)
 8000fe0:	ed93 7b00 	vldr	d7, [r3]
 8000fe4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fe8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <PIDroR+0x140>)
 8000fee:	ed83 7b00 	vstr	d7, [r3]
	if(roRPID > MAX_ROR_PID)
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <PIDroR+0x140>)
 8000ff4:	ed93 7b00 	vldr	d7, [r3]
 8000ff8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001058 <PIDroR+0x110>
 8000ffc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001004:	dd05      	ble.n	8001012 <PIDroR+0xca>
	{
		roRPID = MAX_ROR_PID;
 8001006:	4a20      	ldr	r2, [pc, #128]	; (8001088 <PIDroR+0x140>)
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	4c1f      	ldr	r4, [pc, #124]	; (800108c <PIDroR+0x144>)
 800100e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(roRPID < MIN_ROR_PID)
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <PIDroR+0x140>)
 8001014:	ed93 7b00 	vldr	d7, [r3]
 8001018:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001060 <PIDroR+0x118>
 800101c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	d505      	bpl.n	8001032 <PIDroR+0xea>
	{
		roRPID = MIN_ROR_PID;
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <PIDroR+0x140>)
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	4c18      	ldr	r4, [pc, #96]	; (8001090 <PIDroR+0x148>)
 800102e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	roRPreError = roRError;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <PIDroR+0x120>)
 8001034:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <PIDroR+0x128>)
 800103a:	801a      	strh	r2, [r3, #0]
	return roRPID;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <PIDroR+0x140>)
 800103e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001042:	ec44 3b17 	vmov	d7, r3, r4
}
 8001046:	eeb0 0b47 	vmov.f64	d0, d7
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bc90      	pop	{r4, r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	00000000 	.word	0x00000000
 800105c:	40590000 	.word	0x40590000
 8001060:	00000000 	.word	0x00000000
 8001064:	c0590000 	.word	0xc0590000
 8001068:	24000d58 	.word	0x24000d58
 800106c:	24000ad0 	.word	0x24000ad0
 8001070:	240001e0 	.word	0x240001e0
 8001074:	24000d40 	.word	0x24000d40
 8001078:	24000838 	.word	0x24000838
 800107c:	24000040 	.word	0x24000040
 8001080:	24000ca8 	.word	0x24000ca8
 8001084:	24000048 	.word	0x24000048
 8001088:	24000400 	.word	0x24000400
 800108c:	40590000 	.word	0x40590000
 8001090:	c0590000 	.word	0xc0590000
 8001094:	00000000 	.word	0x00000000

08001098 <PIDpit>:
	roLPreError = roLError;
	return roLPID;
}

double PIDpit(int _pitValue, int _pitSetpoint)
{
 8001098:	b490      	push	{r4, r7}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	pitError = _pitSetpoint - _pitValue;
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <PIDpit+0x108>)
 80010b2:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <PIDpit+0x108>)
 80010b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010bc:	4a39      	ldr	r2, [pc, #228]	; (80011a4 <PIDpit+0x10c>)
 80010be:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 80010c2:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <PIDpit+0x108>)
 80010c4:	ed93 6b00 	vldr	d6, [r3]
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <PIDpit+0x110>)
 80010ca:	ed93 7b00 	vldr	d7, [r3]
 80010ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <PIDpit+0x114>)
 80010d4:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <PIDpit+0x108>)
 80010da:	ed93 6b00 	vldr	d6, [r3]
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <PIDpit+0x118>)
 80010e0:	ed93 7b00 	vldr	d7, [r3]
 80010e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <PIDpit+0x118>)
 80010ea:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <PIDpit+0x11c>)
 80010f0:	ed93 6b00 	vldr	d6, [r3]
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <PIDpit+0x10c>)
 80010f6:	ed93 7b00 	vldr	d7, [r3]
 80010fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <PIDpit+0x120>)
 8001100:	ed93 5b00 	vldr	d5, [r3]
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <PIDpit+0x114>)
 8001106:	ed93 7b00 	vldr	d7, [r3]
 800110a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800110e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <PIDpit+0x124>)
 8001114:	ed93 5b00 	vldr	d5, [r3]
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <PIDpit+0x118>)
 800111a:	ed93 7b00 	vldr	d7, [r3]
 800111e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001122:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <PIDpit+0x128>)
 8001128:	ed83 7b00 	vstr	d7, [r3]
	if(pitPID > MAX_PIT_PID)
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <PIDpit+0x128>)
 800112e:	ed93 7b00 	vldr	d7, [r3]
 8001132:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001190 <PIDpit+0xf8>
 8001136:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	dd05      	ble.n	800114c <PIDpit+0xb4>
	{
		pitPID = MAX_PIT_PID;
 8001140:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <PIDpit+0x128>)
 8001142:	a413      	add	r4, pc, #76	; (adr r4, 8001190 <PIDpit+0xf8>)
 8001144:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001148:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(pitPID < MIN_PIT_PID)
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <PIDpit+0x128>)
 800114e:	ed93 7b00 	vldr	d7, [r3]
 8001152:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001198 <PIDpit+0x100>
 8001156:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d505      	bpl.n	800116c <PIDpit+0xd4>
	{
		pitPID = MIN_PIT_PID;
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <PIDpit+0x128>)
 8001162:	a40d      	add	r4, pc, #52	; (adr r4, 8001198 <PIDpit+0x100>)
 8001164:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001168:	e9c2 3400 	strd	r3, r4, [r2]
	}
	pitPreError = pitError;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <PIDpit+0x108>)
 800116e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001172:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <PIDpit+0x110>)
 8001174:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <PIDpit+0x128>)
 800117a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800117e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001182:	eeb0 0b47 	vmov.f64	d0, d7
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bc90      	pop	{r4, r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	406fe000 	.word	0x406fe000
 8001198:	00000000 	.word	0x00000000
 800119c:	c06fe000 	.word	0xc06fe000
 80011a0:	24000408 	.word	0x24000408
 80011a4:	24000ab8 	.word	0x24000ab8
 80011a8:	240001d8 	.word	0x240001d8
 80011ac:	240002c8 	.word	0x240002c8
 80011b0:	24000920 	.word	0x24000920
 80011b4:	24000050 	.word	0x24000050
 80011b8:	24000410 	.word	0x24000410
 80011bc:	24000058 	.word	0x24000058
 80011c0:	24000ba8 	.word	0x24000ba8
 80011c4:	00000000 	.word	0x00000000

080011c8 <roR_pit_yaw_mixSpeed>:
	controlMotor4(_motor4Speed);
	spinalCordTrans();
}

void roR_pit_yaw_mixSpeed(void)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b08d      	sub	sp, #52	; 0x34
 80011cc:	af00      	add	r7, sp, #0
	double _roR_pit_speed = sqrt(roRPID*roRPID + pitPID*pitPID);
 80011ce:	4b6a      	ldr	r3, [pc, #424]	; (8001378 <roR_pit_yaw_mixSpeed+0x1b0>)
 80011d0:	ed93 6b00 	vldr	d6, [r3]
 80011d4:	4b68      	ldr	r3, [pc, #416]	; (8001378 <roR_pit_yaw_mixSpeed+0x1b0>)
 80011d6:	ed93 7b00 	vldr	d7, [r3]
 80011da:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011de:	4b67      	ldr	r3, [pc, #412]	; (800137c <roR_pit_yaw_mixSpeed+0x1b4>)
 80011e0:	ed93 5b00 	vldr	d5, [r3]
 80011e4:	4b65      	ldr	r3, [pc, #404]	; (800137c <roR_pit_yaw_mixSpeed+0x1b4>)
 80011e6:	ed93 7b00 	vldr	d7, [r3]
 80011ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011f2:	eeb0 0b47 	vmov.f64	d0, d7
 80011f6:	f00e fb23 	bl	800f840 <sqrt>
 80011fa:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roR_pit_dir = atan2(-roRPID, pitPID);
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <roR_pit_yaw_mixSpeed+0x1b0>)
 8001200:	ed93 7b00 	vldr	d7, [r3]
 8001204:	eeb1 7b47 	vneg.f64	d7, d7
 8001208:	4b5c      	ldr	r3, [pc, #368]	; (800137c <roR_pit_yaw_mixSpeed+0x1b4>)
 800120a:	ed93 6b00 	vldr	d6, [r3]
 800120e:	eeb0 1b46 	vmov.f64	d1, d6
 8001212:	eeb0 0b47 	vmov.f64	d0, d7
 8001216:	f00e fb0f 	bl	800f838 <atan2>
 800121a:	ed87 0b08 	vstr	d0, [r7, #32]
//	double _motor1Speed = yawPID + -(_roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0);
//	double _motor2Speed = yawPID + -(_roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0);
//	double _motor3Speed = yawPID +   _roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0;
//	double _motor4Speed = yawPID +   _roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0;

	double _motor1Speed = yawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 - _roR_pit_dir) + 0.0);
 800121e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8001360 <roR_pit_yaw_mixSpeed+0x198>
 8001222:	ed97 7b08 	vldr	d7, [r7, #32]
 8001226:	ee36 7b47 	vsub.f64	d7, d6, d7
 800122a:	eeb0 0b47 	vmov.f64	d0, d7
 800122e:	f00e fac7 	bl	800f7c0 <cos>
 8001232:	eeb0 6b40 	vmov.f64	d6, d0
 8001236:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800123a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800123e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001368 <roR_pit_yaw_mixSpeed+0x1a0>
 8001242:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <roR_pit_yaw_mixSpeed+0x1b8>)
 8001248:	ed93 7b00 	vldr	d7, [r3]
 800124c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001250:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 + _roR_pit_dir) - 0.0);
 8001254:	ed97 7b08 	vldr	d7, [r7, #32]
 8001258:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001360 <roR_pit_yaw_mixSpeed+0x198>
 800125c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001260:	eeb0 0b47 	vmov.f64	d0, d7
 8001264:	f00e faac 	bl	800f7c0 <cos>
 8001268:	eeb0 6b40 	vmov.f64	d6, d0
 800126c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001270:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <roR_pit_yaw_mixSpeed+0x1b8>)
 8001276:	ed93 7b00 	vldr	d7, [r3]
 800127a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800127e:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID +  _roR_pit_speed *cos(    M_PI/4.0 + _roR_pit_dir) + 0.0;
 8001282:	ed97 7b08 	vldr	d7, [r7, #32]
 8001286:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001370 <roR_pit_yaw_mixSpeed+0x1a8>
 800128a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800128e:	eeb0 0b47 	vmov.f64	d0, d7
 8001292:	f00e fa95 	bl	800f7c0 <cos>
 8001296:	eeb0 6b40 	vmov.f64	d6, d0
 800129a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800129e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <roR_pit_yaw_mixSpeed+0x1b8>)
 80012a4:	ed93 7b00 	vldr	d7, [r3]
 80012a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012ac:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001368 <roR_pit_yaw_mixSpeed+0x1a0>
 80012b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012b4:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID +  _roR_pit_speed *cos(    M_PI/4.0 - _roR_pit_dir) - 0.0;
 80012b8:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001370 <roR_pit_yaw_mixSpeed+0x1a8>
 80012bc:	ed97 7b08 	vldr	d7, [r7, #32]
 80012c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012c4:	eeb0 0b47 	vmov.f64	d0, d7
 80012c8:	f00e fa7a 	bl	800f7c0 <cos>
 80012cc:	eeb0 6b40 	vmov.f64	d6, d0
 80012d0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80012d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <roR_pit_yaw_mixSpeed+0x1b8>)
 80012da:	ed93 7b00 	vldr	d7, [r3]
 80012de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012e2:	ed87 7b00 	vstr	d7, [r7]
//	b = 1.0 - _motor3Speed;
//	absSpeed = _roR_pit_speed;
//	dir = _roR_pit_dir;
//	cos_ = cos(3*M_PI/4 - _roR_pit_dir);
//	motor1_debug = absSpeed*cos_;
	motor1Speed_ = _motor1Speed;
 80012e6:	4a27      	ldr	r2, [pc, #156]	; (8001384 <roR_pit_yaw_mixSpeed+0x1bc>)
 80012e8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80012ec:	e9c2 3400 	strd	r3, r4, [r2]
	motor2Speed_ = _motor2Speed;
 80012f0:	4a25      	ldr	r2, [pc, #148]	; (8001388 <roR_pit_yaw_mixSpeed+0x1c0>)
 80012f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80012f6:	e9c2 3400 	strd	r3, r4, [r2]
	motor3Speed_ = _motor3Speed;
 80012fa:	4a24      	ldr	r2, [pc, #144]	; (800138c <roR_pit_yaw_mixSpeed+0x1c4>)
 80012fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001300:	e9c2 3400 	strd	r3, r4, [r2]
	motor4Speed_ = _motor4Speed;
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <roR_pit_yaw_mixSpeed+0x1c8>)
 8001306:	e9d7 3400 	ldrd	r3, r4, [r7]
 800130a:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 800130e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001312:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001316:	ee17 0a90 	vmov	r0, s15
 800131a:	f7ff fc7b 	bl	8000c14 <controlMotor1>
	controlMotor2(_motor2Speed);
 800131e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001322:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001326:	ee17 0a90 	vmov	r0, s15
 800132a:	f7ff fcaf 	bl	8000c8c <controlMotor2>
	controlMotor3(_motor3Speed);
 800132e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001332:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001336:	ee17 0a90 	vmov	r0, s15
 800133a:	f7ff fce3 	bl	8000d04 <controlMotor3>
	controlMotor4(_motor4Speed);
 800133e:	ed97 7b00 	vldr	d7, [r7]
 8001342:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001346:	ee17 0a90 	vmov	r0, s15
 800134a:	f7ff fd17 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 800134e:	f7ff fae1 	bl	8000914 <spinalCordTrans>
}
 8001352:	bf00      	nop
 8001354:	3734      	adds	r7, #52	; 0x34
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	7f3321d2 	.word	0x7f3321d2
 8001364:	4002d97c 	.word	0x4002d97c
	...
 8001370:	54442d18 	.word	0x54442d18
 8001374:	3fe921fb 	.word	0x3fe921fb
 8001378:	24000400 	.word	0x24000400
 800137c:	24000ba8 	.word	0x24000ba8
 8001380:	24000be8 	.word	0x24000be8
 8001384:	240001d0 	.word	0x240001d0
 8001388:	24000cb8 	.word	0x24000cb8
 800138c:	24000bb0 	.word	0x24000bb0
 8001390:	240008f0 	.word	0x240008f0

08001394 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff fc3b 	bl	8000c14 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 800139e:	f06f 0002 	mvn.w	r0, #2
 80013a2:	f7ff fc73 	bl	8000c8c <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f7ff fcac 	bl	8000d04 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 80013ac:	f06f 0002 	mvn.w	r0, #2
 80013b0:	f7ff fce4 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 80013b4:	f7ff faae 	bl	8000914 <spinalCordTrans>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <roR_Pit_Yaw_GoTo>:
	roL_pit_yaw_mixSpeed();
}


void roR_Pit_Yaw_GoTo(uint32_t posRoR, uint32_t posPit, uint32_t posYaw)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
	PIDyaw(compassData, posYaw);
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <roR_Pit_Yaw_GoTo+0x58>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4610      	mov	r0, r2
 80013d6:	f7ff fd0f 	bl	8000df8 <PIDyaw>
	PIDroR(rigtDistance, posRoR);
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <roR_Pit_Yaw_GoTo+0x5c>)
 80013dc:	ed93 7b00 	vldr	d7, [r3]
 80013e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4619      	mov	r1, r3
 80013e8:	ee17 0a90 	vmov	r0, s15
 80013ec:	f7ff fdac 	bl	8000f48 <PIDroR>
	PIDpit(pitchDistance, posPit);
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <roR_Pit_Yaw_GoTo+0x60>)
 80013f2:	ed93 7b00 	vldr	d7, [r3]
 80013f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	4619      	mov	r1, r3
 80013fe:	ee17 0a90 	vmov	r0, s15
 8001402:	f7ff fe49 	bl	8001098 <PIDpit>
	roR_pit_yaw_mixSpeed();
 8001406:	f7ff fedf 	bl	80011c8 <roR_pit_yaw_mixSpeed>
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	24000900 	.word	0x24000900
 8001418:	24000940 	.word	0x24000940
 800141c:	24000cd0 	.word	0x24000cd0

08001420 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <positionControl_Init+0x18>)
 8001426:	f009 fe9f 	bl	800b168 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <positionControl_Init+0x1c>)
 8001430:	f006 fff0 	bl	8008414 <HAL_GPIO_WritePin>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	24000ce4 	.word	0x24000ce4
 800143c:	58021000 	.word	0x58021000

08001440 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d16e      	bne.n	8001532 <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d16a      	bne.n	8001532 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d11e      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146a:	4837      	ldr	r0, [pc, #220]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800146c:	f006 ffd2 	bl	8008414 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001474:	4834      	ldr	r0, [pc, #208]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001476:	f006 ffe6 	bl	8008446 <HAL_GPIO_TogglePin>
				trackingLeg++;
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a32      	ldr	r2, [pc, #200]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001482:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a31      	ldr	r2, [pc, #196]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800148c:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2bc7      	cmp	r3, #199	; 0xc7
 8001494:	dd05      	ble.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d11f      	bne.n	80014ea <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b0:	4825      	ldr	r0, [pc, #148]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014b2:	f006 ffaf 	bl	8008414 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80014b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ba:	4823      	ldr	r0, [pc, #140]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014bc:	f006 ffc3 	bl	8008446 <HAL_GPIO_TogglePin>
				trackingLeg++;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a21      	ldr	r2, [pc, #132]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014c8:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014d2:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80014dc:	db05      	blt.n	80014ea <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d11f      	bne.n	8001532 <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f8:	4813      	ldr	r0, [pc, #76]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014fa:	f006 ff8b 	bl	8008414 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80014fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001502:	4811      	ldr	r0, [pc, #68]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001504:	f006 ff9f 	bl	8008446 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001510:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800151a:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001524:	db05      	blt.n	8001532 <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	24000ce4 	.word	0x24000ce4
 8001540:	24000b80 	.word	0x24000b80
 8001544:	24000c90 	.word	0x24000c90
 8001548:	58020c00 	.word	0x58020c00
 800154c:	24000b70 	.word	0x24000b70
 8001550:	24000bd4 	.word	0x24000bd4

08001554 <GetSector>:
void solveDT50_Left(uint16_t a1, uint16_t a2);
void solveDT50_Rigt(uint16_t a1, uint16_t a2);
void solveDT50_Pitch(uint16_t a1, uint16_t a2);

uint32_t GetSector(uint32_t Address)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]

  if(((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a50      	ldr	r2, [pc, #320]	; (80016a4 <GetSector+0x150>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d803      	bhi.n	8001570 <GetSector+0x1c>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800156e:	d207      	bcs.n	8001580 <GetSector+0x2c>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <GetSector+0x154>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d806      	bhi.n	8001586 <GetSector+0x32>
     ((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800157e:	d302      	bcc.n	8001586 <GetSector+0x32>
  {
    sector = FLASH_SECTOR_0;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e086      	b.n	8001694 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a48      	ldr	r2, [pc, #288]	; (80016ac <GetSector+0x158>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d803      	bhi.n	8001596 <GetSector+0x42>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <GetSector+0x150>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d807      	bhi.n	80015a6 <GetSector+0x52>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a45      	ldr	r2, [pc, #276]	; (80016b0 <GetSector+0x15c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d806      	bhi.n	80015ac <GetSector+0x58>
          ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a41      	ldr	r2, [pc, #260]	; (80016a8 <GetSector+0x154>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d902      	bls.n	80015ac <GetSector+0x58>
  {
    sector = FLASH_SECTOR_1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e073      	b.n	8001694 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a41      	ldr	r2, [pc, #260]	; (80016b4 <GetSector+0x160>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d803      	bhi.n	80015bc <GetSector+0x68>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <GetSector+0x158>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d807      	bhi.n	80015cc <GetSector+0x78>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a3e      	ldr	r2, [pc, #248]	; (80016b8 <GetSector+0x164>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d806      	bhi.n	80015d2 <GetSector+0x7e>
          ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a3a      	ldr	r2, [pc, #232]	; (80016b0 <GetSector+0x15c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d902      	bls.n	80015d2 <GetSector+0x7e>
  {
    sector = FLASH_SECTOR_2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e060      	b.n	8001694 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a39      	ldr	r2, [pc, #228]	; (80016bc <GetSector+0x168>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d803      	bhi.n	80015e2 <GetSector+0x8e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <GetSector+0x160>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d807      	bhi.n	80015f2 <GetSector+0x9e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a36      	ldr	r2, [pc, #216]	; (80016c0 <GetSector+0x16c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d806      	bhi.n	80015f8 <GetSector+0xa4>
          ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <GetSector+0x164>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d902      	bls.n	80015f8 <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
 80015f2:	2303      	movs	r3, #3
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e04d      	b.n	8001694 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a32      	ldr	r2, [pc, #200]	; (80016c4 <GetSector+0x170>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d803      	bhi.n	8001608 <GetSector+0xb4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <GetSector+0x168>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d807      	bhi.n	8001618 <GetSector+0xc4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a2f      	ldr	r2, [pc, #188]	; (80016c8 <GetSector+0x174>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d806      	bhi.n	800161e <GetSector+0xca>
          ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <GetSector+0x16c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d902      	bls.n	800161e <GetSector+0xca>
  {
    sector = FLASH_SECTOR_4;
 8001618:	2304      	movs	r3, #4
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e03a      	b.n	8001694 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <GetSector+0x178>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d803      	bhi.n	800162e <GetSector+0xda>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <GetSector+0x170>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d807      	bhi.n	800163e <GetSector+0xea>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <GetSector+0x17c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d806      	bhi.n	8001644 <GetSector+0xf0>
          ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <GetSector+0x174>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d902      	bls.n	8001644 <GetSector+0xf0>
  {
    sector = FLASH_SECTOR_5;
 800163e:	2305      	movs	r3, #5
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	e027      	b.n	8001694 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <GetSector+0x180>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d803      	bhi.n	8001654 <GetSector+0x100>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <GetSector+0x178>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d807      	bhi.n	8001664 <GetSector+0x110>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <GetSector+0x184>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d806      	bhi.n	800166a <GetSector+0x116>
          ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <GetSector+0x17c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d902      	bls.n	800166a <GetSector+0x116>
  {
    sector = FLASH_SECTOR_6;
 8001664:	2306      	movs	r3, #6
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e014      	b.n	8001694 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001670:	d203      	bcs.n	800167a <GetSector+0x126>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <GetSector+0x180>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d807      	bhi.n	800168a <GetSector+0x136>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <GetSector+0x188>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d806      	bhi.n	8001690 <GetSector+0x13c>
          ((Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <GetSector+0x184>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d902      	bls.n	8001690 <GetSector+0x13c>
  {
     sector = FLASH_SECTOR_7;
 800168a:	2307      	movs	r3, #7
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e001      	b.n	8001694 <GetSector+0x140>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 8001690:	2307      	movs	r3, #7
 8001692:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	0801ffff 	.word	0x0801ffff
 80016a8:	0811ffff 	.word	0x0811ffff
 80016ac:	0803ffff 	.word	0x0803ffff
 80016b0:	0813ffff 	.word	0x0813ffff
 80016b4:	0805ffff 	.word	0x0805ffff
 80016b8:	0815ffff 	.word	0x0815ffff
 80016bc:	0807ffff 	.word	0x0807ffff
 80016c0:	0817ffff 	.word	0x0817ffff
 80016c4:	0809ffff 	.word	0x0809ffff
 80016c8:	0819ffff 	.word	0x0819ffff
 80016cc:	080bffff 	.word	0x080bffff
 80016d0:	081bffff 	.word	0x081bffff
 80016d4:	080dffff 	.word	0x080dffff
 80016d8:	081dffff 	.word	0x081dffff
 80016dc:	081ffffe 	.word	0x081ffffe

080016e0 <writeFLASH>:

void writeFLASH()
{
 80016e0:	b598      	push	{r3, r4, r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	FlashWord[0] = (adcLeft_2000<<0)|(adcLeft_1000<<16);
 80016e4:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <writeFLASH+0x108>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b40      	ldr	r3, [pc, #256]	; (80017ec <writeFLASH+0x10c>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	4313      	orrs	r3, r2
 80016f2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80016f6:	4a3e      	ldr	r2, [pc, #248]	; (80017f0 <writeFLASH+0x110>)
 80016f8:	e9c2 3400 	strd	r3, r4, [r2]
	FlashWord[1] = (adcPitc_2000<<0)|(adcPitc_1000<<16);
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <writeFLASH+0x114>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <writeFLASH+0x118>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	4313      	orrs	r3, r2
 800170a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800170e:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <writeFLASH+0x110>)
 8001710:	e9c2 3402 	strd	r3, r4, [r2, #8]
	FlashWord[2] = (adcRigt_2000<<0)|(adcRigt_1000<<16);
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <writeFLASH+0x11c>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <writeFLASH+0x120>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	4313      	orrs	r3, r2
 8001722:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001726:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <writeFLASH+0x110>)
 8001728:	e9c2 3404 	strd	r3, r4, [r2, #16]
	FlashWord[3] = 0xFFFFFFFF;
 800172c:	4a30      	ldr	r2, [pc, #192]	; (80017f0 <writeFLASH+0x110>)
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	f04f 0400 	mov.w	r4, #0
 8001736:	e9c2 3406 	strd	r3, r4, [r2, #24]
//	FlashWord[0] = 0;
//	FlashWord[1] = 0;
//	FlashWord[2] = 0;

	HAL_FLASH_Unlock();
 800173a:	f006 fa31 	bl	8007ba0 <HAL_FLASH_Unlock>
	FirstSector = GetSector(FLASH_USER_START_ADDR);
 800173e:	4831      	ldr	r0, [pc, #196]	; (8001804 <writeFLASH+0x124>)
 8001740:	f7ff ff08 	bl	8001554 <GetSector>
 8001744:	4602      	mov	r2, r0
 8001746:	4b30      	ldr	r3, [pc, #192]	; (8001808 <writeFLASH+0x128>)
 8001748:	601a      	str	r2, [r3, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 800174a:	4830      	ldr	r0, [pc, #192]	; (800180c <writeFLASH+0x12c>)
 800174c:	f7ff ff02 	bl	8001554 <GetSector>
 8001750:	4602      	mov	r2, r0
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <writeFLASH+0x128>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	3301      	adds	r3, #1
 800175a:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <writeFLASH+0x130>)
 800175c:	6013      	str	r3, [r2, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <writeFLASH+0x134>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <writeFLASH+0x134>)
 8001766:	2220      	movs	r2, #32
 8001768:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks         = FLASH_BANK_2;
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <writeFLASH+0x134>)
 800176c:	2202      	movs	r2, #2
 800176e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector        = FirstSector;
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <writeFLASH+0x128>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a27      	ldr	r2, [pc, #156]	; (8001814 <writeFLASH+0x134>)
 8001776:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <writeFLASH+0x130>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <writeFLASH+0x134>)
 800177e:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001780:	4925      	ldr	r1, [pc, #148]	; (8001818 <writeFLASH+0x138>)
 8001782:	4824      	ldr	r0, [pc, #144]	; (8001814 <writeFLASH+0x134>)
 8001784:	f006 fb0c 	bl	8007da0 <HAL_FLASHEx_Erase>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <writeFLASH+0xbe>
	  user can call function 'HAL_FLASH_GetError()'
	*/
	/* Infinite loop */
		while (1)
		{
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800178e:	2102      	movs	r1, #2
 8001790:	4822      	ldr	r0, [pc, #136]	; (800181c <writeFLASH+0x13c>)
 8001792:	f006 fe58 	bl	8008446 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001796:	2064      	movs	r0, #100	; 0x64
 8001798:	f002 fb8e 	bl	8003eb8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800179c:	e7f7      	b.n	800178e <writeFLASH+0xae>
		}
	}

	Address = FLASH_USER_START_ADDR;
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <writeFLASH+0x140>)
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <writeFLASH+0x124>)
 80017a2:	601a      	str	r2, [r3, #0]

	while (Address < FLASH_USER_END_ADDR)
 80017a4:	e017      	b.n	80017d6 <writeFLASH+0xf6>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)FlashWord)) == HAL_OK)
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <writeFLASH+0x140>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <writeFLASH+0x110>)
 80017ac:	4619      	mov	r1, r3
 80017ae:	2001      	movs	r0, #1
 80017b0:	f006 f974 	bl	8007a9c <HAL_FLASH_Program>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <writeFLASH+0xe6>
		{
			Address = Address + 32; /* increment for the next Flash word*/
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <writeFLASH+0x140>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3320      	adds	r3, #32
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <writeFLASH+0x140>)
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e007      	b.n	80017d6 <writeFLASH+0xf6>
		{
		  /* Error occurred while writing data in Flash memory.
			 User can add here some code to deal with this error */
		  while (1)
		  {
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80017c6:	2102      	movs	r1, #2
 80017c8:	4814      	ldr	r0, [pc, #80]	; (800181c <writeFLASH+0x13c>)
 80017ca:	f006 fe3c 	bl	8008446 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80017ce:	2064      	movs	r0, #100	; 0x64
 80017d0:	f002 fb72 	bl	8003eb8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80017d4:	e7f7      	b.n	80017c6 <writeFLASH+0xe6>
	while (Address < FLASH_USER_END_ADDR)
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <writeFLASH+0x140>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <writeFLASH+0x144>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d9e2      	bls.n	80017a6 <writeFLASH+0xc6>
		  }
		}
	}
	HAL_FLASH_Lock();
 80017e0:	f006 fa18 	bl	8007c14 <HAL_FLASH_Lock>
}
 80017e4:	bf00      	nop
 80017e6:	bd98      	pop	{r3, r4, r7, pc}
 80017e8:	24000072 	.word	0x24000072
 80017ec:	24000070 	.word	0x24000070
 80017f0:	24000298 	.word	0x24000298
 80017f4:	24000076 	.word	0x24000076
 80017f8:	24000074 	.word	0x24000074
 80017fc:	2400007a 	.word	0x2400007a
 8001800:	24000078 	.word	0x24000078
 8001804:	081e0000 	.word	0x081e0000
 8001808:	24000180 	.word	0x24000180
 800180c:	081ffffe 	.word	0x081ffffe
 8001810:	24000184 	.word	0x24000184
 8001814:	24000928 	.word	0x24000928
 8001818:	2400018c 	.word	0x2400018c
 800181c:	58021000 	.word	0x58021000
 8001820:	24000188 	.word	0x24000188
 8001824:	081ffffd 	.word	0x081ffffd

08001828 <readFLASH>:

void readFLASH()
{
 8001828:	b598      	push	{r3, r4, r7, lr}
 800182a:	af00      	add	r7, sp, #0
	Address = FLASH_USER_START_ADDR;
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <readFLASH+0xec>)
 800182e:	4a3a      	ldr	r2, [pc, #232]	; (8001918 <readFLASH+0xf0>)
 8001830:	601a      	str	r2, [r3, #0]
	MemoryProgramStatus = 0x0;
 8001832:	4b3a      	ldr	r3, [pc, #232]	; (800191c <readFLASH+0xf4>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

	DT50Left = *(uint64_t*) FLASH_USER_START_ADDR;
 8001838:	4b37      	ldr	r3, [pc, #220]	; (8001918 <readFLASH+0xf0>)
 800183a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800183e:	4a38      	ldr	r2, [pc, #224]	; (8001920 <readFLASH+0xf8>)
 8001840:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Left_2000 = (DT50Left>>0)&0xFFFF;
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <readFLASH+0xf8>)
 8001846:	e9d3 3400 	ldrd	r3, r4, [r3]
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <readFLASH+0xfc>)
 800184e:	801a      	strh	r2, [r3, #0]
	DT50Left_1000 = (DT50Left>>16)&0xFFFF;
 8001850:	4b33      	ldr	r3, [pc, #204]	; (8001920 <readFLASH+0xf8>)
 8001852:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	f04f 0400 	mov.w	r4, #0
 800185e:	0c0b      	lsrs	r3, r1, #16
 8001860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001864:	0c14      	lsrs	r4, r2, #16
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <readFLASH+0x100>)
 800186a:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800186c:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Pitc = *(uint64_t*) (FLASH_USER_START_ADDR+8);
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <readFLASH+0x104>)
 8001872:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001876:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <readFLASH+0x108>)
 8001878:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Pitc_2000 = (DT50Pitc>>0)&0xFFFF;
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <readFLASH+0x108>)
 800187e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <readFLASH+0x10c>)
 8001886:	801a      	strh	r2, [r3, #0]
	DT50Pitc_1000 = (DT50Pitc>>16)&0xFFFF;
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <readFLASH+0x108>)
 800188a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f04f 0400 	mov.w	r4, #0
 8001896:	0c0b      	lsrs	r3, r1, #16
 8001898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800189c:	0c14      	lsrs	r4, r2, #16
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <readFLASH+0x110>)
 80018a2:	801a      	strh	r2, [r3, #0]
 80018a4:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Rigt = *(uint64_t*) (FLASH_USER_START_ADDR+16);
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <readFLASH+0x114>)
 80018aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018ae:	4a24      	ldr	r2, [pc, #144]	; (8001940 <readFLASH+0x118>)
 80018b0:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Rigt_2000 = (DT50Rigt>>0)&0xFFFF;
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <readFLASH+0x118>)
 80018b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <readFLASH+0x11c>)
 80018be:	801a      	strh	r2, [r3, #0]
	DT50Rigt_1000 = (DT50Rigt>>16)&0xFFFF;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <readFLASH+0x118>)
 80018c2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f04f 0400 	mov.w	r4, #0
 80018ce:	0c0b      	lsrs	r3, r1, #16
 80018d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018d4:	0c14      	lsrs	r4, r2, #16
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <readFLASH+0x120>)
 80018da:	801a      	strh	r2, [r3, #0]
 80018dc:	f3bf 8f4f 	dsb	sy
	__DSB();

	solveDT50_Left(DT50Left_1000, DT50Left_2000);
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <readFLASH+0x100>)
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <readFLASH+0xfc>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f000 fa20 	bl	8001d30 <solveDT50_Left>
	solveDT50_Pitch(DT50Pitc_1000, DT50Pitc_2000);
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <readFLASH+0x110>)
 80018f2:	881a      	ldrh	r2, [r3, #0]
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <readFLASH+0x10c>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f000 fab4 	bl	8001e68 <solveDT50_Pitch>
	solveDT50_Rigt(DT50Rigt_1000, DT50Rigt_2000);
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <readFLASH+0x120>)
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <readFLASH+0x11c>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f000 fb48 	bl	8001fa0 <solveDT50_Rigt>
//		MemoryProgramStatus++;
//	  }
//	  Address +=8;
//		}
//	}
}
 8001910:	bf00      	nop
 8001912:	bd98      	pop	{r3, r4, r7, pc}
 8001914:	24000188 	.word	0x24000188
 8001918:	081e0000 	.word	0x081e0000
 800191c:	24000190 	.word	0x24000190
 8001920:	24000198 	.word	0x24000198
 8001924:	24000bf0 	.word	0x24000bf0
 8001928:	24000b86 	.word	0x24000b86
 800192c:	081e0008 	.word	0x081e0008
 8001930:	240001a0 	.word	0x240001a0
 8001934:	24000840 	.word	0x24000840
 8001938:	24000cce 	.word	0x24000cce
 800193c:	081e0010 	.word	0x081e0010
 8001940:	240001a8 	.word	0x240001a8
 8001944:	2400081c 	.word	0x2400081c
 8001948:	24000858 	.word	0x24000858

0800194c <getSample>:
void getSample()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b096      	sub	sp, #88	; 0x58
 8001950:	af00      	add	r7, sp, #0
	int sumADC_Left, sumADC_Pitc, sumADC_Rigt;

	//lấy mẫu left 1000
	sumADC_Left = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	657b      	str	r3, [r7, #84]	; 0x54
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001956:	e014      	b.n	8001982 <getSample+0x36>
	{
		ST7920_SendString(0,4, "LEFT 1");
 8001958:	4aba      	ldr	r2, [pc, #744]	; (8001c44 <getSample+0x2f8>)
 800195a:	2104      	movs	r1, #4
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff f881 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2102      	movs	r1, #2
 8001966:	48b8      	ldr	r0, [pc, #736]	; (8001c48 <getSample+0x2fc>)
 8001968:	f006 fd54 	bl	8008414 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800196c:	2064      	movs	r0, #100	; 0x64
 800196e:	f002 faa3 	bl	8003eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	2102      	movs	r1, #2
 8001976:	48b4      	ldr	r0, [pc, #720]	; (8001c48 <getSample+0x2fc>)
 8001978:	f006 fd4c 	bl	8008414 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800197c:	2064      	movs	r0, #100	; 0x64
 800197e:	f002 fa9b 	bl	8003eb8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001986:	48b0      	ldr	r0, [pc, #704]	; (8001c48 <getSample+0x2fc>)
 8001988:	f006 fd2c 	bl	80083e4 <HAL_GPIO_ReadPin>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0e2      	beq.n	8001958 <getSample+0xc>
	}
	//đã gạt phải
	for(int i = 0; i < 100; ++i)
 8001992:	2300      	movs	r3, #0
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
 8001996:	e010      	b.n	80019ba <getSample+0x6e>
	{
		HAL_Delay(10);
 8001998:	200a      	movs	r0, #10
 800199a:	f002 fa8d 	bl	8003eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2102      	movs	r1, #2
 80019a2:	48a9      	ldr	r0, [pc, #676]	; (8001c48 <getSample+0x2fc>)
 80019a4:	f006 fd36 	bl	8008414 <HAL_GPIO_WritePin>
		sumADC_Left += adc3Value[_left];
 80019a8:	4ba8      	ldr	r3, [pc, #672]	; (8001c4c <getSample+0x300>)
 80019aa:	885b      	ldrh	r3, [r3, #2]
 80019ac:	461a      	mov	r2, r3
 80019ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b0:	4413      	add	r3, r2
 80019b2:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < 100; ++i)
 80019b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b6:	3301      	adds	r3, #1
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80019ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019bc:	2b63      	cmp	r3, #99	; 0x63
 80019be:	ddeb      	ble.n	8001998 <getSample+0x4c>
	}
	adcLeft_1000 = sumADC_Left/100;
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	4aa3      	ldr	r2, [pc, #652]	; (8001c50 <getSample+0x304>)
 80019c4:	fb82 1203 	smull	r1, r2, r2, r3
 80019c8:	1152      	asrs	r2, r2, #5
 80019ca:	17db      	asrs	r3, r3, #31
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4ba0      	ldr	r3, [pc, #640]	; (8001c54 <getSample+0x308>)
 80019d2:	801a      	strh	r2, [r3, #0]
	char snum_left1000[5];
	sprintf(snum_left1000, "%d", adcLeft_1000);
 80019d4:	4b9f      	ldr	r3, [pc, #636]	; (8001c54 <getSample+0x308>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019de:	499e      	ldr	r1, [pc, #632]	; (8001c58 <getSample+0x30c>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00d fae5 	bl	800efb0 <siprintf>
//	itoa(adcLeft_1000, snum_left1000, 5);
	ST7920_SendString(1,0, snum_left1000);
 80019e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ea:	461a      	mov	r2, r3
 80019ec:	2100      	movs	r1, #0
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff f838 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu left 2000
	sumADC_Left = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	657b      	str	r3, [r7, #84]	; 0x54
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 80019f8:	e009      	b.n	8001a0e <getSample+0xc2>
	{
		ST7920_SendString(0,4, "LEFT 2");
 80019fa:	4a98      	ldr	r2, [pc, #608]	; (8001c5c <getSample+0x310>)
 80019fc:	2104      	movs	r1, #4
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff f830 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2102      	movs	r1, #2
 8001a08:	488f      	ldr	r0, [pc, #572]	; (8001c48 <getSample+0x2fc>)
 8001a0a:	f006 fd03 	bl	8008414 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a12:	488d      	ldr	r0, [pc, #564]	; (8001c48 <getSample+0x2fc>)
 8001a14:	f006 fce6 	bl	80083e4 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d0ed      	beq.n	80019fa <getSample+0xae>
	}
	//đã gạt trái
	HAL_Delay(100);
 8001a1e:	2064      	movs	r0, #100	; 0x64
 8001a20:	f002 fa4a 	bl	8003eb8 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001a24:	2300      	movs	r3, #0
 8001a26:	647b      	str	r3, [r7, #68]	; 0x44
 8001a28:	e010      	b.n	8001a4c <getSample+0x100>
	{
		HAL_Delay(10);
 8001a2a:	200a      	movs	r0, #10
 8001a2c:	f002 fa44 	bl	8003eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	2102      	movs	r1, #2
 8001a34:	4884      	ldr	r0, [pc, #528]	; (8001c48 <getSample+0x2fc>)
 8001a36:	f006 fced 	bl	8008414 <HAL_GPIO_WritePin>
		sumADC_Left += adc3Value[_left];
 8001a3a:	4b84      	ldr	r3, [pc, #528]	; (8001c4c <getSample+0x300>)
 8001a3c:	885b      	ldrh	r3, [r3, #2]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	4413      	add	r3, r2
 8001a44:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < 100; ++i)
 8001a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a48:	3301      	adds	r3, #1
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4e:	2b63      	cmp	r3, #99	; 0x63
 8001a50:	ddeb      	ble.n	8001a2a <getSample+0xde>
	}
	adcLeft_2000 = sumADC_Left/100;
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	4a7e      	ldr	r2, [pc, #504]	; (8001c50 <getSample+0x304>)
 8001a56:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5a:	1152      	asrs	r2, r2, #5
 8001a5c:	17db      	asrs	r3, r3, #31
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <getSample+0x314>)
 8001a64:	801a      	strh	r2, [r3, #0]
	char snum_left2000[5];
	sprintf(snum_left2000, "%d", adcLeft_2000);
 8001a66:	4b7e      	ldr	r3, [pc, #504]	; (8001c60 <getSample+0x314>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	4979      	ldr	r1, [pc, #484]	; (8001c58 <getSample+0x30c>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00d fa9c 	bl	800efb0 <siprintf>
//	itoa(adcLeft_2000, snum_left2000, 5);
	ST7920_SendString(1,5, snum_left2000);
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2105      	movs	r1, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7fe ffef 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu pitc 1000
	sumADC_Pitc = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	653b      	str	r3, [r7, #80]	; 0x50
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001a8a:	e009      	b.n	8001aa0 <getSample+0x154>
	{
		ST7920_SendString(0,4, "PITC 1");
 8001a8c:	4a75      	ldr	r2, [pc, #468]	; (8001c64 <getSample+0x318>)
 8001a8e:	2104      	movs	r1, #4
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7fe ffe7 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2102      	movs	r1, #2
 8001a9a:	486b      	ldr	r0, [pc, #428]	; (8001c48 <getSample+0x2fc>)
 8001a9c:	f006 fcba 	bl	8008414 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa4:	4868      	ldr	r0, [pc, #416]	; (8001c48 <getSample+0x2fc>)
 8001aa6:	f006 fc9d 	bl	80083e4 <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ed      	beq.n	8001a8c <getSample+0x140>
	}
	//đã gạt phải
	HAL_Delay(100);
 8001ab0:	2064      	movs	r0, #100	; 0x64
 8001ab2:	f002 fa01 	bl	8003eb8 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8001aba:	e010      	b.n	8001ade <getSample+0x192>
	{
		HAL_Delay(10);
 8001abc:	200a      	movs	r0, #10
 8001abe:	f002 f9fb 	bl	8003eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	4860      	ldr	r0, [pc, #384]	; (8001c48 <getSample+0x2fc>)
 8001ac8:	f006 fca4 	bl	8008414 <HAL_GPIO_WritePin>
		sumADC_Pitc += adc3Value[_pitc];
 8001acc:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <getSample+0x300>)
 8001ace:	889b      	ldrh	r3, [r3, #4]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ad4:	4413      	add	r3, r2
 8001ad6:	653b      	str	r3, [r7, #80]	; 0x50
	for(int i = 0; i < 100; ++i)
 8001ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ada:	3301      	adds	r3, #1
 8001adc:	643b      	str	r3, [r7, #64]	; 0x40
 8001ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae0:	2b63      	cmp	r3, #99	; 0x63
 8001ae2:	ddeb      	ble.n	8001abc <getSample+0x170>
	}
	adcPitc_1000 = sumADC_Pitc/100;
 8001ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ae6:	4a5a      	ldr	r2, [pc, #360]	; (8001c50 <getSample+0x304>)
 8001ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8001aec:	1152      	asrs	r2, r2, #5
 8001aee:	17db      	asrs	r3, r3, #31
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <getSample+0x31c>)
 8001af6:	801a      	strh	r2, [r3, #0]
	char snum_pitc1000[5];
	sprintf(snum_pitc1000, "%d", adcPitc_1000);
 8001af8:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <getSample+0x31c>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4955      	ldr	r1, [pc, #340]	; (8001c58 <getSample+0x30c>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00d fa53 	bl	800efb0 <siprintf>
//	itoa(adcPitc_1000, snum_pitc1000, 5);
	ST7920_SendString(2,0, snum_pitc1000);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2100      	movs	r1, #0
 8001b12:	2002      	movs	r0, #2
 8001b14:	f7fe ffa6 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu pitc 2000
	sumADC_Pitc = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	653b      	str	r3, [r7, #80]	; 0x50
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001b1c:	e009      	b.n	8001b32 <getSample+0x1e6>
	{
		ST7920_SendString(0,4, "PITC 2");
 8001b1e:	4a53      	ldr	r2, [pc, #332]	; (8001c6c <getSample+0x320>)
 8001b20:	2104      	movs	r1, #4
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7fe ff9e 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	4846      	ldr	r0, [pc, #280]	; (8001c48 <getSample+0x2fc>)
 8001b2e:	f006 fc71 	bl	8008414 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b36:	4844      	ldr	r0, [pc, #272]	; (8001c48 <getSample+0x2fc>)
 8001b38:	f006 fc54 	bl	80083e4 <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d0ed      	beq.n	8001b1e <getSample+0x1d2>
	}
	//đã gạt trái
	HAL_Delay(100);
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	f002 f9b8 	bl	8003eb8 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b4c:	e010      	b.n	8001b70 <getSample+0x224>
	{
		HAL_Delay(10);
 8001b4e:	200a      	movs	r0, #10
 8001b50:	f002 f9b2 	bl	8003eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2102      	movs	r1, #2
 8001b58:	483b      	ldr	r0, [pc, #236]	; (8001c48 <getSample+0x2fc>)
 8001b5a:	f006 fc5b 	bl	8008414 <HAL_GPIO_WritePin>
		sumADC_Pitc += adc3Value[_pitc];
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <getSample+0x300>)
 8001b60:	889b      	ldrh	r3, [r3, #4]
 8001b62:	461a      	mov	r2, r3
 8001b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b66:	4413      	add	r3, r2
 8001b68:	653b      	str	r3, [r7, #80]	; 0x50
	for(int i = 0; i < 100; ++i)
 8001b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b72:	2b63      	cmp	r3, #99	; 0x63
 8001b74:	ddeb      	ble.n	8001b4e <getSample+0x202>
	}
	adcPitc_2000 = sumADC_Pitc/100;
 8001b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b78:	4a35      	ldr	r2, [pc, #212]	; (8001c50 <getSample+0x304>)
 8001b7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7e:	1152      	asrs	r2, r2, #5
 8001b80:	17db      	asrs	r3, r3, #31
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <getSample+0x324>)
 8001b88:	801a      	strh	r2, [r3, #0]
	char snum_pitc2000[5];
	sprintf(snum_pitc2000, "%d", adcPitc_2000);
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <getSample+0x324>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4930      	ldr	r1, [pc, #192]	; (8001c58 <getSample+0x30c>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f00d fa0a 	bl	800efb0 <siprintf>
//	itoa(adcPitc_1000, snum_pitc2000, 5);
	ST7920_SendString(2,5, snum_pitc2000);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2105      	movs	r1, #5
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7fe ff5d 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu rigt 1000
	sumADC_Rigt = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001bae:	e009      	b.n	8001bc4 <getSample+0x278>
	{
		ST7920_SendString(0,4, "RIGT 1");
 8001bb0:	4a30      	ldr	r2, [pc, #192]	; (8001c74 <getSample+0x328>)
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7fe ff55 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	4822      	ldr	r0, [pc, #136]	; (8001c48 <getSample+0x2fc>)
 8001bc0:	f006 fc28 	bl	8008414 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc8:	481f      	ldr	r0, [pc, #124]	; (8001c48 <getSample+0x2fc>)
 8001bca:	f006 fc0b 	bl	80083e4 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ed      	beq.n	8001bb0 <getSample+0x264>
	}
	//đã gạt phải
	HAL_Delay(100);
 8001bd4:	2064      	movs	r0, #100	; 0x64
 8001bd6:	f002 f96f 	bl	8003eb8 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bde:	e010      	b.n	8001c02 <getSample+0x2b6>
	{
		HAL_Delay(10);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f002 f969 	bl	8003eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	2102      	movs	r1, #2
 8001bea:	4817      	ldr	r0, [pc, #92]	; (8001c48 <getSample+0x2fc>)
 8001bec:	f006 fc12 	bl	8008414 <HAL_GPIO_WritePin>
		sumADC_Rigt += adc3Value[_rigt];
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <getSample+0x300>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf8:	4413      	add	r3, r2
 8001bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i = 0; i < 100; ++i)
 8001bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfe:	3301      	adds	r3, #1
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	2b63      	cmp	r3, #99	; 0x63
 8001c06:	ddeb      	ble.n	8001be0 <getSample+0x294>
	}
	adcRigt_1000 = sumADC_Rigt/100;
 8001c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <getSample+0x304>)
 8001c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c10:	1152      	asrs	r2, r2, #5
 8001c12:	17db      	asrs	r3, r3, #31
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <getSample+0x32c>)
 8001c1a:	801a      	strh	r2, [r3, #0]
	char snum_rigt1000[5];
	sprintf(snum_rigt1000, "%d", adcRigt_1000);
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <getSample+0x32c>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	490c      	ldr	r1, [pc, #48]	; (8001c58 <getSample+0x30c>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00d f9c1 	bl	800efb0 <siprintf>
//	itoa(adcRigt_1000, snum_rigt1000, 5);
	ST7920_SendString(3,0, snum_rigt1000);
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	461a      	mov	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	2003      	movs	r0, #3
 8001c38:	f7fe ff14 	bl	8000a64 <ST7920_SendString>


	//lấy mẫu rigt 2000
	sumADC_Rigt = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001c40:	e026      	b.n	8001c90 <getSample+0x344>
 8001c42:	bf00      	nop
 8001c44:	08010818 	.word	0x08010818
 8001c48:	58021000 	.word	0x58021000
 8001c4c:	24000cdc 	.word	0x24000cdc
 8001c50:	51eb851f 	.word	0x51eb851f
 8001c54:	24000070 	.word	0x24000070
 8001c58:	08010820 	.word	0x08010820
 8001c5c:	08010824 	.word	0x08010824
 8001c60:	24000072 	.word	0x24000072
 8001c64:	0801082c 	.word	0x0801082c
 8001c68:	24000074 	.word	0x24000074
 8001c6c:	08010834 	.word	0x08010834
 8001c70:	24000076 	.word	0x24000076
 8001c74:	0801083c 	.word	0x0801083c
 8001c78:	24000078 	.word	0x24000078
	{
		ST7920_SendString(0,4, "RIGT 2");
 8001c7c:	4a26      	ldr	r2, [pc, #152]	; (8001d18 <getSample+0x3cc>)
 8001c7e:	2104      	movs	r1, #4
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7fe feef 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4824      	ldr	r0, [pc, #144]	; (8001d1c <getSample+0x3d0>)
 8001c8c:	f006 fbc2 	bl	8008414 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c94:	4821      	ldr	r0, [pc, #132]	; (8001d1c <getSample+0x3d0>)
 8001c96:	f006 fba5 	bl	80083e4 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d0ed      	beq.n	8001c7c <getSample+0x330>
	}
	HAL_Delay(100);
 8001ca0:	2064      	movs	r0, #100	; 0x64
 8001ca2:	f002 f909 	bl	8003eb8 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8001caa:	e010      	b.n	8001cce <getSample+0x382>
	{
		HAL_Delay(10);
 8001cac:	200a      	movs	r0, #10
 8001cae:	f002 f903 	bl	8003eb8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4819      	ldr	r0, [pc, #100]	; (8001d1c <getSample+0x3d0>)
 8001cb8:	f006 fbac 	bl	8008414 <HAL_GPIO_WritePin>
		sumADC_Rigt += adc3Value[_rigt];
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <getSample+0x3d4>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc4:	4413      	add	r3, r2
 8001cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i = 0; i < 100; ++i)
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	3301      	adds	r3, #1
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	2b63      	cmp	r3, #99	; 0x63
 8001cd2:	ddeb      	ble.n	8001cac <getSample+0x360>
	}
	adcRigt_2000 = sumADC_Rigt/100;
 8001cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <getSample+0x3d8>)
 8001cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cdc:	1152      	asrs	r2, r2, #5
 8001cde:	17db      	asrs	r3, r3, #31
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <getSample+0x3dc>)
 8001ce6:	801a      	strh	r2, [r3, #0]
	char snum_rigt2000[5];
	sprintf(snum_rigt2000, "%d", adcRigt_2000);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <getSample+0x3dc>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	490e      	ldr	r1, [pc, #56]	; (8001d2c <getSample+0x3e0>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f00d f95c 	bl	800efb0 <siprintf>
//	itoa(adcRigt_2000, snum_rigt2000, 5);
	ST7920_SendString(3,5, snum_rigt2000);
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f7fe feb0 	bl	8000a64 <ST7920_SendString>

	HAL_Delay(500);
 8001d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d08:	f002 f8d6 	bl	8003eb8 <HAL_Delay>
	//ghi vào flash
	writeFLASH();
 8001d0c:	f7ff fce8 	bl	80016e0 <writeFLASH>
}
 8001d10:	bf00      	nop
 8001d12:	3758      	adds	r7, #88	; 0x58
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	08010844 	.word	0x08010844
 8001d1c:	58021000 	.word	0x58021000
 8001d20:	24000cdc 	.word	0x24000cdc
 8001d24:	51eb851f 	.word	0x51eb851f
 8001d28:	2400007a 	.word	0x2400007a
 8001d2c:	08010820 	.word	0x08010820

08001d30 <solveDT50_Left>:

void solveDT50_Left(uint16_t a1, uint16_t a2)
{
 8001d30:	b490      	push	{r4, r7}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	80fb      	strh	r3, [r7, #6]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8001d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4c:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8001d4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d52:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d03d      	beq.n	8001dd6 <solveDT50_Left+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8001d5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	fb02 f203 	mul.w	r2, r2, r3
 8001d62:	88bb      	ldrh	r3, [r7, #4]
 8001d64:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d6e:	88f9      	ldrh	r1, [r7, #6]
 8001d70:	fb01 f103 	mul.w	r1, r1, r3
 8001d74:	88bb      	ldrh	r3, [r7, #4]
 8001d76:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001d78:	fb00 f303 	mul.w	r3, r0, r3
 8001d7c:	1acb      	subs	r3, r1, r3
 8001d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d8a:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8001d8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001da2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001da6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001daa:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001db8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001dbc:	ed87 7b02 	vstr	d7, [r7, #8]
    aLeft_Linear = x;	//
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <solveDT50_Left+0x130>)
 8001dc2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001dc6:	e9c2 3400 	strd	r3, r4, [r2]
    bLeft_Linear = y;	//
 8001dca:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <solveDT50_Left+0x134>)
 8001dcc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001dd0:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aLeft_Linear = x;	//
    bLeft_Linear = y;	//
  }
}
 8001dd4:	e03f      	b.n	8001e56 <solveDT50_Left+0x126>
  else if ( a2 != 0 )
 8001dd6:	88bb      	ldrh	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d03c      	beq.n	8001e56 <solveDT50_Left+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8001ddc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dde:	88ba      	ldrh	r2, [r7, #4]
 8001de0:	fb02 f203 	mul.w	r2, r2, r3
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	1ad2      	subs	r2, r2, r3
 8001dee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001df0:	88b9      	ldrh	r1, [r7, #4]
 8001df2:	fb01 f103 	mul.w	r1, r1, r3
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001dfa:	fb00 f303 	mul.w	r3, r0, r3
 8001dfe:	1acb      	subs	r3, r1, r3
 8001e00:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e0c:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 8001e10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001e24:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e28:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e2c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001e30:	88bb      	ldrh	r3, [r7, #4]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e3a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e3e:	ed87 7b06 	vstr	d7, [r7, #24]
    aLeft_Linear = x;	//
 8001e42:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <solveDT50_Left+0x130>)
 8001e44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e48:	e9c2 3400 	strd	r3, r4, [r2]
    bLeft_Linear = y;	//
 8001e4c:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <solveDT50_Left+0x134>)
 8001e4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001e52:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001e56:	bf00      	nop
 8001e58:	3730      	adds	r7, #48	; 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc90      	pop	{r4, r7}
 8001e5e:	4770      	bx	lr
 8001e60:	24000c88 	.word	0x24000c88
 8001e64:	24000850 	.word	0x24000850

08001e68 <solveDT50_Pitch>:

void solveDT50_Pitch(uint16_t a1, uint16_t a2)
{
 8001e68:	b490      	push	{r4, r7}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	460a      	mov	r2, r1
 8001e72:	80fb      	strh	r3, [r7, #6]
 8001e74:	4613      	mov	r3, r2
 8001e76:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8001e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e84:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8001e86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e8a:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03d      	beq.n	8001f0e <solveDT50_Pitch+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8001e92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e94:	88fa      	ldrh	r2, [r7, #6]
 8001e96:	fb02 f203 	mul.w	r2, r2, r3
 8001e9a:	88bb      	ldrh	r3, [r7, #4]
 8001e9c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	1ad2      	subs	r2, r2, r3
 8001ea4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ea6:	88f9      	ldrh	r1, [r7, #6]
 8001ea8:	fb01 f103 	mul.w	r1, r1, r3
 8001eac:	88bb      	ldrh	r3, [r7, #4]
 8001eae:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001eb0:	fb00 f303 	mul.w	r3, r0, r3
 8001eb4:	1acb      	subs	r3, r1, r3
 8001eb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ec2:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8001ec6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ed0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001eda:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ede:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ee2:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ef0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ef4:	ed87 7b02 	vstr	d7, [r7, #8]
    aPitch_Linear = x;	//
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <solveDT50_Pitch+0x130>)
 8001efa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001efe:	e9c2 3400 	strd	r3, r4, [r2]
    bPitch_Linear = y;	//
 8001f02:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <solveDT50_Pitch+0x134>)
 8001f04:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f08:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aPitch_Linear = x;	//
    bPitch_Linear = y;	//
  }
}
 8001f0c:	e03f      	b.n	8001f8e <solveDT50_Pitch+0x126>
  else if ( a2 != 0 )
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03c      	beq.n	8001f8e <solveDT50_Pitch+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8001f14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f16:	88ba      	ldrh	r2, [r7, #4]
 8001f18:	fb02 f203 	mul.w	r2, r2, r3
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	1ad2      	subs	r2, r2, r3
 8001f26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f28:	88b9      	ldrh	r1, [r7, #4]
 8001f2a:	fb01 f103 	mul.w	r1, r1, r3
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001f32:	fb00 f303 	mul.w	r3, r0, r3
 8001f36:	1acb      	subs	r3, r1, r3
 8001f38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f44:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 8001f48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001f5c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f60:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001f64:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001f68:	88bb      	ldrh	r3, [r7, #4]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f72:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f76:	ed87 7b06 	vstr	d7, [r7, #24]
    aPitch_Linear = x;	//
 8001f7a:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <solveDT50_Pitch+0x130>)
 8001f7c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f80:	e9c2 3400 	strd	r3, r4, [r2]
    bPitch_Linear = y;	//
 8001f84:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <solveDT50_Pitch+0x134>)
 8001f86:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001f8a:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001f8e:	bf00      	nop
 8001f90:	3730      	adds	r7, #48	; 0x30
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc90      	pop	{r4, r7}
 8001f96:	4770      	bx	lr
 8001f98:	24000ab0 	.word	0x24000ab0
 8001f9c:	24000c98 	.word	0x24000c98

08001fa0 <solveDT50_Rigt>:

void solveDT50_Rigt(uint16_t a1, uint16_t a2)
{
 8001fa0:	b490      	push	{r4, r7}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460a      	mov	r2, r1
 8001faa:	80fb      	strh	r3, [r7, #6]
 8001fac:	4613      	mov	r3, r2
 8001fae:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8001fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbc:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8001fbe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fc2:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03d      	beq.n	8002046 <solveDT50_Rigt+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8001fca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	fb02 f203 	mul.w	r2, r2, r3
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	1ad2      	subs	r2, r2, r3
 8001fdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fde:	88f9      	ldrh	r1, [r7, #6]
 8001fe0:	fb01 f103 	mul.w	r1, r1, r3
 8001fe4:	88bb      	ldrh	r3, [r7, #4]
 8001fe6:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001fe8:	fb00 f303 	mul.w	r3, r0, r3
 8001fec:	1acb      	subs	r3, r1, r3
 8001fee:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ffa:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8001ffe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002008:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002012:	ed97 7b04 	vldr	d7, [r7, #16]
 8002016:	ee25 7b07 	vmul.f64	d7, d5, d7
 800201a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002028:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800202c:	ed87 7b02 	vstr	d7, [r7, #8]
    aRigt_Linear = x;	//
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <solveDT50_Rigt+0x130>)
 8002032:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002036:	e9c2 3400 	strd	r3, r4, [r2]
    bRigt_Linear = y;	//
 800203a:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <solveDT50_Rigt+0x134>)
 800203c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002040:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aRigt_Linear = x;	//
    bRigt_Linear = y;	//
  }
}
 8002044:	e03f      	b.n	80020c6 <solveDT50_Rigt+0x126>
  else if ( a2 != 0 )
 8002046:	88bb      	ldrh	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d03c      	beq.n	80020c6 <solveDT50_Rigt+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 800204c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800204e:	88ba      	ldrh	r2, [r7, #4]
 8002050:	fb02 f203 	mul.w	r2, r2, r3
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002060:	88b9      	ldrh	r1, [r7, #4]
 8002062:	fb01 f103 	mul.w	r1, r1, r3
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 800206a:	fb00 f303 	mul.w	r3, r0, r3
 800206e:	1acb      	subs	r3, r1, r3
 8002070:	fb92 f3f3 	sdiv	r3, r2, r3
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800207c:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 8002080:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800208a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002094:	ed97 7b08 	vldr	d7, [r7, #32]
 8002098:	ee25 7b07 	vmul.f64	d7, d5, d7
 800209c:	ee36 5b47 	vsub.f64	d5, d6, d7
 80020a0:	88bb      	ldrh	r3, [r7, #4]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020aa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020ae:	ed87 7b06 	vstr	d7, [r7, #24]
    aRigt_Linear = x;	//
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <solveDT50_Rigt+0x130>)
 80020b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80020b8:	e9c2 3400 	strd	r3, r4, [r2]
    bRigt_Linear = y;	//
 80020bc:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <solveDT50_Rigt+0x134>)
 80020be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80020c2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80020c6:	bf00      	nop
 80020c8:	3730      	adds	r7, #48	; 0x30
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc90      	pop	{r4, r7}
 80020ce:	4770      	bx	lr
 80020d0:	240003f0 	.word	0x240003f0
 80020d4:	24000200 	.word	0x24000200

080020d8 <wait4SelectMode>:
uint16_t ball1[4] = {1215,1215,300,530};

uint16_t ball_temp[4] = {0,0,0,0};

void wait4SelectMode()
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	  while((btn_Q == 1)&&(btn_E == 1)&&(btn_C == 1)&&(btn_Z == 1)&&(btn_Sta == 1))	//khi chưa chọn vị trí
 80020dc:	e004      	b.n	80020e8 <wait4SelectMode+0x10>
	  {
		  ST7920_SendString(1,0, "WAITING");
 80020de:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <wait4SelectMode+0xf0>)
 80020e0:	2100      	movs	r1, #0
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7fe fcbe 	bl	8000a64 <ST7920_SendString>
	  while((btn_Q == 1)&&(btn_E == 1)&&(btn_C == 1)&&(btn_Z == 1)&&(btn_Sta == 1))	//khi chưa chọn vị trí
 80020e8:	4b38      	ldr	r3, [pc, #224]	; (80021cc <wait4SelectMode+0xf4>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10f      	bne.n	8002110 <wait4SelectMode+0x38>
 80020f0:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <wait4SelectMode+0xf8>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10b      	bne.n	8002110 <wait4SelectMode+0x38>
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <wait4SelectMode+0xfc>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <wait4SelectMode+0x38>
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <wait4SelectMode+0x100>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d103      	bne.n	8002110 <wait4SelectMode+0x38>
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <wait4SelectMode+0x104>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d0e6      	beq.n	80020de <wait4SelectMode+0x6>
	  }
	  passArm(PASSARM_DOWN);
 8002110:	2201      	movs	r2, #1
 8002112:	2104      	movs	r1, #4
 8002114:	4832      	ldr	r0, [pc, #200]	; (80021e0 <wait4SelectMode+0x108>)
 8002116:	f006 f97d 	bl	8008414 <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 800211a:	2201      	movs	r2, #1
 800211c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002120:	482f      	ldr	r0, [pc, #188]	; (80021e0 <wait4SelectMode+0x108>)
 8002122:	f006 f977 	bl	8008414 <HAL_GPIO_WritePin>
	  ST7920_SendString(1,0, 	 "      ");
 8002126:	4a2f      	ldr	r2, [pc, #188]	; (80021e4 <wait4SelectMode+0x10c>)
 8002128:	2100      	movs	r1, #0
 800212a:	2001      	movs	r0, #1
 800212c:	f7fe fc9a 	bl	8000a64 <ST7920_SendString>
	  ST7920_SendString(1,0, "RUNNING");
 8002130:	4a2d      	ldr	r2, [pc, #180]	; (80021e8 <wait4SelectMode+0x110>)
 8002132:	2100      	movs	r1, #0
 8002134:	2001      	movs	r0, #1
 8002136:	f7fe fc95 	bl	8000a64 <ST7920_SendString>
	  if(btn_Sta == 0)
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <wait4SelectMode+0x104>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d108      	bne.n	8002154 <wait4SelectMode+0x7c>
	  	  {
	  		  startMode = TO_SHOOT;
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <wait4SelectMode+0x114>)
 8002144:	2205      	movs	r2, #5
 8002146:	701a      	strb	r2, [r3, #0]
	  		  ST7920_SendString(3,0, "TOSHOOT");
 8002148:	4a29      	ldr	r2, [pc, #164]	; (80021f0 <wait4SelectMode+0x118>)
 800214a:	2100      	movs	r1, #0
 800214c:	2003      	movs	r0, #3
 800214e:	f7fe fc89 	bl	8000a64 <ST7920_SendString>
 8002152:	e032      	b.n	80021ba <wait4SelectMode+0xe2>
	  	  }
	  else if(btn_E == 0)
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <wait4SelectMode+0xf8>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d108      	bne.n	800216e <wait4SelectMode+0x96>
	  {
		  startMode = BALL2;
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <wait4SelectMode+0x114>)
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "BALL2");
 8002162:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <wait4SelectMode+0x11c>)
 8002164:	2100      	movs	r1, #0
 8002166:	2003      	movs	r0, #3
 8002168:	f7fe fc7c 	bl	8000a64 <ST7920_SendString>
 800216c:	e025      	b.n	80021ba <wait4SelectMode+0xe2>
	  }
	  else if(btn_C == 0)
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <wait4SelectMode+0xfc>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <wait4SelectMode+0xb0>
	  {
		  startMode = BALL3;
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <wait4SelectMode+0x114>)
 8002178:	2203      	movs	r2, #3
 800217a:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "BALL3");
 800217c:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <wait4SelectMode+0x120>)
 800217e:	2100      	movs	r1, #0
 8002180:	2003      	movs	r0, #3
 8002182:	f7fe fc6f 	bl	8000a64 <ST7920_SendString>
 8002186:	e018      	b.n	80021ba <wait4SelectMode+0xe2>
	  }
	  else if(btn_Z == 0)
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <wait4SelectMode+0x100>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <wait4SelectMode+0xca>
	  {
		  startMode = BALL4;
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <wait4SelectMode+0x114>)
 8002192:	2204      	movs	r2, #4
 8002194:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "BALL4");
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <wait4SelectMode+0x124>)
 8002198:	2100      	movs	r1, #0
 800219a:	2003      	movs	r0, #3
 800219c:	f7fe fc62 	bl	8000a64 <ST7920_SendString>
 80021a0:	e00b      	b.n	80021ba <wait4SelectMode+0xe2>
	  }
	  else if(btn_Q == 0)	//chế độ khởi động ban đầu
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <wait4SelectMode+0xf4>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d107      	bne.n	80021ba <wait4SelectMode+0xe2>
	  {
		  startMode = BALL1;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <wait4SelectMode+0x114>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
		  ST7920_SendString(3,0, "BALL1");
 80021b0:	4a13      	ldr	r2, [pc, #76]	; (8002200 <wait4SelectMode+0x128>)
 80021b2:	2100      	movs	r1, #0
 80021b4:	2003      	movs	r0, #3
 80021b6:	f7fe fc55 	bl	8000a64 <ST7920_SendString>
	  }
	  ST7920_SendString(2,0, "START");
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <wait4SelectMode+0x12c>)
 80021bc:	2100      	movs	r1, #0
 80021be:	2002      	movs	r0, #2
 80021c0:	f7fe fc50 	bl	8000a64 <ST7920_SendString>
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	0801084c 	.word	0x0801084c
 80021cc:	24000bd3 	.word	0x24000bd3
 80021d0:	240003ff 	.word	0x240003ff
 80021d4:	24000d24 	.word	0x24000d24
 80021d8:	24000cb0 	.word	0x24000cb0
 80021dc:	24000bbe 	.word	0x24000bbe
 80021e0:	58020000 	.word	0x58020000
 80021e4:	08010854 	.word	0x08010854
 80021e8:	0801085c 	.word	0x0801085c
 80021ec:	24000b88 	.word	0x24000b88
 80021f0:	08010864 	.word	0x08010864
 80021f4:	0801086c 	.word	0x0801086c
 80021f8:	08010874 	.word	0x08010874
 80021fc:	0801087c 	.word	0x0801087c
 8002200:	08010884 	.word	0x08010884
 8002204:	0801088c 	.word	0x0801088c

08002208 <goToBallRigt>:

void goToBallRigt(uint16_t *ball)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	ed2d 8b04 	vpush	{d8-d9}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	  startTime = HAL_GetTick();
 8002214:	f001 fe44 	bl	8003ea0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	4bbf      	ldr	r3, [pc, #764]	; (8002518 <goToBallRigt+0x310>)
 800221c:	601a      	str	r2, [r3, #0]
	  while(btn_Sel!=0)	//di chuyển tới vị trí BALL1
 800221e:	e009      	b.n	8002234 <goToBallRigt+0x2c>
	  {
		  roR_Pit_Yaw_GoTo(ball[_Rigt], ball[_PitcWait], 0);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3306      	adds	r3, #6
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2200      	movs	r2, #0
 800222e:	4619      	mov	r1, r3
 8002230:	f7ff f8c4 	bl	80013bc <roR_Pit_Yaw_GoTo>
	  while(btn_Sel!=0)	//di chuyển tới vị trí BALL1
 8002234:	4bb9      	ldr	r3, [pc, #740]	; (800251c <goToBallRigt+0x314>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f1      	bne.n	8002220 <goToBallRigt+0x18>
	  }
	  while(btn_X == 1)	//ch�? nhấn nút X -> tinh chỉnh
 800223c:	e12c      	b.n	8002498 <goToBallRigt+0x290>
	  {
		  PIDyaw(compassData, 0);
 800223e:	4bb8      	ldr	r3, [pc, #736]	; (8002520 <goToBallRigt+0x318>)
 8002240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fdd6 	bl	8000df8 <PIDyaw>
		  leftVer = !btn_leftUp - !btn_leftDown;
 800224c:	4bb5      	ldr	r3, [pc, #724]	; (8002524 <goToBallRigt+0x31c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	b29a      	uxth	r2, r3
 800225c:	4bb2      	ldr	r3, [pc, #712]	; (8002528 <goToBallRigt+0x320>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b29b      	uxth	r3, r3
 8002270:	b21a      	sxth	r2, r3
 8002272:	4bae      	ldr	r3, [pc, #696]	; (800252c <goToBallRigt+0x324>)
 8002274:	801a      	strh	r2, [r3, #0]
		  leftHor = -!btn_leftLeft + !btn_leftRigt;
 8002276:	4bae      	ldr	r3, [pc, #696]	; (8002530 <goToBallRigt+0x328>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf0c      	ite	eq
 800227e:	2301      	moveq	r3, #1
 8002280:	2300      	movne	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	b29a      	uxth	r2, r3
 8002286:	4bab      	ldr	r3, [pc, #684]	; (8002534 <goToBallRigt+0x32c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	b29b      	uxth	r3, r3
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	b21a      	sxth	r2, r3
 800229c:	4ba6      	ldr	r3, [pc, #664]	; (8002538 <goToBallRigt+0x330>)
 800229e:	801a      	strh	r2, [r3, #0]
		  _dir = atan2(leftHor, -leftVer);
 80022a0:	4ba5      	ldr	r3, [pc, #660]	; (8002538 <goToBallRigt+0x330>)
 80022a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022ae:	4b9f      	ldr	r3, [pc, #636]	; (800252c <goToBallRigt+0x324>)
 80022b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b4:	425b      	negs	r3, r3
 80022b6:	ee06 3a90 	vmov	s13, r3
 80022ba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80022be:	eeb0 1b46 	vmov.f64	d1, d6
 80022c2:	eeb0 0b47 	vmov.f64	d0, d7
 80022c6:	f00d fab7 	bl	800f838 <atan2>
 80022ca:	eeb0 7b40 	vmov.f64	d7, d0
 80022ce:	4b9b      	ldr	r3, [pc, #620]	; (800253c <goToBallRigt+0x334>)
 80022d0:	ed83 7b00 	vstr	d7, [r3]
		  _controlSpeed = sqrt(leftVer*leftVer + leftHor*leftHor);
 80022d4:	4b95      	ldr	r3, [pc, #596]	; (800252c <goToBallRigt+0x324>)
 80022d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022da:	461a      	mov	r2, r3
 80022dc:	4b93      	ldr	r3, [pc, #588]	; (800252c <goToBallRigt+0x324>)
 80022de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	4b94      	ldr	r3, [pc, #592]	; (8002538 <goToBallRigt+0x330>)
 80022e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4b92      	ldr	r3, [pc, #584]	; (8002538 <goToBallRigt+0x330>)
 80022f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f4:	fb03 f301 	mul.w	r3, r3, r1
 80022f8:	4413      	add	r3, r2
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002302:	eeb0 0b47 	vmov.f64	d0, d7
 8002306:	f00d fa9b 	bl	800f840 <sqrt>
 800230a:	eeb0 7b40 	vmov.f64	d7, d0
 800230e:	4b8c      	ldr	r3, [pc, #560]	; (8002540 <goToBallRigt+0x338>)
 8002310:	ed83 7b00 	vstr	d7, [r3]
		  _motor1Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 - _dir) + 0);
 8002314:	4b8b      	ldr	r3, [pc, #556]	; (8002544 <goToBallRigt+0x33c>)
 8002316:	ed93 6b00 	vldr	d6, [r3]
 800231a:	4b8b      	ldr	r3, [pc, #556]	; (8002548 <goToBallRigt+0x340>)
 800231c:	ed93 7b00 	vldr	d7, [r3]
 8002320:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002324:	4b89      	ldr	r3, [pc, #548]	; (800254c <goToBallRigt+0x344>)
 8002326:	ed93 6b00 	vldr	d6, [r3]
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <goToBallRigt+0x338>)
 800232c:	ed93 7b00 	vldr	d7, [r3]
 8002330:	ee26 9b07 	vmul.f64	d9, d6, d7
 8002334:	4b81      	ldr	r3, [pc, #516]	; (800253c <goToBallRigt+0x334>)
 8002336:	ed93 7b00 	vldr	d7, [r3]
 800233a:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002500 <goToBallRigt+0x2f8>
 800233e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002342:	eeb0 0b47 	vmov.f64	d0, d7
 8002346:	f00d fa3b 	bl	800f7c0 <cos>
 800234a:	eeb0 7b40 	vmov.f64	d7, d0
 800234e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002352:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002508 <goToBallRigt+0x300>
 8002356:	ee37 7b06 	vadd.f64	d7, d7, d6
 800235a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800235e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002362:	ee17 3a90 	vmov	r3, s15
 8002366:	b21a      	sxth	r2, r3
 8002368:	4b79      	ldr	r3, [pc, #484]	; (8002550 <goToBallRigt+0x348>)
 800236a:	801a      	strh	r2, [r3, #0]
		  _motor2Speed = yawPID*factorYawPID + (factorSpeed*_controlSpeed *cos(3*M_PI/4 + _dir) - 0);
 800236c:	4b75      	ldr	r3, [pc, #468]	; (8002544 <goToBallRigt+0x33c>)
 800236e:	ed93 6b00 	vldr	d6, [r3]
 8002372:	4b75      	ldr	r3, [pc, #468]	; (8002548 <goToBallRigt+0x340>)
 8002374:	ed93 7b00 	vldr	d7, [r3]
 8002378:	ee26 8b07 	vmul.f64	d8, d6, d7
 800237c:	4b73      	ldr	r3, [pc, #460]	; (800254c <goToBallRigt+0x344>)
 800237e:	ed93 6b00 	vldr	d6, [r3]
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <goToBallRigt+0x338>)
 8002384:	ed93 7b00 	vldr	d7, [r3]
 8002388:	ee26 9b07 	vmul.f64	d9, d6, d7
 800238c:	4b6b      	ldr	r3, [pc, #428]	; (800253c <goToBallRigt+0x334>)
 800238e:	ed93 7b00 	vldr	d7, [r3]
 8002392:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8002500 <goToBallRigt+0x2f8>
 8002396:	ee37 7b06 	vadd.f64	d7, d7, d6
 800239a:	eeb0 0b47 	vmov.f64	d0, d7
 800239e:	f00d fa0f 	bl	800f7c0 <cos>
 80023a2:	eeb0 7b40 	vmov.f64	d7, d0
 80023a6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80023aa:	ee38 7b07 	vadd.f64	d7, d8, d7
 80023ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80023b2:	ee17 3a90 	vmov	r3, s15
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <goToBallRigt+0x34c>)
 80023ba:	801a      	strh	r2, [r3, #0]
		  _motor3Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 + _dir) + 0;
 80023bc:	4b61      	ldr	r3, [pc, #388]	; (8002544 <goToBallRigt+0x33c>)
 80023be:	ed93 6b00 	vldr	d6, [r3]
 80023c2:	4b61      	ldr	r3, [pc, #388]	; (8002548 <goToBallRigt+0x340>)
 80023c4:	ed93 7b00 	vldr	d7, [r3]
 80023c8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80023cc:	4b5f      	ldr	r3, [pc, #380]	; (800254c <goToBallRigt+0x344>)
 80023ce:	ed93 6b00 	vldr	d6, [r3]
 80023d2:	4b5b      	ldr	r3, [pc, #364]	; (8002540 <goToBallRigt+0x338>)
 80023d4:	ed93 7b00 	vldr	d7, [r3]
 80023d8:	ee26 9b07 	vmul.f64	d9, d6, d7
 80023dc:	4b57      	ldr	r3, [pc, #348]	; (800253c <goToBallRigt+0x334>)
 80023de:	ed93 7b00 	vldr	d7, [r3]
 80023e2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8002510 <goToBallRigt+0x308>
 80023e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023ea:	eeb0 0b47 	vmov.f64	d0, d7
 80023ee:	f00d f9e7 	bl	800f7c0 <cos>
 80023f2:	eeb0 7b40 	vmov.f64	d7, d0
 80023f6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80023fa:	ee38 7b07 	vadd.f64	d7, d8, d7
 80023fe:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8002508 <goToBallRigt+0x300>
 8002402:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002406:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800240a:	ee17 3a90 	vmov	r3, s15
 800240e:	b21a      	sxth	r2, r3
 8002410:	4b51      	ldr	r3, [pc, #324]	; (8002558 <goToBallRigt+0x350>)
 8002412:	801a      	strh	r2, [r3, #0]
		  _motor4Speed = yawPID*factorYawPID +  factorSpeed*_controlSpeed *cos(  M_PI/4 - _dir) - 0;
 8002414:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <goToBallRigt+0x33c>)
 8002416:	ed93 6b00 	vldr	d6, [r3]
 800241a:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <goToBallRigt+0x340>)
 800241c:	ed93 7b00 	vldr	d7, [r3]
 8002420:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002424:	4b49      	ldr	r3, [pc, #292]	; (800254c <goToBallRigt+0x344>)
 8002426:	ed93 6b00 	vldr	d6, [r3]
 800242a:	4b45      	ldr	r3, [pc, #276]	; (8002540 <goToBallRigt+0x338>)
 800242c:	ed93 7b00 	vldr	d7, [r3]
 8002430:	ee26 9b07 	vmul.f64	d9, d6, d7
 8002434:	4b41      	ldr	r3, [pc, #260]	; (800253c <goToBallRigt+0x334>)
 8002436:	ed93 7b00 	vldr	d7, [r3]
 800243a:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002510 <goToBallRigt+0x308>
 800243e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002442:	eeb0 0b47 	vmov.f64	d0, d7
 8002446:	f00d f9bb 	bl	800f7c0 <cos>
 800244a:	eeb0 7b40 	vmov.f64	d7, d0
 800244e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002452:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002456:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800245a:	ee17 3a90 	vmov	r3, s15
 800245e:	b21a      	sxth	r2, r3
 8002460:	4b3e      	ldr	r3, [pc, #248]	; (800255c <goToBallRigt+0x354>)
 8002462:	801a      	strh	r2, [r3, #0]
		  controlMotor1(_motor1Speed);
 8002464:	4b3a      	ldr	r3, [pc, #232]	; (8002550 <goToBallRigt+0x348>)
 8002466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fbd2 	bl	8000c14 <controlMotor1>
		  controlMotor2(_motor2Speed);
 8002470:	4b38      	ldr	r3, [pc, #224]	; (8002554 <goToBallRigt+0x34c>)
 8002472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fc08 	bl	8000c8c <controlMotor2>
		  controlMotor3(_motor3Speed);
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <goToBallRigt+0x350>)
 800247e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fc3e 	bl	8000d04 <controlMotor3>
		  controlMotor4(_motor4Speed);
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <goToBallRigt+0x354>)
 800248a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fc74 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 8002494:	f7fe fa3e 	bl	8000914 <spinalCordTrans>
	  while(btn_X == 1)	//ch�? nhấn nút X -> tinh chỉnh
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <goToBallRigt+0x358>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	f43f aece 	beq.w	800223e <goToBallRigt+0x36>
	  }
	  ball_temp[_Rigt] = rigtDistance;
 80024a2:	4b30      	ldr	r3, [pc, #192]	; (8002564 <goToBallRigt+0x35c>)
 80024a4:	ed93 7b00 	vldr	d7, [r3]
 80024a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024ac:	ee17 3a90 	vmov	r3, s15
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <goToBallRigt+0x360>)
 80024b4:	801a      	strh	r2, [r3, #0]
	  startTime = HAL_GetTick();
 80024b6:	f001 fcf3 	bl	8003ea0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <goToBallRigt+0x310>)
 80024be:	601a      	str	r2, [r3, #0]
	  while(HAL_GetTick()-startTime < 1000)	//di chuyển vào vị trí lấy ball1
 80024c0:	e009      	b.n	80024d6 <goToBallRigt+0x2ce>
	  {
		  roR_Pit_Yaw_GoTo(ball_temp[_Rigt], ball[_Pitc], 0);
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <goToBallRigt+0x360>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	4619      	mov	r1, r3
 80024d2:	f7fe ff73 	bl	80013bc <roR_Pit_Yaw_GoTo>
	  while(HAL_GetTick()-startTime < 1000)	//di chuyển vào vị trí lấy ball1
 80024d6:	f001 fce3 	bl	8003ea0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <goToBallRigt+0x310>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e6:	d3ec      	bcc.n	80024c2 <goToBallRigt+0x2ba>
	  }
	  brake();
 80024e8:	f7fe ff54 	bl	8001394 <brake>
//	  HAL_Delay(500);
	  passHand(PASSHAND_CLOSE);	//gắp bóng
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024f2:	481e      	ldr	r0, [pc, #120]	; (800256c <goToBallRigt+0x364>)
 80024f4:	f005 ff8e 	bl	8008414 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80024f8:	2064      	movs	r0, #100	; 0x64
 80024fa:	f001 fcdd 	bl	8003eb8 <HAL_Delay>
	  while(zmanualRxPacket[0] != 'D'&&btn_D!=0)	//chờ manual nhấn nút
 80024fe:	e041      	b.n	8002584 <goToBallRigt+0x37c>
 8002500:	7f3321d2 	.word	0x7f3321d2
 8002504:	4002d97c 	.word	0x4002d97c
	...
 8002510:	54442d18 	.word	0x54442d18
 8002514:	3fe921fb 	.word	0x3fe921fb
 8002518:	24000d28 	.word	0x24000d28
 800251c:	240008ec 	.word	0x240008ec
 8002520:	24000900 	.word	0x24000900
 8002524:	24000ca0 	.word	0x24000ca0
 8002528:	24000b98 	.word	0x24000b98
 800252c:	24000bd0 	.word	0x24000bd0
 8002530:	24000b89 	.word	0x24000b89
 8002534:	240003fc 	.word	0x240003fc
 8002538:	2400081e 	.word	0x2400081e
 800253c:	24000860 	.word	0x24000860
 8002540:	24000b78 	.word	0x24000b78
 8002544:	24000be8 	.word	0x24000be8
 8002548:	24000068 	.word	0x24000068
 800254c:	24000060 	.word	0x24000060
 8002550:	24000aca 	.word	0x24000aca
 8002554:	24000bc0 	.word	0x24000bc0
 8002558:	24000ca4 	.word	0x24000ca4
 800255c:	240003fa 	.word	0x240003fa
 8002560:	240001c9 	.word	0x240001c9
 8002564:	24000940 	.word	0x24000940
 8002568:	240001b0 	.word	0x240001b0
 800256c:	58020000 	.word	0x58020000
	  {
		  roR_Pit_Yaw_GoTo(ball_temp[_Rigt], ball[_PitcWait], 0);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <goToBallRigt+0x3d0>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3306      	adds	r3, #6
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe ff1c 	bl	80013bc <roR_Pit_Yaw_GoTo>
	  while(zmanualRxPacket[0] != 'D'&&btn_D!=0)	//chờ manual nhấn nút
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <goToBallRigt+0x3d4>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b44      	cmp	r3, #68	; 0x44
 800258a:	d003      	beq.n	8002594 <goToBallRigt+0x38c>
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <goToBallRigt+0x3d8>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ed      	bne.n	8002570 <goToBallRigt+0x368>
	  }
	  brake();
 8002594:	f7fe fefe 	bl	8001394 <brake>
	  passArm(PASSARM_UP);
 8002598:	2200      	movs	r2, #0
 800259a:	2104      	movs	r1, #4
 800259c:	4811      	ldr	r0, [pc, #68]	; (80025e4 <goToBallRigt+0x3dc>)
 800259e:	f005 ff39 	bl	8008414 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80025a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a6:	f001 fc87 	bl	8003eb8 <HAL_Delay>
	  passArm(PASSARM_DOWN);
 80025aa:	2201      	movs	r2, #1
 80025ac:	2104      	movs	r1, #4
 80025ae:	480d      	ldr	r0, [pc, #52]	; (80025e4 <goToBallRigt+0x3dc>)
 80025b0:	f005 ff30 	bl	8008414 <HAL_GPIO_WritePin>
	  passHand(PASSHAND_OPEN);
 80025b4:	2201      	movs	r2, #1
 80025b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ba:	480a      	ldr	r0, [pc, #40]	; (80025e4 <goToBallRigt+0x3dc>)
 80025bc:	f005 ff2a 	bl	8008414 <HAL_GPIO_WritePin>
	  startMode = 0;
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <goToBallRigt+0x3e0>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
	  ball_temp[_Rigt] = 0;
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <goToBallRigt+0x3d0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	801a      	strh	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	ecbd 8b04 	vpop	{d8-d9}
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	240001b0 	.word	0x240001b0
 80025dc:	240008f8 	.word	0x240008f8
 80025e0:	240003fd 	.word	0x240003fd
 80025e4:	58020000 	.word	0x58020000
 80025e8:	24000b88 	.word	0x24000b88

080025ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f0:	f001 fbd0 	bl	8003d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025f4:	f000 f8d0 	bl	8002798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025f8:	f000 fbb8 	bl	8002d6c <MX_GPIO_Init>
  MX_DMA_Init();
 80025fc:	f000 fb6e 	bl	8002cdc <MX_DMA_Init>
  MX_ADC3_Init();
 8002600:	f000 f980 	bl	8002904 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8002604:	f000 fa86 	bl	8002b14 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002608:	f000 fad0 	bl	8002bac <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800260c:	f000 f9fe 	bl	8002a0c <MX_TIM7_Init>
  MX_UART7_Init();
 8002610:	f000 fa34 	bl	8002a7c <MX_UART7_Init>
  MX_USART6_UART_Init();
 8002614:	f000 fb16 	bl	8002c44 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8002618:	f7fe f832 	bl	8000680 <delayUs_Init>
  peripheralUART_Init();
 800261c:	f7fe f876 	bl	800070c <peripheralUART_Init>
  peripheralADC_Init();
 8002620:	f7fe faea 	bl	8000bf8 <peripheralADC_Init>
  positionControl_Init();
 8002624:	f7fe fefc 	bl	8001420 <positionControl_Init>
  ST7920_Init();
 8002628:	f7fe faa6 	bl	8000b78 <ST7920_Init>


  brake();
 800262c:	f7fe feb2 	bl	8001394 <brake>
  compassReset();
 8002630:	f7fe f93a 	bl	80008a8 <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	2101      	movs	r1, #1
 8002638:	4849      	ldr	r0, [pc, #292]	; (8002760 <main+0x174>)
 800263a:	f005 feeb 	bl	8008414 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800263e:	2201      	movs	r2, #1
 8002640:	2102      	movs	r1, #2
 8002642:	4848      	ldr	r0, [pc, #288]	; (8002764 <main+0x178>)
 8002644:	f005 fee6 	bl	8008414 <HAL_GPIO_WritePin>
  passArm(PASSARM_UP);
 8002648:	2200      	movs	r2, #0
 800264a:	2104      	movs	r1, #4
 800264c:	4846      	ldr	r0, [pc, #280]	; (8002768 <main+0x17c>)
 800264e:	f005 fee1 	bl	8008414 <HAL_GPIO_WritePin>
  passHand(PASSHAND_OPEN);
 8002652:	2201      	movs	r2, #1
 8002654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002658:	4843      	ldr	r0, [pc, #268]	; (8002768 <main+0x17c>)
 800265a:	f005 fedb 	bl	8008414 <HAL_GPIO_WritePin>
  if(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//nếu như gạt phải khởi động
 800265e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002662:	4840      	ldr	r0, [pc, #256]	; (8002764 <main+0x178>)
 8002664:	f005 febe 	bl	80083e4 <HAL_GPIO_ReadPin>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d137      	bne.n	80026de <main+0xf2>
  {
	  ST7920_SendString(0,0, "SAMPLE:");
 800266e:	4a3f      	ldr	r2, [pc, #252]	; (800276c <main+0x180>)
 8002670:	2100      	movs	r1, #0
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe f9f6 	bl	8000a64 <ST7920_SendString>
	  getSample();
 8002678:	f7ff f968 	bl	800194c <getSample>
	  while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//ch�? gạt phải
 800267c:	e00e      	b.n	800269c <main+0xb0>
	  {
		  ST7920_SendString(0,0, "PLEASE SWITCH");
 800267e:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <main+0x184>)
 8002680:	2100      	movs	r1, #0
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe f9ee 	bl	8000a64 <ST7920_SendString>
		  HAL_Delay(1000);
 8002688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800268c:	f001 fc14 	bl	8003eb8 <HAL_Delay>
		  ST7920_Clear();
 8002690:	f7fe fa2a 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(1000);
 8002694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002698:	f001 fc0e 	bl	8003eb8 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//ch�? gạt phải
 800269c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a0:	4830      	ldr	r0, [pc, #192]	; (8002764 <main+0x178>)
 80026a2:	f005 fe9f 	bl	80083e4 <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0e8      	beq.n	800267e <main+0x92>
	  }
	  while(1)
	  {
		  tracking++;
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <main+0x188>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	4a30      	ldr	r2, [pc, #192]	; (8002774 <main+0x188>)
 80026b4:	6013      	str	r3, [r2, #0]
		  ST7920_SendString(0,0, "PLEASE RESET");
 80026b6:	4a30      	ldr	r2, [pc, #192]	; (8002778 <main+0x18c>)
 80026b8:	2100      	movs	r1, #0
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe f9d2 	bl	8000a64 <ST7920_SendString>
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80026c0:	2102      	movs	r1, #2
 80026c2:	4828      	ldr	r0, [pc, #160]	; (8002764 <main+0x178>)
 80026c4:	f005 febf 	bl	8008446 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80026c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026cc:	f001 fbf4 	bl	8003eb8 <HAL_Delay>
		  ST7920_Clear();
 80026d0:	f7fe fa0a 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(500);
 80026d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026d8:	f001 fbee 	bl	8003eb8 <HAL_Delay>
		  tracking++;
 80026dc:	e7e6      	b.n	80026ac <main+0xc0>
	  }
  }
  else	// nếu như gạt trái
  {
	  ST7920_SendString(0,0, "FREE MODE");
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <main+0x190>)
 80026e0:	2100      	movs	r1, #0
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe f9be 	bl	8000a64 <ST7920_SendString>
	  tracking = 148;
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <main+0x188>)
 80026ea:	2294      	movs	r2, #148	; 0x94
 80026ec:	601a      	str	r2, [r3, #0]
	  readFLASH();
 80026ee:	f7ff f89b 	bl	8001828 <readFLASH>
	  tracking = 150;
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <main+0x188>)
 80026f4:	2296      	movs	r2, #150	; 0x96
 80026f6:	601a      	str	r2, [r3, #0]
  }
//  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
  HAL_Delay(INIT_TIME);
 80026f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026fc:	f001 fbdc 	bl	8003eb8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  wait4SelectMode();
 8002700:	f7ff fcea 	bl	80020d8 <wait4SelectMode>
	  if(startMode == TO_SHOOT)
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <main+0x194>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d0f9      	beq.n	8002700 <main+0x114>
	  {
	  }
	  else if(startMode == BALL1)
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <main+0x194>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d103      	bne.n	800271c <main+0x130>
	  {
		  goToBallRigt(ball1);
 8002714:	481b      	ldr	r0, [pc, #108]	; (8002784 <main+0x198>)
 8002716:	f7ff fd77 	bl	8002208 <goToBallRigt>
 800271a:	e7f1      	b.n	8002700 <main+0x114>
//		  HAL_Delay(1000);
//		  passArm(PASSARM_DOWN);
//		  passHand(PASSHAND_OPEN);
//		  startMode = 0;
	  }
	  else if(startMode == BALL2)
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <main+0x194>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d103      	bne.n	800272c <main+0x140>
	  {
		  goToBallRigt(ball2);
 8002724:	4818      	ldr	r0, [pc, #96]	; (8002788 <main+0x19c>)
 8002726:	f7ff fd6f 	bl	8002208 <goToBallRigt>
 800272a:	e7e9      	b.n	8002700 <main+0x114>
//		  HAL_Delay(1000);
//		  passArm(PASSARM_DOWN);
//		  passHand(PASSHAND_OPEN);
//		  startMode = 0;
	  }
	  else if(startMode == BALL3)
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <main+0x194>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d103      	bne.n	800273c <main+0x150>
	  {
		  goToBallRigt(ball3);
 8002734:	4815      	ldr	r0, [pc, #84]	; (800278c <main+0x1a0>)
 8002736:	f7ff fd67 	bl	8002208 <goToBallRigt>
 800273a:	e7e1      	b.n	8002700 <main+0x114>
//		  HAL_Delay(1000);
//		  passArm(PASSARM_DOWN);
//		  passHand(PASSHAND_OPEN);
//		  startMode = 0;
	  }
	  else if(startMode == BALL4)
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <main+0x194>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d103      	bne.n	800274c <main+0x160>
	  {
		  goToBallRigt(ball4);
 8002744:	4812      	ldr	r0, [pc, #72]	; (8002790 <main+0x1a4>)
 8002746:	f7ff fd5f 	bl	8002208 <goToBallRigt>
 800274a:	e7d9      	b.n	8002700 <main+0x114>
//		  HAL_Delay(1000);
//		  passArm(PASSARM_DOWN);
//		  passHand(PASSHAND_OPEN);
//		  startMode = 0;
	  }
	  else if(startMode == LOAD_BALL)
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <main+0x194>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b06      	cmp	r3, #6
 8002752:	d1d5      	bne.n	8002700 <main+0x114>
	  {
		  while(btn_Sel!=0)//chưa nhấn nút sel->về vị trí ban đầu
 8002754:	bf00      	nop
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <main+0x1a8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1fb      	bne.n	8002756 <main+0x16a>
	  wait4SelectMode();
 800275e:	e7cf      	b.n	8002700 <main+0x114>
 8002760:	58020400 	.word	0x58020400
 8002764:	58021000 	.word	0x58021000
 8002768:	58020000 	.word	0x58020000
 800276c:	08010894 	.word	0x08010894
 8002770:	0801089c 	.word	0x0801089c
 8002774:	24000ba4 	.word	0x24000ba4
 8002778:	080108ac 	.word	0x080108ac
 800277c:	080108bc 	.word	0x080108bc
 8002780:	24000b88 	.word	0x24000b88
 8002784:	24000094 	.word	0x24000094
 8002788:	2400008c 	.word	0x2400008c
 800278c:	24000084 	.word	0x24000084
 8002790:	2400007c 	.word	0x2400007c
 8002794:	240008ec 	.word	0x240008ec

08002798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0cc      	sub	sp, #304	; 0x130
 800279c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800279e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027a2:	224c      	movs	r2, #76	; 0x4c
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f00c fbfa 	bl	800efa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027b0:	2220      	movs	r2, #32
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f00c fbf3 	bl	800efa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	4618      	mov	r0, r3
 80027c0:	23bc      	movs	r3, #188	; 0xbc
 80027c2:	461a      	mov	r2, r3
 80027c4:	2100      	movs	r1, #0
 80027c6:	f00c fbeb 	bl	800efa0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80027ca:	2002      	movs	r0, #2
 80027cc:	f005 fe56 	bl	800847c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <SystemClock_Config+0x164>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4a48      	ldr	r2, [pc, #288]	; (80028fc <SystemClock_Config+0x164>)
 80027dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e0:	6193      	str	r3, [r2, #24]
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <SystemClock_Config+0x164>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <SystemClock_Config+0x168>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	4a43      	ldr	r2, [pc, #268]	; (8002900 <SystemClock_Config+0x168>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <SystemClock_Config+0x168>)
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800280a:	bf00      	nop
 800280c:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <SystemClock_Config+0x164>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002818:	d1f8      	bne.n	800280c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800281a:	2302      	movs	r3, #2
 800281c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002820:	2301      	movs	r3, #1
 8002822:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002826:	2340      	movs	r3, #64	; 0x40
 8002828:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002838:	2304      	movs	r3, #4
 800283a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 800283e:	233c      	movs	r3, #60	; 0x3c
 8002840:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800284a:	2302      	movs	r3, #2
 800284c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002856:	230c      	movs	r3, #12
 8002858:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002868:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800286c:	4618      	mov	r0, r3
 800286e:	f005 fe3f 	bl	80084f0 <HAL_RCC_OscConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002878:	f000 fbd8 	bl	800302c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800287c:	233f      	movs	r3, #63	; 0x3f
 800287e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002882:	2303      	movs	r3, #3
 8002884:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800288e:	2308      	movs	r3, #8
 8002890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002894:	2340      	movs	r3, #64	; 0x40
 8002896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800289a:	2340      	movs	r3, #64	; 0x40
 800289c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80028a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80028a8:	2340      	movs	r3, #64	; 0x40
 80028aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028b2:	2104      	movs	r1, #4
 80028b4:	4618      	mov	r0, r3
 80028b6:	f006 f9f3 	bl	8008ca0 <HAL_RCC_ClockConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80028c0:	f000 fbb4 	bl	800302c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 80028c4:	f107 0308 	add.w	r3, r7, #8
 80028c8:	2203      	movs	r2, #3
 80028ca:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	2200      	movs	r2, #0
 80028d2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	2200      	movs	r2, #0
 80028da:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028dc:	f107 0308 	add.w	r3, r7, #8
 80028e0:	4618      	mov	r0, r3
 80028e2:	f006 fd61 	bl	80093a8 <HAL_RCCEx_PeriphCLKConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <SystemClock_Config+0x158>
  {
    Error_Handler();
 80028ec:	f000 fb9e 	bl	800302c <Error_Handler>
  }
}
 80028f0:	bf00      	nop
 80028f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	58024800 	.word	0x58024800
 8002900:	58000400 	.word	0x58000400

08002904 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
 8002918:	615a      	str	r2, [r3, #20]
 800291a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800291c:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <MX_ADC3_Init+0xf4>)
 800291e:	4a37      	ldr	r2, [pc, #220]	; (80029fc <MX_ADC3_Init+0xf8>)
 8002920:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002922:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002924:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002928:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <MX_ADC3_Init+0xf4>)
 800292c:	2208      	movs	r2, #8
 800292e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002932:	2201      	movs	r2, #1
 8002934:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002936:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002938:	2204      	movs	r2, #4
 800293a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <MX_ADC3_Init+0xf4>)
 800293e:	2200      	movs	r2, #0
 8002940:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002942:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002944:	2201      	movs	r2, #1
 8002946:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <MX_ADC3_Init+0xf4>)
 800294a:	2203      	movs	r2, #3
 800294c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <MX_ADC3_Init+0xf4>)
 800295c:	2200      	movs	r2, #0
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002962:	2203      	movs	r2, #3
 8002964:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <MX_ADC3_Init+0xf4>)
 800296e:	2200      	movs	r2, #0
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <MX_ADC3_Init+0xf4>)
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800297a:	481f      	ldr	r0, [pc, #124]	; (80029f8 <MX_ADC3_Init+0xf4>)
 800297c:	f001 fcbc 	bl	80042f8 <HAL_ADC_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002986:	f000 fb51 	bl	800302c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <MX_ADC3_Init+0xfc>)
 800298c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800298e:	2306      	movs	r3, #6
 8002990:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8002992:	2306      	movs	r3, #6
 8002994:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002996:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800299a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800299c:	2304      	movs	r3, #4
 800299e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4813      	ldr	r0, [pc, #76]	; (80029f8 <MX_ADC3_Init+0xf4>)
 80029aa:	f001 ff27 	bl	80047fc <HAL_ADC_ConfigChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80029b4:	f000 fb3a 	bl	800302c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_ADC3_Init+0x100>)
 80029ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80029bc:	230c      	movs	r3, #12
 80029be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	480c      	ldr	r0, [pc, #48]	; (80029f8 <MX_ADC3_Init+0xf4>)
 80029c6:	f001 ff19 	bl	80047fc <HAL_ADC_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80029d0:	f000 fb2c 	bl	800302c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <MX_ADC3_Init+0x104>)
 80029d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80029d8:	2312      	movs	r3, #18
 80029da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <MX_ADC3_Init+0xf4>)
 80029e2:	f001 ff0b 	bl	80047fc <HAL_ADC_ConfigChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80029ec:	f000 fb1e 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	240009d0 	.word	0x240009d0
 80029fc:	58026000 	.word	0x58026000
 8002a00:	04300002 	.word	0x04300002
 8002a04:	2a000400 	.word	0x2a000400
 8002a08:	2e300800 	.word	0x2e300800

08002a0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_TIM7_Init+0x68>)
 8002a1e:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <MX_TIM7_Init+0x6c>)
 8002a20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <MX_TIM7_Init+0x68>)
 8002a24:	f640 125f 	movw	r2, #2399	; 0x95f
 8002a28:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <MX_TIM7_Init+0x68>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <MX_TIM7_Init+0x68>)
 8002a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <MX_TIM7_Init+0x68>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <MX_TIM7_Init+0x68>)
 8002a40:	f008 fb66 	bl	800b110 <HAL_TIM_Base_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002a4a:	f000 faef 	bl	800302c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4806      	ldr	r0, [pc, #24]	; (8002a74 <MX_TIM7_Init+0x68>)
 8002a5c:	f008 fd90 	bl	800b580 <HAL_TIMEx_MasterConfigSynchronization>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002a66:	f000 fae1 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	24000ce4 	.word	0x24000ce4
 8002a78:	40001400 	.word	0x40001400

08002a7c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <MX_UART7_Init+0x90>)
 8002a82:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <MX_UART7_Init+0x94>)
 8002a84:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8002a86:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <MX_UART7_Init+0x90>)
 8002a88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a8c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <MX_UART7_Init+0x90>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <MX_UART7_Init+0x90>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <MX_UART7_Init+0x90>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <MX_UART7_Init+0x90>)
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <MX_UART7_Init+0x90>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <MX_UART7_Init+0x90>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <MX_UART7_Init+0x90>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <MX_UART7_Init+0x90>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <MX_UART7_Init+0x90>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ac4:	4811      	ldr	r0, [pc, #68]	; (8002b0c <MX_UART7_Init+0x90>)
 8002ac6:	f008 fe01 	bl	800b6cc <HAL_UART_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002ad0:	f000 faac 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	480d      	ldr	r0, [pc, #52]	; (8002b0c <MX_UART7_Init+0x90>)
 8002ad8:	f00c f953 	bl	800ed82 <HAL_UARTEx_SetTxFifoThreshold>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002ae2:	f000 faa3 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4808      	ldr	r0, [pc, #32]	; (8002b0c <MX_UART7_Init+0x90>)
 8002aea:	f00c f988 	bl	800edfe <HAL_UARTEx_SetRxFifoThreshold>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002af4:	f000 fa9a 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002af8:	4804      	ldr	r0, [pc, #16]	; (8002b0c <MX_UART7_Init+0x90>)
 8002afa:	f00c f909 	bl	800ed10 <HAL_UARTEx_DisableFifoMode>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002b04:	f000 fa92 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2400020c 	.word	0x2400020c
 8002b10:	40007800 	.word	0x40007800

08002b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <MX_USART1_UART_Init+0x94>)
 8002b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b26:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b5c:	4811      	ldr	r0, [pc, #68]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b5e:	f008 fdb5 	bl	800b6cc <HAL_UART_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b68:	f000 fa60 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b70:	f00c f907 	bl	800ed82 <HAL_UARTEx_SetTxFifoThreshold>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b7a:	f000 fa57 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4808      	ldr	r0, [pc, #32]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b82:	f00c f93c 	bl	800edfe <HAL_UARTEx_SetRxFifoThreshold>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b8c:	f000 fa4e 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b90:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <MX_USART1_UART_Init+0x90>)
 8002b92:	f00c f8bd 	bl	800ed10 <HAL_UARTEx_DisableFifoMode>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b9c:	f000 fa46 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	24000ae0 	.word	0x24000ae0
 8002ba8:	40011000 	.word	0x40011000

08002bac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bb0:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bb2:	4a23      	ldr	r2, [pc, #140]	; (8002c40 <MX_USART3_UART_Init+0x94>)
 8002bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bb8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd6:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bdc:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be2:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf4:	4811      	ldr	r0, [pc, #68]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002bf6:	f008 fd69 	bl	800b6cc <HAL_UART_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c00:	f000 fa14 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c04:	2100      	movs	r1, #0
 8002c06:	480d      	ldr	r0, [pc, #52]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002c08:	f00c f8bb 	bl	800ed82 <HAL_UARTEx_SetTxFifoThreshold>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002c12:	f000 fa0b 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c16:	2100      	movs	r1, #0
 8002c18:	4808      	ldr	r0, [pc, #32]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002c1a:	f00c f8f0 	bl	800edfe <HAL_UARTEx_SetRxFifoThreshold>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002c24:	f000 fa02 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c28:	4804      	ldr	r0, [pc, #16]	; (8002c3c <MX_USART3_UART_Init+0x90>)
 8002c2a:	f00c f871 	bl	800ed10 <HAL_UARTEx_DisableFifoMode>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002c34:	f000 f9fa 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	24000364 	.word	0x24000364
 8002c40:	40004800 	.word	0x40004800

08002c44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c4a:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <MX_USART6_UART_Init+0x94>)
 8002c4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002c4e:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c8c:	4811      	ldr	r0, [pc, #68]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002c8e:	f008 fd1d 	bl	800b6cc <HAL_UART_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002c98:	f000 f9c8 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002ca0:	f00c f86f 	bl	800ed82 <HAL_UARTEx_SetTxFifoThreshold>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002caa:	f000 f9bf 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002cb2:	f00c f8a4 	bl	800edfe <HAL_UARTEx_SetRxFifoThreshold>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002cbc:	f000 f9b6 	bl	800302c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002cc0:	4804      	ldr	r0, [pc, #16]	; (8002cd4 <MX_USART6_UART_Init+0x90>)
 8002cc2:	f00c f825 	bl	800ed10 <HAL_UARTEx_DisableFifoMode>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002ccc:	f000 f9ae 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002cd0:	bf00      	nop
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	24000bf4 	.word	0x24000bf4
 8002cd8:	40011400 	.word	0x40011400

08002cdc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <MX_DMA_Init+0x8c>)
 8002ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <MX_DMA_Init+0x8c>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <MX_DMA_Init+0x8c>)
 8002cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <MX_DMA_Init+0x8c>)
 8002d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d06:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <MX_DMA_Init+0x8c>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <MX_DMA_Init+0x8c>)
 8002d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	200b      	movs	r0, #11
 8002d24:	f002 fb69 	bl	80053fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d28:	200b      	movs	r0, #11
 8002d2a:	f002 fb80 	bl	800542e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	200d      	movs	r0, #13
 8002d34:	f002 fb61 	bl	80053fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002d38:	200d      	movs	r0, #13
 8002d3a:	f002 fb78 	bl	800542e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	200e      	movs	r0, #14
 8002d44:	f002 fb59 	bl	80053fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d48:	200e      	movs	r0, #14
 8002d4a:	f002 fb70 	bl	800542e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	203a      	movs	r0, #58	; 0x3a
 8002d54:	f002 fb51 	bl	80053fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002d58:	203a      	movs	r0, #58	; 0x3a
 8002d5a:	f002 fb68 	bl	800542e <HAL_NVIC_EnableIRQ>

}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	58024400 	.word	0x58024400

08002d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	; 0x30
 8002d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d82:	4ba3      	ldr	r3, [pc, #652]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d88:	4aa1      	ldr	r2, [pc, #644]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002d8a:	f043 0304 	orr.w	r3, r3, #4
 8002d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d92:	4b9f      	ldr	r3, [pc, #636]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002da0:	4b9b      	ldr	r3, [pc, #620]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da6:	4a9a      	ldr	r2, [pc, #616]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002da8:	f043 0320 	orr.w	r3, r3, #32
 8002dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002db0:	4b97      	ldr	r3, [pc, #604]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b94      	ldr	r3, [pc, #592]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc4:	4a92      	ldr	r2, [pc, #584]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dce:	4b90      	ldr	r3, [pc, #576]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ddc:	4b8c      	ldr	r3, [pc, #560]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de2:	4a8b      	ldr	r2, [pc, #556]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dec:	4b88      	ldr	r3, [pc, #544]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dfa:	4b85      	ldr	r3, [pc, #532]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e00:	4a83      	ldr	r2, [pc, #524]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e0a:	4b81      	ldr	r3, [pc, #516]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e18:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1e:	4a7c      	ldr	r2, [pc, #496]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002e20:	f043 0310 	orr.w	r3, r3, #16
 8002e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e28:	4b79      	ldr	r3, [pc, #484]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3c:	4a74      	ldr	r2, [pc, #464]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e46:	4b72      	ldr	r3, [pc, #456]	; (8003010 <MX_GPIO_Init+0x2a4>)
 8002e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, passArm_Pin|GPIO_PIN_8|GPIO_PIN_9|passHand_Pin, GPIO_PIN_RESET);
 8002e54:	2200      	movs	r2, #0
 8002e56:	f240 7104 	movw	r1, #1796	; 0x704
 8002e5a:	486e      	ldr	r0, [pc, #440]	; (8003014 <MX_GPIO_Init+0x2a8>)
 8002e5c:	f005 fada 	bl	8008414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2110      	movs	r1, #16
 8002e64:	486c      	ldr	r0, [pc, #432]	; (8003018 <MX_GPIO_Init+0x2ac>)
 8002e66:	f005 fad5 	bl	8008414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f242 01e7 	movw	r1, #8423	; 0x20e7
 8002e70:	486a      	ldr	r0, [pc, #424]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002e72:	f005 facf 	bl	8008414 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8002e76:	2200      	movs	r2, #0
 8002e78:	f643 717d 	movw	r1, #16253	; 0x3f7d
 8002e7c:	4868      	ldr	r0, [pc, #416]	; (8003020 <MX_GPIO_Init+0x2b4>)
 8002e7e:	f005 fac9 	bl	8008414 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|leftArmDir_Pin 
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2182      	movs	r1, #130	; 0x82
 8002e86:	4867      	ldr	r0, [pc, #412]	; (8003024 <MX_GPIO_Init+0x2b8>)
 8002e88:	f005 fac4 	bl	8008414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 8002e92:	4865      	ldr	r0, [pc, #404]	; (8003028 <MX_GPIO_Init+0x2bc>)
 8002e94:	f005 fabe 	bl	8008414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : flashButton_Pin */
  GPIO_InitStruct.Pin = flashButton_Pin;
 8002e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(flashButton_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	f107 031c 	add.w	r3, r7, #28
 8002eaa:	4619      	mov	r1, r3
 8002eac:	485a      	ldr	r0, [pc, #360]	; (8003018 <MX_GPIO_Init+0x2ac>)
 8002eae:	f005 f8e9 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4853      	ldr	r0, [pc, #332]	; (8003014 <MX_GPIO_Init+0x2a8>)
 8002ec6:	f005 f8dd 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : passArm_Pin PA8 PA9 passHand_Pin */
  GPIO_InitStruct.Pin = passArm_Pin|GPIO_PIN_8|GPIO_PIN_9|passHand_Pin;
 8002eca:	f240 7304 	movw	r3, #1796	; 0x704
 8002ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	484c      	ldr	r0, [pc, #304]	; (8003014 <MX_GPIO_Init+0x2a8>)
 8002ee4:	f005 f8ce 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ee8:	2310      	movs	r3, #16
 8002eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eec:	2301      	movs	r3, #1
 8002eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	4846      	ldr	r0, [pc, #280]	; (8003018 <MX_GPIO_Init+0x2ac>)
 8002f00:	f005 f8c0 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8002f04:	f242 03e7 	movw	r3, #8423	; 0x20e7
 8002f08:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	483f      	ldr	r0, [pc, #252]	; (800301c <MX_GPIO_Init+0x2b0>)
 8002f1e:	f005 f8b1 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002f22:	230d      	movs	r3, #13
 8002f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f26:	2301      	movs	r3, #1
 8002f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f32:	f107 031c 	add.w	r3, r7, #28
 8002f36:	4619      	mov	r1, r3
 8002f38:	4839      	ldr	r0, [pc, #228]	; (8003020 <MX_GPIO_Init+0x2b4>)
 8002f3a:	f005 f8a3 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f42:	2301      	movs	r3, #1
 8002f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8002f4e:	f107 031c 	add.w	r3, r7, #28
 8002f52:	4619      	mov	r1, r3
 8002f54:	4833      	ldr	r0, [pc, #204]	; (8003024 <MX_GPIO_Init+0x2b8>)
 8002f56:	f005 f895 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : flashSwitch_Pin */
  GPIO_InitStruct.Pin = flashSwitch_Pin;
 8002f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(flashSwitch_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	482d      	ldr	r0, [pc, #180]	; (8003024 <MX_GPIO_Init+0x2b8>)
 8002f70:	f005 f888 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8002f74:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8002f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4826      	ldr	r0, [pc, #152]	; (8003028 <MX_GPIO_Init+0x2bc>)
 8002f8e:	f005 f879 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8002f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4619      	mov	r1, r3
 8002faa:	481f      	ldr	r0, [pc, #124]	; (8003028 <MX_GPIO_Init+0x2bc>)
 8002fac:	f005 f86a 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8002fb0:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8002fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fc2:	f107 031c 	add.w	r3, r7, #28
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4815      	ldr	r0, [pc, #84]	; (8003020 <MX_GPIO_Init+0x2b4>)
 8002fca:	f005 f85b 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8002fce:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8002fd2:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fe0:	f107 031c 	add.w	r3, r7, #28
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480e      	ldr	r0, [pc, #56]	; (8003020 <MX_GPIO_Init+0x2b4>)
 8002fe8:	f005 f84c 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8002fec:	2302      	movs	r3, #2
 8002fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	4808      	ldr	r0, [pc, #32]	; (8003024 <MX_GPIO_Init+0x2b8>)
 8003004:	f005 f83e 	bl	8008084 <HAL_GPIO_Init>

}
 8003008:	bf00      	nop
 800300a:	3730      	adds	r7, #48	; 0x30
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	58024400 	.word	0x58024400
 8003014:	58020000 	.word	0x58020000
 8003018:	58020800 	.word	0x58020800
 800301c:	58020400 	.word	0x58020400
 8003020:	58021800 	.word	0x58021800
 8003024:	58021000 	.word	0x58021000
 8003028:	58020c00 	.word	0x58020c00

0800302c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_MspInit+0x30>)
 8003044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003048:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_MspInit+0x30>)
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_MspInit+0x30>)
 8003054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	58024400 	.word	0x58024400

08003070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a33      	ldr	r2, [pc, #204]	; (800315c <HAL_ADC_MspInit+0xec>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d15f      	bne.n	8003152 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003092:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_ADC_MspInit+0xf0>)
 8003094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003098:	4a31      	ldr	r2, [pc, #196]	; (8003160 <HAL_ADC_MspInit+0xf0>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <HAL_ADC_MspInit+0xf0>)
 80030a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b0:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <HAL_ADC_MspInit+0xf0>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b6:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_ADC_MspInit+0xf0>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_ADC_MspInit+0xf0>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 80030ce:	2303      	movs	r3, #3
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d2:	2303      	movs	r3, #3
 80030d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	4820      	ldr	r0, [pc, #128]	; (8003164 <HAL_ADC_MspInit+0xf4>)
 80030e2:	f004 ffcf 	bl	8008084 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80030e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80030ea:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80030ee:	f000 ff11 	bl	8003f14 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_ADC_MspInit+0xfc>)
 80030f6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 80030fa:	2273      	movs	r2, #115	; 0x73
 80030fc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 800310c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003110:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 8003114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003118:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 800311c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003120:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 8003124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003128:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 8003132:	2200      	movs	r2, #0
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003136:	480c      	ldr	r0, [pc, #48]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 8003138:	f002 f994 	bl	8005464 <HAL_DMA_Init>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8003142:	f7ff ff73 	bl	800302c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 800314a:	64da      	str	r2, [r3, #76]	; 0x4c
 800314c:	4a06      	ldr	r2, [pc, #24]	; (8003168 <HAL_ADC_MspInit+0xf8>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003152:	bf00      	nop
 8003154:	3728      	adds	r7, #40	; 0x28
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	58026000 	.word	0x58026000
 8003160:	58024400 	.word	0x58024400
 8003164:	58020800 	.word	0x58020800
 8003168:	24000868 	.word	0x24000868
 800316c:	40020040 	.word	0x40020040

08003170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <HAL_TIM_Base_MspInit+0x48>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d116      	bne.n	80031b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <HAL_TIM_Base_MspInit+0x4c>)
 8003184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003188:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <HAL_TIM_Base_MspInit+0x4c>)
 800318a:	f043 0320 	orr.w	r3, r3, #32
 800318e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_TIM_Base_MspInit+0x4c>)
 8003194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80031a0:	2200      	movs	r2, #0
 80031a2:	2100      	movs	r1, #0
 80031a4:	2037      	movs	r0, #55	; 0x37
 80031a6:	f002 f928 	bl	80053fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031aa:	2037      	movs	r0, #55	; 0x37
 80031ac:	f002 f93f 	bl	800542e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40001400 	.word	0x40001400
 80031bc:	58024400 	.word	0x58024400

080031c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b090      	sub	sp, #64	; 0x40
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a9a      	ldr	r2, [pc, #616]	; (8003448 <HAL_UART_MspInit+0x288>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d164      	bne.n	80032ac <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80031e2:	4b9a      	ldr	r3, [pc, #616]	; (800344c <HAL_UART_MspInit+0x28c>)
 80031e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e8:	4a98      	ldr	r2, [pc, #608]	; (800344c <HAL_UART_MspInit+0x28c>)
 80031ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031f2:	4b96      	ldr	r3, [pc, #600]	; (800344c <HAL_UART_MspInit+0x28c>)
 80031f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003200:	4b92      	ldr	r3, [pc, #584]	; (800344c <HAL_UART_MspInit+0x28c>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003206:	4a91      	ldr	r2, [pc, #580]	; (800344c <HAL_UART_MspInit+0x28c>)
 8003208:	f043 0320 	orr.w	r3, r3, #32
 800320c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003210:	4b8e      	ldr	r3, [pc, #568]	; (800344c <HAL_UART_MspInit+0x28c>)
 8003212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 800321e:	23c0      	movs	r3, #192	; 0xc0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322a:	2300      	movs	r3, #0
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800322e:	2307      	movs	r3, #7
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003236:	4619      	mov	r1, r3
 8003238:	4885      	ldr	r0, [pc, #532]	; (8003450 <HAL_UART_MspInit+0x290>)
 800323a:	f004 ff23 	bl	8008084 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream0;
 800323e:	4b85      	ldr	r3, [pc, #532]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003240:	4a85      	ldr	r2, [pc, #532]	; (8003458 <HAL_UART_MspInit+0x298>)
 8003242:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8003244:	4b83      	ldr	r3, [pc, #524]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003246:	224f      	movs	r2, #79	; 0x4f
 8003248:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800324a:	4b82      	ldr	r3, [pc, #520]	; (8003454 <HAL_UART_MspInit+0x294>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003250:	4b80      	ldr	r3, [pc, #512]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003256:	4b7f      	ldr	r3, [pc, #508]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800325e:	4b7d      	ldr	r3, [pc, #500]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003264:	4b7b      	ldr	r3, [pc, #492]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003266:	2200      	movs	r2, #0
 8003268:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800326a:	4b7a      	ldr	r3, [pc, #488]	; (8003454 <HAL_UART_MspInit+0x294>)
 800326c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003270:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003272:	4b78      	ldr	r3, [pc, #480]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003278:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_UART_MspInit+0x294>)
 800327a:	2200      	movs	r2, #0
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800327e:	4875      	ldr	r0, [pc, #468]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003280:	f002 f8f0 	bl	8005464 <HAL_DMA_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800328a:	f7ff fecf 	bl	800302c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a70      	ldr	r2, [pc, #448]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003292:	679a      	str	r2, [r3, #120]	; 0x78
 8003294:	4a6f      	ldr	r2, [pc, #444]	; (8003454 <HAL_UART_MspInit+0x294>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	2104      	movs	r1, #4
 800329e:	2052      	movs	r0, #82	; 0x52
 80032a0:	f002 f8ab 	bl	80053fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80032a4:	2052      	movs	r0, #82	; 0x52
 80032a6:	f002 f8c2 	bl	800542e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032aa:	e120      	b.n	80034ee <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6a      	ldr	r2, [pc, #424]	; (800345c <HAL_UART_MspInit+0x29c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d165      	bne.n	8003382 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032b6:	4b65      	ldr	r3, [pc, #404]	; (800344c <HAL_UART_MspInit+0x28c>)
 80032b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032bc:	4a63      	ldr	r2, [pc, #396]	; (800344c <HAL_UART_MspInit+0x28c>)
 80032be:	f043 0310 	orr.w	r3, r3, #16
 80032c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032c6:	4b61      	ldr	r3, [pc, #388]	; (800344c <HAL_UART_MspInit+0x28c>)
 80032c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d4:	4b5d      	ldr	r3, [pc, #372]	; (800344c <HAL_UART_MspInit+0x28c>)
 80032d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032da:	4a5c      	ldr	r2, [pc, #368]	; (800344c <HAL_UART_MspInit+0x28c>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e4:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_UART_MspInit+0x28c>)
 80032e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 80032f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	2300      	movs	r3, #0
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003304:	2304      	movs	r3, #4
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800330c:	4619      	mov	r1, r3
 800330e:	4854      	ldr	r0, [pc, #336]	; (8003460 <HAL_UART_MspInit+0x2a0>)
 8003310:	f004 feb8 	bl	8008084 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 8003316:	4a54      	ldr	r2, [pc, #336]	; (8003468 <HAL_UART_MspInit+0x2a8>)
 8003318:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800331a:	4b52      	ldr	r3, [pc, #328]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 800331c:	2229      	movs	r2, #41	; 0x29
 800331e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003326:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 8003328:	2200      	movs	r2, #0
 800332a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800332c:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 800332e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003332:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003334:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 8003336:	2200      	movs	r2, #0
 8003338:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800333a:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 8003342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003346:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003348:	4b46      	ldr	r3, [pc, #280]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 800334a:	2200      	movs	r2, #0
 800334c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800334e:	4b45      	ldr	r3, [pc, #276]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 8003350:	2200      	movs	r2, #0
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003354:	4843      	ldr	r0, [pc, #268]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 8003356:	f002 f885 	bl	8005464 <HAL_DMA_Init>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8003360:	f7ff fe64 	bl	800302c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3f      	ldr	r2, [pc, #252]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 8003368:	679a      	str	r2, [r3, #120]	; 0x78
 800336a:	4a3e      	ldr	r2, [pc, #248]	; (8003464 <HAL_UART_MspInit+0x2a4>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003370:	2200      	movs	r2, #0
 8003372:	2101      	movs	r1, #1
 8003374:	2025      	movs	r0, #37	; 0x25
 8003376:	f002 f840 	bl	80053fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800337a:	2025      	movs	r0, #37	; 0x25
 800337c:	f002 f857 	bl	800542e <HAL_NVIC_EnableIRQ>
}
 8003380:	e0b5      	b.n	80034ee <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART3)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a39      	ldr	r2, [pc, #228]	; (800346c <HAL_UART_MspInit+0x2ac>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d175      	bne.n	8003478 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800338c:	4b2f      	ldr	r3, [pc, #188]	; (800344c <HAL_UART_MspInit+0x28c>)
 800338e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003392:	4a2e      	ldr	r2, [pc, #184]	; (800344c <HAL_UART_MspInit+0x28c>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003398:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_UART_MspInit+0x28c>)
 800339e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_UART_MspInit+0x28c>)
 80033ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b0:	4a26      	ldr	r2, [pc, #152]	; (800344c <HAL_UART_MspInit+0x28c>)
 80033b2:	f043 0302 	orr.w	r3, r3, #2
 80033b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_UART_MspInit+0x28c>)
 80033bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 80033c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033da:	2307      	movs	r3, #7
 80033dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e2:	4619      	mov	r1, r3
 80033e4:	481e      	ldr	r0, [pc, #120]	; (8003460 <HAL_UART_MspInit+0x2a0>)
 80033e6:	f004 fe4d 	bl	8008084 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 80033ea:	4b21      	ldr	r3, [pc, #132]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 80033ec:	4a21      	ldr	r2, [pc, #132]	; (8003474 <HAL_UART_MspInit+0x2b4>)
 80033ee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 80033f2:	222d      	movs	r2, #45	; 0x2d
 80033f4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033fc:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 80033fe:	2200      	movs	r2, #0
 8003400:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 8003404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003408:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 800340c:	2200      	movs	r2, #0
 800340e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 8003412:	2200      	movs	r2, #0
 8003414:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 8003418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800341c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 8003420:	2200      	movs	r2, #0
 8003422:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 8003426:	2200      	movs	r2, #0
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800342a:	4811      	ldr	r0, [pc, #68]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 800342c:	f002 f81a 	bl	8005464 <HAL_DMA_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8003436:	f7ff fdf9 	bl	800302c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 800343e:	679a      	str	r2, [r3, #120]	; 0x78
 8003440:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <HAL_UART_MspInit+0x2b0>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003446:	e052      	b.n	80034ee <HAL_UART_MspInit+0x32e>
 8003448:	40007800 	.word	0x40007800
 800344c:	58024400 	.word	0x58024400
 8003450:	58021400 	.word	0x58021400
 8003454:	24000950 	.word	0x24000950
 8003458:	40020010 	.word	0x40020010
 800345c:	40011000 	.word	0x40011000
 8003460:	58020400 	.word	0x58020400
 8003464:	24000a38 	.word	0x24000a38
 8003468:	40020058 	.word	0x40020058
 800346c:	40004800 	.word	0x40004800
 8003470:	240002e0 	.word	0x240002e0
 8003474:	40020440 	.word	0x40020440
  else if(huart->Instance==USART6)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <HAL_UART_MspInit+0x338>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d135      	bne.n	80034ee <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003482:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <HAL_UART_MspInit+0x33c>)
 8003484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003488:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <HAL_UART_MspInit+0x33c>)
 800348a:	f043 0320 	orr.w	r3, r3, #32
 800348e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_UART_MspInit+0x33c>)
 8003494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a0:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_UART_MspInit+0x33c>)
 80034a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a6:	4a15      	ldr	r2, [pc, #84]	; (80034fc <HAL_UART_MspInit+0x33c>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_UART_MspInit+0x33c>)
 80034b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 80034be:	23c0      	movs	r3, #192	; 0xc0
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80034ce:	2307      	movs	r3, #7
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d6:	4619      	mov	r1, r3
 80034d8:	4809      	ldr	r0, [pc, #36]	; (8003500 <HAL_UART_MspInit+0x340>)
 80034da:	f004 fdd3 	bl	8008084 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2102      	movs	r1, #2
 80034e2:	2047      	movs	r0, #71	; 0x47
 80034e4:	f001 ff89 	bl	80053fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80034e8:	2047      	movs	r0, #71	; 0x47
 80034ea:	f001 ffa0 	bl	800542e <HAL_NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3740      	adds	r7, #64	; 0x40
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40011400 	.word	0x40011400
 80034fc:	58024400 	.word	0x58024400
 8003500:	58020800 	.word	0x58020800

08003504 <kalmanFilter_Pitch>:
double P_Rigt = 2;         //covariance estimation (err_estimate)
double R_Rigt = 2;         //covariance of the observation noise (err_measure)
double Q_Rigt = 0.0009;    //process variance

double kalmanFilter_Pitch(double mea)
{
 8003504:	b490      	push	{r4, r7}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Pitch = P_Pitch /(P_Pitch + R_Pitch);
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <kalmanFilter_Pitch+0xb4>)
 8003510:	ed93 5b00 	vldr	d5, [r3]
 8003514:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <kalmanFilter_Pitch+0xb4>)
 8003516:	ed93 6b00 	vldr	d6, [r3]
 800351a:	4b28      	ldr	r3, [pc, #160]	; (80035bc <kalmanFilter_Pitch+0xb8>)
 800351c:	ed93 7b00 	vldr	d7, [r3]
 8003520:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003524:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <kalmanFilter_Pitch+0xbc>)
 800352a:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k] = x_Pitch[k-1] + kalmanGain_Pitch *(mea - x_Pitch[k-1]);
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <kalmanFilter_Pitch+0xc0>)
 8003530:	ed93 6b00 	vldr	d6, [r3]
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <kalmanFilter_Pitch+0xc0>)
 8003536:	ed93 7b00 	vldr	d7, [r3]
 800353a:	ed97 5b00 	vldr	d5, [r7]
 800353e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8003542:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <kalmanFilter_Pitch+0xbc>)
 8003544:	ed93 7b00 	vldr	d7, [r3]
 8003548:	ee25 7b07 	vmul.f64	d7, d5, d7
 800354c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <kalmanFilter_Pitch+0xc0>)
 8003552:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Pitch =  (1.0 - kalmanGain_Pitch) *P_Pitch + fabs(x_Pitch[k-1]-x_Pitch[k]) *Q_Pitch;
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <kalmanFilter_Pitch+0xbc>)
 8003558:	ed93 7b00 	vldr	d7, [r3]
 800355c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003560:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <kalmanFilter_Pitch+0xb4>)
 8003566:	ed93 7b00 	vldr	d7, [r3]
 800356a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <kalmanFilter_Pitch+0xc0>)
 8003570:	ed93 5b00 	vldr	d5, [r3]
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <kalmanFilter_Pitch+0xc0>)
 8003576:	ed93 7b02 	vldr	d7, [r3, #8]
 800357a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800357e:	eeb0 5bc7 	vabs.f64	d5, d7
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <kalmanFilter_Pitch+0xc4>)
 8003584:	ed93 7b00 	vldr	d7, [r3]
 8003588:	ee25 7b07 	vmul.f64	d7, d5, d7
 800358c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <kalmanFilter_Pitch+0xb4>)
 8003592:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k-1] = x_Pitch[k];
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <kalmanFilter_Pitch+0xc0>)
 8003598:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800359c:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <kalmanFilter_Pitch+0xc0>)
 800359e:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Pitch[k];
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <kalmanFilter_Pitch+0xc0>)
 80035a4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80035a8:	ec44 3b17 	vmov	d7, r3, r4
}
 80035ac:	eeb0 0b47 	vmov.f64	d0, d7
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc90      	pop	{r4, r7}
 80035b6:	4770      	bx	lr
 80035b8:	240000a0 	.word	0x240000a0
 80035bc:	240000a8 	.word	0x240000a8
 80035c0:	24000d30 	.word	0x24000d30
 80035c4:	24000d60 	.word	0x24000d60
 80035c8:	240000b0 	.word	0x240000b0

080035cc <kalmanFilter_Left>:

double kalmanFilter_Left(double mea)
{
 80035cc:	b490      	push	{r4, r7}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Left = P_Left /(P_Left + R_Left);
 80035d6:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <kalmanFilter_Left+0xb4>)
 80035d8:	ed93 5b00 	vldr	d5, [r3]
 80035dc:	4b28      	ldr	r3, [pc, #160]	; (8003680 <kalmanFilter_Left+0xb4>)
 80035de:	ed93 6b00 	vldr	d6, [r3]
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <kalmanFilter_Left+0xb8>)
 80035e4:	ed93 7b00 	vldr	d7, [r3]
 80035e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80035ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <kalmanFilter_Left+0xbc>)
 80035f2:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k] = x_Left[k-1] + kalmanGain_Left *(mea - x_Left[k-1]);
 80035f6:	4b25      	ldr	r3, [pc, #148]	; (800368c <kalmanFilter_Left+0xc0>)
 80035f8:	ed93 6b00 	vldr	d6, [r3]
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <kalmanFilter_Left+0xc0>)
 80035fe:	ed93 7b00 	vldr	d7, [r3]
 8003602:	ed97 5b00 	vldr	d5, [r7]
 8003606:	ee35 5b47 	vsub.f64	d5, d5, d7
 800360a:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <kalmanFilter_Left+0xbc>)
 800360c:	ed93 7b00 	vldr	d7, [r3]
 8003610:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003614:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003618:	4b1c      	ldr	r3, [pc, #112]	; (800368c <kalmanFilter_Left+0xc0>)
 800361a:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Left =  (1.0 - kalmanGain_Left) *P_Left + fabs(x_Left[k-1]-x_Left[k]) *Q_Left;
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <kalmanFilter_Left+0xbc>)
 8003620:	ed93 7b00 	vldr	d7, [r3]
 8003624:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003628:	ee36 6b47 	vsub.f64	d6, d6, d7
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <kalmanFilter_Left+0xb4>)
 800362e:	ed93 7b00 	vldr	d7, [r3]
 8003632:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <kalmanFilter_Left+0xc0>)
 8003638:	ed93 5b00 	vldr	d5, [r3]
 800363c:	4b13      	ldr	r3, [pc, #76]	; (800368c <kalmanFilter_Left+0xc0>)
 800363e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003642:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003646:	eeb0 5bc7 	vabs.f64	d5, d7
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <kalmanFilter_Left+0xc4>)
 800364c:	ed93 7b00 	vldr	d7, [r3]
 8003650:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003654:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <kalmanFilter_Left+0xb4>)
 800365a:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k-1] = x_Left[k];
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <kalmanFilter_Left+0xc0>)
 8003660:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003664:	4a09      	ldr	r2, [pc, #36]	; (800368c <kalmanFilter_Left+0xc0>)
 8003666:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Left[k];
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <kalmanFilter_Left+0xc0>)
 800366c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003670:	ec44 3b17 	vmov	d7, r3, r4
}
 8003674:	eeb0 0b47 	vmov.f64	d0, d7
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bc90      	pop	{r4, r7}
 800367e:	4770      	bx	lr
 8003680:	240000b8 	.word	0x240000b8
 8003684:	240000c0 	.word	0x240000c0
 8003688:	24000d78 	.word	0x24000d78
 800368c:	24000d80 	.word	0x24000d80
 8003690:	240000c8 	.word	0x240000c8

08003694 <kalmanFilter_Rigt>:

double kalmanFilter_Rigt(double mea)
{
 8003694:	b490      	push	{r4, r7}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Rigt = P_Rigt /(P_Rigt + R_Rigt);
 800369e:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <kalmanFilter_Rigt+0xb4>)
 80036a0:	ed93 5b00 	vldr	d5, [r3]
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <kalmanFilter_Rigt+0xb4>)
 80036a6:	ed93 6b00 	vldr	d6, [r3]
 80036aa:	4b28      	ldr	r3, [pc, #160]	; (800374c <kalmanFilter_Rigt+0xb8>)
 80036ac:	ed93 7b00 	vldr	d7, [r3]
 80036b0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80036b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <kalmanFilter_Rigt+0xbc>)
 80036ba:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k] = x_Rigt[k-1] + kalmanGain_Rigt *(mea - x_Rigt[k-1]);
 80036be:	4b25      	ldr	r3, [pc, #148]	; (8003754 <kalmanFilter_Rigt+0xc0>)
 80036c0:	ed93 6b00 	vldr	d6, [r3]
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <kalmanFilter_Rigt+0xc0>)
 80036c6:	ed93 7b00 	vldr	d7, [r3]
 80036ca:	ed97 5b00 	vldr	d5, [r7]
 80036ce:	ee35 5b47 	vsub.f64	d5, d5, d7
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <kalmanFilter_Rigt+0xbc>)
 80036d4:	ed93 7b00 	vldr	d7, [r3]
 80036d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80036dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <kalmanFilter_Rigt+0xc0>)
 80036e2:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Rigt =  (1.0 - kalmanGain_Rigt) *P_Rigt + fabs(x_Rigt[k-1]-x_Rigt[k]) *Q_Rigt;
 80036e6:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <kalmanFilter_Rigt+0xbc>)
 80036e8:	ed93 7b00 	vldr	d7, [r3]
 80036ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80036f0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <kalmanFilter_Rigt+0xb4>)
 80036f6:	ed93 7b00 	vldr	d7, [r3]
 80036fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <kalmanFilter_Rigt+0xc0>)
 8003700:	ed93 5b00 	vldr	d5, [r3]
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <kalmanFilter_Rigt+0xc0>)
 8003706:	ed93 7b02 	vldr	d7, [r3, #8]
 800370a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800370e:	eeb0 5bc7 	vabs.f64	d5, d7
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <kalmanFilter_Rigt+0xc4>)
 8003714:	ed93 7b00 	vldr	d7, [r3]
 8003718:	ee25 7b07 	vmul.f64	d7, d5, d7
 800371c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <kalmanFilter_Rigt+0xb4>)
 8003722:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k-1] = x_Rigt[k];
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <kalmanFilter_Rigt+0xc0>)
 8003728:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800372c:	4a09      	ldr	r2, [pc, #36]	; (8003754 <kalmanFilter_Rigt+0xc0>)
 800372e:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Rigt[k];
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <kalmanFilter_Rigt+0xc0>)
 8003734:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003738:	ec44 3b17 	vmov	d7, r3, r4
}
 800373c:	eeb0 0b47 	vmov.f64	d0, d7
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bc90      	pop	{r4, r7}
 8003746:	4770      	bx	lr
 8003748:	240000d0 	.word	0x240000d0
 800374c:	240000d8 	.word	0x240000d8
 8003750:	24000d70 	.word	0x24000d70
 8003754:	24000d90 	.word	0x24000d90
 8003758:	240000e0 	.word	0x240000e0

0800375c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <MemManage_Handler+0x4>

08003776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377a:	e7fe      	b.n	800377a <BusFault_Handler+0x4>

0800377c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <UsageFault_Handler+0x4>

08003782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <SysTick_Handler+0x2c>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <SysTick_Handler+0x2c>)
 80037ba:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <SysTick_Handler+0x2c>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d904      	bls.n	80037ce <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <SysTick_Handler+0x2c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 80037ca:	f7fd f883 	bl	80008d4 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ce:	f000 fb53 	bl	8003e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	24000ac8 	.word	0x24000ac8

080037dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <DMA1_Stream0_IRQHandler+0x10>)
 80037e2:	f002 fe49 	bl	8006478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	24000950 	.word	0x24000950

080037f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	rigtRawDistance = aRigt_Linear*adc3Value[0] + bRigt_Linear;
 80037f4:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <DMA1_Stream2_IRQHandler+0xc8>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003800:	4b2e      	ldr	r3, [pc, #184]	; (80038bc <DMA1_Stream2_IRQHandler+0xcc>)
 8003802:	ed93 7b00 	vldr	d7, [r3]
 8003806:	ee26 6b07 	vmul.f64	d6, d6, d7
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <DMA1_Stream2_IRQHandler+0xd0>)
 800380c:	ed93 7b00 	vldr	d7, [r3]
 8003810:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <DMA1_Stream2_IRQHandler+0xd4>)
 8003816:	ed83 7b00 	vstr	d7, [r3]
	leftRawDistance = aLeft_Linear*adc3Value[1] + bLeft_Linear;
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <DMA1_Stream2_IRQHandler+0xc8>)
 800381c:	885b      	ldrh	r3, [r3, #2]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <DMA1_Stream2_IRQHandler+0xd8>)
 8003828:	ed93 7b00 	vldr	d7, [r3]
 800382c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003830:	4b26      	ldr	r3, [pc, #152]	; (80038cc <DMA1_Stream2_IRQHandler+0xdc>)
 8003832:	ed93 7b00 	vldr	d7, [r3]
 8003836:	ee36 7b07 	vadd.f64	d7, d6, d7
 800383a:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <DMA1_Stream2_IRQHandler+0xe0>)
 800383c:	ed83 7b00 	vstr	d7, [r3]
	pitchRawDistance = aPitch_Linear*adc3Value[2] + bPitch_Linear;
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <DMA1_Stream2_IRQHandler+0xc8>)
 8003842:	889b      	ldrh	r3, [r3, #4]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800384c:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <DMA1_Stream2_IRQHandler+0xe4>)
 800384e:	ed93 7b00 	vldr	d7, [r3]
 8003852:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <DMA1_Stream2_IRQHandler+0xe8>)
 8003858:	ed93 7b00 	vldr	d7, [r3]
 800385c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <DMA1_Stream2_IRQHandler+0xec>)
 8003862:	ed83 7b00 	vstr	d7, [r3]
	rigtDistance = kalmanFilter_Rigt(rigtRawDistance);
 8003866:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <DMA1_Stream2_IRQHandler+0xd4>)
 8003868:	ed93 7b00 	vldr	d7, [r3]
 800386c:	eeb0 0b47 	vmov.f64	d0, d7
 8003870:	f7ff ff10 	bl	8003694 <kalmanFilter_Rigt>
 8003874:	eeb0 7b40 	vmov.f64	d7, d0
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <DMA1_Stream2_IRQHandler+0xf0>)
 800387a:	ed83 7b00 	vstr	d7, [r3]
	pitchDistance = kalmanFilter_Pitch(pitchRawDistance);
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <DMA1_Stream2_IRQHandler+0xec>)
 8003880:	ed93 7b00 	vldr	d7, [r3]
 8003884:	eeb0 0b47 	vmov.f64	d0, d7
 8003888:	f7ff fe3c 	bl	8003504 <kalmanFilter_Pitch>
 800388c:	eeb0 7b40 	vmov.f64	d7, d0
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <DMA1_Stream2_IRQHandler+0xf4>)
 8003892:	ed83 7b00 	vstr	d7, [r3]
	leftDistance = kalmanFilter_Left(leftRawDistance);
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <DMA1_Stream2_IRQHandler+0xe0>)
 8003898:	ed93 7b00 	vldr	d7, [r3]
 800389c:	eeb0 0b47 	vmov.f64	d0, d7
 80038a0:	f7ff fe94 	bl	80035cc <kalmanFilter_Left>
 80038a4:	eeb0 7b40 	vmov.f64	d7, d0
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <DMA1_Stream2_IRQHandler+0xf8>)
 80038aa:	ed83 7b00 	vstr	d7, [r3]

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80038ae:	480f      	ldr	r0, [pc, #60]	; (80038ec <DMA1_Stream2_IRQHandler+0xfc>)
 80038b0:	f002 fde2 	bl	8006478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	24000cdc 	.word	0x24000cdc
 80038bc:	240003f0 	.word	0x240003f0
 80038c0:	24000200 	.word	0x24000200
 80038c4:	240002d8 	.word	0x240002d8
 80038c8:	24000c88 	.word	0x24000c88
 80038cc:	24000850 	.word	0x24000850
 80038d0:	240001f0 	.word	0x240001f0
 80038d4:	24000ab0 	.word	0x24000ab0
 80038d8:	24000c98 	.word	0x24000c98
 80038dc:	24000d50 	.word	0x24000d50
 80038e0:	24000940 	.word	0x24000940
 80038e4:	24000cd0 	.word	0x24000cd0
 80038e8:	24000b90 	.word	0x24000b90
 80038ec:	24000868 	.word	0x24000868

080038f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <DMA1_Stream3_IRQHandler+0x24>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	b21a      	sxth	r2, r3
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <DMA1_Stream3_IRQHandler+0x24>)
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	b21b      	sxth	r3, r3
 8003902:	4313      	orrs	r3, r2
 8003904:	b21a      	sxth	r2, r3
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <DMA1_Stream3_IRQHandler+0x28>)
 8003908:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800390a:	4804      	ldr	r0, [pc, #16]	; (800391c <DMA1_Stream3_IRQHandler+0x2c>)
 800390c:	f002 fdb4 	bl	8006478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}
 8003914:	24000828 	.word	0x24000828
 8003918:	24000900 	.word	0x24000900
 800391c:	24000a38 	.word	0x24000a38

08003920 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <USART1_IRQHandler+0x10>)
 8003926:	f008 f99b 	bl	800bc60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	24000ae0 	.word	0x24000ae0

08003934 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <TIM7_IRQHandler+0x10>)
 800393a:	f007 fc3f 	bl	800b1bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	24000ce4 	.word	0x24000ce4

08003948 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 800394c:	4b8d      	ldr	r3, [pc, #564]	; (8003b84 <DMA2_Stream2_IRQHandler+0x23c>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b04      	cmp	r3, #4
 8003952:	f040 80ff 	bne.w	8003b54 <DMA2_Stream2_IRQHandler+0x20c>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8003956:	4b8c      	ldr	r3, [pc, #560]	; (8003b88 <DMA2_Stream2_IRQHandler+0x240>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	b2d1      	uxtb	r1, r2
 800395e:	4a8a      	ldr	r2, [pc, #552]	; (8003b88 <DMA2_Stream2_IRQHandler+0x240>)
 8003960:	7011      	strb	r1, [r2, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <DMA2_Stream2_IRQHandler+0x244>)
 8003966:	7819      	ldrb	r1, [r3, #0]
 8003968:	4b89      	ldr	r3, [pc, #548]	; (8003b90 <DMA2_Stream2_IRQHandler+0x248>)
 800396a:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 800396c:	4b86      	ldr	r3, [pc, #536]	; (8003b88 <DMA2_Stream2_IRQHandler+0x240>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b05      	cmp	r3, #5
 8003972:	f240 80ef 	bls.w	8003b54 <DMA2_Stream2_IRQHandler+0x20c>
		{
			PS2DataIndex = 0;
 8003976:	4b84      	ldr	r3, [pc, #528]	; (8003b88 <DMA2_Stream2_IRQHandler+0x240>)
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 800397c:	4b81      	ldr	r3, [pc, #516]	; (8003b84 <DMA2_Stream2_IRQHandler+0x23c>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8003982:	4b83      	ldr	r3, [pc, #524]	; (8003b90 <DMA2_Stream2_IRQHandler+0x248>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	b21a      	sxth	r2, r3
 800398a:	4b81      	ldr	r3, [pc, #516]	; (8003b90 <DMA2_Stream2_IRQHandler+0x248>)
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	b21b      	sxth	r3, r3
 8003990:	4313      	orrs	r3, r2
 8003992:	b21a      	sxth	r2, r3
 8003994:	4b7f      	ldr	r3, [pc, #508]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003996:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 8003998:	4b7d      	ldr	r3, [pc, #500]	; (8003b90 <DMA2_Stream2_IRQHandler+0x248>)
 800399a:	789b      	ldrb	r3, [r3, #2]
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b7e      	ldr	r3, [pc, #504]	; (8003b98 <DMA2_Stream2_IRQHandler+0x250>)
 80039a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b21a      	sxth	r2, r3
 80039ac:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <DMA2_Stream2_IRQHandler+0x254>)
 80039ae:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 80039b0:	4b77      	ldr	r3, [pc, #476]	; (8003b90 <DMA2_Stream2_IRQHandler+0x248>)
 80039b2:	78db      	ldrb	r3, [r3, #3]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	4b7a      	ldr	r3, [pc, #488]	; (8003ba0 <DMA2_Stream2_IRQHandler+0x258>)
 80039b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	b21a      	sxth	r2, r3
 80039c4:	4b77      	ldr	r3, [pc, #476]	; (8003ba4 <DMA2_Stream2_IRQHandler+0x25c>)
 80039c6:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 80039c8:	4b71      	ldr	r3, [pc, #452]	; (8003b90 <DMA2_Stream2_IRQHandler+0x248>)
 80039ca:	791b      	ldrb	r3, [r3, #4]
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <DMA2_Stream2_IRQHandler+0x260>)
 80039d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b21a      	sxth	r2, r3
 80039dc:	4b73      	ldr	r3, [pc, #460]	; (8003bac <DMA2_Stream2_IRQHandler+0x264>)
 80039de:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 80039e0:	4b6b      	ldr	r3, [pc, #428]	; (8003b90 <DMA2_Stream2_IRQHandler+0x248>)
 80039e2:	795b      	ldrb	r3, [r3, #5]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <DMA2_Stream2_IRQHandler+0x268>)
 80039e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	b21a      	sxth	r2, r3
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <DMA2_Stream2_IRQHandler+0x26c>)
 80039f6:	801a      	strh	r2, [r3, #0]
			btn_leftLeft = (PS2Button >> 15) & 1U;
 80039f8:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 80039fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039fe:	13db      	asrs	r3, r3, #15
 8003a00:	b21b      	sxth	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4b6b      	ldr	r3, [pc, #428]	; (8003bb8 <DMA2_Stream2_IRQHandler+0x270>)
 8003a0c:	701a      	strb	r2, [r3, #0]
			btn_leftDown = (PS2Button >> 14) & 1U;
 8003a0e:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a14:	139b      	asrs	r3, r3, #14
 8003a16:	b21b      	sxth	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	4b66      	ldr	r3, [pc, #408]	; (8003bbc <DMA2_Stream2_IRQHandler+0x274>)
 8003a22:	701a      	strb	r2, [r3, #0]
			btn_leftRigt = (PS2Button >> 13) & 1U;
 8003a24:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a2a:	135b      	asrs	r3, r3, #13
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <DMA2_Stream2_IRQHandler+0x278>)
 8003a38:	701a      	strb	r2, [r3, #0]
			btn_leftUp   = (PS2Button >> 12) & 1U;
 8003a3a:	4b56      	ldr	r3, [pc, #344]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a40:	131b      	asrs	r3, r3, #12
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <DMA2_Stream2_IRQHandler+0x27c>)
 8003a4e:	701a      	strb	r2, [r3, #0]
			btn_Sta		 = (PS2Button >> 11) & 1U;
 8003a50:	4b50      	ldr	r3, [pc, #320]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a56:	12db      	asrs	r3, r3, #11
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <DMA2_Stream2_IRQHandler+0x280>)
 8003a64:	701a      	strb	r2, [r3, #0]
			btn_joyRigt  = (PS2Button >> 10) & 1U;
 8003a66:	4b4b      	ldr	r3, [pc, #300]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a6c:	129b      	asrs	r3, r3, #10
 8003a6e:	b21b      	sxth	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <DMA2_Stream2_IRQHandler+0x284>)
 8003a7a:	701a      	strb	r2, [r3, #0]
			btn_joyLeft  = (PS2Button >>  9) & 1U;
 8003a7c:	4b45      	ldr	r3, [pc, #276]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a82:	125b      	asrs	r3, r3, #9
 8003a84:	b21b      	sxth	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <DMA2_Stream2_IRQHandler+0x288>)
 8003a90:	701a      	strb	r2, [r3, #0]
			btn_Sel  	 = (PS2Button >>  8) & 1U;
 8003a92:	4b40      	ldr	r3, [pc, #256]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a98:	121b      	asrs	r3, r3, #8
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <DMA2_Stream2_IRQHandler+0x28c>)
 8003aa6:	701a      	strb	r2, [r3, #0]
			btn_A  		 = (PS2Button >>  7) & 1U;
 8003aa8:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aae:	11db      	asrs	r3, r3, #7
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <DMA2_Stream2_IRQHandler+0x290>)
 8003abc:	701a      	strb	r2, [r3, #0]
			btn_X  		 = (PS2Button >>  6) & 1U;
 8003abe:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac4:	119b      	asrs	r3, r3, #6
 8003ac6:	b21b      	sxth	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	4b42      	ldr	r3, [pc, #264]	; (8003bdc <DMA2_Stream2_IRQHandler+0x294>)
 8003ad2:	701a      	strb	r2, [r3, #0]
			btn_D  		 = (PS2Button >>  5) & 1U;
 8003ad4:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ada:	115b      	asrs	r3, r3, #5
 8003adc:	b21b      	sxth	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <DMA2_Stream2_IRQHandler+0x298>)
 8003ae8:	701a      	strb	r2, [r3, #0]
			btn_W  		 = (PS2Button >>  4) & 1U;
 8003aea:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af0:	111b      	asrs	r3, r3, #4
 8003af2:	b21b      	sxth	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <DMA2_Stream2_IRQHandler+0x29c>)
 8003afe:	701a      	strb	r2, [r3, #0]
			btn_E  		 = (PS2Button >>  3) & 1U;
 8003b00:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b06:	10db      	asrs	r3, r3, #3
 8003b08:	b21b      	sxth	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <DMA2_Stream2_IRQHandler+0x2a0>)
 8003b14:	701a      	strb	r2, [r3, #0]
			btn_Q  		 = (PS2Button >>  2) & 1U;
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b1c:	109b      	asrs	r3, r3, #2
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	4b30      	ldr	r3, [pc, #192]	; (8003bec <DMA2_Stream2_IRQHandler+0x2a4>)
 8003b2a:	701a      	strb	r2, [r3, #0]
			btn_C  		 = (PS2Button >>  1) & 1U;
 8003b2c:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b32:	105b      	asrs	r3, r3, #1
 8003b34:	b21b      	sxth	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <DMA2_Stream2_IRQHandler+0x2a8>)
 8003b40:	701a      	strb	r2, [r3, #0]
			btn_Z  		 = (PS2Button >>  0) & 1U;
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <DMA2_Stream2_IRQHandler+0x24c>)
 8003b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <DMA2_Stream2_IRQHandler+0x2ac>)
 8003b52:	701a      	strb	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <DMA2_Stream2_IRQHandler+0x244>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2baa      	cmp	r3, #170	; 0xaa
 8003b5a:	d106      	bne.n	8003b6a <DMA2_Stream2_IRQHandler+0x222>
		PS2CheckbyteCount++;
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <DMA2_Stream2_IRQHandler+0x23c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <DMA2_Stream2_IRQHandler+0x23c>)
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e006      	b.n	8003b78 <DMA2_Stream2_IRQHandler+0x230>
	else
		if(PS2CheckbyteCount != 4)
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <DMA2_Stream2_IRQHandler+0x23c>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d002      	beq.n	8003b78 <DMA2_Stream2_IRQHandler+0x230>
			PS2CheckbyteCount = 0;
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <DMA2_Stream2_IRQHandler+0x23c>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b78:	481f      	ldr	r0, [pc, #124]	; (8003bf8 <DMA2_Stream2_IRQHandler+0x2b0>)
 8003b7a:	f002 fc7d 	bl	8006478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	2400017c 	.word	0x2400017c
 8003b88:	240009c8 	.word	0x240009c8
 8003b8c:	24000c80 	.word	0x24000c80
 8003b90:	24000820 	.word	0x24000820
 8003b94:	24000b84 	.word	0x24000b84
 8003b98:	24000010 	.word	0x24000010
 8003b9c:	24000418 	.word	0x24000418
 8003ba0:	2400000e 	.word	0x2400000e
 8003ba4:	24000bbc 	.word	0x24000bbc
 8003ba8:	2400000c 	.word	0x2400000c
 8003bac:	24000cd8 	.word	0x24000cd8
 8003bb0:	2400000a 	.word	0x2400000a
 8003bb4:	24000d2c 	.word	0x24000d2c
 8003bb8:	240003fc 	.word	0x240003fc
 8003bbc:	24000b98 	.word	0x24000b98
 8003bc0:	24000b89 	.word	0x24000b89
 8003bc4:	24000ca0 	.word	0x24000ca0
 8003bc8:	24000bbe 	.word	0x24000bbe
 8003bcc:	24000bd9 	.word	0x24000bd9
 8003bd0:	24000ce2 	.word	0x24000ce2
 8003bd4:	240008ec 	.word	0x240008ec
 8003bd8:	24000b9c 	.word	0x24000b9c
 8003bdc:	240001c9 	.word	0x240001c9
 8003be0:	240003fd 	.word	0x240003fd
 8003be4:	240008ed 	.word	0x240008ed
 8003be8:	240003ff 	.word	0x240003ff
 8003bec:	24000bd3 	.word	0x24000bd3
 8003bf0:	24000d24 	.word	0x24000d24
 8003bf4:	24000cb0 	.word	0x24000cb0
 8003bf8:	240002e0 	.word	0x240002e0

08003bfc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <USART6_IRQHandler+0x10>)
 8003c02:	f008 f82d 	bl	800bc60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	24000bf4 	.word	0x24000bf4

08003c10 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <UART7_IRQHandler+0x10>)
 8003c16:	f008 f823 	bl	800bc60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2400020c 	.word	0x2400020c

08003c24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <_sbrk+0x50>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <_sbrk+0x16>
		heap_end = &end;
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <_sbrk+0x50>)
 8003c36:	4a10      	ldr	r2, [pc, #64]	; (8003c78 <_sbrk+0x54>)
 8003c38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <_sbrk+0x50>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <_sbrk+0x50>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	466a      	mov	r2, sp
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d907      	bls.n	8003c5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c4e:	f00b f97d 	bl	800ef4c <__errno>
 8003c52:	4602      	mov	r2, r0
 8003c54:	230c      	movs	r3, #12
 8003c56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	e006      	b.n	8003c6c <_sbrk+0x48>
	}

	heap_end += incr;
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <_sbrk+0x50>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <_sbrk+0x50>)
 8003c68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	240001b8 	.word	0x240001b8
 8003c78:	24000dc8 	.word	0x24000dc8

08003c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c80:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <SystemInit+0xac>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <SystemInit+0xac>)
 8003c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c90:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <SystemInit+0xb0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <SystemInit+0xb0>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <SystemInit+0xb0>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ca2:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <SystemInit+0xb0>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4921      	ldr	r1, [pc, #132]	; (8003d2c <SystemInit+0xb0>)
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <SystemInit+0xb4>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cae:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <SystemInit+0xb0>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <SystemInit+0xb0>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003cba:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <SystemInit+0xb0>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <SystemInit+0xb0>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003cc6:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <SystemInit+0xb0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003ccc:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <SystemInit+0xb0>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <SystemInit+0xb0>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <SystemInit+0xb0>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <SystemInit+0xb0>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <SystemInit+0xb0>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <SystemInit+0xb0>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <SystemInit+0xb0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <SystemInit+0xb0>)
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <SystemInit+0xb0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <SystemInit+0xb8>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <SystemInit+0xbc>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0e:	d202      	bcs.n	8003d16 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <SystemInit+0xc0>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <SystemInit+0xac>)
 8003d18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d1c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d34:	5c001000 	.word	0x5c001000
 8003d38:	ffff0000 	.word	0xffff0000
 8003d3c:	51008108 	.word	0x51008108

08003d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d46:	e003      	b.n	8003d50 <LoopCopyDataInit>

08003d48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d4e:	3104      	adds	r1, #4

08003d50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d50:	480b      	ldr	r0, [pc, #44]	; (8003d80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d52:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d58:	d3f6      	bcc.n	8003d48 <CopyDataInit>
  ldr  r2, =_sbss
 8003d5a:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d5c:	e002      	b.n	8003d64 <LoopFillZerobss>

08003d5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d60:	f842 3b04 	str.w	r3, [r2], #4

08003d64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d64:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d68:	d3f9      	bcc.n	8003d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d6a:	f7ff ff87 	bl	8003c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d6e:	f00b f8f3 	bl	800ef58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d72:	f7fe fc3b 	bl	80025ec <main>
  bx  lr    
 8003d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d78:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003d7c:	08010b50 	.word	0x08010b50
  ldr  r0, =_sdata
 8003d80:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003d84:	24000160 	.word	0x24000160
  ldr  r2, =_sbss
 8003d88:	24000160 	.word	0x24000160
  ldr  r3, = _ebss
 8003d8c:	24000dc4 	.word	0x24000dc4

08003d90 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d90:	e7fe      	b.n	8003d90 <ADC3_IRQHandler>
	...

08003d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d9a:	2003      	movs	r0, #3
 8003d9c:	f001 fb22 	bl	80053e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003da0:	f005 f934 	bl	800900c <HAL_RCC_GetSysClockFreq>
 8003da4:	4601      	mov	r1, r0
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_Init+0x68>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <HAL_Init+0x6c>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	fa21 f303 	lsr.w	r3, r1, r3
 8003dbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_Init+0x68>)
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <HAL_Init+0x6c>)
 8003dc8:	5cd3      	ldrb	r3, [r2, r3]
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <HAL_Init+0x70>)
 8003dd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <HAL_Init+0x74>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dde:	2000      	movs	r0, #0
 8003de0:	f000 f814 	bl	8003e0c <HAL_InitTick>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e002      	b.n	8003df4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dee:	f7ff f925 	bl	800303c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	080108d8 	.word	0x080108d8
 8003e04:	240000ec 	.word	0x240000ec
 8003e08:	240000e8 	.word	0x240000e8

08003e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <HAL_InitTick+0x60>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e021      	b.n	8003e64 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_InitTick+0x64>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_InitTick+0x60>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 fb07 	bl	800544a <HAL_SYSTICK_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00e      	b.n	8003e64 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d80a      	bhi.n	8003e62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	f001 fad1 	bl	80053fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e58:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <HAL_InitTick+0x68>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	240000f4 	.word	0x240000f4
 8003e70:	240000e8 	.word	0x240000e8
 8003e74:	240000f0 	.word	0x240000f0

08003e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_IncTick+0x20>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_IncTick+0x24>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <HAL_IncTick+0x24>)
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	240000f4 	.word	0x240000f4
 8003e9c:	24000da0 	.word	0x24000da0

08003ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_GetTick+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	24000da0 	.word	0x24000da0

08003eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7ff ffee 	bl	8003ea0 <HAL_GetTick>
 8003ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d005      	beq.n	8003ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_Delay+0x40>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ede:	bf00      	nop
 8003ee0:	f7ff ffde 	bl	8003ea0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d8f7      	bhi.n	8003ee0 <HAL_Delay+0x28>
  {
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	240000f4 	.word	0x240000f4

08003efc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_GetREVID+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0c1b      	lsrs	r3, r3, #16
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	5c001000 	.word	0x5c001000

08003f14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	401a      	ands	r2, r3
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	58000400 	.word	0x58000400

08003f40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fa8:	b490      	push	{r4, r7}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3360      	adds	r3, #96	; 0x60
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc90      	pop	{r4, r7}
 8003fe0:	4770      	bx	lr

08003fe2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	431a      	orrs	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	611a      	str	r2, [r3, #16]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004014:	b490      	push	{r4, r7}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3360      	adds	r3, #96	; 0x60
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4313      	orrs	r3, r2
 8004038:	6023      	str	r3, [r4, #0]
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bc90      	pop	{r4, r7}
 8004042:	4770      	bx	lr

08004044 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800406a:	b490      	push	{r4, r7}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3330      	adds	r3, #48	; 0x30
 800407a:	461a      	mov	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	4413      	add	r3, r2
 8004088:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	211f      	movs	r1, #31
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0e9b      	lsrs	r3, r3, #26
 80040a0:	f003 011f 	and.w	r1, r3, #31
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc90      	pop	{r4, r7}
 80040ba:	4770      	bx	lr

080040bc <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60da      	str	r2, [r3, #12]
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040e2:	b490      	push	{r4, r7}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3314      	adds	r3, #20
 80040f2:	461a      	mov	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	0e5b      	lsrs	r3, r3, #25
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	4413      	add	r3, r2
 8004100:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	0d1b      	lsrs	r3, r3, #20
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2107      	movs	r1, #7
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	401a      	ands	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	0d1b      	lsrs	r3, r3, #20
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	4313      	orrs	r3, r2
 8004126:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bc90      	pop	{r4, r7}
 8004130:	4770      	bx	lr
	...

08004134 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0318 	and.w	r3, r3, #24
 8004156:	4908      	ldr	r1, [pc, #32]	; (8004178 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004158:	40d9      	lsrs	r1, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	400b      	ands	r3, r1
 800415e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004162:	431a      	orrs	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	000fffff 	.word	0x000fffff

0800417c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 031f 	and.w	r3, r3, #31
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6093      	str	r3, [r2, #8]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	5fffffc0 	.word	0x5fffffc0

080041bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d0:	d101      	bne.n	80041d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <LL_ADC_EnableInternalRegulator+0x24>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	6fffffc0 	.word	0x6fffffc0

0800420c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004220:	d101      	bne.n	8004226 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <LL_ADC_Enable+0x24>)
 8004242:	4013      	ands	r3, r2
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	7fffffc0 	.word	0x7fffffc0

0800425c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <LL_ADC_IsEnabled+0x18>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <LL_ADC_IsEnabled+0x1a>
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <LL_ADC_REG_StartConversion+0x24>)
 8004292:	4013      	ands	r3, r2
 8004294:	f043 0204 	orr.w	r2, r3, #4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	7fffffc0 	.word	0x7fffffc0

080042ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d101      	bne.n	80042c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d101      	bne.n	80042ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e18e      	b.n	8004630 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fe fea5 	bl	8003070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff3f 	bl	80041bc <LL_ADC_IsDeepPowerDownEnabled>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d004      	beq.n	800434e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff25 	bl	8004198 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff ff5a 	bl	800420c <LL_ADC_IsInternalRegulatorEnabled>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d113      	bne.n	8004386 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ff3e 	bl	80041e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004368:	4b9a      	ldr	r3, [pc, #616]	; (80045d4 <HAL_ADC_Init+0x2dc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	4a9a      	ldr	r2, [pc, #616]	; (80045d8 <HAL_ADC_Init+0x2e0>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	099b      	lsrs	r3, r3, #6
 8004376:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004378:	e002      	b.n	8004380 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3b01      	subs	r3, #1
 800437e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f9      	bne.n	800437a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ff3e 	bl	800420c <LL_ADC_IsInternalRegulatorEnabled>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10d      	bne.n	80043b2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f043 0210 	orr.w	r2, r3, #16
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff78 	bl	80042ac <LL_ADC_REG_IsConversionOngoing>
 80043bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8129 	bne.w	800461e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 8125 	bne.w	800461e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043dc:	f043 0202 	orr.w	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff37 	bl	800425c <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d136      	bne.n	8004462 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a78      	ldr	r2, [pc, #480]	; (80045dc <HAL_ADC_Init+0x2e4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_ADC_Init+0x110>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a77      	ldr	r2, [pc, #476]	; (80045e0 <HAL_ADC_Init+0x2e8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d10e      	bne.n	8004426 <HAL_ADC_Init+0x12e>
 8004408:	4874      	ldr	r0, [pc, #464]	; (80045dc <HAL_ADC_Init+0x2e4>)
 800440a:	f7ff ff27 	bl	800425c <LL_ADC_IsEnabled>
 800440e:	4604      	mov	r4, r0
 8004410:	4873      	ldr	r0, [pc, #460]	; (80045e0 <HAL_ADC_Init+0x2e8>)
 8004412:	f7ff ff23 	bl	800425c <LL_ADC_IsEnabled>
 8004416:	4603      	mov	r3, r0
 8004418:	4323      	orrs	r3, r4
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e008      	b.n	8004438 <HAL_ADC_Init+0x140>
 8004426:	486f      	ldr	r0, [pc, #444]	; (80045e4 <HAL_ADC_Init+0x2ec>)
 8004428:	f7ff ff18 	bl	800425c <LL_ADC_IsEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d012      	beq.n	8004462 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a66      	ldr	r2, [pc, #408]	; (80045dc <HAL_ADC_Init+0x2e4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_ADC_Init+0x158>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a65      	ldr	r2, [pc, #404]	; (80045e0 <HAL_ADC_Init+0x2e8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_ADC_Init+0x15c>
 8004450:	4a65      	ldr	r2, [pc, #404]	; (80045e8 <HAL_ADC_Init+0x2f0>)
 8004452:	e000      	b.n	8004456 <HAL_ADC_Init+0x15e>
 8004454:	4a65      	ldr	r2, [pc, #404]	; (80045ec <HAL_ADC_Init+0x2f4>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7ff fd6f 	bl	8003f40 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004462:	f7ff fd4b 	bl	8003efc <HAL_GetREVID>
 8004466:	4602      	mov	r2, r0
 8004468:	f241 0303 	movw	r3, #4099	; 0x1003
 800446c:	429a      	cmp	r2, r3
 800446e:	d914      	bls.n	800449a <HAL_ADC_Init+0x1a2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b10      	cmp	r3, #16
 8004476:	d110      	bne.n	800449a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	7d5b      	ldrb	r3, [r3, #21]
 800447c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004482:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004488:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	7f1b      	ldrb	r3, [r3, #28]
 800448e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8004490:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004492:	f043 030c 	orr.w	r3, r3, #12
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e00d      	b.n	80044b6 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7d5b      	ldrb	r3, [r3, #21]
 800449e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044a4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80044aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	7f1b      	ldrb	r3, [r3, #28]
 80044b0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7f1b      	ldrb	r3, [r3, #28]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d106      	bne.n	80044cc <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	045b      	lsls	r3, r3, #17
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	4b40      	ldr	r3, [pc, #256]	; (80045f0 <HAL_ADC_Init+0x2f8>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	69b9      	ldr	r1, [r7, #24]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fed3 	bl	80042ac <LL_ADC_REG_IsConversionOngoing>
 8004506:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fee0 	bl	80042d2 <LL_ADC_INJ_IsConversionOngoing>
 8004512:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d14a      	bne.n	80045b0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d147      	bne.n	80045b0 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7d1b      	ldrb	r3, [r3, #20]
 8004524:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_ADC_Init+0x2fc>)
 8004536:	4013      	ands	r3, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	69b9      	ldr	r1, [r7, #24]
 800453e:	430b      	orrs	r3, r1
 8004540:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004548:	2b01      	cmp	r3, #1
 800454a:	d11b      	bne.n	8004584 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <HAL_ADC_Init+0x300>)
 800455a:	4013      	ands	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004560:	3a01      	subs	r2, #1
 8004562:	0411      	lsls	r1, r2, #16
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800456e:	4311      	orrs	r1, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004574:	430a      	orrs	r2, r1
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	611a      	str	r2, [r3, #16]
 8004582:	e007      	b.n	8004594 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fd52 	bl	8005054 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d121      	bne.n	80045fc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	f023 010f 	bic.w	r1, r3, #15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	1e5a      	subs	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
 80045d0:	e01c      	b.n	800460c <HAL_ADC_Init+0x314>
 80045d2:	bf00      	nop
 80045d4:	240000e8 	.word	0x240000e8
 80045d8:	053e2d63 	.word	0x053e2d63
 80045dc:	40022000 	.word	0x40022000
 80045e0:	40022100 	.word	0x40022100
 80045e4:	58026000 	.word	0x58026000
 80045e8:	40022300 	.word	0x40022300
 80045ec:	58026300 	.word	0x58026300
 80045f0:	fff0c003 	.word	0xfff0c003
 80045f4:	ffffbffc 	.word	0xffffbffc
 80045f8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 020f 	bic.w	r2, r2, #15
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
 800461c:	e007      	b.n	800462e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	f043 0210 	orr.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800462e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3724      	adds	r7, #36	; 0x24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}

08004638 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a55      	ldr	r2, [pc, #340]	; (80047a0 <HAL_ADC_Start_DMA+0x168>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_ADC_Start_DMA+0x20>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a54      	ldr	r2, [pc, #336]	; (80047a4 <HAL_ADC_Start_DMA+0x16c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_ADC_Start_DMA+0x24>
 8004658:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_ADC_Start_DMA+0x170>)
 800465a:	e000      	b.n	800465e <HAL_ADC_Start_DMA+0x26>
 800465c:	4b53      	ldr	r3, [pc, #332]	; (80047ac <HAL_ADC_Start_DMA+0x174>)
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fd8c 	bl	800417c <LL_ADC_GetMultimode>
 8004664:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fe1e 	bl	80042ac <LL_ADC_REG_IsConversionOngoing>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 808c 	bne.w	8004790 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_ADC_Start_DMA+0x4e>
 8004682:	2302      	movs	r3, #2
 8004684:	e087      	b.n	8004796 <HAL_ADC_Start_DMA+0x15e>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b05      	cmp	r3, #5
 8004698:	d002      	beq.n	80046a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b09      	cmp	r3, #9
 800469e:	d170      	bne.n	8004782 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fbbf 	bl	8004e24 <ADC_Enable>
 80046a6:	4603      	mov	r3, r0
 80046a8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d163      	bne.n	8004778 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b4:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <HAL_ADC_Start_DMA+0x178>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a37      	ldr	r2, [pc, #220]	; (80047a4 <HAL_ADC_Start_DMA+0x16c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d002      	beq.n	80046d0 <HAL_ADC_Start_DMA+0x98>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	e000      	b.n	80046d2 <HAL_ADC_Start_DMA+0x9a>
 80046d0:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_ADC_Start_DMA+0x168>)
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d002      	beq.n	80046e0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	f023 0206 	bic.w	r2, r3, #6
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	659a      	str	r2, [r3, #88]	; 0x58
 8004704:	e002      	b.n	800470c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004710:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <HAL_ADC_Start_DMA+0x17c>)
 8004712:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004718:	4a27      	ldr	r2, [pc, #156]	; (80047b8 <HAL_ADC_Start_DMA+0x180>)
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	4a26      	ldr	r2, [pc, #152]	; (80047bc <HAL_ADC_Start_DMA+0x184>)
 8004722:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	221c      	movs	r2, #28
 800472a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0210 	orr.w	r2, r2, #16
 8004742:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7ff fcb4 	bl	80040bc <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3340      	adds	r3, #64	; 0x40
 800475e:	4619      	mov	r1, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f001 f9da 	bl	8005b1c <HAL_DMA_Start_IT>
 8004768:	4603      	mov	r3, r0
 800476a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fd87 	bl	8004284 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004776:	e00d      	b.n	8004794 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004780:	e008      	b.n	8004794 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800478e:	e001      	b.n	8004794 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004790:	2302      	movs	r3, #2
 8004792:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40022000 	.word	0x40022000
 80047a4:	40022100 	.word	0x40022100
 80047a8:	40022300 	.word	0x40022300
 80047ac:	58026300 	.word	0x58026300
 80047b0:	fffff0fe 	.word	0xfffff0fe
 80047b4:	08004f2d 	.word	0x08004f2d
 80047b8:	08005005 	.word	0x08005005
 80047bc:	08005021 	.word	0x08005021

080047c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b099      	sub	sp, #100	; 0x64
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a99      	ldr	r2, [pc, #612]	; (8004a7c <HAL_ADC_ConfigChannel+0x280>)
 8004816:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x2a>
 8004822:	2302      	movs	r3, #2
 8004824:	e2e6      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x5f8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fd3a 	bl	80042ac <LL_ADC_REG_IsConversionOngoing>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 82cb 	bne.w	8004dd6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <HAL_ADC_ConfigChannel+0x62>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0e9b      	lsrs	r3, r3, #26
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2201      	movs	r2, #1
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	e00f      	b.n	800487e <HAL_ADC_ConfigChannel+0x82>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800486c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	2201      	movs	r2, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6812      	ldr	r2, [r2, #0]
 8004882:	69d1      	ldr	r1, [r2, #28]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	430b      	orrs	r3, r1
 800488a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	f7ff fbe6 	bl	800406a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fd02 	bl	80042ac <LL_ADC_REG_IsConversionOngoing>
 80048a8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fd0f 	bl	80042d2 <LL_ADC_INJ_IsConversionOngoing>
 80048b4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 80b3 	bne.w	8004a24 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f040 80af 	bne.w	8004a24 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6819      	ldr	r1, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f7ff fc05 	bl	80040e2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048d8:	4b69      	ldr	r3, [pc, #420]	; (8004a80 <HAL_ADC_ConfigChannel+0x284>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048e4:	d10b      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x102>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	e01d      	b.n	800493a <HAL_ADC_ConfigChannel+0x13e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x128>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	089b      	lsrs	r3, r3, #2
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	e00a      	b.n	800493a <HAL_ADC_ConfigChannel+0x13e>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d027      	beq.n	8004994 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6919      	ldr	r1, [r3, #16]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004952:	f7ff fb29 	bl	8003fa8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6919      	ldr	r1, [r3, #16]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	7e5b      	ldrb	r3, [r3, #25]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HAL_ADC_ConfigChannel+0x170>
 8004966:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800496a:	e000      	b.n	800496e <HAL_ADC_ConfigChannel+0x172>
 800496c:	2300      	movs	r3, #0
 800496e:	461a      	mov	r2, r3
 8004970:	f7ff fb50 	bl	8004014 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6919      	ldr	r1, [r3, #16]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	7e1b      	ldrb	r3, [r3, #24]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d102      	bne.n	800498a <HAL_ADC_ConfigChannel+0x18e>
 8004984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004988:	e000      	b.n	800498c <HAL_ADC_ConfigChannel+0x190>
 800498a:	2300      	movs	r3, #0
 800498c:	461a      	mov	r2, r3
 800498e:	f7ff fb28 	bl	8003fe2 <LL_ADC_SetDataRightShift>
 8004992:	e047      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	069b      	lsls	r3, r3, #26
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d107      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049b6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	069b      	lsls	r3, r3, #26
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d107      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049da:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	069b      	lsls	r3, r3, #26
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d107      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049fe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	069b      	lsls	r3, r3, #26
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d107      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a22:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fc17 	bl	800425c <LL_ADC_IsEnabled>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f040 81d9 	bne.w	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f7ff fb76 	bl	8004134 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <HAL_ADC_ConfigChannel+0x280>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	f040 8101 	bne.w	8004c56 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10f      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x288>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	bf94      	ite	ls
 8004a74:	2301      	movls	r3, #1
 8004a76:	2300      	movhi	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	e016      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x2ae>
 8004a7c:	47ff0000 	.word	0x47ff0000
 8004a80:	5c001000 	.word	0x5c001000
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	fa93 f3a3 	rbit	r3, r3
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2b09      	cmp	r3, #9
 8004aa2:	bf94      	ite	ls
 8004aa4:	2301      	movls	r3, #1
 8004aa6:	2300      	movhi	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d064      	beq.n	8004b78 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x2ce>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	0e9b      	lsrs	r3, r3, #26
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	069b      	lsls	r3, r3, #26
 8004ac4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ac8:	e00e      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x2ec>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	069b      	lsls	r3, r3, #26
 8004ae4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x30c>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	0e9b      	lsrs	r3, r3, #26
 8004afa:	3301      	adds	r3, #1
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	2101      	movs	r1, #1
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	e010      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x32e>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	fab3 f383 	clz	r3, r3
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	ea42 0103 	orr.w	r1, r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x354>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	0e9b      	lsrs	r3, r3, #26
 8004b40:	3301      	adds	r3, #1
 8004b42:	f003 021f 	and.w	r2, r3, #31
 8004b46:	4613      	mov	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	051b      	lsls	r3, r3, #20
 8004b4e:	e011      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x378>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	fab3 f383 	clz	r3, r3
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	f003 021f 	and.w	r2, r3, #31
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4413      	add	r3, r2
 8004b72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b74:	430b      	orrs	r3, r1
 8004b76:	e069      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x398>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	0e9b      	lsrs	r3, r3, #26
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	069b      	lsls	r3, r3, #26
 8004b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b92:	e00e      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0x3b6>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	fa93 f3a3 	rbit	r3, r3
 8004ba0:	61fb      	str	r3, [r7, #28]
  return result;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	fab3 f383 	clz	r3, r3
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	3301      	adds	r3, #1
 8004bac:	069b      	lsls	r3, r3, #26
 8004bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_ADC_ConfigChannel+0x3d6>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	0e9b      	lsrs	r3, r3, #26
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd0:	e010      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x3f8>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	617b      	str	r3, [r7, #20]
  return result;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2101      	movs	r1, #1
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	ea42 0103 	orr.w	r1, r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10d      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x424>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	0e9b      	lsrs	r3, r3, #26
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f003 021f 	and.w	r2, r3, #31
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	3b1e      	subs	r3, #30
 8004c18:	051b      	lsls	r3, r3, #20
 8004c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	e014      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x44e>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	fa93 f3a3 	rbit	r3, r3
 8004c2c:	60fb      	str	r3, [r7, #12]
  return result;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	fab3 f383 	clz	r3, r3
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	3301      	adds	r3, #1
 8004c38:	f003 021f 	and.w	r2, r3, #31
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4413      	add	r3, r2
 8004c42:	3b1e      	subs	r3, #30
 8004c44:	051b      	lsls	r3, r3, #20
 8004c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	6892      	ldr	r2, [r2, #8]
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7ff fa46 	bl	80040e2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f280 80c4 	bge.w	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a65      	ldr	r2, [pc, #404]	; (8004dfc <HAL_ADC_ConfigChannel+0x600>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_ADC_ConfigChannel+0x478>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a64      	ldr	r2, [pc, #400]	; (8004e00 <HAL_ADC_ConfigChannel+0x604>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d101      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x47c>
 8004c74:	4b63      	ldr	r3, [pc, #396]	; (8004e04 <HAL_ADC_ConfigChannel+0x608>)
 8004c76:	e000      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x47e>
 8004c78:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_ADC_ConfigChannel+0x60c>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff f986 	bl	8003f8c <LL_ADC_GetCommonPathInternalCh>
 8004c80:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5d      	ldr	r2, [pc, #372]	; (8004dfc <HAL_ADC_ConfigChannel+0x600>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_ADC_ConfigChannel+0x49a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a5b      	ldr	r2, [pc, #364]	; (8004e00 <HAL_ADC_ConfigChannel+0x604>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10e      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x4b8>
 8004c96:	4859      	ldr	r0, [pc, #356]	; (8004dfc <HAL_ADC_ConfigChannel+0x600>)
 8004c98:	f7ff fae0 	bl	800425c <LL_ADC_IsEnabled>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4858      	ldr	r0, [pc, #352]	; (8004e00 <HAL_ADC_ConfigChannel+0x604>)
 8004ca0:	f7ff fadc 	bl	800425c <LL_ADC_IsEnabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4323      	orrs	r3, r4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e008      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x4ca>
 8004cb4:	4855      	ldr	r0, [pc, #340]	; (8004e0c <HAL_ADC_ConfigChannel+0x610>)
 8004cb6:	f7ff fad1 	bl	800425c <LL_ADC_IsEnabled>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d07b      	beq.n	8004dc2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a50      	ldr	r2, [pc, #320]	; (8004e10 <HAL_ADC_ConfigChannel+0x614>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d12e      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x536>
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d129      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a4a      	ldr	r2, [pc, #296]	; (8004e0c <HAL_ADC_ConfigChannel+0x610>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d17f      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a43      	ldr	r2, [pc, #268]	; (8004dfc <HAL_ADC_ConfigChannel+0x600>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_ADC_ConfigChannel+0x500>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a42      	ldr	r2, [pc, #264]	; (8004e00 <HAL_ADC_ConfigChannel+0x604>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x504>
 8004cfc:	4a41      	ldr	r2, [pc, #260]	; (8004e04 <HAL_ADC_ConfigChannel+0x608>)
 8004cfe:	e000      	b.n	8004d02 <HAL_ADC_ConfigChannel+0x506>
 8004d00:	4a41      	ldr	r2, [pc, #260]	; (8004e08 <HAL_ADC_ConfigChannel+0x60c>)
 8004d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f7ff f92b 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004d10:	4b40      	ldr	r3, [pc, #256]	; (8004e14 <HAL_ADC_ConfigChannel+0x618>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	099b      	lsrs	r3, r3, #6
 8004d16:	4a40      	ldr	r2, [pc, #256]	; (8004e18 <HAL_ADC_ConfigChannel+0x61c>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	099b      	lsrs	r3, r3, #6
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8004d22:	e002      	b.n	8004d2a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f9      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d30:	e05a      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a39      	ldr	r2, [pc, #228]	; (8004e1c <HAL_ADC_ConfigChannel+0x620>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d11e      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x57e>
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d119      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a30      	ldr	r2, [pc, #192]	; (8004e0c <HAL_ADC_ConfigChannel+0x610>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d14b      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <HAL_ADC_ConfigChannel+0x600>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_ADC_ConfigChannel+0x568>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <HAL_ADC_ConfigChannel+0x604>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x56c>
 8004d64:	4a27      	ldr	r2, [pc, #156]	; (8004e04 <HAL_ADC_ConfigChannel+0x608>)
 8004d66:	e000      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x56e>
 8004d68:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <HAL_ADC_ConfigChannel+0x60c>)
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7ff f8f7 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d78:	e036      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <HAL_ADC_ConfigChannel+0x624>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d131      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
 8004d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d12c      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <HAL_ADC_ConfigChannel+0x610>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d127      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <HAL_ADC_ConfigChannel+0x600>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_ADC_ConfigChannel+0x5b0>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <HAL_ADC_ConfigChannel+0x604>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x5b4>
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <HAL_ADC_ConfigChannel+0x608>)
 8004dae:	e000      	b.n	8004db2 <HAL_ADC_ConfigChannel+0x5b6>
 8004db0:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <HAL_ADC_ConfigChannel+0x60c>)
 8004db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7ff f8d3 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
 8004dc0:	e012      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004dd4:	e008      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f043 0220 	orr.w	r2, r3, #32
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3764      	adds	r7, #100	; 0x64
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	40022000 	.word	0x40022000
 8004e00:	40022100 	.word	0x40022100
 8004e04:	40022300 	.word	0x40022300
 8004e08:	58026300 	.word	0x58026300
 8004e0c:	58026000 	.word	0x58026000
 8004e10:	cb840000 	.word	0xcb840000
 8004e14:	240000e8 	.word	0x240000e8
 8004e18:	053e2d63 	.word	0x053e2d63
 8004e1c:	c7520000 	.word	0xc7520000
 8004e20:	cfb80000 	.word	0xcfb80000

08004e24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fa13 	bl	800425c <LL_ADC_IsEnabled>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d167      	bne.n	8004f0c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	4b35      	ldr	r3, [pc, #212]	; (8004f18 <ADC_Enable+0xf4>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00d      	beq.n	8004e66 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f043 0210 	orr.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e053      	b.n	8004f0e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff f9e2 	bl	8004234 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e70:	f7ff f816 	bl	8003ea0 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a28      	ldr	r2, [pc, #160]	; (8004f1c <ADC_Enable+0xf8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <ADC_Enable+0x66>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <ADC_Enable+0xfc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <ADC_Enable+0x6a>
 8004e8a:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <ADC_Enable+0x100>)
 8004e8c:	e000      	b.n	8004e90 <ADC_Enable+0x6c>
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <ADC_Enable+0x104>)
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff f973 	bl	800417c <LL_ADC_GetMultimode>
 8004e96:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <ADC_Enable+0xfc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d002      	beq.n	8004ea8 <ADC_Enable+0x84>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	e000      	b.n	8004eaa <ADC_Enable+0x86>
 8004ea8:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <ADC_Enable+0xf8>)
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d025      	beq.n	8004efe <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d129      	bne.n	8004f0c <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eb8:	e021      	b.n	8004efe <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff f9cc 	bl	800425c <LL_ADC_IsEnabled>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d104      	bne.n	8004ed4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff f9b0 	bl	8004234 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ed4:	f7fe ffe4 	bl	8003ea0 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d90d      	bls.n	8004efe <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	f043 0210 	orr.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e007      	b.n	8004f0e <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d1d6      	bne.n	8004eba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	8000003f 	.word	0x8000003f
 8004f1c:	40022000 	.word	0x40022000
 8004f20:	40022100 	.word	0x40022100
 8004f24:	40022300 	.word	0x40022300
 8004f28:	58026300 	.word	0x58026300

08004f2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d14b      	bne.n	8004fde <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d021      	beq.n	8004fa4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff f86d 	bl	8004044 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d032      	beq.n	8004fd6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d12b      	bne.n	8004fd6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11f      	bne.n	8004fd6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	f043 0201 	orr.w	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
 8004fa2:	e018      	b.n	8004fd6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d111      	bne.n	8004fd6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	f043 0201 	orr.w	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff fbf2 	bl	80047c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fdc:	e00e      	b.n	8004ffc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff fbfc 	bl	80047e8 <HAL_ADC_ErrorCallback>
}
 8004ff0:	e004      	b.n	8004ffc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4798      	blx	r3
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fbde 	bl	80047d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	f043 0204 	orr.w	r2, r3, #4
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff fbce 	bl	80047e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a70      	ldr	r2, [pc, #448]	; (8005224 <ADC_ConfigureBoostMode+0x1d0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <ADC_ConfigureBoostMode+0x1c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a6f      	ldr	r2, [pc, #444]	; (8005228 <ADC_ConfigureBoostMode+0x1d4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d109      	bne.n	8005084 <ADC_ConfigureBoostMode+0x30>
 8005070:	4b6e      	ldr	r3, [pc, #440]	; (800522c <ADC_ConfigureBoostMode+0x1d8>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e008      	b.n	8005096 <ADC_ConfigureBoostMode+0x42>
 8005084:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <ADC_ConfigureBoostMode+0x1dc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01a      	beq.n	80050d0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800509a:	f004 f929 	bl	80092f0 <HAL_RCC_GetHCLKFreq>
 800509e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a8:	d006      	beq.n	80050b8 <ADC_ConfigureBoostMode+0x64>
 80050aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050ae:	d00b      	beq.n	80050c8 <ADC_ConfigureBoostMode+0x74>
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d000      	beq.n	80050b8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80050b6:	e05d      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	60fb      	str	r3, [r7, #12]
        break;
 80050c6:	e055      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	60fb      	str	r3, [r7, #12]
        break;
 80050ce:	e051      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80050d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80050d4:	f005 f846 	bl	800a164 <HAL_RCCEx_GetPeriphCLKFreq>
 80050d8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050e2:	d02a      	beq.n	800513a <ADC_ConfigureBoostMode+0xe6>
 80050e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050e8:	d813      	bhi.n	8005112 <ADC_ConfigureBoostMode+0xbe>
 80050ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050ee:	d024      	beq.n	800513a <ADC_ConfigureBoostMode+0xe6>
 80050f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050f4:	d806      	bhi.n	8005104 <ADC_ConfigureBoostMode+0xb0>
 80050f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050fa:	d01e      	beq.n	800513a <ADC_ConfigureBoostMode+0xe6>
 80050fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005100:	d01b      	beq.n	800513a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8005102:	e037      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005108:	d017      	beq.n	800513a <ADC_ConfigureBoostMode+0xe6>
 800510a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800510e:	d014      	beq.n	800513a <ADC_ConfigureBoostMode+0xe6>
        break;
 8005110:	e030      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8005112:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005116:	d021      	beq.n	800515c <ADC_ConfigureBoostMode+0x108>
 8005118:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800511c:	d806      	bhi.n	800512c <ADC_ConfigureBoostMode+0xd8>
 800511e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005122:	d013      	beq.n	800514c <ADC_ConfigureBoostMode+0xf8>
 8005124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005128:	d014      	beq.n	8005154 <ADC_ConfigureBoostMode+0x100>
        break;
 800512a:	e023      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800512c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005130:	d018      	beq.n	8005164 <ADC_ConfigureBoostMode+0x110>
 8005132:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005136:	d019      	beq.n	800516c <ADC_ConfigureBoostMode+0x118>
        break;
 8005138:	e01c      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	0c9b      	lsrs	r3, r3, #18
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	60fb      	str	r3, [r7, #12]
        break;
 800514a:	e013      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	091b      	lsrs	r3, r3, #4
 8005150:	60fb      	str	r3, [r7, #12]
      break;
 8005152:	e00f      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	60fb      	str	r3, [r7, #12]
        break;
 800515a:	e00b      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	099b      	lsrs	r3, r3, #6
 8005160:	60fb      	str	r3, [r7, #12]
        break;
 8005162:	e007      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	09db      	lsrs	r3, r3, #7
 8005168:	60fb      	str	r3, [r7, #12]
        break;
 800516a:	e003      	b.n	8005174 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	0a1b      	lsrs	r3, r3, #8
 8005170:	60fb      	str	r3, [r7, #12]
        break;
 8005172:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005174:	f7fe fec2 	bl	8003efc <HAL_GetREVID>
 8005178:	4602      	mov	r2, r0
 800517a:	f241 0303 	movw	r3, #4099	; 0x1003
 800517e:	429a      	cmp	r2, r3
 8005180:	d815      	bhi.n	80051ae <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a2b      	ldr	r2, [pc, #172]	; (8005234 <ADC_ConfigureBoostMode+0x1e0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d908      	bls.n	800519c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005198:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800519a:	e03e      	b.n	800521a <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051aa:	609a      	str	r2, [r3, #8]
}
 80051ac:	e035      	b.n	800521a <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a20      	ldr	r2, [pc, #128]	; (8005238 <ADC_ConfigureBoostMode+0x1e4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d808      	bhi.n	80051ce <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	e025      	b.n	800521a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a1a      	ldr	r2, [pc, #104]	; (800523c <ADC_ConfigureBoostMode+0x1e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d80a      	bhi.n	80051ec <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e8:	609a      	str	r2, [r3, #8]
}
 80051ea:	e016      	b.n	800521a <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a14      	ldr	r2, [pc, #80]	; (8005240 <ADC_ConfigureBoostMode+0x1ec>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d80a      	bhi.n	800520a <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	e007      	b.n	800521a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005218:	609a      	str	r2, [r3, #8]
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40022000 	.word	0x40022000
 8005228:	40022100 	.word	0x40022100
 800522c:	40022300 	.word	0x40022300
 8005230:	58026300 	.word	0x58026300
 8005234:	01312d00 	.word	0x01312d00
 8005238:	005f5e10 	.word	0x005f5e10
 800523c:	00bebc20 	.word	0x00bebc20
 8005240:	017d7840 	.word	0x017d7840

08005244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <__NVIC_SetPriorityGrouping+0x40>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005260:	4013      	ands	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <__NVIC_SetPriorityGrouping+0x44>)
 800526e:	4313      	orrs	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005272:	4a04      	ldr	r2, [pc, #16]	; (8005284 <__NVIC_SetPriorityGrouping+0x40>)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	60d3      	str	r3, [r2, #12]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	e000ed00 	.word	0xe000ed00
 8005288:	05fa0000 	.word	0x05fa0000

0800528c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	f003 0307 	and.w	r3, r3, #7
}
 800529a:	4618      	mov	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	e000ed00 	.word	0xe000ed00

080052a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	db0b      	blt.n	80052d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	f003 021f 	and.w	r2, r3, #31
 80052c0:	4907      	ldr	r1, [pc, #28]	; (80052e0 <__NVIC_EnableIRQ+0x38>)
 80052c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	2001      	movs	r0, #1
 80052ca:	fa00 f202 	lsl.w	r2, r0, r2
 80052ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	e000e100 	.word	0xe000e100

080052e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	6039      	str	r1, [r7, #0]
 80052ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	db0a      	blt.n	800530e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	490c      	ldr	r1, [pc, #48]	; (8005330 <__NVIC_SetPriority+0x4c>)
 80052fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005302:	0112      	lsls	r2, r2, #4
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	440b      	add	r3, r1
 8005308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800530c:	e00a      	b.n	8005324 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	4908      	ldr	r1, [pc, #32]	; (8005334 <__NVIC_SetPriority+0x50>)
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	3b04      	subs	r3, #4
 800531c:	0112      	lsls	r2, r2, #4
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	440b      	add	r3, r1
 8005322:	761a      	strb	r2, [r3, #24]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	e000e100 	.word	0xe000e100
 8005334:	e000ed00 	.word	0xe000ed00

08005338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005338:	b480      	push	{r7}
 800533a:	b089      	sub	sp, #36	; 0x24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f1c3 0307 	rsb	r3, r3, #7
 8005352:	2b04      	cmp	r3, #4
 8005354:	bf28      	it	cs
 8005356:	2304      	movcs	r3, #4
 8005358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3304      	adds	r3, #4
 800535e:	2b06      	cmp	r3, #6
 8005360:	d902      	bls.n	8005368 <NVIC_EncodePriority+0x30>
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3b03      	subs	r3, #3
 8005366:	e000      	b.n	800536a <NVIC_EncodePriority+0x32>
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43da      	mvns	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	401a      	ands	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005380:	f04f 31ff 	mov.w	r1, #4294967295
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	43d9      	mvns	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005390:	4313      	orrs	r3, r2
         );
}
 8005392:	4618      	mov	r0, r3
 8005394:	3724      	adds	r7, #36	; 0x24
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053b0:	d301      	bcc.n	80053b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053b2:	2301      	movs	r3, #1
 80053b4:	e00f      	b.n	80053d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <SysTick_Config+0x40>)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053be:	210f      	movs	r1, #15
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	f7ff ff8e 	bl	80052e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <SysTick_Config+0x40>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <SysTick_Config+0x40>)
 80053d0:	2207      	movs	r2, #7
 80053d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	e000e010 	.word	0xe000e010

080053e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ff29 	bl	8005244 <__NVIC_SetPriorityGrouping>
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b086      	sub	sp, #24
 80053fe:	af00      	add	r7, sp, #0
 8005400:	4603      	mov	r3, r0
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005408:	f7ff ff40 	bl	800528c <__NVIC_GetPriorityGrouping>
 800540c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	6978      	ldr	r0, [r7, #20]
 8005414:	f7ff ff90 	bl	8005338 <NVIC_EncodePriority>
 8005418:	4602      	mov	r2, r0
 800541a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff5f 	bl	80052e4 <__NVIC_SetPriority>
}
 8005426:	bf00      	nop
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	4603      	mov	r3, r0
 8005436:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff ff33 	bl	80052a8 <__NVIC_EnableIRQ>
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ffa4 	bl	80053a0 <SysTick_Config>
 8005458:	4603      	mov	r3, r0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800546c:	f7fe fd18 	bl	8003ea0 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e316      	b.n	8005aaa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a66      	ldr	r2, [pc, #408]	; (800561c <HAL_DMA_Init+0x1b8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d04a      	beq.n	800551c <HAL_DMA_Init+0xb8>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a65      	ldr	r2, [pc, #404]	; (8005620 <HAL_DMA_Init+0x1bc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d045      	beq.n	800551c <HAL_DMA_Init+0xb8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a63      	ldr	r2, [pc, #396]	; (8005624 <HAL_DMA_Init+0x1c0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d040      	beq.n	800551c <HAL_DMA_Init+0xb8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a62      	ldr	r2, [pc, #392]	; (8005628 <HAL_DMA_Init+0x1c4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d03b      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a60      	ldr	r2, [pc, #384]	; (800562c <HAL_DMA_Init+0x1c8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d036      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a5f      	ldr	r2, [pc, #380]	; (8005630 <HAL_DMA_Init+0x1cc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d031      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a5d      	ldr	r2, [pc, #372]	; (8005634 <HAL_DMA_Init+0x1d0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02c      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5c      	ldr	r2, [pc, #368]	; (8005638 <HAL_DMA_Init+0x1d4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d027      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5a      	ldr	r2, [pc, #360]	; (800563c <HAL_DMA_Init+0x1d8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d022      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a59      	ldr	r2, [pc, #356]	; (8005640 <HAL_DMA_Init+0x1dc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d01d      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a57      	ldr	r2, [pc, #348]	; (8005644 <HAL_DMA_Init+0x1e0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d018      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a56      	ldr	r2, [pc, #344]	; (8005648 <HAL_DMA_Init+0x1e4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d013      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a54      	ldr	r2, [pc, #336]	; (800564c <HAL_DMA_Init+0x1e8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00e      	beq.n	800551c <HAL_DMA_Init+0xb8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a53      	ldr	r2, [pc, #332]	; (8005650 <HAL_DMA_Init+0x1ec>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_DMA_Init+0xb8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a51      	ldr	r2, [pc, #324]	; (8005654 <HAL_DMA_Init+0x1f0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_DMA_Init+0xb8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a50      	ldr	r2, [pc, #320]	; (8005658 <HAL_DMA_Init+0x1f4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d101      	bne.n	8005520 <HAL_DMA_Init+0xbc>
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <HAL_DMA_Init+0xbe>
 8005520:	2300      	movs	r3, #0
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 813b 	beq.w	800579e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a37      	ldr	r2, [pc, #220]	; (800561c <HAL_DMA_Init+0x1b8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d04a      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a36      	ldr	r2, [pc, #216]	; (8005620 <HAL_DMA_Init+0x1bc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d045      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a34      	ldr	r2, [pc, #208]	; (8005624 <HAL_DMA_Init+0x1c0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d040      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a33      	ldr	r2, [pc, #204]	; (8005628 <HAL_DMA_Init+0x1c4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d03b      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a31      	ldr	r2, [pc, #196]	; (800562c <HAL_DMA_Init+0x1c8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d036      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a30      	ldr	r2, [pc, #192]	; (8005630 <HAL_DMA_Init+0x1cc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d031      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2e      	ldr	r2, [pc, #184]	; (8005634 <HAL_DMA_Init+0x1d0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d02c      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <HAL_DMA_Init+0x1d4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d027      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2b      	ldr	r2, [pc, #172]	; (800563c <HAL_DMA_Init+0x1d8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d022      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <HAL_DMA_Init+0x1dc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d01d      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a28      	ldr	r2, [pc, #160]	; (8005644 <HAL_DMA_Init+0x1e0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d018      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a27      	ldr	r2, [pc, #156]	; (8005648 <HAL_DMA_Init+0x1e4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d013      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <HAL_DMA_Init+0x1e8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00e      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a24      	ldr	r2, [pc, #144]	; (8005650 <HAL_DMA_Init+0x1ec>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d009      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a22      	ldr	r2, [pc, #136]	; (8005654 <HAL_DMA_Init+0x1f0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_DMA_Init+0x174>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a21      	ldr	r2, [pc, #132]	; (8005658 <HAL_DMA_Init+0x1f4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d108      	bne.n	80055ea <HAL_DMA_Init+0x186>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e007      	b.n	80055fa <HAL_DMA_Init+0x196>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055fa:	e02f      	b.n	800565c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055fc:	f7fe fc50 	bl	8003ea0 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b05      	cmp	r3, #5
 8005608:	d928      	bls.n	800565c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2203      	movs	r2, #3
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e246      	b.n	8005aaa <HAL_DMA_Init+0x646>
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1c8      	bne.n	80055fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4b83      	ldr	r3, [pc, #524]	; (8005884 <HAL_DMA_Init+0x420>)
 8005676:	4013      	ands	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005682:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d107      	bne.n	80056c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	4313      	orrs	r3, r2
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80056c0:	4b71      	ldr	r3, [pc, #452]	; (8005888 <HAL_DMA_Init+0x424>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b71      	ldr	r3, [pc, #452]	; (800588c <HAL_DMA_Init+0x428>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056cc:	d328      	bcc.n	8005720 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b28      	cmp	r3, #40	; 0x28
 80056d4:	d903      	bls.n	80056de <HAL_DMA_Init+0x27a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b2e      	cmp	r3, #46	; 0x2e
 80056dc:	d917      	bls.n	800570e <HAL_DMA_Init+0x2aa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b3e      	cmp	r3, #62	; 0x3e
 80056e4:	d903      	bls.n	80056ee <HAL_DMA_Init+0x28a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b42      	cmp	r3, #66	; 0x42
 80056ec:	d90f      	bls.n	800570e <HAL_DMA_Init+0x2aa>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b46      	cmp	r3, #70	; 0x46
 80056f4:	d903      	bls.n	80056fe <HAL_DMA_Init+0x29a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b48      	cmp	r3, #72	; 0x48
 80056fc:	d907      	bls.n	800570e <HAL_DMA_Init+0x2aa>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b4e      	cmp	r3, #78	; 0x4e
 8005704:	d905      	bls.n	8005712 <HAL_DMA_Init+0x2ae>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b52      	cmp	r3, #82	; 0x52
 800570c:	d801      	bhi.n	8005712 <HAL_DMA_Init+0x2ae>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <HAL_DMA_Init+0x2b0>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800571e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0307 	bic.w	r3, r3, #7
 8005736:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	2b04      	cmp	r3, #4
 8005748:	d117      	bne.n	800577a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f002 f813 	bl	8007788 <DMA_CheckFifoParam>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2240      	movs	r2, #64	; 0x40
 800576c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e197      	b.n	8005aaa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 ff4e 	bl	8007624 <DMA_CalcBaseAndBitshift>
 8005788:	4603      	mov	r3, r0
 800578a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	223f      	movs	r2, #63	; 0x3f
 8005796:	409a      	lsls	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	e0cd      	b.n	800593a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a3b      	ldr	r2, [pc, #236]	; (8005890 <HAL_DMA_Init+0x42c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_DMA_Init+0x38a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a39      	ldr	r2, [pc, #228]	; (8005894 <HAL_DMA_Init+0x430>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01d      	beq.n	80057ee <HAL_DMA_Init+0x38a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a38      	ldr	r2, [pc, #224]	; (8005898 <HAL_DMA_Init+0x434>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_DMA_Init+0x38a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a36      	ldr	r2, [pc, #216]	; (800589c <HAL_DMA_Init+0x438>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_DMA_Init+0x38a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a35      	ldr	r2, [pc, #212]	; (80058a0 <HAL_DMA_Init+0x43c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_DMA_Init+0x38a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a33      	ldr	r2, [pc, #204]	; (80058a4 <HAL_DMA_Init+0x440>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_DMA_Init+0x38a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a32      	ldr	r2, [pc, #200]	; (80058a8 <HAL_DMA_Init+0x444>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_DMA_Init+0x38a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a30      	ldr	r2, [pc, #192]	; (80058ac <HAL_DMA_Init+0x448>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d101      	bne.n	80057f2 <HAL_DMA_Init+0x38e>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <HAL_DMA_Init+0x390>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8097 	beq.w	8005928 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a24      	ldr	r2, [pc, #144]	; (8005890 <HAL_DMA_Init+0x42c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d021      	beq.n	8005848 <HAL_DMA_Init+0x3e4>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a22      	ldr	r2, [pc, #136]	; (8005894 <HAL_DMA_Init+0x430>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01c      	beq.n	8005848 <HAL_DMA_Init+0x3e4>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a21      	ldr	r2, [pc, #132]	; (8005898 <HAL_DMA_Init+0x434>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d017      	beq.n	8005848 <HAL_DMA_Init+0x3e4>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1f      	ldr	r2, [pc, #124]	; (800589c <HAL_DMA_Init+0x438>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d012      	beq.n	8005848 <HAL_DMA_Init+0x3e4>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <HAL_DMA_Init+0x43c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00d      	beq.n	8005848 <HAL_DMA_Init+0x3e4>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1c      	ldr	r2, [pc, #112]	; (80058a4 <HAL_DMA_Init+0x440>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d008      	beq.n	8005848 <HAL_DMA_Init+0x3e4>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <HAL_DMA_Init+0x444>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <HAL_DMA_Init+0x3e4>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a19      	ldr	r2, [pc, #100]	; (80058ac <HAL_DMA_Init+0x448>)
 8005846:	4293      	cmp	r3, r2
 8005848:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_DMA_Init+0x44c>)
 8005866:	4013      	ands	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d020      	beq.n	80058b4 <HAL_DMA_Init+0x450>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b80      	cmp	r3, #128	; 0x80
 8005878:	d102      	bne.n	8005880 <HAL_DMA_Init+0x41c>
 800587a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800587e:	e01a      	b.n	80058b6 <HAL_DMA_Init+0x452>
 8005880:	2300      	movs	r3, #0
 8005882:	e018      	b.n	80058b6 <HAL_DMA_Init+0x452>
 8005884:	fe10803f 	.word	0xfe10803f
 8005888:	5c001000 	.word	0x5c001000
 800588c:	ffff0000 	.word	0xffff0000
 8005890:	58025408 	.word	0x58025408
 8005894:	5802541c 	.word	0x5802541c
 8005898:	58025430 	.word	0x58025430
 800589c:	58025444 	.word	0x58025444
 80058a0:	58025458 	.word	0x58025458
 80058a4:	5802546c 	.word	0x5802546c
 80058a8:	58025480 	.word	0x58025480
 80058ac:	58025494 	.word	0x58025494
 80058b0:	fffe000f 	.word	0xfffe000f
 80058b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68d2      	ldr	r2, [r2, #12]
 80058ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	4b6e      	ldr	r3, [pc, #440]	; (8005ab4 <HAL_DMA_Init+0x650>)
 80058fc:	4413      	add	r3, r2
 80058fe:	4a6e      	ldr	r2, [pc, #440]	; (8005ab8 <HAL_DMA_Init+0x654>)
 8005900:	fba2 2303 	umull	r2, r3, r2, r3
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	009a      	lsls	r2, r3, #2
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fe89 	bl	8007624 <DMA_CalcBaseAndBitshift>
 8005912:	4603      	mov	r3, r0
 8005914:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2201      	movs	r2, #1
 8005920:	409a      	lsls	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	e008      	b.n	800593a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2240      	movs	r2, #64	; 0x40
 800592c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2203      	movs	r2, #3
 8005932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e0b7      	b.n	8005aaa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a5f      	ldr	r2, [pc, #380]	; (8005abc <HAL_DMA_Init+0x658>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d072      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a5d      	ldr	r2, [pc, #372]	; (8005ac0 <HAL_DMA_Init+0x65c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d06d      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a5c      	ldr	r2, [pc, #368]	; (8005ac4 <HAL_DMA_Init+0x660>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d068      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a5a      	ldr	r2, [pc, #360]	; (8005ac8 <HAL_DMA_Init+0x664>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d063      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a59      	ldr	r2, [pc, #356]	; (8005acc <HAL_DMA_Init+0x668>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d05e      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a57      	ldr	r2, [pc, #348]	; (8005ad0 <HAL_DMA_Init+0x66c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d059      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a56      	ldr	r2, [pc, #344]	; (8005ad4 <HAL_DMA_Init+0x670>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d054      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a54      	ldr	r2, [pc, #336]	; (8005ad8 <HAL_DMA_Init+0x674>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d04f      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a53      	ldr	r2, [pc, #332]	; (8005adc <HAL_DMA_Init+0x678>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d04a      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a51      	ldr	r2, [pc, #324]	; (8005ae0 <HAL_DMA_Init+0x67c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d045      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a50      	ldr	r2, [pc, #320]	; (8005ae4 <HAL_DMA_Init+0x680>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d040      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a4e      	ldr	r2, [pc, #312]	; (8005ae8 <HAL_DMA_Init+0x684>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d03b      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a4d      	ldr	r2, [pc, #308]	; (8005aec <HAL_DMA_Init+0x688>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d036      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a4b      	ldr	r2, [pc, #300]	; (8005af0 <HAL_DMA_Init+0x68c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d031      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4a      	ldr	r2, [pc, #296]	; (8005af4 <HAL_DMA_Init+0x690>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d02c      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a48      	ldr	r2, [pc, #288]	; (8005af8 <HAL_DMA_Init+0x694>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d027      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a47      	ldr	r2, [pc, #284]	; (8005afc <HAL_DMA_Init+0x698>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a45      	ldr	r2, [pc, #276]	; (8005b00 <HAL_DMA_Init+0x69c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01d      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a44      	ldr	r2, [pc, #272]	; (8005b04 <HAL_DMA_Init+0x6a0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a42      	ldr	r2, [pc, #264]	; (8005b08 <HAL_DMA_Init+0x6a4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a41      	ldr	r2, [pc, #260]	; (8005b0c <HAL_DMA_Init+0x6a8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a3f      	ldr	r2, [pc, #252]	; (8005b10 <HAL_DMA_Init+0x6ac>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3e      	ldr	r2, [pc, #248]	; (8005b14 <HAL_DMA_Init+0x6b0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_DMA_Init+0x5c6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a3c      	ldr	r2, [pc, #240]	; (8005b18 <HAL_DMA_Init+0x6b4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_DMA_Init+0x5ca>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_DMA_Init+0x5cc>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d032      	beq.n	8005a9a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 ff23 	bl	8007880 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b80      	cmp	r3, #128	; 0x80
 8005a40:	d102      	bne.n	8005a48 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a5c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <HAL_DMA_Init+0x624>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d80c      	bhi.n	8005a88 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 ffa0 	bl	80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	e008      	b.n	8005a9a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	a7fdabf8 	.word	0xa7fdabf8
 8005ab8:	cccccccd 	.word	0xcccccccd
 8005abc:	40020010 	.word	0x40020010
 8005ac0:	40020028 	.word	0x40020028
 8005ac4:	40020040 	.word	0x40020040
 8005ac8:	40020058 	.word	0x40020058
 8005acc:	40020070 	.word	0x40020070
 8005ad0:	40020088 	.word	0x40020088
 8005ad4:	400200a0 	.word	0x400200a0
 8005ad8:	400200b8 	.word	0x400200b8
 8005adc:	40020410 	.word	0x40020410
 8005ae0:	40020428 	.word	0x40020428
 8005ae4:	40020440 	.word	0x40020440
 8005ae8:	40020458 	.word	0x40020458
 8005aec:	40020470 	.word	0x40020470
 8005af0:	40020488 	.word	0x40020488
 8005af4:	400204a0 	.word	0x400204a0
 8005af8:	400204b8 	.word	0x400204b8
 8005afc:	58025408 	.word	0x58025408
 8005b00:	5802541c 	.word	0x5802541c
 8005b04:	58025430 	.word	0x58025430
 8005b08:	58025444 	.word	0x58025444
 8005b0c:	58025458 	.word	0x58025458
 8005b10:	5802546c 	.word	0x5802546c
 8005b14:	58025480 	.word	0x58025480
 8005b18:	58025494 	.word	0x58025494

08005b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e226      	b.n	8005f86 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_DMA_Start_IT+0x2a>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e21f      	b.n	8005f86 <HAL_DMA_Start_IT+0x46a>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	f040 820a 	bne.w	8005f70 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a68      	ldr	r2, [pc, #416]	; (8005d10 <HAL_DMA_Start_IT+0x1f4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d04a      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a66      	ldr	r2, [pc, #408]	; (8005d14 <HAL_DMA_Start_IT+0x1f8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d045      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_DMA_Start_IT+0x1fc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d040      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a63      	ldr	r2, [pc, #396]	; (8005d1c <HAL_DMA_Start_IT+0x200>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d03b      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a62      	ldr	r2, [pc, #392]	; (8005d20 <HAL_DMA_Start_IT+0x204>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d036      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a60      	ldr	r2, [pc, #384]	; (8005d24 <HAL_DMA_Start_IT+0x208>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d031      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a5f      	ldr	r2, [pc, #380]	; (8005d28 <HAL_DMA_Start_IT+0x20c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d02c      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a5d      	ldr	r2, [pc, #372]	; (8005d2c <HAL_DMA_Start_IT+0x210>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d027      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5c      	ldr	r2, [pc, #368]	; (8005d30 <HAL_DMA_Start_IT+0x214>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5a      	ldr	r2, [pc, #360]	; (8005d34 <HAL_DMA_Start_IT+0x218>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01d      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a59      	ldr	r2, [pc, #356]	; (8005d38 <HAL_DMA_Start_IT+0x21c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d018      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a57      	ldr	r2, [pc, #348]	; (8005d3c <HAL_DMA_Start_IT+0x220>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a56      	ldr	r2, [pc, #344]	; (8005d40 <HAL_DMA_Start_IT+0x224>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a54      	ldr	r2, [pc, #336]	; (8005d44 <HAL_DMA_Start_IT+0x228>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a53      	ldr	r2, [pc, #332]	; (8005d48 <HAL_DMA_Start_IT+0x22c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_DMA_Start_IT+0xee>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a51      	ldr	r2, [pc, #324]	; (8005d4c <HAL_DMA_Start_IT+0x230>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d108      	bne.n	8005c1c <HAL_DMA_Start_IT+0x100>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e007      	b.n	8005c2c <HAL_DMA_Start_IT+0x110>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f001 fb4a 	bl	80072cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a34      	ldr	r2, [pc, #208]	; (8005d10 <HAL_DMA_Start_IT+0x1f4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d04a      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a33      	ldr	r2, [pc, #204]	; (8005d14 <HAL_DMA_Start_IT+0x1f8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d045      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a31      	ldr	r2, [pc, #196]	; (8005d18 <HAL_DMA_Start_IT+0x1fc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d040      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a30      	ldr	r2, [pc, #192]	; (8005d1c <HAL_DMA_Start_IT+0x200>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d03b      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2e      	ldr	r2, [pc, #184]	; (8005d20 <HAL_DMA_Start_IT+0x204>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d036      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <HAL_DMA_Start_IT+0x208>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d031      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2b      	ldr	r2, [pc, #172]	; (8005d28 <HAL_DMA_Start_IT+0x20c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02c      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <HAL_DMA_Start_IT+0x210>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d027      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <HAL_DMA_Start_IT+0x214>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_DMA_Start_IT+0x218>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a25      	ldr	r2, [pc, #148]	; (8005d38 <HAL_DMA_Start_IT+0x21c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a24      	ldr	r2, [pc, #144]	; (8005d3c <HAL_DMA_Start_IT+0x220>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a22      	ldr	r2, [pc, #136]	; (8005d40 <HAL_DMA_Start_IT+0x224>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <HAL_DMA_Start_IT+0x228>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <HAL_DMA_Start_IT+0x22c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x1bc>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1e      	ldr	r2, [pc, #120]	; (8005d4c <HAL_DMA_Start_IT+0x230>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_DMA_Start_IT+0x1c0>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_DMA_Start_IT+0x1c2>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d036      	beq.n	8005d50 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f023 021e 	bic.w	r2, r3, #30
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0216 	orr.w	r2, r2, #22
 8005cf4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d03e      	beq.n	8005d7c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0208 	orr.w	r2, r2, #8
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e035      	b.n	8005d7c <HAL_DMA_Start_IT+0x260>
 8005d10:	40020010 	.word	0x40020010
 8005d14:	40020028 	.word	0x40020028
 8005d18:	40020040 	.word	0x40020040
 8005d1c:	40020058 	.word	0x40020058
 8005d20:	40020070 	.word	0x40020070
 8005d24:	40020088 	.word	0x40020088
 8005d28:	400200a0 	.word	0x400200a0
 8005d2c:	400200b8 	.word	0x400200b8
 8005d30:	40020410 	.word	0x40020410
 8005d34:	40020428 	.word	0x40020428
 8005d38:	40020440 	.word	0x40020440
 8005d3c:	40020458 	.word	0x40020458
 8005d40:	40020470 	.word	0x40020470
 8005d44:	40020488 	.word	0x40020488
 8005d48:	400204a0 	.word	0x400204a0
 8005d4c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 020e 	bic.w	r2, r3, #14
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 020a 	orr.w	r2, r2, #10
 8005d62:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0204 	orr.w	r2, r2, #4
 8005d7a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a83      	ldr	r2, [pc, #524]	; (8005f90 <HAL_DMA_Start_IT+0x474>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d072      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a82      	ldr	r2, [pc, #520]	; (8005f94 <HAL_DMA_Start_IT+0x478>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d06d      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a80      	ldr	r2, [pc, #512]	; (8005f98 <HAL_DMA_Start_IT+0x47c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d068      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a7f      	ldr	r2, [pc, #508]	; (8005f9c <HAL_DMA_Start_IT+0x480>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d063      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a7d      	ldr	r2, [pc, #500]	; (8005fa0 <HAL_DMA_Start_IT+0x484>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d05e      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a7c      	ldr	r2, [pc, #496]	; (8005fa4 <HAL_DMA_Start_IT+0x488>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d059      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a7a      	ldr	r2, [pc, #488]	; (8005fa8 <HAL_DMA_Start_IT+0x48c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d054      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a79      	ldr	r2, [pc, #484]	; (8005fac <HAL_DMA_Start_IT+0x490>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d04f      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a77      	ldr	r2, [pc, #476]	; (8005fb0 <HAL_DMA_Start_IT+0x494>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d04a      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a76      	ldr	r2, [pc, #472]	; (8005fb4 <HAL_DMA_Start_IT+0x498>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d045      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a74      	ldr	r2, [pc, #464]	; (8005fb8 <HAL_DMA_Start_IT+0x49c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d040      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a73      	ldr	r2, [pc, #460]	; (8005fbc <HAL_DMA_Start_IT+0x4a0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d03b      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a71      	ldr	r2, [pc, #452]	; (8005fc0 <HAL_DMA_Start_IT+0x4a4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d036      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a70      	ldr	r2, [pc, #448]	; (8005fc4 <HAL_DMA_Start_IT+0x4a8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d031      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a6e      	ldr	r2, [pc, #440]	; (8005fc8 <HAL_DMA_Start_IT+0x4ac>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d02c      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a6d      	ldr	r2, [pc, #436]	; (8005fcc <HAL_DMA_Start_IT+0x4b0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d027      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a6b      	ldr	r2, [pc, #428]	; (8005fd0 <HAL_DMA_Start_IT+0x4b4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a6a      	ldr	r2, [pc, #424]	; (8005fd4 <HAL_DMA_Start_IT+0x4b8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d01d      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a68      	ldr	r2, [pc, #416]	; (8005fd8 <HAL_DMA_Start_IT+0x4bc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d018      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a67      	ldr	r2, [pc, #412]	; (8005fdc <HAL_DMA_Start_IT+0x4c0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a65      	ldr	r2, [pc, #404]	; (8005fe0 <HAL_DMA_Start_IT+0x4c4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00e      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a64      	ldr	r2, [pc, #400]	; (8005fe4 <HAL_DMA_Start_IT+0x4c8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a62      	ldr	r2, [pc, #392]	; (8005fe8 <HAL_DMA_Start_IT+0x4cc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_DMA_Start_IT+0x350>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a61      	ldr	r2, [pc, #388]	; (8005fec <HAL_DMA_Start_IT+0x4d0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d101      	bne.n	8005e70 <HAL_DMA_Start_IT+0x354>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <HAL_DMA_Start_IT+0x356>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01a      	beq.n	8005eac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d007      	beq.n	8005e94 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e92:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eaa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a37      	ldr	r2, [pc, #220]	; (8005f90 <HAL_DMA_Start_IT+0x474>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d04a      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a36      	ldr	r2, [pc, #216]	; (8005f94 <HAL_DMA_Start_IT+0x478>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d045      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a34      	ldr	r2, [pc, #208]	; (8005f98 <HAL_DMA_Start_IT+0x47c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d040      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a33      	ldr	r2, [pc, #204]	; (8005f9c <HAL_DMA_Start_IT+0x480>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d03b      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a31      	ldr	r2, [pc, #196]	; (8005fa0 <HAL_DMA_Start_IT+0x484>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d036      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a30      	ldr	r2, [pc, #192]	; (8005fa4 <HAL_DMA_Start_IT+0x488>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d031      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2e      	ldr	r2, [pc, #184]	; (8005fa8 <HAL_DMA_Start_IT+0x48c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02c      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2d      	ldr	r2, [pc, #180]	; (8005fac <HAL_DMA_Start_IT+0x490>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d027      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2b      	ldr	r2, [pc, #172]	; (8005fb0 <HAL_DMA_Start_IT+0x494>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2a      	ldr	r2, [pc, #168]	; (8005fb4 <HAL_DMA_Start_IT+0x498>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01d      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a28      	ldr	r2, [pc, #160]	; (8005fb8 <HAL_DMA_Start_IT+0x49c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a27      	ldr	r2, [pc, #156]	; (8005fbc <HAL_DMA_Start_IT+0x4a0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a25      	ldr	r2, [pc, #148]	; (8005fc0 <HAL_DMA_Start_IT+0x4a4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a24      	ldr	r2, [pc, #144]	; (8005fc4 <HAL_DMA_Start_IT+0x4a8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <HAL_DMA_Start_IT+0x4ac>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_DMA_Start_IT+0x430>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <HAL_DMA_Start_IT+0x4b0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d108      	bne.n	8005f5e <HAL_DMA_Start_IT+0x442>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e012      	b.n	8005f84 <HAL_DMA_Start_IT+0x468>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e009      	b.n	8005f84 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40020010 	.word	0x40020010
 8005f94:	40020028 	.word	0x40020028
 8005f98:	40020040 	.word	0x40020040
 8005f9c:	40020058 	.word	0x40020058
 8005fa0:	40020070 	.word	0x40020070
 8005fa4:	40020088 	.word	0x40020088
 8005fa8:	400200a0 	.word	0x400200a0
 8005fac:	400200b8 	.word	0x400200b8
 8005fb0:	40020410 	.word	0x40020410
 8005fb4:	40020428 	.word	0x40020428
 8005fb8:	40020440 	.word	0x40020440
 8005fbc:	40020458 	.word	0x40020458
 8005fc0:	40020470 	.word	0x40020470
 8005fc4:	40020488 	.word	0x40020488
 8005fc8:	400204a0 	.word	0x400204a0
 8005fcc:	400204b8 	.word	0x400204b8
 8005fd0:	58025408 	.word	0x58025408
 8005fd4:	5802541c 	.word	0x5802541c
 8005fd8:	58025430 	.word	0x58025430
 8005fdc:	58025444 	.word	0x58025444
 8005fe0:	58025458 	.word	0x58025458
 8005fe4:	5802546c 	.word	0x5802546c
 8005fe8:	58025480 	.word	0x58025480
 8005fec:	58025494 	.word	0x58025494

08005ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e205      	b.n	800640e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d004      	beq.n	8006018 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2280      	movs	r2, #128	; 0x80
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e1fa      	b.n	800640e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a8c      	ldr	r2, [pc, #560]	; (8006250 <HAL_DMA_Abort_IT+0x260>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d04a      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a8b      	ldr	r2, [pc, #556]	; (8006254 <HAL_DMA_Abort_IT+0x264>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d045      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a89      	ldr	r2, [pc, #548]	; (8006258 <HAL_DMA_Abort_IT+0x268>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d040      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a88      	ldr	r2, [pc, #544]	; (800625c <HAL_DMA_Abort_IT+0x26c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d03b      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a86      	ldr	r2, [pc, #536]	; (8006260 <HAL_DMA_Abort_IT+0x270>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d036      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a85      	ldr	r2, [pc, #532]	; (8006264 <HAL_DMA_Abort_IT+0x274>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d031      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a83      	ldr	r2, [pc, #524]	; (8006268 <HAL_DMA_Abort_IT+0x278>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d02c      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a82      	ldr	r2, [pc, #520]	; (800626c <HAL_DMA_Abort_IT+0x27c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d027      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a80      	ldr	r2, [pc, #512]	; (8006270 <HAL_DMA_Abort_IT+0x280>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d022      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a7f      	ldr	r2, [pc, #508]	; (8006274 <HAL_DMA_Abort_IT+0x284>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d01d      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a7d      	ldr	r2, [pc, #500]	; (8006278 <HAL_DMA_Abort_IT+0x288>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d018      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a7c      	ldr	r2, [pc, #496]	; (800627c <HAL_DMA_Abort_IT+0x28c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a7a      	ldr	r2, [pc, #488]	; (8006280 <HAL_DMA_Abort_IT+0x290>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00e      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a79      	ldr	r2, [pc, #484]	; (8006284 <HAL_DMA_Abort_IT+0x294>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d009      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a77      	ldr	r2, [pc, #476]	; (8006288 <HAL_DMA_Abort_IT+0x298>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <HAL_DMA_Abort_IT+0xc8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a76      	ldr	r2, [pc, #472]	; (800628c <HAL_DMA_Abort_IT+0x29c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d101      	bne.n	80060bc <HAL_DMA_Abort_IT+0xcc>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <HAL_DMA_Abort_IT+0xce>
 80060bc:	2300      	movs	r3, #0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d065      	beq.n	800618e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2204      	movs	r2, #4
 80060c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a60      	ldr	r2, [pc, #384]	; (8006250 <HAL_DMA_Abort_IT+0x260>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d04a      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a5e      	ldr	r2, [pc, #376]	; (8006254 <HAL_DMA_Abort_IT+0x264>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d045      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a5d      	ldr	r2, [pc, #372]	; (8006258 <HAL_DMA_Abort_IT+0x268>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d040      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a5b      	ldr	r2, [pc, #364]	; (800625c <HAL_DMA_Abort_IT+0x26c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d03b      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a5a      	ldr	r2, [pc, #360]	; (8006260 <HAL_DMA_Abort_IT+0x270>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d036      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a58      	ldr	r2, [pc, #352]	; (8006264 <HAL_DMA_Abort_IT+0x274>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d031      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a57      	ldr	r2, [pc, #348]	; (8006268 <HAL_DMA_Abort_IT+0x278>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d02c      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a55      	ldr	r2, [pc, #340]	; (800626c <HAL_DMA_Abort_IT+0x27c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d027      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a54      	ldr	r2, [pc, #336]	; (8006270 <HAL_DMA_Abort_IT+0x280>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d022      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a52      	ldr	r2, [pc, #328]	; (8006274 <HAL_DMA_Abort_IT+0x284>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d01d      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a51      	ldr	r2, [pc, #324]	; (8006278 <HAL_DMA_Abort_IT+0x288>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d018      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a4f      	ldr	r2, [pc, #316]	; (800627c <HAL_DMA_Abort_IT+0x28c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4e      	ldr	r2, [pc, #312]	; (8006280 <HAL_DMA_Abort_IT+0x290>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00e      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a4c      	ldr	r2, [pc, #304]	; (8006284 <HAL_DMA_Abort_IT+0x294>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d009      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a4b      	ldr	r2, [pc, #300]	; (8006288 <HAL_DMA_Abort_IT+0x298>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_DMA_Abort_IT+0x17a>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a49      	ldr	r2, [pc, #292]	; (800628c <HAL_DMA_Abort_IT+0x29c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d108      	bne.n	800617c <HAL_DMA_Abort_IT+0x18c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	e147      	b.n	800640c <HAL_DMA_Abort_IT+0x41c>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	e13e      	b.n	800640c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 020e 	bic.w	r2, r2, #14
 800619c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2b      	ldr	r2, [pc, #172]	; (8006250 <HAL_DMA_Abort_IT+0x260>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d04a      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a29      	ldr	r2, [pc, #164]	; (8006254 <HAL_DMA_Abort_IT+0x264>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d045      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a28      	ldr	r2, [pc, #160]	; (8006258 <HAL_DMA_Abort_IT+0x268>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d040      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a26      	ldr	r2, [pc, #152]	; (800625c <HAL_DMA_Abort_IT+0x26c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d03b      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a25      	ldr	r2, [pc, #148]	; (8006260 <HAL_DMA_Abort_IT+0x270>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d036      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a23      	ldr	r2, [pc, #140]	; (8006264 <HAL_DMA_Abort_IT+0x274>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d031      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a22      	ldr	r2, [pc, #136]	; (8006268 <HAL_DMA_Abort_IT+0x278>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d02c      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a20      	ldr	r2, [pc, #128]	; (800626c <HAL_DMA_Abort_IT+0x27c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d027      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <HAL_DMA_Abort_IT+0x280>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d022      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_DMA_Abort_IT+0x284>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01d      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_DMA_Abort_IT+0x288>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d018      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1a      	ldr	r2, [pc, #104]	; (800627c <HAL_DMA_Abort_IT+0x28c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a19      	ldr	r2, [pc, #100]	; (8006280 <HAL_DMA_Abort_IT+0x290>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00e      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a17      	ldr	r2, [pc, #92]	; (8006284 <HAL_DMA_Abort_IT+0x294>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a16      	ldr	r2, [pc, #88]	; (8006288 <HAL_DMA_Abort_IT+0x298>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <HAL_DMA_Abort_IT+0x24e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a14      	ldr	r2, [pc, #80]	; (800628c <HAL_DMA_Abort_IT+0x29c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d128      	bne.n	8006290 <HAL_DMA_Abort_IT+0x2a0>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e027      	b.n	80062a0 <HAL_DMA_Abort_IT+0x2b0>
 8006250:	40020010 	.word	0x40020010
 8006254:	40020028 	.word	0x40020028
 8006258:	40020040 	.word	0x40020040
 800625c:	40020058 	.word	0x40020058
 8006260:	40020070 	.word	0x40020070
 8006264:	40020088 	.word	0x40020088
 8006268:	400200a0 	.word	0x400200a0
 800626c:	400200b8 	.word	0x400200b8
 8006270:	40020410 	.word	0x40020410
 8006274:	40020428 	.word	0x40020428
 8006278:	40020440 	.word	0x40020440
 800627c:	40020458 	.word	0x40020458
 8006280:	40020470 	.word	0x40020470
 8006284:	40020488 	.word	0x40020488
 8006288:	400204a0 	.word	0x400204a0
 800628c:	400204b8 	.word	0x400204b8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5c      	ldr	r2, [pc, #368]	; (8006418 <HAL_DMA_Abort_IT+0x428>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d072      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a5b      	ldr	r2, [pc, #364]	; (800641c <HAL_DMA_Abort_IT+0x42c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d06d      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a59      	ldr	r2, [pc, #356]	; (8006420 <HAL_DMA_Abort_IT+0x430>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d068      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a58      	ldr	r2, [pc, #352]	; (8006424 <HAL_DMA_Abort_IT+0x434>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d063      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a56      	ldr	r2, [pc, #344]	; (8006428 <HAL_DMA_Abort_IT+0x438>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d05e      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a55      	ldr	r2, [pc, #340]	; (800642c <HAL_DMA_Abort_IT+0x43c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d059      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a53      	ldr	r2, [pc, #332]	; (8006430 <HAL_DMA_Abort_IT+0x440>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d054      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a52      	ldr	r2, [pc, #328]	; (8006434 <HAL_DMA_Abort_IT+0x444>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d04f      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a50      	ldr	r2, [pc, #320]	; (8006438 <HAL_DMA_Abort_IT+0x448>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d04a      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a4f      	ldr	r2, [pc, #316]	; (800643c <HAL_DMA_Abort_IT+0x44c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d045      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4d      	ldr	r2, [pc, #308]	; (8006440 <HAL_DMA_Abort_IT+0x450>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d040      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4c      	ldr	r2, [pc, #304]	; (8006444 <HAL_DMA_Abort_IT+0x454>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d03b      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a4a      	ldr	r2, [pc, #296]	; (8006448 <HAL_DMA_Abort_IT+0x458>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d036      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a49      	ldr	r2, [pc, #292]	; (800644c <HAL_DMA_Abort_IT+0x45c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d031      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a47      	ldr	r2, [pc, #284]	; (8006450 <HAL_DMA_Abort_IT+0x460>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d02c      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a46      	ldr	r2, [pc, #280]	; (8006454 <HAL_DMA_Abort_IT+0x464>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d027      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a44      	ldr	r2, [pc, #272]	; (8006458 <HAL_DMA_Abort_IT+0x468>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d022      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a43      	ldr	r2, [pc, #268]	; (800645c <HAL_DMA_Abort_IT+0x46c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d01d      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a41      	ldr	r2, [pc, #260]	; (8006460 <HAL_DMA_Abort_IT+0x470>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d018      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a40      	ldr	r2, [pc, #256]	; (8006464 <HAL_DMA_Abort_IT+0x474>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d013      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3e      	ldr	r2, [pc, #248]	; (8006468 <HAL_DMA_Abort_IT+0x478>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00e      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a3d      	ldr	r2, [pc, #244]	; (800646c <HAL_DMA_Abort_IT+0x47c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d009      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a3b      	ldr	r2, [pc, #236]	; (8006470 <HAL_DMA_Abort_IT+0x480>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <HAL_DMA_Abort_IT+0x3a0>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a3a      	ldr	r2, [pc, #232]	; (8006474 <HAL_DMA_Abort_IT+0x484>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d101      	bne.n	8006394 <HAL_DMA_Abort_IT+0x3a4>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <HAL_DMA_Abort_IT+0x3a6>
 8006394:	2300      	movs	r3, #0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d028      	beq.n	80063ec <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2201      	movs	r2, #1
 80063ba:	409a      	lsls	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00c      	beq.n	80063ec <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40020010 	.word	0x40020010
 800641c:	40020028 	.word	0x40020028
 8006420:	40020040 	.word	0x40020040
 8006424:	40020058 	.word	0x40020058
 8006428:	40020070 	.word	0x40020070
 800642c:	40020088 	.word	0x40020088
 8006430:	400200a0 	.word	0x400200a0
 8006434:	400200b8 	.word	0x400200b8
 8006438:	40020410 	.word	0x40020410
 800643c:	40020428 	.word	0x40020428
 8006440:	40020440 	.word	0x40020440
 8006444:	40020458 	.word	0x40020458
 8006448:	40020470 	.word	0x40020470
 800644c:	40020488 	.word	0x40020488
 8006450:	400204a0 	.word	0x400204a0
 8006454:	400204b8 	.word	0x400204b8
 8006458:	58025408 	.word	0x58025408
 800645c:	5802541c 	.word	0x5802541c
 8006460:	58025430 	.word	0x58025430
 8006464:	58025444 	.word	0x58025444
 8006468:	58025458 	.word	0x58025458
 800646c:	5802546c 	.word	0x5802546c
 8006470:	58025480 	.word	0x58025480
 8006474:	58025494 	.word	0x58025494

08006478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	; 0x28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006484:	4b67      	ldr	r3, [pc, #412]	; (8006624 <HAL_DMA_IRQHandler+0x1ac>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a67      	ldr	r2, [pc, #412]	; (8006628 <HAL_DMA_IRQHandler+0x1b0>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	0a9b      	lsrs	r3, r3, #10
 8006490:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a5f      	ldr	r2, [pc, #380]	; (800662c <HAL_DMA_IRQHandler+0x1b4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d04a      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a5d      	ldr	r2, [pc, #372]	; (8006630 <HAL_DMA_IRQHandler+0x1b8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d045      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5c      	ldr	r2, [pc, #368]	; (8006634 <HAL_DMA_IRQHandler+0x1bc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d040      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a5a      	ldr	r2, [pc, #360]	; (8006638 <HAL_DMA_IRQHandler+0x1c0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d03b      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a59      	ldr	r2, [pc, #356]	; (800663c <HAL_DMA_IRQHandler+0x1c4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d036      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a57      	ldr	r2, [pc, #348]	; (8006640 <HAL_DMA_IRQHandler+0x1c8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d031      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a56      	ldr	r2, [pc, #344]	; (8006644 <HAL_DMA_IRQHandler+0x1cc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02c      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a54      	ldr	r2, [pc, #336]	; (8006648 <HAL_DMA_IRQHandler+0x1d0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d027      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a53      	ldr	r2, [pc, #332]	; (800664c <HAL_DMA_IRQHandler+0x1d4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a51      	ldr	r2, [pc, #324]	; (8006650 <HAL_DMA_IRQHandler+0x1d8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01d      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a50      	ldr	r2, [pc, #320]	; (8006654 <HAL_DMA_IRQHandler+0x1dc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a4e      	ldr	r2, [pc, #312]	; (8006658 <HAL_DMA_IRQHandler+0x1e0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a4d      	ldr	r2, [pc, #308]	; (800665c <HAL_DMA_IRQHandler+0x1e4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a4b      	ldr	r2, [pc, #300]	; (8006660 <HAL_DMA_IRQHandler+0x1e8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a4a      	ldr	r2, [pc, #296]	; (8006664 <HAL_DMA_IRQHandler+0x1ec>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_DMA_IRQHandler+0xd2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a48      	ldr	r2, [pc, #288]	; (8006668 <HAL_DMA_IRQHandler+0x1f0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <HAL_DMA_IRQHandler+0xd6>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <HAL_DMA_IRQHandler+0xd8>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 842b 	beq.w	8006dac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2208      	movs	r2, #8
 8006560:	409a      	lsls	r2, r3
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	4013      	ands	r3, r2
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80a2 	beq.w	80066b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a2e      	ldr	r2, [pc, #184]	; (800662c <HAL_DMA_IRQHandler+0x1b4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d04a      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a2d      	ldr	r2, [pc, #180]	; (8006630 <HAL_DMA_IRQHandler+0x1b8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d045      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <HAL_DMA_IRQHandler+0x1bc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d040      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <HAL_DMA_IRQHandler+0x1c0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d03b      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a28      	ldr	r2, [pc, #160]	; (800663c <HAL_DMA_IRQHandler+0x1c4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d036      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a27      	ldr	r2, [pc, #156]	; (8006640 <HAL_DMA_IRQHandler+0x1c8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d031      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a25      	ldr	r2, [pc, #148]	; (8006644 <HAL_DMA_IRQHandler+0x1cc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d02c      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a24      	ldr	r2, [pc, #144]	; (8006648 <HAL_DMA_IRQHandler+0x1d0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d027      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_DMA_IRQHandler+0x1d4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d022      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <HAL_DMA_IRQHandler+0x1d8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d01d      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_DMA_IRQHandler+0x1dc>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d018      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_DMA_IRQHandler+0x1e0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1c      	ldr	r2, [pc, #112]	; (800665c <HAL_DMA_IRQHandler+0x1e4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00e      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <HAL_DMA_IRQHandler+0x1e8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d009      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a19      	ldr	r2, [pc, #100]	; (8006664 <HAL_DMA_IRQHandler+0x1ec>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_DMA_IRQHandler+0x194>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a18      	ldr	r2, [pc, #96]	; (8006668 <HAL_DMA_IRQHandler+0x1f0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d12f      	bne.n	800666c <HAL_DMA_IRQHandler+0x1f4>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e02e      	b.n	8006680 <HAL_DMA_IRQHandler+0x208>
 8006622:	bf00      	nop
 8006624:	240000e8 	.word	0x240000e8
 8006628:	1b4e81b5 	.word	0x1b4e81b5
 800662c:	40020010 	.word	0x40020010
 8006630:	40020028 	.word	0x40020028
 8006634:	40020040 	.word	0x40020040
 8006638:	40020058 	.word	0x40020058
 800663c:	40020070 	.word	0x40020070
 8006640:	40020088 	.word	0x40020088
 8006644:	400200a0 	.word	0x400200a0
 8006648:	400200b8 	.word	0x400200b8
 800664c:	40020410 	.word	0x40020410
 8006650:	40020428 	.word	0x40020428
 8006654:	40020440 	.word	0x40020440
 8006658:	40020458 	.word	0x40020458
 800665c:	40020470 	.word	0x40020470
 8006660:	40020488 	.word	0x40020488
 8006664:	400204a0 	.word	0x400204a0
 8006668:	400204b8 	.word	0x400204b8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	bf14      	ite	ne
 800667a:	2301      	movne	r3, #1
 800667c:	2300      	moveq	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0204 	bic.w	r2, r2, #4
 8006692:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2208      	movs	r2, #8
 800669e:	409a      	lsls	r2, r3
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a8:	f043 0201 	orr.w	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d06e      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a69      	ldr	r2, [pc, #420]	; (8006870 <HAL_DMA_IRQHandler+0x3f8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d04a      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a67      	ldr	r2, [pc, #412]	; (8006874 <HAL_DMA_IRQHandler+0x3fc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d045      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a66      	ldr	r2, [pc, #408]	; (8006878 <HAL_DMA_IRQHandler+0x400>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d040      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a64      	ldr	r2, [pc, #400]	; (800687c <HAL_DMA_IRQHandler+0x404>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d03b      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a63      	ldr	r2, [pc, #396]	; (8006880 <HAL_DMA_IRQHandler+0x408>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d036      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a61      	ldr	r2, [pc, #388]	; (8006884 <HAL_DMA_IRQHandler+0x40c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d031      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a60      	ldr	r2, [pc, #384]	; (8006888 <HAL_DMA_IRQHandler+0x410>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d02c      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a5e      	ldr	r2, [pc, #376]	; (800688c <HAL_DMA_IRQHandler+0x414>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d027      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a5d      	ldr	r2, [pc, #372]	; (8006890 <HAL_DMA_IRQHandler+0x418>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d022      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a5b      	ldr	r2, [pc, #364]	; (8006894 <HAL_DMA_IRQHandler+0x41c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01d      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a5a      	ldr	r2, [pc, #360]	; (8006898 <HAL_DMA_IRQHandler+0x420>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a58      	ldr	r2, [pc, #352]	; (800689c <HAL_DMA_IRQHandler+0x424>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a57      	ldr	r2, [pc, #348]	; (80068a0 <HAL_DMA_IRQHandler+0x428>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a55      	ldr	r2, [pc, #340]	; (80068a4 <HAL_DMA_IRQHandler+0x42c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a54      	ldr	r2, [pc, #336]	; (80068a8 <HAL_DMA_IRQHandler+0x430>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_DMA_IRQHandler+0x2ee>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a52      	ldr	r2, [pc, #328]	; (80068ac <HAL_DMA_IRQHandler+0x434>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d10a      	bne.n	800677c <HAL_DMA_IRQHandler+0x304>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006770:	2b00      	cmp	r3, #0
 8006772:	bf14      	ite	ne
 8006774:	2301      	movne	r3, #1
 8006776:	2300      	moveq	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	e003      	b.n	8006784 <HAL_DMA_IRQHandler+0x30c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00d      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678c:	f003 031f 	and.w	r3, r3, #31
 8006790:	2201      	movs	r2, #1
 8006792:	409a      	lsls	r2, r3
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	f043 0202 	orr.w	r2, r3, #2
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2204      	movs	r2, #4
 80067ae:	409a      	lsls	r2, r3
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 808f 	beq.w	80068d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a2c      	ldr	r2, [pc, #176]	; (8006870 <HAL_DMA_IRQHandler+0x3f8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d04a      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a2a      	ldr	r2, [pc, #168]	; (8006874 <HAL_DMA_IRQHandler+0x3fc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d045      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a29      	ldr	r2, [pc, #164]	; (8006878 <HAL_DMA_IRQHandler+0x400>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d040      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a27      	ldr	r2, [pc, #156]	; (800687c <HAL_DMA_IRQHandler+0x404>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d03b      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a26      	ldr	r2, [pc, #152]	; (8006880 <HAL_DMA_IRQHandler+0x408>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d036      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a24      	ldr	r2, [pc, #144]	; (8006884 <HAL_DMA_IRQHandler+0x40c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d031      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a23      	ldr	r2, [pc, #140]	; (8006888 <HAL_DMA_IRQHandler+0x410>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d02c      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a21      	ldr	r2, [pc, #132]	; (800688c <HAL_DMA_IRQHandler+0x414>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d027      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a20      	ldr	r2, [pc, #128]	; (8006890 <HAL_DMA_IRQHandler+0x418>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d022      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1e      	ldr	r2, [pc, #120]	; (8006894 <HAL_DMA_IRQHandler+0x41c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01d      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1d      	ldr	r2, [pc, #116]	; (8006898 <HAL_DMA_IRQHandler+0x420>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d018      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <HAL_DMA_IRQHandler+0x424>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <HAL_DMA_IRQHandler+0x428>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00e      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <HAL_DMA_IRQHandler+0x42c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d009      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <HAL_DMA_IRQHandler+0x430>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <HAL_DMA_IRQHandler+0x3e2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a15      	ldr	r2, [pc, #84]	; (80068ac <HAL_DMA_IRQHandler+0x434>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d12a      	bne.n	80068b0 <HAL_DMA_IRQHandler+0x438>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf14      	ite	ne
 8006868:	2301      	movne	r3, #1
 800686a:	2300      	moveq	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	e023      	b.n	80068b8 <HAL_DMA_IRQHandler+0x440>
 8006870:	40020010 	.word	0x40020010
 8006874:	40020028 	.word	0x40020028
 8006878:	40020040 	.word	0x40020040
 800687c:	40020058 	.word	0x40020058
 8006880:	40020070 	.word	0x40020070
 8006884:	40020088 	.word	0x40020088
 8006888:	400200a0 	.word	0x400200a0
 800688c:	400200b8 	.word	0x400200b8
 8006890:	40020410 	.word	0x40020410
 8006894:	40020428 	.word	0x40020428
 8006898:	40020440 	.word	0x40020440
 800689c:	40020458 	.word	0x40020458
 80068a0:	40020470 	.word	0x40020470
 80068a4:	40020488 	.word	0x40020488
 80068a8:	400204a0 	.word	0x400204a0
 80068ac:	400204b8 	.word	0x400204b8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2300      	movs	r3, #0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	2204      	movs	r2, #4
 80068c6:	409a      	lsls	r2, r3
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	f043 0204 	orr.w	r2, r3, #4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	2210      	movs	r2, #16
 80068e2:	409a      	lsls	r2, r3
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80a6 	beq.w	8006a3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a85      	ldr	r2, [pc, #532]	; (8006b08 <HAL_DMA_IRQHandler+0x690>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d04a      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a83      	ldr	r2, [pc, #524]	; (8006b0c <HAL_DMA_IRQHandler+0x694>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d045      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a82      	ldr	r2, [pc, #520]	; (8006b10 <HAL_DMA_IRQHandler+0x698>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d040      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a80      	ldr	r2, [pc, #512]	; (8006b14 <HAL_DMA_IRQHandler+0x69c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d03b      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a7f      	ldr	r2, [pc, #508]	; (8006b18 <HAL_DMA_IRQHandler+0x6a0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d036      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a7d      	ldr	r2, [pc, #500]	; (8006b1c <HAL_DMA_IRQHandler+0x6a4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d031      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a7c      	ldr	r2, [pc, #496]	; (8006b20 <HAL_DMA_IRQHandler+0x6a8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d02c      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a7a      	ldr	r2, [pc, #488]	; (8006b24 <HAL_DMA_IRQHandler+0x6ac>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d027      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a79      	ldr	r2, [pc, #484]	; (8006b28 <HAL_DMA_IRQHandler+0x6b0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d022      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a77      	ldr	r2, [pc, #476]	; (8006b2c <HAL_DMA_IRQHandler+0x6b4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d01d      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a76      	ldr	r2, [pc, #472]	; (8006b30 <HAL_DMA_IRQHandler+0x6b8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d018      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a74      	ldr	r2, [pc, #464]	; (8006b34 <HAL_DMA_IRQHandler+0x6bc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d013      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a73      	ldr	r2, [pc, #460]	; (8006b38 <HAL_DMA_IRQHandler+0x6c0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00e      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a71      	ldr	r2, [pc, #452]	; (8006b3c <HAL_DMA_IRQHandler+0x6c4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d009      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a70      	ldr	r2, [pc, #448]	; (8006b40 <HAL_DMA_IRQHandler+0x6c8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <HAL_DMA_IRQHandler+0x516>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a6e      	ldr	r2, [pc, #440]	; (8006b44 <HAL_DMA_IRQHandler+0x6cc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d10a      	bne.n	80069a4 <HAL_DMA_IRQHandler+0x52c>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e009      	b.n	80069b8 <HAL_DMA_IRQHandler+0x540>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf14      	ite	ne
 80069b2:	2301      	movne	r3, #1
 80069b4:	2300      	moveq	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d03e      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2210      	movs	r2, #16
 80069c6:	409a      	lsls	r2, r3
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d018      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d108      	bne.n	80069fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d024      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
 80069f8:	e01f      	b.n	8006a3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d01b      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
 8006a0a:	e016      	b.n	8006a3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d107      	bne.n	8006a2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0208 	bic.w	r2, r2, #8
 8006a28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	2220      	movs	r2, #32
 8006a44:	409a      	lsls	r2, r3
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 8110 	beq.w	8006c70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a2c      	ldr	r2, [pc, #176]	; (8006b08 <HAL_DMA_IRQHandler+0x690>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d04a      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a2b      	ldr	r2, [pc, #172]	; (8006b0c <HAL_DMA_IRQHandler+0x694>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d045      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a29      	ldr	r2, [pc, #164]	; (8006b10 <HAL_DMA_IRQHandler+0x698>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d040      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a28      	ldr	r2, [pc, #160]	; (8006b14 <HAL_DMA_IRQHandler+0x69c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d03b      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <HAL_DMA_IRQHandler+0x6a0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d036      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <HAL_DMA_IRQHandler+0x6a4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d031      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a23      	ldr	r2, [pc, #140]	; (8006b20 <HAL_DMA_IRQHandler+0x6a8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d02c      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a22      	ldr	r2, [pc, #136]	; (8006b24 <HAL_DMA_IRQHandler+0x6ac>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d027      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <HAL_DMA_IRQHandler+0x6b0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d022      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <HAL_DMA_IRQHandler+0x6b4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d01d      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1d      	ldr	r2, [pc, #116]	; (8006b30 <HAL_DMA_IRQHandler+0x6b8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d018      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1c      	ldr	r2, [pc, #112]	; (8006b34 <HAL_DMA_IRQHandler+0x6bc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1a      	ldr	r2, [pc, #104]	; (8006b38 <HAL_DMA_IRQHandler+0x6c0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00e      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <HAL_DMA_IRQHandler+0x6c4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a17      	ldr	r2, [pc, #92]	; (8006b40 <HAL_DMA_IRQHandler+0x6c8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x678>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a16      	ldr	r2, [pc, #88]	; (8006b44 <HAL_DMA_IRQHandler+0x6cc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d12b      	bne.n	8006b48 <HAL_DMA_IRQHandler+0x6d0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	bf14      	ite	ne
 8006afe:	2301      	movne	r3, #1
 8006b00:	2300      	moveq	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	e02a      	b.n	8006b5c <HAL_DMA_IRQHandler+0x6e4>
 8006b06:	bf00      	nop
 8006b08:	40020010 	.word	0x40020010
 8006b0c:	40020028 	.word	0x40020028
 8006b10:	40020040 	.word	0x40020040
 8006b14:	40020058 	.word	0x40020058
 8006b18:	40020070 	.word	0x40020070
 8006b1c:	40020088 	.word	0x40020088
 8006b20:	400200a0 	.word	0x400200a0
 8006b24:	400200b8 	.word	0x400200b8
 8006b28:	40020410 	.word	0x40020410
 8006b2c:	40020428 	.word	0x40020428
 8006b30:	40020440 	.word	0x40020440
 8006b34:	40020458 	.word	0x40020458
 8006b38:	40020470 	.word	0x40020470
 8006b3c:	40020488 	.word	0x40020488
 8006b40:	400204a0 	.word	0x400204a0
 8006b44:	400204b8 	.word	0x400204b8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	bf14      	ite	ne
 8006b56:	2301      	movne	r3, #1
 8006b58:	2300      	moveq	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8087 	beq.w	8006c70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	409a      	lsls	r2, r3
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d139      	bne.n	8006bf2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0216 	bic.w	r2, r2, #22
 8006b8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d103      	bne.n	8006bae <HAL_DMA_IRQHandler+0x736>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d007      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0208 	bic.w	r2, r2, #8
 8006bbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc2:	f003 031f 	and.w	r3, r3, #31
 8006bc6:	223f      	movs	r2, #63	; 0x3f
 8006bc8:	409a      	lsls	r2, r3
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 834a 	beq.w	800727c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
          }
          return;
 8006bf0:	e344      	b.n	800727c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d018      	beq.n	8006c32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d108      	bne.n	8006c20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d02c      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
 8006c1e:	e027      	b.n	8006c70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d023      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
 8006c30:	e01e      	b.n	8006c70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10f      	bne.n	8006c60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0210 	bic.w	r2, r2, #16
 8006c4e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8306 	beq.w	8007286 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8088 	beq.w	8006d98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a7a      	ldr	r2, [pc, #488]	; (8006e80 <HAL_DMA_IRQHandler+0xa08>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d04a      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a79      	ldr	r2, [pc, #484]	; (8006e84 <HAL_DMA_IRQHandler+0xa0c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d045      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a77      	ldr	r2, [pc, #476]	; (8006e88 <HAL_DMA_IRQHandler+0xa10>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d040      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a76      	ldr	r2, [pc, #472]	; (8006e8c <HAL_DMA_IRQHandler+0xa14>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d03b      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a74      	ldr	r2, [pc, #464]	; (8006e90 <HAL_DMA_IRQHandler+0xa18>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d036      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a73      	ldr	r2, [pc, #460]	; (8006e94 <HAL_DMA_IRQHandler+0xa1c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d031      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a71      	ldr	r2, [pc, #452]	; (8006e98 <HAL_DMA_IRQHandler+0xa20>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d02c      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a70      	ldr	r2, [pc, #448]	; (8006e9c <HAL_DMA_IRQHandler+0xa24>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d027      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6e      	ldr	r2, [pc, #440]	; (8006ea0 <HAL_DMA_IRQHandler+0xa28>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6d      	ldr	r2, [pc, #436]	; (8006ea4 <HAL_DMA_IRQHandler+0xa2c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d01d      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6b      	ldr	r2, [pc, #428]	; (8006ea8 <HAL_DMA_IRQHandler+0xa30>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a6a      	ldr	r2, [pc, #424]	; (8006eac <HAL_DMA_IRQHandler+0xa34>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a68      	ldr	r2, [pc, #416]	; (8006eb0 <HAL_DMA_IRQHandler+0xa38>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a67      	ldr	r2, [pc, #412]	; (8006eb4 <HAL_DMA_IRQHandler+0xa3c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a65      	ldr	r2, [pc, #404]	; (8006eb8 <HAL_DMA_IRQHandler+0xa40>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x8b8>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a64      	ldr	r2, [pc, #400]	; (8006ebc <HAL_DMA_IRQHandler+0xa44>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d108      	bne.n	8006d42 <HAL_DMA_IRQHandler+0x8ca>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0201 	bic.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e007      	b.n	8006d52 <HAL_DMA_IRQHandler+0x8da>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0201 	bic.w	r2, r2, #1
 8006d50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3301      	adds	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d307      	bcc.n	8006d6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1f2      	bne.n	8006d52 <HAL_DMA_IRQHandler+0x8da>
 8006d6c:	e000      	b.n	8006d70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d6e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2203      	movs	r2, #3
 8006d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006d8e:	e003      	b.n	8006d98 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8272 	beq.w	8007286 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
 8006daa:	e26c      	b.n	8007286 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a43      	ldr	r2, [pc, #268]	; (8006ec0 <HAL_DMA_IRQHandler+0xa48>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d022      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x984>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a42      	ldr	r2, [pc, #264]	; (8006ec4 <HAL_DMA_IRQHandler+0xa4c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d01d      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x984>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a40      	ldr	r2, [pc, #256]	; (8006ec8 <HAL_DMA_IRQHandler+0xa50>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d018      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x984>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a3f      	ldr	r2, [pc, #252]	; (8006ecc <HAL_DMA_IRQHandler+0xa54>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d013      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x984>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a3d      	ldr	r2, [pc, #244]	; (8006ed0 <HAL_DMA_IRQHandler+0xa58>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00e      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x984>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a3c      	ldr	r2, [pc, #240]	; (8006ed4 <HAL_DMA_IRQHandler+0xa5c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d009      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x984>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a3a      	ldr	r2, [pc, #232]	; (8006ed8 <HAL_DMA_IRQHandler+0xa60>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_DMA_IRQHandler+0x984>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a39      	ldr	r2, [pc, #228]	; (8006edc <HAL_DMA_IRQHandler+0xa64>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d101      	bne.n	8006e00 <HAL_DMA_IRQHandler+0x988>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <HAL_DMA_IRQHandler+0x98a>
 8006e00:	2300      	movs	r3, #0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 823f 	beq.w	8007286 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	2204      	movs	r2, #4
 8006e1a:	409a      	lsls	r2, r3
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80cd 	beq.w	8006fc0 <HAL_DMA_IRQHandler+0xb48>
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 80c7 	beq.w	8006fc0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	409a      	lsls	r2, r3
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d049      	beq.n	8006ee0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8210 	beq.w	8007280 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e68:	e20a      	b.n	8007280 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8206 	beq.w	8007280 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e7c:	e200      	b.n	8007280 <HAL_DMA_IRQHandler+0xe08>
 8006e7e:	bf00      	nop
 8006e80:	40020010 	.word	0x40020010
 8006e84:	40020028 	.word	0x40020028
 8006e88:	40020040 	.word	0x40020040
 8006e8c:	40020058 	.word	0x40020058
 8006e90:	40020070 	.word	0x40020070
 8006e94:	40020088 	.word	0x40020088
 8006e98:	400200a0 	.word	0x400200a0
 8006e9c:	400200b8 	.word	0x400200b8
 8006ea0:	40020410 	.word	0x40020410
 8006ea4:	40020428 	.word	0x40020428
 8006ea8:	40020440 	.word	0x40020440
 8006eac:	40020458 	.word	0x40020458
 8006eb0:	40020470 	.word	0x40020470
 8006eb4:	40020488 	.word	0x40020488
 8006eb8:	400204a0 	.word	0x400204a0
 8006ebc:	400204b8 	.word	0x400204b8
 8006ec0:	58025408 	.word	0x58025408
 8006ec4:	5802541c 	.word	0x5802541c
 8006ec8:	58025430 	.word	0x58025430
 8006ecc:	58025444 	.word	0x58025444
 8006ed0:	58025458 	.word	0x58025458
 8006ed4:	5802546c 	.word	0x5802546c
 8006ed8:	58025480 	.word	0x58025480
 8006edc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d160      	bne.n	8006fac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a8c      	ldr	r2, [pc, #560]	; (8007120 <HAL_DMA_IRQHandler+0xca8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d04a      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a8a      	ldr	r2, [pc, #552]	; (8007124 <HAL_DMA_IRQHandler+0xcac>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d045      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a89      	ldr	r2, [pc, #548]	; (8007128 <HAL_DMA_IRQHandler+0xcb0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d040      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a87      	ldr	r2, [pc, #540]	; (800712c <HAL_DMA_IRQHandler+0xcb4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d03b      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a86      	ldr	r2, [pc, #536]	; (8007130 <HAL_DMA_IRQHandler+0xcb8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d036      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a84      	ldr	r2, [pc, #528]	; (8007134 <HAL_DMA_IRQHandler+0xcbc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d031      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a83      	ldr	r2, [pc, #524]	; (8007138 <HAL_DMA_IRQHandler+0xcc0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d02c      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a81      	ldr	r2, [pc, #516]	; (800713c <HAL_DMA_IRQHandler+0xcc4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d027      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a80      	ldr	r2, [pc, #512]	; (8007140 <HAL_DMA_IRQHandler+0xcc8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d022      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a7e      	ldr	r2, [pc, #504]	; (8007144 <HAL_DMA_IRQHandler+0xccc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d01d      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a7d      	ldr	r2, [pc, #500]	; (8007148 <HAL_DMA_IRQHandler+0xcd0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d018      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a7b      	ldr	r2, [pc, #492]	; (800714c <HAL_DMA_IRQHandler+0xcd4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a7a      	ldr	r2, [pc, #488]	; (8007150 <HAL_DMA_IRQHandler+0xcd8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a78      	ldr	r2, [pc, #480]	; (8007154 <HAL_DMA_IRQHandler+0xcdc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a77      	ldr	r2, [pc, #476]	; (8007158 <HAL_DMA_IRQHandler+0xce0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xb12>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a75      	ldr	r2, [pc, #468]	; (800715c <HAL_DMA_IRQHandler+0xce4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d108      	bne.n	8006f9c <HAL_DMA_IRQHandler+0xb24>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0208 	bic.w	r2, r2, #8
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	e007      	b.n	8006fac <HAL_DMA_IRQHandler+0xb34>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0204 	bic.w	r2, r2, #4
 8006faa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8165 	beq.w	8007280 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fbe:	e15f      	b.n	8007280 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc4:	f003 031f 	and.w	r3, r3, #31
 8006fc8:	2202      	movs	r2, #2
 8006fca:	409a      	lsls	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 80c5 	beq.w	8007160 <HAL_DMA_IRQHandler+0xce8>
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80bf 	beq.w	8007160 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	2202      	movs	r2, #2
 8006fec:	409a      	lsls	r2, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d018      	beq.n	800702e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d109      	bne.n	800701a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 813a 	beq.w	8007284 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007018:	e134      	b.n	8007284 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8130 	beq.w	8007284 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800702c:	e12a      	b.n	8007284 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f003 0320 	and.w	r3, r3, #32
 8007034:	2b00      	cmp	r3, #0
 8007036:	d168      	bne.n	800710a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a38      	ldr	r2, [pc, #224]	; (8007120 <HAL_DMA_IRQHandler+0xca8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d04a      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a37      	ldr	r2, [pc, #220]	; (8007124 <HAL_DMA_IRQHandler+0xcac>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d045      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a35      	ldr	r2, [pc, #212]	; (8007128 <HAL_DMA_IRQHandler+0xcb0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d040      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a34      	ldr	r2, [pc, #208]	; (800712c <HAL_DMA_IRQHandler+0xcb4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d03b      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a32      	ldr	r2, [pc, #200]	; (8007130 <HAL_DMA_IRQHandler+0xcb8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d036      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a31      	ldr	r2, [pc, #196]	; (8007134 <HAL_DMA_IRQHandler+0xcbc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d031      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a2f      	ldr	r2, [pc, #188]	; (8007138 <HAL_DMA_IRQHandler+0xcc0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d02c      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a2e      	ldr	r2, [pc, #184]	; (800713c <HAL_DMA_IRQHandler+0xcc4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d027      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2c      	ldr	r2, [pc, #176]	; (8007140 <HAL_DMA_IRQHandler+0xcc8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d022      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2b      	ldr	r2, [pc, #172]	; (8007144 <HAL_DMA_IRQHandler+0xccc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d01d      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a29      	ldr	r2, [pc, #164]	; (8007148 <HAL_DMA_IRQHandler+0xcd0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d018      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a28      	ldr	r2, [pc, #160]	; (800714c <HAL_DMA_IRQHandler+0xcd4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d013      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a26      	ldr	r2, [pc, #152]	; (8007150 <HAL_DMA_IRQHandler+0xcd8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00e      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a25      	ldr	r2, [pc, #148]	; (8007154 <HAL_DMA_IRQHandler+0xcdc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d009      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a23      	ldr	r2, [pc, #140]	; (8007158 <HAL_DMA_IRQHandler+0xce0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d004      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xc60>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a22      	ldr	r2, [pc, #136]	; (800715c <HAL_DMA_IRQHandler+0xce4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d108      	bne.n	80070ea <HAL_DMA_IRQHandler+0xc72>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0214 	bic.w	r2, r2, #20
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	e007      	b.n	80070fa <HAL_DMA_IRQHandler+0xc82>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 020a 	bic.w	r2, r2, #10
 80070f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80b8 	beq.w	8007284 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800711c:	e0b2      	b.n	8007284 <HAL_DMA_IRQHandler+0xe0c>
 800711e:	bf00      	nop
 8007120:	40020010 	.word	0x40020010
 8007124:	40020028 	.word	0x40020028
 8007128:	40020040 	.word	0x40020040
 800712c:	40020058 	.word	0x40020058
 8007130:	40020070 	.word	0x40020070
 8007134:	40020088 	.word	0x40020088
 8007138:	400200a0 	.word	0x400200a0
 800713c:	400200b8 	.word	0x400200b8
 8007140:	40020410 	.word	0x40020410
 8007144:	40020428 	.word	0x40020428
 8007148:	40020440 	.word	0x40020440
 800714c:	40020458 	.word	0x40020458
 8007150:	40020470 	.word	0x40020470
 8007154:	40020488 	.word	0x40020488
 8007158:	400204a0 	.word	0x400204a0
 800715c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007164:	f003 031f 	and.w	r3, r3, #31
 8007168:	2208      	movs	r2, #8
 800716a:	409a      	lsls	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8088 	beq.w	8007286 <HAL_DMA_IRQHandler+0xe0e>
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 8082 	beq.w	8007286 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a41      	ldr	r2, [pc, #260]	; (800728c <HAL_DMA_IRQHandler+0xe14>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d04a      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a3f      	ldr	r2, [pc, #252]	; (8007290 <HAL_DMA_IRQHandler+0xe18>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d045      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a3e      	ldr	r2, [pc, #248]	; (8007294 <HAL_DMA_IRQHandler+0xe1c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d040      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a3c      	ldr	r2, [pc, #240]	; (8007298 <HAL_DMA_IRQHandler+0xe20>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d03b      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a3b      	ldr	r2, [pc, #236]	; (800729c <HAL_DMA_IRQHandler+0xe24>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d036      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a39      	ldr	r2, [pc, #228]	; (80072a0 <HAL_DMA_IRQHandler+0xe28>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d031      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a38      	ldr	r2, [pc, #224]	; (80072a4 <HAL_DMA_IRQHandler+0xe2c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d02c      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a36      	ldr	r2, [pc, #216]	; (80072a8 <HAL_DMA_IRQHandler+0xe30>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d027      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a35      	ldr	r2, [pc, #212]	; (80072ac <HAL_DMA_IRQHandler+0xe34>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a33      	ldr	r2, [pc, #204]	; (80072b0 <HAL_DMA_IRQHandler+0xe38>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01d      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a32      	ldr	r2, [pc, #200]	; (80072b4 <HAL_DMA_IRQHandler+0xe3c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d018      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a30      	ldr	r2, [pc, #192]	; (80072b8 <HAL_DMA_IRQHandler+0xe40>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2f      	ldr	r2, [pc, #188]	; (80072bc <HAL_DMA_IRQHandler+0xe44>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2d      	ldr	r2, [pc, #180]	; (80072c0 <HAL_DMA_IRQHandler+0xe48>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2c      	ldr	r2, [pc, #176]	; (80072c4 <HAL_DMA_IRQHandler+0xe4c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_IRQHandler+0xdaa>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2a      	ldr	r2, [pc, #168]	; (80072c8 <HAL_DMA_IRQHandler+0xe50>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d108      	bne.n	8007234 <HAL_DMA_IRQHandler+0xdbc>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 021c 	bic.w	r2, r2, #28
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e007      	b.n	8007244 <HAL_DMA_IRQHandler+0xdcc>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 020e 	bic.w	r2, r2, #14
 8007242:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	2201      	movs	r2, #1
 800724e:	409a      	lsls	r2, r3
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
 800727a:	e004      	b.n	8007286 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800727c:	bf00      	nop
 800727e:	e002      	b.n	8007286 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007280:	bf00      	nop
 8007282:	e000      	b.n	8007286 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007284:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007286:	3728      	adds	r7, #40	; 0x28
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40020010 	.word	0x40020010
 8007290:	40020028 	.word	0x40020028
 8007294:	40020040 	.word	0x40020040
 8007298:	40020058 	.word	0x40020058
 800729c:	40020070 	.word	0x40020070
 80072a0:	40020088 	.word	0x40020088
 80072a4:	400200a0 	.word	0x400200a0
 80072a8:	400200b8 	.word	0x400200b8
 80072ac:	40020410 	.word	0x40020410
 80072b0:	40020428 	.word	0x40020428
 80072b4:	40020440 	.word	0x40020440
 80072b8:	40020458 	.word	0x40020458
 80072bc:	40020470 	.word	0x40020470
 80072c0:	40020488 	.word	0x40020488
 80072c4:	400204a0 	.word	0x400204a0
 80072c8:	400204b8 	.word	0x400204b8

080072cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a84      	ldr	r2, [pc, #528]	; (80074fc <DMA_SetConfig+0x230>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d072      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a82      	ldr	r2, [pc, #520]	; (8007500 <DMA_SetConfig+0x234>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d06d      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a81      	ldr	r2, [pc, #516]	; (8007504 <DMA_SetConfig+0x238>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d068      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a7f      	ldr	r2, [pc, #508]	; (8007508 <DMA_SetConfig+0x23c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d063      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a7e      	ldr	r2, [pc, #504]	; (800750c <DMA_SetConfig+0x240>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d05e      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a7c      	ldr	r2, [pc, #496]	; (8007510 <DMA_SetConfig+0x244>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d059      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a7b      	ldr	r2, [pc, #492]	; (8007514 <DMA_SetConfig+0x248>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d054      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a79      	ldr	r2, [pc, #484]	; (8007518 <DMA_SetConfig+0x24c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d04f      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a78      	ldr	r2, [pc, #480]	; (800751c <DMA_SetConfig+0x250>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d04a      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a76      	ldr	r2, [pc, #472]	; (8007520 <DMA_SetConfig+0x254>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d045      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a75      	ldr	r2, [pc, #468]	; (8007524 <DMA_SetConfig+0x258>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d040      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a73      	ldr	r2, [pc, #460]	; (8007528 <DMA_SetConfig+0x25c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d03b      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a72      	ldr	r2, [pc, #456]	; (800752c <DMA_SetConfig+0x260>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d036      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a70      	ldr	r2, [pc, #448]	; (8007530 <DMA_SetConfig+0x264>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d031      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a6f      	ldr	r2, [pc, #444]	; (8007534 <DMA_SetConfig+0x268>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d02c      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a6d      	ldr	r2, [pc, #436]	; (8007538 <DMA_SetConfig+0x26c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d027      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a6c      	ldr	r2, [pc, #432]	; (800753c <DMA_SetConfig+0x270>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d022      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a6a      	ldr	r2, [pc, #424]	; (8007540 <DMA_SetConfig+0x274>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d01d      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a69      	ldr	r2, [pc, #420]	; (8007544 <DMA_SetConfig+0x278>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d018      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a67      	ldr	r2, [pc, #412]	; (8007548 <DMA_SetConfig+0x27c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a66      	ldr	r2, [pc, #408]	; (800754c <DMA_SetConfig+0x280>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00e      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a64      	ldr	r2, [pc, #400]	; (8007550 <DMA_SetConfig+0x284>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d009      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a63      	ldr	r2, [pc, #396]	; (8007554 <DMA_SetConfig+0x288>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <DMA_SetConfig+0x10a>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a61      	ldr	r2, [pc, #388]	; (8007558 <DMA_SetConfig+0x28c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d101      	bne.n	80073da <DMA_SetConfig+0x10e>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <DMA_SetConfig+0x110>
 80073da:	2300      	movs	r3, #0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00d      	beq.n	80073fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a3e      	ldr	r2, [pc, #248]	; (80074fc <DMA_SetConfig+0x230>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d04a      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a3d      	ldr	r2, [pc, #244]	; (8007500 <DMA_SetConfig+0x234>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d045      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a3b      	ldr	r2, [pc, #236]	; (8007504 <DMA_SetConfig+0x238>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d040      	beq.n	800749c <DMA_SetConfig+0x1d0>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a3a      	ldr	r2, [pc, #232]	; (8007508 <DMA_SetConfig+0x23c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d03b      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a38      	ldr	r2, [pc, #224]	; (800750c <DMA_SetConfig+0x240>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d036      	beq.n	800749c <DMA_SetConfig+0x1d0>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a37      	ldr	r2, [pc, #220]	; (8007510 <DMA_SetConfig+0x244>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d031      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a35      	ldr	r2, [pc, #212]	; (8007514 <DMA_SetConfig+0x248>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d02c      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a34      	ldr	r2, [pc, #208]	; (8007518 <DMA_SetConfig+0x24c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d027      	beq.n	800749c <DMA_SetConfig+0x1d0>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a32      	ldr	r2, [pc, #200]	; (800751c <DMA_SetConfig+0x250>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d022      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a31      	ldr	r2, [pc, #196]	; (8007520 <DMA_SetConfig+0x254>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d01d      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a2f      	ldr	r2, [pc, #188]	; (8007524 <DMA_SetConfig+0x258>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d018      	beq.n	800749c <DMA_SetConfig+0x1d0>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2e      	ldr	r2, [pc, #184]	; (8007528 <DMA_SetConfig+0x25c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a2c      	ldr	r2, [pc, #176]	; (800752c <DMA_SetConfig+0x260>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00e      	beq.n	800749c <DMA_SetConfig+0x1d0>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a2b      	ldr	r2, [pc, #172]	; (8007530 <DMA_SetConfig+0x264>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d009      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a29      	ldr	r2, [pc, #164]	; (8007534 <DMA_SetConfig+0x268>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <DMA_SetConfig+0x1d0>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a28      	ldr	r2, [pc, #160]	; (8007538 <DMA_SetConfig+0x26c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d101      	bne.n	80074a0 <DMA_SetConfig+0x1d4>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <DMA_SetConfig+0x1d6>
 80074a0:	2300      	movs	r3, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d05a      	beq.n	800755c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	223f      	movs	r2, #63	; 0x3f
 80074b0:	409a      	lsls	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d108      	bne.n	80074e8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074e6:	e087      	b.n	80075f8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	60da      	str	r2, [r3, #12]
}
 80074f8:	e07e      	b.n	80075f8 <DMA_SetConfig+0x32c>
 80074fa:	bf00      	nop
 80074fc:	40020010 	.word	0x40020010
 8007500:	40020028 	.word	0x40020028
 8007504:	40020040 	.word	0x40020040
 8007508:	40020058 	.word	0x40020058
 800750c:	40020070 	.word	0x40020070
 8007510:	40020088 	.word	0x40020088
 8007514:	400200a0 	.word	0x400200a0
 8007518:	400200b8 	.word	0x400200b8
 800751c:	40020410 	.word	0x40020410
 8007520:	40020428 	.word	0x40020428
 8007524:	40020440 	.word	0x40020440
 8007528:	40020458 	.word	0x40020458
 800752c:	40020470 	.word	0x40020470
 8007530:	40020488 	.word	0x40020488
 8007534:	400204a0 	.word	0x400204a0
 8007538:	400204b8 	.word	0x400204b8
 800753c:	58025408 	.word	0x58025408
 8007540:	5802541c 	.word	0x5802541c
 8007544:	58025430 	.word	0x58025430
 8007548:	58025444 	.word	0x58025444
 800754c:	58025458 	.word	0x58025458
 8007550:	5802546c 	.word	0x5802546c
 8007554:	58025480 	.word	0x58025480
 8007558:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a28      	ldr	r2, [pc, #160]	; (8007604 <DMA_SetConfig+0x338>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d022      	beq.n	80075ac <DMA_SetConfig+0x2e0>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a27      	ldr	r2, [pc, #156]	; (8007608 <DMA_SetConfig+0x33c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d01d      	beq.n	80075ac <DMA_SetConfig+0x2e0>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a25      	ldr	r2, [pc, #148]	; (800760c <DMA_SetConfig+0x340>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d018      	beq.n	80075ac <DMA_SetConfig+0x2e0>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a24      	ldr	r2, [pc, #144]	; (8007610 <DMA_SetConfig+0x344>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <DMA_SetConfig+0x2e0>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a22      	ldr	r2, [pc, #136]	; (8007614 <DMA_SetConfig+0x348>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00e      	beq.n	80075ac <DMA_SetConfig+0x2e0>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a21      	ldr	r2, [pc, #132]	; (8007618 <DMA_SetConfig+0x34c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d009      	beq.n	80075ac <DMA_SetConfig+0x2e0>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1f      	ldr	r2, [pc, #124]	; (800761c <DMA_SetConfig+0x350>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d004      	beq.n	80075ac <DMA_SetConfig+0x2e0>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1e      	ldr	r2, [pc, #120]	; (8007620 <DMA_SetConfig+0x354>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d101      	bne.n	80075b0 <DMA_SetConfig+0x2e4>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e000      	b.n	80075b2 <DMA_SetConfig+0x2e6>
 80075b0:	2300      	movs	r3, #0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d020      	beq.n	80075f8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2201      	movs	r2, #1
 80075c0:	409a      	lsls	r2, r3
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d108      	bne.n	80075e8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	60da      	str	r2, [r3, #12]
}
 80075e6:	e007      	b.n	80075f8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	60da      	str	r2, [r3, #12]
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	58025408 	.word	0x58025408
 8007608:	5802541c 	.word	0x5802541c
 800760c:	58025430 	.word	0x58025430
 8007610:	58025444 	.word	0x58025444
 8007614:	58025458 	.word	0x58025458
 8007618:	5802546c 	.word	0x5802546c
 800761c:	58025480 	.word	0x58025480
 8007620:	58025494 	.word	0x58025494

08007624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a42      	ldr	r2, [pc, #264]	; (800773c <DMA_CalcBaseAndBitshift+0x118>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d04a      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a41      	ldr	r2, [pc, #260]	; (8007740 <DMA_CalcBaseAndBitshift+0x11c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d045      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a3f      	ldr	r2, [pc, #252]	; (8007744 <DMA_CalcBaseAndBitshift+0x120>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d040      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a3e      	ldr	r2, [pc, #248]	; (8007748 <DMA_CalcBaseAndBitshift+0x124>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d03b      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a3c      	ldr	r2, [pc, #240]	; (800774c <DMA_CalcBaseAndBitshift+0x128>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d036      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a3b      	ldr	r2, [pc, #236]	; (8007750 <DMA_CalcBaseAndBitshift+0x12c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d031      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a39      	ldr	r2, [pc, #228]	; (8007754 <DMA_CalcBaseAndBitshift+0x130>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d02c      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a38      	ldr	r2, [pc, #224]	; (8007758 <DMA_CalcBaseAndBitshift+0x134>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d027      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a36      	ldr	r2, [pc, #216]	; (800775c <DMA_CalcBaseAndBitshift+0x138>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d022      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a35      	ldr	r2, [pc, #212]	; (8007760 <DMA_CalcBaseAndBitshift+0x13c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d01d      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a33      	ldr	r2, [pc, #204]	; (8007764 <DMA_CalcBaseAndBitshift+0x140>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d018      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a32      	ldr	r2, [pc, #200]	; (8007768 <DMA_CalcBaseAndBitshift+0x144>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d013      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a30      	ldr	r2, [pc, #192]	; (800776c <DMA_CalcBaseAndBitshift+0x148>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00e      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2f      	ldr	r2, [pc, #188]	; (8007770 <DMA_CalcBaseAndBitshift+0x14c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a2d      	ldr	r2, [pc, #180]	; (8007774 <DMA_CalcBaseAndBitshift+0x150>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xa8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a2c      	ldr	r2, [pc, #176]	; (8007778 <DMA_CalcBaseAndBitshift+0x154>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d101      	bne.n	80076d0 <DMA_CalcBaseAndBitshift+0xac>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <DMA_CalcBaseAndBitshift+0xae>
 80076d0:	2300      	movs	r3, #0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d024      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	3b10      	subs	r3, #16
 80076de:	4a27      	ldr	r2, [pc, #156]	; (800777c <DMA_CalcBaseAndBitshift+0x158>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	091b      	lsrs	r3, r3, #4
 80076e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	4a24      	ldr	r2, [pc, #144]	; (8007780 <DMA_CalcBaseAndBitshift+0x15c>)
 80076f0:	5cd3      	ldrb	r3, [r2, r3]
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d908      	bls.n	8007710 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	4b1f      	ldr	r3, [pc, #124]	; (8007784 <DMA_CalcBaseAndBitshift+0x160>)
 8007706:	4013      	ands	r3, r2
 8007708:	1d1a      	adds	r2, r3, #4
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	659a      	str	r2, [r3, #88]	; 0x58
 800770e:	e00d      	b.n	800772c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	4b1b      	ldr	r3, [pc, #108]	; (8007784 <DMA_CalcBaseAndBitshift+0x160>)
 8007718:	4013      	ands	r3, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6593      	str	r3, [r2, #88]	; 0x58
 800771e:	e005      	b.n	800772c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	40020010 	.word	0x40020010
 8007740:	40020028 	.word	0x40020028
 8007744:	40020040 	.word	0x40020040
 8007748:	40020058 	.word	0x40020058
 800774c:	40020070 	.word	0x40020070
 8007750:	40020088 	.word	0x40020088
 8007754:	400200a0 	.word	0x400200a0
 8007758:	400200b8 	.word	0x400200b8
 800775c:	40020410 	.word	0x40020410
 8007760:	40020428 	.word	0x40020428
 8007764:	40020440 	.word	0x40020440
 8007768:	40020458 	.word	0x40020458
 800776c:	40020470 	.word	0x40020470
 8007770:	40020488 	.word	0x40020488
 8007774:	400204a0 	.word	0x400204a0
 8007778:	400204b8 	.word	0x400204b8
 800777c:	aaaaaaab 	.word	0xaaaaaaab
 8007780:	080108e8 	.word	0x080108e8
 8007784:	fffffc00 	.word	0xfffffc00

08007788 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d120      	bne.n	80077de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d858      	bhi.n	8007856 <DMA_CheckFifoParam+0xce>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <DMA_CheckFifoParam+0x24>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077bd 	.word	0x080077bd
 80077b0:	080077cf 	.word	0x080077cf
 80077b4:	080077bd 	.word	0x080077bd
 80077b8:	08007857 	.word	0x08007857
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d048      	beq.n	800785a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077cc:	e045      	b.n	800785a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077d6:	d142      	bne.n	800785e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077dc:	e03f      	b.n	800785e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e6:	d123      	bne.n	8007830 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d838      	bhi.n	8007862 <DMA_CheckFifoParam+0xda>
 80077f0:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <DMA_CheckFifoParam+0x70>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007809 	.word	0x08007809
 80077fc:	0800780f 	.word	0x0800780f
 8007800:	08007809 	.word	0x08007809
 8007804:	08007821 	.word	0x08007821
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
        break;
 800780c:	e030      	b.n	8007870 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d025      	beq.n	8007866 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800781e:	e022      	b.n	8007866 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007828:	d11f      	bne.n	800786a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800782e:	e01c      	b.n	800786a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007834:	2b02      	cmp	r3, #2
 8007836:	d902      	bls.n	800783e <DMA_CheckFifoParam+0xb6>
 8007838:	2b03      	cmp	r3, #3
 800783a:	d003      	beq.n	8007844 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800783c:	e018      	b.n	8007870 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
        break;
 8007842:	e015      	b.n	8007870 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00e      	beq.n	800786e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
    break;
 8007854:	e00b      	b.n	800786e <DMA_CheckFifoParam+0xe6>
        break;
 8007856:	bf00      	nop
 8007858:	e00a      	b.n	8007870 <DMA_CheckFifoParam+0xe8>
        break;
 800785a:	bf00      	nop
 800785c:	e008      	b.n	8007870 <DMA_CheckFifoParam+0xe8>
        break;
 800785e:	bf00      	nop
 8007860:	e006      	b.n	8007870 <DMA_CheckFifoParam+0xe8>
        break;
 8007862:	bf00      	nop
 8007864:	e004      	b.n	8007870 <DMA_CheckFifoParam+0xe8>
        break;
 8007866:	bf00      	nop
 8007868:	e002      	b.n	8007870 <DMA_CheckFifoParam+0xe8>
        break;
 800786a:	bf00      	nop
 800786c:	e000      	b.n	8007870 <DMA_CheckFifoParam+0xe8>
    break;
 800786e:	bf00      	nop
    }
  }

  return status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop

08007880 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a38      	ldr	r2, [pc, #224]	; (8007974 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d022      	beq.n	80078de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a36      	ldr	r2, [pc, #216]	; (8007978 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01d      	beq.n	80078de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a35      	ldr	r2, [pc, #212]	; (800797c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d018      	beq.n	80078de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a33      	ldr	r2, [pc, #204]	; (8007980 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d013      	beq.n	80078de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a32      	ldr	r2, [pc, #200]	; (8007984 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00e      	beq.n	80078de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a30      	ldr	r2, [pc, #192]	; (8007988 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d009      	beq.n	80078de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a2f      	ldr	r2, [pc, #188]	; (800798c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d004      	beq.n	80078de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a2d      	ldr	r2, [pc, #180]	; (8007990 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d101      	bne.n	80078e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01a      	beq.n	800791e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	3b08      	subs	r3, #8
 80078f0:	4a28      	ldr	r2, [pc, #160]	; (8007994 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	091b      	lsrs	r3, r3, #4
 80078f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4b26      	ldr	r3, [pc, #152]	; (8007998 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a24      	ldr	r2, [pc, #144]	; (800799c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800790c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f003 031f 	and.w	r3, r3, #31
 8007914:	2201      	movs	r2, #1
 8007916:	409a      	lsls	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800791c:	e024      	b.n	8007968 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	3b10      	subs	r3, #16
 8007926:	4a1e      	ldr	r2, [pc, #120]	; (80079a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007928:	fba2 2303 	umull	r2, r3, r2, r3
 800792c:	091b      	lsrs	r3, r3, #4
 800792e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4a1c      	ldr	r2, [pc, #112]	; (80079a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d806      	bhi.n	8007946 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4a1b      	ldr	r2, [pc, #108]	; (80079a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d902      	bls.n	8007946 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3308      	adds	r3, #8
 8007944:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4b18      	ldr	r3, [pc, #96]	; (80079ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a16      	ldr	r2, [pc, #88]	; (80079b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007958:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	2201      	movs	r2, #1
 8007962:	409a      	lsls	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	58025408 	.word	0x58025408
 8007978:	5802541c 	.word	0x5802541c
 800797c:	58025430 	.word	0x58025430
 8007980:	58025444 	.word	0x58025444
 8007984:	58025458 	.word	0x58025458
 8007988:	5802546c 	.word	0x5802546c
 800798c:	58025480 	.word	0x58025480
 8007990:	58025494 	.word	0x58025494
 8007994:	cccccccd 	.word	0xcccccccd
 8007998:	16009600 	.word	0x16009600
 800799c:	58025880 	.word	0x58025880
 80079a0:	aaaaaaab 	.word	0xaaaaaaab
 80079a4:	400204b8 	.word	0x400204b8
 80079a8:	4002040f 	.word	0x4002040f
 80079ac:	10008200 	.word	0x10008200
 80079b0:	40020880 	.word	0x40020880

080079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d04a      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d847      	bhi.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a25      	ldr	r2, [pc, #148]	; (8007a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d022      	beq.n	8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a24      	ldr	r2, [pc, #144]	; (8007a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d01d      	beq.n	8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a22      	ldr	r2, [pc, #136]	; (8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d018      	beq.n	8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a21      	ldr	r2, [pc, #132]	; (8007a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d013      	beq.n	8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1f      	ldr	r2, [pc, #124]	; (8007a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00e      	beq.n	8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1e      	ldr	r2, [pc, #120]	; (8007a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d009      	beq.n	8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a1c      	ldr	r2, [pc, #112]	; (8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1b      	ldr	r2, [pc, #108]	; (8007a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d101      	bne.n	8007a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a24:	2300      	movs	r3, #0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4b17      	ldr	r3, [pc, #92]	; (8007a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	461a      	mov	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a15      	ldr	r2, [pc, #84]	; (8007a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a3c:	671a      	str	r2, [r3, #112]	; 0x70
 8007a3e:	e009      	b.n	8007a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4b14      	ldr	r3, [pc, #80]	; (8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a11      	ldr	r2, [pc, #68]	; (8007a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	2201      	movs	r2, #1
 8007a5a:	409a      	lsls	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	58025408 	.word	0x58025408
 8007a70:	5802541c 	.word	0x5802541c
 8007a74:	58025430 	.word	0x58025430
 8007a78:	58025444 	.word	0x58025444
 8007a7c:	58025458 	.word	0x58025458
 8007a80:	5802546c 	.word	0x5802546c
 8007a84:	58025480 	.word	0x58025480
 8007a88:	58025494 	.word	0x58025494
 8007a8c:	1600963f 	.word	0x1600963f
 8007a90:	58025940 	.word	0x58025940
 8007a94:	1000823f 	.word	0x1000823f
 8007a98:	40020940 	.word	0x40020940

08007a9c <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08a      	sub	sp, #40	; 0x28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007ab4:	4b38      	ldr	r3, [pc, #224]	; (8007b98 <HAL_FLASH_Program+0xfc>)
 8007ab6:	7d1b      	ldrb	r3, [r3, #20]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_FLASH_Program+0x24>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e067      	b.n	8007b90 <HAL_FLASH_Program+0xf4>
 8007ac0:	4b35      	ldr	r3, [pc, #212]	; (8007b98 <HAL_FLASH_Program+0xfc>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007acc:	d306      	bcc.n	8007adc <HAL_FLASH_Program+0x40>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8007ad4:	d202      	bcs.n	8007adc <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	e001      	b.n	8007ae0 <HAL_FLASH_Program+0x44>
  }
  else
  {
    bank = FLASH_BANK_2;
 8007adc:	2302      	movs	r3, #2
 8007ade:	61bb      	str	r3, [r7, #24]
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ae0:	4b2d      	ldr	r3, [pc, #180]	; (8007b98 <HAL_FLASH_Program+0xfc>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8007ae6:	69b9      	ldr	r1, [r7, #24]
 8007ae8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007aec:	f000 f8bc 	bl	8007c68 <FLASH_WaitForLastOperation>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8007af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d143      	bne.n	8007b86 <HAL_FLASH_Program+0xea>
  {
    if(bank == FLASH_BANK_1)
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d106      	bne.n	8007b12 <HAL_FLASH_Program+0x76>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8007b04:	4b25      	ldr	r3, [pc, #148]	; (8007b9c <HAL_FLASH_Program+0x100>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	4a24      	ldr	r2, [pc, #144]	; (8007b9c <HAL_FLASH_Program+0x100>)
 8007b0a:	f043 0302 	orr.w	r3, r3, #2
 8007b0e:	60d3      	str	r3, [r2, #12]
 8007b10:	e007      	b.n	8007b22 <HAL_FLASH_Program+0x86>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8007b12:	4b22      	ldr	r3, [pc, #136]	; (8007b9c <HAL_FLASH_Program+0x100>)
 8007b14:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007b18:	4a20      	ldr	r2, [pc, #128]	; (8007b9c <HAL_FLASH_Program+0x100>)
 8007b1a:	f043 0302 	orr.w	r3, r3, #2
 8007b1e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8007b22:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8007b26:	f3bf 8f4f 	dsb	sy
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	3304      	adds	r3, #4
 8007b36:	623b      	str	r3, [r7, #32]
        src_addr++;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	61fb      	str	r3, [r7, #28]
        row_index--;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1ef      	bne.n	8007b2a <HAL_FLASH_Program+0x8e>
  __ASM volatile ("isb 0xF":::"memory");
 8007b4a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8007b4e:	f3bf 8f4f 	dsb	sy

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8007b52:	69b9      	ldr	r1, [r7, #24]
 8007b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b58:	f000 f886 	bl	8007c68 <FLASH_WaitForLastOperation>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d106      	bne.n	8007b76 <HAL_FLASH_Program+0xda>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8007b68:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <HAL_FLASH_Program+0x100>)
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4a0b      	ldr	r2, [pc, #44]	; (8007b9c <HAL_FLASH_Program+0x100>)
 8007b6e:	f023 0302 	bic.w	r3, r3, #2
 8007b72:	60d3      	str	r3, [r2, #12]
 8007b74:	e007      	b.n	8007b86 <HAL_FLASH_Program+0xea>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8007b76:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <HAL_FLASH_Program+0x100>)
 8007b78:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007b7c:	4a07      	ldr	r2, [pc, #28]	; (8007b9c <HAL_FLASH_Program+0x100>)
 8007b7e:	f023 0302 	bic.w	r3, r3, #2
 8007b82:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b86:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <HAL_FLASH_Program+0xfc>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	751a      	strb	r2, [r3, #20]

  return status;
 8007b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3728      	adds	r7, #40	; 0x28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	24000da4 	.word	0x24000da4
 8007b9c:	52002000 	.word	0x52002000

08007ba0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8007ba4:	4b18      	ldr	r3, [pc, #96]	; (8007c08 <HAL_FLASH_Unlock+0x68>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00d      	beq.n	8007bcc <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8007bb0:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <HAL_FLASH_Unlock+0x68>)
 8007bb2:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <HAL_FLASH_Unlock+0x6c>)
 8007bb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <HAL_FLASH_Unlock+0x68>)
 8007bb8:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <HAL_FLASH_Unlock+0x70>)
 8007bba:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8007bbc:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <HAL_FLASH_Unlock+0x68>)
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e018      	b.n	8007bfe <HAL_FLASH_Unlock+0x5e>
    }
  }

  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <HAL_FLASH_Unlock+0x68>)
 8007bce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d010      	beq.n	8007bfc <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <HAL_FLASH_Unlock+0x68>)
 8007bdc:	4a0b      	ldr	r2, [pc, #44]	; (8007c0c <HAL_FLASH_Unlock+0x6c>)
 8007bde:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <HAL_FLASH_Unlock+0x68>)
 8007be4:	4a0a      	ldr	r2, [pc, #40]	; (8007c10 <HAL_FLASH_Unlock+0x70>)
 8007be6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <HAL_FLASH_Unlock+0x68>)
 8007bec:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <HAL_FLASH_Unlock+0x5e>
    }
  }

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	52002000 	.word	0x52002000
 8007c0c:	45670123 	.word	0x45670123
 8007c10:	cdef89ab 	.word	0xcdef89ab

08007c14 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8007c18:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <HAL_FLASH_Lock+0x50>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4a11      	ldr	r2, [pc, #68]	; (8007c64 <HAL_FLASH_Lock+0x50>)
 8007c1e:	f043 0301 	orr.w	r3, r3, #1
 8007c22:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <HAL_FLASH_Lock+0x50>)
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e011      	b.n	8007c58 <HAL_FLASH_Lock+0x44>
  }

  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8007c34:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <HAL_FLASH_Lock+0x50>)
 8007c36:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007c3a:	4a0a      	ldr	r2, [pc, #40]	; (8007c64 <HAL_FLASH_Lock+0x50>)
 8007c3c:	f043 0301 	orr.w	r3, r3, #1
 8007c40:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <HAL_FLASH_Lock+0x50>)
 8007c46:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <HAL_FLASH_Lock+0x44>
  }

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	52002000 	.word	0x52002000

08007c68 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag, errorflag;
  uint32_t tickstart = HAL_GetTick();
 8007c72:	f7fc f915 	bl	8003ea0 <HAL_GetTick>
 8007c76:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d102      	bne.n	8007c84 <FLASH_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_QW_BANK1;
 8007c7e:	2304      	movs	r3, #4
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	e013      	b.n	8007cac <FLASH_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_QW_BANK2;
 8007c84:	4b41      	ldr	r3, [pc, #260]	; (8007d8c <FLASH_WaitForLastOperation+0x124>)
 8007c86:	617b      	str	r3, [r7, #20]
  }

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8007c88:	e010      	b.n	8007cac <FLASH_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d00c      	beq.n	8007cac <FLASH_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7fc f905 	bl	8003ea0 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <FLASH_WaitForLastOperation+0x40>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <FLASH_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e06a      	b.n	8007d82 <FLASH_WaitForLastOperation+0x11a>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4b38      	ldr	r3, [pc, #224]	; (8007d90 <FLASH_WaitForLastOperation+0x128>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d10a      	bne.n	8007cce <FLASH_WaitForLastOperation+0x66>
 8007cb8:	4b36      	ldr	r3, [pc, #216]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	bf0c      	ite	eq
 8007cc6:	2301      	moveq	r3, #1
 8007cc8:	2300      	movne	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	e00c      	b.n	8007ce8 <FLASH_WaitForLastOperation+0x80>
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007cd0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007cd4:	43da      	mvns	r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bf0c      	ite	eq
 8007ce2:	2301      	moveq	r3, #1
 8007ce4:	2300      	movne	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1ce      	bne.n	8007c8a <FLASH_WaitForLastOperation+0x22>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d105      	bne.n	8007cfe <FLASH_WaitForLastOperation+0x96>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8007cf2:	4b28      	ldr	r3, [pc, #160]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	4b28      	ldr	r3, [pc, #160]	; (8007d98 <FLASH_WaitForLastOperation+0x130>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
 8007cfc:	e007      	b.n	8007d0e <FLASH_WaitForLastOperation+0xa6>
  }
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8007cfe:	4b25      	ldr	r3, [pc, #148]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007d00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8007d04:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <FLASH_WaitForLastOperation+0x130>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d0c:	613b      	str	r3, [r7, #16]
  }

  /* In case of error reported in Flash SR1 or SR2 registers (ECCC not managed as an error) */
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d017      	beq.n	8007d48 <FLASH_WaitForLastOperation+0xe0>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8007d18:	4b20      	ldr	r3, [pc, #128]	; (8007d9c <FLASH_WaitForLastOperation+0x134>)
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	4a1e      	ldr	r2, [pc, #120]	; (8007d9c <FLASH_WaitForLastOperation+0x134>)
 8007d22:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <FLASH_WaitForLastOperation+0x128>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d103      	bne.n	8007d38 <FLASH_WaitForLastOperation+0xd0>
 8007d30:	4a18      	ldr	r2, [pc, #96]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6153      	str	r3, [r2, #20]
 8007d36:	e005      	b.n	8007d44 <FLASH_WaitForLastOperation+0xdc>
 8007d38:	4a16      	ldr	r2, [pc, #88]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d40:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e01c      	b.n	8007d82 <FLASH_WaitForLastOperation+0x11a>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d10b      	bne.n	8007d66 <FLASH_WaitForLastOperation+0xfe>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8007d4e:	4b11      	ldr	r3, [pc, #68]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d5a:	d111      	bne.n	8007d80 <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007d5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d62:	615a      	str	r2, [r3, #20]
 8007d64:	e00c      	b.n	8007d80 <FLASH_WaitForLastOperation+0x118>
    }
  }
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8007d66:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007d68:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d74:	d104      	bne.n	8007d80 <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8007d76:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <FLASH_WaitForLastOperation+0x12c>)
 8007d78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d7c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	80000004 	.word	0x80000004
 8007d90:	1fef000f 	.word	0x1fef000f
 8007d94:	52002000 	.word	0x52002000
 8007d98:	17ee0000 	.word	0x17ee0000
 8007d9c:	24000da4 	.word	0x24000da4

08007da0 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007dae:	4b5e      	ldr	r3, [pc, #376]	; (8007f28 <HAL_FLASHEx_Erase+0x188>)
 8007db0:	7d1b      	ldrb	r3, [r3, #20]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_FLASHEx_Erase+0x1a>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e0b2      	b.n	8007f20 <HAL_FLASHEx_Erase+0x180>
 8007dba:	4b5b      	ldr	r3, [pc, #364]	; (8007f28 <HAL_FLASHEx_Erase+0x188>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007dc0:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <HAL_FLASHEx_Erase+0x188>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007dd8:	f7ff ff46 	bl	8007c68 <FLASH_WaitForLastOperation>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8007df2:	2102      	movs	r1, #2
 8007df4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007df8:	f7ff ff36 	bl	8007c68 <FLASH_WaitForLastOperation>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]
    }
  }

  if(status == HAL_OK)
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f040 8085 	bne.w	8007f18 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d136      	bne.n	8007e84 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4610      	mov	r0, r2
 8007e22:	f000 f887 	bl	8007f34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00f      	beq.n	8007e52 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8007e32:	2101      	movs	r1, #1
 8007e34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e38:	f7ff ff16 	bl	8007c68 <FLASH_WaitForLastOperation>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8007e46:	4b39      	ldr	r3, [pc, #228]	; (8007f2c <HAL_FLASHEx_Erase+0x18c>)
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	4a38      	ldr	r2, [pc, #224]	; (8007f2c <HAL_FLASHEx_Erase+0x18c>)
 8007e4c:	f023 0308 	bic.w	r3, r3, #8
 8007e50:	60d3      	str	r3, [r2, #12]
      }
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d05c      	beq.n	8007f18 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8007e5e:	2102      	movs	r1, #2
 8007e60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e64:	f7ff ff00 	bl	8007c68 <FLASH_WaitForLastOperation>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8007e72:	4b2e      	ldr	r3, [pc, #184]	; (8007f2c <HAL_FLASHEx_Erase+0x18c>)
 8007e74:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007e78:	4a2c      	ldr	r2, [pc, #176]	; (8007f2c <HAL_FLASHEx_Erase+0x18c>)
 8007e7a:	f023 0308 	bic.w	r3, r3, #8
 8007e7e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8007e82:	e049      	b.n	8007f18 <HAL_FLASHEx_Erase+0x178>
      }
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	60bb      	str	r3, [r7, #8]
 8007e92:	e039      	b.n	8007f08 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6859      	ldr	r1, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68b8      	ldr	r0, [r7, #8]
 8007ea0:	f000 f8b2 	bl	8008008 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00c      	beq.n	8007eca <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007eb6:	f7ff fed7 	bl	8007c68 <FLASH_WaitForLastOperation>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8007ebe:	4b1b      	ldr	r3, [pc, #108]	; (8007f2c <HAL_FLASHEx_Erase+0x18c>)
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	491a      	ldr	r1, [pc, #104]	; (8007f2c <HAL_FLASHEx_Erase+0x18c>)
 8007ec4:	4b1a      	ldr	r3, [pc, #104]	; (8007f30 <HAL_FLASHEx_Erase+0x190>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	60cb      	str	r3, [r1, #12]
        }
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00e      	beq.n	8007ef4 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8007ed6:	2102      	movs	r1, #2
 8007ed8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007edc:	f7ff fec4 	bl	8007c68 <FLASH_WaitForLastOperation>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8007ee4:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <HAL_FLASHEx_Erase+0x18c>)
 8007ee6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007eea:	4910      	ldr	r1, [pc, #64]	; (8007f2c <HAL_FLASHEx_Erase+0x18c>)
 8007eec:	4b10      	ldr	r3, [pc, #64]	; (8007f30 <HAL_FLASHEx_Erase+0x190>)
 8007eee:	4013      	ands	r3, r2
 8007ef0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }

        if(status != HAL_OK)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	601a      	str	r2, [r3, #0]
          break;
 8007f00:	e00a      	b.n	8007f18 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	3301      	adds	r3, #1
 8007f06:	60bb      	str	r3, [r7, #8]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4413      	add	r3, r2
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d3bd      	bcc.n	8007e94 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007f18:	4b03      	ldr	r3, [pc, #12]	; (8007f28 <HAL_FLASHEx_Erase+0x188>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	751a      	strb	r2, [r3, #20]

  return status;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	24000da4 	.word	0x24000da4
 8007f2c:	52002000 	.word	0x52002000
 8007f30:	fffff8fb 	.word	0xfffff8fb

08007f34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	f003 0303 	and.w	r3, r3, #3
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d122      	bne.n	8007f8e <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8007f48:	4b2e      	ldr	r3, [pc, #184]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	4a2d      	ldr	r2, [pc, #180]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007f52:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8007f54:	4b2b      	ldr	r3, [pc, #172]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f56:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007f5a:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f5c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007f60:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8007f64:	4b27      	ldr	r3, [pc, #156]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	4926      	ldr	r1, [pc, #152]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8007f70:	4b24      	ldr	r3, [pc, #144]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f72:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007f76:	4923      	ldr	r1, [pc, #140]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8007f80:	4b20      	ldr	r3, [pc, #128]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	4a1f      	ldr	r2, [pc, #124]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f86:	f043 0310 	orr.w	r3, r3, #16
 8007f8a:	6193      	str	r3, [r2, #24]

      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
  }
}
 8007f8c:	e033      	b.n	8007ff6 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d011      	beq.n	8007fbc <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8007f98:	4b1a      	ldr	r3, [pc, #104]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	4a19      	ldr	r2, [pc, #100]	; (8008004 <FLASH_MassErase+0xd0>)
 8007f9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007fa2:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8007fa4:	4b17      	ldr	r3, [pc, #92]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	4916      	ldr	r1, [pc, #88]	; (8008004 <FLASH_MassErase+0xd0>)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8007fb0:	4b14      	ldr	r3, [pc, #80]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	4a13      	ldr	r2, [pc, #76]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fb6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8007fba:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d017      	beq.n	8007ff6 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8007fc6:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007fcc:	4a0d      	ldr	r2, [pc, #52]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007fd2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fd8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007fdc:	4909      	ldr	r1, [pc, #36]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8007fe6:	4b07      	ldr	r3, [pc, #28]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fe8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007fec:	4a05      	ldr	r2, [pc, #20]	; (8008004 <FLASH_MassErase+0xd0>)
 8007fee:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8007ff2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	52002000 	.word	0x52002000

08008008 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d010      	beq.n	8008040 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800801e:	4b18      	ldr	r3, [pc, #96]	; (8008080 <FLASH_Erase_Sector+0x78>)
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	4a17      	ldr	r2, [pc, #92]	; (8008080 <FLASH_Erase_Sector+0x78>)
 8008024:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8008028:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800802a:	4b15      	ldr	r3, [pc, #84]	; (8008080 <FLASH_Erase_Sector+0x78>)
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	0219      	lsls	r1, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	430b      	orrs	r3, r1
 8008036:	4313      	orrs	r3, r2
 8008038:	4a11      	ldr	r2, [pc, #68]	; (8008080 <FLASH_Erase_Sector+0x78>)
 800803a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800803e:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d014      	beq.n	8008074 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800804a:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <FLASH_Erase_Sector+0x78>)
 800804c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008050:	4a0b      	ldr	r2, [pc, #44]	; (8008080 <FLASH_Erase_Sector+0x78>)
 8008052:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8008056:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800805a:	4b09      	ldr	r3, [pc, #36]	; (8008080 <FLASH_Erase_Sector+0x78>)
 800805c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	0219      	lsls	r1, r3, #8
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	430b      	orrs	r3, r1
 8008068:	4313      	orrs	r3, r2
 800806a:	4a05      	ldr	r2, [pc, #20]	; (8008080 <FLASH_Erase_Sector+0x78>)
 800806c:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8008070:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    FLASH->CR2 &= ~(FLASH_CR_SNB);

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
}
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	52002000 	.word	0x52002000

08008084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008084:	b480      	push	{r7}
 8008086:	b089      	sub	sp, #36	; 0x24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800808e:	2300      	movs	r3, #0
 8008090:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008092:	4b89      	ldr	r3, [pc, #548]	; (80082b8 <HAL_GPIO_Init+0x234>)
 8008094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008096:	e194      	b.n	80083c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	2101      	movs	r1, #1
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	fa01 f303 	lsl.w	r3, r1, r3
 80080a4:	4013      	ands	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 8186 	beq.w	80083bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d00b      	beq.n	80080d0 <HAL_GPIO_Init+0x4c>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d007      	beq.n	80080d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080c4:	2b11      	cmp	r3, #17
 80080c6:	d003      	beq.n	80080d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b12      	cmp	r3, #18
 80080ce:	d130      	bne.n	8008132 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	2203      	movs	r2, #3
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	43db      	mvns	r3, r3
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	4013      	ands	r3, r2
 80080e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008106:	2201      	movs	r2, #1
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	fa02 f303 	lsl.w	r3, r2, r3
 800810e:	43db      	mvns	r3, r3
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	4013      	ands	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	091b      	lsrs	r3, r3, #4
 800811c:	f003 0201 	and.w	r2, r3, #1
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	4313      	orrs	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	2203      	movs	r2, #3
 800813e:	fa02 f303 	lsl.w	r3, r2, r3
 8008142:	43db      	mvns	r3, r3
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	4013      	ands	r3, r2
 8008148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	fa02 f303 	lsl.w	r3, r2, r3
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4313      	orrs	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d003      	beq.n	8008172 <HAL_GPIO_Init+0xee>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2b12      	cmp	r3, #18
 8008170:	d123      	bne.n	80081ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	08da      	lsrs	r2, r3, #3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3208      	adds	r2, #8
 800817a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	220f      	movs	r2, #15
 800818a:	fa02 f303 	lsl.w	r3, r2, r3
 800818e:	43db      	mvns	r3, r3
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	4013      	ands	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	08da      	lsrs	r2, r3, #3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3208      	adds	r2, #8
 80081b4:	69b9      	ldr	r1, [r7, #24]
 80081b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	2203      	movs	r2, #3
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	43db      	mvns	r3, r3
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	4013      	ands	r3, r2
 80081d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f003 0203 	and.w	r2, r3, #3
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80e0 	beq.w	80083bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081fc:	4b2f      	ldr	r3, [pc, #188]	; (80082bc <HAL_GPIO_Init+0x238>)
 80081fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008202:	4a2e      	ldr	r2, [pc, #184]	; (80082bc <HAL_GPIO_Init+0x238>)
 8008204:	f043 0302 	orr.w	r3, r3, #2
 8008208:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800820c:	4b2b      	ldr	r3, [pc, #172]	; (80082bc <HAL_GPIO_Init+0x238>)
 800820e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800821a:	4a29      	ldr	r2, [pc, #164]	; (80082c0 <HAL_GPIO_Init+0x23c>)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	089b      	lsrs	r3, r3, #2
 8008220:	3302      	adds	r3, #2
 8008222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	220f      	movs	r2, #15
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	43db      	mvns	r3, r3
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	4013      	ands	r3, r2
 800823c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a20      	ldr	r2, [pc, #128]	; (80082c4 <HAL_GPIO_Init+0x240>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d052      	beq.n	80082ec <HAL_GPIO_Init+0x268>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1f      	ldr	r2, [pc, #124]	; (80082c8 <HAL_GPIO_Init+0x244>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d031      	beq.n	80082b2 <HAL_GPIO_Init+0x22e>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1e      	ldr	r2, [pc, #120]	; (80082cc <HAL_GPIO_Init+0x248>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d02b      	beq.n	80082ae <HAL_GPIO_Init+0x22a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1d      	ldr	r2, [pc, #116]	; (80082d0 <HAL_GPIO_Init+0x24c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d025      	beq.n	80082aa <HAL_GPIO_Init+0x226>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1c      	ldr	r2, [pc, #112]	; (80082d4 <HAL_GPIO_Init+0x250>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01f      	beq.n	80082a6 <HAL_GPIO_Init+0x222>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a1b      	ldr	r2, [pc, #108]	; (80082d8 <HAL_GPIO_Init+0x254>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d019      	beq.n	80082a2 <HAL_GPIO_Init+0x21e>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a1a      	ldr	r2, [pc, #104]	; (80082dc <HAL_GPIO_Init+0x258>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d013      	beq.n	800829e <HAL_GPIO_Init+0x21a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a19      	ldr	r2, [pc, #100]	; (80082e0 <HAL_GPIO_Init+0x25c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00d      	beq.n	800829a <HAL_GPIO_Init+0x216>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a18      	ldr	r2, [pc, #96]	; (80082e4 <HAL_GPIO_Init+0x260>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d007      	beq.n	8008296 <HAL_GPIO_Init+0x212>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a17      	ldr	r2, [pc, #92]	; (80082e8 <HAL_GPIO_Init+0x264>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d101      	bne.n	8008292 <HAL_GPIO_Init+0x20e>
 800828e:	2309      	movs	r3, #9
 8008290:	e02d      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 8008292:	230a      	movs	r3, #10
 8008294:	e02b      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 8008296:	2308      	movs	r3, #8
 8008298:	e029      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 800829a:	2307      	movs	r3, #7
 800829c:	e027      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 800829e:	2306      	movs	r3, #6
 80082a0:	e025      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082a2:	2305      	movs	r3, #5
 80082a4:	e023      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082a6:	2304      	movs	r3, #4
 80082a8:	e021      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082aa:	2303      	movs	r3, #3
 80082ac:	e01f      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082ae:	2302      	movs	r3, #2
 80082b0:	e01d      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e01b      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082b6:	bf00      	nop
 80082b8:	58000080 	.word	0x58000080
 80082bc:	58024400 	.word	0x58024400
 80082c0:	58000400 	.word	0x58000400
 80082c4:	58020000 	.word	0x58020000
 80082c8:	58020400 	.word	0x58020400
 80082cc:	58020800 	.word	0x58020800
 80082d0:	58020c00 	.word	0x58020c00
 80082d4:	58021000 	.word	0x58021000
 80082d8:	58021400 	.word	0x58021400
 80082dc:	58021800 	.word	0x58021800
 80082e0:	58021c00 	.word	0x58021c00
 80082e4:	58022000 	.word	0x58022000
 80082e8:	58022400 	.word	0x58022400
 80082ec:	2300      	movs	r3, #0
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	f002 0203 	and.w	r2, r2, #3
 80082f4:	0092      	lsls	r2, r2, #2
 80082f6:	4093      	lsls	r3, r2
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082fe:	4938      	ldr	r1, [pc, #224]	; (80083e0 <HAL_GPIO_Init+0x35c>)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	089b      	lsrs	r3, r3, #2
 8008304:	3302      	adds	r3, #2
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	43db      	mvns	r3, r3
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	4013      	ands	r3, r2
 800831a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	43db      	mvns	r3, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	4013      	ands	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	43db      	mvns	r3, r3
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	4013      	ands	r3, r2
 8008370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800838e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	43db      	mvns	r3, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4013      	ands	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80083b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	fa22 f303 	lsr.w	r3, r2, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f47f ae63 	bne.w	8008098 <HAL_GPIO_Init+0x14>
  }
}
 80083d2:	bf00      	nop
 80083d4:	3724      	adds	r7, #36	; 0x24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	58000400 	.word	0x58000400

080083e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	887b      	ldrh	r3, [r7, #2]
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083fc:	2301      	movs	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
 8008400:	e001      	b.n	8008406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
 8008420:	4613      	mov	r3, r2
 8008422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008424:	787b      	ldrb	r3, [r7, #1]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800842a:	887a      	ldrh	r2, [r7, #2]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008430:	e003      	b.n	800843a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008432:	887b      	ldrh	r3, [r7, #2]
 8008434:	041a      	lsls	r2, r3, #16
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	619a      	str	r2, [r3, #24]
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695a      	ldr	r2, [r3, #20]
 8008456:	887b      	ldrh	r3, [r7, #2]
 8008458:	401a      	ands	r2, r3
 800845a:	887b      	ldrh	r3, [r7, #2]
 800845c:	429a      	cmp	r2, r3
 800845e:	d104      	bne.n	800846a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008460:	887b      	ldrh	r3, [r7, #2]
 8008462:	041a      	lsls	r2, r3, #16
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008468:	e002      	b.n	8008470 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800846a:	887a      	ldrh	r2, [r7, #2]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	619a      	str	r2, [r3, #24]
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008484:	4b19      	ldr	r3, [pc, #100]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b04      	cmp	r3, #4
 800848e:	d00a      	beq.n	80084a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008490:	4b16      	ldr	r3, [pc, #88]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	429a      	cmp	r2, r3
 800849c:	d001      	beq.n	80084a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e01f      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e01d      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084a6:	4b11      	ldr	r3, [pc, #68]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f023 0207 	bic.w	r2, r3, #7
 80084ae:	490f      	ldr	r1, [pc, #60]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084b6:	f7fb fcf3 	bl	8003ea0 <HAL_GetTick>
 80084ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084bc:	e009      	b.n	80084d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084be:	f7fb fcef 	bl	8003ea0 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084cc:	d901      	bls.n	80084d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e007      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084de:	d1ee      	bne.n	80084be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	58024800 	.word	0x58024800

080084f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08c      	sub	sp, #48	; 0x30
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e3c4      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8087 	beq.w	800861e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008510:	4ba2      	ldr	r3, [pc, #648]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800851a:	4ba0      	ldr	r3, [pc, #640]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	2b10      	cmp	r3, #16
 8008524:	d007      	beq.n	8008536 <HAL_RCC_OscConfig+0x46>
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	2b18      	cmp	r3, #24
 800852a:	d110      	bne.n	800854e <HAL_RCC_OscConfig+0x5e>
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d10b      	bne.n	800854e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008536:	4b99      	ldr	r3, [pc, #612]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d06c      	beq.n	800861c <HAL_RCC_OscConfig+0x12c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d168      	bne.n	800861c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e39e      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008556:	d106      	bne.n	8008566 <HAL_RCC_OscConfig+0x76>
 8008558:	4b90      	ldr	r3, [pc, #576]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a8f      	ldr	r2, [pc, #572]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800855e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e02e      	b.n	80085c4 <HAL_RCC_OscConfig+0xd4>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10c      	bne.n	8008588 <HAL_RCC_OscConfig+0x98>
 800856e:	4b8b      	ldr	r3, [pc, #556]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a8a      	ldr	r2, [pc, #552]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	4b88      	ldr	r3, [pc, #544]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a87      	ldr	r2, [pc, #540]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	e01d      	b.n	80085c4 <HAL_RCC_OscConfig+0xd4>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008590:	d10c      	bne.n	80085ac <HAL_RCC_OscConfig+0xbc>
 8008592:	4b82      	ldr	r3, [pc, #520]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a81      	ldr	r2, [pc, #516]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	4b7f      	ldr	r3, [pc, #508]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a7e      	ldr	r2, [pc, #504]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80085a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e00b      	b.n	80085c4 <HAL_RCC_OscConfig+0xd4>
 80085ac:	4b7b      	ldr	r3, [pc, #492]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a7a      	ldr	r2, [pc, #488]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80085b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	4b78      	ldr	r3, [pc, #480]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a77      	ldr	r2, [pc, #476]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80085be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d013      	beq.n	80085f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085cc:	f7fb fc68 	bl	8003ea0 <HAL_GetTick>
 80085d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085d4:	f7fb fc64 	bl	8003ea0 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b64      	cmp	r3, #100	; 0x64
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e352      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085e6:	4b6d      	ldr	r3, [pc, #436]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0f0      	beq.n	80085d4 <HAL_RCC_OscConfig+0xe4>
 80085f2:	e014      	b.n	800861e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f4:	f7fb fc54 	bl	8003ea0 <HAL_GetTick>
 80085f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085fa:	e008      	b.n	800860e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085fc:	f7fb fc50 	bl	8003ea0 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b64      	cmp	r3, #100	; 0x64
 8008608:	d901      	bls.n	800860e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e33e      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800860e:	4b63      	ldr	r3, [pc, #396]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1f0      	bne.n	80085fc <HAL_RCC_OscConfig+0x10c>
 800861a:	e000      	b.n	800861e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800861c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 8092 	beq.w	8008750 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800862c:	4b5b      	ldr	r3, [pc, #364]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008634:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008636:	4b59      	ldr	r3, [pc, #356]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <HAL_RCC_OscConfig+0x162>
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	2b18      	cmp	r3, #24
 8008646:	d12d      	bne.n	80086a4 <HAL_RCC_OscConfig+0x1b4>
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d128      	bne.n	80086a4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008652:	4b52      	ldr	r3, [pc, #328]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0304 	and.w	r3, r3, #4
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_RCC_OscConfig+0x17a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e310      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800866a:	f7fb fc47 	bl	8003efc <HAL_GetREVID>
 800866e:	4602      	mov	r2, r0
 8008670:	f241 0303 	movw	r3, #4099	; 0x1003
 8008674:	429a      	cmp	r2, r3
 8008676:	d80a      	bhi.n	800868e <HAL_RCC_OscConfig+0x19e>
 8008678:	4b48      	ldr	r3, [pc, #288]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	031b      	lsls	r3, r3, #12
 8008686:	4945      	ldr	r1, [pc, #276]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008688:	4313      	orrs	r3, r2
 800868a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800868c:	e060      	b.n	8008750 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800868e:	4b43      	ldr	r3, [pc, #268]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	061b      	lsls	r3, r3, #24
 800869c:	493f      	ldr	r1, [pc, #252]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086a2:	e055      	b.n	8008750 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d038      	beq.n	800871e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086ac:	4b3b      	ldr	r3, [pc, #236]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f023 0219 	bic.w	r2, r3, #25
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4938      	ldr	r1, [pc, #224]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086be:	f7fb fbef 	bl	8003ea0 <HAL_GetTick>
 80086c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086c4:	e008      	b.n	80086d8 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086c6:	f7fb fbeb 	bl	8003ea0 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d901      	bls.n	80086d8 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e2d9      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d8:	4b30      	ldr	r3, [pc, #192]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0f0      	beq.n	80086c6 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e4:	f7fb fc0a 	bl	8003efc <HAL_GetREVID>
 80086e8:	4602      	mov	r2, r0
 80086ea:	f241 0303 	movw	r3, #4099	; 0x1003
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d80a      	bhi.n	8008708 <HAL_RCC_OscConfig+0x218>
 80086f2:	4b2a      	ldr	r3, [pc, #168]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	031b      	lsls	r3, r3, #12
 8008700:	4926      	ldr	r1, [pc, #152]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008702:	4313      	orrs	r3, r2
 8008704:	604b      	str	r3, [r1, #4]
 8008706:	e023      	b.n	8008750 <HAL_RCC_OscConfig+0x260>
 8008708:	4b24      	ldr	r3, [pc, #144]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	061b      	lsls	r3, r3, #24
 8008716:	4921      	ldr	r1, [pc, #132]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008718:	4313      	orrs	r3, r2
 800871a:	604b      	str	r3, [r1, #4]
 800871c:	e018      	b.n	8008750 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800871e:	4b1f      	ldr	r3, [pc, #124]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a1e      	ldr	r2, [pc, #120]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872a:	f7fb fbb9 	bl	8003ea0 <HAL_GetTick>
 800872e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008730:	e008      	b.n	8008744 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008732:	f7fb fbb5 	bl	8003ea0 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d901      	bls.n	8008744 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e2a3      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008744:	4b15      	ldr	r3, [pc, #84]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f0      	bne.n	8008732 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8091 	beq.w	8008880 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008766:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008768:	4b0c      	ldr	r3, [pc, #48]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b08      	cmp	r3, #8
 8008772:	d007      	beq.n	8008784 <HAL_RCC_OscConfig+0x294>
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	2b18      	cmp	r3, #24
 8008778:	d12f      	bne.n	80087da <HAL_RCC_OscConfig+0x2ea>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	2b01      	cmp	r3, #1
 8008782:	d12a      	bne.n	80087da <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <HAL_RCC_OscConfig+0x2ac>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878c:	2b00      	cmp	r3, #0
 800878e:	d007      	beq.n	80087a0 <HAL_RCC_OscConfig+0x2b0>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	2b80      	cmp	r3, #128	; 0x80
 8008796:	d003      	beq.n	80087a0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e277      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
 800879c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087a0:	f7fb fbac 	bl	8003efc <HAL_GetREVID>
 80087a4:	4602      	mov	r2, r0
 80087a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d80a      	bhi.n	80087c4 <HAL_RCC_OscConfig+0x2d4>
 80087ae:	4ba2      	ldr	r3, [pc, #648]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	069b      	lsls	r3, r3, #26
 80087bc:	499e      	ldr	r1, [pc, #632]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087c2:	e05d      	b.n	8008880 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087c4:	4b9c      	ldr	r3, [pc, #624]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	4999      	ldr	r1, [pc, #612]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087d8:	e052      	b.n	8008880 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d035      	beq.n	800884e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80087e2:	4b95      	ldr	r3, [pc, #596]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a94      	ldr	r2, [pc, #592]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80087e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ee:	f7fb fb57 	bl	8003ea0 <HAL_GetTick>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087f6:	f7fb fb53 	bl	8003ea0 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e241      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008808:	4b8b      	ldr	r3, [pc, #556]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f0      	beq.n	80087f6 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008814:	f7fb fb72 	bl	8003efc <HAL_GetREVID>
 8008818:	4602      	mov	r2, r0
 800881a:	f241 0303 	movw	r3, #4099	; 0x1003
 800881e:	429a      	cmp	r2, r3
 8008820:	d80a      	bhi.n	8008838 <HAL_RCC_OscConfig+0x348>
 8008822:	4b85      	ldr	r3, [pc, #532]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	069b      	lsls	r3, r3, #26
 8008830:	4981      	ldr	r1, [pc, #516]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008832:	4313      	orrs	r3, r2
 8008834:	604b      	str	r3, [r1, #4]
 8008836:	e023      	b.n	8008880 <HAL_RCC_OscConfig+0x390>
 8008838:	4b7f      	ldr	r3, [pc, #508]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	061b      	lsls	r3, r3, #24
 8008846:	497c      	ldr	r1, [pc, #496]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008848:	4313      	orrs	r3, r2
 800884a:	60cb      	str	r3, [r1, #12]
 800884c:	e018      	b.n	8008880 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800884e:	4b7a      	ldr	r3, [pc, #488]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a79      	ldr	r2, [pc, #484]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885a:	f7fb fb21 	bl	8003ea0 <HAL_GetTick>
 800885e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008862:	f7fb fb1d 	bl	8003ea0 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e20b      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008874:	4b70      	ldr	r3, [pc, #448]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f0      	bne.n	8008862 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d036      	beq.n	80088fa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d019      	beq.n	80088c8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008894:	4b68      	ldr	r3, [pc, #416]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008898:	4a67      	ldr	r2, [pc, #412]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 800889a:	f043 0301 	orr.w	r3, r3, #1
 800889e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a0:	f7fb fafe 	bl	8003ea0 <HAL_GetTick>
 80088a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088a6:	e008      	b.n	80088ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088a8:	f7fb fafa 	bl	8003ea0 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e1e8      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088ba:	4b5f      	ldr	r3, [pc, #380]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80088bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0f0      	beq.n	80088a8 <HAL_RCC_OscConfig+0x3b8>
 80088c6:	e018      	b.n	80088fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088c8:	4b5b      	ldr	r3, [pc, #364]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80088ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088cc:	4a5a      	ldr	r2, [pc, #360]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d4:	f7fb fae4 	bl	8003ea0 <HAL_GetTick>
 80088d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088dc:	f7fb fae0 	bl	8003ea0 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e1ce      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088ee:	4b52      	ldr	r3, [pc, #328]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80088f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1f0      	bne.n	80088dc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	d036      	beq.n	8008974 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d019      	beq.n	8008942 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800890e:	4b4a      	ldr	r3, [pc, #296]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a49      	ldr	r2, [pc, #292]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008918:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800891a:	f7fb fac1 	bl	8003ea0 <HAL_GetTick>
 800891e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008920:	e008      	b.n	8008934 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008922:	f7fb fabd 	bl	8003ea0 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d901      	bls.n	8008934 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e1ab      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008934:	4b40      	ldr	r3, [pc, #256]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0f0      	beq.n	8008922 <HAL_RCC_OscConfig+0x432>
 8008940:	e018      	b.n	8008974 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008942:	4b3d      	ldr	r3, [pc, #244]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a3c      	ldr	r2, [pc, #240]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800894c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800894e:	f7fb faa7 	bl	8003ea0 <HAL_GetTick>
 8008952:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008954:	e008      	b.n	8008968 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008956:	f7fb faa3 	bl	8003ea0 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e191      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008968:	4b33      	ldr	r3, [pc, #204]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1f0      	bne.n	8008956 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8086 	beq.w	8008a8e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008982:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <HAL_RCC_OscConfig+0x54c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a2d      	ldr	r2, [pc, #180]	; (8008a3c <HAL_RCC_OscConfig+0x54c>)
 8008988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800898c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800898e:	f7fb fa87 	bl	8003ea0 <HAL_GetTick>
 8008992:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008994:	e008      	b.n	80089a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008996:	f7fb fa83 	bl	8003ea0 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b64      	cmp	r3, #100	; 0x64
 80089a2:	d901      	bls.n	80089a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e171      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <HAL_RCC_OscConfig+0x54c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d106      	bne.n	80089ca <HAL_RCC_OscConfig+0x4da>
 80089bc:	4b1e      	ldr	r3, [pc, #120]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	4a1d      	ldr	r2, [pc, #116]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6713      	str	r3, [r2, #112]	; 0x70
 80089c8:	e02d      	b.n	8008a26 <HAL_RCC_OscConfig+0x536>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10c      	bne.n	80089ec <HAL_RCC_OscConfig+0x4fc>
 80089d2:	4b19      	ldr	r3, [pc, #100]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d6:	4a18      	ldr	r2, [pc, #96]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80089d8:	f023 0301 	bic.w	r3, r3, #1
 80089dc:	6713      	str	r3, [r2, #112]	; 0x70
 80089de:	4b16      	ldr	r3, [pc, #88]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80089e4:	f023 0304 	bic.w	r3, r3, #4
 80089e8:	6713      	str	r3, [r2, #112]	; 0x70
 80089ea:	e01c      	b.n	8008a26 <HAL_RCC_OscConfig+0x536>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d10c      	bne.n	8008a0e <HAL_RCC_OscConfig+0x51e>
 80089f4:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80089f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f8:	4a0f      	ldr	r2, [pc, #60]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 80089fa:	f043 0304 	orr.w	r3, r3, #4
 80089fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008a00:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	4a0c      	ldr	r2, [pc, #48]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008a06:	f043 0301 	orr.w	r3, r3, #1
 8008a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008a0c:	e00b      	b.n	8008a26 <HAL_RCC_OscConfig+0x536>
 8008a0e:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a12:	4a09      	ldr	r2, [pc, #36]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008a14:	f023 0301 	bic.w	r3, r3, #1
 8008a18:	6713      	str	r3, [r2, #112]	; 0x70
 8008a1a:	4b07      	ldr	r3, [pc, #28]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1e:	4a06      	ldr	r2, [pc, #24]	; (8008a38 <HAL_RCC_OscConfig+0x548>)
 8008a20:	f023 0304 	bic.w	r3, r3, #4
 8008a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d01a      	beq.n	8008a64 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a2e:	f7fb fa37 	bl	8003ea0 <HAL_GetTick>
 8008a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a34:	e00f      	b.n	8008a56 <HAL_RCC_OscConfig+0x566>
 8008a36:	bf00      	nop
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a40:	f7fb fa2e 	bl	8003ea0 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e11a      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a56:	4b8f      	ldr	r3, [pc, #572]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0ee      	beq.n	8008a40 <HAL_RCC_OscConfig+0x550>
 8008a62:	e014      	b.n	8008a8e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a64:	f7fb fa1c 	bl	8003ea0 <HAL_GetTick>
 8008a68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a6a:	e00a      	b.n	8008a82 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a6c:	f7fb fa18 	bl	8003ea0 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e104      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a82:	4b84      	ldr	r3, [pc, #528]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1ee      	bne.n	8008a6c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 80f9 	beq.w	8008c8a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a98:	4b7e      	ldr	r3, [pc, #504]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aa0:	2b18      	cmp	r3, #24
 8008aa2:	f000 80b4 	beq.w	8008c0e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	f040 8095 	bne.w	8008bda <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ab0:	4b78      	ldr	r3, [pc, #480]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a77      	ldr	r2, [pc, #476]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008abc:	f7fb f9f0 	bl	8003ea0 <HAL_GetTick>
 8008ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ac2:	e008      	b.n	8008ad6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ac4:	f7fb f9ec 	bl	8003ea0 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d901      	bls.n	8008ad6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e0da      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ad6:	4b6f      	ldr	r3, [pc, #444]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1f0      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ae2:	4b6c      	ldr	r3, [pc, #432]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ae6:	4b6c      	ldr	r3, [pc, #432]	; (8008c98 <HAL_RCC_OscConfig+0x7a8>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008af2:	0112      	lsls	r2, r2, #4
 8008af4:	430a      	orrs	r2, r1
 8008af6:	4967      	ldr	r1, [pc, #412]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	628b      	str	r3, [r1, #40]	; 0x28
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	3b01      	subs	r3, #1
 8008b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	025b      	lsls	r3, r3, #9
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	3b01      	subs	r3, #1
 8008b18:	041b      	lsls	r3, r3, #16
 8008b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b24:	3b01      	subs	r3, #1
 8008b26:	061b      	lsls	r3, r3, #24
 8008b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b2c:	4959      	ldr	r1, [pc, #356]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008b32:	4b58      	ldr	r3, [pc, #352]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	4a57      	ldr	r2, [pc, #348]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b38:	f023 0301 	bic.w	r3, r3, #1
 8008b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b3e:	4b55      	ldr	r3, [pc, #340]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b42:	4b56      	ldr	r3, [pc, #344]	; (8008c9c <HAL_RCC_OscConfig+0x7ac>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b4a:	00d2      	lsls	r2, r2, #3
 8008b4c:	4951      	ldr	r1, [pc, #324]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b52:	4b50      	ldr	r3, [pc, #320]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	f023 020c 	bic.w	r2, r3, #12
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	494d      	ldr	r1, [pc, #308]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b64:	4b4b      	ldr	r3, [pc, #300]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	f023 0202 	bic.w	r2, r3, #2
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b70:	4948      	ldr	r1, [pc, #288]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b76:	4b47      	ldr	r3, [pc, #284]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	4a46      	ldr	r2, [pc, #280]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b82:	4b44      	ldr	r3, [pc, #272]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b86:	4a43      	ldr	r2, [pc, #268]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b8e:	4b41      	ldr	r3, [pc, #260]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	4a40      	ldr	r2, [pc, #256]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b9a:	4b3e      	ldr	r3, [pc, #248]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	4a3d      	ldr	r2, [pc, #244]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ba6:	4b3b      	ldr	r3, [pc, #236]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a3a      	ldr	r2, [pc, #232]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb2:	f7fb f975 	bl	8003ea0 <HAL_GetTick>
 8008bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bb8:	e008      	b.n	8008bcc <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bba:	f7fb f971 	bl	8003ea0 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d901      	bls.n	8008bcc <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e05f      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bcc:	4b31      	ldr	r3, [pc, #196]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0f0      	beq.n	8008bba <HAL_RCC_OscConfig+0x6ca>
 8008bd8:	e057      	b.n	8008c8a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bda:	4b2e      	ldr	r3, [pc, #184]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a2d      	ldr	r2, [pc, #180]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be6:	f7fb f95b 	bl	8003ea0 <HAL_GetTick>
 8008bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bec:	e008      	b.n	8008c00 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bee:	f7fb f957 	bl	8003ea0 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d901      	bls.n	8008c00 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e045      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c00:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1f0      	bne.n	8008bee <HAL_RCC_OscConfig+0x6fe>
 8008c0c:	e03d      	b.n	8008c8a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c0e:	4b21      	ldr	r3, [pc, #132]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c14:	4b1f      	ldr	r3, [pc, #124]	; (8008c94 <HAL_RCC_OscConfig+0x7a4>)
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d031      	beq.n	8008c86 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f003 0203 	and.w	r2, r3, #3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d12a      	bne.n	8008c86 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	091b      	lsrs	r3, r3, #4
 8008c34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d122      	bne.n	8008c86 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d11a      	bne.n	8008c86 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	0a5b      	lsrs	r3, r3, #9
 8008c54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d111      	bne.n	8008c86 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d108      	bne.n	8008c86 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	0e1b      	lsrs	r3, r3, #24
 8008c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d001      	beq.n	8008c8a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3730      	adds	r7, #48	; 0x30
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	58024400 	.word	0x58024400
 8008c98:	fffffc0c 	.word	0xfffffc0c
 8008c9c:	ffff0007 	.word	0xffff0007

08008ca0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e19c      	b.n	8008fee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cb4:	4b8a      	ldr	r3, [pc, #552]	; (8008ee0 <HAL_RCC_ClockConfig+0x240>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 030f 	and.w	r3, r3, #15
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d910      	bls.n	8008ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cc2:	4b87      	ldr	r3, [pc, #540]	; (8008ee0 <HAL_RCC_ClockConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f023 020f 	bic.w	r2, r3, #15
 8008cca:	4985      	ldr	r1, [pc, #532]	; (8008ee0 <HAL_RCC_ClockConfig+0x240>)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cd2:	4b83      	ldr	r3, [pc, #524]	; (8008ee0 <HAL_RCC_ClockConfig+0x240>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 030f 	and.w	r3, r3, #15
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d001      	beq.n	8008ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e184      	b.n	8008fee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d010      	beq.n	8008d12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691a      	ldr	r2, [r3, #16]
 8008cf4:	4b7b      	ldr	r3, [pc, #492]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d908      	bls.n	8008d12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d00:	4b78      	ldr	r3, [pc, #480]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	4975      	ldr	r1, [pc, #468]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d010      	beq.n	8008d40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695a      	ldr	r2, [r3, #20]
 8008d22:	4b70      	ldr	r3, [pc, #448]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d908      	bls.n	8008d40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d2e:	4b6d      	ldr	r3, [pc, #436]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	496a      	ldr	r1, [pc, #424]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0310 	and.w	r3, r3, #16
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d010      	beq.n	8008d6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	4b64      	ldr	r3, [pc, #400]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d908      	bls.n	8008d6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d5c:	4b61      	ldr	r3, [pc, #388]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	495e      	ldr	r1, [pc, #376]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d010      	beq.n	8008d9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69da      	ldr	r2, [r3, #28]
 8008d7e:	4b59      	ldr	r3, [pc, #356]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d908      	bls.n	8008d9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d8a:	4b56      	ldr	r3, [pc, #344]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	4953      	ldr	r1, [pc, #332]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d010      	beq.n	8008dca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	4b4d      	ldr	r3, [pc, #308]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d908      	bls.n	8008dca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008db8:	4b4a      	ldr	r3, [pc, #296]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f023 020f 	bic.w	r2, r3, #15
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	4947      	ldr	r1, [pc, #284]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d055      	beq.n	8008e82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008dd6:	4b43      	ldr	r3, [pc, #268]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	4940      	ldr	r1, [pc, #256]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d107      	bne.n	8008e00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008df0:	4b3c      	ldr	r3, [pc, #240]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d121      	bne.n	8008e40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0f6      	b.n	8008fee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d107      	bne.n	8008e18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e08:	4b36      	ldr	r3, [pc, #216]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d115      	bne.n	8008e40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e0ea      	b.n	8008fee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d107      	bne.n	8008e30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e20:	4b30      	ldr	r3, [pc, #192]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e0de      	b.n	8008fee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e30:	4b2c      	ldr	r3, [pc, #176]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e0d6      	b.n	8008fee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e40:	4b28      	ldr	r3, [pc, #160]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	f023 0207 	bic.w	r2, r3, #7
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	4925      	ldr	r1, [pc, #148]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e52:	f7fb f825 	bl	8003ea0 <HAL_GetTick>
 8008e56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e58:	e00a      	b.n	8008e70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e5a:	f7fb f821 	bl	8003ea0 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e0be      	b.n	8008fee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e70:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d1eb      	bne.n	8008e5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d010      	beq.n	8008eb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	4b14      	ldr	r3, [pc, #80]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d208      	bcs.n	8008eb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e9e:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	f023 020f 	bic.w	r2, r3, #15
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	490e      	ldr	r1, [pc, #56]	; (8008ee4 <HAL_RCC_ClockConfig+0x244>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <HAL_RCC_ClockConfig+0x240>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 030f 	and.w	r3, r3, #15
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d214      	bcs.n	8008ee8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ebe:	4b08      	ldr	r3, [pc, #32]	; (8008ee0 <HAL_RCC_ClockConfig+0x240>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f023 020f 	bic.w	r2, r3, #15
 8008ec6:	4906      	ldr	r1, [pc, #24]	; (8008ee0 <HAL_RCC_ClockConfig+0x240>)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ece:	4b04      	ldr	r3, [pc, #16]	; (8008ee0 <HAL_RCC_ClockConfig+0x240>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d005      	beq.n	8008ee8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e086      	b.n	8008fee <HAL_RCC_ClockConfig+0x34e>
 8008ee0:	52002000 	.word	0x52002000
 8008ee4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0304 	and.w	r3, r3, #4
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d010      	beq.n	8008f16 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691a      	ldr	r2, [r3, #16]
 8008ef8:	4b3f      	ldr	r3, [pc, #252]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d208      	bcs.n	8008f16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f04:	4b3c      	ldr	r3, [pc, #240]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	4939      	ldr	r1, [pc, #228]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d010      	beq.n	8008f44 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695a      	ldr	r2, [r3, #20]
 8008f26:	4b34      	ldr	r3, [pc, #208]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d208      	bcs.n	8008f44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f32:	4b31      	ldr	r3, [pc, #196]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	492e      	ldr	r1, [pc, #184]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0310 	and.w	r3, r3, #16
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d010      	beq.n	8008f72 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	4b28      	ldr	r3, [pc, #160]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d208      	bcs.n	8008f72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f60:	4b25      	ldr	r3, [pc, #148]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	4922      	ldr	r1, [pc, #136]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d010      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69da      	ldr	r2, [r3, #28]
 8008f82:	4b1d      	ldr	r3, [pc, #116]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d208      	bcs.n	8008fa0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f8e:	4b1a      	ldr	r3, [pc, #104]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	4917      	ldr	r1, [pc, #92]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008fa0:	f000 f834 	bl	800900c <HAL_RCC_GetSysClockFreq>
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	4b14      	ldr	r3, [pc, #80]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	0a1b      	lsrs	r3, r3, #8
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	4a12      	ldr	r2, [pc, #72]	; (8008ffc <HAL_RCC_ClockConfig+0x35c>)
 8008fb2:	5cd3      	ldrb	r3, [r2, r3]
 8008fb4:	f003 031f 	and.w	r3, r3, #31
 8008fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8008fbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008fbe:	4b0e      	ldr	r3, [pc, #56]	; (8008ff8 <HAL_RCC_ClockConfig+0x358>)
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	4a0d      	ldr	r2, [pc, #52]	; (8008ffc <HAL_RCC_ClockConfig+0x35c>)
 8008fc8:	5cd3      	ldrb	r3, [r2, r3]
 8008fca:	f003 031f 	and.w	r3, r3, #31
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd4:	4a0a      	ldr	r2, [pc, #40]	; (8009000 <HAL_RCC_ClockConfig+0x360>)
 8008fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fd8:	4a0a      	ldr	r2, [pc, #40]	; (8009004 <HAL_RCC_ClockConfig+0x364>)
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008fde:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <HAL_RCC_ClockConfig+0x368>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fa ff12 	bl	8003e0c <HAL_InitTick>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	58024400 	.word	0x58024400
 8008ffc:	080108d8 	.word	0x080108d8
 8009000:	240000ec 	.word	0x240000ec
 8009004:	240000e8 	.word	0x240000e8
 8009008:	240000f0 	.word	0x240000f0

0800900c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800900c:	b480      	push	{r7}
 800900e:	b089      	sub	sp, #36	; 0x24
 8009010:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009012:	4baf      	ldr	r3, [pc, #700]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800901a:	2b18      	cmp	r3, #24
 800901c:	f200 814e 	bhi.w	80092bc <HAL_RCC_GetSysClockFreq+0x2b0>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	0800908d 	.word	0x0800908d
 800902c:	080092bd 	.word	0x080092bd
 8009030:	080092bd 	.word	0x080092bd
 8009034:	080092bd 	.word	0x080092bd
 8009038:	080092bd 	.word	0x080092bd
 800903c:	080092bd 	.word	0x080092bd
 8009040:	080092bd 	.word	0x080092bd
 8009044:	080092bd 	.word	0x080092bd
 8009048:	080090b3 	.word	0x080090b3
 800904c:	080092bd 	.word	0x080092bd
 8009050:	080092bd 	.word	0x080092bd
 8009054:	080092bd 	.word	0x080092bd
 8009058:	080092bd 	.word	0x080092bd
 800905c:	080092bd 	.word	0x080092bd
 8009060:	080092bd 	.word	0x080092bd
 8009064:	080092bd 	.word	0x080092bd
 8009068:	080090b9 	.word	0x080090b9
 800906c:	080092bd 	.word	0x080092bd
 8009070:	080092bd 	.word	0x080092bd
 8009074:	080092bd 	.word	0x080092bd
 8009078:	080092bd 	.word	0x080092bd
 800907c:	080092bd 	.word	0x080092bd
 8009080:	080092bd 	.word	0x080092bd
 8009084:	080092bd 	.word	0x080092bd
 8009088:	080090bf 	.word	0x080090bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800908c:	4b90      	ldr	r3, [pc, #576]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	d009      	beq.n	80090ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009098:	4b8d      	ldr	r3, [pc, #564]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	08db      	lsrs	r3, r3, #3
 800909e:	f003 0303 	and.w	r3, r3, #3
 80090a2:	4a8c      	ldr	r2, [pc, #560]	; (80092d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80090a4:	fa22 f303 	lsr.w	r3, r2, r3
 80090a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80090aa:	e10a      	b.n	80092c2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80090ac:	4b89      	ldr	r3, [pc, #548]	; (80092d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80090ae:	61bb      	str	r3, [r7, #24]
    break;
 80090b0:	e107      	b.n	80092c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80090b2:	4b89      	ldr	r3, [pc, #548]	; (80092d8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80090b4:	61bb      	str	r3, [r7, #24]
    break;
 80090b6:	e104      	b.n	80092c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80090b8:	4b88      	ldr	r3, [pc, #544]	; (80092dc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80090ba:	61bb      	str	r3, [r7, #24]
    break;
 80090bc:	e101      	b.n	80092c2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090be:	4b84      	ldr	r3, [pc, #528]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80090c8:	4b81      	ldr	r3, [pc, #516]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090cc:	091b      	lsrs	r3, r3, #4
 80090ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80090d4:	4b7e      	ldr	r3, [pc, #504]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090de:	4b7c      	ldr	r3, [pc, #496]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e2:	08db      	lsrs	r3, r3, #3
 80090e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	fb02 f303 	mul.w	r3, r2, r3
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80da 	beq.w	80092b6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d05a      	beq.n	80091be <HAL_RCC_GetSysClockFreq+0x1b2>
 8009108:	2b01      	cmp	r3, #1
 800910a:	d302      	bcc.n	8009112 <HAL_RCC_GetSysClockFreq+0x106>
 800910c:	2b02      	cmp	r3, #2
 800910e:	d078      	beq.n	8009202 <HAL_RCC_GetSysClockFreq+0x1f6>
 8009110:	e099      	b.n	8009246 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009112:	4b6f      	ldr	r3, [pc, #444]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d02d      	beq.n	800917a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800911e:	4b6c      	ldr	r3, [pc, #432]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	08db      	lsrs	r3, r3, #3
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	4a6a      	ldr	r2, [pc, #424]	; (80092d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800912a:	fa22 f303 	lsr.w	r3, r2, r3
 800912e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009148:	4b61      	ldr	r3, [pc, #388]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800914a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009150:	ee07 3a90 	vmov	s15, r3
 8009154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009158:	ed97 6a02 	vldr	s12, [r7, #8]
 800915c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80092e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009174:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009178:	e087      	b.n	800928a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	ee07 3a90 	vmov	s15, r3
 8009180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009184:	eddf 6a57 	vldr	s13, [pc, #348]	; 80092e4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8009188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918c:	4b50      	ldr	r3, [pc, #320]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800918e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009194:	ee07 3a90 	vmov	s15, r3
 8009198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919c:	ed97 6a02 	vldr	s12, [r7, #8]
 80091a0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80092e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80091a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091bc:	e065      	b.n	800928a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	ee07 3a90 	vmov	s15, r3
 80091c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80092e8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80091cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d0:	4b3f      	ldr	r3, [pc, #252]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80091d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80091e4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80092e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80091e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009200:	e043      	b.n	800928a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920c:	eddf 6a37 	vldr	s13, [pc, #220]	; 80092ec <HAL_RCC_GetSysClockFreq+0x2e0>
 8009210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009214:	4b2e      	ldr	r3, [pc, #184]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009224:	ed97 6a02 	vldr	s12, [r7, #8]
 8009228:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80092e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800922c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009240:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009244:	e021      	b.n	800928a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	ee07 3a90 	vmov	s15, r3
 800924c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009250:	eddf 6a25 	vldr	s13, [pc, #148]	; 80092e8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8009254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009258:	4b1d      	ldr	r3, [pc, #116]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009268:	ed97 6a02 	vldr	s12, [r7, #8]
 800926c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80092e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009284:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009288:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800928a:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	0a5b      	lsrs	r3, r3, #9
 8009290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009294:	3301      	adds	r3, #1
 8009296:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ae:	ee17 3a90 	vmov	r3, s15
 80092b2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80092b4:	e005      	b.n	80092c2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61bb      	str	r3, [r7, #24]
    break;
 80092ba:	e002      	b.n	80092c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80092be:	61bb      	str	r3, [r7, #24]
    break;
 80092c0:	bf00      	nop
  }

  return sysclockfreq;
 80092c2:	69bb      	ldr	r3, [r7, #24]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3724      	adds	r7, #36	; 0x24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	58024400 	.word	0x58024400
 80092d4:	03d09000 	.word	0x03d09000
 80092d8:	003d0900 	.word	0x003d0900
 80092dc:	017d7840 	.word	0x017d7840
 80092e0:	46000000 	.word	0x46000000
 80092e4:	4c742400 	.word	0x4c742400
 80092e8:	4a742400 	.word	0x4a742400
 80092ec:	4bbebc20 	.word	0x4bbebc20

080092f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092f6:	f7ff fe89 	bl	800900c <HAL_RCC_GetSysClockFreq>
 80092fa:	4601      	mov	r1, r0
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <HAL_RCC_GetHCLKFreq+0x50>)
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	0a1b      	lsrs	r3, r3, #8
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	4a0f      	ldr	r2, [pc, #60]	; (8009344 <HAL_RCC_GetHCLKFreq+0x54>)
 8009308:	5cd3      	ldrb	r3, [r2, r3]
 800930a:	f003 031f 	and.w	r3, r3, #31
 800930e:	fa21 f303 	lsr.w	r3, r1, r3
 8009312:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009314:	4b0a      	ldr	r3, [pc, #40]	; (8009340 <HAL_RCC_GetHCLKFreq+0x50>)
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f003 030f 	and.w	r3, r3, #15
 800931c:	4a09      	ldr	r2, [pc, #36]	; (8009344 <HAL_RCC_GetHCLKFreq+0x54>)
 800931e:	5cd3      	ldrb	r3, [r2, r3]
 8009320:	f003 031f 	and.w	r3, r3, #31
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	fa22 f303 	lsr.w	r3, r2, r3
 800932a:	4a07      	ldr	r2, [pc, #28]	; (8009348 <HAL_RCC_GetHCLKFreq+0x58>)
 800932c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800932e:	4a07      	ldr	r2, [pc, #28]	; (800934c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009334:	4b04      	ldr	r3, [pc, #16]	; (8009348 <HAL_RCC_GetHCLKFreq+0x58>)
 8009336:	681b      	ldr	r3, [r3, #0]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	58024400 	.word	0x58024400
 8009344:	080108d8 	.word	0x080108d8
 8009348:	240000ec 	.word	0x240000ec
 800934c:	240000e8 	.word	0x240000e8

08009350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009354:	f7ff ffcc 	bl	80092f0 <HAL_RCC_GetHCLKFreq>
 8009358:	4601      	mov	r1, r0
 800935a:	4b06      	ldr	r3, [pc, #24]	; (8009374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	091b      	lsrs	r3, r3, #4
 8009360:	f003 0307 	and.w	r3, r3, #7
 8009364:	4a04      	ldr	r2, [pc, #16]	; (8009378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009366:	5cd3      	ldrb	r3, [r2, r3]
 8009368:	f003 031f 	and.w	r3, r3, #31
 800936c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009370:	4618      	mov	r0, r3
 8009372:	bd80      	pop	{r7, pc}
 8009374:	58024400 	.word	0x58024400
 8009378:	080108d8 	.word	0x080108d8

0800937c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009380:	f7ff ffb6 	bl	80092f0 <HAL_RCC_GetHCLKFreq>
 8009384:	4601      	mov	r1, r0
 8009386:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	0a1b      	lsrs	r3, r3, #8
 800938c:	f003 0307 	and.w	r3, r3, #7
 8009390:	4a04      	ldr	r2, [pc, #16]	; (80093a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009392:	5cd3      	ldrb	r3, [r2, r3]
 8009394:	f003 031f 	and.w	r3, r3, #31
 8009398:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800939c:	4618      	mov	r0, r3
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	58024400 	.word	0x58024400
 80093a4:	080108d8 	.word	0x080108d8

080093a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093b0:	2300      	movs	r3, #0
 80093b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093b4:	2300      	movs	r3, #0
 80093b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d03d      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093cc:	d013      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80093ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093d2:	d802      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d007      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80093d8:	e01f      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80093da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093de:	d013      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80093e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80093e4:	d01c      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80093e6:	e018      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e8:	4baf      	ldr	r3, [pc, #700]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	4aae      	ldr	r2, [pc, #696]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093f4:	e015      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3304      	adds	r3, #4
 80093fa:	2102      	movs	r1, #2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 fd23 	bl	800ae48 <RCCEx_PLL2_Config>
 8009402:	4603      	mov	r3, r0
 8009404:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009406:	e00c      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3324      	adds	r3, #36	; 0x24
 800940c:	2102      	movs	r1, #2
 800940e:	4618      	mov	r0, r3
 8009410:	f001 fdcc 	bl	800afac <RCCEx_PLL3_Config>
 8009414:	4603      	mov	r3, r0
 8009416:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009418:	e003      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	75fb      	strb	r3, [r7, #23]
      break;
 800941e:	e000      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d109      	bne.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009428:	4b9f      	ldr	r3, [pc, #636]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800942a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800942c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009434:	499c      	ldr	r1, [pc, #624]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009436:	4313      	orrs	r3, r2
 8009438:	650b      	str	r3, [r1, #80]	; 0x50
 800943a:	e001      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009448:	2b00      	cmp	r3, #0
 800944a:	d03d      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009450:	2b04      	cmp	r3, #4
 8009452:	d826      	bhi.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009454:	a201      	add	r2, pc, #4	; (adr r2, 800945c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	08009471 	.word	0x08009471
 8009460:	0800947f 	.word	0x0800947f
 8009464:	08009491 	.word	0x08009491
 8009468:	080094a9 	.word	0x080094a9
 800946c:	080094a9 	.word	0x080094a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009470:	4b8d      	ldr	r3, [pc, #564]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	4a8c      	ldr	r2, [pc, #560]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800947a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800947c:	e015      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3304      	adds	r3, #4
 8009482:	2100      	movs	r1, #0
 8009484:	4618      	mov	r0, r3
 8009486:	f001 fcdf 	bl	800ae48 <RCCEx_PLL2_Config>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800948e:	e00c      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3324      	adds	r3, #36	; 0x24
 8009494:	2100      	movs	r1, #0
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fd88 	bl	800afac <RCCEx_PLL3_Config>
 800949c:	4603      	mov	r3, r0
 800949e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094a0:	e003      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	75fb      	strb	r3, [r7, #23]
      break;
 80094a6:	e000      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80094a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d109      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094b0:	4b7d      	ldr	r3, [pc, #500]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b4:	f023 0207 	bic.w	r2, r3, #7
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094bc:	497a      	ldr	r1, [pc, #488]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	650b      	str	r3, [r1, #80]	; 0x50
 80094c2:	e001      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d03e      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d8:	2b80      	cmp	r3, #128	; 0x80
 80094da:	d01c      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80094dc:	2b80      	cmp	r3, #128	; 0x80
 80094de:	d804      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x142>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d008      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80094e4:	2b40      	cmp	r3, #64	; 0x40
 80094e6:	d00d      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80094e8:	e01e      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80094ea:	2bc0      	cmp	r3, #192	; 0xc0
 80094ec:	d01f      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80094ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f2:	d01e      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80094f4:	e018      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f6:	4b6c      	ldr	r3, [pc, #432]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	4a6b      	ldr	r2, [pc, #428]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009500:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009502:	e017      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3304      	adds	r3, #4
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f001 fc9c 	bl	800ae48 <RCCEx_PLL2_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009514:	e00e      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3324      	adds	r3, #36	; 0x24
 800951a:	2100      	movs	r1, #0
 800951c:	4618      	mov	r0, r3
 800951e:	f001 fd45 	bl	800afac <RCCEx_PLL3_Config>
 8009522:	4603      	mov	r3, r0
 8009524:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009526:	e005      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	75fb      	strb	r3, [r7, #23]
      break;
 800952c:	e002      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800952e:	bf00      	nop
 8009530:	e000      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800953a:	4b5b      	ldr	r3, [pc, #364]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800953c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009546:	4958      	ldr	r1, [pc, #352]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009548:	4313      	orrs	r3, r2
 800954a:	650b      	str	r3, [r1, #80]	; 0x50
 800954c:	e001      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800955a:	2b00      	cmp	r3, #0
 800955c:	d044      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009568:	d01f      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800956a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800956e:	d805      	bhi.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00a      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009578:	d00e      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800957a:	e01f      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800957c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009580:	d01f      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8009582:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009586:	d01e      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009588:	e018      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958a:	4b47      	ldr	r3, [pc, #284]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800958c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958e:	4a46      	ldr	r2, [pc, #280]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009596:	e017      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3304      	adds	r3, #4
 800959c:	2100      	movs	r1, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 fc52 	bl	800ae48 <RCCEx_PLL2_Config>
 80095a4:	4603      	mov	r3, r0
 80095a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80095a8:	e00e      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3324      	adds	r3, #36	; 0x24
 80095ae:	2100      	movs	r1, #0
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 fcfb 	bl	800afac <RCCEx_PLL3_Config>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095ba:	e005      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	75fb      	strb	r3, [r7, #23]
      break;
 80095c0:	e002      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80095c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095ce:	4b36      	ldr	r3, [pc, #216]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80095d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095dc:	4932      	ldr	r1, [pc, #200]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	658b      	str	r3, [r1, #88]	; 0x58
 80095e2:	e001      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d044      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095fe:	d01f      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009604:	d805      	bhi.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800960a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800960e:	d00e      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009610:	e01f      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009612:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009616:	d01f      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800961c:	d01e      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800961e:	e018      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009620:	4b21      	ldr	r3, [pc, #132]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009624:	4a20      	ldr	r2, [pc, #128]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800962a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800962c:	e017      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3304      	adds	r3, #4
 8009632:	2100      	movs	r1, #0
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fc07 	bl	800ae48 <RCCEx_PLL2_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800963e:	e00e      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3324      	adds	r3, #36	; 0x24
 8009644:	2100      	movs	r1, #0
 8009646:	4618      	mov	r0, r3
 8009648:	f001 fcb0 	bl	800afac <RCCEx_PLL3_Config>
 800964c:	4603      	mov	r3, r0
 800964e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009650:	e005      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	75fb      	strb	r3, [r7, #23]
      break;
 8009656:	e002      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009658:	bf00      	nop
 800965a:	e000      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800965c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10a      	bne.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009664:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009668:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009672:	490d      	ldr	r1, [pc, #52]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009674:	4313      	orrs	r3, r2
 8009676:	658b      	str	r3, [r1, #88]	; 0x58
 8009678:	e001      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d035      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800968e:	2b10      	cmp	r3, #16
 8009690:	d00c      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009692:	2b10      	cmp	r3, #16
 8009694:	d802      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d01b      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800969a:	e017      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800969c:	2b20      	cmp	r3, #32
 800969e:	d00c      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x312>
 80096a0:	2b30      	cmp	r3, #48	; 0x30
 80096a2:	d018      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80096a4:	e012      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80096a6:	bf00      	nop
 80096a8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ac:	4baf      	ldr	r3, [pc, #700]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	4aae      	ldr	r2, [pc, #696]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80096b8:	e00e      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3304      	adds	r3, #4
 80096be:	2102      	movs	r1, #2
 80096c0:	4618      	mov	r0, r3
 80096c2:	f001 fbc1 	bl	800ae48 <RCCEx_PLL2_Config>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80096ca:	e005      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	75fb      	strb	r3, [r7, #23]
      break;
 80096d0:	e002      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80096d2:	bf00      	nop
 80096d4:	e000      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80096d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d109      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096de:	4ba3      	ldr	r3, [pc, #652]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ea:	49a0      	ldr	r1, [pc, #640]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80096f0:	e001      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d042      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970a:	d01f      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800970c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009710:	d805      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971a:	d00e      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800971c:	e01f      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800971e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009722:	d01f      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009728:	d01e      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800972a:	e018      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800972c:	4b8f      	ldr	r3, [pc, #572]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	4a8e      	ldr	r2, [pc, #568]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009738:	e017      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3304      	adds	r3, #4
 800973e:	2100      	movs	r1, #0
 8009740:	4618      	mov	r0, r3
 8009742:	f001 fb81 	bl	800ae48 <RCCEx_PLL2_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800974a:	e00e      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3324      	adds	r3, #36	; 0x24
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fc2a 	bl	800afac <RCCEx_PLL3_Config>
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800975c:	e005      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
      break;
 8009762:	e002      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d109      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009770:	4b7e      	ldr	r3, [pc, #504]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009774:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800977c:	497b      	ldr	r1, [pc, #492]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800977e:	4313      	orrs	r3, r2
 8009780:	650b      	str	r3, [r1, #80]	; 0x50
 8009782:	e001      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d042      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800979c:	d01b      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800979e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097a2:	d805      	bhi.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d022      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x446>
 80097a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ac:	d00a      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80097ae:	e01b      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80097b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097b4:	d01d      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80097b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097ba:	d01c      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80097bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097c0:	d01b      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x452>
 80097c2:	e011      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	2101      	movs	r1, #1
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 fb3c 	bl	800ae48 <RCCEx_PLL2_Config>
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80097d4:	e012      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3324      	adds	r3, #36	; 0x24
 80097da:	2101      	movs	r1, #1
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 fbe5 	bl	800afac <RCCEx_PLL3_Config>
 80097e2:	4603      	mov	r3, r0
 80097e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80097e6:	e009      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	75fb      	strb	r3, [r7, #23]
      break;
 80097ec:	e006      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80097ee:	bf00      	nop
 80097f0:	e004      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80097f2:	bf00      	nop
 80097f4:	e002      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80097f6:	bf00      	nop
 80097f8:	e000      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80097fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009802:	4b5a      	ldr	r3, [pc, #360]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009806:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980e:	4957      	ldr	r1, [pc, #348]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009810:	4313      	orrs	r3, r2
 8009812:	650b      	str	r3, [r1, #80]	; 0x50
 8009814:	e001      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d044      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800982c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009830:	d01b      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009836:	d805      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009838:	2b00      	cmp	r3, #0
 800983a:	d022      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800983c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009840:	d00a      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009842:	e01b      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009848:	d01d      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800984a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800984e:	d01c      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009850:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009854:	d01b      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009856:	e011      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	2101      	movs	r1, #1
 800985e:	4618      	mov	r0, r3
 8009860:	f001 faf2 	bl	800ae48 <RCCEx_PLL2_Config>
 8009864:	4603      	mov	r3, r0
 8009866:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009868:	e012      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3324      	adds	r3, #36	; 0x24
 800986e:	2101      	movs	r1, #1
 8009870:	4618      	mov	r0, r3
 8009872:	f001 fb9b 	bl	800afac <RCCEx_PLL3_Config>
 8009876:	4603      	mov	r3, r0
 8009878:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800987a:	e009      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	75fb      	strb	r3, [r7, #23]
      break;
 8009880:	e006      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009882:	bf00      	nop
 8009884:	e004      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009886:	bf00      	nop
 8009888:	e002      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800988a:	bf00      	nop
 800988c:	e000      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800988e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009890:	7dfb      	ldrb	r3, [r7, #23]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009896:	4b35      	ldr	r3, [pc, #212]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098a4:	4931      	ldr	r1, [pc, #196]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	658b      	str	r3, [r1, #88]	; 0x58
 80098aa:	e001      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d02d      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098c4:	d005      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80098c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ca:	d009      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d013      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80098d0:	e00f      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d2:	4b26      	ldr	r3, [pc, #152]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80098d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d6:	4a25      	ldr	r2, [pc, #148]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80098d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098de:	e00c      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3304      	adds	r3, #4
 80098e4:	2101      	movs	r1, #1
 80098e6:	4618      	mov	r0, r3
 80098e8:	f001 faae 	bl	800ae48 <RCCEx_PLL2_Config>
 80098ec:	4603      	mov	r3, r0
 80098ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098f0:	e003      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	75fb      	strb	r3, [r7, #23]
      break;
 80098f6:	e000      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80098f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d109      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009900:	4b1a      	ldr	r3, [pc, #104]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009904:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990c:	4917      	ldr	r1, [pc, #92]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800990e:	4313      	orrs	r3, r2
 8009910:	650b      	str	r3, [r1, #80]	; 0x50
 8009912:	e001      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d035      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009928:	2b03      	cmp	r3, #3
 800992a:	d81b      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800992c:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009971 	.word	0x08009971
 8009938:	08009945 	.word	0x08009945
 800993c:	08009953 	.word	0x08009953
 8009940:	08009971 	.word	0x08009971
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009944:	4b09      	ldr	r3, [pc, #36]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	4a08      	ldr	r2, [pc, #32]	; (800996c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800994a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800994e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009950:	e00f      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3304      	adds	r3, #4
 8009956:	2102      	movs	r1, #2
 8009958:	4618      	mov	r0, r3
 800995a:	f001 fa75 	bl	800ae48 <RCCEx_PLL2_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009962:	e006      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
      break;
 8009968:	e003      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800996a:	bf00      	nop
 800996c:	58024400 	.word	0x58024400
      break;
 8009970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d109      	bne.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009978:	4bba      	ldr	r3, [pc, #744]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800997a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800997c:	f023 0203 	bic.w	r2, r3, #3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009984:	49b7      	ldr	r1, [pc, #732]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009986:	4313      	orrs	r3, r2
 8009988:	64cb      	str	r3, [r1, #76]	; 0x4c
 800998a:	e001      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 8086 	beq.w	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800999e:	4bb2      	ldr	r3, [pc, #712]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4ab1      	ldr	r2, [pc, #708]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80099a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099aa:	f7fa fa79 	bl	8003ea0 <HAL_GetTick>
 80099ae:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099b0:	e009      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099b2:	f7fa fa75 	bl	8003ea0 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	2b64      	cmp	r3, #100	; 0x64
 80099be:	d902      	bls.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	75fb      	strb	r3, [r7, #23]
        break;
 80099c4:	e005      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099c6:	4ba8      	ldr	r3, [pc, #672]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0ef      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d166      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099d8:	4ba2      	ldr	r3, [pc, #648]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099e2:	4053      	eors	r3, r2
 80099e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d013      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099ec:	4b9d      	ldr	r3, [pc, #628]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099f6:	4b9b      	ldr	r3, [pc, #620]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fa:	4a9a      	ldr	r2, [pc, #616]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a02:	4b98      	ldr	r3, [pc, #608]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a06:	4a97      	ldr	r2, [pc, #604]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a0e:	4a95      	ldr	r2, [pc, #596]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a1e:	d115      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a20:	f7fa fa3e 	bl	8003ea0 <HAL_GetTick>
 8009a24:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a26:	e00b      	b.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a28:	f7fa fa3a 	bl	8003ea0 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d902      	bls.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	75fb      	strb	r3, [r7, #23]
            break;
 8009a3e:	e005      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a40:	4b88      	ldr	r3, [pc, #544]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0ed      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d126      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a60:	d10d      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009a62:	4b80      	ldr	r3, [pc, #512]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a70:	0919      	lsrs	r1, r3, #4
 8009a72:	4b7e      	ldr	r3, [pc, #504]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009a74:	400b      	ands	r3, r1
 8009a76:	497b      	ldr	r1, [pc, #492]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	610b      	str	r3, [r1, #16]
 8009a7c:	e005      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009a7e:	4b79      	ldr	r3, [pc, #484]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	4a78      	ldr	r2, [pc, #480]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a88:	6113      	str	r3, [r2, #16]
 8009a8a:	4b76      	ldr	r3, [pc, #472]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a98:	4972      	ldr	r1, [pc, #456]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	670b      	str	r3, [r1, #112]	; 0x70
 8009a9e:	e004      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	75bb      	strb	r3, [r7, #22]
 8009aa4:	e001      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d07d      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aba:	2b28      	cmp	r3, #40	; 0x28
 8009abc:	d866      	bhi.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009b93 	.word	0x08009b93
 8009ac8:	08009b8d 	.word	0x08009b8d
 8009acc:	08009b8d 	.word	0x08009b8d
 8009ad0:	08009b8d 	.word	0x08009b8d
 8009ad4:	08009b8d 	.word	0x08009b8d
 8009ad8:	08009b8d 	.word	0x08009b8d
 8009adc:	08009b8d 	.word	0x08009b8d
 8009ae0:	08009b8d 	.word	0x08009b8d
 8009ae4:	08009b69 	.word	0x08009b69
 8009ae8:	08009b8d 	.word	0x08009b8d
 8009aec:	08009b8d 	.word	0x08009b8d
 8009af0:	08009b8d 	.word	0x08009b8d
 8009af4:	08009b8d 	.word	0x08009b8d
 8009af8:	08009b8d 	.word	0x08009b8d
 8009afc:	08009b8d 	.word	0x08009b8d
 8009b00:	08009b8d 	.word	0x08009b8d
 8009b04:	08009b7b 	.word	0x08009b7b
 8009b08:	08009b8d 	.word	0x08009b8d
 8009b0c:	08009b8d 	.word	0x08009b8d
 8009b10:	08009b8d 	.word	0x08009b8d
 8009b14:	08009b8d 	.word	0x08009b8d
 8009b18:	08009b8d 	.word	0x08009b8d
 8009b1c:	08009b8d 	.word	0x08009b8d
 8009b20:	08009b8d 	.word	0x08009b8d
 8009b24:	08009b93 	.word	0x08009b93
 8009b28:	08009b8d 	.word	0x08009b8d
 8009b2c:	08009b8d 	.word	0x08009b8d
 8009b30:	08009b8d 	.word	0x08009b8d
 8009b34:	08009b8d 	.word	0x08009b8d
 8009b38:	08009b8d 	.word	0x08009b8d
 8009b3c:	08009b8d 	.word	0x08009b8d
 8009b40:	08009b8d 	.word	0x08009b8d
 8009b44:	08009b93 	.word	0x08009b93
 8009b48:	08009b8d 	.word	0x08009b8d
 8009b4c:	08009b8d 	.word	0x08009b8d
 8009b50:	08009b8d 	.word	0x08009b8d
 8009b54:	08009b8d 	.word	0x08009b8d
 8009b58:	08009b8d 	.word	0x08009b8d
 8009b5c:	08009b8d 	.word	0x08009b8d
 8009b60:	08009b8d 	.word	0x08009b8d
 8009b64:	08009b93 	.word	0x08009b93
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 f96a 	bl	800ae48 <RCCEx_PLL2_Config>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b78:	e00c      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	3324      	adds	r3, #36	; 0x24
 8009b7e:	2101      	movs	r1, #1
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 fa13 	bl	800afac <RCCEx_PLL3_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b8a:	e003      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b90:	e000      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d109      	bne.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b9a:	4b32      	ldr	r3, [pc, #200]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ba6:	492f      	ldr	r1, [pc, #188]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	654b      	str	r3, [r1, #84]	; 0x54
 8009bac:	e001      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d037      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	d820      	bhi.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c0f 	.word	0x08009c0f
 8009bd0:	08009be5 	.word	0x08009be5
 8009bd4:	08009bf7 	.word	0x08009bf7
 8009bd8:	08009c0f 	.word	0x08009c0f
 8009bdc:	08009c0f 	.word	0x08009c0f
 8009be0:	08009c0f 	.word	0x08009c0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3304      	adds	r3, #4
 8009be8:	2101      	movs	r1, #1
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 f92c 	bl	800ae48 <RCCEx_PLL2_Config>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009bf4:	e00c      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3324      	adds	r3, #36	; 0x24
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 f9d5 	bl	800afac <RCCEx_PLL3_Config>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009c06:	e003      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c0c:	e000      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009c16:	4b13      	ldr	r3, [pc, #76]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1a:	f023 0207 	bic.w	r2, r3, #7
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c22:	4910      	ldr	r1, [pc, #64]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	654b      	str	r3, [r1, #84]	; 0x54
 8009c28:	e001      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d040      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c40:	2b05      	cmp	r3, #5
 8009c42:	d827      	bhi.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009c44:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4a:	bf00      	nop
 8009c4c:	08009c9b 	.word	0x08009c9b
 8009c50:	08009c71 	.word	0x08009c71
 8009c54:	08009c83 	.word	0x08009c83
 8009c58:	08009c9b 	.word	0x08009c9b
 8009c5c:	08009c9b 	.word	0x08009c9b
 8009c60:	08009c9b 	.word	0x08009c9b
 8009c64:	58024400 	.word	0x58024400
 8009c68:	58024800 	.word	0x58024800
 8009c6c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3304      	adds	r3, #4
 8009c74:	2101      	movs	r1, #1
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 f8e6 	bl	800ae48 <RCCEx_PLL2_Config>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c80:	e00c      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	3324      	adds	r3, #36	; 0x24
 8009c86:	2101      	movs	r1, #1
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f001 f98f 	bl	800afac <RCCEx_PLL3_Config>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c92:	e003      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	75fb      	strb	r3, [r7, #23]
      break;
 8009c98:	e000      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ca2:	4bb2      	ldr	r3, [pc, #712]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca6:	f023 0207 	bic.w	r2, r3, #7
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb0:	49ae      	ldr	r1, [pc, #696]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8009cb6:	e001      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0320 	and.w	r3, r3, #32
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d044      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cd2:	d01b      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cd8:	d805      	bhi.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d022      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ce2:	d00a      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009ce4:	e01b      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cea:	d01d      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cf0:	d01c      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009cf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cf6:	d01b      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009cf8:	e011      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 f8a1 	bl	800ae48 <RCCEx_PLL2_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d0a:	e012      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3324      	adds	r3, #36	; 0x24
 8009d10:	2102      	movs	r1, #2
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 f94a 	bl	800afac <RCCEx_PLL3_Config>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d1c:	e009      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	75fb      	strb	r3, [r7, #23]
      break;
 8009d22:	e006      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009d24:	bf00      	nop
 8009d26:	e004      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009d28:	bf00      	nop
 8009d2a:	e002      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009d2c:	bf00      	nop
 8009d2e:	e000      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10a      	bne.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d38:	4b8c      	ldr	r3, [pc, #560]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d46:	4989      	ldr	r1, [pc, #548]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	654b      	str	r3, [r1, #84]	; 0x54
 8009d4c:	e001      	b.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d044      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d68:	d01b      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d6e:	d805      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d022      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d78:	d00a      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009d7a:	e01b      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d80:	d01d      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009d82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d86:	d01c      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d8c:	d01b      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009d8e:	e011      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3304      	adds	r3, #4
 8009d94:	2100      	movs	r1, #0
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 f856 	bl	800ae48 <RCCEx_PLL2_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009da0:	e012      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3324      	adds	r3, #36	; 0x24
 8009da6:	2102      	movs	r1, #2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 f8ff 	bl	800afac <RCCEx_PLL3_Config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009db2:	e009      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
      break;
 8009db8:	e006      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009dba:	bf00      	nop
 8009dbc:	e004      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009dbe:	bf00      	nop
 8009dc0:	e002      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009dc2:	bf00      	nop
 8009dc4:	e000      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009dce:	4b67      	ldr	r3, [pc, #412]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ddc:	4963      	ldr	r1, [pc, #396]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	658b      	str	r3, [r1, #88]	; 0x58
 8009de2:	e001      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d044      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dfe:	d01b      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e04:	d805      	bhi.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d022      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e0e:	d00a      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009e10:	e01b      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8009e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e16:	d01d      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009e18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e1c:	d01c      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009e1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e22:	d01b      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009e24:	e011      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 f80b 	bl	800ae48 <RCCEx_PLL2_Config>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e36:	e012      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	3324      	adds	r3, #36	; 0x24
 8009e3c:	2102      	movs	r1, #2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 f8b4 	bl	800afac <RCCEx_PLL3_Config>
 8009e44:	4603      	mov	r3, r0
 8009e46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e48:	e009      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4e:	e006      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009e50:	bf00      	nop
 8009e52:	e004      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009e54:	bf00      	nop
 8009e56:	e002      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009e58:	bf00      	nop
 8009e5a:	e000      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e64:	4b41      	ldr	r3, [pc, #260]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e72:	493e      	ldr	r1, [pc, #248]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e74:	4313      	orrs	r3, r2
 8009e76:	658b      	str	r3, [r1, #88]	; 0x58
 8009e78:	e001      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0308 	and.w	r3, r3, #8
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d01a      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e94:	d10a      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3324      	adds	r3, #36	; 0x24
 8009e9a:	2102      	movs	r1, #2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f885 	bl	800afac <RCCEx_PLL3_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009eac:	4b2f      	ldr	r3, [pc, #188]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eba:	492c      	ldr	r1, [pc, #176]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01a      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed6:	d10a      	bne.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3324      	adds	r3, #36	; 0x24
 8009edc:	2102      	movs	r1, #2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f001 f864 	bl	800afac <RCCEx_PLL3_Config>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009eee:	4b1f      	ldr	r3, [pc, #124]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009efc:	491b      	ldr	r1, [pc, #108]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d032      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f18:	d00d      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f1e:	d016      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d111      	bne.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	2100      	movs	r1, #0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 ff8c 	bl	800ae48 <RCCEx_PLL2_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f34:	e00c      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3324      	adds	r3, #36	; 0x24
 8009f3a:	2102      	movs	r1, #2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 f835 	bl	800afac <RCCEx_PLL3_Config>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f46:	e003      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4c:	e000      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10c      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f64:	4901      	ldr	r1, [pc, #4]	; (8009f6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	658b      	str	r3, [r1, #88]	; 0x58
 8009f6a:	e003      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009f6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d02f      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f8a:	d00c      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009f8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f90:	d015      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f96:	d10f      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f98:	4b71      	ldr	r3, [pc, #452]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	4a70      	ldr	r2, [pc, #448]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fa4:	e00c      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3324      	adds	r3, #36	; 0x24
 8009faa:	2101      	movs	r1, #1
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fffd 	bl	800afac <RCCEx_PLL3_Config>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fb6:	e003      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	75fb      	strb	r3, [r7, #23]
      break;
 8009fbc:	e000      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009fc6:	4b66      	ldr	r3, [pc, #408]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fd4:	4962      	ldr	r1, [pc, #392]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	654b      	str	r3, [r1, #84]	; 0x54
 8009fda:	e001      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fdc:	7dfb      	ldrb	r3, [r7, #23]
 8009fde:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d029      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff8:	d007      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009ffa:	e00f      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ffc:	4b58      	ldr	r3, [pc, #352]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	4a57      	ldr	r2, [pc, #348]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a008:	e00b      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	3304      	adds	r3, #4
 800a00e:	2102      	movs	r1, #2
 800a010:	4618      	mov	r0, r3
 800a012:	f000 ff19 	bl	800ae48 <RCCEx_PLL2_Config>
 800a016:	4603      	mov	r3, r0
 800a018:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a01a:	e002      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	75fb      	strb	r3, [r7, #23]
      break;
 800a020:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d109      	bne.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a028:	4b4d      	ldr	r3, [pc, #308]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a02a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a02c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a034:	494a      	ldr	r1, [pc, #296]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a036:	4313      	orrs	r3, r2
 800a038:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a03a:	e001      	b.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00a      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3324      	adds	r3, #36	; 0x24
 800a050:	2102      	movs	r1, #2
 800a052:	4618      	mov	r0, r3
 800a054:	f000 ffaa 	bl	800afac <RCCEx_PLL3_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d02f      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a076:	d00c      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07c:	d802      	bhi.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d011      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800a082:	e00d      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800a084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a088:	d00f      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800a08a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a08e:	d00e      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800a090:	e006      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a092:	4b33      	ldr	r3, [pc, #204]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	4a32      	ldr	r2, [pc, #200]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a09c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a09e:	e007      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a4:	e004      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a0a6:	bf00      	nop
 800a0a8:	e002      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a0aa:	bf00      	nop
 800a0ac:	e000      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a0ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d109      	bne.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0b6:	4b2a      	ldr	r3, [pc, #168]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0c2:	4927      	ldr	r1, [pc, #156]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	654b      	str	r3, [r1, #84]	; 0x54
 800a0c8:	e001      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d008      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0da:	4b21      	ldr	r3, [pc, #132]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e6:	491e      	ldr	r1, [pc, #120]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d008      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0f8:	4b19      	ldr	r3, [pc, #100]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a104:	4916      	ldr	r1, [pc, #88]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a106:	4313      	orrs	r3, r2
 800a108:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00d      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a116:	4b12      	ldr	r3, [pc, #72]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	4a11      	ldr	r2, [pc, #68]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a11c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a120:	6113      	str	r3, [r2, #16]
 800a122:	4b0f      	ldr	r3, [pc, #60]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a124:	691a      	ldr	r2, [r3, #16]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a12c:	490c      	ldr	r1, [pc, #48]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	da08      	bge.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a13a:	4b09      	ldr	r3, [pc, #36]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a146:	4906      	ldr	r1, [pc, #24]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a148:	4313      	orrs	r3, r2
 800a14a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a14c:	7dbb      	ldrb	r3, [r7, #22]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	e000      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	58024400 	.word	0x58024400

0800a164 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b090      	sub	sp, #64	; 0x40
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a172:	d150      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a174:	4ba1      	ldr	r3, [pc, #644]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a178:	f003 0307 	and.w	r3, r3, #7
 800a17c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	2b04      	cmp	r3, #4
 800a182:	d844      	bhi.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a184:	a201      	add	r2, pc, #4	; (adr r2, 800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18a:	bf00      	nop
 800a18c:	0800a1a1 	.word	0x0800a1a1
 800a190:	0800a1b1 	.word	0x0800a1b1
 800a194:	0800a1c1 	.word	0x0800a1c1
 800a198:	0800a209 	.word	0x0800a209
 800a19c:	0800a1d1 	.word	0x0800a1d1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 fd03 	bl	800abb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ae:	e241      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b0:	f107 0318 	add.w	r3, r7, #24
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fa63 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1be:	e239      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1c0:	f107 030c 	add.w	r3, r7, #12
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 fba7 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ce:	e231      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a1d0:	4b8a      	ldr	r3, [pc, #552]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1d8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a1e0:	4b87      	ldr	r3, [pc, #540]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a1e4:	e226      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1ec:	d102      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a1ee:	4b85      	ldr	r3, [pc, #532]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f2:	e21f      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1fa:	d102      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a1fc:	4b82      	ldr	r3, [pc, #520]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a200:	e218      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a206:	e215      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a208:	4b80      	ldr	r3, [pc, #512]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a20c:	e212      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a212:	bf00      	nop
 800a214:	e20e      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a21c:	d14f      	bne.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a21e:	4b77      	ldr	r3, [pc, #476]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a222:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a226:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	2b80      	cmp	r3, #128	; 0x80
 800a22c:	d01c      	beq.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a22e:	2b80      	cmp	r3, #128	; 0x80
 800a230:	d804      	bhi.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d008      	beq.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a236:	2b40      	cmp	r3, #64	; 0x40
 800a238:	d00e      	beq.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a23a:	e03c      	b.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a23c:	2bc0      	cmp	r3, #192	; 0xc0
 800a23e:	d037      	beq.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a244:	d018      	beq.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a246:	e036      	b.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fcaf 	bl	800abb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a256:	e1ed      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a258:	f107 0318 	add.w	r3, r7, #24
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 fa0f 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a266:	e1e5      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a268:	f107 030c 	add.w	r3, r7, #12
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 fb53 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a276:	e1dd      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a278:	4b60      	ldr	r3, [pc, #384]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a27a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a27c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a280:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a288:	4b5d      	ldr	r3, [pc, #372]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a28c:	e1d2      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a294:	d102      	bne.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a296:	4b5b      	ldr	r3, [pc, #364]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a29a:	e1cb      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2a2:	d102      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a2a4:	4b58      	ldr	r3, [pc, #352]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a8:	e1c4      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ae:	e1c1      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a2b0:	4b56      	ldr	r3, [pc, #344]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2b4:	e1be      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ba:	bf00      	nop
 800a2bc:	e1ba      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2c4:	d153      	bne.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a2c6:	4b4d      	ldr	r3, [pc, #308]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a2ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2d6:	d01f      	beq.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a2d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2dc:	d805      	bhi.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00a      	beq.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a2e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2e6:	d00f      	beq.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a2e8:	e03d      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a2ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2ee:	d037      	beq.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a2f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2f4:	d018      	beq.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a2f6:	e036      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fc57 	bl	800abb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a306:	e195      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a308:	f107 0318 	add.w	r3, r7, #24
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 f9b7 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a316:	e18d      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a318:	f107 030c 	add.w	r3, r7, #12
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 fafb 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a326:	e185      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a328:	4b34      	ldr	r3, [pc, #208]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a32c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a330:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a334:	2b00      	cmp	r3, #0
 800a336:	d102      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a338:	4b31      	ldr	r3, [pc, #196]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a33a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a33c:	e17a      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a344:	d102      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a346:	4b2f      	ldr	r3, [pc, #188]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a34a:	e173      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a352:	d102      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a354:	4b2c      	ldr	r3, [pc, #176]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a356:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a358:	e16c      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a35e:	e169      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a360:	4b2a      	ldr	r3, [pc, #168]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a364:	e166      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a36a:	bf00      	nop
 800a36c:	e162      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a374:	d15d      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a376:	4b21      	ldr	r3, [pc, #132]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a37e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a386:	d01f      	beq.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a38c:	d805      	bhi.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00a      	beq.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a392:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a396:	d00f      	beq.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a398:	e047      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a39a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a39e:	d041      	beq.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a3a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3a4:	d018      	beq.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a3a6:	e040      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 fbff 	bl	800abb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3b6:	e13d      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b8:	f107 0318 	add.w	r3, r7, #24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 f95f 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3c6:	e135      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3c8:	f107 030c 	add.w	r3, r7, #12
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 faa3 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3d6:	e12d      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a3d8:	4b08      	ldr	r3, [pc, #32]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a3da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a3e8:	4b05      	ldr	r3, [pc, #20]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a3ec:	e122      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3f4:	d10c      	bne.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a3f6:	4b03      	ldr	r3, [pc, #12]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3fa:	e11b      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a3fc:	58024400 	.word	0x58024400
 800a400:	03d09000 	.word	0x03d09000
 800a404:	003d0900 	.word	0x003d0900
 800a408:	017d7840 	.word	0x017d7840
 800a40c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a416:	d102      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a418:	4b89      	ldr	r3, [pc, #548]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a41a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a41c:	e10a      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a422:	e107      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a424:	4b87      	ldr	r3, [pc, #540]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a428:	e104      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a42e:	bf00      	nop
 800a430:	e100      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a438:	d153      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a43a:	4b83      	ldr	r3, [pc, #524]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a442:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a44a:	d01f      	beq.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a44c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a450:	d805      	bhi.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a45a:	d00f      	beq.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a45c:	e03d      	b.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a45e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a462:	d037      	beq.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a468:	d018      	beq.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a46a:	e036      	b.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a46c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fb9d 	bl	800abb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a47a:	e0db      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a47c:	f107 0318 	add.w	r3, r7, #24
 800a480:	4618      	mov	r0, r3
 800a482:	f000 f8fd 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a48a:	e0d3      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a48c:	f107 030c 	add.w	r3, r7, #12
 800a490:	4618      	mov	r0, r3
 800a492:	f000 fa41 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a49a:	e0cb      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a49c:	4b6a      	ldr	r3, [pc, #424]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a49e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a4ac:	4b67      	ldr	r3, [pc, #412]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a4b0:	e0c0      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4b8:	d102      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a4ba:	4b65      	ldr	r3, [pc, #404]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4be:	e0b9      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4c6:	d102      	bne.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a4c8:	4b5d      	ldr	r3, [pc, #372]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4cc:	e0b2      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d2:	e0af      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4d4:	4b5b      	ldr	r3, [pc, #364]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d8:	e0ac      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4de:	bf00      	nop
 800a4e0:	e0a8      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a4e8:	d13d      	bne.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a4ea:	4b57      	ldr	r3, [pc, #348]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4fa:	d00c      	beq.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a4fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a500:	d011      	beq.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a502:	2b00      	cmp	r3, #0
 800a504:	d12b      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a506:	f107 0318 	add.w	r3, r7, #24
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f8b8 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a514:	e08e      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a516:	f107 030c 	add.w	r3, r7, #12
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f9fc 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a524:	e086      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a526:	4b48      	ldr	r3, [pc, #288]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a52e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a532:	2b00      	cmp	r3, #0
 800a534:	d102      	bne.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a536:	4b45      	ldr	r3, [pc, #276]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a538:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a53a:	e07b      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a542:	d102      	bne.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a544:	4b42      	ldr	r3, [pc, #264]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a548:	e074      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a550:	d102      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a552:	4b3b      	ldr	r3, [pc, #236]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a556:	e06d      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a55c:	e06a      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a562:	bf00      	nop
 800a564:	e066      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a56c:	d11f      	bne.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a56e:	4b36      	ldr	r3, [pc, #216]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a576:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a582:	d008      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a584:	e00f      	b.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fb10 	bl	800abb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a594:	e04e      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a596:	f107 0318 	add.w	r3, r7, #24
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f870 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a4:	e046      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5aa:	bf00      	nop
 800a5ac:	e042      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5b4:	d13c      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a5b6:	4b24      	ldr	r3, [pc, #144]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a5be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c6:	d01e      	beq.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a5c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5cc:	d805      	bhi.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00d      	beq.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a5d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5d6:	d00e      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a5d8:	e026      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a5da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5de:	d01d      	beq.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a5e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5e4:	d01d      	beq.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a5e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5ea:	d014      	beq.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a5ec:	e01c      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a5ee:	f000 f831 	bl	800a654 <HAL_RCCEx_GetD3PCLK1Freq>
 800a5f2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a5f4:	e01e      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f6:	f107 0318 	add.w	r3, r7, #24
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f840 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a604:	e016      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a606:	f107 030c 	add.w	r3, r7, #12
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f984 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a614:	e00e      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a616:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a61a:	e00b      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a61c:	4b0c      	ldr	r3, [pc, #48]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a620:	e008      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a622:	4b07      	ldr	r3, [pc, #28]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a626:	e005      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a62c:	bf00      	nop
 800a62e:	e001      	b.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a636:	4618      	mov	r0, r3
 800a638:	3740      	adds	r7, #64	; 0x40
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	017d7840 	.word	0x017d7840
 800a644:	00bb8000 	.word	0x00bb8000
 800a648:	58024400 	.word	0x58024400
 800a64c:	03d09000 	.word	0x03d09000
 800a650:	003d0900 	.word	0x003d0900

0800a654 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a658:	f7fe fe4a 	bl	80092f0 <HAL_RCC_GetHCLKFreq>
 800a65c:	4601      	mov	r1, r0
 800a65e:	4b06      	ldr	r3, [pc, #24]	; (800a678 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	091b      	lsrs	r3, r3, #4
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	4a04      	ldr	r2, [pc, #16]	; (800a67c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a66a:	5cd3      	ldrb	r3, [r2, r3]
 800a66c:	f003 031f 	and.w	r3, r3, #31
 800a670:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a674:	4618      	mov	r0, r3
 800a676:	bd80      	pop	{r7, pc}
 800a678:	58024400 	.word	0x58024400
 800a67c:	080108d8 	.word	0x080108d8

0800a680 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a680:	b480      	push	{r7}
 800a682:	b089      	sub	sp, #36	; 0x24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a688:	4b9d      	ldr	r3, [pc, #628]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a692:	4b9b      	ldr	r3, [pc, #620]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a696:	0b1b      	lsrs	r3, r3, #12
 800a698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a69c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a69e:	4b98      	ldr	r3, [pc, #608]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a2:	091b      	lsrs	r3, r3, #4
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a6aa:	4b95      	ldr	r3, [pc, #596]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ae:	08db      	lsrs	r3, r3, #3
 800a6b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 810a 	beq.w	800a8e2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d05a      	beq.n	800a78a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d302      	bcc.n	800a6de <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d078      	beq.n	800a7ce <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a6dc:	e099      	b.n	800a812 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6de:	4b88      	ldr	r3, [pc, #544]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d02d      	beq.n	800a746 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6ea:	4b85      	ldr	r3, [pc, #532]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	08db      	lsrs	r3, r3, #3
 800a6f0:	f003 0303 	and.w	r3, r3, #3
 800a6f4:	4a83      	ldr	r2, [pc, #524]	; (800a904 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800a6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fa:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	ee07 3a90 	vmov	s15, r3
 800a70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a714:	4b7a      	ldr	r3, [pc, #488]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71c:	ee07 3a90 	vmov	s15, r3
 800a720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a724:	ed97 6a03 	vldr	s12, [r7, #12]
 800a728:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a908 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a72c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a73c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a740:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a744:	e087      	b.n	800a856 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a750:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a90c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a758:	4b69      	ldr	r3, [pc, #420]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a760:	ee07 3a90 	vmov	s15, r3
 800a764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a768:	ed97 6a03 	vldr	s12, [r7, #12]
 800a76c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a908 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a77c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a780:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a784:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a788:	e065      	b.n	800a856 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	ee07 3a90 	vmov	s15, r3
 800a790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a794:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a79c:	4b58      	ldr	r3, [pc, #352]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a4:	ee07 3a90 	vmov	s15, r3
 800a7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a908 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a7b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7cc:	e043      	b.n	800a856 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a914 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a7dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7e0:	4b47      	ldr	r3, [pc, #284]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a908 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a7f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a80c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a810:	e021      	b.n	800a856 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	ee07 3a90 	vmov	s15, r3
 800a818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a824:	4b36      	ldr	r3, [pc, #216]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82c:	ee07 3a90 	vmov	s15, r3
 800a830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a834:	ed97 6a03 	vldr	s12, [r7, #12]
 800a838:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a908 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a83c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a84c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a854:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a856:	4b2a      	ldr	r3, [pc, #168]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85a:	0a5b      	lsrs	r3, r3, #9
 800a85c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a860:	ee07 3a90 	vmov	s15, r3
 800a864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a86c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a870:	edd7 6a07 	vldr	s13, [r7, #28]
 800a874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a87c:	ee17 2a90 	vmov	r2, s15
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a884:	4b1e      	ldr	r3, [pc, #120]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a888:	0c1b      	lsrs	r3, r3, #16
 800a88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a89a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a89e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8aa:	ee17 2a90 	vmov	r2, s15
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a8b2:	4b13      	ldr	r3, [pc, #76]	; (800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b6:	0e1b      	lsrs	r3, r3, #24
 800a8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8bc:	ee07 3a90 	vmov	s15, r3
 800a8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8d8:	ee17 2a90 	vmov	r2, s15
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a8e0:	e008      	b.n	800a8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	609a      	str	r2, [r3, #8]
}
 800a8f4:	bf00      	nop
 800a8f6:	3724      	adds	r7, #36	; 0x24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	58024400 	.word	0x58024400
 800a904:	03d09000 	.word	0x03d09000
 800a908:	46000000 	.word	0x46000000
 800a90c:	4c742400 	.word	0x4c742400
 800a910:	4a742400 	.word	0x4a742400
 800a914:	4bbebc20 	.word	0x4bbebc20

0800a918 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a918:	b480      	push	{r7}
 800a91a:	b089      	sub	sp, #36	; 0x24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a920:	4b9d      	ldr	r3, [pc, #628]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a92a:	4b9b      	ldr	r3, [pc, #620]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92e:	0d1b      	lsrs	r3, r3, #20
 800a930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a934:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a936:	4b98      	ldr	r3, [pc, #608]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	0a1b      	lsrs	r3, r3, #8
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a942:	4b95      	ldr	r3, [pc, #596]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a946:	08db      	lsrs	r3, r3, #3
 800a948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	fb02 f303 	mul.w	r3, r2, r3
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a95a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 810a 	beq.w	800ab7a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d05a      	beq.n	800aa22 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d302      	bcc.n	800a976 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a970:	2b02      	cmp	r3, #2
 800a972:	d078      	beq.n	800aa66 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a974:	e099      	b.n	800aaaa <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a976:	4b88      	ldr	r3, [pc, #544]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0320 	and.w	r3, r3, #32
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d02d      	beq.n	800a9de <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a982:	4b85      	ldr	r3, [pc, #532]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	08db      	lsrs	r3, r3, #3
 800a988:	f003 0303 	and.w	r3, r3, #3
 800a98c:	4a83      	ldr	r2, [pc, #524]	; (800ab9c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a98e:	fa22 f303 	lsr.w	r3, r2, r3
 800a992:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	ee07 3a90 	vmov	s15, r3
 800a9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ac:	4b7a      	ldr	r3, [pc, #488]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b4:	ee07 3a90 	vmov	s15, r3
 800a9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a9c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a9dc:	e087      	b.n	800aaee <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	ee07 3a90 	vmov	s15, r3
 800a9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aba4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a9ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f0:	4b69      	ldr	r3, [pc, #420]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f8:	ee07 3a90 	vmov	s15, r3
 800a9fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa00:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa04:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aa08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa20:	e065      	b.n	800aaee <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	ee07 3a90 	vmov	s15, r3
 800aa28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800aa30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa34:	4b58      	ldr	r3, [pc, #352]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3c:	ee07 3a90 	vmov	s15, r3
 800aa40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa44:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa48:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aa4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa64:	e043      	b.n	800aaee <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	ee07 3a90 	vmov	s15, r3
 800aa6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa70:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800abac <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800aa74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa78:	4b47      	ldr	r3, [pc, #284]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa80:	ee07 3a90 	vmov	s15, r3
 800aa84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa88:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa8c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aa90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaa8:	e021      	b.n	800aaee <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	ee07 3a90 	vmov	s15, r3
 800aab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800aab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aabc:	4b36      	ldr	r3, [pc, #216]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac4:	ee07 3a90 	vmov	s15, r3
 800aac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aacc:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aadc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaec:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aaee:	4b2a      	ldr	r3, [pc, #168]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	0a5b      	lsrs	r3, r3, #9
 800aaf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaf8:	ee07 3a90 	vmov	s15, r3
 800aafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab08:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab14:	ee17 2a90 	vmov	r2, s15
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ab1c:	4b1e      	ldr	r3, [pc, #120]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab20:	0c1b      	lsrs	r3, r3, #16
 800ab22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab42:	ee17 2a90 	vmov	r2, s15
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	0e1b      	lsrs	r3, r3, #24
 800ab50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab54:	ee07 3a90 	vmov	s15, r3
 800ab58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab64:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab70:	ee17 2a90 	vmov	r2, s15
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab78:	e008      	b.n	800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	609a      	str	r2, [r3, #8]
}
 800ab8c:	bf00      	nop
 800ab8e:	3724      	adds	r7, #36	; 0x24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	03d09000 	.word	0x03d09000
 800aba0:	46000000 	.word	0x46000000
 800aba4:	4c742400 	.word	0x4c742400
 800aba8:	4a742400 	.word	0x4a742400
 800abac:	4bbebc20 	.word	0x4bbebc20

0800abb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b089      	sub	sp, #36	; 0x24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abb8:	4b9d      	ldr	r3, [pc, #628]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800abba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbc:	f003 0303 	and.w	r3, r3, #3
 800abc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800abc2:	4b9b      	ldr	r3, [pc, #620]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc6:	091b      	lsrs	r3, r3, #4
 800abc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800abce:	4b98      	ldr	r3, [pc, #608]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800abd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800abd8:	4b95      	ldr	r3, [pc, #596]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800abda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abdc:	08db      	lsrs	r3, r3, #3
 800abde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	fb02 f303 	mul.w	r3, r2, r3
 800abe8:	ee07 3a90 	vmov	s15, r3
 800abec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 810a 	beq.w	800ae10 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d05a      	beq.n	800acb8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d302      	bcc.n	800ac0c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d078      	beq.n	800acfc <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800ac0a:	e099      	b.n	800ad40 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac0c:	4b88      	ldr	r3, [pc, #544]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0320 	and.w	r3, r3, #32
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d02d      	beq.n	800ac74 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac18:	4b85      	ldr	r3, [pc, #532]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	08db      	lsrs	r3, r3, #3
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	4a84      	ldr	r2, [pc, #528]	; (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800ac24:	fa22 f303 	lsr.w	r3, r2, r3
 800ac28:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	ee07 3a90 	vmov	s15, r3
 800ac30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac42:	4b7b      	ldr	r3, [pc, #492]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac56:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae38 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ac5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac72:	e087      	b.n	800ad84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b6a      	ldr	r3, [pc, #424]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae38 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acb6:	e065      	b.n	800ad84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b59      	ldr	r3, [pc, #356]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800accc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a03 	vldr	s12, [r7, #12]
 800acde:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae38 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acfa:	e043      	b.n	800ad84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0e:	4b48      	ldr	r3, [pc, #288]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ad10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad22:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae38 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad3e:	e021      	b.n	800ad84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800ad4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad52:	4b37      	ldr	r3, [pc, #220]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ad54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad66:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae38 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ad6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad82:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ad84:	4b2a      	ldr	r3, [pc, #168]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ad86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad88:	0a5b      	lsrs	r3, r3, #9
 800ad8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ada2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ada6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adaa:	ee17 2a90 	vmov	r2, s15
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800adb2:	4b1f      	ldr	r3, [pc, #124]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800adb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb6:	0c1b      	lsrs	r3, r3, #16
 800adb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adbc:	ee07 3a90 	vmov	s15, r3
 800adc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800add0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800add4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800add8:	ee17 2a90 	vmov	r2, s15
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ade0:	4b13      	ldr	r3, [pc, #76]	; (800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ade2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade4:	0e1b      	lsrs	r3, r3, #24
 800ade6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800adfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae06:	ee17 2a90 	vmov	r2, s15
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ae0e:	e008      	b.n	800ae22 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	609a      	str	r2, [r3, #8]
}
 800ae22:	bf00      	nop
 800ae24:	3724      	adds	r7, #36	; 0x24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	58024400 	.word	0x58024400
 800ae34:	03d09000 	.word	0x03d09000
 800ae38:	46000000 	.word	0x46000000
 800ae3c:	4c742400 	.word	0x4c742400
 800ae40:	4a742400 	.word	0x4a742400
 800ae44:	4bbebc20 	.word	0x4bbebc20

0800ae48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae56:	4b53      	ldr	r3, [pc, #332]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800ae58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5a:	f003 0303 	and.w	r3, r3, #3
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d101      	bne.n	800ae66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e099      	b.n	800af9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae66:	4b4f      	ldr	r3, [pc, #316]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a4e      	ldr	r2, [pc, #312]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800ae6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae72:	f7f9 f815 	bl	8003ea0 <HAL_GetTick>
 800ae76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae78:	e008      	b.n	800ae8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ae7a:	f7f9 f811 	bl	8003ea0 <HAL_GetTick>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d901      	bls.n	800ae8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e086      	b.n	800af9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae8c:	4b45      	ldr	r3, [pc, #276]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1f0      	bne.n	800ae7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae98:	4b42      	ldr	r3, [pc, #264]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800ae9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	031b      	lsls	r3, r3, #12
 800aea6:	493f      	ldr	r1, [pc, #252]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	628b      	str	r3, [r1, #40]	; 0x28
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	025b      	lsls	r3, r3, #9
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	041b      	lsls	r3, r3, #16
 800aeca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aece:	431a      	orrs	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	061b      	lsls	r3, r3, #24
 800aed8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aedc:	4931      	ldr	r1, [pc, #196]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aee2:	4b30      	ldr	r3, [pc, #192]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800aee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	492d      	ldr	r1, [pc, #180]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800aef0:	4313      	orrs	r3, r2
 800aef2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aef4:	4b2b      	ldr	r3, [pc, #172]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	f023 0220 	bic.w	r2, r3, #32
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	4928      	ldr	r1, [pc, #160]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af02:	4313      	orrs	r3, r2
 800af04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af06:	4b27      	ldr	r3, [pc, #156]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	4a26      	ldr	r2, [pc, #152]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af0c:	f023 0310 	bic.w	r3, r3, #16
 800af10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af12:	4b24      	ldr	r3, [pc, #144]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af16:	4b24      	ldr	r3, [pc, #144]	; (800afa8 <RCCEx_PLL2_Config+0x160>)
 800af18:	4013      	ands	r3, r2
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	69d2      	ldr	r2, [r2, #28]
 800af1e:	00d2      	lsls	r2, r2, #3
 800af20:	4920      	ldr	r1, [pc, #128]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af22:	4313      	orrs	r3, r2
 800af24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af26:	4b1f      	ldr	r3, [pc, #124]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	4a1e      	ldr	r2, [pc, #120]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af2c:	f043 0310 	orr.w	r3, r3, #16
 800af30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d106      	bne.n	800af46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af38:	4b1a      	ldr	r3, [pc, #104]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4a19      	ldr	r2, [pc, #100]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af44:	e00f      	b.n	800af66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d106      	bne.n	800af5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af4c:	4b15      	ldr	r3, [pc, #84]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a14      	ldr	r2, [pc, #80]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af58:	e005      	b.n	800af66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af5a:	4b12      	ldr	r3, [pc, #72]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5e:	4a11      	ldr	r2, [pc, #68]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af66:	4b0f      	ldr	r3, [pc, #60]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a0e      	ldr	r2, [pc, #56]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af72:	f7f8 ff95 	bl	8003ea0 <HAL_GetTick>
 800af76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af78:	e008      	b.n	800af8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800af7a:	f7f8 ff91 	bl	8003ea0 <HAL_GetTick>
 800af7e:	4602      	mov	r2, r0
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	2b02      	cmp	r3, #2
 800af86:	d901      	bls.n	800af8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af88:	2303      	movs	r3, #3
 800af8a:	e006      	b.n	800af9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af8c:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <RCCEx_PLL2_Config+0x15c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0f0      	beq.n	800af7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	58024400 	.word	0x58024400
 800afa8:	ffff0007 	.word	0xffff0007

0800afac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afba:	4b53      	ldr	r3, [pc, #332]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	f003 0303 	and.w	r3, r3, #3
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d101      	bne.n	800afca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e099      	b.n	800b0fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800afca:	4b4f      	ldr	r3, [pc, #316]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a4e      	ldr	r2, [pc, #312]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800afd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afd6:	f7f8 ff63 	bl	8003ea0 <HAL_GetTick>
 800afda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afdc:	e008      	b.n	800aff0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800afde:	f7f8 ff5f 	bl	8003ea0 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d901      	bls.n	800aff0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e086      	b.n	800b0fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aff0:	4b45      	ldr	r3, [pc, #276]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1f0      	bne.n	800afde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800affc:	4b42      	ldr	r3, [pc, #264]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800affe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b000:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	051b      	lsls	r3, r3, #20
 800b00a:	493f      	ldr	r1, [pc, #252]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	628b      	str	r3, [r1, #40]	; 0x28
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	3b01      	subs	r3, #1
 800b016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	3b01      	subs	r3, #1
 800b020:	025b      	lsls	r3, r3, #9
 800b022:	b29b      	uxth	r3, r3
 800b024:	431a      	orrs	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	041b      	lsls	r3, r3, #16
 800b02e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b032:	431a      	orrs	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	3b01      	subs	r3, #1
 800b03a:	061b      	lsls	r3, r3, #24
 800b03c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b040:	4931      	ldr	r1, [pc, #196]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b042:	4313      	orrs	r3, r2
 800b044:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b046:	4b30      	ldr	r3, [pc, #192]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	492d      	ldr	r1, [pc, #180]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b054:	4313      	orrs	r3, r2
 800b056:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b058:	4b2b      	ldr	r3, [pc, #172]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	4928      	ldr	r1, [pc, #160]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b066:	4313      	orrs	r3, r2
 800b068:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b06a:	4b27      	ldr	r3, [pc, #156]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06e:	4a26      	ldr	r2, [pc, #152]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b076:	4b24      	ldr	r3, [pc, #144]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b07a:	4b24      	ldr	r3, [pc, #144]	; (800b10c <RCCEx_PLL3_Config+0x160>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	69d2      	ldr	r2, [r2, #28]
 800b082:	00d2      	lsls	r2, r2, #3
 800b084:	4920      	ldr	r1, [pc, #128]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b086:	4313      	orrs	r3, r2
 800b088:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b08a:	4b1f      	ldr	r3, [pc, #124]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08e:	4a1e      	ldr	r2, [pc, #120]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d106      	bne.n	800b0aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b09c:	4b1a      	ldr	r3, [pc, #104]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	4a19      	ldr	r2, [pc, #100]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b0a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0a8:	e00f      	b.n	800b0ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d106      	bne.n	800b0be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0b0:	4b15      	ldr	r3, [pc, #84]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	4a14      	ldr	r2, [pc, #80]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b0b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0bc:	e005      	b.n	800b0ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0be:	4b12      	ldr	r3, [pc, #72]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	4a11      	ldr	r2, [pc, #68]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b0c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0ca:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a0e      	ldr	r2, [pc, #56]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b0d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0d6:	f7f8 fee3 	bl	8003ea0 <HAL_GetTick>
 800b0da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0dc:	e008      	b.n	800b0f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b0de:	f7f8 fedf 	bl	8003ea0 <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d901      	bls.n	800b0f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e006      	b.n	800b0fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0f0:	4b05      	ldr	r3, [pc, #20]	; (800b108 <RCCEx_PLL3_Config+0x15c>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0f0      	beq.n	800b0de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	58024400 	.word	0x58024400
 800b10c:	ffff0007 	.word	0xffff0007

0800b110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e01d      	b.n	800b15e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7f8 f81a 	bl	8003170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3304      	adds	r3, #4
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f000 f97c 	bl	800b44c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68da      	ldr	r2, [r3, #12]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f042 0201 	orr.w	r2, r2, #1
 800b17e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	689a      	ldr	r2, [r3, #8]
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <HAL_TIM_Base_Start_IT+0x50>)
 800b188:	4013      	ands	r3, r2
 800b18a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b06      	cmp	r3, #6
 800b190:	d00b      	beq.n	800b1aa <HAL_TIM_Base_Start_IT+0x42>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b198:	d007      	beq.n	800b1aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f042 0201 	orr.w	r2, r2, #1
 800b1a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	00010007 	.word	0x00010007

0800b1bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d122      	bne.n	800b218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f003 0302 	and.w	r3, r3, #2
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d11b      	bne.n	800b218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f06f 0202 	mvn.w	r2, #2
 800b1e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	f003 0303 	and.w	r3, r3, #3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f905 	bl	800b40e <HAL_TIM_IC_CaptureCallback>
 800b204:	e005      	b.n	800b212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f8f7 	bl	800b3fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f908 	bl	800b422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	f003 0304 	and.w	r3, r3, #4
 800b222:	2b04      	cmp	r3, #4
 800b224:	d122      	bne.n	800b26c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b04      	cmp	r3, #4
 800b232:	d11b      	bne.n	800b26c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f06f 0204 	mvn.w	r2, #4
 800b23c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2202      	movs	r2, #2
 800b242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	699b      	ldr	r3, [r3, #24]
 800b24a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f8db 	bl	800b40e <HAL_TIM_IC_CaptureCallback>
 800b258:	e005      	b.n	800b266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f8cd 	bl	800b3fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f8de 	bl	800b422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	f003 0308 	and.w	r3, r3, #8
 800b276:	2b08      	cmp	r3, #8
 800b278:	d122      	bne.n	800b2c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f003 0308 	and.w	r3, r3, #8
 800b284:	2b08      	cmp	r3, #8
 800b286:	d11b      	bne.n	800b2c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f06f 0208 	mvn.w	r2, #8
 800b290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2204      	movs	r2, #4
 800b296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	f003 0303 	and.w	r3, r3, #3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f8b1 	bl	800b40e <HAL_TIM_IC_CaptureCallback>
 800b2ac:	e005      	b.n	800b2ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f8a3 	bl	800b3fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f8b4 	bl	800b422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	f003 0310 	and.w	r3, r3, #16
 800b2ca:	2b10      	cmp	r3, #16
 800b2cc:	d122      	bne.n	800b314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	f003 0310 	and.w	r3, r3, #16
 800b2d8:	2b10      	cmp	r3, #16
 800b2da:	d11b      	bne.n	800b314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f06f 0210 	mvn.w	r2, #16
 800b2e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f887 	bl	800b40e <HAL_TIM_IC_CaptureCallback>
 800b300:	e005      	b.n	800b30e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f879 	bl	800b3fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f88a 	bl	800b422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d10e      	bne.n	800b340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d107      	bne.n	800b340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f06f 0201 	mvn.w	r2, #1
 800b338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7f6 f880 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b34a:	2b80      	cmp	r3, #128	; 0x80
 800b34c:	d10e      	bne.n	800b36c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b358:	2b80      	cmp	r3, #128	; 0x80
 800b35a:	d107      	bne.n	800b36c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f99c 	bl	800b6a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b37a:	d10e      	bne.n	800b39a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b386:	2b80      	cmp	r3, #128	; 0x80
 800b388:	d107      	bne.n	800b39a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f98f 	bl	800b6b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a4:	2b40      	cmp	r3, #64	; 0x40
 800b3a6:	d10e      	bne.n	800b3c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b2:	2b40      	cmp	r3, #64	; 0x40
 800b3b4:	d107      	bne.n	800b3c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f838 	bl	800b436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	f003 0320 	and.w	r3, r3, #32
 800b3d0:	2b20      	cmp	r3, #32
 800b3d2:	d10e      	bne.n	800b3f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b20      	cmp	r3, #32
 800b3e0:	d107      	bne.n	800b3f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f06f 0220 	mvn.w	r2, #32
 800b3ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f94f 	bl	800b690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3f2:	bf00      	nop
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b40e:	b480      	push	{r7}
 800b410:	b083      	sub	sp, #12
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b42a:	bf00      	nop
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
	...

0800b44c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a40      	ldr	r2, [pc, #256]	; (800b560 <TIM_Base_SetConfig+0x114>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d013      	beq.n	800b48c <TIM_Base_SetConfig+0x40>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b46a:	d00f      	beq.n	800b48c <TIM_Base_SetConfig+0x40>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a3d      	ldr	r2, [pc, #244]	; (800b564 <TIM_Base_SetConfig+0x118>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d00b      	beq.n	800b48c <TIM_Base_SetConfig+0x40>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a3c      	ldr	r2, [pc, #240]	; (800b568 <TIM_Base_SetConfig+0x11c>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d007      	beq.n	800b48c <TIM_Base_SetConfig+0x40>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a3b      	ldr	r2, [pc, #236]	; (800b56c <TIM_Base_SetConfig+0x120>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d003      	beq.n	800b48c <TIM_Base_SetConfig+0x40>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a3a      	ldr	r2, [pc, #232]	; (800b570 <TIM_Base_SetConfig+0x124>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d108      	bne.n	800b49e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a2f      	ldr	r2, [pc, #188]	; (800b560 <TIM_Base_SetConfig+0x114>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d01f      	beq.n	800b4e6 <TIM_Base_SetConfig+0x9a>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ac:	d01b      	beq.n	800b4e6 <TIM_Base_SetConfig+0x9a>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a2c      	ldr	r2, [pc, #176]	; (800b564 <TIM_Base_SetConfig+0x118>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d017      	beq.n	800b4e6 <TIM_Base_SetConfig+0x9a>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a2b      	ldr	r2, [pc, #172]	; (800b568 <TIM_Base_SetConfig+0x11c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d013      	beq.n	800b4e6 <TIM_Base_SetConfig+0x9a>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a2a      	ldr	r2, [pc, #168]	; (800b56c <TIM_Base_SetConfig+0x120>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d00f      	beq.n	800b4e6 <TIM_Base_SetConfig+0x9a>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a29      	ldr	r2, [pc, #164]	; (800b570 <TIM_Base_SetConfig+0x124>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d00b      	beq.n	800b4e6 <TIM_Base_SetConfig+0x9a>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a28      	ldr	r2, [pc, #160]	; (800b574 <TIM_Base_SetConfig+0x128>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d007      	beq.n	800b4e6 <TIM_Base_SetConfig+0x9a>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a27      	ldr	r2, [pc, #156]	; (800b578 <TIM_Base_SetConfig+0x12c>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d003      	beq.n	800b4e6 <TIM_Base_SetConfig+0x9a>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a26      	ldr	r2, [pc, #152]	; (800b57c <TIM_Base_SetConfig+0x130>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d108      	bne.n	800b4f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	689a      	ldr	r2, [r3, #8]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a10      	ldr	r2, [pc, #64]	; (800b560 <TIM_Base_SetConfig+0x114>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d00f      	beq.n	800b544 <TIM_Base_SetConfig+0xf8>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a12      	ldr	r2, [pc, #72]	; (800b570 <TIM_Base_SetConfig+0x124>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d00b      	beq.n	800b544 <TIM_Base_SetConfig+0xf8>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a11      	ldr	r2, [pc, #68]	; (800b574 <TIM_Base_SetConfig+0x128>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d007      	beq.n	800b544 <TIM_Base_SetConfig+0xf8>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a10      	ldr	r2, [pc, #64]	; (800b578 <TIM_Base_SetConfig+0x12c>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d003      	beq.n	800b544 <TIM_Base_SetConfig+0xf8>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a0f      	ldr	r2, [pc, #60]	; (800b57c <TIM_Base_SetConfig+0x130>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d103      	bne.n	800b54c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	691a      	ldr	r2, [r3, #16]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	615a      	str	r2, [r3, #20]
}
 800b552:	bf00      	nop
 800b554:	3714      	adds	r7, #20
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	40010000 	.word	0x40010000
 800b564:	40000400 	.word	0x40000400
 800b568:	40000800 	.word	0x40000800
 800b56c:	40000c00 	.word	0x40000c00
 800b570:	40010400 	.word	0x40010400
 800b574:	40014000 	.word	0x40014000
 800b578:	40014400 	.word	0x40014400
 800b57c:	40014800 	.word	0x40014800

0800b580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b594:	2302      	movs	r3, #2
 800b596:	e068      	b.n	800b66a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a2e      	ldr	r2, [pc, #184]	; (800b678 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d004      	beq.n	800b5cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a2d      	ldr	r2, [pc, #180]	; (800b67c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d108      	bne.n	800b5de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b5d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a1e      	ldr	r2, [pc, #120]	; (800b678 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d01d      	beq.n	800b63e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b60a:	d018      	beq.n	800b63e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a1b      	ldr	r2, [pc, #108]	; (800b680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d013      	beq.n	800b63e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a1a      	ldr	r2, [pc, #104]	; (800b684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d00e      	beq.n	800b63e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a18      	ldr	r2, [pc, #96]	; (800b688 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d009      	beq.n	800b63e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a13      	ldr	r2, [pc, #76]	; (800b67c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d004      	beq.n	800b63e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a14      	ldr	r2, [pc, #80]	; (800b68c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d10c      	bne.n	800b658 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	40010000 	.word	0x40010000
 800b67c:	40010400 	.word	0x40010400
 800b680:	40000400 	.word	0x40000400
 800b684:	40000800 	.word	0x40000800
 800b688:	40000c00 	.word	0x40000c00
 800b68c:	40001800 	.word	0x40001800

0800b690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e042      	b.n	800b764 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d106      	bne.n	800b6f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7f7 fd65 	bl	80031c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2224      	movs	r2, #36	; 0x24
 800b6fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f022 0201 	bic.w	r2, r2, #1
 800b70c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fc3a 	bl	800bf88 <UART_SetConfig>
 800b714:	4603      	mov	r3, r0
 800b716:	2b01      	cmp	r3, #1
 800b718:	d101      	bne.n	800b71e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	e022      	b.n	800b764 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f002 fdac 	bl	800e284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b73a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689a      	ldr	r2, [r3, #8]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b74a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f042 0201 	orr.w	r2, r2, #1
 800b75a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f002 fe33 	bl	800e3c8 <UART_CheckIdleState>
 800b762:	4603      	mov	r3, r0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08a      	sub	sp, #40	; 0x28
 800b770:	af02      	add	r7, sp, #8
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4613      	mov	r3, r2
 800b77a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b782:	2b20      	cmp	r3, #32
 800b784:	f040 8083 	bne.w	800b88e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <HAL_UART_Transmit+0x28>
 800b78e:	88fb      	ldrh	r3, [r7, #6]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e07b      	b.n	800b890 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d101      	bne.n	800b7a6 <HAL_UART_Transmit+0x3a>
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	e074      	b.n	800b890 <HAL_UART_Transmit+0x124>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2221      	movs	r2, #33	; 0x21
 800b7ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b7be:	f7f8 fb6f 	bl	8003ea0 <HAL_GetTick>
 800b7c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	88fa      	ldrh	r2, [r7, #6]
 800b7c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	88fa      	ldrh	r2, [r7, #6]
 800b7d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7dc:	d108      	bne.n	800b7f0 <HAL_UART_Transmit+0x84>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d104      	bne.n	800b7f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	61bb      	str	r3, [r7, #24]
 800b7ee:	e003      	b.n	800b7f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b7f8:	e02c      	b.n	800b854 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2200      	movs	r2, #0
 800b802:	2180      	movs	r1, #128	; 0x80
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f002 fe27 	bl	800e458 <UART_WaitOnFlagUntilTimeout>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b810:	2303      	movs	r3, #3
 800b812:	e03d      	b.n	800b890 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10b      	bne.n	800b832 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b828:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	3302      	adds	r3, #2
 800b82e:	61bb      	str	r3, [r7, #24]
 800b830:	e007      	b.n	800b842 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	781a      	ldrb	r2, [r3, #0]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	3301      	adds	r3, #1
 800b840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b848:	b29b      	uxth	r3, r3
 800b84a:	3b01      	subs	r3, #1
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1cc      	bne.n	800b7fa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	2200      	movs	r2, #0
 800b868:	2140      	movs	r1, #64	; 0x40
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f002 fdf4 	bl	800e458 <UART_WaitOnFlagUntilTimeout>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e00a      	b.n	800b890 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2220      	movs	r2, #32
 800b87e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	e000      	b.n	800b890 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b88e:	2302      	movs	r3, #2
  }
}
 800b890:	4618      	mov	r0, r3
 800b892:	3720      	adds	r7, #32
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8ac:	2b20      	cmp	r3, #32
 800b8ae:	d168      	bne.n	800b982 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <HAL_UART_Transmit_IT+0x24>
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e061      	b.n	800b984 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d101      	bne.n	800b8ce <HAL_UART_Transmit_IT+0x36>
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	e05a      	b.n	800b984 <HAL_UART_Transmit_IT+0xec>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	88fa      	ldrh	r2, [r7, #6]
 800b8e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	88fa      	ldrh	r2, [r7, #6]
 800b8e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2221      	movs	r2, #33	; 0x21
 800b8fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90a:	d11c      	bne.n	800b946 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b914:	d107      	bne.n	800b926 <HAL_UART_Transmit_IT+0x8e>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d103      	bne.n	800b926 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	4a1b      	ldr	r2, [pc, #108]	; (800b990 <HAL_UART_Transmit_IT+0xf8>)
 800b922:	671a      	str	r2, [r3, #112]	; 0x70
 800b924:	e002      	b.n	800b92c <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	4a1a      	ldr	r2, [pc, #104]	; (800b994 <HAL_UART_Transmit_IT+0xfc>)
 800b92a:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689a      	ldr	r2, [r3, #8]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b942:	609a      	str	r2, [r3, #8]
 800b944:	e01b      	b.n	800b97e <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b94e:	d107      	bne.n	800b960 <HAL_UART_Transmit_IT+0xc8>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d103      	bne.n	800b960 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4a0f      	ldr	r2, [pc, #60]	; (800b998 <HAL_UART_Transmit_IT+0x100>)
 800b95c:	671a      	str	r2, [r3, #112]	; 0x70
 800b95e:	e002      	b.n	800b966 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a0e      	ldr	r2, [pc, #56]	; (800b99c <HAL_UART_Transmit_IT+0x104>)
 800b964:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b97c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	e000      	b.n	800b984 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800b982:	2302      	movs	r3, #2
  }
}
 800b984:	4618      	mov	r0, r3
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	0800e897 	.word	0x0800e897
 800b994:	0800e7fd 	.word	0x0800e7fd
 800b998:	0800e77f 	.word	0x0800e77f
 800b99c:	0800e70b 	.word	0x0800e70b

0800b9a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9b4:	2b20      	cmp	r3, #32
 800b9b6:	f040 80bc 	bne.w	800bb32 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <HAL_UART_Receive_IT+0x26>
 800b9c0:	88fb      	ldrh	r3, [r7, #6]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d101      	bne.n	800b9ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e0b4      	b.n	800bb34 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <HAL_UART_Receive_IT+0x38>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e0ad      	b.n	800bb34 <HAL_UART_Receive_IT+0x194>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	88fa      	ldrh	r2, [r7, #6]
 800b9ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	88fa      	ldrh	r2, [r7, #6]
 800b9f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba04:	d10e      	bne.n	800ba24 <HAL_UART_Receive_IT+0x84>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d105      	bne.n	800ba1a <HAL_UART_Receive_IT+0x7a>
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ba14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba18:	e02d      	b.n	800ba76 <HAL_UART_Receive_IT+0xd6>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	22ff      	movs	r2, #255	; 0xff
 800ba1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba22:	e028      	b.n	800ba76 <HAL_UART_Receive_IT+0xd6>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10d      	bne.n	800ba48 <HAL_UART_Receive_IT+0xa8>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d104      	bne.n	800ba3e <HAL_UART_Receive_IT+0x9e>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	22ff      	movs	r2, #255	; 0xff
 800ba38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba3c:	e01b      	b.n	800ba76 <HAL_UART_Receive_IT+0xd6>
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	227f      	movs	r2, #127	; 0x7f
 800ba42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba46:	e016      	b.n	800ba76 <HAL_UART_Receive_IT+0xd6>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba50:	d10d      	bne.n	800ba6e <HAL_UART_Receive_IT+0xce>
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d104      	bne.n	800ba64 <HAL_UART_Receive_IT+0xc4>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	227f      	movs	r2, #127	; 0x7f
 800ba5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba62:	e008      	b.n	800ba76 <HAL_UART_Receive_IT+0xd6>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	223f      	movs	r2, #63	; 0x3f
 800ba68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba6c:	e003      	b.n	800ba76 <HAL_UART_Receive_IT+0xd6>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2222      	movs	r2, #34	; 0x22
 800ba82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f042 0201 	orr.w	r2, r2, #1
 800ba94:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba9e:	d12a      	bne.n	800baf6 <HAL_UART_Receive_IT+0x156>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800baa6:	88fa      	ldrh	r2, [r7, #6]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d324      	bcc.n	800baf6 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bab4:	d107      	bne.n	800bac6 <HAL_UART_Receive_IT+0x126>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d103      	bne.n	800bac6 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4a1f      	ldr	r2, [pc, #124]	; (800bb40 <HAL_UART_Receive_IT+0x1a0>)
 800bac2:	66da      	str	r2, [r3, #108]	; 0x6c
 800bac4:	e002      	b.n	800bacc <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4a1e      	ldr	r2, [pc, #120]	; (800bb44 <HAL_UART_Receive_IT+0x1a4>)
 800baca:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bae2:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	689a      	ldr	r2, [r3, #8]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800baf2:	609a      	str	r2, [r3, #8]
 800baf4:	e01b      	b.n	800bb2e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bafe:	d107      	bne.n	800bb10 <HAL_UART_Receive_IT+0x170>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d103      	bne.n	800bb10 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4a0f      	ldr	r2, [pc, #60]	; (800bb48 <HAL_UART_Receive_IT+0x1a8>)
 800bb0c:	66da      	str	r2, [r3, #108]	; 0x6c
 800bb0e:	e002      	b.n	800bb16 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a0e      	ldr	r2, [pc, #56]	; (800bb4c <HAL_UART_Receive_IT+0x1ac>)
 800bb14:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800bb2c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e000      	b.n	800bb34 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800bb32:	2302      	movs	r3, #2
  }
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	0800ebcd 	.word	0x0800ebcd
 800bb44:	0800eac5 	.word	0x0800eac5
 800bb48:	0800ea19 	.word	0x0800ea19
 800bb4c:	0800e96f 	.word	0x0800e96f

0800bb50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb64:	2b20      	cmp	r3, #32
 800bb66:	d170      	bne.n	800bc4a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d002      	beq.n	800bb74 <HAL_UART_Receive_DMA+0x24>
 800bb6e:	88fb      	ldrh	r3, [r7, #6]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e069      	b.n	800bc4c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d101      	bne.n	800bb86 <HAL_UART_Receive_DMA+0x36>
 800bb82:	2302      	movs	r3, #2
 800bb84:	e062      	b.n	800bc4c <HAL_UART_Receive_DMA+0xfc>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	88fa      	ldrh	r2, [r7, #6]
 800bb98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2222      	movs	r2, #34	; 0x22
 800bba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d02c      	beq.n	800bc0e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbb8:	4a26      	ldr	r2, [pc, #152]	; (800bc54 <HAL_UART_Receive_DMA+0x104>)
 800bbba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbc0:	4a25      	ldr	r2, [pc, #148]	; (800bc58 <HAL_UART_Receive_DMA+0x108>)
 800bbc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbc8:	4a24      	ldr	r2, [pc, #144]	; (800bc5c <HAL_UART_Receive_DMA+0x10c>)
 800bbca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3324      	adds	r3, #36	; 0x24
 800bbde:	4619      	mov	r1, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	88fb      	ldrh	r3, [r7, #6]
 800bbe8:	f7f9 ff98 	bl	8005b1c <HAL_DMA_Start_IT>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00d      	beq.n	800bc0e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2210      	movs	r2, #16
 800bbf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e01e      	b.n	800bc4c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc24:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f042 0201 	orr.w	r2, r2, #1
 800bc34:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc44:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	e000      	b.n	800bc4c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800bc4a:	2302      	movs	r3, #2
  }
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	0800e5dd 	.word	0x0800e5dd
 800bc58:	0800e643 	.word	0x0800e643
 800bc5c:	0800e65f 	.word	0x0800e65f

0800bc60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bc80:	69fa      	ldr	r2, [r7, #28]
 800bc82:	f640 030f 	movw	r3, #2063	; 0x80f
 800bc86:	4013      	ands	r3, r2
 800bc88:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d118      	bne.n	800bcc2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	f003 0320 	and.w	r3, r3, #32
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d013      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	f003 0320 	and.w	r3, r3, #32
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d104      	bne.n	800bcae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d009      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f000 8145 	beq.w	800bf42 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	4798      	blx	r3
      }
      return;
 800bcc0:	e13f      	b.n	800bf42 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 80e8 	beq.w	800be9a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	4ba1      	ldr	r3, [pc, #644]	; (800bf54 <HAL_UART_IRQHandler+0x2f4>)
 800bcce:	4013      	ands	r3, r2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d105      	bne.n	800bce0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bcd4:	69ba      	ldr	r2, [r7, #24]
 800bcd6:	4ba0      	ldr	r3, [pc, #640]	; (800bf58 <HAL_UART_IRQHandler+0x2f8>)
 800bcd8:	4013      	ands	r3, r2
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 80dd 	beq.w	800be9a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d010      	beq.n	800bd0c <HAL_UART_IRQHandler+0xac>
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd02:	f043 0201 	orr.w	r2, r3, #1
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	f003 0302 	and.w	r3, r3, #2
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d010      	beq.n	800bd38 <HAL_UART_IRQHandler+0xd8>
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	f003 0301 	and.w	r3, r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00b      	beq.n	800bd38 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2202      	movs	r2, #2
 800bd26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2e:	f043 0204 	orr.w	r2, r3, #4
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	f003 0304 	and.w	r3, r3, #4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d010      	beq.n	800bd64 <HAL_UART_IRQHandler+0x104>
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00b      	beq.n	800bd64 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2204      	movs	r2, #4
 800bd52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd5a:	f043 0202 	orr.w	r2, r3, #2
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	f003 0308 	and.w	r3, r3, #8
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d015      	beq.n	800bd9a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	f003 0320 	and.w	r3, r3, #32
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d104      	bne.n	800bd82 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	4b76      	ldr	r3, [pc, #472]	; (800bf54 <HAL_UART_IRQHandler+0x2f4>)
 800bd7c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00b      	beq.n	800bd9a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2208      	movs	r2, #8
 800bd88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd90:	f043 0208 	orr.w	r2, r3, #8
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d011      	beq.n	800bdc8 <HAL_UART_IRQHandler+0x168>
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00c      	beq.n	800bdc8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdbe:	f043 0220 	orr.w	r2, r3, #32
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 80b9 	beq.w	800bf46 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	f003 0320 	and.w	r3, r3, #32
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d011      	beq.n	800be02 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d104      	bne.n	800bdf2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d007      	beq.n	800be02 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d003      	beq.n	800be02 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be14:	2b40      	cmp	r3, #64	; 0x40
 800be16:	d004      	beq.n	800be22 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d031      	beq.n	800be86 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f002 fbb6 	bl	800e594 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be32:	2b40      	cmp	r3, #64	; 0x40
 800be34:	d123      	bne.n	800be7e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	689a      	ldr	r2, [r3, #8]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d013      	beq.n	800be76 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be52:	4a42      	ldr	r2, [pc, #264]	; (800bf5c <HAL_UART_IRQHandler+0x2fc>)
 800be54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fa f8c8 	bl	8005ff0 <HAL_DMA_Abort_IT>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d017      	beq.n	800be96 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800be70:	4610      	mov	r0, r2
 800be72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be74:	e00f      	b.n	800be96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f87c 	bl	800bf74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be7c:	e00b      	b.n	800be96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f878 	bl	800bf74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be84:	e007      	b.n	800be96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f874 	bl	800bf74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800be94:	e057      	b.n	800bf46 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be96:	bf00      	nop
    return;
 800be98:	e055      	b.n	800bf46 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00d      	beq.n	800bec0 <HAL_UART_IRQHandler+0x260>
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d008      	beq.n	800bec0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800beb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f002 ff0b 	bl	800ecd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bebe:	e045      	b.n	800bf4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d012      	beq.n	800bef0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d104      	bne.n	800bede <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d008      	beq.n	800bef0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d031      	beq.n	800bf4a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	4798      	blx	r3
    }
    return;
 800beee:	e02c      	b.n	800bf4a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d008      	beq.n	800bf0c <HAL_UART_IRQHandler+0x2ac>
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d003      	beq.n	800bf0c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f002 fd18 	bl	800e93a <UART_EndTransmit_IT>
    return;
 800bf0a:	e01f      	b.n	800bf4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d008      	beq.n	800bf28 <HAL_UART_IRQHandler+0x2c8>
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f002 feeb 	bl	800ecfc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf26:	e011      	b.n	800bf4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00c      	beq.n	800bf4c <HAL_UART_IRQHandler+0x2ec>
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	da09      	bge.n	800bf4c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f002 fed5 	bl	800ece8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf3e:	bf00      	nop
 800bf40:	e004      	b.n	800bf4c <HAL_UART_IRQHandler+0x2ec>
      return;
 800bf42:	bf00      	nop
 800bf44:	e002      	b.n	800bf4c <HAL_UART_IRQHandler+0x2ec>
    return;
 800bf46:	bf00      	nop
 800bf48:	e000      	b.n	800bf4c <HAL_UART_IRQHandler+0x2ec>
    return;
 800bf4a:	bf00      	nop
  }
}
 800bf4c:	3720      	adds	r7, #32
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	10000001 	.word	0x10000001
 800bf58:	04000120 	.word	0x04000120
 800bf5c:	0800e6df 	.word	0x0800e6df

0800bf60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bf8c:	b090      	sub	sp, #64	; 0x40
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bf92:	2300      	movs	r3, #0
 800bf94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf96:	2300      	movs	r3, #0
 800bf98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	689a      	ldr	r2, [r3, #8]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	431a      	orrs	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	4bc1      	ldr	r3, [pc, #772]	; (800c2d0 <UART_SetConfig+0x348>)
 800bfca:	4013      	ands	r3, r2
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	6812      	ldr	r2, [r2, #0]
 800bfd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	430a      	orrs	r2, r1
 800bfea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4ab7      	ldr	r2, [pc, #732]	; (800c2d4 <UART_SetConfig+0x34c>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d004      	beq.n	800c006 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c002:	4313      	orrs	r3, r2
 800c004:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	4bb2      	ldr	r3, [pc, #712]	; (800c2d8 <UART_SetConfig+0x350>)
 800c00e:	4013      	ands	r3, r2
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	6812      	ldr	r2, [r2, #0]
 800c014:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c016:	430b      	orrs	r3, r1
 800c018:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c020:	f023 010f 	bic.w	r1, r3, #15
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	430a      	orrs	r2, r1
 800c02e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4aa9      	ldr	r2, [pc, #676]	; (800c2dc <UART_SetConfig+0x354>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d177      	bne.n	800c12a <UART_SetConfig+0x1a2>
 800c03a:	4ba9      	ldr	r3, [pc, #676]	; (800c2e0 <UART_SetConfig+0x358>)
 800c03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c03e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c042:	2b28      	cmp	r3, #40	; 0x28
 800c044:	d86c      	bhi.n	800c120 <UART_SetConfig+0x198>
 800c046:	a201      	add	r2, pc, #4	; (adr r2, 800c04c <UART_SetConfig+0xc4>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c0f1 	.word	0x0800c0f1
 800c050:	0800c121 	.word	0x0800c121
 800c054:	0800c121 	.word	0x0800c121
 800c058:	0800c121 	.word	0x0800c121
 800c05c:	0800c121 	.word	0x0800c121
 800c060:	0800c121 	.word	0x0800c121
 800c064:	0800c121 	.word	0x0800c121
 800c068:	0800c121 	.word	0x0800c121
 800c06c:	0800c0f9 	.word	0x0800c0f9
 800c070:	0800c121 	.word	0x0800c121
 800c074:	0800c121 	.word	0x0800c121
 800c078:	0800c121 	.word	0x0800c121
 800c07c:	0800c121 	.word	0x0800c121
 800c080:	0800c121 	.word	0x0800c121
 800c084:	0800c121 	.word	0x0800c121
 800c088:	0800c121 	.word	0x0800c121
 800c08c:	0800c101 	.word	0x0800c101
 800c090:	0800c121 	.word	0x0800c121
 800c094:	0800c121 	.word	0x0800c121
 800c098:	0800c121 	.word	0x0800c121
 800c09c:	0800c121 	.word	0x0800c121
 800c0a0:	0800c121 	.word	0x0800c121
 800c0a4:	0800c121 	.word	0x0800c121
 800c0a8:	0800c121 	.word	0x0800c121
 800c0ac:	0800c109 	.word	0x0800c109
 800c0b0:	0800c121 	.word	0x0800c121
 800c0b4:	0800c121 	.word	0x0800c121
 800c0b8:	0800c121 	.word	0x0800c121
 800c0bc:	0800c121 	.word	0x0800c121
 800c0c0:	0800c121 	.word	0x0800c121
 800c0c4:	0800c121 	.word	0x0800c121
 800c0c8:	0800c121 	.word	0x0800c121
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	0800c121 	.word	0x0800c121
 800c0d4:	0800c121 	.word	0x0800c121
 800c0d8:	0800c121 	.word	0x0800c121
 800c0dc:	0800c121 	.word	0x0800c121
 800c0e0:	0800c121 	.word	0x0800c121
 800c0e4:	0800c121 	.word	0x0800c121
 800c0e8:	0800c121 	.word	0x0800c121
 800c0ec:	0800c119 	.word	0x0800c119
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0f6:	e233      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c0f8:	2304      	movs	r3, #4
 800c0fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0fe:	e22f      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c100:	2308      	movs	r3, #8
 800c102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c106:	e22b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c108:	2310      	movs	r3, #16
 800c10a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c10e:	e227      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c110:	2320      	movs	r3, #32
 800c112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c116:	e223      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c118:	2340      	movs	r3, #64	; 0x40
 800c11a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c11e:	e21f      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c120:	2380      	movs	r3, #128	; 0x80
 800c122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c126:	bf00      	nop
 800c128:	e21a      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a6d      	ldr	r2, [pc, #436]	; (800c2e4 <UART_SetConfig+0x35c>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d132      	bne.n	800c19a <UART_SetConfig+0x212>
 800c134:	4b6a      	ldr	r3, [pc, #424]	; (800c2e0 <UART_SetConfig+0x358>)
 800c136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c138:	f003 0307 	and.w	r3, r3, #7
 800c13c:	2b05      	cmp	r3, #5
 800c13e:	d827      	bhi.n	800c190 <UART_SetConfig+0x208>
 800c140:	a201      	add	r2, pc, #4	; (adr r2, 800c148 <UART_SetConfig+0x1c0>)
 800c142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c146:	bf00      	nop
 800c148:	0800c161 	.word	0x0800c161
 800c14c:	0800c169 	.word	0x0800c169
 800c150:	0800c171 	.word	0x0800c171
 800c154:	0800c179 	.word	0x0800c179
 800c158:	0800c181 	.word	0x0800c181
 800c15c:	0800c189 	.word	0x0800c189
 800c160:	2300      	movs	r3, #0
 800c162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c166:	e1fb      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c168:	2304      	movs	r3, #4
 800c16a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c16e:	e1f7      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c170:	2308      	movs	r3, #8
 800c172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c176:	e1f3      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c178:	2310      	movs	r3, #16
 800c17a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c17e:	e1ef      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c180:	2320      	movs	r3, #32
 800c182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c186:	e1eb      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c188:	2340      	movs	r3, #64	; 0x40
 800c18a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c18e:	e1e7      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c190:	2380      	movs	r3, #128	; 0x80
 800c192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c196:	bf00      	nop
 800c198:	e1e2      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a52      	ldr	r2, [pc, #328]	; (800c2e8 <UART_SetConfig+0x360>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d132      	bne.n	800c20a <UART_SetConfig+0x282>
 800c1a4:	4b4e      	ldr	r3, [pc, #312]	; (800c2e0 <UART_SetConfig+0x358>)
 800c1a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a8:	f003 0307 	and.w	r3, r3, #7
 800c1ac:	2b05      	cmp	r3, #5
 800c1ae:	d827      	bhi.n	800c200 <UART_SetConfig+0x278>
 800c1b0:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <UART_SetConfig+0x230>)
 800c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b6:	bf00      	nop
 800c1b8:	0800c1d1 	.word	0x0800c1d1
 800c1bc:	0800c1d9 	.word	0x0800c1d9
 800c1c0:	0800c1e1 	.word	0x0800c1e1
 800c1c4:	0800c1e9 	.word	0x0800c1e9
 800c1c8:	0800c1f1 	.word	0x0800c1f1
 800c1cc:	0800c1f9 	.word	0x0800c1f9
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1d6:	e1c3      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c1d8:	2304      	movs	r3, #4
 800c1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1de:	e1bf      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c1e0:	2308      	movs	r3, #8
 800c1e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1e6:	e1bb      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c1e8:	2310      	movs	r3, #16
 800c1ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1ee:	e1b7      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c1f0:	2320      	movs	r3, #32
 800c1f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1f6:	e1b3      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c1f8:	2340      	movs	r3, #64	; 0x40
 800c1fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1fe:	e1af      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c200:	2380      	movs	r3, #128	; 0x80
 800c202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c206:	bf00      	nop
 800c208:	e1aa      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a37      	ldr	r2, [pc, #220]	; (800c2ec <UART_SetConfig+0x364>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d132      	bne.n	800c27a <UART_SetConfig+0x2f2>
 800c214:	4b32      	ldr	r3, [pc, #200]	; (800c2e0 <UART_SetConfig+0x358>)
 800c216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c218:	f003 0307 	and.w	r3, r3, #7
 800c21c:	2b05      	cmp	r3, #5
 800c21e:	d827      	bhi.n	800c270 <UART_SetConfig+0x2e8>
 800c220:	a201      	add	r2, pc, #4	; (adr r2, 800c228 <UART_SetConfig+0x2a0>)
 800c222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c226:	bf00      	nop
 800c228:	0800c241 	.word	0x0800c241
 800c22c:	0800c249 	.word	0x0800c249
 800c230:	0800c251 	.word	0x0800c251
 800c234:	0800c259 	.word	0x0800c259
 800c238:	0800c261 	.word	0x0800c261
 800c23c:	0800c269 	.word	0x0800c269
 800c240:	2300      	movs	r3, #0
 800c242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c246:	e18b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c248:	2304      	movs	r3, #4
 800c24a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c24e:	e187      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c250:	2308      	movs	r3, #8
 800c252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c256:	e183      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c258:	2310      	movs	r3, #16
 800c25a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c25e:	e17f      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c260:	2320      	movs	r3, #32
 800c262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c266:	e17b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c268:	2340      	movs	r3, #64	; 0x40
 800c26a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c26e:	e177      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c270:	2380      	movs	r3, #128	; 0x80
 800c272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c276:	bf00      	nop
 800c278:	e172      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a1c      	ldr	r2, [pc, #112]	; (800c2f0 <UART_SetConfig+0x368>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d144      	bne.n	800c30e <UART_SetConfig+0x386>
 800c284:	4b16      	ldr	r3, [pc, #88]	; (800c2e0 <UART_SetConfig+0x358>)
 800c286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c288:	f003 0307 	and.w	r3, r3, #7
 800c28c:	2b05      	cmp	r3, #5
 800c28e:	d839      	bhi.n	800c304 <UART_SetConfig+0x37c>
 800c290:	a201      	add	r2, pc, #4	; (adr r2, 800c298 <UART_SetConfig+0x310>)
 800c292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c296:	bf00      	nop
 800c298:	0800c2b1 	.word	0x0800c2b1
 800c29c:	0800c2b9 	.word	0x0800c2b9
 800c2a0:	0800c2c1 	.word	0x0800c2c1
 800c2a4:	0800c2c9 	.word	0x0800c2c9
 800c2a8:	0800c2f5 	.word	0x0800c2f5
 800c2ac:	0800c2fd 	.word	0x0800c2fd
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2b6:	e153      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2be:	e14f      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c2c0:	2308      	movs	r3, #8
 800c2c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2c6:	e14b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c2c8:	2310      	movs	r3, #16
 800c2ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2ce:	e147      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c2d0:	cfff69f3 	.word	0xcfff69f3
 800c2d4:	58000c00 	.word	0x58000c00
 800c2d8:	11fff4ff 	.word	0x11fff4ff
 800c2dc:	40011000 	.word	0x40011000
 800c2e0:	58024400 	.word	0x58024400
 800c2e4:	40004400 	.word	0x40004400
 800c2e8:	40004800 	.word	0x40004800
 800c2ec:	40004c00 	.word	0x40004c00
 800c2f0:	40005000 	.word	0x40005000
 800c2f4:	2320      	movs	r3, #32
 800c2f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2fa:	e131      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c2fc:	2340      	movs	r3, #64	; 0x40
 800c2fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c302:	e12d      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c304:	2380      	movs	r3, #128	; 0x80
 800c306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c30a:	bf00      	nop
 800c30c:	e128      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4ac3      	ldr	r2, [pc, #780]	; (800c620 <UART_SetConfig+0x698>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d178      	bne.n	800c40a <UART_SetConfig+0x482>
 800c318:	4bc2      	ldr	r3, [pc, #776]	; (800c624 <UART_SetConfig+0x69c>)
 800c31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c320:	2b28      	cmp	r3, #40	; 0x28
 800c322:	d86d      	bhi.n	800c400 <UART_SetConfig+0x478>
 800c324:	a201      	add	r2, pc, #4	; (adr r2, 800c32c <UART_SetConfig+0x3a4>)
 800c326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32a:	bf00      	nop
 800c32c:	0800c3d1 	.word	0x0800c3d1
 800c330:	0800c401 	.word	0x0800c401
 800c334:	0800c401 	.word	0x0800c401
 800c338:	0800c401 	.word	0x0800c401
 800c33c:	0800c401 	.word	0x0800c401
 800c340:	0800c401 	.word	0x0800c401
 800c344:	0800c401 	.word	0x0800c401
 800c348:	0800c401 	.word	0x0800c401
 800c34c:	0800c3d9 	.word	0x0800c3d9
 800c350:	0800c401 	.word	0x0800c401
 800c354:	0800c401 	.word	0x0800c401
 800c358:	0800c401 	.word	0x0800c401
 800c35c:	0800c401 	.word	0x0800c401
 800c360:	0800c401 	.word	0x0800c401
 800c364:	0800c401 	.word	0x0800c401
 800c368:	0800c401 	.word	0x0800c401
 800c36c:	0800c3e1 	.word	0x0800c3e1
 800c370:	0800c401 	.word	0x0800c401
 800c374:	0800c401 	.word	0x0800c401
 800c378:	0800c401 	.word	0x0800c401
 800c37c:	0800c401 	.word	0x0800c401
 800c380:	0800c401 	.word	0x0800c401
 800c384:	0800c401 	.word	0x0800c401
 800c388:	0800c401 	.word	0x0800c401
 800c38c:	0800c3e9 	.word	0x0800c3e9
 800c390:	0800c401 	.word	0x0800c401
 800c394:	0800c401 	.word	0x0800c401
 800c398:	0800c401 	.word	0x0800c401
 800c39c:	0800c401 	.word	0x0800c401
 800c3a0:	0800c401 	.word	0x0800c401
 800c3a4:	0800c401 	.word	0x0800c401
 800c3a8:	0800c401 	.word	0x0800c401
 800c3ac:	0800c3f1 	.word	0x0800c3f1
 800c3b0:	0800c401 	.word	0x0800c401
 800c3b4:	0800c401 	.word	0x0800c401
 800c3b8:	0800c401 	.word	0x0800c401
 800c3bc:	0800c401 	.word	0x0800c401
 800c3c0:	0800c401 	.word	0x0800c401
 800c3c4:	0800c401 	.word	0x0800c401
 800c3c8:	0800c401 	.word	0x0800c401
 800c3cc:	0800c3f9 	.word	0x0800c3f9
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3d6:	e0c3      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c3d8:	2304      	movs	r3, #4
 800c3da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3de:	e0bf      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c3e0:	2308      	movs	r3, #8
 800c3e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3e6:	e0bb      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c3e8:	2310      	movs	r3, #16
 800c3ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3ee:	e0b7      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c3f0:	2320      	movs	r3, #32
 800c3f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3f6:	e0b3      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c3f8:	2340      	movs	r3, #64	; 0x40
 800c3fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c3fe:	e0af      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c400:	2380      	movs	r3, #128	; 0x80
 800c402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c406:	bf00      	nop
 800c408:	e0aa      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a86      	ldr	r2, [pc, #536]	; (800c628 <UART_SetConfig+0x6a0>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d132      	bne.n	800c47a <UART_SetConfig+0x4f2>
 800c414:	4b83      	ldr	r3, [pc, #524]	; (800c624 <UART_SetConfig+0x69c>)
 800c416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c418:	f003 0307 	and.w	r3, r3, #7
 800c41c:	2b05      	cmp	r3, #5
 800c41e:	d827      	bhi.n	800c470 <UART_SetConfig+0x4e8>
 800c420:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <UART_SetConfig+0x4a0>)
 800c422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c426:	bf00      	nop
 800c428:	0800c441 	.word	0x0800c441
 800c42c:	0800c449 	.word	0x0800c449
 800c430:	0800c451 	.word	0x0800c451
 800c434:	0800c459 	.word	0x0800c459
 800c438:	0800c461 	.word	0x0800c461
 800c43c:	0800c469 	.word	0x0800c469
 800c440:	2300      	movs	r3, #0
 800c442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c446:	e08b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c448:	2304      	movs	r3, #4
 800c44a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c44e:	e087      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c450:	2308      	movs	r3, #8
 800c452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c456:	e083      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c458:	2310      	movs	r3, #16
 800c45a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c45e:	e07f      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c460:	2320      	movs	r3, #32
 800c462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c466:	e07b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c468:	2340      	movs	r3, #64	; 0x40
 800c46a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c46e:	e077      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c470:	2380      	movs	r3, #128	; 0x80
 800c472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c476:	bf00      	nop
 800c478:	e072      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a6b      	ldr	r2, [pc, #428]	; (800c62c <UART_SetConfig+0x6a4>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d132      	bne.n	800c4ea <UART_SetConfig+0x562>
 800c484:	4b67      	ldr	r3, [pc, #412]	; (800c624 <UART_SetConfig+0x69c>)
 800c486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c488:	f003 0307 	and.w	r3, r3, #7
 800c48c:	2b05      	cmp	r3, #5
 800c48e:	d827      	bhi.n	800c4e0 <UART_SetConfig+0x558>
 800c490:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <UART_SetConfig+0x510>)
 800c492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c496:	bf00      	nop
 800c498:	0800c4b1 	.word	0x0800c4b1
 800c49c:	0800c4b9 	.word	0x0800c4b9
 800c4a0:	0800c4c1 	.word	0x0800c4c1
 800c4a4:	0800c4c9 	.word	0x0800c4c9
 800c4a8:	0800c4d1 	.word	0x0800c4d1
 800c4ac:	0800c4d9 	.word	0x0800c4d9
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4b6:	e053      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c4b8:	2304      	movs	r3, #4
 800c4ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4be:	e04f      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c4c0:	2308      	movs	r3, #8
 800c4c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4c6:	e04b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c4c8:	2310      	movs	r3, #16
 800c4ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4ce:	e047      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c4d0:	2320      	movs	r3, #32
 800c4d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4d6:	e043      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c4d8:	2340      	movs	r3, #64	; 0x40
 800c4da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4de:	e03f      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c4e0:	2380      	movs	r3, #128	; 0x80
 800c4e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c4e6:	bf00      	nop
 800c4e8:	e03a      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a50      	ldr	r2, [pc, #320]	; (800c630 <UART_SetConfig+0x6a8>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d132      	bne.n	800c55a <UART_SetConfig+0x5d2>
 800c4f4:	4b4b      	ldr	r3, [pc, #300]	; (800c624 <UART_SetConfig+0x69c>)
 800c4f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f8:	f003 0307 	and.w	r3, r3, #7
 800c4fc:	2b05      	cmp	r3, #5
 800c4fe:	d827      	bhi.n	800c550 <UART_SetConfig+0x5c8>
 800c500:	a201      	add	r2, pc, #4	; (adr r2, 800c508 <UART_SetConfig+0x580>)
 800c502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c506:	bf00      	nop
 800c508:	0800c521 	.word	0x0800c521
 800c50c:	0800c529 	.word	0x0800c529
 800c510:	0800c531 	.word	0x0800c531
 800c514:	0800c539 	.word	0x0800c539
 800c518:	0800c541 	.word	0x0800c541
 800c51c:	0800c549 	.word	0x0800c549
 800c520:	2302      	movs	r3, #2
 800c522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c526:	e01b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c528:	2304      	movs	r3, #4
 800c52a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c52e:	e017      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c530:	2308      	movs	r3, #8
 800c532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c536:	e013      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c538:	2310      	movs	r3, #16
 800c53a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c53e:	e00f      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c540:	2320      	movs	r3, #32
 800c542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c546:	e00b      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c548:	2340      	movs	r3, #64	; 0x40
 800c54a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c54e:	e007      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c550:	2380      	movs	r3, #128	; 0x80
 800c552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c556:	bf00      	nop
 800c558:	e002      	b.n	800c560 <UART_SetConfig+0x5d8>
 800c55a:	2380      	movs	r3, #128	; 0x80
 800c55c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a32      	ldr	r2, [pc, #200]	; (800c630 <UART_SetConfig+0x6a8>)
 800c566:	4293      	cmp	r3, r2
 800c568:	f040 86f7 	bne.w	800d35a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c56c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c570:	2b08      	cmp	r3, #8
 800c572:	f000 80c0 	beq.w	800c6f6 <UART_SetConfig+0x76e>
 800c576:	2b08      	cmp	r3, #8
 800c578:	dc04      	bgt.n	800c584 <UART_SetConfig+0x5fc>
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d00c      	beq.n	800c598 <UART_SetConfig+0x610>
 800c57e:	2b04      	cmp	r3, #4
 800c580:	d065      	beq.n	800c64e <UART_SetConfig+0x6c6>
 800c582:	e27a      	b.n	800ca7a <UART_SetConfig+0xaf2>
 800c584:	2b20      	cmp	r3, #32
 800c586:	f000 81b0 	beq.w	800c8ea <UART_SetConfig+0x962>
 800c58a:	2b40      	cmp	r3, #64	; 0x40
 800c58c:	f000 821e 	beq.w	800c9cc <UART_SetConfig+0xa44>
 800c590:	2b10      	cmp	r3, #16
 800c592:	f000 8104 	beq.w	800c79e <UART_SetConfig+0x816>
 800c596:	e270      	b.n	800ca7a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c598:	f7fe f85c 	bl	800a654 <HAL_RCCEx_GetD3PCLK1Freq>
 800c59c:	4602      	mov	r2, r0
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d04e      	beq.n	800c644 <UART_SetConfig+0x6bc>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d048      	beq.n	800c640 <UART_SetConfig+0x6b8>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d042      	beq.n	800c63c <UART_SetConfig+0x6b4>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d03c      	beq.n	800c638 <UART_SetConfig+0x6b0>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c2:	2b04      	cmp	r3, #4
 800c5c4:	d036      	beq.n	800c634 <UART_SetConfig+0x6ac>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ca:	2b05      	cmp	r3, #5
 800c5cc:	d026      	beq.n	800c61c <UART_SetConfig+0x694>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d2:	2b06      	cmp	r3, #6
 800c5d4:	d020      	beq.n	800c618 <UART_SetConfig+0x690>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5da:	2b07      	cmp	r3, #7
 800c5dc:	d01a      	beq.n	800c614 <UART_SetConfig+0x68c>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e2:	2b08      	cmp	r3, #8
 800c5e4:	d014      	beq.n	800c610 <UART_SetConfig+0x688>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ea:	2b09      	cmp	r3, #9
 800c5ec:	d00e      	beq.n	800c60c <UART_SetConfig+0x684>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f2:	2b0a      	cmp	r3, #10
 800c5f4:	d008      	beq.n	800c608 <UART_SetConfig+0x680>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fa:	2b0b      	cmp	r3, #11
 800c5fc:	d102      	bne.n	800c604 <UART_SetConfig+0x67c>
 800c5fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c602:	e020      	b.n	800c646 <UART_SetConfig+0x6be>
 800c604:	2301      	movs	r3, #1
 800c606:	e01e      	b.n	800c646 <UART_SetConfig+0x6be>
 800c608:	2380      	movs	r3, #128	; 0x80
 800c60a:	e01c      	b.n	800c646 <UART_SetConfig+0x6be>
 800c60c:	2340      	movs	r3, #64	; 0x40
 800c60e:	e01a      	b.n	800c646 <UART_SetConfig+0x6be>
 800c610:	2320      	movs	r3, #32
 800c612:	e018      	b.n	800c646 <UART_SetConfig+0x6be>
 800c614:	2310      	movs	r3, #16
 800c616:	e016      	b.n	800c646 <UART_SetConfig+0x6be>
 800c618:	230c      	movs	r3, #12
 800c61a:	e014      	b.n	800c646 <UART_SetConfig+0x6be>
 800c61c:	230a      	movs	r3, #10
 800c61e:	e012      	b.n	800c646 <UART_SetConfig+0x6be>
 800c620:	40011400 	.word	0x40011400
 800c624:	58024400 	.word	0x58024400
 800c628:	40007800 	.word	0x40007800
 800c62c:	40007c00 	.word	0x40007c00
 800c630:	58000c00 	.word	0x58000c00
 800c634:	2308      	movs	r3, #8
 800c636:	e006      	b.n	800c646 <UART_SetConfig+0x6be>
 800c638:	2306      	movs	r3, #6
 800c63a:	e004      	b.n	800c646 <UART_SetConfig+0x6be>
 800c63c:	2304      	movs	r3, #4
 800c63e:	e002      	b.n	800c646 <UART_SetConfig+0x6be>
 800c640:	2302      	movs	r3, #2
 800c642:	e000      	b.n	800c646 <UART_SetConfig+0x6be>
 800c644:	2301      	movs	r3, #1
 800c646:	fbb2 f3f3 	udiv	r3, r2, r3
 800c64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c64c:	e219      	b.n	800ca82 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c64e:	f107 0318 	add.w	r3, r7, #24
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe f814 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c658:	69fa      	ldr	r2, [r7, #28]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d044      	beq.n	800c6ec <UART_SetConfig+0x764>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c666:	2b01      	cmp	r3, #1
 800c668:	d03e      	beq.n	800c6e8 <UART_SetConfig+0x760>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d038      	beq.n	800c6e4 <UART_SetConfig+0x75c>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c676:	2b03      	cmp	r3, #3
 800c678:	d032      	beq.n	800c6e0 <UART_SetConfig+0x758>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67e:	2b04      	cmp	r3, #4
 800c680:	d02c      	beq.n	800c6dc <UART_SetConfig+0x754>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c686:	2b05      	cmp	r3, #5
 800c688:	d026      	beq.n	800c6d8 <UART_SetConfig+0x750>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68e:	2b06      	cmp	r3, #6
 800c690:	d020      	beq.n	800c6d4 <UART_SetConfig+0x74c>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c696:	2b07      	cmp	r3, #7
 800c698:	d01a      	beq.n	800c6d0 <UART_SetConfig+0x748>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	2b08      	cmp	r3, #8
 800c6a0:	d014      	beq.n	800c6cc <UART_SetConfig+0x744>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a6:	2b09      	cmp	r3, #9
 800c6a8:	d00e      	beq.n	800c6c8 <UART_SetConfig+0x740>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ae:	2b0a      	cmp	r3, #10
 800c6b0:	d008      	beq.n	800c6c4 <UART_SetConfig+0x73c>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	2b0b      	cmp	r3, #11
 800c6b8:	d102      	bne.n	800c6c0 <UART_SetConfig+0x738>
 800c6ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6be:	e016      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e014      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6c4:	2380      	movs	r3, #128	; 0x80
 800c6c6:	e012      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6c8:	2340      	movs	r3, #64	; 0x40
 800c6ca:	e010      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6cc:	2320      	movs	r3, #32
 800c6ce:	e00e      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6d0:	2310      	movs	r3, #16
 800c6d2:	e00c      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6d4:	230c      	movs	r3, #12
 800c6d6:	e00a      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6d8:	230a      	movs	r3, #10
 800c6da:	e008      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6dc:	2308      	movs	r3, #8
 800c6de:	e006      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6e0:	2306      	movs	r3, #6
 800c6e2:	e004      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6e4:	2304      	movs	r3, #4
 800c6e6:	e002      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	e000      	b.n	800c6ee <UART_SetConfig+0x766>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6f4:	e1c5      	b.n	800ca82 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6f6:	f107 030c 	add.w	r3, r7, #12
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fe f90c 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	2b00      	cmp	r3, #0
 800c708:	d044      	beq.n	800c794 <UART_SetConfig+0x80c>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d03e      	beq.n	800c790 <UART_SetConfig+0x808>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c716:	2b02      	cmp	r3, #2
 800c718:	d038      	beq.n	800c78c <UART_SetConfig+0x804>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d032      	beq.n	800c788 <UART_SetConfig+0x800>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c726:	2b04      	cmp	r3, #4
 800c728:	d02c      	beq.n	800c784 <UART_SetConfig+0x7fc>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72e:	2b05      	cmp	r3, #5
 800c730:	d026      	beq.n	800c780 <UART_SetConfig+0x7f8>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c736:	2b06      	cmp	r3, #6
 800c738:	d020      	beq.n	800c77c <UART_SetConfig+0x7f4>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73e:	2b07      	cmp	r3, #7
 800c740:	d01a      	beq.n	800c778 <UART_SetConfig+0x7f0>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c746:	2b08      	cmp	r3, #8
 800c748:	d014      	beq.n	800c774 <UART_SetConfig+0x7ec>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74e:	2b09      	cmp	r3, #9
 800c750:	d00e      	beq.n	800c770 <UART_SetConfig+0x7e8>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c756:	2b0a      	cmp	r3, #10
 800c758:	d008      	beq.n	800c76c <UART_SetConfig+0x7e4>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75e:	2b0b      	cmp	r3, #11
 800c760:	d102      	bne.n	800c768 <UART_SetConfig+0x7e0>
 800c762:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c766:	e016      	b.n	800c796 <UART_SetConfig+0x80e>
 800c768:	2301      	movs	r3, #1
 800c76a:	e014      	b.n	800c796 <UART_SetConfig+0x80e>
 800c76c:	2380      	movs	r3, #128	; 0x80
 800c76e:	e012      	b.n	800c796 <UART_SetConfig+0x80e>
 800c770:	2340      	movs	r3, #64	; 0x40
 800c772:	e010      	b.n	800c796 <UART_SetConfig+0x80e>
 800c774:	2320      	movs	r3, #32
 800c776:	e00e      	b.n	800c796 <UART_SetConfig+0x80e>
 800c778:	2310      	movs	r3, #16
 800c77a:	e00c      	b.n	800c796 <UART_SetConfig+0x80e>
 800c77c:	230c      	movs	r3, #12
 800c77e:	e00a      	b.n	800c796 <UART_SetConfig+0x80e>
 800c780:	230a      	movs	r3, #10
 800c782:	e008      	b.n	800c796 <UART_SetConfig+0x80e>
 800c784:	2308      	movs	r3, #8
 800c786:	e006      	b.n	800c796 <UART_SetConfig+0x80e>
 800c788:	2306      	movs	r3, #6
 800c78a:	e004      	b.n	800c796 <UART_SetConfig+0x80e>
 800c78c:	2304      	movs	r3, #4
 800c78e:	e002      	b.n	800c796 <UART_SetConfig+0x80e>
 800c790:	2302      	movs	r3, #2
 800c792:	e000      	b.n	800c796 <UART_SetConfig+0x80e>
 800c794:	2301      	movs	r3, #1
 800c796:	fbb2 f3f3 	udiv	r3, r2, r3
 800c79a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c79c:	e171      	b.n	800ca82 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c79e:	4b7a      	ldr	r3, [pc, #488]	; (800c988 <UART_SetConfig+0xa00>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 0320 	and.w	r3, r3, #32
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d054      	beq.n	800c854 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c7aa:	4b77      	ldr	r3, [pc, #476]	; (800c988 <UART_SetConfig+0xa00>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	08db      	lsrs	r3, r3, #3
 800c7b0:	f003 0303 	and.w	r3, r3, #3
 800c7b4:	4a75      	ldr	r2, [pc, #468]	; (800c98c <UART_SetConfig+0xa04>)
 800c7b6:	40da      	lsrs	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d044      	beq.n	800c84a <UART_SetConfig+0x8c2>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d03e      	beq.n	800c846 <UART_SetConfig+0x8be>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d038      	beq.n	800c842 <UART_SetConfig+0x8ba>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d032      	beq.n	800c83e <UART_SetConfig+0x8b6>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7dc:	2b04      	cmp	r3, #4
 800c7de:	d02c      	beq.n	800c83a <UART_SetConfig+0x8b2>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e4:	2b05      	cmp	r3, #5
 800c7e6:	d026      	beq.n	800c836 <UART_SetConfig+0x8ae>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ec:	2b06      	cmp	r3, #6
 800c7ee:	d020      	beq.n	800c832 <UART_SetConfig+0x8aa>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f4:	2b07      	cmp	r3, #7
 800c7f6:	d01a      	beq.n	800c82e <UART_SetConfig+0x8a6>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	2b08      	cmp	r3, #8
 800c7fe:	d014      	beq.n	800c82a <UART_SetConfig+0x8a2>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c804:	2b09      	cmp	r3, #9
 800c806:	d00e      	beq.n	800c826 <UART_SetConfig+0x89e>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80c:	2b0a      	cmp	r3, #10
 800c80e:	d008      	beq.n	800c822 <UART_SetConfig+0x89a>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	2b0b      	cmp	r3, #11
 800c816:	d102      	bne.n	800c81e <UART_SetConfig+0x896>
 800c818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c81c:	e016      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c81e:	2301      	movs	r3, #1
 800c820:	e014      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c822:	2380      	movs	r3, #128	; 0x80
 800c824:	e012      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c826:	2340      	movs	r3, #64	; 0x40
 800c828:	e010      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c82a:	2320      	movs	r3, #32
 800c82c:	e00e      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c82e:	2310      	movs	r3, #16
 800c830:	e00c      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c832:	230c      	movs	r3, #12
 800c834:	e00a      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c836:	230a      	movs	r3, #10
 800c838:	e008      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c83a:	2308      	movs	r3, #8
 800c83c:	e006      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c83e:	2306      	movs	r3, #6
 800c840:	e004      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c842:	2304      	movs	r3, #4
 800c844:	e002      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c846:	2302      	movs	r3, #2
 800c848:	e000      	b.n	800c84c <UART_SetConfig+0x8c4>
 800c84a:	2301      	movs	r3, #1
 800c84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c850:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800c852:	e116      	b.n	800ca82 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d043      	beq.n	800c8e4 <UART_SetConfig+0x95c>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	2b01      	cmp	r3, #1
 800c862:	d03d      	beq.n	800c8e0 <UART_SetConfig+0x958>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d037      	beq.n	800c8dc <UART_SetConfig+0x954>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c870:	2b03      	cmp	r3, #3
 800c872:	d031      	beq.n	800c8d8 <UART_SetConfig+0x950>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c878:	2b04      	cmp	r3, #4
 800c87a:	d02b      	beq.n	800c8d4 <UART_SetConfig+0x94c>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c880:	2b05      	cmp	r3, #5
 800c882:	d025      	beq.n	800c8d0 <UART_SetConfig+0x948>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c888:	2b06      	cmp	r3, #6
 800c88a:	d01f      	beq.n	800c8cc <UART_SetConfig+0x944>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c890:	2b07      	cmp	r3, #7
 800c892:	d019      	beq.n	800c8c8 <UART_SetConfig+0x940>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c898:	2b08      	cmp	r3, #8
 800c89a:	d013      	beq.n	800c8c4 <UART_SetConfig+0x93c>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	2b09      	cmp	r3, #9
 800c8a2:	d00d      	beq.n	800c8c0 <UART_SetConfig+0x938>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a8:	2b0a      	cmp	r3, #10
 800c8aa:	d007      	beq.n	800c8bc <UART_SetConfig+0x934>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b0:	2b0b      	cmp	r3, #11
 800c8b2:	d101      	bne.n	800c8b8 <UART_SetConfig+0x930>
 800c8b4:	4b36      	ldr	r3, [pc, #216]	; (800c990 <UART_SetConfig+0xa08>)
 800c8b6:	e016      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8b8:	4b34      	ldr	r3, [pc, #208]	; (800c98c <UART_SetConfig+0xa04>)
 800c8ba:	e014      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8bc:	4b35      	ldr	r3, [pc, #212]	; (800c994 <UART_SetConfig+0xa0c>)
 800c8be:	e012      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8c0:	4b35      	ldr	r3, [pc, #212]	; (800c998 <UART_SetConfig+0xa10>)
 800c8c2:	e010      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8c4:	4b35      	ldr	r3, [pc, #212]	; (800c99c <UART_SetConfig+0xa14>)
 800c8c6:	e00e      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8c8:	4b35      	ldr	r3, [pc, #212]	; (800c9a0 <UART_SetConfig+0xa18>)
 800c8ca:	e00c      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8cc:	4b35      	ldr	r3, [pc, #212]	; (800c9a4 <UART_SetConfig+0xa1c>)
 800c8ce:	e00a      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8d0:	4b35      	ldr	r3, [pc, #212]	; (800c9a8 <UART_SetConfig+0xa20>)
 800c8d2:	e008      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8d4:	4b35      	ldr	r3, [pc, #212]	; (800c9ac <UART_SetConfig+0xa24>)
 800c8d6:	e006      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8d8:	4b35      	ldr	r3, [pc, #212]	; (800c9b0 <UART_SetConfig+0xa28>)
 800c8da:	e004      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8dc:	4b35      	ldr	r3, [pc, #212]	; (800c9b4 <UART_SetConfig+0xa2c>)
 800c8de:	e002      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8e0:	4b35      	ldr	r3, [pc, #212]	; (800c9b8 <UART_SetConfig+0xa30>)
 800c8e2:	e000      	b.n	800c8e6 <UART_SetConfig+0x95e>
 800c8e4:	4b29      	ldr	r3, [pc, #164]	; (800c98c <UART_SetConfig+0xa04>)
 800c8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8e8:	e0cb      	b.n	800ca82 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d046      	beq.n	800c980 <UART_SetConfig+0x9f8>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d040      	beq.n	800c97c <UART_SetConfig+0x9f4>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d03a      	beq.n	800c978 <UART_SetConfig+0x9f0>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	2b03      	cmp	r3, #3
 800c908:	d034      	beq.n	800c974 <UART_SetConfig+0x9ec>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90e:	2b04      	cmp	r3, #4
 800c910:	d02e      	beq.n	800c970 <UART_SetConfig+0x9e8>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c916:	2b05      	cmp	r3, #5
 800c918:	d028      	beq.n	800c96c <UART_SetConfig+0x9e4>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	2b06      	cmp	r3, #6
 800c920:	d022      	beq.n	800c968 <UART_SetConfig+0x9e0>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c926:	2b07      	cmp	r3, #7
 800c928:	d01c      	beq.n	800c964 <UART_SetConfig+0x9dc>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	2b08      	cmp	r3, #8
 800c930:	d016      	beq.n	800c960 <UART_SetConfig+0x9d8>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	2b09      	cmp	r3, #9
 800c938:	d00f      	beq.n	800c95a <UART_SetConfig+0x9d2>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93e:	2b0a      	cmp	r3, #10
 800c940:	d008      	beq.n	800c954 <UART_SetConfig+0x9cc>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	2b0b      	cmp	r3, #11
 800c948:	d102      	bne.n	800c950 <UART_SetConfig+0x9c8>
 800c94a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c94e:	e018      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c950:	4b13      	ldr	r3, [pc, #76]	; (800c9a0 <UART_SetConfig+0xa18>)
 800c952:	e016      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c954:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c958:	e013      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c95a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c95e:	e010      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c960:	4b16      	ldr	r3, [pc, #88]	; (800c9bc <UART_SetConfig+0xa34>)
 800c962:	e00e      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c964:	4b0a      	ldr	r3, [pc, #40]	; (800c990 <UART_SetConfig+0xa08>)
 800c966:	e00c      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c968:	4b15      	ldr	r3, [pc, #84]	; (800c9c0 <UART_SetConfig+0xa38>)
 800c96a:	e00a      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c96c:	4b15      	ldr	r3, [pc, #84]	; (800c9c4 <UART_SetConfig+0xa3c>)
 800c96e:	e008      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c970:	4b08      	ldr	r3, [pc, #32]	; (800c994 <UART_SetConfig+0xa0c>)
 800c972:	e006      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c974:	4b14      	ldr	r3, [pc, #80]	; (800c9c8 <UART_SetConfig+0xa40>)
 800c976:	e004      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c978:	4b07      	ldr	r3, [pc, #28]	; (800c998 <UART_SetConfig+0xa10>)
 800c97a:	e002      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c97c:	4b07      	ldr	r3, [pc, #28]	; (800c99c <UART_SetConfig+0xa14>)
 800c97e:	e000      	b.n	800c982 <UART_SetConfig+0x9fa>
 800c980:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <UART_SetConfig+0xa18>)
 800c982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c984:	e07d      	b.n	800ca82 <UART_SetConfig+0xafa>
 800c986:	bf00      	nop
 800c988:	58024400 	.word	0x58024400
 800c98c:	03d09000 	.word	0x03d09000
 800c990:	0003d090 	.word	0x0003d090
 800c994:	0007a120 	.word	0x0007a120
 800c998:	000f4240 	.word	0x000f4240
 800c99c:	001e8480 	.word	0x001e8480
 800c9a0:	003d0900 	.word	0x003d0900
 800c9a4:	00516155 	.word	0x00516155
 800c9a8:	0061a800 	.word	0x0061a800
 800c9ac:	007a1200 	.word	0x007a1200
 800c9b0:	00a2c2aa 	.word	0x00a2c2aa
 800c9b4:	00f42400 	.word	0x00f42400
 800c9b8:	01e84800 	.word	0x01e84800
 800c9bc:	0001e848 	.word	0x0001e848
 800c9c0:	00051615 	.word	0x00051615
 800c9c4:	00061a80 	.word	0x00061a80
 800c9c8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d04e      	beq.n	800ca72 <UART_SetConfig+0xaea>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d047      	beq.n	800ca6c <UART_SetConfig+0xae4>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d040      	beq.n	800ca66 <UART_SetConfig+0xade>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d039      	beq.n	800ca60 <UART_SetConfig+0xad8>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f0:	2b04      	cmp	r3, #4
 800c9f2:	d032      	beq.n	800ca5a <UART_SetConfig+0xad2>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f8:	2b05      	cmp	r3, #5
 800c9fa:	d02b      	beq.n	800ca54 <UART_SetConfig+0xacc>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca00:	2b06      	cmp	r3, #6
 800ca02:	d024      	beq.n	800ca4e <UART_SetConfig+0xac6>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca08:	2b07      	cmp	r3, #7
 800ca0a:	d01d      	beq.n	800ca48 <UART_SetConfig+0xac0>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	2b08      	cmp	r3, #8
 800ca12:	d016      	beq.n	800ca42 <UART_SetConfig+0xaba>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca18:	2b09      	cmp	r3, #9
 800ca1a:	d00f      	beq.n	800ca3c <UART_SetConfig+0xab4>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca20:	2b0a      	cmp	r3, #10
 800ca22:	d008      	beq.n	800ca36 <UART_SetConfig+0xaae>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca28:	2b0b      	cmp	r3, #11
 800ca2a:	d101      	bne.n	800ca30 <UART_SetConfig+0xaa8>
 800ca2c:	2380      	movs	r3, #128	; 0x80
 800ca2e:	e022      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca34:	e01f      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca3a:	e01c      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca40:	e019      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca46:	e016      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca4c:	e013      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ca52:	e010      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca54:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ca58:	e00d      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca5e:	e00a      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca60:	f241 5355 	movw	r3, #5461	; 0x1555
 800ca64:	e007      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca6a:	e004      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca70:	e001      	b.n	800ca76 <UART_SetConfig+0xaee>
 800ca72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca78:	e003      	b.n	800ca82 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ca80:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f001 83e8 	beq.w	800e25a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	4413      	add	r3, r2
 800ca94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d305      	bcc.n	800caa6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800caa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d904      	bls.n	800cab0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caac:	f001 bbd5 	b.w	800e25a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800cab0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	f000 8154 	beq.w	800cd62 <UART_SetConfig+0xdda>
 800caba:	2b08      	cmp	r3, #8
 800cabc:	dc06      	bgt.n	800cacc <UART_SetConfig+0xb44>
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d00f      	beq.n	800cae2 <UART_SetConfig+0xb5a>
 800cac2:	2b04      	cmp	r3, #4
 800cac4:	f000 80ac 	beq.w	800cc20 <UART_SetConfig+0xc98>
 800cac8:	f000 bc30 	b.w	800d32c <UART_SetConfig+0x13a4>
 800cacc:	2b20      	cmp	r3, #32
 800cace:	f000 832d 	beq.w	800d12c <UART_SetConfig+0x11a4>
 800cad2:	2b40      	cmp	r3, #64	; 0x40
 800cad4:	f000 83a5 	beq.w	800d222 <UART_SetConfig+0x129a>
 800cad8:	2b10      	cmp	r3, #16
 800cada:	f000 81e3 	beq.w	800cea4 <UART_SetConfig+0xf1c>
 800cade:	f000 bc25 	b.w	800d32c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cae2:	f7fd fdb7 	bl	800a654 <HAL_RCCEx_GetD3PCLK1Freq>
 800cae6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	4618      	mov	r0, r3
 800caec:	f04f 0100 	mov.w	r1, #0
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d067      	beq.n	800cbc8 <UART_SetConfig+0xc40>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d05e      	beq.n	800cbbe <UART_SetConfig+0xc36>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	d055      	beq.n	800cbb4 <UART_SetConfig+0xc2c>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	d04c      	beq.n	800cbaa <UART_SetConfig+0xc22>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb14:	2b04      	cmp	r3, #4
 800cb16:	d043      	beq.n	800cba0 <UART_SetConfig+0xc18>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1c:	2b05      	cmp	r3, #5
 800cb1e:	d03a      	beq.n	800cb96 <UART_SetConfig+0xc0e>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb24:	2b06      	cmp	r3, #6
 800cb26:	d031      	beq.n	800cb8c <UART_SetConfig+0xc04>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2c:	2b07      	cmp	r3, #7
 800cb2e:	d028      	beq.n	800cb82 <UART_SetConfig+0xbfa>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb34:	2b08      	cmp	r3, #8
 800cb36:	d01f      	beq.n	800cb78 <UART_SetConfig+0xbf0>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3c:	2b09      	cmp	r3, #9
 800cb3e:	d016      	beq.n	800cb6e <UART_SetConfig+0xbe6>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb44:	2b0a      	cmp	r3, #10
 800cb46:	d00d      	beq.n	800cb64 <UART_SetConfig+0xbdc>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4c:	2b0b      	cmp	r3, #11
 800cb4e:	d104      	bne.n	800cb5a <UART_SetConfig+0xbd2>
 800cb50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb54:	f04f 0400 	mov.w	r4, #0
 800cb58:	e03a      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cb5a:	f04f 0301 	mov.w	r3, #1
 800cb5e:	f04f 0400 	mov.w	r4, #0
 800cb62:	e035      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cb64:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cb68:	f04f 0400 	mov.w	r4, #0
 800cb6c:	e030      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cb6e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cb72:	f04f 0400 	mov.w	r4, #0
 800cb76:	e02b      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cb78:	f04f 0320 	mov.w	r3, #32
 800cb7c:	f04f 0400 	mov.w	r4, #0
 800cb80:	e026      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cb82:	f04f 0310 	mov.w	r3, #16
 800cb86:	f04f 0400 	mov.w	r4, #0
 800cb8a:	e021      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cb8c:	f04f 030c 	mov.w	r3, #12
 800cb90:	f04f 0400 	mov.w	r4, #0
 800cb94:	e01c      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cb96:	f04f 030a 	mov.w	r3, #10
 800cb9a:	f04f 0400 	mov.w	r4, #0
 800cb9e:	e017      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cba0:	f04f 0308 	mov.w	r3, #8
 800cba4:	f04f 0400 	mov.w	r4, #0
 800cba8:	e012      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cbaa:	f04f 0306 	mov.w	r3, #6
 800cbae:	f04f 0400 	mov.w	r4, #0
 800cbb2:	e00d      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cbb4:	f04f 0304 	mov.w	r3, #4
 800cbb8:	f04f 0400 	mov.w	r4, #0
 800cbbc:	e008      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cbbe:	f04f 0302 	mov.w	r3, #2
 800cbc2:	f04f 0400 	mov.w	r4, #0
 800cbc6:	e003      	b.n	800cbd0 <UART_SetConfig+0xc48>
 800cbc8:	f04f 0301 	mov.w	r3, #1
 800cbcc:	f04f 0400 	mov.w	r4, #0
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	4623      	mov	r3, r4
 800cbd4:	f7f3 fbd4 	bl	8000380 <__aeabi_uldivmod>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	460c      	mov	r4, r1
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4622      	mov	r2, r4
 800cbe0:	f04f 0300 	mov.w	r3, #0
 800cbe4:	f04f 0400 	mov.w	r4, #0
 800cbe8:	0214      	lsls	r4, r2, #8
 800cbea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cbee:	020b      	lsls	r3, r1, #8
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	6852      	ldr	r2, [r2, #4]
 800cbf4:	0852      	lsrs	r2, r2, #1
 800cbf6:	4611      	mov	r1, r2
 800cbf8:	f04f 0200 	mov.w	r2, #0
 800cbfc:	eb13 0b01 	adds.w	fp, r3, r1
 800cc00:	eb44 0c02 	adc.w	ip, r4, r2
 800cc04:	4658      	mov	r0, fp
 800cc06:	4661      	mov	r1, ip
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	f04f 0400 	mov.w	r4, #0
 800cc10:	461a      	mov	r2, r3
 800cc12:	4623      	mov	r3, r4
 800cc14:	f7f3 fbb4 	bl	8000380 <__aeabi_uldivmod>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc1e:	e389      	b.n	800d334 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc20:	f107 0318 	add.w	r3, r7, #24
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fd fd2b 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f04f 0100 	mov.w	r1, #0
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d067      	beq.n	800cd0a <UART_SetConfig+0xd82>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d05e      	beq.n	800cd00 <UART_SetConfig+0xd78>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d055      	beq.n	800ccf6 <UART_SetConfig+0xd6e>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4e:	2b03      	cmp	r3, #3
 800cc50:	d04c      	beq.n	800ccec <UART_SetConfig+0xd64>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc56:	2b04      	cmp	r3, #4
 800cc58:	d043      	beq.n	800cce2 <UART_SetConfig+0xd5a>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5e:	2b05      	cmp	r3, #5
 800cc60:	d03a      	beq.n	800ccd8 <UART_SetConfig+0xd50>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc66:	2b06      	cmp	r3, #6
 800cc68:	d031      	beq.n	800ccce <UART_SetConfig+0xd46>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6e:	2b07      	cmp	r3, #7
 800cc70:	d028      	beq.n	800ccc4 <UART_SetConfig+0xd3c>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc76:	2b08      	cmp	r3, #8
 800cc78:	d01f      	beq.n	800ccba <UART_SetConfig+0xd32>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7e:	2b09      	cmp	r3, #9
 800cc80:	d016      	beq.n	800ccb0 <UART_SetConfig+0xd28>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc86:	2b0a      	cmp	r3, #10
 800cc88:	d00d      	beq.n	800cca6 <UART_SetConfig+0xd1e>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8e:	2b0b      	cmp	r3, #11
 800cc90:	d104      	bne.n	800cc9c <UART_SetConfig+0xd14>
 800cc92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc96:	f04f 0400 	mov.w	r4, #0
 800cc9a:	e03a      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800cc9c:	f04f 0301 	mov.w	r3, #1
 800cca0:	f04f 0400 	mov.w	r4, #0
 800cca4:	e035      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800cca6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ccaa:	f04f 0400 	mov.w	r4, #0
 800ccae:	e030      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800ccb0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ccb4:	f04f 0400 	mov.w	r4, #0
 800ccb8:	e02b      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800ccba:	f04f 0320 	mov.w	r3, #32
 800ccbe:	f04f 0400 	mov.w	r4, #0
 800ccc2:	e026      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800ccc4:	f04f 0310 	mov.w	r3, #16
 800ccc8:	f04f 0400 	mov.w	r4, #0
 800cccc:	e021      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800ccce:	f04f 030c 	mov.w	r3, #12
 800ccd2:	f04f 0400 	mov.w	r4, #0
 800ccd6:	e01c      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800ccd8:	f04f 030a 	mov.w	r3, #10
 800ccdc:	f04f 0400 	mov.w	r4, #0
 800cce0:	e017      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800cce2:	f04f 0308 	mov.w	r3, #8
 800cce6:	f04f 0400 	mov.w	r4, #0
 800ccea:	e012      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800ccec:	f04f 0306 	mov.w	r3, #6
 800ccf0:	f04f 0400 	mov.w	r4, #0
 800ccf4:	e00d      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800ccf6:	f04f 0304 	mov.w	r3, #4
 800ccfa:	f04f 0400 	mov.w	r4, #0
 800ccfe:	e008      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800cd00:	f04f 0302 	mov.w	r3, #2
 800cd04:	f04f 0400 	mov.w	r4, #0
 800cd08:	e003      	b.n	800cd12 <UART_SetConfig+0xd8a>
 800cd0a:	f04f 0301 	mov.w	r3, #1
 800cd0e:	f04f 0400 	mov.w	r4, #0
 800cd12:	461a      	mov	r2, r3
 800cd14:	4623      	mov	r3, r4
 800cd16:	f7f3 fb33 	bl	8000380 <__aeabi_uldivmod>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	4619      	mov	r1, r3
 800cd20:	4622      	mov	r2, r4
 800cd22:	f04f 0300 	mov.w	r3, #0
 800cd26:	f04f 0400 	mov.w	r4, #0
 800cd2a:	0214      	lsls	r4, r2, #8
 800cd2c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cd30:	020b      	lsls	r3, r1, #8
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	6852      	ldr	r2, [r2, #4]
 800cd36:	0852      	lsrs	r2, r2, #1
 800cd38:	4611      	mov	r1, r2
 800cd3a:	f04f 0200 	mov.w	r2, #0
 800cd3e:	eb13 0b01 	adds.w	fp, r3, r1
 800cd42:	eb44 0c02 	adc.w	ip, r4, r2
 800cd46:	4658      	mov	r0, fp
 800cd48:	4661      	mov	r1, ip
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	f04f 0400 	mov.w	r4, #0
 800cd52:	461a      	mov	r2, r3
 800cd54:	4623      	mov	r3, r4
 800cd56:	f7f3 fb13 	bl	8000380 <__aeabi_uldivmod>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	460c      	mov	r4, r1
 800cd5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd60:	e2e8      	b.n	800d334 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd62:	f107 030c 	add.w	r3, r7, #12
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fd fdd6 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f04f 0100 	mov.w	r1, #0
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d067      	beq.n	800ce4c <UART_SetConfig+0xec4>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d05e      	beq.n	800ce42 <UART_SetConfig+0xeba>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d055      	beq.n	800ce38 <UART_SetConfig+0xeb0>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd90:	2b03      	cmp	r3, #3
 800cd92:	d04c      	beq.n	800ce2e <UART_SetConfig+0xea6>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d043      	beq.n	800ce24 <UART_SetConfig+0xe9c>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	2b05      	cmp	r3, #5
 800cda2:	d03a      	beq.n	800ce1a <UART_SetConfig+0xe92>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda8:	2b06      	cmp	r3, #6
 800cdaa:	d031      	beq.n	800ce10 <UART_SetConfig+0xe88>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb0:	2b07      	cmp	r3, #7
 800cdb2:	d028      	beq.n	800ce06 <UART_SetConfig+0xe7e>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb8:	2b08      	cmp	r3, #8
 800cdba:	d01f      	beq.n	800cdfc <UART_SetConfig+0xe74>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc0:	2b09      	cmp	r3, #9
 800cdc2:	d016      	beq.n	800cdf2 <UART_SetConfig+0xe6a>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	2b0a      	cmp	r3, #10
 800cdca:	d00d      	beq.n	800cde8 <UART_SetConfig+0xe60>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd0:	2b0b      	cmp	r3, #11
 800cdd2:	d104      	bne.n	800cdde <UART_SetConfig+0xe56>
 800cdd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdd8:	f04f 0400 	mov.w	r4, #0
 800cddc:	e03a      	b.n	800ce54 <UART_SetConfig+0xecc>
 800cdde:	f04f 0301 	mov.w	r3, #1
 800cde2:	f04f 0400 	mov.w	r4, #0
 800cde6:	e035      	b.n	800ce54 <UART_SetConfig+0xecc>
 800cde8:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cdec:	f04f 0400 	mov.w	r4, #0
 800cdf0:	e030      	b.n	800ce54 <UART_SetConfig+0xecc>
 800cdf2:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cdf6:	f04f 0400 	mov.w	r4, #0
 800cdfa:	e02b      	b.n	800ce54 <UART_SetConfig+0xecc>
 800cdfc:	f04f 0320 	mov.w	r3, #32
 800ce00:	f04f 0400 	mov.w	r4, #0
 800ce04:	e026      	b.n	800ce54 <UART_SetConfig+0xecc>
 800ce06:	f04f 0310 	mov.w	r3, #16
 800ce0a:	f04f 0400 	mov.w	r4, #0
 800ce0e:	e021      	b.n	800ce54 <UART_SetConfig+0xecc>
 800ce10:	f04f 030c 	mov.w	r3, #12
 800ce14:	f04f 0400 	mov.w	r4, #0
 800ce18:	e01c      	b.n	800ce54 <UART_SetConfig+0xecc>
 800ce1a:	f04f 030a 	mov.w	r3, #10
 800ce1e:	f04f 0400 	mov.w	r4, #0
 800ce22:	e017      	b.n	800ce54 <UART_SetConfig+0xecc>
 800ce24:	f04f 0308 	mov.w	r3, #8
 800ce28:	f04f 0400 	mov.w	r4, #0
 800ce2c:	e012      	b.n	800ce54 <UART_SetConfig+0xecc>
 800ce2e:	f04f 0306 	mov.w	r3, #6
 800ce32:	f04f 0400 	mov.w	r4, #0
 800ce36:	e00d      	b.n	800ce54 <UART_SetConfig+0xecc>
 800ce38:	f04f 0304 	mov.w	r3, #4
 800ce3c:	f04f 0400 	mov.w	r4, #0
 800ce40:	e008      	b.n	800ce54 <UART_SetConfig+0xecc>
 800ce42:	f04f 0302 	mov.w	r3, #2
 800ce46:	f04f 0400 	mov.w	r4, #0
 800ce4a:	e003      	b.n	800ce54 <UART_SetConfig+0xecc>
 800ce4c:	f04f 0301 	mov.w	r3, #1
 800ce50:	f04f 0400 	mov.w	r4, #0
 800ce54:	461a      	mov	r2, r3
 800ce56:	4623      	mov	r3, r4
 800ce58:	f7f3 fa92 	bl	8000380 <__aeabi_uldivmod>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	4619      	mov	r1, r3
 800ce62:	4622      	mov	r2, r4
 800ce64:	f04f 0300 	mov.w	r3, #0
 800ce68:	f04f 0400 	mov.w	r4, #0
 800ce6c:	0214      	lsls	r4, r2, #8
 800ce6e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ce72:	020b      	lsls	r3, r1, #8
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	6852      	ldr	r2, [r2, #4]
 800ce78:	0852      	lsrs	r2, r2, #1
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	f04f 0200 	mov.w	r2, #0
 800ce80:	eb13 0b01 	adds.w	fp, r3, r1
 800ce84:	eb44 0c02 	adc.w	ip, r4, r2
 800ce88:	4658      	mov	r0, fp
 800ce8a:	4661      	mov	r1, ip
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f04f 0400 	mov.w	r4, #0
 800ce94:	461a      	mov	r2, r3
 800ce96:	4623      	mov	r3, r4
 800ce98:	f7f3 fa72 	bl	8000380 <__aeabi_uldivmod>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	460c      	mov	r4, r1
 800cea0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cea2:	e247      	b.n	800d334 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cea4:	4b96      	ldr	r3, [pc, #600]	; (800d100 <UART_SetConfig+0x1178>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f003 0320 	and.w	r3, r3, #32
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 80a3 	beq.w	800cff8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ceb2:	4b93      	ldr	r3, [pc, #588]	; (800d100 <UART_SetConfig+0x1178>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	08db      	lsrs	r3, r3, #3
 800ceb8:	f003 0303 	and.w	r3, r3, #3
 800cebc:	4a91      	ldr	r2, [pc, #580]	; (800d104 <UART_SetConfig+0x117c>)
 800cebe:	fa22 f303 	lsr.w	r3, r2, r3
 800cec2:	4618      	mov	r0, r3
 800cec4:	f04f 0100 	mov.w	r1, #0
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d067      	beq.n	800cfa0 <UART_SetConfig+0x1018>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d05e      	beq.n	800cf96 <UART_SetConfig+0x100e>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d055      	beq.n	800cf8c <UART_SetConfig+0x1004>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee4:	2b03      	cmp	r3, #3
 800cee6:	d04c      	beq.n	800cf82 <UART_SetConfig+0xffa>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceec:	2b04      	cmp	r3, #4
 800ceee:	d043      	beq.n	800cf78 <UART_SetConfig+0xff0>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	2b05      	cmp	r3, #5
 800cef6:	d03a      	beq.n	800cf6e <UART_SetConfig+0xfe6>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefc:	2b06      	cmp	r3, #6
 800cefe:	d031      	beq.n	800cf64 <UART_SetConfig+0xfdc>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf04:	2b07      	cmp	r3, #7
 800cf06:	d028      	beq.n	800cf5a <UART_SetConfig+0xfd2>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0c:	2b08      	cmp	r3, #8
 800cf0e:	d01f      	beq.n	800cf50 <UART_SetConfig+0xfc8>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf14:	2b09      	cmp	r3, #9
 800cf16:	d016      	beq.n	800cf46 <UART_SetConfig+0xfbe>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1c:	2b0a      	cmp	r3, #10
 800cf1e:	d00d      	beq.n	800cf3c <UART_SetConfig+0xfb4>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf24:	2b0b      	cmp	r3, #11
 800cf26:	d104      	bne.n	800cf32 <UART_SetConfig+0xfaa>
 800cf28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf2c:	f04f 0400 	mov.w	r4, #0
 800cf30:	e03a      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf32:	f04f 0301 	mov.w	r3, #1
 800cf36:	f04f 0400 	mov.w	r4, #0
 800cf3a:	e035      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf3c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cf40:	f04f 0400 	mov.w	r4, #0
 800cf44:	e030      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf46:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cf4a:	f04f 0400 	mov.w	r4, #0
 800cf4e:	e02b      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf50:	f04f 0320 	mov.w	r3, #32
 800cf54:	f04f 0400 	mov.w	r4, #0
 800cf58:	e026      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf5a:	f04f 0310 	mov.w	r3, #16
 800cf5e:	f04f 0400 	mov.w	r4, #0
 800cf62:	e021      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf64:	f04f 030c 	mov.w	r3, #12
 800cf68:	f04f 0400 	mov.w	r4, #0
 800cf6c:	e01c      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf6e:	f04f 030a 	mov.w	r3, #10
 800cf72:	f04f 0400 	mov.w	r4, #0
 800cf76:	e017      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf78:	f04f 0308 	mov.w	r3, #8
 800cf7c:	f04f 0400 	mov.w	r4, #0
 800cf80:	e012      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf82:	f04f 0306 	mov.w	r3, #6
 800cf86:	f04f 0400 	mov.w	r4, #0
 800cf8a:	e00d      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf8c:	f04f 0304 	mov.w	r3, #4
 800cf90:	f04f 0400 	mov.w	r4, #0
 800cf94:	e008      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cf96:	f04f 0302 	mov.w	r3, #2
 800cf9a:	f04f 0400 	mov.w	r4, #0
 800cf9e:	e003      	b.n	800cfa8 <UART_SetConfig+0x1020>
 800cfa0:	f04f 0301 	mov.w	r3, #1
 800cfa4:	f04f 0400 	mov.w	r4, #0
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	4623      	mov	r3, r4
 800cfac:	f7f3 f9e8 	bl	8000380 <__aeabi_uldivmod>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4622      	mov	r2, r4
 800cfb8:	f04f 0300 	mov.w	r3, #0
 800cfbc:	f04f 0400 	mov.w	r4, #0
 800cfc0:	0214      	lsls	r4, r2, #8
 800cfc2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cfc6:	020b      	lsls	r3, r1, #8
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	6852      	ldr	r2, [r2, #4]
 800cfcc:	0852      	lsrs	r2, r2, #1
 800cfce:	4611      	mov	r1, r2
 800cfd0:	f04f 0200 	mov.w	r2, #0
 800cfd4:	eb13 0b01 	adds.w	fp, r3, r1
 800cfd8:	eb44 0c02 	adc.w	ip, r4, r2
 800cfdc:	4658      	mov	r0, fp
 800cfde:	4661      	mov	r1, ip
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	f04f 0400 	mov.w	r4, #0
 800cfe8:	461a      	mov	r2, r3
 800cfea:	4623      	mov	r3, r4
 800cfec:	f7f3 f9c8 	bl	8000380 <__aeabi_uldivmod>
 800cff0:	4603      	mov	r3, r0
 800cff2:	460c      	mov	r4, r1
 800cff4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800cff6:	e19d      	b.n	800d334 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d05b      	beq.n	800d0b8 <UART_SetConfig+0x1130>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d004:	2b01      	cmp	r3, #1
 800d006:	d053      	beq.n	800d0b0 <UART_SetConfig+0x1128>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d04b      	beq.n	800d0a8 <UART_SetConfig+0x1120>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d014:	2b03      	cmp	r3, #3
 800d016:	d043      	beq.n	800d0a0 <UART_SetConfig+0x1118>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d03b      	beq.n	800d098 <UART_SetConfig+0x1110>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d024:	2b05      	cmp	r3, #5
 800d026:	d033      	beq.n	800d090 <UART_SetConfig+0x1108>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02c:	2b06      	cmp	r3, #6
 800d02e:	d02b      	beq.n	800d088 <UART_SetConfig+0x1100>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d034:	2b07      	cmp	r3, #7
 800d036:	d023      	beq.n	800d080 <UART_SetConfig+0x10f8>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03c:	2b08      	cmp	r3, #8
 800d03e:	d01b      	beq.n	800d078 <UART_SetConfig+0x10f0>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d044:	2b09      	cmp	r3, #9
 800d046:	d013      	beq.n	800d070 <UART_SetConfig+0x10e8>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04c:	2b0a      	cmp	r3, #10
 800d04e:	d00b      	beq.n	800d068 <UART_SetConfig+0x10e0>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d054:	2b0b      	cmp	r3, #11
 800d056:	d103      	bne.n	800d060 <UART_SetConfig+0x10d8>
 800d058:	4b2a      	ldr	r3, [pc, #168]	; (800d104 <UART_SetConfig+0x117c>)
 800d05a:	f04f 0400 	mov.w	r4, #0
 800d05e:	e02e      	b.n	800d0be <UART_SetConfig+0x1136>
 800d060:	4b29      	ldr	r3, [pc, #164]	; (800d108 <UART_SetConfig+0x1180>)
 800d062:	f04f 0403 	mov.w	r4, #3
 800d066:	e02a      	b.n	800d0be <UART_SetConfig+0x1136>
 800d068:	4b28      	ldr	r3, [pc, #160]	; (800d10c <UART_SetConfig+0x1184>)
 800d06a:	f04f 0400 	mov.w	r4, #0
 800d06e:	e026      	b.n	800d0be <UART_SetConfig+0x1136>
 800d070:	4b27      	ldr	r3, [pc, #156]	; (800d110 <UART_SetConfig+0x1188>)
 800d072:	f04f 0400 	mov.w	r4, #0
 800d076:	e022      	b.n	800d0be <UART_SetConfig+0x1136>
 800d078:	4b26      	ldr	r3, [pc, #152]	; (800d114 <UART_SetConfig+0x118c>)
 800d07a:	f04f 0400 	mov.w	r4, #0
 800d07e:	e01e      	b.n	800d0be <UART_SetConfig+0x1136>
 800d080:	4b25      	ldr	r3, [pc, #148]	; (800d118 <UART_SetConfig+0x1190>)
 800d082:	f04f 0400 	mov.w	r4, #0
 800d086:	e01a      	b.n	800d0be <UART_SetConfig+0x1136>
 800d088:	a419      	add	r4, pc, #100	; (adr r4, 800d0f0 <UART_SetConfig+0x1168>)
 800d08a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d08e:	e016      	b.n	800d0be <UART_SetConfig+0x1136>
 800d090:	4b22      	ldr	r3, [pc, #136]	; (800d11c <UART_SetConfig+0x1194>)
 800d092:	f04f 0400 	mov.w	r4, #0
 800d096:	e012      	b.n	800d0be <UART_SetConfig+0x1136>
 800d098:	4b21      	ldr	r3, [pc, #132]	; (800d120 <UART_SetConfig+0x1198>)
 800d09a:	f04f 0400 	mov.w	r4, #0
 800d09e:	e00e      	b.n	800d0be <UART_SetConfig+0x1136>
 800d0a0:	a415      	add	r4, pc, #84	; (adr r4, 800d0f8 <UART_SetConfig+0x1170>)
 800d0a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d0a6:	e00a      	b.n	800d0be <UART_SetConfig+0x1136>
 800d0a8:	4b1e      	ldr	r3, [pc, #120]	; (800d124 <UART_SetConfig+0x119c>)
 800d0aa:	f04f 0400 	mov.w	r4, #0
 800d0ae:	e006      	b.n	800d0be <UART_SetConfig+0x1136>
 800d0b0:	4b1d      	ldr	r3, [pc, #116]	; (800d128 <UART_SetConfig+0x11a0>)
 800d0b2:	f04f 0401 	mov.w	r4, #1
 800d0b6:	e002      	b.n	800d0be <UART_SetConfig+0x1136>
 800d0b8:	4b13      	ldr	r3, [pc, #76]	; (800d108 <UART_SetConfig+0x1180>)
 800d0ba:	f04f 0403 	mov.w	r4, #3
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	6852      	ldr	r2, [r2, #4]
 800d0c2:	0852      	lsrs	r2, r2, #1
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	f04f 0200 	mov.w	r2, #0
 800d0ca:	eb13 0b01 	adds.w	fp, r3, r1
 800d0ce:	eb44 0c02 	adc.w	ip, r4, r2
 800d0d2:	4658      	mov	r0, fp
 800d0d4:	4661      	mov	r1, ip
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	f04f 0400 	mov.w	r4, #0
 800d0de:	461a      	mov	r2, r3
 800d0e0:	4623      	mov	r3, r4
 800d0e2:	f7f3 f94d 	bl	8000380 <__aeabi_uldivmod>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d0ec:	e122      	b.n	800d334 <UART_SetConfig+0x13ac>
 800d0ee:	bf00      	nop
 800d0f0:	51615500 	.word	0x51615500
 800d0f4:	00000000 	.word	0x00000000
 800d0f8:	a2c2aa00 	.word	0xa2c2aa00
 800d0fc:	00000000 	.word	0x00000000
 800d100:	58024400 	.word	0x58024400
 800d104:	03d09000 	.word	0x03d09000
 800d108:	d0900000 	.word	0xd0900000
 800d10c:	07a12000 	.word	0x07a12000
 800d110:	0f424000 	.word	0x0f424000
 800d114:	1e848000 	.word	0x1e848000
 800d118:	3d090000 	.word	0x3d090000
 800d11c:	61a80000 	.word	0x61a80000
 800d120:	7a120000 	.word	0x7a120000
 800d124:	f4240000 	.word	0xf4240000
 800d128:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d130:	2b00      	cmp	r3, #0
 800d132:	d05b      	beq.n	800d1ec <UART_SetConfig+0x1264>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d053      	beq.n	800d1e4 <UART_SetConfig+0x125c>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d140:	2b02      	cmp	r3, #2
 800d142:	d04b      	beq.n	800d1dc <UART_SetConfig+0x1254>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d148:	2b03      	cmp	r3, #3
 800d14a:	d043      	beq.n	800d1d4 <UART_SetConfig+0x124c>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d150:	2b04      	cmp	r3, #4
 800d152:	d03b      	beq.n	800d1cc <UART_SetConfig+0x1244>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d158:	2b05      	cmp	r3, #5
 800d15a:	d033      	beq.n	800d1c4 <UART_SetConfig+0x123c>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d160:	2b06      	cmp	r3, #6
 800d162:	d02b      	beq.n	800d1bc <UART_SetConfig+0x1234>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d168:	2b07      	cmp	r3, #7
 800d16a:	d023      	beq.n	800d1b4 <UART_SetConfig+0x122c>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d170:	2b08      	cmp	r3, #8
 800d172:	d01b      	beq.n	800d1ac <UART_SetConfig+0x1224>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d178:	2b09      	cmp	r3, #9
 800d17a:	d013      	beq.n	800d1a4 <UART_SetConfig+0x121c>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d180:	2b0a      	cmp	r3, #10
 800d182:	d00b      	beq.n	800d19c <UART_SetConfig+0x1214>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d188:	2b0b      	cmp	r3, #11
 800d18a:	d103      	bne.n	800d194 <UART_SetConfig+0x120c>
 800d18c:	4bc0      	ldr	r3, [pc, #768]	; (800d490 <UART_SetConfig+0x1508>)
 800d18e:	f04f 0400 	mov.w	r4, #0
 800d192:	e02e      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d194:	4bbf      	ldr	r3, [pc, #764]	; (800d494 <UART_SetConfig+0x150c>)
 800d196:	f04f 0400 	mov.w	r4, #0
 800d19a:	e02a      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d19c:	4bbe      	ldr	r3, [pc, #760]	; (800d498 <UART_SetConfig+0x1510>)
 800d19e:	f04f 0400 	mov.w	r4, #0
 800d1a2:	e026      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1a4:	4bbd      	ldr	r3, [pc, #756]	; (800d49c <UART_SetConfig+0x1514>)
 800d1a6:	f04f 0400 	mov.w	r4, #0
 800d1aa:	e022      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1ac:	4bbc      	ldr	r3, [pc, #752]	; (800d4a0 <UART_SetConfig+0x1518>)
 800d1ae:	f04f 0400 	mov.w	r4, #0
 800d1b2:	e01e      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1b4:	4bbb      	ldr	r3, [pc, #748]	; (800d4a4 <UART_SetConfig+0x151c>)
 800d1b6:	f04f 0400 	mov.w	r4, #0
 800d1ba:	e01a      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1bc:	a4b0      	add	r4, pc, #704	; (adr r4, 800d480 <UART_SetConfig+0x14f8>)
 800d1be:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d1c2:	e016      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1c4:	4bb8      	ldr	r3, [pc, #736]	; (800d4a8 <UART_SetConfig+0x1520>)
 800d1c6:	f04f 0400 	mov.w	r4, #0
 800d1ca:	e012      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1cc:	4bb7      	ldr	r3, [pc, #732]	; (800d4ac <UART_SetConfig+0x1524>)
 800d1ce:	f04f 0400 	mov.w	r4, #0
 800d1d2:	e00e      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1d4:	a4ac      	add	r4, pc, #688	; (adr r4, 800d488 <UART_SetConfig+0x1500>)
 800d1d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d1da:	e00a      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1dc:	4bb4      	ldr	r3, [pc, #720]	; (800d4b0 <UART_SetConfig+0x1528>)
 800d1de:	f04f 0400 	mov.w	r4, #0
 800d1e2:	e006      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1e4:	4bb3      	ldr	r3, [pc, #716]	; (800d4b4 <UART_SetConfig+0x152c>)
 800d1e6:	f04f 0400 	mov.w	r4, #0
 800d1ea:	e002      	b.n	800d1f2 <UART_SetConfig+0x126a>
 800d1ec:	4ba9      	ldr	r3, [pc, #676]	; (800d494 <UART_SetConfig+0x150c>)
 800d1ee:	f04f 0400 	mov.w	r4, #0
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	6852      	ldr	r2, [r2, #4]
 800d1f6:	0852      	lsrs	r2, r2, #1
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	f04f 0200 	mov.w	r2, #0
 800d1fe:	eb13 0b01 	adds.w	fp, r3, r1
 800d202:	eb44 0c02 	adc.w	ip, r4, r2
 800d206:	4658      	mov	r0, fp
 800d208:	4661      	mov	r1, ip
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	f04f 0400 	mov.w	r4, #0
 800d212:	461a      	mov	r2, r3
 800d214:	4623      	mov	r3, r4
 800d216:	f7f3 f8b3 	bl	8000380 <__aeabi_uldivmod>
 800d21a:	4603      	mov	r3, r0
 800d21c:	460c      	mov	r4, r1
 800d21e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d220:	e088      	b.n	800d334 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d226:	2b00      	cmp	r3, #0
 800d228:	d064      	beq.n	800d2f4 <UART_SetConfig+0x136c>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d05b      	beq.n	800d2ea <UART_SetConfig+0x1362>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d236:	2b02      	cmp	r3, #2
 800d238:	d052      	beq.n	800d2e0 <UART_SetConfig+0x1358>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d04a      	beq.n	800d2d8 <UART_SetConfig+0x1350>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d246:	2b04      	cmp	r3, #4
 800d248:	d041      	beq.n	800d2ce <UART_SetConfig+0x1346>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	2b05      	cmp	r3, #5
 800d250:	d039      	beq.n	800d2c6 <UART_SetConfig+0x133e>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	2b06      	cmp	r3, #6
 800d258:	d031      	beq.n	800d2be <UART_SetConfig+0x1336>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25e:	2b07      	cmp	r3, #7
 800d260:	d028      	beq.n	800d2b4 <UART_SetConfig+0x132c>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d266:	2b08      	cmp	r3, #8
 800d268:	d01f      	beq.n	800d2aa <UART_SetConfig+0x1322>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26e:	2b09      	cmp	r3, #9
 800d270:	d016      	beq.n	800d2a0 <UART_SetConfig+0x1318>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d276:	2b0a      	cmp	r3, #10
 800d278:	d00d      	beq.n	800d296 <UART_SetConfig+0x130e>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27e:	2b0b      	cmp	r3, #11
 800d280:	d104      	bne.n	800d28c <UART_SetConfig+0x1304>
 800d282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d286:	f04f 0400 	mov.w	r4, #0
 800d28a:	e037      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d28c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d290:	f04f 0400 	mov.w	r4, #0
 800d294:	e032      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d29a:	f04f 0400 	mov.w	r4, #0
 800d29e:	e02d      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d2a4:	f04f 0400 	mov.w	r4, #0
 800d2a8:	e028      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d2ae:	f04f 0400 	mov.w	r4, #0
 800d2b2:	e023      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d2b8:	f04f 0400 	mov.w	r4, #0
 800d2bc:	e01e      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2be:	4b7e      	ldr	r3, [pc, #504]	; (800d4b8 <UART_SetConfig+0x1530>)
 800d2c0:	f04f 0400 	mov.w	r4, #0
 800d2c4:	e01a      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2c6:	4b7d      	ldr	r3, [pc, #500]	; (800d4bc <UART_SetConfig+0x1534>)
 800d2c8:	f04f 0400 	mov.w	r4, #0
 800d2cc:	e016      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d2d2:	f04f 0400 	mov.w	r4, #0
 800d2d6:	e011      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2d8:	4b79      	ldr	r3, [pc, #484]	; (800d4c0 <UART_SetConfig+0x1538>)
 800d2da:	f04f 0400 	mov.w	r4, #0
 800d2de:	e00d      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d2e4:	f04f 0400 	mov.w	r4, #0
 800d2e8:	e008      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d2ee:	f04f 0400 	mov.w	r4, #0
 800d2f2:	e003      	b.n	800d2fc <UART_SetConfig+0x1374>
 800d2f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d2f8:	f04f 0400 	mov.w	r4, #0
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	6852      	ldr	r2, [r2, #4]
 800d300:	0852      	lsrs	r2, r2, #1
 800d302:	4611      	mov	r1, r2
 800d304:	f04f 0200 	mov.w	r2, #0
 800d308:	eb13 0b01 	adds.w	fp, r3, r1
 800d30c:	eb44 0c02 	adc.w	ip, r4, r2
 800d310:	4658      	mov	r0, fp
 800d312:	4661      	mov	r1, ip
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	f04f 0400 	mov.w	r4, #0
 800d31c:	461a      	mov	r2, r3
 800d31e:	4623      	mov	r3, r4
 800d320:	f7f3 f82e 	bl	8000380 <__aeabi_uldivmod>
 800d324:	4603      	mov	r3, r0
 800d326:	460c      	mov	r4, r1
 800d328:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d32a:	e003      	b.n	800d334 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800d32c:	2301      	movs	r3, #1
 800d32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800d332:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d33a:	d309      	bcc.n	800d350 <UART_SetConfig+0x13c8>
 800d33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d342:	d205      	bcs.n	800d350 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d34a:	60da      	str	r2, [r3, #12]
 800d34c:	f000 bf85 	b.w	800e25a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d356:	f000 bf80 	b.w	800e25a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d362:	f040 83da 	bne.w	800db1a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800d366:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d36a:	2b40      	cmp	r3, #64	; 0x40
 800d36c:	f200 83b3 	bhi.w	800dad6 <UART_SetConfig+0x1b4e>
 800d370:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <UART_SetConfig+0x13f0>)
 800d372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d376:	bf00      	nop
 800d378:	0800d4c5 	.word	0x0800d4c5
 800d37c:	0800d57d 	.word	0x0800d57d
 800d380:	0800dad7 	.word	0x0800dad7
 800d384:	0800dad7 	.word	0x0800dad7
 800d388:	0800d635 	.word	0x0800d635
 800d38c:	0800dad7 	.word	0x0800dad7
 800d390:	0800dad7 	.word	0x0800dad7
 800d394:	0800dad7 	.word	0x0800dad7
 800d398:	0800d6f1 	.word	0x0800d6f1
 800d39c:	0800dad7 	.word	0x0800dad7
 800d3a0:	0800dad7 	.word	0x0800dad7
 800d3a4:	0800dad7 	.word	0x0800dad7
 800d3a8:	0800dad7 	.word	0x0800dad7
 800d3ac:	0800dad7 	.word	0x0800dad7
 800d3b0:	0800dad7 	.word	0x0800dad7
 800d3b4:	0800dad7 	.word	0x0800dad7
 800d3b8:	0800d7ad 	.word	0x0800d7ad
 800d3bc:	0800dad7 	.word	0x0800dad7
 800d3c0:	0800dad7 	.word	0x0800dad7
 800d3c4:	0800dad7 	.word	0x0800dad7
 800d3c8:	0800dad7 	.word	0x0800dad7
 800d3cc:	0800dad7 	.word	0x0800dad7
 800d3d0:	0800dad7 	.word	0x0800dad7
 800d3d4:	0800dad7 	.word	0x0800dad7
 800d3d8:	0800dad7 	.word	0x0800dad7
 800d3dc:	0800dad7 	.word	0x0800dad7
 800d3e0:	0800dad7 	.word	0x0800dad7
 800d3e4:	0800dad7 	.word	0x0800dad7
 800d3e8:	0800dad7 	.word	0x0800dad7
 800d3ec:	0800dad7 	.word	0x0800dad7
 800d3f0:	0800dad7 	.word	0x0800dad7
 800d3f4:	0800dad7 	.word	0x0800dad7
 800d3f8:	0800d91f 	.word	0x0800d91f
 800d3fc:	0800dad7 	.word	0x0800dad7
 800d400:	0800dad7 	.word	0x0800dad7
 800d404:	0800dad7 	.word	0x0800dad7
 800d408:	0800dad7 	.word	0x0800dad7
 800d40c:	0800dad7 	.word	0x0800dad7
 800d410:	0800dad7 	.word	0x0800dad7
 800d414:	0800dad7 	.word	0x0800dad7
 800d418:	0800dad7 	.word	0x0800dad7
 800d41c:	0800dad7 	.word	0x0800dad7
 800d420:	0800dad7 	.word	0x0800dad7
 800d424:	0800dad7 	.word	0x0800dad7
 800d428:	0800dad7 	.word	0x0800dad7
 800d42c:	0800dad7 	.word	0x0800dad7
 800d430:	0800dad7 	.word	0x0800dad7
 800d434:	0800dad7 	.word	0x0800dad7
 800d438:	0800dad7 	.word	0x0800dad7
 800d43c:	0800dad7 	.word	0x0800dad7
 800d440:	0800dad7 	.word	0x0800dad7
 800d444:	0800dad7 	.word	0x0800dad7
 800d448:	0800dad7 	.word	0x0800dad7
 800d44c:	0800dad7 	.word	0x0800dad7
 800d450:	0800dad7 	.word	0x0800dad7
 800d454:	0800dad7 	.word	0x0800dad7
 800d458:	0800dad7 	.word	0x0800dad7
 800d45c:	0800dad7 	.word	0x0800dad7
 800d460:	0800dad7 	.word	0x0800dad7
 800d464:	0800dad7 	.word	0x0800dad7
 800d468:	0800dad7 	.word	0x0800dad7
 800d46c:	0800dad7 	.word	0x0800dad7
 800d470:	0800dad7 	.word	0x0800dad7
 800d474:	0800dad7 	.word	0x0800dad7
 800d478:	0800da15 	.word	0x0800da15
 800d47c:	f3af 8000 	nop.w
 800d480:	05161500 	.word	0x05161500
 800d484:	00000000 	.word	0x00000000
 800d488:	0a2c2a00 	.word	0x0a2c2a00
 800d48c:	00000000 	.word	0x00000000
 800d490:	003d0900 	.word	0x003d0900
 800d494:	3d090000 	.word	0x3d090000
 800d498:	007a1200 	.word	0x007a1200
 800d49c:	00f42400 	.word	0x00f42400
 800d4a0:	01e84800 	.word	0x01e84800
 800d4a4:	03d09000 	.word	0x03d09000
 800d4a8:	061a8000 	.word	0x061a8000
 800d4ac:	07a12000 	.word	0x07a12000
 800d4b0:	0f424000 	.word	0x0f424000
 800d4b4:	1e848000 	.word	0x1e848000
 800d4b8:	000aaa00 	.word	0x000aaa00
 800d4bc:	000ccc00 	.word	0x000ccc00
 800d4c0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4c4:	f7fb ff44 	bl	8009350 <HAL_RCC_GetPCLK1Freq>
 800d4c8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d044      	beq.n	800d55c <UART_SetConfig+0x15d4>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d03e      	beq.n	800d558 <UART_SetConfig+0x15d0>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d038      	beq.n	800d554 <UART_SetConfig+0x15cc>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d032      	beq.n	800d550 <UART_SetConfig+0x15c8>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ee:	2b04      	cmp	r3, #4
 800d4f0:	d02c      	beq.n	800d54c <UART_SetConfig+0x15c4>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f6:	2b05      	cmp	r3, #5
 800d4f8:	d026      	beq.n	800d548 <UART_SetConfig+0x15c0>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fe:	2b06      	cmp	r3, #6
 800d500:	d020      	beq.n	800d544 <UART_SetConfig+0x15bc>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d506:	2b07      	cmp	r3, #7
 800d508:	d01a      	beq.n	800d540 <UART_SetConfig+0x15b8>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	2b08      	cmp	r3, #8
 800d510:	d014      	beq.n	800d53c <UART_SetConfig+0x15b4>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	2b09      	cmp	r3, #9
 800d518:	d00e      	beq.n	800d538 <UART_SetConfig+0x15b0>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51e:	2b0a      	cmp	r3, #10
 800d520:	d008      	beq.n	800d534 <UART_SetConfig+0x15ac>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d526:	2b0b      	cmp	r3, #11
 800d528:	d102      	bne.n	800d530 <UART_SetConfig+0x15a8>
 800d52a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d52e:	e016      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d530:	2301      	movs	r3, #1
 800d532:	e014      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d534:	2380      	movs	r3, #128	; 0x80
 800d536:	e012      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d538:	2340      	movs	r3, #64	; 0x40
 800d53a:	e010      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d53c:	2320      	movs	r3, #32
 800d53e:	e00e      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d540:	2310      	movs	r3, #16
 800d542:	e00c      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d544:	230c      	movs	r3, #12
 800d546:	e00a      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d548:	230a      	movs	r3, #10
 800d54a:	e008      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d54c:	2308      	movs	r3, #8
 800d54e:	e006      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d550:	2306      	movs	r3, #6
 800d552:	e004      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d554:	2304      	movs	r3, #4
 800d556:	e002      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d558:	2302      	movs	r3, #2
 800d55a:	e000      	b.n	800d55e <UART_SetConfig+0x15d6>
 800d55c:	2301      	movs	r3, #1
 800d55e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d560:	fbb2 f3f3 	udiv	r3, r2, r3
 800d564:	005a      	lsls	r2, r3, #1
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	085b      	lsrs	r3, r3, #1
 800d56c:	441a      	add	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	fbb2 f3f3 	udiv	r3, r2, r3
 800d576:	b29b      	uxth	r3, r3
 800d578:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d57a:	e2b0      	b.n	800dade <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d57c:	f7fb fefe 	bl	800937c <HAL_RCC_GetPCLK2Freq>
 800d580:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d586:	2b00      	cmp	r3, #0
 800d588:	d044      	beq.n	800d614 <UART_SetConfig+0x168c>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d03e      	beq.n	800d610 <UART_SetConfig+0x1688>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d596:	2b02      	cmp	r3, #2
 800d598:	d038      	beq.n	800d60c <UART_SetConfig+0x1684>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	d032      	beq.n	800d608 <UART_SetConfig+0x1680>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a6:	2b04      	cmp	r3, #4
 800d5a8:	d02c      	beq.n	800d604 <UART_SetConfig+0x167c>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	2b05      	cmp	r3, #5
 800d5b0:	d026      	beq.n	800d600 <UART_SetConfig+0x1678>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b6:	2b06      	cmp	r3, #6
 800d5b8:	d020      	beq.n	800d5fc <UART_SetConfig+0x1674>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5be:	2b07      	cmp	r3, #7
 800d5c0:	d01a      	beq.n	800d5f8 <UART_SetConfig+0x1670>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c6:	2b08      	cmp	r3, #8
 800d5c8:	d014      	beq.n	800d5f4 <UART_SetConfig+0x166c>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	2b09      	cmp	r3, #9
 800d5d0:	d00e      	beq.n	800d5f0 <UART_SetConfig+0x1668>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d6:	2b0a      	cmp	r3, #10
 800d5d8:	d008      	beq.n	800d5ec <UART_SetConfig+0x1664>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5de:	2b0b      	cmp	r3, #11
 800d5e0:	d102      	bne.n	800d5e8 <UART_SetConfig+0x1660>
 800d5e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5e6:	e016      	b.n	800d616 <UART_SetConfig+0x168e>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e014      	b.n	800d616 <UART_SetConfig+0x168e>
 800d5ec:	2380      	movs	r3, #128	; 0x80
 800d5ee:	e012      	b.n	800d616 <UART_SetConfig+0x168e>
 800d5f0:	2340      	movs	r3, #64	; 0x40
 800d5f2:	e010      	b.n	800d616 <UART_SetConfig+0x168e>
 800d5f4:	2320      	movs	r3, #32
 800d5f6:	e00e      	b.n	800d616 <UART_SetConfig+0x168e>
 800d5f8:	2310      	movs	r3, #16
 800d5fa:	e00c      	b.n	800d616 <UART_SetConfig+0x168e>
 800d5fc:	230c      	movs	r3, #12
 800d5fe:	e00a      	b.n	800d616 <UART_SetConfig+0x168e>
 800d600:	230a      	movs	r3, #10
 800d602:	e008      	b.n	800d616 <UART_SetConfig+0x168e>
 800d604:	2308      	movs	r3, #8
 800d606:	e006      	b.n	800d616 <UART_SetConfig+0x168e>
 800d608:	2306      	movs	r3, #6
 800d60a:	e004      	b.n	800d616 <UART_SetConfig+0x168e>
 800d60c:	2304      	movs	r3, #4
 800d60e:	e002      	b.n	800d616 <UART_SetConfig+0x168e>
 800d610:	2302      	movs	r3, #2
 800d612:	e000      	b.n	800d616 <UART_SetConfig+0x168e>
 800d614:	2301      	movs	r3, #1
 800d616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d618:	fbb2 f3f3 	udiv	r3, r2, r3
 800d61c:	005a      	lsls	r2, r3, #1
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	085b      	lsrs	r3, r3, #1
 800d624:	441a      	add	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d62e:	b29b      	uxth	r3, r3
 800d630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d632:	e254      	b.n	800dade <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d634:	f107 0318 	add.w	r3, r7, #24
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fd f821 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d63e:	69fa      	ldr	r2, [r7, #28]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	2b00      	cmp	r3, #0
 800d646:	d044      	beq.n	800d6d2 <UART_SetConfig+0x174a>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d03e      	beq.n	800d6ce <UART_SetConfig+0x1746>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d654:	2b02      	cmp	r3, #2
 800d656:	d038      	beq.n	800d6ca <UART_SetConfig+0x1742>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	2b03      	cmp	r3, #3
 800d65e:	d032      	beq.n	800d6c6 <UART_SetConfig+0x173e>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d664:	2b04      	cmp	r3, #4
 800d666:	d02c      	beq.n	800d6c2 <UART_SetConfig+0x173a>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66c:	2b05      	cmp	r3, #5
 800d66e:	d026      	beq.n	800d6be <UART_SetConfig+0x1736>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d674:	2b06      	cmp	r3, #6
 800d676:	d020      	beq.n	800d6ba <UART_SetConfig+0x1732>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67c:	2b07      	cmp	r3, #7
 800d67e:	d01a      	beq.n	800d6b6 <UART_SetConfig+0x172e>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d684:	2b08      	cmp	r3, #8
 800d686:	d014      	beq.n	800d6b2 <UART_SetConfig+0x172a>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68c:	2b09      	cmp	r3, #9
 800d68e:	d00e      	beq.n	800d6ae <UART_SetConfig+0x1726>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d694:	2b0a      	cmp	r3, #10
 800d696:	d008      	beq.n	800d6aa <UART_SetConfig+0x1722>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69c:	2b0b      	cmp	r3, #11
 800d69e:	d102      	bne.n	800d6a6 <UART_SetConfig+0x171e>
 800d6a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6a4:	e016      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e014      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6aa:	2380      	movs	r3, #128	; 0x80
 800d6ac:	e012      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6ae:	2340      	movs	r3, #64	; 0x40
 800d6b0:	e010      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6b2:	2320      	movs	r3, #32
 800d6b4:	e00e      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6b6:	2310      	movs	r3, #16
 800d6b8:	e00c      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6ba:	230c      	movs	r3, #12
 800d6bc:	e00a      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6be:	230a      	movs	r3, #10
 800d6c0:	e008      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6c2:	2308      	movs	r3, #8
 800d6c4:	e006      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6c6:	2306      	movs	r3, #6
 800d6c8:	e004      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6ca:	2304      	movs	r3, #4
 800d6cc:	e002      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	e000      	b.n	800d6d4 <UART_SetConfig+0x174c>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6d8:	005a      	lsls	r2, r3, #1
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	085b      	lsrs	r3, r3, #1
 800d6e0:	441a      	add	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d6ee:	e1f6      	b.n	800dade <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6f0:	f107 030c 	add.w	r3, r7, #12
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fd f90f 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d700:	2b00      	cmp	r3, #0
 800d702:	d044      	beq.n	800d78e <UART_SetConfig+0x1806>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d03e      	beq.n	800d78a <UART_SetConfig+0x1802>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d710:	2b02      	cmp	r3, #2
 800d712:	d038      	beq.n	800d786 <UART_SetConfig+0x17fe>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d718:	2b03      	cmp	r3, #3
 800d71a:	d032      	beq.n	800d782 <UART_SetConfig+0x17fa>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d720:	2b04      	cmp	r3, #4
 800d722:	d02c      	beq.n	800d77e <UART_SetConfig+0x17f6>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d728:	2b05      	cmp	r3, #5
 800d72a:	d026      	beq.n	800d77a <UART_SetConfig+0x17f2>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d730:	2b06      	cmp	r3, #6
 800d732:	d020      	beq.n	800d776 <UART_SetConfig+0x17ee>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d738:	2b07      	cmp	r3, #7
 800d73a:	d01a      	beq.n	800d772 <UART_SetConfig+0x17ea>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d740:	2b08      	cmp	r3, #8
 800d742:	d014      	beq.n	800d76e <UART_SetConfig+0x17e6>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d748:	2b09      	cmp	r3, #9
 800d74a:	d00e      	beq.n	800d76a <UART_SetConfig+0x17e2>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d750:	2b0a      	cmp	r3, #10
 800d752:	d008      	beq.n	800d766 <UART_SetConfig+0x17de>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d758:	2b0b      	cmp	r3, #11
 800d75a:	d102      	bne.n	800d762 <UART_SetConfig+0x17da>
 800d75c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d760:	e016      	b.n	800d790 <UART_SetConfig+0x1808>
 800d762:	2301      	movs	r3, #1
 800d764:	e014      	b.n	800d790 <UART_SetConfig+0x1808>
 800d766:	2380      	movs	r3, #128	; 0x80
 800d768:	e012      	b.n	800d790 <UART_SetConfig+0x1808>
 800d76a:	2340      	movs	r3, #64	; 0x40
 800d76c:	e010      	b.n	800d790 <UART_SetConfig+0x1808>
 800d76e:	2320      	movs	r3, #32
 800d770:	e00e      	b.n	800d790 <UART_SetConfig+0x1808>
 800d772:	2310      	movs	r3, #16
 800d774:	e00c      	b.n	800d790 <UART_SetConfig+0x1808>
 800d776:	230c      	movs	r3, #12
 800d778:	e00a      	b.n	800d790 <UART_SetConfig+0x1808>
 800d77a:	230a      	movs	r3, #10
 800d77c:	e008      	b.n	800d790 <UART_SetConfig+0x1808>
 800d77e:	2308      	movs	r3, #8
 800d780:	e006      	b.n	800d790 <UART_SetConfig+0x1808>
 800d782:	2306      	movs	r3, #6
 800d784:	e004      	b.n	800d790 <UART_SetConfig+0x1808>
 800d786:	2304      	movs	r3, #4
 800d788:	e002      	b.n	800d790 <UART_SetConfig+0x1808>
 800d78a:	2302      	movs	r3, #2
 800d78c:	e000      	b.n	800d790 <UART_SetConfig+0x1808>
 800d78e:	2301      	movs	r3, #1
 800d790:	fbb2 f3f3 	udiv	r3, r2, r3
 800d794:	005a      	lsls	r2, r3, #1
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	085b      	lsrs	r3, r3, #1
 800d79c:	441a      	add	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d7aa:	e198      	b.n	800dade <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7ac:	4b87      	ldr	r3, [pc, #540]	; (800d9cc <UART_SetConfig+0x1a44>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 0320 	and.w	r3, r3, #32
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d05e      	beq.n	800d876 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7b8:	4b84      	ldr	r3, [pc, #528]	; (800d9cc <UART_SetConfig+0x1a44>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	08db      	lsrs	r3, r3, #3
 800d7be:	f003 0303 	and.w	r3, r3, #3
 800d7c2:	4a83      	ldr	r2, [pc, #524]	; (800d9d0 <UART_SetConfig+0x1a48>)
 800d7c4:	40da      	lsrs	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d044      	beq.n	800d858 <UART_SetConfig+0x18d0>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d03e      	beq.n	800d854 <UART_SetConfig+0x18cc>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	d038      	beq.n	800d850 <UART_SetConfig+0x18c8>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	d032      	beq.n	800d84c <UART_SetConfig+0x18c4>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ea:	2b04      	cmp	r3, #4
 800d7ec:	d02c      	beq.n	800d848 <UART_SetConfig+0x18c0>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	2b05      	cmp	r3, #5
 800d7f4:	d026      	beq.n	800d844 <UART_SetConfig+0x18bc>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	2b06      	cmp	r3, #6
 800d7fc:	d020      	beq.n	800d840 <UART_SetConfig+0x18b8>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d802:	2b07      	cmp	r3, #7
 800d804:	d01a      	beq.n	800d83c <UART_SetConfig+0x18b4>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80a:	2b08      	cmp	r3, #8
 800d80c:	d014      	beq.n	800d838 <UART_SetConfig+0x18b0>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d812:	2b09      	cmp	r3, #9
 800d814:	d00e      	beq.n	800d834 <UART_SetConfig+0x18ac>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81a:	2b0a      	cmp	r3, #10
 800d81c:	d008      	beq.n	800d830 <UART_SetConfig+0x18a8>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d822:	2b0b      	cmp	r3, #11
 800d824:	d102      	bne.n	800d82c <UART_SetConfig+0x18a4>
 800d826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d82a:	e016      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d82c:	2301      	movs	r3, #1
 800d82e:	e014      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d830:	2380      	movs	r3, #128	; 0x80
 800d832:	e012      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d834:	2340      	movs	r3, #64	; 0x40
 800d836:	e010      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d838:	2320      	movs	r3, #32
 800d83a:	e00e      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d83c:	2310      	movs	r3, #16
 800d83e:	e00c      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d840:	230c      	movs	r3, #12
 800d842:	e00a      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d844:	230a      	movs	r3, #10
 800d846:	e008      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d848:	2308      	movs	r3, #8
 800d84a:	e006      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d84c:	2306      	movs	r3, #6
 800d84e:	e004      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d850:	2304      	movs	r3, #4
 800d852:	e002      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d854:	2302      	movs	r3, #2
 800d856:	e000      	b.n	800d85a <UART_SetConfig+0x18d2>
 800d858:	2301      	movs	r3, #1
 800d85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d85e:	005a      	lsls	r2, r3, #1
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	085b      	lsrs	r3, r3, #1
 800d866:	441a      	add	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d870:	b29b      	uxth	r3, r3
 800d872:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800d874:	e133      	b.n	800dade <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d043      	beq.n	800d906 <UART_SetConfig+0x197e>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d882:	2b01      	cmp	r3, #1
 800d884:	d03d      	beq.n	800d902 <UART_SetConfig+0x197a>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d037      	beq.n	800d8fe <UART_SetConfig+0x1976>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d892:	2b03      	cmp	r3, #3
 800d894:	d031      	beq.n	800d8fa <UART_SetConfig+0x1972>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d02b      	beq.n	800d8f6 <UART_SetConfig+0x196e>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a2:	2b05      	cmp	r3, #5
 800d8a4:	d025      	beq.n	800d8f2 <UART_SetConfig+0x196a>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8aa:	2b06      	cmp	r3, #6
 800d8ac:	d01f      	beq.n	800d8ee <UART_SetConfig+0x1966>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b2:	2b07      	cmp	r3, #7
 800d8b4:	d019      	beq.n	800d8ea <UART_SetConfig+0x1962>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ba:	2b08      	cmp	r3, #8
 800d8bc:	d013      	beq.n	800d8e6 <UART_SetConfig+0x195e>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c2:	2b09      	cmp	r3, #9
 800d8c4:	d00d      	beq.n	800d8e2 <UART_SetConfig+0x195a>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ca:	2b0a      	cmp	r3, #10
 800d8cc:	d007      	beq.n	800d8de <UART_SetConfig+0x1956>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d2:	2b0b      	cmp	r3, #11
 800d8d4:	d101      	bne.n	800d8da <UART_SetConfig+0x1952>
 800d8d6:	4b3f      	ldr	r3, [pc, #252]	; (800d9d4 <UART_SetConfig+0x1a4c>)
 800d8d8:	e016      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8da:	4b3f      	ldr	r3, [pc, #252]	; (800d9d8 <UART_SetConfig+0x1a50>)
 800d8dc:	e014      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8de:	4b3f      	ldr	r3, [pc, #252]	; (800d9dc <UART_SetConfig+0x1a54>)
 800d8e0:	e012      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8e2:	4b3f      	ldr	r3, [pc, #252]	; (800d9e0 <UART_SetConfig+0x1a58>)
 800d8e4:	e010      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8e6:	4b3f      	ldr	r3, [pc, #252]	; (800d9e4 <UART_SetConfig+0x1a5c>)
 800d8e8:	e00e      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8ea:	4b3f      	ldr	r3, [pc, #252]	; (800d9e8 <UART_SetConfig+0x1a60>)
 800d8ec:	e00c      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8ee:	4b3f      	ldr	r3, [pc, #252]	; (800d9ec <UART_SetConfig+0x1a64>)
 800d8f0:	e00a      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8f2:	4b3f      	ldr	r3, [pc, #252]	; (800d9f0 <UART_SetConfig+0x1a68>)
 800d8f4:	e008      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8f6:	4b3f      	ldr	r3, [pc, #252]	; (800d9f4 <UART_SetConfig+0x1a6c>)
 800d8f8:	e006      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8fa:	4b3f      	ldr	r3, [pc, #252]	; (800d9f8 <UART_SetConfig+0x1a70>)
 800d8fc:	e004      	b.n	800d908 <UART_SetConfig+0x1980>
 800d8fe:	4b3f      	ldr	r3, [pc, #252]	; (800d9fc <UART_SetConfig+0x1a74>)
 800d900:	e002      	b.n	800d908 <UART_SetConfig+0x1980>
 800d902:	4b33      	ldr	r3, [pc, #204]	; (800d9d0 <UART_SetConfig+0x1a48>)
 800d904:	e000      	b.n	800d908 <UART_SetConfig+0x1980>
 800d906:	4b34      	ldr	r3, [pc, #208]	; (800d9d8 <UART_SetConfig+0x1a50>)
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	6852      	ldr	r2, [r2, #4]
 800d90c:	0852      	lsrs	r2, r2, #1
 800d90e:	441a      	add	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	fbb2 f3f3 	udiv	r3, r2, r3
 800d918:	b29b      	uxth	r3, r3
 800d91a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d91c:	e0df      	b.n	800dade <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d922:	2b00      	cmp	r3, #0
 800d924:	d045      	beq.n	800d9b2 <UART_SetConfig+0x1a2a>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d03f      	beq.n	800d9ae <UART_SetConfig+0x1a26>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d932:	2b02      	cmp	r3, #2
 800d934:	d039      	beq.n	800d9aa <UART_SetConfig+0x1a22>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d033      	beq.n	800d9a6 <UART_SetConfig+0x1a1e>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d942:	2b04      	cmp	r3, #4
 800d944:	d02d      	beq.n	800d9a2 <UART_SetConfig+0x1a1a>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d027      	beq.n	800d99e <UART_SetConfig+0x1a16>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d952:	2b06      	cmp	r3, #6
 800d954:	d021      	beq.n	800d99a <UART_SetConfig+0x1a12>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95a:	2b07      	cmp	r3, #7
 800d95c:	d01b      	beq.n	800d996 <UART_SetConfig+0x1a0e>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d962:	2b08      	cmp	r3, #8
 800d964:	d015      	beq.n	800d992 <UART_SetConfig+0x1a0a>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96a:	2b09      	cmp	r3, #9
 800d96c:	d00f      	beq.n	800d98e <UART_SetConfig+0x1a06>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d972:	2b0a      	cmp	r3, #10
 800d974:	d008      	beq.n	800d988 <UART_SetConfig+0x1a00>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97a:	2b0b      	cmp	r3, #11
 800d97c:	d102      	bne.n	800d984 <UART_SetConfig+0x19fc>
 800d97e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d982:	e017      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d984:	4b18      	ldr	r3, [pc, #96]	; (800d9e8 <UART_SetConfig+0x1a60>)
 800d986:	e015      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d988:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d98c:	e012      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d98e:	4b1c      	ldr	r3, [pc, #112]	; (800da00 <UART_SetConfig+0x1a78>)
 800d990:	e010      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d992:	4b1c      	ldr	r3, [pc, #112]	; (800da04 <UART_SetConfig+0x1a7c>)
 800d994:	e00e      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d996:	4b0f      	ldr	r3, [pc, #60]	; (800d9d4 <UART_SetConfig+0x1a4c>)
 800d998:	e00c      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d99a:	4b1b      	ldr	r3, [pc, #108]	; (800da08 <UART_SetConfig+0x1a80>)
 800d99c:	e00a      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d99e:	4b1b      	ldr	r3, [pc, #108]	; (800da0c <UART_SetConfig+0x1a84>)
 800d9a0:	e008      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d9a2:	4b0e      	ldr	r3, [pc, #56]	; (800d9dc <UART_SetConfig+0x1a54>)
 800d9a4:	e006      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d9a6:	4b1a      	ldr	r3, [pc, #104]	; (800da10 <UART_SetConfig+0x1a88>)
 800d9a8:	e004      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d9aa:	4b0d      	ldr	r3, [pc, #52]	; (800d9e0 <UART_SetConfig+0x1a58>)
 800d9ac:	e002      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d9ae:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <UART_SetConfig+0x1a5c>)
 800d9b0:	e000      	b.n	800d9b4 <UART_SetConfig+0x1a2c>
 800d9b2:	4b0d      	ldr	r3, [pc, #52]	; (800d9e8 <UART_SetConfig+0x1a60>)
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6852      	ldr	r2, [r2, #4]
 800d9b8:	0852      	lsrs	r2, r2, #1
 800d9ba:	441a      	add	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d9c8:	e089      	b.n	800dade <UART_SetConfig+0x1b56>
 800d9ca:	bf00      	nop
 800d9cc:	58024400 	.word	0x58024400
 800d9d0:	03d09000 	.word	0x03d09000
 800d9d4:	0007a120 	.word	0x0007a120
 800d9d8:	07a12000 	.word	0x07a12000
 800d9dc:	000f4240 	.word	0x000f4240
 800d9e0:	001e8480 	.word	0x001e8480
 800d9e4:	003d0900 	.word	0x003d0900
 800d9e8:	007a1200 	.word	0x007a1200
 800d9ec:	00a2c2aa 	.word	0x00a2c2aa
 800d9f0:	00c35000 	.word	0x00c35000
 800d9f4:	00f42400 	.word	0x00f42400
 800d9f8:	01458554 	.word	0x01458554
 800d9fc:	01e84800 	.word	0x01e84800
 800da00:	0001e848 	.word	0x0001e848
 800da04:	0003d090 	.word	0x0003d090
 800da08:	000a2c2a 	.word	0x000a2c2a
 800da0c:	000c3500 	.word	0x000c3500
 800da10:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d04f      	beq.n	800dabc <UART_SetConfig+0x1b34>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da20:	2b01      	cmp	r3, #1
 800da22:	d048      	beq.n	800dab6 <UART_SetConfig+0x1b2e>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da28:	2b02      	cmp	r3, #2
 800da2a:	d041      	beq.n	800dab0 <UART_SetConfig+0x1b28>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da30:	2b03      	cmp	r3, #3
 800da32:	d03a      	beq.n	800daaa <UART_SetConfig+0x1b22>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da38:	2b04      	cmp	r3, #4
 800da3a:	d033      	beq.n	800daa4 <UART_SetConfig+0x1b1c>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da40:	2b05      	cmp	r3, #5
 800da42:	d02c      	beq.n	800da9e <UART_SetConfig+0x1b16>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da48:	2b06      	cmp	r3, #6
 800da4a:	d025      	beq.n	800da98 <UART_SetConfig+0x1b10>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	2b07      	cmp	r3, #7
 800da52:	d01e      	beq.n	800da92 <UART_SetConfig+0x1b0a>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da58:	2b08      	cmp	r3, #8
 800da5a:	d017      	beq.n	800da8c <UART_SetConfig+0x1b04>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da60:	2b09      	cmp	r3, #9
 800da62:	d010      	beq.n	800da86 <UART_SetConfig+0x1afe>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	2b0a      	cmp	r3, #10
 800da6a:	d009      	beq.n	800da80 <UART_SetConfig+0x1af8>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da70:	2b0b      	cmp	r3, #11
 800da72:	d102      	bne.n	800da7a <UART_SetConfig+0x1af2>
 800da74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da78:	e022      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800da7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800da7e:	e01f      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800da80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da84:	e01c      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800da86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da8a:	e019      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800da8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da90:	e016      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800da92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da96:	e013      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800da98:	f241 5354 	movw	r3, #5460	; 0x1554
 800da9c:	e010      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800da9e:	f641 1398 	movw	r3, #6552	; 0x1998
 800daa2:	e00d      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800daa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800daa8:	e00a      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800daaa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800daae:	e007      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800dab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dab4:	e004      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800dab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800daba:	e001      	b.n	800dac0 <UART_SetConfig+0x1b38>
 800dabc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	6852      	ldr	r2, [r2, #4]
 800dac4:	0852      	lsrs	r2, r2, #1
 800dac6:	441a      	add	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dad4:	e003      	b.n	800dade <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800dadc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae0:	2b0f      	cmp	r3, #15
 800dae2:	d916      	bls.n	800db12 <UART_SetConfig+0x1b8a>
 800dae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daea:	d212      	bcs.n	800db12 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800daec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daee:	b29b      	uxth	r3, r3
 800daf0:	f023 030f 	bic.w	r3, r3, #15
 800daf4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800daf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf8:	085b      	lsrs	r3, r3, #1
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	f003 0307 	and.w	r3, r3, #7
 800db00:	b29a      	uxth	r2, r3
 800db02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db04:	4313      	orrs	r3, r2
 800db06:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db0e:	60da      	str	r2, [r3, #12]
 800db10:	e3a3      	b.n	800e25a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db18:	e39f      	b.n	800e25a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800db1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800db1e:	2b40      	cmp	r3, #64	; 0x40
 800db20:	f200 8388 	bhi.w	800e234 <UART_SetConfig+0x22ac>
 800db24:	a201      	add	r2, pc, #4	; (adr r2, 800db2c <UART_SetConfig+0x1ba4>)
 800db26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2a:	bf00      	nop
 800db2c:	0800dc31 	.word	0x0800dc31
 800db30:	0800dce7 	.word	0x0800dce7
 800db34:	0800e235 	.word	0x0800e235
 800db38:	0800e235 	.word	0x0800e235
 800db3c:	0800dd9d 	.word	0x0800dd9d
 800db40:	0800e235 	.word	0x0800e235
 800db44:	0800e235 	.word	0x0800e235
 800db48:	0800e235 	.word	0x0800e235
 800db4c:	0800de57 	.word	0x0800de57
 800db50:	0800e235 	.word	0x0800e235
 800db54:	0800e235 	.word	0x0800e235
 800db58:	0800e235 	.word	0x0800e235
 800db5c:	0800e235 	.word	0x0800e235
 800db60:	0800e235 	.word	0x0800e235
 800db64:	0800e235 	.word	0x0800e235
 800db68:	0800e235 	.word	0x0800e235
 800db6c:	0800df11 	.word	0x0800df11
 800db70:	0800e235 	.word	0x0800e235
 800db74:	0800e235 	.word	0x0800e235
 800db78:	0800e235 	.word	0x0800e235
 800db7c:	0800e235 	.word	0x0800e235
 800db80:	0800e235 	.word	0x0800e235
 800db84:	0800e235 	.word	0x0800e235
 800db88:	0800e235 	.word	0x0800e235
 800db8c:	0800e235 	.word	0x0800e235
 800db90:	0800e235 	.word	0x0800e235
 800db94:	0800e235 	.word	0x0800e235
 800db98:	0800e235 	.word	0x0800e235
 800db9c:	0800e235 	.word	0x0800e235
 800dba0:	0800e235 	.word	0x0800e235
 800dba4:	0800e235 	.word	0x0800e235
 800dba8:	0800e235 	.word	0x0800e235
 800dbac:	0800e081 	.word	0x0800e081
 800dbb0:	0800e235 	.word	0x0800e235
 800dbb4:	0800e235 	.word	0x0800e235
 800dbb8:	0800e235 	.word	0x0800e235
 800dbbc:	0800e235 	.word	0x0800e235
 800dbc0:	0800e235 	.word	0x0800e235
 800dbc4:	0800e235 	.word	0x0800e235
 800dbc8:	0800e235 	.word	0x0800e235
 800dbcc:	0800e235 	.word	0x0800e235
 800dbd0:	0800e235 	.word	0x0800e235
 800dbd4:	0800e235 	.word	0x0800e235
 800dbd8:	0800e235 	.word	0x0800e235
 800dbdc:	0800e235 	.word	0x0800e235
 800dbe0:	0800e235 	.word	0x0800e235
 800dbe4:	0800e235 	.word	0x0800e235
 800dbe8:	0800e235 	.word	0x0800e235
 800dbec:	0800e235 	.word	0x0800e235
 800dbf0:	0800e235 	.word	0x0800e235
 800dbf4:	0800e235 	.word	0x0800e235
 800dbf8:	0800e235 	.word	0x0800e235
 800dbfc:	0800e235 	.word	0x0800e235
 800dc00:	0800e235 	.word	0x0800e235
 800dc04:	0800e235 	.word	0x0800e235
 800dc08:	0800e235 	.word	0x0800e235
 800dc0c:	0800e235 	.word	0x0800e235
 800dc10:	0800e235 	.word	0x0800e235
 800dc14:	0800e235 	.word	0x0800e235
 800dc18:	0800e235 	.word	0x0800e235
 800dc1c:	0800e235 	.word	0x0800e235
 800dc20:	0800e235 	.word	0x0800e235
 800dc24:	0800e235 	.word	0x0800e235
 800dc28:	0800e235 	.word	0x0800e235
 800dc2c:	0800e175 	.word	0x0800e175
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc30:	f7fb fb8e 	bl	8009350 <HAL_RCC_GetPCLK1Freq>
 800dc34:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d044      	beq.n	800dcc8 <UART_SetConfig+0x1d40>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d03e      	beq.n	800dcc4 <UART_SetConfig+0x1d3c>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	d038      	beq.n	800dcc0 <UART_SetConfig+0x1d38>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc52:	2b03      	cmp	r3, #3
 800dc54:	d032      	beq.n	800dcbc <UART_SetConfig+0x1d34>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5a:	2b04      	cmp	r3, #4
 800dc5c:	d02c      	beq.n	800dcb8 <UART_SetConfig+0x1d30>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc62:	2b05      	cmp	r3, #5
 800dc64:	d026      	beq.n	800dcb4 <UART_SetConfig+0x1d2c>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6a:	2b06      	cmp	r3, #6
 800dc6c:	d020      	beq.n	800dcb0 <UART_SetConfig+0x1d28>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc72:	2b07      	cmp	r3, #7
 800dc74:	d01a      	beq.n	800dcac <UART_SetConfig+0x1d24>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7a:	2b08      	cmp	r3, #8
 800dc7c:	d014      	beq.n	800dca8 <UART_SetConfig+0x1d20>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc82:	2b09      	cmp	r3, #9
 800dc84:	d00e      	beq.n	800dca4 <UART_SetConfig+0x1d1c>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8a:	2b0a      	cmp	r3, #10
 800dc8c:	d008      	beq.n	800dca0 <UART_SetConfig+0x1d18>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc92:	2b0b      	cmp	r3, #11
 800dc94:	d102      	bne.n	800dc9c <UART_SetConfig+0x1d14>
 800dc96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc9a:	e016      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e014      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dca0:	2380      	movs	r3, #128	; 0x80
 800dca2:	e012      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dca4:	2340      	movs	r3, #64	; 0x40
 800dca6:	e010      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dca8:	2320      	movs	r3, #32
 800dcaa:	e00e      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dcac:	2310      	movs	r3, #16
 800dcae:	e00c      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dcb0:	230c      	movs	r3, #12
 800dcb2:	e00a      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dcb4:	230a      	movs	r3, #10
 800dcb6:	e008      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dcb8:	2308      	movs	r3, #8
 800dcba:	e006      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dcbc:	2306      	movs	r3, #6
 800dcbe:	e004      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dcc0:	2304      	movs	r3, #4
 800dcc2:	e002      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	e000      	b.n	800dcca <UART_SetConfig+0x1d42>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dccc:	fbb2 f2f3 	udiv	r2, r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	085b      	lsrs	r3, r3, #1
 800dcd6:	441a      	add	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dce4:	e2aa      	b.n	800e23c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dce6:	f7fb fb49 	bl	800937c <HAL_RCC_GetPCLK2Freq>
 800dcea:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d044      	beq.n	800dd7e <UART_SetConfig+0x1df6>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d03e      	beq.n	800dd7a <UART_SetConfig+0x1df2>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d038      	beq.n	800dd76 <UART_SetConfig+0x1dee>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd08:	2b03      	cmp	r3, #3
 800dd0a:	d032      	beq.n	800dd72 <UART_SetConfig+0x1dea>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	d02c      	beq.n	800dd6e <UART_SetConfig+0x1de6>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd18:	2b05      	cmp	r3, #5
 800dd1a:	d026      	beq.n	800dd6a <UART_SetConfig+0x1de2>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd20:	2b06      	cmp	r3, #6
 800dd22:	d020      	beq.n	800dd66 <UART_SetConfig+0x1dde>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	2b07      	cmp	r3, #7
 800dd2a:	d01a      	beq.n	800dd62 <UART_SetConfig+0x1dda>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	2b08      	cmp	r3, #8
 800dd32:	d014      	beq.n	800dd5e <UART_SetConfig+0x1dd6>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd38:	2b09      	cmp	r3, #9
 800dd3a:	d00e      	beq.n	800dd5a <UART_SetConfig+0x1dd2>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	2b0a      	cmp	r3, #10
 800dd42:	d008      	beq.n	800dd56 <UART_SetConfig+0x1dce>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	2b0b      	cmp	r3, #11
 800dd4a:	d102      	bne.n	800dd52 <UART_SetConfig+0x1dca>
 800dd4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd50:	e016      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e014      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd56:	2380      	movs	r3, #128	; 0x80
 800dd58:	e012      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd5a:	2340      	movs	r3, #64	; 0x40
 800dd5c:	e010      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd5e:	2320      	movs	r3, #32
 800dd60:	e00e      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd62:	2310      	movs	r3, #16
 800dd64:	e00c      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd66:	230c      	movs	r3, #12
 800dd68:	e00a      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd6a:	230a      	movs	r3, #10
 800dd6c:	e008      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd6e:	2308      	movs	r3, #8
 800dd70:	e006      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd72:	2306      	movs	r3, #6
 800dd74:	e004      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd76:	2304      	movs	r3, #4
 800dd78:	e002      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	e000      	b.n	800dd80 <UART_SetConfig+0x1df8>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd82:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	085b      	lsrs	r3, r3, #1
 800dd8c:	441a      	add	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dd9a:	e24f      	b.n	800e23c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd9c:	f107 0318 	add.w	r3, r7, #24
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fc fc6d 	bl	800a680 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dda6:	69fa      	ldr	r2, [r7, #28]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d044      	beq.n	800de3a <UART_SetConfig+0x1eb2>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d03e      	beq.n	800de36 <UART_SetConfig+0x1eae>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d038      	beq.n	800de32 <UART_SetConfig+0x1eaa>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc4:	2b03      	cmp	r3, #3
 800ddc6:	d032      	beq.n	800de2e <UART_SetConfig+0x1ea6>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddcc:	2b04      	cmp	r3, #4
 800ddce:	d02c      	beq.n	800de2a <UART_SetConfig+0x1ea2>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd4:	2b05      	cmp	r3, #5
 800ddd6:	d026      	beq.n	800de26 <UART_SetConfig+0x1e9e>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dddc:	2b06      	cmp	r3, #6
 800ddde:	d020      	beq.n	800de22 <UART_SetConfig+0x1e9a>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde4:	2b07      	cmp	r3, #7
 800dde6:	d01a      	beq.n	800de1e <UART_SetConfig+0x1e96>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddec:	2b08      	cmp	r3, #8
 800ddee:	d014      	beq.n	800de1a <UART_SetConfig+0x1e92>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf4:	2b09      	cmp	r3, #9
 800ddf6:	d00e      	beq.n	800de16 <UART_SetConfig+0x1e8e>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfc:	2b0a      	cmp	r3, #10
 800ddfe:	d008      	beq.n	800de12 <UART_SetConfig+0x1e8a>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de04:	2b0b      	cmp	r3, #11
 800de06:	d102      	bne.n	800de0e <UART_SetConfig+0x1e86>
 800de08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de0c:	e016      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de0e:	2301      	movs	r3, #1
 800de10:	e014      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de12:	2380      	movs	r3, #128	; 0x80
 800de14:	e012      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de16:	2340      	movs	r3, #64	; 0x40
 800de18:	e010      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de1a:	2320      	movs	r3, #32
 800de1c:	e00e      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de1e:	2310      	movs	r3, #16
 800de20:	e00c      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de22:	230c      	movs	r3, #12
 800de24:	e00a      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de26:	230a      	movs	r3, #10
 800de28:	e008      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de2a:	2308      	movs	r3, #8
 800de2c:	e006      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de2e:	2306      	movs	r3, #6
 800de30:	e004      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de32:	2304      	movs	r3, #4
 800de34:	e002      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de36:	2302      	movs	r3, #2
 800de38:	e000      	b.n	800de3c <UART_SetConfig+0x1eb4>
 800de3a:	2301      	movs	r3, #1
 800de3c:	fbb2 f2f3 	udiv	r2, r2, r3
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	085b      	lsrs	r3, r3, #1
 800de46:	441a      	add	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800de50:	b29b      	uxth	r3, r3
 800de52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800de54:	e1f2      	b.n	800e23c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de56:	f107 030c 	add.w	r3, r7, #12
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fc fd5c 	bl	800a918 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	2b00      	cmp	r3, #0
 800de68:	d044      	beq.n	800def4 <UART_SetConfig+0x1f6c>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d03e      	beq.n	800def0 <UART_SetConfig+0x1f68>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de76:	2b02      	cmp	r3, #2
 800de78:	d038      	beq.n	800deec <UART_SetConfig+0x1f64>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7e:	2b03      	cmp	r3, #3
 800de80:	d032      	beq.n	800dee8 <UART_SetConfig+0x1f60>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de86:	2b04      	cmp	r3, #4
 800de88:	d02c      	beq.n	800dee4 <UART_SetConfig+0x1f5c>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8e:	2b05      	cmp	r3, #5
 800de90:	d026      	beq.n	800dee0 <UART_SetConfig+0x1f58>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de96:	2b06      	cmp	r3, #6
 800de98:	d020      	beq.n	800dedc <UART_SetConfig+0x1f54>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	2b07      	cmp	r3, #7
 800dea0:	d01a      	beq.n	800ded8 <UART_SetConfig+0x1f50>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea6:	2b08      	cmp	r3, #8
 800dea8:	d014      	beq.n	800ded4 <UART_SetConfig+0x1f4c>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deae:	2b09      	cmp	r3, #9
 800deb0:	d00e      	beq.n	800ded0 <UART_SetConfig+0x1f48>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb6:	2b0a      	cmp	r3, #10
 800deb8:	d008      	beq.n	800decc <UART_SetConfig+0x1f44>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800debe:	2b0b      	cmp	r3, #11
 800dec0:	d102      	bne.n	800dec8 <UART_SetConfig+0x1f40>
 800dec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dec6:	e016      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800dec8:	2301      	movs	r3, #1
 800deca:	e014      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800decc:	2380      	movs	r3, #128	; 0x80
 800dece:	e012      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800ded0:	2340      	movs	r3, #64	; 0x40
 800ded2:	e010      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800ded4:	2320      	movs	r3, #32
 800ded6:	e00e      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800ded8:	2310      	movs	r3, #16
 800deda:	e00c      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800dedc:	230c      	movs	r3, #12
 800dede:	e00a      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800dee0:	230a      	movs	r3, #10
 800dee2:	e008      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800dee4:	2308      	movs	r3, #8
 800dee6:	e006      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800dee8:	2306      	movs	r3, #6
 800deea:	e004      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800deec:	2304      	movs	r3, #4
 800deee:	e002      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800def0:	2302      	movs	r3, #2
 800def2:	e000      	b.n	800def6 <UART_SetConfig+0x1f6e>
 800def4:	2301      	movs	r3, #1
 800def6:	fbb2 f2f3 	udiv	r2, r2, r3
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	085b      	lsrs	r3, r3, #1
 800df00:	441a      	add	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	fbb2 f3f3 	udiv	r3, r2, r3
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800df0e:	e195      	b.n	800e23c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df10:	4b87      	ldr	r3, [pc, #540]	; (800e130 <UART_SetConfig+0x21a8>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f003 0320 	and.w	r3, r3, #32
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d05d      	beq.n	800dfd8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df1c:	4b84      	ldr	r3, [pc, #528]	; (800e130 <UART_SetConfig+0x21a8>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	08db      	lsrs	r3, r3, #3
 800df22:	f003 0303 	and.w	r3, r3, #3
 800df26:	4a83      	ldr	r2, [pc, #524]	; (800e134 <UART_SetConfig+0x21ac>)
 800df28:	40da      	lsrs	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d044      	beq.n	800dfbc <UART_SetConfig+0x2034>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df36:	2b01      	cmp	r3, #1
 800df38:	d03e      	beq.n	800dfb8 <UART_SetConfig+0x2030>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d038      	beq.n	800dfb4 <UART_SetConfig+0x202c>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df46:	2b03      	cmp	r3, #3
 800df48:	d032      	beq.n	800dfb0 <UART_SetConfig+0x2028>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4e:	2b04      	cmp	r3, #4
 800df50:	d02c      	beq.n	800dfac <UART_SetConfig+0x2024>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df56:	2b05      	cmp	r3, #5
 800df58:	d026      	beq.n	800dfa8 <UART_SetConfig+0x2020>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5e:	2b06      	cmp	r3, #6
 800df60:	d020      	beq.n	800dfa4 <UART_SetConfig+0x201c>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df66:	2b07      	cmp	r3, #7
 800df68:	d01a      	beq.n	800dfa0 <UART_SetConfig+0x2018>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6e:	2b08      	cmp	r3, #8
 800df70:	d014      	beq.n	800df9c <UART_SetConfig+0x2014>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df76:	2b09      	cmp	r3, #9
 800df78:	d00e      	beq.n	800df98 <UART_SetConfig+0x2010>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7e:	2b0a      	cmp	r3, #10
 800df80:	d008      	beq.n	800df94 <UART_SetConfig+0x200c>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df86:	2b0b      	cmp	r3, #11
 800df88:	d102      	bne.n	800df90 <UART_SetConfig+0x2008>
 800df8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df8e:	e016      	b.n	800dfbe <UART_SetConfig+0x2036>
 800df90:	2301      	movs	r3, #1
 800df92:	e014      	b.n	800dfbe <UART_SetConfig+0x2036>
 800df94:	2380      	movs	r3, #128	; 0x80
 800df96:	e012      	b.n	800dfbe <UART_SetConfig+0x2036>
 800df98:	2340      	movs	r3, #64	; 0x40
 800df9a:	e010      	b.n	800dfbe <UART_SetConfig+0x2036>
 800df9c:	2320      	movs	r3, #32
 800df9e:	e00e      	b.n	800dfbe <UART_SetConfig+0x2036>
 800dfa0:	2310      	movs	r3, #16
 800dfa2:	e00c      	b.n	800dfbe <UART_SetConfig+0x2036>
 800dfa4:	230c      	movs	r3, #12
 800dfa6:	e00a      	b.n	800dfbe <UART_SetConfig+0x2036>
 800dfa8:	230a      	movs	r3, #10
 800dfaa:	e008      	b.n	800dfbe <UART_SetConfig+0x2036>
 800dfac:	2308      	movs	r3, #8
 800dfae:	e006      	b.n	800dfbe <UART_SetConfig+0x2036>
 800dfb0:	2306      	movs	r3, #6
 800dfb2:	e004      	b.n	800dfbe <UART_SetConfig+0x2036>
 800dfb4:	2304      	movs	r3, #4
 800dfb6:	e002      	b.n	800dfbe <UART_SetConfig+0x2036>
 800dfb8:	2302      	movs	r3, #2
 800dfba:	e000      	b.n	800dfbe <UART_SetConfig+0x2036>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	085b      	lsrs	r3, r3, #1
 800dfc8:	441a      	add	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800dfd6:	e131      	b.n	800e23c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d043      	beq.n	800e068 <UART_SetConfig+0x20e0>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d03d      	beq.n	800e064 <UART_SetConfig+0x20dc>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfec:	2b02      	cmp	r3, #2
 800dfee:	d037      	beq.n	800e060 <UART_SetConfig+0x20d8>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	d031      	beq.n	800e05c <UART_SetConfig+0x20d4>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffc:	2b04      	cmp	r3, #4
 800dffe:	d02b      	beq.n	800e058 <UART_SetConfig+0x20d0>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	2b05      	cmp	r3, #5
 800e006:	d025      	beq.n	800e054 <UART_SetConfig+0x20cc>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00c:	2b06      	cmp	r3, #6
 800e00e:	d01f      	beq.n	800e050 <UART_SetConfig+0x20c8>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e014:	2b07      	cmp	r3, #7
 800e016:	d019      	beq.n	800e04c <UART_SetConfig+0x20c4>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01c:	2b08      	cmp	r3, #8
 800e01e:	d013      	beq.n	800e048 <UART_SetConfig+0x20c0>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e024:	2b09      	cmp	r3, #9
 800e026:	d00d      	beq.n	800e044 <UART_SetConfig+0x20bc>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02c:	2b0a      	cmp	r3, #10
 800e02e:	d007      	beq.n	800e040 <UART_SetConfig+0x20b8>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e034:	2b0b      	cmp	r3, #11
 800e036:	d101      	bne.n	800e03c <UART_SetConfig+0x20b4>
 800e038:	4b3f      	ldr	r3, [pc, #252]	; (800e138 <UART_SetConfig+0x21b0>)
 800e03a:	e016      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e03c:	4b3d      	ldr	r3, [pc, #244]	; (800e134 <UART_SetConfig+0x21ac>)
 800e03e:	e014      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e040:	4b3e      	ldr	r3, [pc, #248]	; (800e13c <UART_SetConfig+0x21b4>)
 800e042:	e012      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e044:	4b3e      	ldr	r3, [pc, #248]	; (800e140 <UART_SetConfig+0x21b8>)
 800e046:	e010      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e048:	4b3e      	ldr	r3, [pc, #248]	; (800e144 <UART_SetConfig+0x21bc>)
 800e04a:	e00e      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e04c:	4b3e      	ldr	r3, [pc, #248]	; (800e148 <UART_SetConfig+0x21c0>)
 800e04e:	e00c      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e050:	4b3e      	ldr	r3, [pc, #248]	; (800e14c <UART_SetConfig+0x21c4>)
 800e052:	e00a      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e054:	4b3e      	ldr	r3, [pc, #248]	; (800e150 <UART_SetConfig+0x21c8>)
 800e056:	e008      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e058:	4b3e      	ldr	r3, [pc, #248]	; (800e154 <UART_SetConfig+0x21cc>)
 800e05a:	e006      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e05c:	4b3e      	ldr	r3, [pc, #248]	; (800e158 <UART_SetConfig+0x21d0>)
 800e05e:	e004      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e060:	4b3e      	ldr	r3, [pc, #248]	; (800e15c <UART_SetConfig+0x21d4>)
 800e062:	e002      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e064:	4b3e      	ldr	r3, [pc, #248]	; (800e160 <UART_SetConfig+0x21d8>)
 800e066:	e000      	b.n	800e06a <UART_SetConfig+0x20e2>
 800e068:	4b32      	ldr	r3, [pc, #200]	; (800e134 <UART_SetConfig+0x21ac>)
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	6852      	ldr	r2, [r2, #4]
 800e06e:	0852      	lsrs	r2, r2, #1
 800e070:	441a      	add	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	fbb2 f3f3 	udiv	r3, r2, r3
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e07e:	e0dd      	b.n	800e23c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e084:	2b00      	cmp	r3, #0
 800e086:	d046      	beq.n	800e116 <UART_SetConfig+0x218e>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d040      	beq.n	800e112 <UART_SetConfig+0x218a>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e094:	2b02      	cmp	r3, #2
 800e096:	d03a      	beq.n	800e10e <UART_SetConfig+0x2186>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	d034      	beq.n	800e10a <UART_SetConfig+0x2182>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a4:	2b04      	cmp	r3, #4
 800e0a6:	d02e      	beq.n	800e106 <UART_SetConfig+0x217e>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ac:	2b05      	cmp	r3, #5
 800e0ae:	d028      	beq.n	800e102 <UART_SetConfig+0x217a>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b4:	2b06      	cmp	r3, #6
 800e0b6:	d022      	beq.n	800e0fe <UART_SetConfig+0x2176>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0bc:	2b07      	cmp	r3, #7
 800e0be:	d01c      	beq.n	800e0fa <UART_SetConfig+0x2172>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c4:	2b08      	cmp	r3, #8
 800e0c6:	d016      	beq.n	800e0f6 <UART_SetConfig+0x216e>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0cc:	2b09      	cmp	r3, #9
 800e0ce:	d00f      	beq.n	800e0f0 <UART_SetConfig+0x2168>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	2b0a      	cmp	r3, #10
 800e0d6:	d008      	beq.n	800e0ea <UART_SetConfig+0x2162>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0dc:	2b0b      	cmp	r3, #11
 800e0de:	d102      	bne.n	800e0e6 <UART_SetConfig+0x215e>
 800e0e0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e0e4:	e018      	b.n	800e118 <UART_SetConfig+0x2190>
 800e0e6:	4b18      	ldr	r3, [pc, #96]	; (800e148 <UART_SetConfig+0x21c0>)
 800e0e8:	e016      	b.n	800e118 <UART_SetConfig+0x2190>
 800e0ea:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e0ee:	e013      	b.n	800e118 <UART_SetConfig+0x2190>
 800e0f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e0f4:	e010      	b.n	800e118 <UART_SetConfig+0x2190>
 800e0f6:	4b1b      	ldr	r3, [pc, #108]	; (800e164 <UART_SetConfig+0x21dc>)
 800e0f8:	e00e      	b.n	800e118 <UART_SetConfig+0x2190>
 800e0fa:	4b0f      	ldr	r3, [pc, #60]	; (800e138 <UART_SetConfig+0x21b0>)
 800e0fc:	e00c      	b.n	800e118 <UART_SetConfig+0x2190>
 800e0fe:	4b1a      	ldr	r3, [pc, #104]	; (800e168 <UART_SetConfig+0x21e0>)
 800e100:	e00a      	b.n	800e118 <UART_SetConfig+0x2190>
 800e102:	4b1a      	ldr	r3, [pc, #104]	; (800e16c <UART_SetConfig+0x21e4>)
 800e104:	e008      	b.n	800e118 <UART_SetConfig+0x2190>
 800e106:	4b0d      	ldr	r3, [pc, #52]	; (800e13c <UART_SetConfig+0x21b4>)
 800e108:	e006      	b.n	800e118 <UART_SetConfig+0x2190>
 800e10a:	4b19      	ldr	r3, [pc, #100]	; (800e170 <UART_SetConfig+0x21e8>)
 800e10c:	e004      	b.n	800e118 <UART_SetConfig+0x2190>
 800e10e:	4b0c      	ldr	r3, [pc, #48]	; (800e140 <UART_SetConfig+0x21b8>)
 800e110:	e002      	b.n	800e118 <UART_SetConfig+0x2190>
 800e112:	4b0c      	ldr	r3, [pc, #48]	; (800e144 <UART_SetConfig+0x21bc>)
 800e114:	e000      	b.n	800e118 <UART_SetConfig+0x2190>
 800e116:	4b0c      	ldr	r3, [pc, #48]	; (800e148 <UART_SetConfig+0x21c0>)
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	6852      	ldr	r2, [r2, #4]
 800e11c:	0852      	lsrs	r2, r2, #1
 800e11e:	441a      	add	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	fbb2 f3f3 	udiv	r3, r2, r3
 800e128:	b29b      	uxth	r3, r3
 800e12a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e12c:	e086      	b.n	800e23c <UART_SetConfig+0x22b4>
 800e12e:	bf00      	nop
 800e130:	58024400 	.word	0x58024400
 800e134:	03d09000 	.word	0x03d09000
 800e138:	0003d090 	.word	0x0003d090
 800e13c:	0007a120 	.word	0x0007a120
 800e140:	000f4240 	.word	0x000f4240
 800e144:	001e8480 	.word	0x001e8480
 800e148:	003d0900 	.word	0x003d0900
 800e14c:	00516155 	.word	0x00516155
 800e150:	0061a800 	.word	0x0061a800
 800e154:	007a1200 	.word	0x007a1200
 800e158:	00a2c2aa 	.word	0x00a2c2aa
 800e15c:	00f42400 	.word	0x00f42400
 800e160:	01e84800 	.word	0x01e84800
 800e164:	0001e848 	.word	0x0001e848
 800e168:	00051615 	.word	0x00051615
 800e16c:	00061a80 	.word	0x00061a80
 800e170:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d04e      	beq.n	800e21a <UART_SetConfig+0x2292>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e180:	2b01      	cmp	r3, #1
 800e182:	d047      	beq.n	800e214 <UART_SetConfig+0x228c>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d040      	beq.n	800e20e <UART_SetConfig+0x2286>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e190:	2b03      	cmp	r3, #3
 800e192:	d039      	beq.n	800e208 <UART_SetConfig+0x2280>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e198:	2b04      	cmp	r3, #4
 800e19a:	d032      	beq.n	800e202 <UART_SetConfig+0x227a>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a0:	2b05      	cmp	r3, #5
 800e1a2:	d02b      	beq.n	800e1fc <UART_SetConfig+0x2274>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a8:	2b06      	cmp	r3, #6
 800e1aa:	d024      	beq.n	800e1f6 <UART_SetConfig+0x226e>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b0:	2b07      	cmp	r3, #7
 800e1b2:	d01d      	beq.n	800e1f0 <UART_SetConfig+0x2268>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b8:	2b08      	cmp	r3, #8
 800e1ba:	d016      	beq.n	800e1ea <UART_SetConfig+0x2262>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c0:	2b09      	cmp	r3, #9
 800e1c2:	d00f      	beq.n	800e1e4 <UART_SetConfig+0x225c>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c8:	2b0a      	cmp	r3, #10
 800e1ca:	d008      	beq.n	800e1de <UART_SetConfig+0x2256>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d0:	2b0b      	cmp	r3, #11
 800e1d2:	d101      	bne.n	800e1d8 <UART_SetConfig+0x2250>
 800e1d4:	2380      	movs	r3, #128	; 0x80
 800e1d6:	e022      	b.n	800e21e <UART_SetConfig+0x2296>
 800e1d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1dc:	e01f      	b.n	800e21e <UART_SetConfig+0x2296>
 800e1de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1e2:	e01c      	b.n	800e21e <UART_SetConfig+0x2296>
 800e1e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1e8:	e019      	b.n	800e21e <UART_SetConfig+0x2296>
 800e1ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1ee:	e016      	b.n	800e21e <UART_SetConfig+0x2296>
 800e1f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1f4:	e013      	b.n	800e21e <UART_SetConfig+0x2296>
 800e1f6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800e1fa:	e010      	b.n	800e21e <UART_SetConfig+0x2296>
 800e1fc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800e200:	e00d      	b.n	800e21e <UART_SetConfig+0x2296>
 800e202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e206:	e00a      	b.n	800e21e <UART_SetConfig+0x2296>
 800e208:	f241 5355 	movw	r3, #5461	; 0x1555
 800e20c:	e007      	b.n	800e21e <UART_SetConfig+0x2296>
 800e20e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e212:	e004      	b.n	800e21e <UART_SetConfig+0x2296>
 800e214:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e218:	e001      	b.n	800e21e <UART_SetConfig+0x2296>
 800e21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	6852      	ldr	r2, [r2, #4]
 800e222:	0852      	lsrs	r2, r2, #1
 800e224:	441a      	add	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e22e:	b29b      	uxth	r3, r3
 800e230:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e232:	e003      	b.n	800e23c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800e23a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23e:	2b0f      	cmp	r3, #15
 800e240:	d908      	bls.n	800e254 <UART_SetConfig+0x22cc>
 800e242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e248:	d204      	bcs.n	800e254 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e250:	60da      	str	r2, [r3, #12]
 800e252:	e002      	b.n	800e25a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2201      	movs	r2, #1
 800e25e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2201      	movs	r2, #1
 800e266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800e276:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3740      	adds	r7, #64	; 0x40
 800e27e:	46bd      	mov	sp, r7
 800e280:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800e284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00a      	beq.n	800e2ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	430a      	orrs	r2, r1
 800e2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b2:	f003 0302 	and.w	r3, r3, #2
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00a      	beq.n	800e2d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	430a      	orrs	r2, r1
 800e2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d4:	f003 0304 	and.w	r3, r3, #4
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00a      	beq.n	800e2f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	430a      	orrs	r2, r1
 800e2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f6:	f003 0308 	and.w	r3, r3, #8
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00a      	beq.n	800e314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	430a      	orrs	r2, r1
 800e312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e318:	f003 0310 	and.w	r3, r3, #16
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00a      	beq.n	800e336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	430a      	orrs	r2, r1
 800e334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33a:	f003 0320 	and.w	r3, r3, #32
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00a      	beq.n	800e358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	430a      	orrs	r2, r1
 800e356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e360:	2b00      	cmp	r3, #0
 800e362:	d01a      	beq.n	800e39a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e37e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e382:	d10a      	bne.n	800e39a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	430a      	orrs	r2, r1
 800e398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00a      	beq.n	800e3bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	605a      	str	r2, [r3, #4]
  }
}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af02      	add	r7, sp, #8
 800e3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e3d8:	f7f5 fd62 	bl	8003ea0 <HAL_GetTick>
 800e3dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f003 0308 	and.w	r3, r3, #8
 800e3e8:	2b08      	cmp	r3, #8
 800e3ea:	d10e      	bne.n	800e40a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f82c 	bl	800e458 <UART_WaitOnFlagUntilTimeout>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e406:	2303      	movs	r3, #3
 800e408:	e022      	b.n	800e450 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 0304 	and.w	r3, r3, #4
 800e414:	2b04      	cmp	r3, #4
 800e416:	d10e      	bne.n	800e436 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f816 	bl	800e458 <UART_WaitOnFlagUntilTimeout>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d001      	beq.n	800e436 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e432:	2303      	movs	r3, #3
 800e434:	e00c      	b.n	800e450 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2220      	movs	r2, #32
 800e43a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2220      	movs	r2, #32
 800e442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e44e:	2300      	movs	r3, #0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	4613      	mov	r3, r2
 800e466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e468:	e062      	b.n	800e530 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e470:	d05e      	beq.n	800e530 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e472:	f7f5 fd15 	bl	8003ea0 <HAL_GetTick>
 800e476:	4602      	mov	r2, r0
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	69ba      	ldr	r2, [r7, #24]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d302      	bcc.n	800e488 <UART_WaitOnFlagUntilTimeout+0x30>
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d11d      	bne.n	800e4c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e496:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	689a      	ldr	r2, [r3, #8]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f022 0201 	bic.w	r2, r2, #1
 800e4a6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2220      	movs	r2, #32
 800e4ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2220      	movs	r2, #32
 800e4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	e045      	b.n	800e550 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f003 0304 	and.w	r3, r3, #4
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d02e      	beq.n	800e530 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	69db      	ldr	r3, [r3, #28]
 800e4d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4e0:	d126      	bne.n	800e530 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4ea:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e4fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	689a      	ldr	r2, [r3, #8]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f022 0201 	bic.w	r2, r2, #1
 800e50a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2220      	movs	r2, #32
 800e510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2220      	movs	r2, #32
 800e518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2220      	movs	r2, #32
 800e520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2200      	movs	r2, #0
 800e528:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800e52c:	2303      	movs	r3, #3
 800e52e:	e00f      	b.n	800e550 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	69da      	ldr	r2, [r3, #28]
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	4013      	ands	r3, r2
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	bf0c      	ite	eq
 800e540:	2301      	moveq	r3, #1
 800e542:	2300      	movne	r3, #0
 800e544:	b2db      	uxtb	r3, r3
 800e546:	461a      	mov	r2, r3
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d08d      	beq.n	800e46a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e56e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	689a      	ldr	r2, [r3, #8]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e57e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2220      	movs	r2, #32
 800e584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800e588:	bf00      	nop
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e5aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6899      	ldr	r1, [r3, #8]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	4b08      	ldr	r3, [pc, #32]	; (800e5d8 <UART_EndRxTransfer+0x44>)
 800e5b8:	400b      	ands	r3, r1
 800e5ba:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2220      	movs	r2, #32
 800e5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800e5ca:	bf00      	nop
 800e5cc:	370c      	adds	r7, #12
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	effffffe 	.word	0xeffffffe

0800e5dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	69db      	ldr	r3, [r3, #28]
 800e5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5f2:	d01f      	beq.n	800e634 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e60a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	689a      	ldr	r2, [r3, #8]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f022 0201 	bic.w	r2, r2, #1
 800e61a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	689a      	ldr	r2, [r3, #8]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e62a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2220      	movs	r2, #32
 800e630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e634:	68f8      	ldr	r0, [r7, #12]
 800e636:	f7f2 f8e5 	bl	8000804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e63a:	bf00      	nop
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f7fd fc85 	bl	800bf60 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b086      	sub	sp, #24
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e672:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e67a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e686:	2b80      	cmp	r3, #128	; 0x80
 800e688:	d109      	bne.n	800e69e <UART_DMAError+0x40>
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	2b21      	cmp	r3, #33	; 0x21
 800e68e:	d106      	bne.n	800e69e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2200      	movs	r2, #0
 800e694:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e698:	6978      	ldr	r0, [r7, #20]
 800e69a:	f7ff ff5d 	bl	800e558 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	689b      	ldr	r3, [r3, #8]
 800e6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a8:	2b40      	cmp	r3, #64	; 0x40
 800e6aa:	d109      	bne.n	800e6c0 <UART_DMAError+0x62>
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2b22      	cmp	r3, #34	; 0x22
 800e6b0:	d106      	bne.n	800e6c0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e6ba:	6978      	ldr	r0, [r7, #20]
 800e6bc:	f7ff ff6a 	bl	800e594 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6c6:	f043 0210 	orr.w	r2, r3, #16
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6d0:	6978      	ldr	r0, [r7, #20]
 800e6d2:	f7fd fc4f 	bl	800bf74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6d6:	bf00      	nop
 800e6d8:	3718      	adds	r7, #24
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7fd fc39 	bl	800bf74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e702:	bf00      	nop
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e70a:	b480      	push	{r7}
 800e70c:	b083      	sub	sp, #12
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e718:	2b21      	cmp	r3, #33	; 0x21
 800e71a:	d12a      	bne.n	800e772 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e722:	b29b      	uxth	r3, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	d110      	bne.n	800e74a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e736:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e746:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e748:	e013      	b.n	800e772 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e74e:	781a      	ldrb	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75a:	1c5a      	adds	r2, r3, #1
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e766:	b29b      	uxth	r3, r3
 800e768:	3b01      	subs	r3, #1
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e772:	bf00      	nop
 800e774:	370c      	adds	r7, #12
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e77e:	b480      	push	{r7}
 800e780:	b085      	sub	sp, #20
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e78c:	2b21      	cmp	r3, #33	; 0x21
 800e78e:	d12f      	bne.n	800e7f0 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e796:	b29b      	uxth	r3, r3
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d110      	bne.n	800e7be <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e7aa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7ba:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e7bc:	e018      	b.n	800e7f0 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	881b      	ldrh	r3, [r3, #0]
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7d2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7d8:	1c9a      	adds	r2, r3, #2
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e7f0:	bf00      	nop
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e80a:	2b21      	cmp	r3, #33	; 0x21
 800e80c:	d13d      	bne.n	800e88a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e814:	81fb      	strh	r3, [r7, #14]
 800e816:	e035      	b.n	800e884 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e81e:	b29b      	uxth	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	d111      	bne.n	800e848 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	689a      	ldr	r2, [r3, #8]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e832:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e842:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e844:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e846:	e020      	b.n	800e88a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	69db      	ldr	r3, [r3, #28]
 800e84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e852:	2b00      	cmp	r3, #0
 800e854:	d013      	beq.n	800e87e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e85a:	781a      	ldrb	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e866:	1c5a      	adds	r2, r3, #1
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e872:	b29b      	uxth	r3, r3
 800e874:	3b01      	subs	r3, #1
 800e876:	b29a      	uxth	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e87e:	89fb      	ldrh	r3, [r7, #14]
 800e880:	3b01      	subs	r3, #1
 800e882:	81fb      	strh	r3, [r7, #14]
 800e884:	89fb      	ldrh	r3, [r7, #14]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1c6      	bne.n	800e818 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800e88a:	bf00      	nop
 800e88c:	3714      	adds	r7, #20
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e896:	b480      	push	{r7}
 800e898:	b085      	sub	sp, #20
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8a4:	2b21      	cmp	r3, #33	; 0x21
 800e8a6:	d142      	bne.n	800e92e <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8ae:	81fb      	strh	r3, [r7, #14]
 800e8b0:	e03a      	b.n	800e928 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d111      	bne.n	800e8e2 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	689a      	ldr	r2, [r3, #8]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e8cc:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8dc:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e8de:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e8e0:	e025      	b.n	800e92e <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	69db      	ldr	r3, [r3, #28]
 800e8e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d018      	beq.n	800e922 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8f4:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e904:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e90a:	1c9a      	adds	r2, r3, #2
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e916:	b29b      	uxth	r3, r3
 800e918:	3b01      	subs	r3, #1
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e922:	89fb      	ldrh	r3, [r7, #14]
 800e924:	3b01      	subs	r3, #1
 800e926:	81fb      	strh	r3, [r7, #14]
 800e928:	89fb      	ldrh	r3, [r7, #14]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1c1      	bne.n	800e8b2 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800e92e:	bf00      	nop
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b082      	sub	sp, #8
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e950:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2220      	movs	r2, #32
 800e956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7f1 ff0d 	bl	8000780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e966:	bf00      	nop
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b084      	sub	sp, #16
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e97c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e984:	2b22      	cmp	r3, #34	; 0x22
 800e986:	d13b      	bne.n	800ea00 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e990:	89bb      	ldrh	r3, [r7, #12]
 800e992:	b2d9      	uxtb	r1, r3
 800e994:	89fb      	ldrh	r3, [r7, #14]
 800e996:	b2da      	uxtb	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e99c:	400a      	ands	r2, r1
 800e99e:	b2d2      	uxtb	r2, r2
 800e9a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d122      	bne.n	800ea10 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e9d8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	689a      	ldr	r2, [r3, #8]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f022 0201 	bic.w	r2, r2, #1
 800e9e8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2220      	movs	r2, #32
 800e9ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7f1 ff03 	bl	8000804 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9fe:	e007      	b.n	800ea10 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	699a      	ldr	r2, [r3, #24]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f042 0208 	orr.w	r2, r2, #8
 800ea0e:	619a      	str	r2, [r3, #24]
}
 800ea10:	bf00      	nop
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea26:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea2e:	2b22      	cmp	r3, #34	; 0x22
 800ea30:	d13b      	bne.n	800eaaa <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea38:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea3e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ea40:	89ba      	ldrh	r2, [r7, #12]
 800ea42:	89fb      	ldrh	r3, [r7, #14]
 800ea44:	4013      	ands	r3, r2
 800ea46:	b29a      	uxth	r2, r3
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea50:	1c9a      	adds	r2, r3, #2
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d122      	bne.n	800eaba <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ea82:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	689a      	ldr	r2, [r3, #8]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f022 0201 	bic.w	r2, r2, #1
 800ea92:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2220      	movs	r2, #32
 800ea98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7f1 feae 	bl	8000804 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eaa8:	e007      	b.n	800eaba <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	699a      	ldr	r2, [r3, #24]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f042 0208 	orr.w	r2, r2, #8
 800eab8:	619a      	str	r2, [r3, #24]
}
 800eaba:	bf00      	nop
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
	...

0800eac4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ead2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eada:	2b22      	cmp	r3, #34	; 0x22
 800eadc:	d166      	bne.n	800ebac <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eae4:	81fb      	strh	r3, [r7, #14]
 800eae6:	e03d      	b.n	800eb64 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eaf0:	893b      	ldrh	r3, [r7, #8]
 800eaf2:	b2d9      	uxtb	r1, r3
 800eaf4:	89bb      	ldrh	r3, [r7, #12]
 800eaf6:	b2da      	uxtb	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eafc:	400a      	ands	r2, r1
 800eafe:	b2d2      	uxtb	r2, r2
 800eb00:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	3b01      	subs	r3, #1
 800eb16:	b29a      	uxth	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d119      	bne.n	800eb5e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eb38:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	6899      	ldr	r1, [r3, #8]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	4b1f      	ldr	r3, [pc, #124]	; (800ebc4 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800eb46:	400b      	ands	r3, r1
 800eb48:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2220      	movs	r2, #32
 800eb4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7f1 fe53 	bl	8000804 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800eb5e:	89fb      	ldrh	r3, [r7, #14]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	81fb      	strh	r3, [r7, #14]
 800eb64:	89fb      	ldrh	r3, [r7, #14]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1be      	bne.n	800eae8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb70:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eb72:	897b      	ldrh	r3, [r7, #10]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d021      	beq.n	800ebbc <UART_RxISR_8BIT_FIFOEN+0xf8>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eb7e:	897a      	ldrh	r2, [r7, #10]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d21b      	bcs.n	800ebbc <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	689a      	ldr	r2, [r3, #8]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800eb92:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a0c      	ldr	r2, [pc, #48]	; (800ebc8 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800eb98:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f042 0220 	orr.w	r2, r2, #32
 800eba8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebaa:	e007      	b.n	800ebbc <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	699a      	ldr	r2, [r3, #24]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f042 0208 	orr.w	r2, r2, #8
 800ebba:	619a      	str	r2, [r3, #24]
}
 800ebbc:	bf00      	nop
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	effffffe 	.word	0xeffffffe
 800ebc8:	0800e96f 	.word	0x0800e96f

0800ebcc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b086      	sub	sp, #24
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebda:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebe2:	2b22      	cmp	r3, #34	; 0x22
 800ebe4:	d166      	bne.n	800ecb4 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ebec:	82fb      	strh	r3, [r7, #22]
 800ebee:	e03d      	b.n	800ec6c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebfc:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800ebfe:	8a3a      	ldrh	r2, [r7, #16]
 800ec00:	8abb      	ldrh	r3, [r7, #20]
 800ec02:	4013      	ands	r3, r2
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec0e:	1c9a      	adds	r2, r3, #2
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d119      	bne.n	800ec66 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ec40:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	6899      	ldr	r1, [r3, #8]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	4b1f      	ldr	r3, [pc, #124]	; (800eccc <UART_RxISR_16BIT_FIFOEN+0x100>)
 800ec4e:	400b      	ands	r3, r1
 800ec50:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2220      	movs	r2, #32
 800ec56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7f1 fdcf 	bl	8000804 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ec66:	8afb      	ldrh	r3, [r7, #22]
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	82fb      	strh	r3, [r7, #22]
 800ec6c:	8afb      	ldrh	r3, [r7, #22]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1be      	bne.n	800ebf0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec78:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ec7a:	8a7b      	ldrh	r3, [r7, #18]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d021      	beq.n	800ecc4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ec86:	8a7a      	ldrh	r2, [r7, #18]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d21b      	bcs.n	800ecc4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	689a      	ldr	r2, [r3, #8]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ec9a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	4a0c      	ldr	r2, [pc, #48]	; (800ecd0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800eca0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f042 0220 	orr.w	r2, r2, #32
 800ecb0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecb2:	e007      	b.n	800ecc4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	699a      	ldr	r2, [r3, #24]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f042 0208 	orr.w	r2, r2, #8
 800ecc2:	619a      	str	r2, [r3, #24]
}
 800ecc4:	bf00      	nop
 800ecc6:	3718      	adds	r7, #24
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	effffffe 	.word	0xeffffffe
 800ecd0:	0800ea19 	.word	0x0800ea19

0800ecd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ecdc:	bf00      	nop
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ed04:	bf00      	nop
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b085      	sub	sp, #20
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d101      	bne.n	800ed26 <HAL_UARTEx_DisableFifoMode+0x16>
 800ed22:	2302      	movs	r3, #2
 800ed24:	e027      	b.n	800ed76 <HAL_UARTEx_DisableFifoMode+0x66>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2224      	movs	r2, #36	; 0x24
 800ed32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f022 0201 	bic.w	r2, r2, #1
 800ed4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ed54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2220      	movs	r2, #32
 800ed68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ed74:	2300      	movs	r3, #0
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3714      	adds	r7, #20
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr

0800ed82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b084      	sub	sp, #16
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d101      	bne.n	800ed9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed96:	2302      	movs	r3, #2
 800ed98:	e02d      	b.n	800edf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2224      	movs	r2, #36	; 0x24
 800eda6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f022 0201 	bic.w	r2, r2, #1
 800edc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	683a      	ldr	r2, [r7, #0]
 800edd2:	430a      	orrs	r2, r1
 800edd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f850 	bl	800ee7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68fa      	ldr	r2, [r7, #12]
 800ede2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2220      	movs	r2, #32
 800ede8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d101      	bne.n	800ee16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ee12:	2302      	movs	r3, #2
 800ee14:	e02d      	b.n	800ee72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2224      	movs	r2, #36	; 0x24
 800ee22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f022 0201 	bic.w	r2, r2, #1
 800ee3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	430a      	orrs	r2, r1
 800ee50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 f812 	bl	800ee7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2220      	movs	r2, #32
 800ee64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
	...

0800ee7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b089      	sub	sp, #36	; 0x24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ee84:	4a2f      	ldr	r2, [pc, #188]	; (800ef44 <UARTEx_SetNbDataToProcess+0xc8>)
 800ee86:	f107 0314 	add.w	r3, r7, #20
 800ee8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee8e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ee92:	4a2d      	ldr	r2, [pc, #180]	; (800ef48 <UARTEx_SetNbDataToProcess+0xcc>)
 800ee94:	f107 030c 	add.w	r3, r7, #12
 800ee98:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee9c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d108      	bne.n	800eeba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eeb8:	e03d      	b.n	800ef36 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eeba:	2308      	movs	r3, #8
 800eebc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eebe:	2308      	movs	r3, #8
 800eec0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	0e5b      	lsrs	r3, r3, #25
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	f003 0307 	and.w	r3, r3, #7
 800eed0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	0f5b      	lsrs	r3, r3, #29
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	f003 0307 	and.w	r3, r3, #7
 800eee0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800eee2:	7fbb      	ldrb	r3, [r7, #30]
 800eee4:	7f3a      	ldrb	r2, [r7, #28]
 800eee6:	f107 0120 	add.w	r1, r7, #32
 800eeea:	440a      	add	r2, r1
 800eeec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800eef0:	fb02 f303 	mul.w	r3, r2, r3
 800eef4:	7f3a      	ldrb	r2, [r7, #28]
 800eef6:	f107 0120 	add.w	r1, r7, #32
 800eefa:	440a      	add	r2, r1
 800eefc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ef00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ef0c:	7ffb      	ldrb	r3, [r7, #31]
 800ef0e:	7f7a      	ldrb	r2, [r7, #29]
 800ef10:	f107 0120 	add.w	r1, r7, #32
 800ef14:	440a      	add	r2, r1
 800ef16:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ef1a:	fb02 f303 	mul.w	r3, r2, r3
 800ef1e:	7f7a      	ldrb	r2, [r7, #29]
 800ef20:	f107 0120 	add.w	r1, r7, #32
 800ef24:	440a      	add	r2, r1
 800ef26:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ef2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ef36:	bf00      	nop
 800ef38:	3724      	adds	r7, #36	; 0x24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	080108c8 	.word	0x080108c8
 800ef48:	080108d0 	.word	0x080108d0

0800ef4c <__errno>:
 800ef4c:	4b01      	ldr	r3, [pc, #4]	; (800ef54 <__errno+0x8>)
 800ef4e:	6818      	ldr	r0, [r3, #0]
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	240000f8 	.word	0x240000f8

0800ef58 <__libc_init_array>:
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	4e0d      	ldr	r6, [pc, #52]	; (800ef90 <__libc_init_array+0x38>)
 800ef5c:	4c0d      	ldr	r4, [pc, #52]	; (800ef94 <__libc_init_array+0x3c>)
 800ef5e:	1ba4      	subs	r4, r4, r6
 800ef60:	10a4      	asrs	r4, r4, #2
 800ef62:	2500      	movs	r5, #0
 800ef64:	42a5      	cmp	r5, r4
 800ef66:	d109      	bne.n	800ef7c <__libc_init_array+0x24>
 800ef68:	4e0b      	ldr	r6, [pc, #44]	; (800ef98 <__libc_init_array+0x40>)
 800ef6a:	4c0c      	ldr	r4, [pc, #48]	; (800ef9c <__libc_init_array+0x44>)
 800ef6c:	f001 fc46 	bl	80107fc <_init>
 800ef70:	1ba4      	subs	r4, r4, r6
 800ef72:	10a4      	asrs	r4, r4, #2
 800ef74:	2500      	movs	r5, #0
 800ef76:	42a5      	cmp	r5, r4
 800ef78:	d105      	bne.n	800ef86 <__libc_init_array+0x2e>
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}
 800ef7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef80:	4798      	blx	r3
 800ef82:	3501      	adds	r5, #1
 800ef84:	e7ee      	b.n	800ef64 <__libc_init_array+0xc>
 800ef86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef8a:	4798      	blx	r3
 800ef8c:	3501      	adds	r5, #1
 800ef8e:	e7f2      	b.n	800ef76 <__libc_init_array+0x1e>
 800ef90:	08010b48 	.word	0x08010b48
 800ef94:	08010b48 	.word	0x08010b48
 800ef98:	08010b48 	.word	0x08010b48
 800ef9c:	08010b4c 	.word	0x08010b4c

0800efa0 <memset>:
 800efa0:	4402      	add	r2, r0
 800efa2:	4603      	mov	r3, r0
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d100      	bne.n	800efaa <memset+0xa>
 800efa8:	4770      	bx	lr
 800efaa:	f803 1b01 	strb.w	r1, [r3], #1
 800efae:	e7f9      	b.n	800efa4 <memset+0x4>

0800efb0 <siprintf>:
 800efb0:	b40e      	push	{r1, r2, r3}
 800efb2:	b500      	push	{lr}
 800efb4:	b09c      	sub	sp, #112	; 0x70
 800efb6:	ab1d      	add	r3, sp, #116	; 0x74
 800efb8:	9002      	str	r0, [sp, #8]
 800efba:	9006      	str	r0, [sp, #24]
 800efbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efc0:	4809      	ldr	r0, [pc, #36]	; (800efe8 <siprintf+0x38>)
 800efc2:	9107      	str	r1, [sp, #28]
 800efc4:	9104      	str	r1, [sp, #16]
 800efc6:	4909      	ldr	r1, [pc, #36]	; (800efec <siprintf+0x3c>)
 800efc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800efcc:	9105      	str	r1, [sp, #20]
 800efce:	6800      	ldr	r0, [r0, #0]
 800efd0:	9301      	str	r3, [sp, #4]
 800efd2:	a902      	add	r1, sp, #8
 800efd4:	f000 f866 	bl	800f0a4 <_svfiprintf_r>
 800efd8:	9b02      	ldr	r3, [sp, #8]
 800efda:	2200      	movs	r2, #0
 800efdc:	701a      	strb	r2, [r3, #0]
 800efde:	b01c      	add	sp, #112	; 0x70
 800efe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efe4:	b003      	add	sp, #12
 800efe6:	4770      	bx	lr
 800efe8:	240000f8 	.word	0x240000f8
 800efec:	ffff0208 	.word	0xffff0208

0800eff0 <__ssputs_r>:
 800eff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eff4:	688e      	ldr	r6, [r1, #8]
 800eff6:	429e      	cmp	r6, r3
 800eff8:	4682      	mov	sl, r0
 800effa:	460c      	mov	r4, r1
 800effc:	4690      	mov	r8, r2
 800effe:	4699      	mov	r9, r3
 800f000:	d837      	bhi.n	800f072 <__ssputs_r+0x82>
 800f002:	898a      	ldrh	r2, [r1, #12]
 800f004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f008:	d031      	beq.n	800f06e <__ssputs_r+0x7e>
 800f00a:	6825      	ldr	r5, [r4, #0]
 800f00c:	6909      	ldr	r1, [r1, #16]
 800f00e:	1a6f      	subs	r7, r5, r1
 800f010:	6965      	ldr	r5, [r4, #20]
 800f012:	2302      	movs	r3, #2
 800f014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f018:	fb95 f5f3 	sdiv	r5, r5, r3
 800f01c:	f109 0301 	add.w	r3, r9, #1
 800f020:	443b      	add	r3, r7
 800f022:	429d      	cmp	r5, r3
 800f024:	bf38      	it	cc
 800f026:	461d      	movcc	r5, r3
 800f028:	0553      	lsls	r3, r2, #21
 800f02a:	d530      	bpl.n	800f08e <__ssputs_r+0x9e>
 800f02c:	4629      	mov	r1, r5
 800f02e:	f000 fb2b 	bl	800f688 <_malloc_r>
 800f032:	4606      	mov	r6, r0
 800f034:	b950      	cbnz	r0, 800f04c <__ssputs_r+0x5c>
 800f036:	230c      	movs	r3, #12
 800f038:	f8ca 3000 	str.w	r3, [sl]
 800f03c:	89a3      	ldrh	r3, [r4, #12]
 800f03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f042:	81a3      	strh	r3, [r4, #12]
 800f044:	f04f 30ff 	mov.w	r0, #4294967295
 800f048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f04c:	463a      	mov	r2, r7
 800f04e:	6921      	ldr	r1, [r4, #16]
 800f050:	f000 faa8 	bl	800f5a4 <memcpy>
 800f054:	89a3      	ldrh	r3, [r4, #12]
 800f056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f05e:	81a3      	strh	r3, [r4, #12]
 800f060:	6126      	str	r6, [r4, #16]
 800f062:	6165      	str	r5, [r4, #20]
 800f064:	443e      	add	r6, r7
 800f066:	1bed      	subs	r5, r5, r7
 800f068:	6026      	str	r6, [r4, #0]
 800f06a:	60a5      	str	r5, [r4, #8]
 800f06c:	464e      	mov	r6, r9
 800f06e:	454e      	cmp	r6, r9
 800f070:	d900      	bls.n	800f074 <__ssputs_r+0x84>
 800f072:	464e      	mov	r6, r9
 800f074:	4632      	mov	r2, r6
 800f076:	4641      	mov	r1, r8
 800f078:	6820      	ldr	r0, [r4, #0]
 800f07a:	f000 fa9e 	bl	800f5ba <memmove>
 800f07e:	68a3      	ldr	r3, [r4, #8]
 800f080:	1b9b      	subs	r3, r3, r6
 800f082:	60a3      	str	r3, [r4, #8]
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	441e      	add	r6, r3
 800f088:	6026      	str	r6, [r4, #0]
 800f08a:	2000      	movs	r0, #0
 800f08c:	e7dc      	b.n	800f048 <__ssputs_r+0x58>
 800f08e:	462a      	mov	r2, r5
 800f090:	f000 fb54 	bl	800f73c <_realloc_r>
 800f094:	4606      	mov	r6, r0
 800f096:	2800      	cmp	r0, #0
 800f098:	d1e2      	bne.n	800f060 <__ssputs_r+0x70>
 800f09a:	6921      	ldr	r1, [r4, #16]
 800f09c:	4650      	mov	r0, sl
 800f09e:	f000 faa5 	bl	800f5ec <_free_r>
 800f0a2:	e7c8      	b.n	800f036 <__ssputs_r+0x46>

0800f0a4 <_svfiprintf_r>:
 800f0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a8:	461d      	mov	r5, r3
 800f0aa:	898b      	ldrh	r3, [r1, #12]
 800f0ac:	061f      	lsls	r7, r3, #24
 800f0ae:	b09d      	sub	sp, #116	; 0x74
 800f0b0:	4680      	mov	r8, r0
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	4616      	mov	r6, r2
 800f0b6:	d50f      	bpl.n	800f0d8 <_svfiprintf_r+0x34>
 800f0b8:	690b      	ldr	r3, [r1, #16]
 800f0ba:	b96b      	cbnz	r3, 800f0d8 <_svfiprintf_r+0x34>
 800f0bc:	2140      	movs	r1, #64	; 0x40
 800f0be:	f000 fae3 	bl	800f688 <_malloc_r>
 800f0c2:	6020      	str	r0, [r4, #0]
 800f0c4:	6120      	str	r0, [r4, #16]
 800f0c6:	b928      	cbnz	r0, 800f0d4 <_svfiprintf_r+0x30>
 800f0c8:	230c      	movs	r3, #12
 800f0ca:	f8c8 3000 	str.w	r3, [r8]
 800f0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d2:	e0c8      	b.n	800f266 <_svfiprintf_r+0x1c2>
 800f0d4:	2340      	movs	r3, #64	; 0x40
 800f0d6:	6163      	str	r3, [r4, #20]
 800f0d8:	2300      	movs	r3, #0
 800f0da:	9309      	str	r3, [sp, #36]	; 0x24
 800f0dc:	2320      	movs	r3, #32
 800f0de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0e2:	2330      	movs	r3, #48	; 0x30
 800f0e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0e8:	9503      	str	r5, [sp, #12]
 800f0ea:	f04f 0b01 	mov.w	fp, #1
 800f0ee:	4637      	mov	r7, r6
 800f0f0:	463d      	mov	r5, r7
 800f0f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f0f6:	b10b      	cbz	r3, 800f0fc <_svfiprintf_r+0x58>
 800f0f8:	2b25      	cmp	r3, #37	; 0x25
 800f0fa:	d13e      	bne.n	800f17a <_svfiprintf_r+0xd6>
 800f0fc:	ebb7 0a06 	subs.w	sl, r7, r6
 800f100:	d00b      	beq.n	800f11a <_svfiprintf_r+0x76>
 800f102:	4653      	mov	r3, sl
 800f104:	4632      	mov	r2, r6
 800f106:	4621      	mov	r1, r4
 800f108:	4640      	mov	r0, r8
 800f10a:	f7ff ff71 	bl	800eff0 <__ssputs_r>
 800f10e:	3001      	adds	r0, #1
 800f110:	f000 80a4 	beq.w	800f25c <_svfiprintf_r+0x1b8>
 800f114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f116:	4453      	add	r3, sl
 800f118:	9309      	str	r3, [sp, #36]	; 0x24
 800f11a:	783b      	ldrb	r3, [r7, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 809d 	beq.w	800f25c <_svfiprintf_r+0x1b8>
 800f122:	2300      	movs	r3, #0
 800f124:	f04f 32ff 	mov.w	r2, #4294967295
 800f128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f12c:	9304      	str	r3, [sp, #16]
 800f12e:	9307      	str	r3, [sp, #28]
 800f130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f134:	931a      	str	r3, [sp, #104]	; 0x68
 800f136:	462f      	mov	r7, r5
 800f138:	2205      	movs	r2, #5
 800f13a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f13e:	4850      	ldr	r0, [pc, #320]	; (800f280 <_svfiprintf_r+0x1dc>)
 800f140:	f7f1 f8ce 	bl	80002e0 <memchr>
 800f144:	9b04      	ldr	r3, [sp, #16]
 800f146:	b9d0      	cbnz	r0, 800f17e <_svfiprintf_r+0xda>
 800f148:	06d9      	lsls	r1, r3, #27
 800f14a:	bf44      	itt	mi
 800f14c:	2220      	movmi	r2, #32
 800f14e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f152:	071a      	lsls	r2, r3, #28
 800f154:	bf44      	itt	mi
 800f156:	222b      	movmi	r2, #43	; 0x2b
 800f158:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f15c:	782a      	ldrb	r2, [r5, #0]
 800f15e:	2a2a      	cmp	r2, #42	; 0x2a
 800f160:	d015      	beq.n	800f18e <_svfiprintf_r+0xea>
 800f162:	9a07      	ldr	r2, [sp, #28]
 800f164:	462f      	mov	r7, r5
 800f166:	2000      	movs	r0, #0
 800f168:	250a      	movs	r5, #10
 800f16a:	4639      	mov	r1, r7
 800f16c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f170:	3b30      	subs	r3, #48	; 0x30
 800f172:	2b09      	cmp	r3, #9
 800f174:	d94d      	bls.n	800f212 <_svfiprintf_r+0x16e>
 800f176:	b1b8      	cbz	r0, 800f1a8 <_svfiprintf_r+0x104>
 800f178:	e00f      	b.n	800f19a <_svfiprintf_r+0xf6>
 800f17a:	462f      	mov	r7, r5
 800f17c:	e7b8      	b.n	800f0f0 <_svfiprintf_r+0x4c>
 800f17e:	4a40      	ldr	r2, [pc, #256]	; (800f280 <_svfiprintf_r+0x1dc>)
 800f180:	1a80      	subs	r0, r0, r2
 800f182:	fa0b f000 	lsl.w	r0, fp, r0
 800f186:	4318      	orrs	r0, r3
 800f188:	9004      	str	r0, [sp, #16]
 800f18a:	463d      	mov	r5, r7
 800f18c:	e7d3      	b.n	800f136 <_svfiprintf_r+0x92>
 800f18e:	9a03      	ldr	r2, [sp, #12]
 800f190:	1d11      	adds	r1, r2, #4
 800f192:	6812      	ldr	r2, [r2, #0]
 800f194:	9103      	str	r1, [sp, #12]
 800f196:	2a00      	cmp	r2, #0
 800f198:	db01      	blt.n	800f19e <_svfiprintf_r+0xfa>
 800f19a:	9207      	str	r2, [sp, #28]
 800f19c:	e004      	b.n	800f1a8 <_svfiprintf_r+0x104>
 800f19e:	4252      	negs	r2, r2
 800f1a0:	f043 0302 	orr.w	r3, r3, #2
 800f1a4:	9207      	str	r2, [sp, #28]
 800f1a6:	9304      	str	r3, [sp, #16]
 800f1a8:	783b      	ldrb	r3, [r7, #0]
 800f1aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ac:	d10c      	bne.n	800f1c8 <_svfiprintf_r+0x124>
 800f1ae:	787b      	ldrb	r3, [r7, #1]
 800f1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1b2:	d133      	bne.n	800f21c <_svfiprintf_r+0x178>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	1d1a      	adds	r2, r3, #4
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	9203      	str	r2, [sp, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	bfb8      	it	lt
 800f1c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1c4:	3702      	adds	r7, #2
 800f1c6:	9305      	str	r3, [sp, #20]
 800f1c8:	4d2e      	ldr	r5, [pc, #184]	; (800f284 <_svfiprintf_r+0x1e0>)
 800f1ca:	7839      	ldrb	r1, [r7, #0]
 800f1cc:	2203      	movs	r2, #3
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	f7f1 f886 	bl	80002e0 <memchr>
 800f1d4:	b138      	cbz	r0, 800f1e6 <_svfiprintf_r+0x142>
 800f1d6:	2340      	movs	r3, #64	; 0x40
 800f1d8:	1b40      	subs	r0, r0, r5
 800f1da:	fa03 f000 	lsl.w	r0, r3, r0
 800f1de:	9b04      	ldr	r3, [sp, #16]
 800f1e0:	4303      	orrs	r3, r0
 800f1e2:	3701      	adds	r7, #1
 800f1e4:	9304      	str	r3, [sp, #16]
 800f1e6:	7839      	ldrb	r1, [r7, #0]
 800f1e8:	4827      	ldr	r0, [pc, #156]	; (800f288 <_svfiprintf_r+0x1e4>)
 800f1ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1ee:	2206      	movs	r2, #6
 800f1f0:	1c7e      	adds	r6, r7, #1
 800f1f2:	f7f1 f875 	bl	80002e0 <memchr>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	d038      	beq.n	800f26c <_svfiprintf_r+0x1c8>
 800f1fa:	4b24      	ldr	r3, [pc, #144]	; (800f28c <_svfiprintf_r+0x1e8>)
 800f1fc:	bb13      	cbnz	r3, 800f244 <_svfiprintf_r+0x1a0>
 800f1fe:	9b03      	ldr	r3, [sp, #12]
 800f200:	3307      	adds	r3, #7
 800f202:	f023 0307 	bic.w	r3, r3, #7
 800f206:	3308      	adds	r3, #8
 800f208:	9303      	str	r3, [sp, #12]
 800f20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f20c:	444b      	add	r3, r9
 800f20e:	9309      	str	r3, [sp, #36]	; 0x24
 800f210:	e76d      	b.n	800f0ee <_svfiprintf_r+0x4a>
 800f212:	fb05 3202 	mla	r2, r5, r2, r3
 800f216:	2001      	movs	r0, #1
 800f218:	460f      	mov	r7, r1
 800f21a:	e7a6      	b.n	800f16a <_svfiprintf_r+0xc6>
 800f21c:	2300      	movs	r3, #0
 800f21e:	3701      	adds	r7, #1
 800f220:	9305      	str	r3, [sp, #20]
 800f222:	4619      	mov	r1, r3
 800f224:	250a      	movs	r5, #10
 800f226:	4638      	mov	r0, r7
 800f228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f22c:	3a30      	subs	r2, #48	; 0x30
 800f22e:	2a09      	cmp	r2, #9
 800f230:	d903      	bls.n	800f23a <_svfiprintf_r+0x196>
 800f232:	2b00      	cmp	r3, #0
 800f234:	d0c8      	beq.n	800f1c8 <_svfiprintf_r+0x124>
 800f236:	9105      	str	r1, [sp, #20]
 800f238:	e7c6      	b.n	800f1c8 <_svfiprintf_r+0x124>
 800f23a:	fb05 2101 	mla	r1, r5, r1, r2
 800f23e:	2301      	movs	r3, #1
 800f240:	4607      	mov	r7, r0
 800f242:	e7f0      	b.n	800f226 <_svfiprintf_r+0x182>
 800f244:	ab03      	add	r3, sp, #12
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	4622      	mov	r2, r4
 800f24a:	4b11      	ldr	r3, [pc, #68]	; (800f290 <_svfiprintf_r+0x1ec>)
 800f24c:	a904      	add	r1, sp, #16
 800f24e:	4640      	mov	r0, r8
 800f250:	f3af 8000 	nop.w
 800f254:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f258:	4681      	mov	r9, r0
 800f25a:	d1d6      	bne.n	800f20a <_svfiprintf_r+0x166>
 800f25c:	89a3      	ldrh	r3, [r4, #12]
 800f25e:	065b      	lsls	r3, r3, #25
 800f260:	f53f af35 	bmi.w	800f0ce <_svfiprintf_r+0x2a>
 800f264:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f266:	b01d      	add	sp, #116	; 0x74
 800f268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26c:	ab03      	add	r3, sp, #12
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	4622      	mov	r2, r4
 800f272:	4b07      	ldr	r3, [pc, #28]	; (800f290 <_svfiprintf_r+0x1ec>)
 800f274:	a904      	add	r1, sp, #16
 800f276:	4640      	mov	r0, r8
 800f278:	f000 f882 	bl	800f380 <_printf_i>
 800f27c:	e7ea      	b.n	800f254 <_svfiprintf_r+0x1b0>
 800f27e:	bf00      	nop
 800f280:	080108f0 	.word	0x080108f0
 800f284:	080108f6 	.word	0x080108f6
 800f288:	080108fa 	.word	0x080108fa
 800f28c:	00000000 	.word	0x00000000
 800f290:	0800eff1 	.word	0x0800eff1

0800f294 <_printf_common>:
 800f294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f298:	4691      	mov	r9, r2
 800f29a:	461f      	mov	r7, r3
 800f29c:	688a      	ldr	r2, [r1, #8]
 800f29e:	690b      	ldr	r3, [r1, #16]
 800f2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	bfb8      	it	lt
 800f2a8:	4613      	movlt	r3, r2
 800f2aa:	f8c9 3000 	str.w	r3, [r9]
 800f2ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	460c      	mov	r4, r1
 800f2b6:	b112      	cbz	r2, 800f2be <_printf_common+0x2a>
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	f8c9 3000 	str.w	r3, [r9]
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	0699      	lsls	r1, r3, #26
 800f2c2:	bf42      	ittt	mi
 800f2c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f2c8:	3302      	addmi	r3, #2
 800f2ca:	f8c9 3000 	strmi.w	r3, [r9]
 800f2ce:	6825      	ldr	r5, [r4, #0]
 800f2d0:	f015 0506 	ands.w	r5, r5, #6
 800f2d4:	d107      	bne.n	800f2e6 <_printf_common+0x52>
 800f2d6:	f104 0a19 	add.w	sl, r4, #25
 800f2da:	68e3      	ldr	r3, [r4, #12]
 800f2dc:	f8d9 2000 	ldr.w	r2, [r9]
 800f2e0:	1a9b      	subs	r3, r3, r2
 800f2e2:	42ab      	cmp	r3, r5
 800f2e4:	dc28      	bgt.n	800f338 <_printf_common+0xa4>
 800f2e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f2ea:	6822      	ldr	r2, [r4, #0]
 800f2ec:	3300      	adds	r3, #0
 800f2ee:	bf18      	it	ne
 800f2f0:	2301      	movne	r3, #1
 800f2f2:	0692      	lsls	r2, r2, #26
 800f2f4:	d42d      	bmi.n	800f352 <_printf_common+0xbe>
 800f2f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	4630      	mov	r0, r6
 800f2fe:	47c0      	blx	r8
 800f300:	3001      	adds	r0, #1
 800f302:	d020      	beq.n	800f346 <_printf_common+0xb2>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	68e5      	ldr	r5, [r4, #12]
 800f308:	f8d9 2000 	ldr.w	r2, [r9]
 800f30c:	f003 0306 	and.w	r3, r3, #6
 800f310:	2b04      	cmp	r3, #4
 800f312:	bf08      	it	eq
 800f314:	1aad      	subeq	r5, r5, r2
 800f316:	68a3      	ldr	r3, [r4, #8]
 800f318:	6922      	ldr	r2, [r4, #16]
 800f31a:	bf0c      	ite	eq
 800f31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f320:	2500      	movne	r5, #0
 800f322:	4293      	cmp	r3, r2
 800f324:	bfc4      	itt	gt
 800f326:	1a9b      	subgt	r3, r3, r2
 800f328:	18ed      	addgt	r5, r5, r3
 800f32a:	f04f 0900 	mov.w	r9, #0
 800f32e:	341a      	adds	r4, #26
 800f330:	454d      	cmp	r5, r9
 800f332:	d11a      	bne.n	800f36a <_printf_common+0xd6>
 800f334:	2000      	movs	r0, #0
 800f336:	e008      	b.n	800f34a <_printf_common+0xb6>
 800f338:	2301      	movs	r3, #1
 800f33a:	4652      	mov	r2, sl
 800f33c:	4639      	mov	r1, r7
 800f33e:	4630      	mov	r0, r6
 800f340:	47c0      	blx	r8
 800f342:	3001      	adds	r0, #1
 800f344:	d103      	bne.n	800f34e <_printf_common+0xba>
 800f346:	f04f 30ff 	mov.w	r0, #4294967295
 800f34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f34e:	3501      	adds	r5, #1
 800f350:	e7c3      	b.n	800f2da <_printf_common+0x46>
 800f352:	18e1      	adds	r1, r4, r3
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	2030      	movs	r0, #48	; 0x30
 800f358:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f35c:	4422      	add	r2, r4
 800f35e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f362:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f366:	3302      	adds	r3, #2
 800f368:	e7c5      	b.n	800f2f6 <_printf_common+0x62>
 800f36a:	2301      	movs	r3, #1
 800f36c:	4622      	mov	r2, r4
 800f36e:	4639      	mov	r1, r7
 800f370:	4630      	mov	r0, r6
 800f372:	47c0      	blx	r8
 800f374:	3001      	adds	r0, #1
 800f376:	d0e6      	beq.n	800f346 <_printf_common+0xb2>
 800f378:	f109 0901 	add.w	r9, r9, #1
 800f37c:	e7d8      	b.n	800f330 <_printf_common+0x9c>
	...

0800f380 <_printf_i>:
 800f380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f384:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f388:	460c      	mov	r4, r1
 800f38a:	7e09      	ldrb	r1, [r1, #24]
 800f38c:	b085      	sub	sp, #20
 800f38e:	296e      	cmp	r1, #110	; 0x6e
 800f390:	4617      	mov	r7, r2
 800f392:	4606      	mov	r6, r0
 800f394:	4698      	mov	r8, r3
 800f396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f398:	f000 80b3 	beq.w	800f502 <_printf_i+0x182>
 800f39c:	d822      	bhi.n	800f3e4 <_printf_i+0x64>
 800f39e:	2963      	cmp	r1, #99	; 0x63
 800f3a0:	d036      	beq.n	800f410 <_printf_i+0x90>
 800f3a2:	d80a      	bhi.n	800f3ba <_printf_i+0x3a>
 800f3a4:	2900      	cmp	r1, #0
 800f3a6:	f000 80b9 	beq.w	800f51c <_printf_i+0x19c>
 800f3aa:	2958      	cmp	r1, #88	; 0x58
 800f3ac:	f000 8083 	beq.w	800f4b6 <_printf_i+0x136>
 800f3b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f3b8:	e032      	b.n	800f420 <_printf_i+0xa0>
 800f3ba:	2964      	cmp	r1, #100	; 0x64
 800f3bc:	d001      	beq.n	800f3c2 <_printf_i+0x42>
 800f3be:	2969      	cmp	r1, #105	; 0x69
 800f3c0:	d1f6      	bne.n	800f3b0 <_printf_i+0x30>
 800f3c2:	6820      	ldr	r0, [r4, #0]
 800f3c4:	6813      	ldr	r3, [r2, #0]
 800f3c6:	0605      	lsls	r5, r0, #24
 800f3c8:	f103 0104 	add.w	r1, r3, #4
 800f3cc:	d52a      	bpl.n	800f424 <_printf_i+0xa4>
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	6011      	str	r1, [r2, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	da03      	bge.n	800f3de <_printf_i+0x5e>
 800f3d6:	222d      	movs	r2, #45	; 0x2d
 800f3d8:	425b      	negs	r3, r3
 800f3da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f3de:	486f      	ldr	r0, [pc, #444]	; (800f59c <_printf_i+0x21c>)
 800f3e0:	220a      	movs	r2, #10
 800f3e2:	e039      	b.n	800f458 <_printf_i+0xd8>
 800f3e4:	2973      	cmp	r1, #115	; 0x73
 800f3e6:	f000 809d 	beq.w	800f524 <_printf_i+0x1a4>
 800f3ea:	d808      	bhi.n	800f3fe <_printf_i+0x7e>
 800f3ec:	296f      	cmp	r1, #111	; 0x6f
 800f3ee:	d020      	beq.n	800f432 <_printf_i+0xb2>
 800f3f0:	2970      	cmp	r1, #112	; 0x70
 800f3f2:	d1dd      	bne.n	800f3b0 <_printf_i+0x30>
 800f3f4:	6823      	ldr	r3, [r4, #0]
 800f3f6:	f043 0320 	orr.w	r3, r3, #32
 800f3fa:	6023      	str	r3, [r4, #0]
 800f3fc:	e003      	b.n	800f406 <_printf_i+0x86>
 800f3fe:	2975      	cmp	r1, #117	; 0x75
 800f400:	d017      	beq.n	800f432 <_printf_i+0xb2>
 800f402:	2978      	cmp	r1, #120	; 0x78
 800f404:	d1d4      	bne.n	800f3b0 <_printf_i+0x30>
 800f406:	2378      	movs	r3, #120	; 0x78
 800f408:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f40c:	4864      	ldr	r0, [pc, #400]	; (800f5a0 <_printf_i+0x220>)
 800f40e:	e055      	b.n	800f4bc <_printf_i+0x13c>
 800f410:	6813      	ldr	r3, [r2, #0]
 800f412:	1d19      	adds	r1, r3, #4
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	6011      	str	r1, [r2, #0]
 800f418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f41c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f420:	2301      	movs	r3, #1
 800f422:	e08c      	b.n	800f53e <_printf_i+0x1be>
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	6011      	str	r1, [r2, #0]
 800f428:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f42c:	bf18      	it	ne
 800f42e:	b21b      	sxthne	r3, r3
 800f430:	e7cf      	b.n	800f3d2 <_printf_i+0x52>
 800f432:	6813      	ldr	r3, [r2, #0]
 800f434:	6825      	ldr	r5, [r4, #0]
 800f436:	1d18      	adds	r0, r3, #4
 800f438:	6010      	str	r0, [r2, #0]
 800f43a:	0628      	lsls	r0, r5, #24
 800f43c:	d501      	bpl.n	800f442 <_printf_i+0xc2>
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	e002      	b.n	800f448 <_printf_i+0xc8>
 800f442:	0668      	lsls	r0, r5, #25
 800f444:	d5fb      	bpl.n	800f43e <_printf_i+0xbe>
 800f446:	881b      	ldrh	r3, [r3, #0]
 800f448:	4854      	ldr	r0, [pc, #336]	; (800f59c <_printf_i+0x21c>)
 800f44a:	296f      	cmp	r1, #111	; 0x6f
 800f44c:	bf14      	ite	ne
 800f44e:	220a      	movne	r2, #10
 800f450:	2208      	moveq	r2, #8
 800f452:	2100      	movs	r1, #0
 800f454:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f458:	6865      	ldr	r5, [r4, #4]
 800f45a:	60a5      	str	r5, [r4, #8]
 800f45c:	2d00      	cmp	r5, #0
 800f45e:	f2c0 8095 	blt.w	800f58c <_printf_i+0x20c>
 800f462:	6821      	ldr	r1, [r4, #0]
 800f464:	f021 0104 	bic.w	r1, r1, #4
 800f468:	6021      	str	r1, [r4, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d13d      	bne.n	800f4ea <_printf_i+0x16a>
 800f46e:	2d00      	cmp	r5, #0
 800f470:	f040 808e 	bne.w	800f590 <_printf_i+0x210>
 800f474:	4665      	mov	r5, ip
 800f476:	2a08      	cmp	r2, #8
 800f478:	d10b      	bne.n	800f492 <_printf_i+0x112>
 800f47a:	6823      	ldr	r3, [r4, #0]
 800f47c:	07db      	lsls	r3, r3, #31
 800f47e:	d508      	bpl.n	800f492 <_printf_i+0x112>
 800f480:	6923      	ldr	r3, [r4, #16]
 800f482:	6862      	ldr	r2, [r4, #4]
 800f484:	429a      	cmp	r2, r3
 800f486:	bfde      	ittt	le
 800f488:	2330      	movle	r3, #48	; 0x30
 800f48a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f48e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f492:	ebac 0305 	sub.w	r3, ip, r5
 800f496:	6123      	str	r3, [r4, #16]
 800f498:	f8cd 8000 	str.w	r8, [sp]
 800f49c:	463b      	mov	r3, r7
 800f49e:	aa03      	add	r2, sp, #12
 800f4a0:	4621      	mov	r1, r4
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f7ff fef6 	bl	800f294 <_printf_common>
 800f4a8:	3001      	adds	r0, #1
 800f4aa:	d14d      	bne.n	800f548 <_printf_i+0x1c8>
 800f4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b0:	b005      	add	sp, #20
 800f4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4b6:	4839      	ldr	r0, [pc, #228]	; (800f59c <_printf_i+0x21c>)
 800f4b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f4bc:	6813      	ldr	r3, [r2, #0]
 800f4be:	6821      	ldr	r1, [r4, #0]
 800f4c0:	1d1d      	adds	r5, r3, #4
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	6015      	str	r5, [r2, #0]
 800f4c6:	060a      	lsls	r2, r1, #24
 800f4c8:	d50b      	bpl.n	800f4e2 <_printf_i+0x162>
 800f4ca:	07ca      	lsls	r2, r1, #31
 800f4cc:	bf44      	itt	mi
 800f4ce:	f041 0120 	orrmi.w	r1, r1, #32
 800f4d2:	6021      	strmi	r1, [r4, #0]
 800f4d4:	b91b      	cbnz	r3, 800f4de <_printf_i+0x15e>
 800f4d6:	6822      	ldr	r2, [r4, #0]
 800f4d8:	f022 0220 	bic.w	r2, r2, #32
 800f4dc:	6022      	str	r2, [r4, #0]
 800f4de:	2210      	movs	r2, #16
 800f4e0:	e7b7      	b.n	800f452 <_printf_i+0xd2>
 800f4e2:	064d      	lsls	r5, r1, #25
 800f4e4:	bf48      	it	mi
 800f4e6:	b29b      	uxthmi	r3, r3
 800f4e8:	e7ef      	b.n	800f4ca <_printf_i+0x14a>
 800f4ea:	4665      	mov	r5, ip
 800f4ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4f0:	fb02 3311 	mls	r3, r2, r1, r3
 800f4f4:	5cc3      	ldrb	r3, [r0, r3]
 800f4f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	2900      	cmp	r1, #0
 800f4fe:	d1f5      	bne.n	800f4ec <_printf_i+0x16c>
 800f500:	e7b9      	b.n	800f476 <_printf_i+0xf6>
 800f502:	6813      	ldr	r3, [r2, #0]
 800f504:	6825      	ldr	r5, [r4, #0]
 800f506:	6961      	ldr	r1, [r4, #20]
 800f508:	1d18      	adds	r0, r3, #4
 800f50a:	6010      	str	r0, [r2, #0]
 800f50c:	0628      	lsls	r0, r5, #24
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	d501      	bpl.n	800f516 <_printf_i+0x196>
 800f512:	6019      	str	r1, [r3, #0]
 800f514:	e002      	b.n	800f51c <_printf_i+0x19c>
 800f516:	066a      	lsls	r2, r5, #25
 800f518:	d5fb      	bpl.n	800f512 <_printf_i+0x192>
 800f51a:	8019      	strh	r1, [r3, #0]
 800f51c:	2300      	movs	r3, #0
 800f51e:	6123      	str	r3, [r4, #16]
 800f520:	4665      	mov	r5, ip
 800f522:	e7b9      	b.n	800f498 <_printf_i+0x118>
 800f524:	6813      	ldr	r3, [r2, #0]
 800f526:	1d19      	adds	r1, r3, #4
 800f528:	6011      	str	r1, [r2, #0]
 800f52a:	681d      	ldr	r5, [r3, #0]
 800f52c:	6862      	ldr	r2, [r4, #4]
 800f52e:	2100      	movs	r1, #0
 800f530:	4628      	mov	r0, r5
 800f532:	f7f0 fed5 	bl	80002e0 <memchr>
 800f536:	b108      	cbz	r0, 800f53c <_printf_i+0x1bc>
 800f538:	1b40      	subs	r0, r0, r5
 800f53a:	6060      	str	r0, [r4, #4]
 800f53c:	6863      	ldr	r3, [r4, #4]
 800f53e:	6123      	str	r3, [r4, #16]
 800f540:	2300      	movs	r3, #0
 800f542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f546:	e7a7      	b.n	800f498 <_printf_i+0x118>
 800f548:	6923      	ldr	r3, [r4, #16]
 800f54a:	462a      	mov	r2, r5
 800f54c:	4639      	mov	r1, r7
 800f54e:	4630      	mov	r0, r6
 800f550:	47c0      	blx	r8
 800f552:	3001      	adds	r0, #1
 800f554:	d0aa      	beq.n	800f4ac <_printf_i+0x12c>
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	079b      	lsls	r3, r3, #30
 800f55a:	d413      	bmi.n	800f584 <_printf_i+0x204>
 800f55c:	68e0      	ldr	r0, [r4, #12]
 800f55e:	9b03      	ldr	r3, [sp, #12]
 800f560:	4298      	cmp	r0, r3
 800f562:	bfb8      	it	lt
 800f564:	4618      	movlt	r0, r3
 800f566:	e7a3      	b.n	800f4b0 <_printf_i+0x130>
 800f568:	2301      	movs	r3, #1
 800f56a:	464a      	mov	r2, r9
 800f56c:	4639      	mov	r1, r7
 800f56e:	4630      	mov	r0, r6
 800f570:	47c0      	blx	r8
 800f572:	3001      	adds	r0, #1
 800f574:	d09a      	beq.n	800f4ac <_printf_i+0x12c>
 800f576:	3501      	adds	r5, #1
 800f578:	68e3      	ldr	r3, [r4, #12]
 800f57a:	9a03      	ldr	r2, [sp, #12]
 800f57c:	1a9b      	subs	r3, r3, r2
 800f57e:	42ab      	cmp	r3, r5
 800f580:	dcf2      	bgt.n	800f568 <_printf_i+0x1e8>
 800f582:	e7eb      	b.n	800f55c <_printf_i+0x1dc>
 800f584:	2500      	movs	r5, #0
 800f586:	f104 0919 	add.w	r9, r4, #25
 800f58a:	e7f5      	b.n	800f578 <_printf_i+0x1f8>
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1ac      	bne.n	800f4ea <_printf_i+0x16a>
 800f590:	7803      	ldrb	r3, [r0, #0]
 800f592:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f596:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f59a:	e76c      	b.n	800f476 <_printf_i+0xf6>
 800f59c:	08010901 	.word	0x08010901
 800f5a0:	08010912 	.word	0x08010912

0800f5a4 <memcpy>:
 800f5a4:	b510      	push	{r4, lr}
 800f5a6:	1e43      	subs	r3, r0, #1
 800f5a8:	440a      	add	r2, r1
 800f5aa:	4291      	cmp	r1, r2
 800f5ac:	d100      	bne.n	800f5b0 <memcpy+0xc>
 800f5ae:	bd10      	pop	{r4, pc}
 800f5b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5b8:	e7f7      	b.n	800f5aa <memcpy+0x6>

0800f5ba <memmove>:
 800f5ba:	4288      	cmp	r0, r1
 800f5bc:	b510      	push	{r4, lr}
 800f5be:	eb01 0302 	add.w	r3, r1, r2
 800f5c2:	d807      	bhi.n	800f5d4 <memmove+0x1a>
 800f5c4:	1e42      	subs	r2, r0, #1
 800f5c6:	4299      	cmp	r1, r3
 800f5c8:	d00a      	beq.n	800f5e0 <memmove+0x26>
 800f5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f5d2:	e7f8      	b.n	800f5c6 <memmove+0xc>
 800f5d4:	4283      	cmp	r3, r0
 800f5d6:	d9f5      	bls.n	800f5c4 <memmove+0xa>
 800f5d8:	1881      	adds	r1, r0, r2
 800f5da:	1ad2      	subs	r2, r2, r3
 800f5dc:	42d3      	cmn	r3, r2
 800f5de:	d100      	bne.n	800f5e2 <memmove+0x28>
 800f5e0:	bd10      	pop	{r4, pc}
 800f5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f5ea:	e7f7      	b.n	800f5dc <memmove+0x22>

0800f5ec <_free_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	2900      	cmp	r1, #0
 800f5f2:	d045      	beq.n	800f680 <_free_r+0x94>
 800f5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5f8:	1f0c      	subs	r4, r1, #4
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	bfb8      	it	lt
 800f5fe:	18e4      	addlt	r4, r4, r3
 800f600:	f000 f8d2 	bl	800f7a8 <__malloc_lock>
 800f604:	4a1f      	ldr	r2, [pc, #124]	; (800f684 <_free_r+0x98>)
 800f606:	6813      	ldr	r3, [r2, #0]
 800f608:	4610      	mov	r0, r2
 800f60a:	b933      	cbnz	r3, 800f61a <_free_r+0x2e>
 800f60c:	6063      	str	r3, [r4, #4]
 800f60e:	6014      	str	r4, [r2, #0]
 800f610:	4628      	mov	r0, r5
 800f612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f616:	f000 b8c8 	b.w	800f7aa <__malloc_unlock>
 800f61a:	42a3      	cmp	r3, r4
 800f61c:	d90c      	bls.n	800f638 <_free_r+0x4c>
 800f61e:	6821      	ldr	r1, [r4, #0]
 800f620:	1862      	adds	r2, r4, r1
 800f622:	4293      	cmp	r3, r2
 800f624:	bf04      	itt	eq
 800f626:	681a      	ldreq	r2, [r3, #0]
 800f628:	685b      	ldreq	r3, [r3, #4]
 800f62a:	6063      	str	r3, [r4, #4]
 800f62c:	bf04      	itt	eq
 800f62e:	1852      	addeq	r2, r2, r1
 800f630:	6022      	streq	r2, [r4, #0]
 800f632:	6004      	str	r4, [r0, #0]
 800f634:	e7ec      	b.n	800f610 <_free_r+0x24>
 800f636:	4613      	mov	r3, r2
 800f638:	685a      	ldr	r2, [r3, #4]
 800f63a:	b10a      	cbz	r2, 800f640 <_free_r+0x54>
 800f63c:	42a2      	cmp	r2, r4
 800f63e:	d9fa      	bls.n	800f636 <_free_r+0x4a>
 800f640:	6819      	ldr	r1, [r3, #0]
 800f642:	1858      	adds	r0, r3, r1
 800f644:	42a0      	cmp	r0, r4
 800f646:	d10b      	bne.n	800f660 <_free_r+0x74>
 800f648:	6820      	ldr	r0, [r4, #0]
 800f64a:	4401      	add	r1, r0
 800f64c:	1858      	adds	r0, r3, r1
 800f64e:	4282      	cmp	r2, r0
 800f650:	6019      	str	r1, [r3, #0]
 800f652:	d1dd      	bne.n	800f610 <_free_r+0x24>
 800f654:	6810      	ldr	r0, [r2, #0]
 800f656:	6852      	ldr	r2, [r2, #4]
 800f658:	605a      	str	r2, [r3, #4]
 800f65a:	4401      	add	r1, r0
 800f65c:	6019      	str	r1, [r3, #0]
 800f65e:	e7d7      	b.n	800f610 <_free_r+0x24>
 800f660:	d902      	bls.n	800f668 <_free_r+0x7c>
 800f662:	230c      	movs	r3, #12
 800f664:	602b      	str	r3, [r5, #0]
 800f666:	e7d3      	b.n	800f610 <_free_r+0x24>
 800f668:	6820      	ldr	r0, [r4, #0]
 800f66a:	1821      	adds	r1, r4, r0
 800f66c:	428a      	cmp	r2, r1
 800f66e:	bf04      	itt	eq
 800f670:	6811      	ldreq	r1, [r2, #0]
 800f672:	6852      	ldreq	r2, [r2, #4]
 800f674:	6062      	str	r2, [r4, #4]
 800f676:	bf04      	itt	eq
 800f678:	1809      	addeq	r1, r1, r0
 800f67a:	6021      	streq	r1, [r4, #0]
 800f67c:	605c      	str	r4, [r3, #4]
 800f67e:	e7c7      	b.n	800f610 <_free_r+0x24>
 800f680:	bd38      	pop	{r3, r4, r5, pc}
 800f682:	bf00      	nop
 800f684:	240001bc 	.word	0x240001bc

0800f688 <_malloc_r>:
 800f688:	b570      	push	{r4, r5, r6, lr}
 800f68a:	1ccd      	adds	r5, r1, #3
 800f68c:	f025 0503 	bic.w	r5, r5, #3
 800f690:	3508      	adds	r5, #8
 800f692:	2d0c      	cmp	r5, #12
 800f694:	bf38      	it	cc
 800f696:	250c      	movcc	r5, #12
 800f698:	2d00      	cmp	r5, #0
 800f69a:	4606      	mov	r6, r0
 800f69c:	db01      	blt.n	800f6a2 <_malloc_r+0x1a>
 800f69e:	42a9      	cmp	r1, r5
 800f6a0:	d903      	bls.n	800f6aa <_malloc_r+0x22>
 800f6a2:	230c      	movs	r3, #12
 800f6a4:	6033      	str	r3, [r6, #0]
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	bd70      	pop	{r4, r5, r6, pc}
 800f6aa:	f000 f87d 	bl	800f7a8 <__malloc_lock>
 800f6ae:	4a21      	ldr	r2, [pc, #132]	; (800f734 <_malloc_r+0xac>)
 800f6b0:	6814      	ldr	r4, [r2, #0]
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	b991      	cbnz	r1, 800f6dc <_malloc_r+0x54>
 800f6b6:	4c20      	ldr	r4, [pc, #128]	; (800f738 <_malloc_r+0xb0>)
 800f6b8:	6823      	ldr	r3, [r4, #0]
 800f6ba:	b91b      	cbnz	r3, 800f6c4 <_malloc_r+0x3c>
 800f6bc:	4630      	mov	r0, r6
 800f6be:	f000 f863 	bl	800f788 <_sbrk_r>
 800f6c2:	6020      	str	r0, [r4, #0]
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f000 f85e 	bl	800f788 <_sbrk_r>
 800f6cc:	1c43      	adds	r3, r0, #1
 800f6ce:	d124      	bne.n	800f71a <_malloc_r+0x92>
 800f6d0:	230c      	movs	r3, #12
 800f6d2:	6033      	str	r3, [r6, #0]
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	f000 f868 	bl	800f7aa <__malloc_unlock>
 800f6da:	e7e4      	b.n	800f6a6 <_malloc_r+0x1e>
 800f6dc:	680b      	ldr	r3, [r1, #0]
 800f6de:	1b5b      	subs	r3, r3, r5
 800f6e0:	d418      	bmi.n	800f714 <_malloc_r+0x8c>
 800f6e2:	2b0b      	cmp	r3, #11
 800f6e4:	d90f      	bls.n	800f706 <_malloc_r+0x7e>
 800f6e6:	600b      	str	r3, [r1, #0]
 800f6e8:	50cd      	str	r5, [r1, r3]
 800f6ea:	18cc      	adds	r4, r1, r3
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	f000 f85c 	bl	800f7aa <__malloc_unlock>
 800f6f2:	f104 000b 	add.w	r0, r4, #11
 800f6f6:	1d23      	adds	r3, r4, #4
 800f6f8:	f020 0007 	bic.w	r0, r0, #7
 800f6fc:	1ac3      	subs	r3, r0, r3
 800f6fe:	d0d3      	beq.n	800f6a8 <_malloc_r+0x20>
 800f700:	425a      	negs	r2, r3
 800f702:	50e2      	str	r2, [r4, r3]
 800f704:	e7d0      	b.n	800f6a8 <_malloc_r+0x20>
 800f706:	428c      	cmp	r4, r1
 800f708:	684b      	ldr	r3, [r1, #4]
 800f70a:	bf16      	itet	ne
 800f70c:	6063      	strne	r3, [r4, #4]
 800f70e:	6013      	streq	r3, [r2, #0]
 800f710:	460c      	movne	r4, r1
 800f712:	e7eb      	b.n	800f6ec <_malloc_r+0x64>
 800f714:	460c      	mov	r4, r1
 800f716:	6849      	ldr	r1, [r1, #4]
 800f718:	e7cc      	b.n	800f6b4 <_malloc_r+0x2c>
 800f71a:	1cc4      	adds	r4, r0, #3
 800f71c:	f024 0403 	bic.w	r4, r4, #3
 800f720:	42a0      	cmp	r0, r4
 800f722:	d005      	beq.n	800f730 <_malloc_r+0xa8>
 800f724:	1a21      	subs	r1, r4, r0
 800f726:	4630      	mov	r0, r6
 800f728:	f000 f82e 	bl	800f788 <_sbrk_r>
 800f72c:	3001      	adds	r0, #1
 800f72e:	d0cf      	beq.n	800f6d0 <_malloc_r+0x48>
 800f730:	6025      	str	r5, [r4, #0]
 800f732:	e7db      	b.n	800f6ec <_malloc_r+0x64>
 800f734:	240001bc 	.word	0x240001bc
 800f738:	240001c0 	.word	0x240001c0

0800f73c <_realloc_r>:
 800f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73e:	4607      	mov	r7, r0
 800f740:	4614      	mov	r4, r2
 800f742:	460e      	mov	r6, r1
 800f744:	b921      	cbnz	r1, 800f750 <_realloc_r+0x14>
 800f746:	4611      	mov	r1, r2
 800f748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f74c:	f7ff bf9c 	b.w	800f688 <_malloc_r>
 800f750:	b922      	cbnz	r2, 800f75c <_realloc_r+0x20>
 800f752:	f7ff ff4b 	bl	800f5ec <_free_r>
 800f756:	4625      	mov	r5, r4
 800f758:	4628      	mov	r0, r5
 800f75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f75c:	f000 f826 	bl	800f7ac <_malloc_usable_size_r>
 800f760:	42a0      	cmp	r0, r4
 800f762:	d20f      	bcs.n	800f784 <_realloc_r+0x48>
 800f764:	4621      	mov	r1, r4
 800f766:	4638      	mov	r0, r7
 800f768:	f7ff ff8e 	bl	800f688 <_malloc_r>
 800f76c:	4605      	mov	r5, r0
 800f76e:	2800      	cmp	r0, #0
 800f770:	d0f2      	beq.n	800f758 <_realloc_r+0x1c>
 800f772:	4631      	mov	r1, r6
 800f774:	4622      	mov	r2, r4
 800f776:	f7ff ff15 	bl	800f5a4 <memcpy>
 800f77a:	4631      	mov	r1, r6
 800f77c:	4638      	mov	r0, r7
 800f77e:	f7ff ff35 	bl	800f5ec <_free_r>
 800f782:	e7e9      	b.n	800f758 <_realloc_r+0x1c>
 800f784:	4635      	mov	r5, r6
 800f786:	e7e7      	b.n	800f758 <_realloc_r+0x1c>

0800f788 <_sbrk_r>:
 800f788:	b538      	push	{r3, r4, r5, lr}
 800f78a:	4c06      	ldr	r4, [pc, #24]	; (800f7a4 <_sbrk_r+0x1c>)
 800f78c:	2300      	movs	r3, #0
 800f78e:	4605      	mov	r5, r0
 800f790:	4608      	mov	r0, r1
 800f792:	6023      	str	r3, [r4, #0]
 800f794:	f7f4 fa46 	bl	8003c24 <_sbrk>
 800f798:	1c43      	adds	r3, r0, #1
 800f79a:	d102      	bne.n	800f7a2 <_sbrk_r+0x1a>
 800f79c:	6823      	ldr	r3, [r4, #0]
 800f79e:	b103      	cbz	r3, 800f7a2 <_sbrk_r+0x1a>
 800f7a0:	602b      	str	r3, [r5, #0]
 800f7a2:	bd38      	pop	{r3, r4, r5, pc}
 800f7a4:	24000dc0 	.word	0x24000dc0

0800f7a8 <__malloc_lock>:
 800f7a8:	4770      	bx	lr

0800f7aa <__malloc_unlock>:
 800f7aa:	4770      	bx	lr

0800f7ac <_malloc_usable_size_r>:
 800f7ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7b0:	1f18      	subs	r0, r3, #4
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	bfbc      	itt	lt
 800f7b6:	580b      	ldrlt	r3, [r1, r0]
 800f7b8:	18c0      	addlt	r0, r0, r3
 800f7ba:	4770      	bx	lr
 800f7bc:	0000      	movs	r0, r0
	...

0800f7c0 <cos>:
 800f7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7c2:	eeb0 7b40 	vmov.f64	d7, d0
 800f7c6:	ee17 3a90 	vmov	r3, s15
 800f7ca:	4a19      	ldr	r2, [pc, #100]	; (800f830 <cos+0x70>)
 800f7cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	dc04      	bgt.n	800f7de <cos+0x1e>
 800f7d4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800f828 <cos+0x68>
 800f7d8:	f000 faa2 	bl	800fd20 <__kernel_cos>
 800f7dc:	e004      	b.n	800f7e8 <cos+0x28>
 800f7de:	4a15      	ldr	r2, [pc, #84]	; (800f834 <cos+0x74>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	dd04      	ble.n	800f7ee <cos+0x2e>
 800f7e4:	ee30 0b40 	vsub.f64	d0, d0, d0
 800f7e8:	b005      	add	sp, #20
 800f7ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7ee:	4668      	mov	r0, sp
 800f7f0:	f000 f956 	bl	800faa0 <__ieee754_rem_pio2>
 800f7f4:	f000 0003 	and.w	r0, r0, #3
 800f7f8:	2801      	cmp	r0, #1
 800f7fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7fe:	ed9d 0b00 	vldr	d0, [sp]
 800f802:	d007      	beq.n	800f814 <cos+0x54>
 800f804:	2802      	cmp	r0, #2
 800f806:	d00a      	beq.n	800f81e <cos+0x5e>
 800f808:	2800      	cmp	r0, #0
 800f80a:	d0e5      	beq.n	800f7d8 <cos+0x18>
 800f80c:	2001      	movs	r0, #1
 800f80e:	f000 fd8f 	bl	8010330 <__kernel_sin>
 800f812:	e7e9      	b.n	800f7e8 <cos+0x28>
 800f814:	f000 fd8c 	bl	8010330 <__kernel_sin>
 800f818:	eeb1 0b40 	vneg.f64	d0, d0
 800f81c:	e7e4      	b.n	800f7e8 <cos+0x28>
 800f81e:	f000 fa7f 	bl	800fd20 <__kernel_cos>
 800f822:	e7f9      	b.n	800f818 <cos+0x58>
 800f824:	f3af 8000 	nop.w
	...
 800f830:	3fe921fb 	.word	0x3fe921fb
 800f834:	7fefffff 	.word	0x7fefffff

0800f838 <atan2>:
 800f838:	f000 b84e 	b.w	800f8d8 <__ieee754_atan2>
 800f83c:	0000      	movs	r0, r0
	...

0800f840 <sqrt>:
 800f840:	b500      	push	{lr}
 800f842:	ed2d 8b02 	vpush	{d8}
 800f846:	eeb0 8b40 	vmov.f64	d8, d0
 800f84a:	b08b      	sub	sp, #44	; 0x2c
 800f84c:	f000 fa64 	bl	800fd18 <__ieee754_sqrt>
 800f850:	4b1f      	ldr	r3, [pc, #124]	; (800f8d0 <sqrt+0x90>)
 800f852:	f993 3000 	ldrsb.w	r3, [r3]
 800f856:	1c5a      	adds	r2, r3, #1
 800f858:	d024      	beq.n	800f8a4 <sqrt+0x64>
 800f85a:	eeb4 8b48 	vcmp.f64	d8, d8
 800f85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f862:	d61f      	bvs.n	800f8a4 <sqrt+0x64>
 800f864:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800f8c8 <sqrt+0x88>
 800f868:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f870:	d518      	bpl.n	800f8a4 <sqrt+0x64>
 800f872:	2201      	movs	r2, #1
 800f874:	9200      	str	r2, [sp, #0]
 800f876:	4a17      	ldr	r2, [pc, #92]	; (800f8d4 <sqrt+0x94>)
 800f878:	9201      	str	r2, [sp, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	9208      	str	r2, [sp, #32]
 800f87e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f882:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f886:	b993      	cbnz	r3, 800f8ae <sqrt+0x6e>
 800f888:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f88c:	4668      	mov	r0, sp
 800f88e:	f000 ff23 	bl	80106d8 <matherr>
 800f892:	b190      	cbz	r0, 800f8ba <sqrt+0x7a>
 800f894:	9b08      	ldr	r3, [sp, #32]
 800f896:	b11b      	cbz	r3, 800f8a0 <sqrt+0x60>
 800f898:	f7ff fb58 	bl	800ef4c <__errno>
 800f89c:	9b08      	ldr	r3, [sp, #32]
 800f89e:	6003      	str	r3, [r0, #0]
 800f8a0:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f8a4:	b00b      	add	sp, #44	; 0x2c
 800f8a6:	ecbd 8b02 	vpop	{d8}
 800f8aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800f8b4:	ed8d 6b06 	vstr	d6, [sp, #24]
 800f8b8:	d1e8      	bne.n	800f88c <sqrt+0x4c>
 800f8ba:	f7ff fb47 	bl	800ef4c <__errno>
 800f8be:	2321      	movs	r3, #33	; 0x21
 800f8c0:	6003      	str	r3, [r0, #0]
 800f8c2:	e7e7      	b.n	800f894 <sqrt+0x54>
 800f8c4:	f3af 8000 	nop.w
	...
 800f8d0:	2400015c 	.word	0x2400015c
 800f8d4:	08010923 	.word	0x08010923

0800f8d8 <__ieee754_atan2>:
 800f8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8da:	ee11 6a10 	vmov	r6, s2
 800f8de:	ee11 0a90 	vmov	r0, s3
 800f8e2:	4273      	negs	r3, r6
 800f8e4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f8e8:	4333      	orrs	r3, r6
 800f8ea:	4f6b      	ldr	r7, [pc, #428]	; (800fa98 <__ieee754_atan2+0x1c0>)
 800f8ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f8f0:	42bb      	cmp	r3, r7
 800f8f2:	ed8d 0b00 	vstr	d0, [sp]
 800f8f6:	d80b      	bhi.n	800f910 <__ieee754_atan2+0x38>
 800f8f8:	e9dd c500 	ldrd	ip, r5, [sp]
 800f8fc:	f1cc 0100 	rsb	r1, ip, #0
 800f900:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f904:	ea41 010c 	orr.w	r1, r1, ip
 800f908:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800f90c:	42b9      	cmp	r1, r7
 800f90e:	d906      	bls.n	800f91e <__ieee754_atan2+0x46>
 800f910:	ed9d 7b00 	vldr	d7, [sp]
 800f914:	ee37 7b01 	vadd.f64	d7, d7, d1
 800f918:	ed8d 7b00 	vstr	d7, [sp]
 800f91c:	e063      	b.n	800f9e6 <__ieee754_atan2+0x10e>
 800f91e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800f922:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800f926:	4331      	orrs	r1, r6
 800f928:	d104      	bne.n	800f934 <__ieee754_atan2+0x5c>
 800f92a:	b003      	add	sp, #12
 800f92c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f930:	f000 bd56 	b.w	80103e0 <atan>
 800f934:	1784      	asrs	r4, r0, #30
 800f936:	f004 0402 	and.w	r4, r4, #2
 800f93a:	ea53 010c 	orrs.w	r1, r3, ip
 800f93e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800f942:	d109      	bne.n	800f958 <__ieee754_atan2+0x80>
 800f944:	2c02      	cmp	r4, #2
 800f946:	d078      	beq.n	800fa3a <__ieee754_atan2+0x162>
 800f948:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800fa40 <__ieee754_atan2+0x168>
 800f94c:	ed9d 6b00 	vldr	d6, [sp]
 800f950:	2c03      	cmp	r4, #3
 800f952:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800f956:	e7df      	b.n	800f918 <__ieee754_atan2+0x40>
 800f958:	ea52 0106 	orrs.w	r1, r2, r6
 800f95c:	d107      	bne.n	800f96e <__ieee754_atan2+0x96>
 800f95e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800fa48 <__ieee754_atan2+0x170>
 800f962:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800fa50 <__ieee754_atan2+0x178>
 800f966:	2d00      	cmp	r5, #0
 800f968:	fe26 7b07 	vselge.f64	d7, d6, d7
 800f96c:	e7d4      	b.n	800f918 <__ieee754_atan2+0x40>
 800f96e:	42ba      	cmp	r2, r7
 800f970:	d120      	bne.n	800f9b4 <__ieee754_atan2+0xdc>
 800f972:	4293      	cmp	r3, r2
 800f974:	d111      	bne.n	800f99a <__ieee754_atan2+0xc2>
 800f976:	2c02      	cmp	r4, #2
 800f978:	d009      	beq.n	800f98e <__ieee754_atan2+0xb6>
 800f97a:	2c03      	cmp	r4, #3
 800f97c:	d00a      	beq.n	800f994 <__ieee754_atan2+0xbc>
 800f97e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800fa58 <__ieee754_atan2+0x180>
 800f982:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800fa60 <__ieee754_atan2+0x188>
 800f986:	2c01      	cmp	r4, #1
 800f988:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800f98c:	e7c4      	b.n	800f918 <__ieee754_atan2+0x40>
 800f98e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800fa68 <__ieee754_atan2+0x190>
 800f992:	e7c1      	b.n	800f918 <__ieee754_atan2+0x40>
 800f994:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800fa70 <__ieee754_atan2+0x198>
 800f998:	e7be      	b.n	800f918 <__ieee754_atan2+0x40>
 800f99a:	2c02      	cmp	r4, #2
 800f99c:	d04d      	beq.n	800fa3a <__ieee754_atan2+0x162>
 800f99e:	2c03      	cmp	r4, #3
 800f9a0:	d005      	beq.n	800f9ae <__ieee754_atan2+0xd6>
 800f9a2:	2c01      	cmp	r4, #1
 800f9a4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800fa78 <__ieee754_atan2+0x1a0>
 800f9a8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800fa80 <__ieee754_atan2+0x1a8>
 800f9ac:	e7ec      	b.n	800f988 <__ieee754_atan2+0xb0>
 800f9ae:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800fa40 <__ieee754_atan2+0x168>
 800f9b2:	e7b1      	b.n	800f918 <__ieee754_atan2+0x40>
 800f9b4:	42bb      	cmp	r3, r7
 800f9b6:	d0d2      	beq.n	800f95e <__ieee754_atan2+0x86>
 800f9b8:	1a9b      	subs	r3, r3, r2
 800f9ba:	151b      	asrs	r3, r3, #20
 800f9bc:	2b3c      	cmp	r3, #60	; 0x3c
 800f9be:	dc16      	bgt.n	800f9ee <__ieee754_atan2+0x116>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	da01      	bge.n	800f9c8 <__ieee754_atan2+0xf0>
 800f9c4:	333c      	adds	r3, #60	; 0x3c
 800f9c6:	db17      	blt.n	800f9f8 <__ieee754_atan2+0x120>
 800f9c8:	ed9d 7b00 	vldr	d7, [sp]
 800f9cc:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800f9d0:	f000 fe00 	bl	80105d4 <fabs>
 800f9d4:	f000 fd04 	bl	80103e0 <atan>
 800f9d8:	ed8d 0b00 	vstr	d0, [sp]
 800f9dc:	2c01      	cmp	r4, #1
 800f9de:	d00e      	beq.n	800f9fe <__ieee754_atan2+0x126>
 800f9e0:	2c02      	cmp	r4, #2
 800f9e2:	d014      	beq.n	800fa0e <__ieee754_atan2+0x136>
 800f9e4:	b9f4      	cbnz	r4, 800fa24 <__ieee754_atan2+0x14c>
 800f9e6:	ed9d 0b00 	vldr	d0, [sp]
 800f9ea:	b003      	add	sp, #12
 800f9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ee:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800fa48 <__ieee754_atan2+0x170>
 800f9f2:	ed8d 7b00 	vstr	d7, [sp]
 800f9f6:	e7f1      	b.n	800f9dc <__ieee754_atan2+0x104>
 800f9f8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fa80 <__ieee754_atan2+0x1a8>
 800f9fc:	e7f9      	b.n	800f9f2 <__ieee754_atan2+0x11a>
 800f9fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa02:	9901      	ldr	r1, [sp, #4]
 800fa04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa08:	e9cd 2300 	strd	r2, r3, [sp]
 800fa0c:	e7eb      	b.n	800f9e6 <__ieee754_atan2+0x10e>
 800fa0e:	ed9d 6b00 	vldr	d6, [sp]
 800fa12:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800fa88 <__ieee754_atan2+0x1b0>
 800fa16:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fa1a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800fa90 <__ieee754_atan2+0x1b8>
 800fa1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fa22:	e779      	b.n	800f918 <__ieee754_atan2+0x40>
 800fa24:	ed9d 6b00 	vldr	d6, [sp]
 800fa28:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800fa88 <__ieee754_atan2+0x1b0>
 800fa2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fa30:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800fa90 <__ieee754_atan2+0x1b8>
 800fa34:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fa38:	e76e      	b.n	800f918 <__ieee754_atan2+0x40>
 800fa3a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800fa90 <__ieee754_atan2+0x1b8>
 800fa3e:	e76b      	b.n	800f918 <__ieee754_atan2+0x40>
 800fa40:	54442d18 	.word	0x54442d18
 800fa44:	c00921fb 	.word	0xc00921fb
 800fa48:	54442d18 	.word	0x54442d18
 800fa4c:	3ff921fb 	.word	0x3ff921fb
 800fa50:	54442d18 	.word	0x54442d18
 800fa54:	bff921fb 	.word	0xbff921fb
 800fa58:	54442d18 	.word	0x54442d18
 800fa5c:	bfe921fb 	.word	0xbfe921fb
 800fa60:	54442d18 	.word	0x54442d18
 800fa64:	3fe921fb 	.word	0x3fe921fb
 800fa68:	7f3321d2 	.word	0x7f3321d2
 800fa6c:	4002d97c 	.word	0x4002d97c
 800fa70:	7f3321d2 	.word	0x7f3321d2
 800fa74:	c002d97c 	.word	0xc002d97c
 800fa78:	00000000 	.word	0x00000000
 800fa7c:	80000000 	.word	0x80000000
	...
 800fa88:	33145c07 	.word	0x33145c07
 800fa8c:	3ca1a626 	.word	0x3ca1a626
 800fa90:	54442d18 	.word	0x54442d18
 800fa94:	400921fb 	.word	0x400921fb
 800fa98:	7ff00000 	.word	0x7ff00000
 800fa9c:	00000000 	.word	0x00000000

0800faa0 <__ieee754_rem_pio2>:
 800faa0:	b570      	push	{r4, r5, r6, lr}
 800faa2:	eeb0 7b40 	vmov.f64	d7, d0
 800faa6:	ee17 5a90 	vmov	r5, s15
 800faaa:	4b95      	ldr	r3, [pc, #596]	; (800fd00 <__ieee754_rem_pio2+0x260>)
 800faac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fab0:	429e      	cmp	r6, r3
 800fab2:	b088      	sub	sp, #32
 800fab4:	4604      	mov	r4, r0
 800fab6:	dc07      	bgt.n	800fac8 <__ieee754_rem_pio2+0x28>
 800fab8:	2200      	movs	r2, #0
 800faba:	2300      	movs	r3, #0
 800fabc:	ed84 0b00 	vstr	d0, [r4]
 800fac0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fac4:	2000      	movs	r0, #0
 800fac6:	e01b      	b.n	800fb00 <__ieee754_rem_pio2+0x60>
 800fac8:	4b8e      	ldr	r3, [pc, #568]	; (800fd04 <__ieee754_rem_pio2+0x264>)
 800faca:	429e      	cmp	r6, r3
 800facc:	dc3b      	bgt.n	800fb46 <__ieee754_rem_pio2+0xa6>
 800face:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800fad2:	2d00      	cmp	r5, #0
 800fad4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800fcc0 <__ieee754_rem_pio2+0x220>
 800fad8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800fadc:	dd19      	ble.n	800fb12 <__ieee754_rem_pio2+0x72>
 800fade:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fae2:	429e      	cmp	r6, r3
 800fae4:	d00e      	beq.n	800fb04 <__ieee754_rem_pio2+0x64>
 800fae6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800fcc8 <__ieee754_rem_pio2+0x228>
 800faea:	ee37 5b46 	vsub.f64	d5, d7, d6
 800faee:	ee37 7b45 	vsub.f64	d7, d7, d5
 800faf2:	ed84 5b00 	vstr	d5, [r4]
 800faf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fafa:	ed84 7b02 	vstr	d7, [r4, #8]
 800fafe:	2001      	movs	r0, #1
 800fb00:	b008      	add	sp, #32
 800fb02:	bd70      	pop	{r4, r5, r6, pc}
 800fb04:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800fcd0 <__ieee754_rem_pio2+0x230>
 800fb08:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fb0c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800fcd8 <__ieee754_rem_pio2+0x238>
 800fb10:	e7eb      	b.n	800faea <__ieee754_rem_pio2+0x4a>
 800fb12:	429e      	cmp	r6, r3
 800fb14:	ee30 7b06 	vadd.f64	d7, d0, d6
 800fb18:	d00e      	beq.n	800fb38 <__ieee754_rem_pio2+0x98>
 800fb1a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800fcc8 <__ieee754_rem_pio2+0x228>
 800fb1e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800fb22:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fb26:	ed84 5b00 	vstr	d5, [r4]
 800fb2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb32:	ed84 7b02 	vstr	d7, [r4, #8]
 800fb36:	e7e3      	b.n	800fb00 <__ieee754_rem_pio2+0x60>
 800fb38:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800fcd0 <__ieee754_rem_pio2+0x230>
 800fb3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fb40:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800fcd8 <__ieee754_rem_pio2+0x238>
 800fb44:	e7eb      	b.n	800fb1e <__ieee754_rem_pio2+0x7e>
 800fb46:	4b70      	ldr	r3, [pc, #448]	; (800fd08 <__ieee754_rem_pio2+0x268>)
 800fb48:	429e      	cmp	r6, r3
 800fb4a:	dc6c      	bgt.n	800fc26 <__ieee754_rem_pio2+0x186>
 800fb4c:	f000 fd42 	bl	80105d4 <fabs>
 800fb50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800fb54:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800fce0 <__ieee754_rem_pio2+0x240>
 800fb58:	eea0 7b06 	vfma.f64	d7, d0, d6
 800fb5c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fb60:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fb64:	ee17 0a90 	vmov	r0, s15
 800fb68:	eeb1 5b44 	vneg.f64	d5, d4
 800fb6c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800fcc0 <__ieee754_rem_pio2+0x220>
 800fb70:	eea5 0b07 	vfma.f64	d0, d5, d7
 800fb74:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800fcc8 <__ieee754_rem_pio2+0x228>
 800fb78:	281f      	cmp	r0, #31
 800fb7a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fb7e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fb82:	dc08      	bgt.n	800fb96 <__ieee754_rem_pio2+0xf6>
 800fb84:	1e42      	subs	r2, r0, #1
 800fb86:	4b61      	ldr	r3, [pc, #388]	; (800fd0c <__ieee754_rem_pio2+0x26c>)
 800fb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb8c:	42b3      	cmp	r3, r6
 800fb8e:	d002      	beq.n	800fb96 <__ieee754_rem_pio2+0xf6>
 800fb90:	ed84 6b00 	vstr	d6, [r4]
 800fb94:	e022      	b.n	800fbdc <__ieee754_rem_pio2+0x13c>
 800fb96:	ee16 3a90 	vmov	r3, s13
 800fb9a:	1536      	asrs	r6, r6, #20
 800fb9c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fba0:	1af3      	subs	r3, r6, r3
 800fba2:	2b10      	cmp	r3, #16
 800fba4:	ddf4      	ble.n	800fb90 <__ieee754_rem_pio2+0xf0>
 800fba6:	eeb0 6b40 	vmov.f64	d6, d0
 800fbaa:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800fcd0 <__ieee754_rem_pio2+0x230>
 800fbae:	eea5 6b03 	vfma.f64	d6, d5, d3
 800fbb2:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fbb6:	eea5 7b03 	vfma.f64	d7, d5, d3
 800fbba:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800fcd8 <__ieee754_rem_pio2+0x238>
 800fbbe:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800fbc2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800fbc6:	ee13 3a90 	vmov	r3, s7
 800fbca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fbce:	1af6      	subs	r6, r6, r3
 800fbd0:	2e31      	cmp	r6, #49	; 0x31
 800fbd2:	dc17      	bgt.n	800fc04 <__ieee754_rem_pio2+0x164>
 800fbd4:	eeb0 0b46 	vmov.f64	d0, d6
 800fbd8:	ed84 3b00 	vstr	d3, [r4]
 800fbdc:	ed94 6b00 	vldr	d6, [r4]
 800fbe0:	2d00      	cmp	r5, #0
 800fbe2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fbe6:	ee30 7b47 	vsub.f64	d7, d0, d7
 800fbea:	ed84 7b02 	vstr	d7, [r4, #8]
 800fbee:	da87      	bge.n	800fb00 <__ieee754_rem_pio2+0x60>
 800fbf0:	eeb1 6b46 	vneg.f64	d6, d6
 800fbf4:	ed84 6b00 	vstr	d6, [r4]
 800fbf8:	eeb1 7b47 	vneg.f64	d7, d7
 800fbfc:	4240      	negs	r0, r0
 800fbfe:	ed84 7b02 	vstr	d7, [r4, #8]
 800fc02:	e77d      	b.n	800fb00 <__ieee754_rem_pio2+0x60>
 800fc04:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800fce8 <__ieee754_rem_pio2+0x248>
 800fc08:	eeb0 0b46 	vmov.f64	d0, d6
 800fc0c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800fc10:	ee36 7b40 	vsub.f64	d7, d6, d0
 800fc14:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800fcf0 <__ieee754_rem_pio2+0x250>
 800fc18:	eea5 7b03 	vfma.f64	d7, d5, d3
 800fc1c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800fc20:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fc24:	e7b4      	b.n	800fb90 <__ieee754_rem_pio2+0xf0>
 800fc26:	4b3a      	ldr	r3, [pc, #232]	; (800fd10 <__ieee754_rem_pio2+0x270>)
 800fc28:	429e      	cmp	r6, r3
 800fc2a:	dd06      	ble.n	800fc3a <__ieee754_rem_pio2+0x19a>
 800fc2c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800fc30:	ed80 7b02 	vstr	d7, [r0, #8]
 800fc34:	ed80 7b00 	vstr	d7, [r0]
 800fc38:	e744      	b.n	800fac4 <__ieee754_rem_pio2+0x24>
 800fc3a:	1532      	asrs	r2, r6, #20
 800fc3c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800fc40:	ee10 0a10 	vmov	r0, s0
 800fc44:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800fc48:	ec41 0b17 	vmov	d7, r0, r1
 800fc4c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fc50:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800fcf8 <__ieee754_rem_pio2+0x258>
 800fc54:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fc58:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fc5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fc60:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fc64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800fc68:	a908      	add	r1, sp, #32
 800fc6a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800fc6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fc72:	ed8d 6b04 	vstr	d6, [sp, #16]
 800fc76:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fc7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fc7e:	2303      	movs	r3, #3
 800fc80:	ed31 7b02 	vldmdb	r1!, {d7}
 800fc84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8c:	f103 30ff 	add.w	r0, r3, #4294967295
 800fc90:	d013      	beq.n	800fcba <__ieee754_rem_pio2+0x21a>
 800fc92:	4920      	ldr	r1, [pc, #128]	; (800fd14 <__ieee754_rem_pio2+0x274>)
 800fc94:	9101      	str	r1, [sp, #4]
 800fc96:	2102      	movs	r1, #2
 800fc98:	9100      	str	r1, [sp, #0]
 800fc9a:	a802      	add	r0, sp, #8
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	f000 f8ab 	bl	800fdf8 <__kernel_rem_pio2>
 800fca2:	2d00      	cmp	r5, #0
 800fca4:	f6bf af2c 	bge.w	800fb00 <__ieee754_rem_pio2+0x60>
 800fca8:	ed94 7b00 	vldr	d7, [r4]
 800fcac:	eeb1 7b47 	vneg.f64	d7, d7
 800fcb0:	ed84 7b00 	vstr	d7, [r4]
 800fcb4:	ed94 7b02 	vldr	d7, [r4, #8]
 800fcb8:	e79e      	b.n	800fbf8 <__ieee754_rem_pio2+0x158>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	e7e0      	b.n	800fc80 <__ieee754_rem_pio2+0x1e0>
 800fcbe:	bf00      	nop
 800fcc0:	54400000 	.word	0x54400000
 800fcc4:	3ff921fb 	.word	0x3ff921fb
 800fcc8:	1a626331 	.word	0x1a626331
 800fccc:	3dd0b461 	.word	0x3dd0b461
 800fcd0:	1a600000 	.word	0x1a600000
 800fcd4:	3dd0b461 	.word	0x3dd0b461
 800fcd8:	2e037073 	.word	0x2e037073
 800fcdc:	3ba3198a 	.word	0x3ba3198a
 800fce0:	6dc9c883 	.word	0x6dc9c883
 800fce4:	3fe45f30 	.word	0x3fe45f30
 800fce8:	2e000000 	.word	0x2e000000
 800fcec:	3ba3198a 	.word	0x3ba3198a
 800fcf0:	252049c1 	.word	0x252049c1
 800fcf4:	397b839a 	.word	0x397b839a
 800fcf8:	00000000 	.word	0x00000000
 800fcfc:	41700000 	.word	0x41700000
 800fd00:	3fe921fb 	.word	0x3fe921fb
 800fd04:	4002d97b 	.word	0x4002d97b
 800fd08:	413921fb 	.word	0x413921fb
 800fd0c:	08010928 	.word	0x08010928
 800fd10:	7fefffff 	.word	0x7fefffff
 800fd14:	080109a8 	.word	0x080109a8

0800fd18 <__ieee754_sqrt>:
 800fd18:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800fd1c:	4770      	bx	lr
	...

0800fd20 <__kernel_cos>:
 800fd20:	ee10 1a90 	vmov	r1, s1
 800fd24:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fd28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fd2c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800fd30:	da05      	bge.n	800fd3e <__kernel_cos+0x1e>
 800fd32:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800fd36:	ee16 3a90 	vmov	r3, s13
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d03d      	beq.n	800fdba <__kernel_cos+0x9a>
 800fd3e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800fd42:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800fd46:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800fdc0 <__kernel_cos+0xa0>
 800fd4a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800fd4e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800fd52:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800fdc8 <__kernel_cos+0xa8>
 800fd56:	eea4 5b03 	vfma.f64	d5, d4, d3
 800fd5a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800fdd0 <__kernel_cos+0xb0>
 800fd5e:	eea5 3b04 	vfma.f64	d3, d5, d4
 800fd62:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800fdd8 <__kernel_cos+0xb8>
 800fd66:	eea3 5b04 	vfma.f64	d5, d3, d4
 800fd6a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800fde0 <__kernel_cos+0xc0>
 800fd6e:	4b20      	ldr	r3, [pc, #128]	; (800fdf0 <__kernel_cos+0xd0>)
 800fd70:	eea5 3b04 	vfma.f64	d3, d5, d4
 800fd74:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800fde8 <__kernel_cos+0xc8>
 800fd78:	4299      	cmp	r1, r3
 800fd7a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800fd7e:	ee25 5b04 	vmul.f64	d5, d5, d4
 800fd82:	eea4 1b05 	vfma.f64	d1, d4, d5
 800fd86:	dc04      	bgt.n	800fd92 <__kernel_cos+0x72>
 800fd88:	ee36 6b41 	vsub.f64	d6, d6, d1
 800fd8c:	ee37 0b46 	vsub.f64	d0, d7, d6
 800fd90:	4770      	bx	lr
 800fd92:	4b18      	ldr	r3, [pc, #96]	; (800fdf4 <__kernel_cos+0xd4>)
 800fd94:	4299      	cmp	r1, r3
 800fd96:	dc0d      	bgt.n	800fdb4 <__kernel_cos+0x94>
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800fd9e:	ec43 2b15 	vmov	d5, r2, r3
 800fda2:	ee37 0b45 	vsub.f64	d0, d7, d5
 800fda6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fdaa:	ee36 6b41 	vsub.f64	d6, d6, d1
 800fdae:	ee30 0b46 	vsub.f64	d0, d0, d6
 800fdb2:	4770      	bx	lr
 800fdb4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800fdb8:	e7f3      	b.n	800fda2 <__kernel_cos+0x82>
 800fdba:	eeb0 0b47 	vmov.f64	d0, d7
 800fdbe:	4770      	bx	lr
 800fdc0:	be8838d4 	.word	0xbe8838d4
 800fdc4:	bda8fae9 	.word	0xbda8fae9
 800fdc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800fdcc:	3e21ee9e 	.word	0x3e21ee9e
 800fdd0:	809c52ad 	.word	0x809c52ad
 800fdd4:	be927e4f 	.word	0xbe927e4f
 800fdd8:	19cb1590 	.word	0x19cb1590
 800fddc:	3efa01a0 	.word	0x3efa01a0
 800fde0:	16c15177 	.word	0x16c15177
 800fde4:	bf56c16c 	.word	0xbf56c16c
 800fde8:	5555554c 	.word	0x5555554c
 800fdec:	3fa55555 	.word	0x3fa55555
 800fdf0:	3fd33332 	.word	0x3fd33332
 800fdf4:	3fe90000 	.word	0x3fe90000

0800fdf8 <__kernel_rem_pio2>:
 800fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfc:	ed2d 8b06 	vpush	{d8-d10}
 800fe00:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800fe04:	469b      	mov	fp, r3
 800fe06:	460e      	mov	r6, r1
 800fe08:	4bc7      	ldr	r3, [pc, #796]	; (8010128 <__kernel_rem_pio2+0x330>)
 800fe0a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800fe0c:	9002      	str	r0, [sp, #8]
 800fe0e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800fe12:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800fe14:	1ed1      	subs	r1, r2, #3
 800fe16:	2318      	movs	r3, #24
 800fe18:	f06f 0417 	mvn.w	r4, #23
 800fe1c:	fb91 f1f3 	sdiv	r1, r1, r3
 800fe20:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800fe24:	f10b 3aff 	add.w	sl, fp, #4294967295
 800fe28:	fb01 4404 	mla	r4, r1, r4, r4
 800fe2c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8010110 <__kernel_rem_pio2+0x318>
 800fe30:	4414      	add	r4, r2
 800fe32:	eba1 050a 	sub.w	r5, r1, sl
 800fe36:	aa1a      	add	r2, sp, #104	; 0x68
 800fe38:	eb09 070a 	add.w	r7, r9, sl
 800fe3c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800fe40:	4696      	mov	lr, r2
 800fe42:	2300      	movs	r3, #0
 800fe44:	42bb      	cmp	r3, r7
 800fe46:	dd0f      	ble.n	800fe68 <__kernel_rem_pio2+0x70>
 800fe48:	af6a      	add	r7, sp, #424	; 0x1a8
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	454a      	cmp	r2, r9
 800fe4e:	dc28      	bgt.n	800fea2 <__kernel_rem_pio2+0xaa>
 800fe50:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800fe54:	eb0b 0302 	add.w	r3, fp, r2
 800fe58:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800fe5c:	9d02      	ldr	r5, [sp, #8]
 800fe5e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8010110 <__kernel_rem_pio2+0x318>
 800fe62:	f04f 0c00 	mov.w	ip, #0
 800fe66:	e016      	b.n	800fe96 <__kernel_rem_pio2+0x9e>
 800fe68:	42dd      	cmn	r5, r3
 800fe6a:	d409      	bmi.n	800fe80 <__kernel_rem_pio2+0x88>
 800fe6c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800fe70:	ee07 2a90 	vmov	s15, r2
 800fe74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fe78:	ecae 7b02 	vstmia	lr!, {d7}
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	e7e1      	b.n	800fe44 <__kernel_rem_pio2+0x4c>
 800fe80:	eeb0 7b46 	vmov.f64	d7, d6
 800fe84:	e7f8      	b.n	800fe78 <__kernel_rem_pio2+0x80>
 800fe86:	ecb5 5b02 	vldmia	r5!, {d5}
 800fe8a:	ed33 6b02 	vldmdb	r3!, {d6}
 800fe8e:	f10c 0c01 	add.w	ip, ip, #1
 800fe92:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fe96:	45d4      	cmp	ip, sl
 800fe98:	ddf5      	ble.n	800fe86 <__kernel_rem_pio2+0x8e>
 800fe9a:	eca7 7b02 	vstmia	r7!, {d7}
 800fe9e:	3201      	adds	r2, #1
 800fea0:	e7d4      	b.n	800fe4c <__kernel_rem_pio2+0x54>
 800fea2:	ab06      	add	r3, sp, #24
 800fea4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800fea8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8010118 <__kernel_rem_pio2+0x320>
 800feac:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8010120 <__kernel_rem_pio2+0x328>
 800feb0:	9304      	str	r3, [sp, #16]
 800feb2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800feb6:	9303      	str	r3, [sp, #12]
 800feb8:	464d      	mov	r5, r9
 800feba:	ab92      	add	r3, sp, #584	; 0x248
 800febc:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800fec0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fec4:	3f01      	subs	r7, #1
 800fec6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800feca:	00ff      	lsls	r7, r7, #3
 800fecc:	ab92      	add	r3, sp, #584	; 0x248
 800fece:	19da      	adds	r2, r3, r7
 800fed0:	3a98      	subs	r2, #152	; 0x98
 800fed2:	2300      	movs	r3, #0
 800fed4:	1ae9      	subs	r1, r5, r3
 800fed6:	2900      	cmp	r1, #0
 800fed8:	dc4e      	bgt.n	800ff78 <__kernel_rem_pio2+0x180>
 800feda:	4620      	mov	r0, r4
 800fedc:	f000 fc00 	bl	80106e0 <scalbn>
 800fee0:	eeb0 8b40 	vmov.f64	d8, d0
 800fee4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800fee8:	ee28 0b00 	vmul.f64	d0, d8, d0
 800feec:	f000 fb7c 	bl	80105e8 <floor>
 800fef0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800fef4:	eea0 8b47 	vfms.f64	d8, d0, d7
 800fef8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800fefc:	2c00      	cmp	r4, #0
 800fefe:	edcd 7a01 	vstr	s15, [sp, #4]
 800ff02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ff06:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ff0a:	dd4a      	ble.n	800ffa2 <__kernel_rem_pio2+0x1aa>
 800ff0c:	1e69      	subs	r1, r5, #1
 800ff0e:	ab06      	add	r3, sp, #24
 800ff10:	f1c4 0018 	rsb	r0, r4, #24
 800ff14:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800ff18:	9a01      	ldr	r2, [sp, #4]
 800ff1a:	fa4c f300 	asr.w	r3, ip, r0
 800ff1e:	441a      	add	r2, r3
 800ff20:	4083      	lsls	r3, r0
 800ff22:	9201      	str	r2, [sp, #4]
 800ff24:	ebac 0203 	sub.w	r2, ip, r3
 800ff28:	ab06      	add	r3, sp, #24
 800ff2a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800ff2e:	f1c4 0317 	rsb	r3, r4, #23
 800ff32:	fa42 f803 	asr.w	r8, r2, r3
 800ff36:	f1b8 0f00 	cmp.w	r8, #0
 800ff3a:	dd43      	ble.n	800ffc4 <__kernel_rem_pio2+0x1cc>
 800ff3c:	9b01      	ldr	r3, [sp, #4]
 800ff3e:	2000      	movs	r0, #0
 800ff40:	3301      	adds	r3, #1
 800ff42:	9301      	str	r3, [sp, #4]
 800ff44:	4601      	mov	r1, r0
 800ff46:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800ff4a:	4285      	cmp	r5, r0
 800ff4c:	dc6e      	bgt.n	801002c <__kernel_rem_pio2+0x234>
 800ff4e:	2c00      	cmp	r4, #0
 800ff50:	dd04      	ble.n	800ff5c <__kernel_rem_pio2+0x164>
 800ff52:	2c01      	cmp	r4, #1
 800ff54:	d07f      	beq.n	8010056 <__kernel_rem_pio2+0x25e>
 800ff56:	2c02      	cmp	r4, #2
 800ff58:	f000 8087 	beq.w	801006a <__kernel_rem_pio2+0x272>
 800ff5c:	f1b8 0f02 	cmp.w	r8, #2
 800ff60:	d130      	bne.n	800ffc4 <__kernel_rem_pio2+0x1cc>
 800ff62:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ff66:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ff6a:	b359      	cbz	r1, 800ffc4 <__kernel_rem_pio2+0x1cc>
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f000 fbb7 	bl	80106e0 <scalbn>
 800ff72:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ff76:	e025      	b.n	800ffc4 <__kernel_rem_pio2+0x1cc>
 800ff78:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ff7c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ff80:	a806      	add	r0, sp, #24
 800ff82:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ff86:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ff8a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ff8e:	ee10 1a10 	vmov	r1, s0
 800ff92:	ed32 0b02 	vldmdb	r2!, {d0}
 800ff96:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800ff9a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	e798      	b.n	800fed4 <__kernel_rem_pio2+0xdc>
 800ffa2:	d106      	bne.n	800ffb2 <__kernel_rem_pio2+0x1ba>
 800ffa4:	1e6b      	subs	r3, r5, #1
 800ffa6:	aa06      	add	r2, sp, #24
 800ffa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ffac:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800ffb0:	e7c1      	b.n	800ff36 <__kernel_rem_pio2+0x13e>
 800ffb2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ffb6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ffba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffbe:	da32      	bge.n	8010026 <__kernel_rem_pio2+0x22e>
 800ffc0:	f04f 0800 	mov.w	r8, #0
 800ffc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ffc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffcc:	f040 80b0 	bne.w	8010130 <__kernel_rem_pio2+0x338>
 800ffd0:	1e6b      	subs	r3, r5, #1
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	4548      	cmp	r0, r9
 800ffd8:	da4e      	bge.n	8010078 <__kernel_rem_pio2+0x280>
 800ffda:	2a00      	cmp	r2, #0
 800ffdc:	f000 8088 	beq.w	80100f0 <__kernel_rem_pio2+0x2f8>
 800ffe0:	aa06      	add	r2, sp, #24
 800ffe2:	3c18      	subs	r4, #24
 800ffe4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ffe8:	2900      	cmp	r1, #0
 800ffea:	f000 808e 	beq.w	801010a <__kernel_rem_pio2+0x312>
 800ffee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fff2:	4620      	mov	r0, r4
 800fff4:	9302      	str	r3, [sp, #8]
 800fff6:	f000 fb73 	bl	80106e0 <scalbn>
 800fffa:	9b02      	ldr	r3, [sp, #8]
 800fffc:	aa6a      	add	r2, sp, #424	; 0x1a8
 800fffe:	00d9      	lsls	r1, r3, #3
 8010000:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8010118 <__kernel_rem_pio2+0x320>
 8010004:	1850      	adds	r0, r2, r1
 8010006:	f100 0508 	add.w	r5, r0, #8
 801000a:	461c      	mov	r4, r3
 801000c:	2c00      	cmp	r4, #0
 801000e:	f280 80bd 	bge.w	801018c <__kernel_rem_pio2+0x394>
 8010012:	2500      	movs	r5, #0
 8010014:	1b5c      	subs	r4, r3, r5
 8010016:	2c00      	cmp	r4, #0
 8010018:	f2c0 80dd 	blt.w	80101d6 <__kernel_rem_pio2+0x3de>
 801001c:	4f43      	ldr	r7, [pc, #268]	; (801012c <__kernel_rem_pio2+0x334>)
 801001e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8010110 <__kernel_rem_pio2+0x318>
 8010022:	2400      	movs	r4, #0
 8010024:	e0cb      	b.n	80101be <__kernel_rem_pio2+0x3c6>
 8010026:	f04f 0802 	mov.w	r8, #2
 801002a:	e787      	b.n	800ff3c <__kernel_rem_pio2+0x144>
 801002c:	ab06      	add	r3, sp, #24
 801002e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010032:	b949      	cbnz	r1, 8010048 <__kernel_rem_pio2+0x250>
 8010034:	b12b      	cbz	r3, 8010042 <__kernel_rem_pio2+0x24a>
 8010036:	aa06      	add	r2, sp, #24
 8010038:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801003c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8010040:	2301      	movs	r3, #1
 8010042:	3001      	adds	r0, #1
 8010044:	4619      	mov	r1, r3
 8010046:	e780      	b.n	800ff4a <__kernel_rem_pio2+0x152>
 8010048:	aa06      	add	r2, sp, #24
 801004a:	ebac 0303 	sub.w	r3, ip, r3
 801004e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8010052:	460b      	mov	r3, r1
 8010054:	e7f5      	b.n	8010042 <__kernel_rem_pio2+0x24a>
 8010056:	1e68      	subs	r0, r5, #1
 8010058:	ab06      	add	r3, sp, #24
 801005a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801005e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010062:	aa06      	add	r2, sp, #24
 8010064:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8010068:	e778      	b.n	800ff5c <__kernel_rem_pio2+0x164>
 801006a:	1e68      	subs	r0, r5, #1
 801006c:	ab06      	add	r3, sp, #24
 801006e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010072:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010076:	e7f4      	b.n	8010062 <__kernel_rem_pio2+0x26a>
 8010078:	a906      	add	r1, sp, #24
 801007a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801007e:	3801      	subs	r0, #1
 8010080:	430a      	orrs	r2, r1
 8010082:	e7a8      	b.n	800ffd6 <__kernel_rem_pio2+0x1de>
 8010084:	f10c 0c01 	add.w	ip, ip, #1
 8010088:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801008c:	2a00      	cmp	r2, #0
 801008e:	d0f9      	beq.n	8010084 <__kernel_rem_pio2+0x28c>
 8010090:	eb0b 0305 	add.w	r3, fp, r5
 8010094:	aa1a      	add	r2, sp, #104	; 0x68
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	1898      	adds	r0, r3, r2
 801009a:	3008      	adds	r0, #8
 801009c:	1c69      	adds	r1, r5, #1
 801009e:	3708      	adds	r7, #8
 80100a0:	2200      	movs	r2, #0
 80100a2:	4465      	add	r5, ip
 80100a4:	9005      	str	r0, [sp, #20]
 80100a6:	428d      	cmp	r5, r1
 80100a8:	f6ff af07 	blt.w	800feba <__kernel_rem_pio2+0xc2>
 80100ac:	a81a      	add	r0, sp, #104	; 0x68
 80100ae:	eb02 0c03 	add.w	ip, r2, r3
 80100b2:	4484      	add	ip, r0
 80100b4:	9803      	ldr	r0, [sp, #12]
 80100b6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80100ba:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80100be:	9001      	str	r0, [sp, #4]
 80100c0:	ee07 0a90 	vmov	s15, r0
 80100c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80100c8:	9805      	ldr	r0, [sp, #20]
 80100ca:	ed8c 7b00 	vstr	d7, [ip]
 80100ce:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010110 <__kernel_rem_pio2+0x318>
 80100d2:	eb00 0802 	add.w	r8, r0, r2
 80100d6:	f04f 0c00 	mov.w	ip, #0
 80100da:	45d4      	cmp	ip, sl
 80100dc:	dd0c      	ble.n	80100f8 <__kernel_rem_pio2+0x300>
 80100de:	eb02 0c07 	add.w	ip, r2, r7
 80100e2:	a86a      	add	r0, sp, #424	; 0x1a8
 80100e4:	4484      	add	ip, r0
 80100e6:	ed8c 7b02 	vstr	d7, [ip, #8]
 80100ea:	3101      	adds	r1, #1
 80100ec:	3208      	adds	r2, #8
 80100ee:	e7da      	b.n	80100a6 <__kernel_rem_pio2+0x2ae>
 80100f0:	9b04      	ldr	r3, [sp, #16]
 80100f2:	f04f 0c01 	mov.w	ip, #1
 80100f6:	e7c7      	b.n	8010088 <__kernel_rem_pio2+0x290>
 80100f8:	ecbe 5b02 	vldmia	lr!, {d5}
 80100fc:	ed38 6b02 	vldmdb	r8!, {d6}
 8010100:	f10c 0c01 	add.w	ip, ip, #1
 8010104:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010108:	e7e7      	b.n	80100da <__kernel_rem_pio2+0x2e2>
 801010a:	3b01      	subs	r3, #1
 801010c:	e768      	b.n	800ffe0 <__kernel_rem_pio2+0x1e8>
 801010e:	bf00      	nop
	...
 801011c:	3e700000 	.word	0x3e700000
 8010120:	00000000 	.word	0x00000000
 8010124:	41700000 	.word	0x41700000
 8010128:	08010af0 	.word	0x08010af0
 801012c:	08010ab0 	.word	0x08010ab0
 8010130:	4260      	negs	r0, r4
 8010132:	eeb0 0b48 	vmov.f64	d0, d8
 8010136:	f000 fad3 	bl	80106e0 <scalbn>
 801013a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8010318 <__kernel_rem_pio2+0x520>
 801013e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010146:	db18      	blt.n	801017a <__kernel_rem_pio2+0x382>
 8010148:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8010320 <__kernel_rem_pio2+0x528>
 801014c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010150:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010154:	aa06      	add	r2, sp, #24
 8010156:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801015a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801015e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010162:	a906      	add	r1, sp, #24
 8010164:	ee10 3a10 	vmov	r3, s0
 8010168:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801016c:	1c6b      	adds	r3, r5, #1
 801016e:	ee17 2a10 	vmov	r2, s14
 8010172:	3418      	adds	r4, #24
 8010174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010178:	e739      	b.n	800ffee <__kernel_rem_pio2+0x1f6>
 801017a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801017e:	aa06      	add	r2, sp, #24
 8010180:	ee10 3a10 	vmov	r3, s0
 8010184:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8010188:	462b      	mov	r3, r5
 801018a:	e730      	b.n	800ffee <__kernel_rem_pio2+0x1f6>
 801018c:	aa06      	add	r2, sp, #24
 801018e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8010192:	9202      	str	r2, [sp, #8]
 8010194:	ee07 2a90 	vmov	s15, r2
 8010198:	3c01      	subs	r4, #1
 801019a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801019e:	ee27 7b00 	vmul.f64	d7, d7, d0
 80101a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80101a6:	ed25 7b02 	vstmdb	r5!, {d7}
 80101aa:	e72f      	b.n	801000c <__kernel_rem_pio2+0x214>
 80101ac:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80101b0:	ecb7 5b02 	vldmia	r7!, {d5}
 80101b4:	ed9c 6b00 	vldr	d6, [ip]
 80101b8:	3401      	adds	r4, #1
 80101ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80101be:	454c      	cmp	r4, r9
 80101c0:	dc01      	bgt.n	80101c6 <__kernel_rem_pio2+0x3ce>
 80101c2:	42a5      	cmp	r5, r4
 80101c4:	daf2      	bge.n	80101ac <__kernel_rem_pio2+0x3b4>
 80101c6:	aa42      	add	r2, sp, #264	; 0x108
 80101c8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80101cc:	ed84 7b00 	vstr	d7, [r4]
 80101d0:	3501      	adds	r5, #1
 80101d2:	3808      	subs	r0, #8
 80101d4:	e71e      	b.n	8010014 <__kernel_rem_pio2+0x21c>
 80101d6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80101d8:	2a03      	cmp	r2, #3
 80101da:	d84e      	bhi.n	801027a <__kernel_rem_pio2+0x482>
 80101dc:	e8df f002 	tbb	[pc, r2]
 80101e0:	021f1f3e 	.word	0x021f1f3e
 80101e4:	3108      	adds	r1, #8
 80101e6:	aa42      	add	r2, sp, #264	; 0x108
 80101e8:	4411      	add	r1, r2
 80101ea:	4608      	mov	r0, r1
 80101ec:	461c      	mov	r4, r3
 80101ee:	2c00      	cmp	r4, #0
 80101f0:	dc61      	bgt.n	80102b6 <__kernel_rem_pio2+0x4be>
 80101f2:	4608      	mov	r0, r1
 80101f4:	461c      	mov	r4, r3
 80101f6:	2c01      	cmp	r4, #1
 80101f8:	dc6d      	bgt.n	80102d6 <__kernel_rem_pio2+0x4de>
 80101fa:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010328 <__kernel_rem_pio2+0x530>
 80101fe:	2b01      	cmp	r3, #1
 8010200:	dc79      	bgt.n	80102f6 <__kernel_rem_pio2+0x4fe>
 8010202:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8010206:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801020a:	f1b8 0f00 	cmp.w	r8, #0
 801020e:	d178      	bne.n	8010302 <__kernel_rem_pio2+0x50a>
 8010210:	ed86 5b00 	vstr	d5, [r6]
 8010214:	ed86 6b02 	vstr	d6, [r6, #8]
 8010218:	ed86 7b04 	vstr	d7, [r6, #16]
 801021c:	e02d      	b.n	801027a <__kernel_rem_pio2+0x482>
 801021e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8010328 <__kernel_rem_pio2+0x530>
 8010222:	3108      	adds	r1, #8
 8010224:	aa42      	add	r2, sp, #264	; 0x108
 8010226:	4411      	add	r1, r2
 8010228:	4618      	mov	r0, r3
 801022a:	2800      	cmp	r0, #0
 801022c:	da34      	bge.n	8010298 <__kernel_rem_pio2+0x4a0>
 801022e:	f1b8 0f00 	cmp.w	r8, #0
 8010232:	d037      	beq.n	80102a4 <__kernel_rem_pio2+0x4ac>
 8010234:	eeb1 7b46 	vneg.f64	d7, d6
 8010238:	ed86 7b00 	vstr	d7, [r6]
 801023c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8010240:	a844      	add	r0, sp, #272	; 0x110
 8010242:	2101      	movs	r1, #1
 8010244:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010248:	428b      	cmp	r3, r1
 801024a:	da2e      	bge.n	80102aa <__kernel_rem_pio2+0x4b2>
 801024c:	f1b8 0f00 	cmp.w	r8, #0
 8010250:	d001      	beq.n	8010256 <__kernel_rem_pio2+0x45e>
 8010252:	eeb1 7b47 	vneg.f64	d7, d7
 8010256:	ed86 7b02 	vstr	d7, [r6, #8]
 801025a:	e00e      	b.n	801027a <__kernel_rem_pio2+0x482>
 801025c:	aa92      	add	r2, sp, #584	; 0x248
 801025e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8010328 <__kernel_rem_pio2+0x530>
 8010262:	4411      	add	r1, r2
 8010264:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8010268:	2b00      	cmp	r3, #0
 801026a:	da0f      	bge.n	801028c <__kernel_rem_pio2+0x494>
 801026c:	f1b8 0f00 	cmp.w	r8, #0
 8010270:	d001      	beq.n	8010276 <__kernel_rem_pio2+0x47e>
 8010272:	eeb1 7b47 	vneg.f64	d7, d7
 8010276:	ed86 7b00 	vstr	d7, [r6]
 801027a:	9b01      	ldr	r3, [sp, #4]
 801027c:	f003 0007 	and.w	r0, r3, #7
 8010280:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8010284:	ecbd 8b06 	vpop	{d8-d10}
 8010288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028c:	ed31 6b02 	vldmdb	r1!, {d6}
 8010290:	3b01      	subs	r3, #1
 8010292:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010296:	e7e7      	b.n	8010268 <__kernel_rem_pio2+0x470>
 8010298:	ed31 7b02 	vldmdb	r1!, {d7}
 801029c:	3801      	subs	r0, #1
 801029e:	ee36 6b07 	vadd.f64	d6, d6, d7
 80102a2:	e7c2      	b.n	801022a <__kernel_rem_pio2+0x432>
 80102a4:	eeb0 7b46 	vmov.f64	d7, d6
 80102a8:	e7c6      	b.n	8010238 <__kernel_rem_pio2+0x440>
 80102aa:	ecb0 6b02 	vldmia	r0!, {d6}
 80102ae:	3101      	adds	r1, #1
 80102b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80102b4:	e7c8      	b.n	8010248 <__kernel_rem_pio2+0x450>
 80102b6:	ed10 7b04 	vldr	d7, [r0, #-16]
 80102ba:	ed30 5b02 	vldmdb	r0!, {d5}
 80102be:	3c01      	subs	r4, #1
 80102c0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80102c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80102c8:	ed00 6b02 	vstr	d6, [r0, #-8]
 80102cc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80102d0:	ed80 7b00 	vstr	d7, [r0]
 80102d4:	e78b      	b.n	80101ee <__kernel_rem_pio2+0x3f6>
 80102d6:	ed10 7b04 	vldr	d7, [r0, #-16]
 80102da:	ed30 5b02 	vldmdb	r0!, {d5}
 80102de:	3c01      	subs	r4, #1
 80102e0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80102e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80102e8:	ed00 6b02 	vstr	d6, [r0, #-8]
 80102ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 80102f0:	ed80 7b00 	vstr	d7, [r0]
 80102f4:	e77f      	b.n	80101f6 <__kernel_rem_pio2+0x3fe>
 80102f6:	ed31 6b02 	vldmdb	r1!, {d6}
 80102fa:	3b01      	subs	r3, #1
 80102fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010300:	e77d      	b.n	80101fe <__kernel_rem_pio2+0x406>
 8010302:	eeb1 5b45 	vneg.f64	d5, d5
 8010306:	eeb1 6b46 	vneg.f64	d6, d6
 801030a:	ed86 5b00 	vstr	d5, [r6]
 801030e:	eeb1 7b47 	vneg.f64	d7, d7
 8010312:	ed86 6b02 	vstr	d6, [r6, #8]
 8010316:	e77f      	b.n	8010218 <__kernel_rem_pio2+0x420>
 8010318:	00000000 	.word	0x00000000
 801031c:	41700000 	.word	0x41700000
 8010320:	00000000 	.word	0x00000000
 8010324:	3e700000 	.word	0x3e700000
	...

08010330 <__kernel_sin>:
 8010330:	ee10 3a90 	vmov	r3, s1
 8010334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010338:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801033c:	da04      	bge.n	8010348 <__kernel_sin+0x18>
 801033e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010342:	ee17 3a90 	vmov	r3, s15
 8010346:	b35b      	cbz	r3, 80103a0 <__kernel_sin+0x70>
 8010348:	ee20 6b00 	vmul.f64	d6, d0, d0
 801034c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010350:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80103a8 <__kernel_sin+0x78>
 8010354:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80103b0 <__kernel_sin+0x80>
 8010358:	eea6 4b07 	vfma.f64	d4, d6, d7
 801035c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80103b8 <__kernel_sin+0x88>
 8010360:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010364:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80103c0 <__kernel_sin+0x90>
 8010368:	eea7 4b06 	vfma.f64	d4, d7, d6
 801036c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80103c8 <__kernel_sin+0x98>
 8010370:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010374:	b930      	cbnz	r0, 8010384 <__kernel_sin+0x54>
 8010376:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80103d0 <__kernel_sin+0xa0>
 801037a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801037e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010382:	4770      	bx	lr
 8010384:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010388:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801038c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010390:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010394:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80103d8 <__kernel_sin+0xa8>
 8010398:	eea5 1b07 	vfma.f64	d1, d5, d7
 801039c:	ee30 0b41 	vsub.f64	d0, d0, d1
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	f3af 8000 	nop.w
 80103a8:	5acfd57c 	.word	0x5acfd57c
 80103ac:	3de5d93a 	.word	0x3de5d93a
 80103b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80103b4:	be5ae5e6 	.word	0xbe5ae5e6
 80103b8:	57b1fe7d 	.word	0x57b1fe7d
 80103bc:	3ec71de3 	.word	0x3ec71de3
 80103c0:	19c161d5 	.word	0x19c161d5
 80103c4:	bf2a01a0 	.word	0xbf2a01a0
 80103c8:	1110f8a6 	.word	0x1110f8a6
 80103cc:	3f811111 	.word	0x3f811111
 80103d0:	55555549 	.word	0x55555549
 80103d4:	bfc55555 	.word	0xbfc55555
 80103d8:	55555549 	.word	0x55555549
 80103dc:	3fc55555 	.word	0x3fc55555

080103e0 <atan>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	eeb0 7b40 	vmov.f64	d7, d0
 80103e6:	ee17 5a90 	vmov	r5, s15
 80103ea:	4b73      	ldr	r3, [pc, #460]	; (80105b8 <atan+0x1d8>)
 80103ec:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80103f0:	429c      	cmp	r4, r3
 80103f2:	dd13      	ble.n	801041c <atan+0x3c>
 80103f4:	4b71      	ldr	r3, [pc, #452]	; (80105bc <atan+0x1dc>)
 80103f6:	429c      	cmp	r4, r3
 80103f8:	dc03      	bgt.n	8010402 <atan+0x22>
 80103fa:	d107      	bne.n	801040c <atan+0x2c>
 80103fc:	ee10 3a10 	vmov	r3, s0
 8010400:	b123      	cbz	r3, 801040c <atan+0x2c>
 8010402:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010406:	eeb0 0b47 	vmov.f64	d0, d7
 801040a:	bd38      	pop	{r3, r4, r5, pc}
 801040c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010548 <atan+0x168>
 8010410:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010550 <atan+0x170>
 8010414:	2d00      	cmp	r5, #0
 8010416:	fe37 7b06 	vselgt.f64	d7, d7, d6
 801041a:	e7f4      	b.n	8010406 <atan+0x26>
 801041c:	4b68      	ldr	r3, [pc, #416]	; (80105c0 <atan+0x1e0>)
 801041e:	429c      	cmp	r4, r3
 8010420:	dc11      	bgt.n	8010446 <atan+0x66>
 8010422:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010426:	429c      	cmp	r4, r3
 8010428:	dc0a      	bgt.n	8010440 <atan+0x60>
 801042a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 801042e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8010558 <atan+0x178>
 8010432:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010436:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801043a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043e:	dce2      	bgt.n	8010406 <atan+0x26>
 8010440:	f04f 33ff 	mov.w	r3, #4294967295
 8010444:	e013      	b.n	801046e <atan+0x8e>
 8010446:	f000 f8c5 	bl	80105d4 <fabs>
 801044a:	4b5e      	ldr	r3, [pc, #376]	; (80105c4 <atan+0x1e4>)
 801044c:	429c      	cmp	r4, r3
 801044e:	dc4f      	bgt.n	80104f0 <atan+0x110>
 8010450:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010454:	429c      	cmp	r4, r3
 8010456:	dc41      	bgt.n	80104dc <atan+0xfc>
 8010458:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801045c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010460:	2300      	movs	r3, #0
 8010462:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010466:	ee30 0b07 	vadd.f64	d0, d0, d7
 801046a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801046e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010560 <atan+0x180>
 8010472:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010476:	ee24 5b04 	vmul.f64	d5, d4, d4
 801047a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010568 <atan+0x188>
 801047e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010482:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010570 <atan+0x190>
 8010486:	eea3 6b05 	vfma.f64	d6, d3, d5
 801048a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010578 <atan+0x198>
 801048e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010492:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010580 <atan+0x1a0>
 8010496:	eea3 6b05 	vfma.f64	d6, d3, d5
 801049a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010588 <atan+0x1a8>
 801049e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010590 <atan+0x1b0>
 80104a2:	eea6 3b05 	vfma.f64	d3, d6, d5
 80104a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010598 <atan+0x1b8>
 80104aa:	eea5 2b06 	vfma.f64	d2, d5, d6
 80104ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80105a0 <atan+0x1c0>
 80104b2:	eea2 6b05 	vfma.f64	d6, d2, d5
 80104b6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80105a8 <atan+0x1c8>
 80104ba:	eea6 2b05 	vfma.f64	d2, d6, d5
 80104be:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80105b0 <atan+0x1d0>
 80104c2:	1c5a      	adds	r2, r3, #1
 80104c4:	eea2 6b05 	vfma.f64	d6, d2, d5
 80104c8:	ee26 6b05 	vmul.f64	d6, d6, d5
 80104cc:	eea3 6b04 	vfma.f64	d6, d3, d4
 80104d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80104d4:	d121      	bne.n	801051a <atan+0x13a>
 80104d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80104da:	e794      	b.n	8010406 <atan+0x26>
 80104dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80104e0:	2301      	movs	r3, #1
 80104e2:	ee30 6b47 	vsub.f64	d6, d0, d7
 80104e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80104ea:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80104ee:	e7be      	b.n	801046e <atan+0x8e>
 80104f0:	4b35      	ldr	r3, [pc, #212]	; (80105c8 <atan+0x1e8>)
 80104f2:	429c      	cmp	r4, r3
 80104f4:	dc0b      	bgt.n	801050e <atan+0x12e>
 80104f6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80104fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80104fe:	ee30 5b47 	vsub.f64	d5, d0, d7
 8010502:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010506:	2302      	movs	r3, #2
 8010508:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801050c:	e7af      	b.n	801046e <atan+0x8e>
 801050e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010512:	2303      	movs	r3, #3
 8010514:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010518:	e7a9      	b.n	801046e <atan+0x8e>
 801051a:	4a2c      	ldr	r2, [pc, #176]	; (80105cc <atan+0x1ec>)
 801051c:	492c      	ldr	r1, [pc, #176]	; (80105d0 <atan+0x1f0>)
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	441a      	add	r2, r3
 8010522:	440b      	add	r3, r1
 8010524:	ed93 5b00 	vldr	d5, [r3]
 8010528:	ee36 6b45 	vsub.f64	d6, d6, d5
 801052c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010530:	ed92 6b00 	vldr	d6, [r2]
 8010534:	2d00      	cmp	r5, #0
 8010536:	ee36 7b47 	vsub.f64	d7, d6, d7
 801053a:	bfb8      	it	lt
 801053c:	eeb1 7b47 	vneglt.f64	d7, d7
 8010540:	e761      	b.n	8010406 <atan+0x26>
 8010542:	bf00      	nop
 8010544:	f3af 8000 	nop.w
 8010548:	54442d18 	.word	0x54442d18
 801054c:	bff921fb 	.word	0xbff921fb
 8010550:	54442d18 	.word	0x54442d18
 8010554:	3ff921fb 	.word	0x3ff921fb
 8010558:	8800759c 	.word	0x8800759c
 801055c:	7e37e43c 	.word	0x7e37e43c
 8010560:	e322da11 	.word	0xe322da11
 8010564:	3f90ad3a 	.word	0x3f90ad3a
 8010568:	24760deb 	.word	0x24760deb
 801056c:	3fa97b4b 	.word	0x3fa97b4b
 8010570:	a0d03d51 	.word	0xa0d03d51
 8010574:	3fb10d66 	.word	0x3fb10d66
 8010578:	c54c206e 	.word	0xc54c206e
 801057c:	3fb745cd 	.word	0x3fb745cd
 8010580:	920083ff 	.word	0x920083ff
 8010584:	3fc24924 	.word	0x3fc24924
 8010588:	5555550d 	.word	0x5555550d
 801058c:	3fd55555 	.word	0x3fd55555
 8010590:	52defd9a 	.word	0x52defd9a
 8010594:	bfadde2d 	.word	0xbfadde2d
 8010598:	2c6a6c2f 	.word	0x2c6a6c2f
 801059c:	bfa2b444 	.word	0xbfa2b444
 80105a0:	af749a6d 	.word	0xaf749a6d
 80105a4:	bfb3b0f2 	.word	0xbfb3b0f2
 80105a8:	fe231671 	.word	0xfe231671
 80105ac:	bfbc71c6 	.word	0xbfbc71c6
 80105b0:	9998ebc4 	.word	0x9998ebc4
 80105b4:	bfc99999 	.word	0xbfc99999
 80105b8:	440fffff 	.word	0x440fffff
 80105bc:	7ff00000 	.word	0x7ff00000
 80105c0:	3fdbffff 	.word	0x3fdbffff
 80105c4:	3ff2ffff 	.word	0x3ff2ffff
 80105c8:	40037fff 	.word	0x40037fff
 80105cc:	08010b00 	.word	0x08010b00
 80105d0:	08010b20 	.word	0x08010b20

080105d4 <fabs>:
 80105d4:	ec51 0b10 	vmov	r0, r1, d0
 80105d8:	ee10 2a10 	vmov	r2, s0
 80105dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80105e0:	ec43 2b10 	vmov	d0, r2, r3
 80105e4:	4770      	bx	lr
	...

080105e8 <floor>:
 80105e8:	ee10 1a90 	vmov	r1, s1
 80105ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80105f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80105f4:	2b13      	cmp	r3, #19
 80105f6:	b530      	push	{r4, r5, lr}
 80105f8:	ee10 0a10 	vmov	r0, s0
 80105fc:	ee10 5a10 	vmov	r5, s0
 8010600:	dc33      	bgt.n	801066a <floor+0x82>
 8010602:	2b00      	cmp	r3, #0
 8010604:	da17      	bge.n	8010636 <floor+0x4e>
 8010606:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80106c8 <floor+0xe0>
 801060a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801060e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010616:	dd09      	ble.n	801062c <floor+0x44>
 8010618:	2900      	cmp	r1, #0
 801061a:	da50      	bge.n	80106be <floor+0xd6>
 801061c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010620:	4a2b      	ldr	r2, [pc, #172]	; (80106d0 <floor+0xe8>)
 8010622:	4303      	orrs	r3, r0
 8010624:	2000      	movs	r0, #0
 8010626:	4283      	cmp	r3, r0
 8010628:	bf18      	it	ne
 801062a:	4611      	movne	r1, r2
 801062c:	460b      	mov	r3, r1
 801062e:	4602      	mov	r2, r0
 8010630:	ec43 2b10 	vmov	d0, r2, r3
 8010634:	e020      	b.n	8010678 <floor+0x90>
 8010636:	4a27      	ldr	r2, [pc, #156]	; (80106d4 <floor+0xec>)
 8010638:	411a      	asrs	r2, r3
 801063a:	ea01 0402 	and.w	r4, r1, r2
 801063e:	4304      	orrs	r4, r0
 8010640:	d01a      	beq.n	8010678 <floor+0x90>
 8010642:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80106c8 <floor+0xe0>
 8010646:	ee30 0b07 	vadd.f64	d0, d0, d7
 801064a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010652:	ddeb      	ble.n	801062c <floor+0x44>
 8010654:	2900      	cmp	r1, #0
 8010656:	bfbe      	ittt	lt
 8010658:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801065c:	fa40 f303 	asrlt.w	r3, r0, r3
 8010660:	18c9      	addlt	r1, r1, r3
 8010662:	ea21 0102 	bic.w	r1, r1, r2
 8010666:	2000      	movs	r0, #0
 8010668:	e7e0      	b.n	801062c <floor+0x44>
 801066a:	2b33      	cmp	r3, #51	; 0x33
 801066c:	dd05      	ble.n	801067a <floor+0x92>
 801066e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010672:	d101      	bne.n	8010678 <floor+0x90>
 8010674:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010678:	bd30      	pop	{r4, r5, pc}
 801067a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801067e:	f04f 32ff 	mov.w	r2, #4294967295
 8010682:	40e2      	lsrs	r2, r4
 8010684:	4202      	tst	r2, r0
 8010686:	d0f7      	beq.n	8010678 <floor+0x90>
 8010688:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80106c8 <floor+0xe0>
 801068c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010690:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010698:	ddc8      	ble.n	801062c <floor+0x44>
 801069a:	2900      	cmp	r1, #0
 801069c:	da02      	bge.n	80106a4 <floor+0xbc>
 801069e:	2b14      	cmp	r3, #20
 80106a0:	d103      	bne.n	80106aa <floor+0xc2>
 80106a2:	3101      	adds	r1, #1
 80106a4:	ea20 0002 	bic.w	r0, r0, r2
 80106a8:	e7c0      	b.n	801062c <floor+0x44>
 80106aa:	2401      	movs	r4, #1
 80106ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80106b0:	fa04 f303 	lsl.w	r3, r4, r3
 80106b4:	4418      	add	r0, r3
 80106b6:	42a8      	cmp	r0, r5
 80106b8:	bf38      	it	cc
 80106ba:	1909      	addcc	r1, r1, r4
 80106bc:	e7f2      	b.n	80106a4 <floor+0xbc>
 80106be:	2000      	movs	r0, #0
 80106c0:	4601      	mov	r1, r0
 80106c2:	e7b3      	b.n	801062c <floor+0x44>
 80106c4:	f3af 8000 	nop.w
 80106c8:	8800759c 	.word	0x8800759c
 80106cc:	7e37e43c 	.word	0x7e37e43c
 80106d0:	bff00000 	.word	0xbff00000
 80106d4:	000fffff 	.word	0x000fffff

080106d8 <matherr>:
 80106d8:	2000      	movs	r0, #0
 80106da:	4770      	bx	lr
 80106dc:	0000      	movs	r0, r0
	...

080106e0 <scalbn>:
 80106e0:	b500      	push	{lr}
 80106e2:	ed2d 8b02 	vpush	{d8}
 80106e6:	b083      	sub	sp, #12
 80106e8:	ed8d 0b00 	vstr	d0, [sp]
 80106ec:	9b01      	ldr	r3, [sp, #4]
 80106ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80106f2:	b9a2      	cbnz	r2, 801071e <scalbn+0x3e>
 80106f4:	9a00      	ldr	r2, [sp, #0]
 80106f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80106fa:	4313      	orrs	r3, r2
 80106fc:	d03a      	beq.n	8010774 <scalbn+0x94>
 80106fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80107b8 <scalbn+0xd8>
 8010702:	4b35      	ldr	r3, [pc, #212]	; (80107d8 <scalbn+0xf8>)
 8010704:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010708:	4298      	cmp	r0, r3
 801070a:	ed8d 7b00 	vstr	d7, [sp]
 801070e:	da11      	bge.n	8010734 <scalbn+0x54>
 8010710:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80107c0 <scalbn+0xe0>
 8010714:	ed9d 6b00 	vldr	d6, [sp]
 8010718:	ee27 7b06 	vmul.f64	d7, d7, d6
 801071c:	e007      	b.n	801072e <scalbn+0x4e>
 801071e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010722:	428a      	cmp	r2, r1
 8010724:	d10a      	bne.n	801073c <scalbn+0x5c>
 8010726:	ed9d 7b00 	vldr	d7, [sp]
 801072a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801072e:	ed8d 7b00 	vstr	d7, [sp]
 8010732:	e01f      	b.n	8010774 <scalbn+0x94>
 8010734:	9b01      	ldr	r3, [sp, #4]
 8010736:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801073a:	3a36      	subs	r2, #54	; 0x36
 801073c:	4402      	add	r2, r0
 801073e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010742:	428a      	cmp	r2, r1
 8010744:	dd0a      	ble.n	801075c <scalbn+0x7c>
 8010746:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80107c8 <scalbn+0xe8>
 801074a:	eeb0 0b48 	vmov.f64	d0, d8
 801074e:	ed9d 1b00 	vldr	d1, [sp]
 8010752:	f000 f843 	bl	80107dc <copysign>
 8010756:	ee20 7b08 	vmul.f64	d7, d0, d8
 801075a:	e7e8      	b.n	801072e <scalbn+0x4e>
 801075c:	2a00      	cmp	r2, #0
 801075e:	dd10      	ble.n	8010782 <scalbn+0xa2>
 8010760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010764:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010768:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801076c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010770:	e9cd 0100 	strd	r0, r1, [sp]
 8010774:	ed9d 0b00 	vldr	d0, [sp]
 8010778:	b003      	add	sp, #12
 801077a:	ecbd 8b02 	vpop	{d8}
 801077e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010782:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010786:	da06      	bge.n	8010796 <scalbn+0xb6>
 8010788:	f24c 3350 	movw	r3, #50000	; 0xc350
 801078c:	4298      	cmp	r0, r3
 801078e:	dcda      	bgt.n	8010746 <scalbn+0x66>
 8010790:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80107c0 <scalbn+0xe0>
 8010794:	e7d9      	b.n	801074a <scalbn+0x6a>
 8010796:	e9dd 0100 	ldrd	r0, r1, [sp]
 801079a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801079e:	3236      	adds	r2, #54	; 0x36
 80107a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80107a4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80107a8:	ec41 0b17 	vmov	d7, r0, r1
 80107ac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80107d0 <scalbn+0xf0>
 80107b0:	e7b2      	b.n	8010718 <scalbn+0x38>
 80107b2:	bf00      	nop
 80107b4:	f3af 8000 	nop.w
 80107b8:	00000000 	.word	0x00000000
 80107bc:	43500000 	.word	0x43500000
 80107c0:	c2f8f359 	.word	0xc2f8f359
 80107c4:	01a56e1f 	.word	0x01a56e1f
 80107c8:	8800759c 	.word	0x8800759c
 80107cc:	7e37e43c 	.word	0x7e37e43c
 80107d0:	00000000 	.word	0x00000000
 80107d4:	3c900000 	.word	0x3c900000
 80107d8:	ffff3cb0 	.word	0xffff3cb0

080107dc <copysign>:
 80107dc:	ec51 0b10 	vmov	r0, r1, d0
 80107e0:	ee11 0a90 	vmov	r0, s3
 80107e4:	ee10 2a10 	vmov	r2, s0
 80107e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80107ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80107f0:	ea41 0300 	orr.w	r3, r1, r0
 80107f4:	ec43 2b10 	vmov	d0, r2, r3
 80107f8:	4770      	bx	lr
	...

080107fc <_init>:
 80107fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107fe:	bf00      	nop
 8010800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010802:	bc08      	pop	{r3}
 8010804:	469e      	mov	lr, r3
 8010806:	4770      	bx	lr

08010808 <_fini>:
 8010808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801080a:	bf00      	nop
 801080c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801080e:	bc08      	pop	{r3}
 8010810:	469e      	mov	lr, r3
 8010812:	4770      	bx	lr
