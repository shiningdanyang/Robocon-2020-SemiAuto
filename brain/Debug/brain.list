
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010114  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080103b8  080103b8  000203b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010770  08010770  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08010770  08010770  00020770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010778  08010778  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010778  08010778  00020778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801077c  0801077c  0002077c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  24000000  08010780  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c64  24000148  080108c8  00030148  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000dac  080108c8  00030dac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002257a  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003458  00000000  00000000  000526f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b8  00000000  00000000  00055b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001598  00000000  00000000  00057200  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003933b  00000000  00000000  00058798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001335d  00000000  00000000  00091ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017596a  00000000  00000000  000a4e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021a79a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006750  00000000  00000000  0021a818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801039c 	.word	0x0801039c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0801039c 	.word	0x0801039c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <delayUs_Init+0x38>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10e      	bne.n	80006ae <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delayUs_Init+0x38>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <delayUs_Init+0x38>)
 8000696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800069a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <delayUs_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <delayUs_Init+0x3c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <delayUs_Init+0x3c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
    }
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000edf0 	.word	0xe000edf0
 80006bc:	e0001000 	.word	0xe0001000

080006c0 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <delayUs+0x40>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <delayUs+0x44>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <delayUs+0x48>)
 80006d4:	fba2 2303 	umull	r2, r3, r2, r3
 80006d8:	0c9a      	lsrs	r2, r3, #18
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	fb02 f303 	mul.w	r3, r2, r3
 80006e0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80006e2:	bf00      	nop
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <delayUs+0x40>)
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d8f8      	bhi.n	80006e4 <delayUs+0x24>
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0001000 	.word	0xe0001000
 8000704:	240000d0 	.word	0x240000d0
 8000708:	431bde83 	.word	0x431bde83

0800070c <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <peripheralUART_Init+0x50>)
 8000712:	22aa      	movs	r2, #170	; 0xaa
 8000714:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <peripheralUART_Init+0x50>)
 8000718:	22aa      	movs	r2, #170	; 0xaa
 800071a:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <peripheralUART_Init+0x50>)
 800071e:	22aa      	movs	r2, #170	; 0xaa
 8000720:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <peripheralUART_Init+0x50>)
 8000724:	22aa      	movs	r2, #170	; 0xaa
 8000726:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <peripheralUART_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	490b      	ldr	r1, [pc, #44]	; (8000760 <peripheralUART_Init+0x54>)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <peripheralUART_Init+0x58>)
 8000734:	f00a ff02 	bl	800b53c <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	490b      	ldr	r1, [pc, #44]	; (8000768 <peripheralUART_Init+0x5c>)
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <peripheralUART_Init+0x60>)
 800073e:	f00a ffd5 	bl	800b6ec <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 8000742:	2202      	movs	r2, #2
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <peripheralUART_Init+0x64>)
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <peripheralUART_Init+0x68>)
 8000748:	f00a ffd0 	bl	800b6ec <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&zmanual, zmanualRxPacket, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	490a      	ldr	r1, [pc, #40]	; (8000778 <peripheralUART_Init+0x6c>)
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <peripheralUART_Init+0x70>)
 8000752:	f00a ffcb 	bl	800b6ec <HAL_UART_Receive_DMA>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000014 	.word	0x24000014
 8000760:	24000ca8 	.word	0x24000ca8
 8000764:	24000bdc 	.word	0x24000bdc
 8000768:	24000c68 	.word	0x24000c68
 800076c:	24000344 	.word	0x24000344
 8000770:	24000810 	.word	0x24000810
 8000774:	24000ac8 	.word	0x24000ac8
 8000778:	240008e0 	.word	0x240008e0
 800077c:	240001ec 	.word	0x240001ec

08000780 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_TxCpltCallback+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d103      	bne.n	800079c <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_UART_TxCpltCallback+0x68>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 800079a:	e01c      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_UART_TxCpltCallback+0x6c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d103      	bne.n	80007b0 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_TxCpltCallback+0x70>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
}
 80007ae:	e012      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_UART_TxCpltCallback+0x74>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d103      	bne.n	80007c4 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_UART_TxCpltCallback+0x78>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	e008      	b.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_UART_TxCpltCallback+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d102      	bne.n	80007d6 <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_UART_TxCpltCallback+0x80>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	24000ac8 	.word	0x24000ac8
 80007e8:	240003df 	.word	0x240003df
 80007ec:	24000344 	.word	0x24000344
 80007f0:	24000bba 	.word	0x24000bba
 80007f4:	24000bdc 	.word	0x24000bdc
 80007f8:	240008f8 	.word	0x240008f8
 80007fc:	240001ec 	.word	0x240001ec
 8000800:	240002a1 	.word	0x240002a1

08000804 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_UART_RxCpltCallback+0x7c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d103      	bne.n	8000820 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_UART_RxCpltCallback+0x80>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 800081e:	e02b      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_RxCpltCallback+0x84>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d103      	bne.n	8000834 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_UART_RxCpltCallback+0x88>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	e021      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d112      	bne.n	8000866 <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_RxCpltCallback+0x90>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b74      	cmp	r3, #116	; 0x74
 8000846:	d105      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2209      	movs	r2, #9
 800084c:	4912      	ldr	r1, [pc, #72]	; (8000898 <HAL_UART_RxCpltCallback+0x94>)
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 8000850:	f00a fd5a 	bl	800b308 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_RxCpltCallback+0x98>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	490d      	ldr	r1, [pc, #52]	; (8000894 <HAL_UART_RxCpltCallback+0x90>)
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_UART_RxCpltCallback+0x8c>)
 8000860:	f00a fe6c 	bl	800b53c <HAL_UART_Receive_IT>
}
 8000864:	e008      	b.n	8000878 <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_UART_RxCpltCallback+0x9c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d102      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_UART_RxCpltCallback+0xa0>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000ac8 	.word	0x24000ac8
 8000884:	240001aa 	.word	0x240001aa
 8000888:	24000344 	.word	0x24000344
 800088c:	24000bba 	.word	0x24000bba
 8000890:	24000bdc 	.word	0x24000bdc
 8000894:	24000ca8 	.word	0x24000ca8
 8000898:	24000014 	.word	0x24000014
 800089c:	24000d30 	.word	0x24000d30
 80008a0:	240001ec 	.word	0x240001ec
 80008a4:	24000bc0 	.word	0x24000bc0

080008a8 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <compassReset+0x24>)
 80008ae:	2261      	movs	r2, #97	; 0x61
 80008b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	4905      	ldr	r1, [pc, #20]	; (80008cc <compassReset+0x24>)
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <compassReset+0x28>)
 80008b8:	f00a fdbc 	bl	800b434 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 80008bc:	f000 f818 	bl	80008f0 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <compassReset+0x24>)
 80008c2:	227a      	movs	r2, #122	; 0x7a
 80008c4:	701a      	strb	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	24000000 	.word	0x24000000
 80008d0:	24000ac8 	.word	0x24000ac8

080008d4 <compassRequest>:
void compassRequest(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	4903      	ldr	r1, [pc, #12]	; (80008e8 <compassRequest+0x14>)
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <compassRequest+0x18>)
 80008de:	f00a fda9 	bl	800b434 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	24000000 	.word	0x24000000
 80008ec:	24000ac8 	.word	0x24000ac8

080008f0 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 80008f4:	bf00      	nop
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <wait4CompassTx+0x20>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0fb      	beq.n	80008f6 <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <wait4CompassTx+0x20>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	240003df 	.word	0x240003df

08000914 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 8000918:	2209      	movs	r2, #9
 800091a:	4904      	ldr	r1, [pc, #16]	; (800092c <spinalCordTrans+0x18>)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <spinalCordTrans+0x1c>)
 800091e:	f00a fd89 	bl	800b434 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000922:	f000 f807 	bl	8000934 <wait4SpinalCordTx>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	24000014 	.word	0x24000014
 8000930:	24000bdc 	.word	0x24000bdc

08000934 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 8000938:	bf00      	nop
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <wait4SpinalCordTx+0x20>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0fb      	beq.n	800093a <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <wait4SpinalCordTx+0x20>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	240008f8 	.word	0x240008f8

08000958 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e01f      	b.n	80009a8 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000974:	2b00      	cmp	r3, #0
 8000976:	d005      	beq.n	8000984 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000978:	2201      	movs	r2, #1
 800097a:	2120      	movs	r1, #32
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <SendByteSPI+0x60>)
 800097e:	f007 fb17 	bl	8007fb0 <HAL_GPIO_WritePin>
 8000982:	e004      	b.n	800098e <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8000984:	2200      	movs	r2, #0
 8000986:	2120      	movs	r1, #32
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <SendByteSPI+0x60>)
 800098a:	f007 fb11 	bl	8007fb0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <SendByteSPI+0x60>)
 8000994:	f007 fb0c 	bl	8007fb0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000998:	2201      	movs	r2, #1
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <SendByteSPI+0x60>)
 800099e:	f007 fb07 	bl	8007fb0 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b07      	cmp	r3, #7
 80009ac:	dddc      	ble.n	8000968 <SendByteSPI+0x10>

	}
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	58021800 	.word	0x58021800

080009bc <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	480f      	ldr	r0, [pc, #60]	; (8000a0c <ST7920_SendCmd+0x50>)
 80009ce:	f007 faef 	bl	8007fb0 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 80009d2:	20f8      	movs	r0, #248	; 0xf8
 80009d4:	f7ff ffc0 	bl	8000958 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f023 030f 	bic.w	r3, r3, #15
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffb9 	bl	8000958 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffb3 	bl	8000958 <SendByteSPI>
	delayUs(50);
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f7ff fe64 	bl	80006c0 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <ST7920_SendCmd+0x50>)
 8000a00:	f007 fad6 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58021800 	.word	0x58021800

08000a10 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <ST7920_SendData+0x50>)
 8000a22:	f007 fac5 	bl	8007fb0 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8000a26:	20fa      	movs	r0, #250	; 0xfa
 8000a28:	f7ff ff96 	bl	8000958 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f023 030f 	bic.w	r3, r3, #15
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff8f 	bl	8000958 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff89 	bl	8000958 <SendByteSPI>
	delayUs(50);
 8000a46:	2032      	movs	r0, #50	; 0x32
 8000a48:	f7ff fe3a 	bl	80006c0 <delayUs>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <ST7920_SendData+0x50>)
 8000a54:	f007 faac 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58021800 	.word	0x58021800

08000a64 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
    switch (row)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d81e      	bhi.n	8000ab4 <ST7920_SendString+0x50>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <ST7920_SendString+0x18>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000a8d 	.word	0x08000a8d
 8000a80:	08000a97 	.word	0x08000a97
 8000a84:	08000aa1 	.word	0x08000aa1
 8000a88:	08000aab 	.word	0x08000aab
    {
        case 0:
            col |= 0x80;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	60bb      	str	r3, [r7, #8]
            break;
 8000a94:	e013      	b.n	8000abe <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000a9c:	60bb      	str	r3, [r7, #8]
            break;
 8000a9e:	e00e      	b.n	8000abe <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000aa6:	60bb      	str	r3, [r7, #8]
            break;
 8000aa8:	e009      	b.n	8000abe <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8000ab0:	60bb      	str	r3, [r7, #8]
            break;
 8000ab2:	e004      	b.n	8000abe <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aba:	60bb      	str	r3, [r7, #8]
            break;
 8000abc:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff7a 	bl	80009bc <ST7920_SendCmd>

    while (*string)
 8000ac8:	e006      	b.n	8000ad8 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff9c 	bl	8000a10 <ST7920_SendData>
    while (*string)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f4      	bne.n	8000aca <ST7920_SendString+0x66>
    	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <ST7920_Clear>:
}



void ST7920_Clear()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <ST7920_Clear+0x8c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d134      	bne.n	8000b60 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	e02d      	b.n	8000b58 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b1f      	cmp	r3, #31
 8000b00:	d80a      	bhi.n	8000b18 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff56 	bl	80009bc <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	f7ff ff53 	bl	80009bc <ST7920_SendCmd>
 8000b16:	e00d      	b.n	8000b34 <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	3b20      	subs	r3, #32
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff47 	bl	80009bc <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000b2e:	2088      	movs	r0, #136	; 0x88
 8000b30:	f7ff ff44 	bl	80009bc <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	e008      	b.n	8000b4c <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff68 	bl	8000a10 <ST7920_SendData>
				ST7920_SendData(0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ff65 	bl	8000a10 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d9f3      	bls.n	8000b3a <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	3301      	adds	r3, #1
 8000b56:	71bb      	strb	r3, [r7, #6]
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5c:	d9ce      	bls.n	8000afc <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8000b5e:	e005      	b.n	8000b6c <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff2b 	bl	80009bc <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8000b66:	2002      	movs	r0, #2
 8000b68:	f002 ff74 	bl	8003a54 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	24000165 	.word	0x24000165

08000b78 <ST7920_Init>:


void ST7920_Init (void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <ST7920_Init+0x7c>)
 8000b82:	f007 fa15 	bl	8007fb0 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000b86:	200a      	movs	r0, #10
 8000b88:	f002 ff64 	bl	8003a54 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <ST7920_Init+0x7c>)
 8000b92:	f007 fa0d 	bl	8007fb0 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000b96:	2032      	movs	r0, #50	; 0x32
 8000b98:	f002 ff5c 	bl	8003a54 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000b9c:	2030      	movs	r0, #48	; 0x30
 8000b9e:	f7ff ff0d 	bl	80009bc <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000ba2:	206e      	movs	r0, #110	; 0x6e
 8000ba4:	f7ff fd8c 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000ba8:	2030      	movs	r0, #48	; 0x30
 8000baa:	f7ff ff07 	bl	80009bc <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000bae:	2028      	movs	r0, #40	; 0x28
 8000bb0:	f7ff fd86 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000bb4:	2008      	movs	r0, #8
 8000bb6:	f7ff ff01 	bl	80009bc <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000bba:	206e      	movs	r0, #110	; 0x6e
 8000bbc:	f7ff fd80 	bl	80006c0 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fefb 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f002 ff44 	bl	8003a54 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f7ff fef5 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f002 ff3e 	bl	8003a54 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f7ff feef 	bl	80009bc <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000bde:	2001      	movs	r0, #1
 8000be0:	f002 ff38 	bl	8003a54 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000be4:	2002      	movs	r0, #2
 8000be6:	f7ff fee9 	bl	80009bc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000bea:	2001      	movs	r0, #1
 8000bec:	f002 ff32 	bl	8003a54 <HAL_Delay>

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58021800 	.word	0x58021800

08000bf8 <peripheralADC_Init>:
//uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
//uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	4903      	ldr	r1, [pc, #12]	; (8000c0c <peripheralADC_Init+0x14>)
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <peripheralADC_Init+0x18>)
 8000c02:	f003 fae7 	bl	80041d4 <HAL_ADC_Start_DMA>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	24000cc4 	.word	0x24000cc4
 8000c10:	240009b8 	.word	0x240009b8

08000c14 <controlMotor1>:
#ifdef SPINAL_CORD_MODE_ONEWAY



void controlMotor1(int _speed)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2bfa      	cmp	r3, #250	; 0xfa
 8000c20:	dd02      	ble.n	8000c28 <controlMotor1+0x14>
		_speed = 250;
 8000c22:	23fa      	movs	r3, #250	; 0xfa
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e010      	b.n	8000c4a <controlMotor1+0x36>
	else if(_speed<-250)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000c2e:	da03      	bge.n	8000c38 <controlMotor1+0x24>
		_speed = -250;
 8000c30:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e008      	b.n	8000c4a <controlMotor1+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	dc05      	bgt.n	8000c4a <controlMotor1+0x36>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f113 0f02 	cmn.w	r3, #2
 8000c44:	db01      	blt.n	8000c4a <controlMotor1+0x36>
		_speed = 3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bfb8      	it	lt
 8000c50:	425b      	neglt	r3, r3
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <controlMotor1+0x74>)
 8000c56:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db07      	blt.n	8000c6e <controlMotor1+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <controlMotor1+0x74>)
 8000c60:	7a1b      	ldrb	r3, [r3, #8]
 8000c62:	f023 0301 	bic.w	r3, r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <controlMotor1+0x74>)
 8000c6a:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 8000c6c:	e006      	b.n	8000c7c <controlMotor1+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <controlMotor1+0x74>)
 8000c70:	7a1b      	ldrb	r3, [r3, #8]
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <controlMotor1+0x74>)
 8000c7a:	721a      	strb	r2, [r3, #8]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	24000014 	.word	0x24000014

08000c8c <controlMotor2>:
void controlMotor2(int _speed)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2bfa      	cmp	r3, #250	; 0xfa
 8000c98:	dd02      	ble.n	8000ca0 <controlMotor2+0x14>
		_speed = 250;
 8000c9a:	23fa      	movs	r3, #250	; 0xfa
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	e010      	b.n	8000cc2 <controlMotor2+0x36>
	else if(_speed<-250)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000ca6:	da03      	bge.n	8000cb0 <controlMotor2+0x24>
		_speed = -250;
 8000ca8:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	e008      	b.n	8000cc2 <controlMotor2+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	dc05      	bgt.n	8000cc2 <controlMotor2+0x36>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f113 0f02 	cmn.w	r3, #2
 8000cbc:	db01      	blt.n	8000cc2 <controlMotor2+0x36>
		_speed = 3;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bfb8      	it	lt
 8000cc8:	425b      	neglt	r3, r3
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <controlMotor2+0x74>)
 8000cce:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db07      	blt.n	8000ce6 <controlMotor2+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <controlMotor2+0x74>)
 8000cd8:	7a1b      	ldrb	r3, [r3, #8]
 8000cda:	f023 0302 	bic.w	r3, r3, #2
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <controlMotor2+0x74>)
 8000ce2:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 8000ce4:	e006      	b.n	8000cf4 <controlMotor2+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <controlMotor2+0x74>)
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <controlMotor2+0x74>)
 8000cf2:	721a      	strb	r2, [r3, #8]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	24000014 	.word	0x24000014

08000d04 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2bfa      	cmp	r3, #250	; 0xfa
 8000d10:	dd02      	ble.n	8000d18 <controlMotor3+0x14>
		_speed = 250;
 8000d12:	23fa      	movs	r3, #250	; 0xfa
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e010      	b.n	8000d3a <controlMotor3+0x36>
	else if(_speed<-250)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000d1e:	da03      	bge.n	8000d28 <controlMotor3+0x24>
		_speed = -250;
 8000d20:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	e008      	b.n	8000d3a <controlMotor3+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dc05      	bgt.n	8000d3a <controlMotor3+0x36>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f113 0f02 	cmn.w	r3, #2
 8000d34:	db01      	blt.n	8000d3a <controlMotor3+0x36>
		_speed = 3;
 8000d36:	2303      	movs	r3, #3
 8000d38:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bfb8      	it	lt
 8000d40:	425b      	neglt	r3, r3
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <controlMotor3+0x74>)
 8000d46:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db07      	blt.n	8000d5e <controlMotor3+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <controlMotor3+0x74>)
 8000d50:	7a1b      	ldrb	r3, [r3, #8]
 8000d52:	f023 0304 	bic.w	r3, r3, #4
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <controlMotor3+0x74>)
 8000d5a:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 8000d5c:	e006      	b.n	8000d6c <controlMotor3+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <controlMotor3+0x74>)
 8000d60:	7a1b      	ldrb	r3, [r3, #8]
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <controlMotor3+0x74>)
 8000d6a:	721a      	strb	r2, [r3, #8]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	24000014 	.word	0x24000014

08000d7c <controlMotor4>:
void controlMotor4(int _speed)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2bfa      	cmp	r3, #250	; 0xfa
 8000d88:	dd02      	ble.n	8000d90 <controlMotor4+0x14>
		_speed = 250;
 8000d8a:	23fa      	movs	r3, #250	; 0xfa
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	e010      	b.n	8000db2 <controlMotor4+0x36>
	else if(_speed<-250)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000d96:	da03      	bge.n	8000da0 <controlMotor4+0x24>
		_speed = -250;
 8000d98:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	e008      	b.n	8000db2 <controlMotor4+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	dc05      	bgt.n	8000db2 <controlMotor4+0x36>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f113 0f02 	cmn.w	r3, #2
 8000dac:	db01      	blt.n	8000db2 <controlMotor4+0x36>
		_speed = 3;
 8000dae:	2303      	movs	r3, #3
 8000db0:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bfb8      	it	lt
 8000db8:	425b      	neglt	r3, r3
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <controlMotor4+0x74>)
 8000dbe:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db07      	blt.n	8000dd6 <controlMotor4+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <controlMotor4+0x74>)
 8000dc8:	7a1b      	ldrb	r3, [r3, #8]
 8000dca:	f023 0308 	bic.w	r3, r3, #8
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <controlMotor4+0x74>)
 8000dd2:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 8000dd4:	e006      	b.n	8000de4 <controlMotor4+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <controlMotor4+0x74>)
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <controlMotor4+0x74>)
 8000de2:	721a      	strb	r2, [r3, #8]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	24000014 	.word	0x24000014
 8000df4:	00000000 	.word	0x00000000

08000df8 <PIDyaw>:
  }
}
#endif

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <PIDyaw+0x120>)
 8000e12:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8000e14:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <PIDyaw+0x120>)
 8000e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <PIDyaw+0x124>)
 8000e24:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000e28:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <PIDyaw+0x120>)
 8000e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <PIDyaw+0x128>)
 8000e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e40:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <PIDyaw+0x12c>)
 8000e42:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <PIDyaw+0x120>)
 8000e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e54:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <PIDyaw+0x130>)
 8000e56:	ed93 7b00 	vldr	d7, [r3]
 8000e5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <PIDyaw+0x130>)
 8000e60:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 8000e64:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <PIDyaw+0x134>)
 8000e66:	ed93 6b00 	vldr	d6, [r3]
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <PIDyaw+0x124>)
 8000e6c:	ed93 7b00 	vldr	d7, [r3]
 8000e70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <PIDyaw+0x138>)
 8000e76:	ed93 5b00 	vldr	d5, [r3]
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <PIDyaw+0x12c>)
 8000e7c:	ed93 7b00 	vldr	d7, [r3]
 8000e80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <PIDyaw+0x13c>)
 8000e8a:	ed93 5b00 	vldr	d5, [r3]
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <PIDyaw+0x130>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <PIDyaw+0x140>)
 8000e9e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <PIDyaw+0x140>)
 8000ea4:	ed93 7b00 	vldr	d7, [r3]
 8000ea8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000f08 <PIDyaw+0x110>
 8000eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	dd05      	ble.n	8000ec2 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000eb6:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <PIDyaw+0x140>)
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	4c1f      	ldr	r4, [pc, #124]	; (8000f3c <PIDyaw+0x144>)
 8000ebe:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <PIDyaw+0x140>)
 8000ec4:	ed93 7b00 	vldr	d7, [r3]
 8000ec8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000f10 <PIDyaw+0x118>
 8000ecc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	d505      	bpl.n	8000ee2 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <PIDyaw+0x140>)
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	4c18      	ldr	r4, [pc, #96]	; (8000f40 <PIDyaw+0x148>)
 8000ede:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <PIDyaw+0x120>)
 8000ee4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <PIDyaw+0x128>)
 8000eea:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <PIDyaw+0x140>)
 8000eee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ef2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ef6:	eeb0 0b47 	vmov.f64	d0, d7
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc90      	pop	{r4, r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	405e0000 	.word	0x405e0000
 8000f10:	00000000 	.word	0x00000000
 8000f14:	c05e0000 	.word	0xc05e0000
 8000f18:	240008d0 	.word	0x240008d0
 8000f1c:	240008f0 	.word	0x240008f0
 8000f20:	24000340 	.word	0x24000340
 8000f24:	240001c8 	.word	0x240001c8
 8000f28:	240008c8 	.word	0x240008c8
 8000f2c:	24000028 	.word	0x24000028
 8000f30:	24000030 	.word	0x24000030
 8000f34:	24000038 	.word	0x24000038
 8000f38:	24000bd0 	.word	0x24000bd0
 8000f3c:	405e0000 	.word	0x405e0000
 8000f40:	c05e0000 	.word	0xc05e0000

08000f44 <PIDroR>:

double PIDroR(int _roRValue, int _roRSetpoint)
{
 8000f44:	b490      	push	{r4, r7}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	roRError = _roRSetpoint - _roRValue;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b44      	ldr	r3, [pc, #272]	; (8001070 <PIDroR+0x12c>)
 8000f5e:	801a      	strh	r2, [r3, #0]
	roRP = roRError;
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <PIDroR+0x12c>)
 8000f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <PIDroR+0x130>)
 8000f70:	ed83 7b00 	vstr	d7, [r3]
	roRD = roRError - roRPreError;
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <PIDroR+0x12c>)
 8000f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <PIDroR+0x134>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <PIDroR+0x138>)
 8000f8e:	ed83 7b00 	vstr	d7, [r3]
	roRI = roRError + roRI;
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <PIDroR+0x12c>)
 8000f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <PIDroR+0x13c>)
 8000fa2:	ed93 7b00 	vldr	d7, [r3]
 8000fa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000faa:	4b35      	ldr	r3, [pc, #212]	; (8001080 <PIDroR+0x13c>)
 8000fac:	ed83 7b00 	vstr	d7, [r3]
	roRPID = roRKp*roRP + roRKd*roRD + roRKi*roRI;
 8000fb0:	4b34      	ldr	r3, [pc, #208]	; (8001084 <PIDroR+0x140>)
 8000fb2:	ed93 6b00 	vldr	d6, [r3]
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <PIDroR+0x130>)
 8000fb8:	ed93 7b00 	vldr	d7, [r3]
 8000fbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <PIDroR+0x144>)
 8000fc2:	ed93 5b00 	vldr	d5, [r3]
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <PIDroR+0x138>)
 8000fc8:	ed93 7b00 	vldr	d7, [r3]
 8000fcc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <PIDroR+0x148>)
 8000fd6:	ed93 5b00 	vldr	d5, [r3]
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <PIDroR+0x13c>)
 8000fdc:	ed93 7b00 	vldr	d7, [r3]
 8000fe0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <PIDroR+0x14c>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
	if(roRPID > MAX_ROR_PID)
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <PIDroR+0x150>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <PIDroR+0x14c>)
 8000ffc:	ed93 7b00 	vldr	d7, [r3]
 8001000:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	d508      	bpl.n	800101c <PIDroR+0xd8>
	{
		roRPID = MAX_ROR_PID;
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <PIDroR+0x150>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <PIDroR+0x14c>)
 8001018:	ed83 7b00 	vstr	d7, [r3]
	}
	if(roRPID < MIN_ROR_PID)
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <PIDroR+0x150>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	425b      	negs	r3, r3
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <PIDroR+0x14c>)
 800102c:	ed93 7b00 	vldr	d7, [r3]
 8001030:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	dd09      	ble.n	800104e <PIDroR+0x10a>
	{
		roRPID = MIN_ROR_PID;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <PIDroR+0x150>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	425b      	negs	r3, r3
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <PIDroR+0x14c>)
 800104a:	ed83 7b00 	vstr	d7, [r3]
	}
	roRPreError = roRError;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <PIDroR+0x12c>)
 8001050:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <PIDroR+0x134>)
 8001056:	801a      	strh	r2, [r3, #0]
	return roRPID;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <PIDroR+0x14c>)
 800105a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800105e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001062:	eeb0 0b47 	vmov.f64	d0, d7
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bc90      	pop	{r4, r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	24000d40 	.word	0x24000d40
 8001074:	24000ab8 	.word	0x24000ab8
 8001078:	240001c0 	.word	0x240001c0
 800107c:	24000d28 	.word	0x24000d28
 8001080:	24000820 	.word	0x24000820
 8001084:	24000048 	.word	0x24000048
 8001088:	24000c90 	.word	0x24000c90
 800108c:	24000050 	.word	0x24000050
 8001090:	240003e8 	.word	0x240003e8
 8001094:	24000040 	.word	0x24000040

08001098 <PIDpit>:
	roLPreError = roLError;
	return roLPID;
}

double PIDpit(int _pitValue, int _pitSetpoint)
{
 8001098:	b490      	push	{r4, r7}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	pitError = _pitSetpoint - _pitValue;
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <PIDpit+0x118>)
 80010b2:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 80010b6:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <PIDpit+0x118>)
 80010b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010bc:	4a3d      	ldr	r2, [pc, #244]	; (80011b4 <PIDpit+0x11c>)
 80010be:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <PIDpit+0x118>)
 80010c4:	ed93 6b00 	vldr	d6, [r3]
 80010c8:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <PIDpit+0x120>)
 80010ca:	ed93 7b00 	vldr	d7, [r3]
 80010ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <PIDpit+0x124>)
 80010d4:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <PIDpit+0x118>)
 80010da:	ed93 6b00 	vldr	d6, [r3]
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <PIDpit+0x128>)
 80010e0:	ed93 7b00 	vldr	d7, [r3]
 80010e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <PIDpit+0x128>)
 80010ea:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <PIDpit+0x12c>)
 80010f0:	ed93 6b00 	vldr	d6, [r3]
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <PIDpit+0x11c>)
 80010f6:	ed93 7b00 	vldr	d7, [r3]
 80010fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <PIDpit+0x130>)
 8001100:	ed93 5b00 	vldr	d5, [r3]
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <PIDpit+0x124>)
 8001106:	ed93 7b00 	vldr	d7, [r3]
 800110a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800110e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <PIDpit+0x134>)
 8001114:	ed93 5b00 	vldr	d5, [r3]
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <PIDpit+0x128>)
 800111a:	ed93 7b00 	vldr	d7, [r3]
 800111e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001122:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <PIDpit+0x138>)
 8001128:	ed83 7b00 	vstr	d7, [r3]
	if(pitPID > MAX_PIT_PID)
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <PIDpit+0x13c>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <PIDpit+0x138>)
 800113a:	ed93 7b00 	vldr	d7, [r3]
 800113e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d508      	bpl.n	800115a <PIDpit+0xc2>
	{
		pitPID = MAX_PIT_PID;
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <PIDpit+0x13c>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <PIDpit+0x138>)
 8001156:	ed83 7b00 	vstr	d7, [r3]
	}
	if(pitPID < MIN_PIT_PID)
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <PIDpit+0x13c>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	425b      	negs	r3, r3
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <PIDpit+0x138>)
 800116a:	ed93 7b00 	vldr	d7, [r3]
 800116e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001176:	dd09      	ble.n	800118c <PIDpit+0xf4>
	{
		pitPID = MIN_PIT_PID;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <PIDpit+0x13c>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	425b      	negs	r3, r3
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <PIDpit+0x138>)
 8001188:	ed83 7b00 	vstr	d7, [r3]
	}
	pitPreError = pitError;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <PIDpit+0x118>)
 800118e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <PIDpit+0x120>)
 8001194:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <PIDpit+0x138>)
 800119a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800119e:	ec44 3b17 	vmov	d7, r3, r4
}
 80011a2:	eeb0 0b47 	vmov.f64	d0, d7
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc90      	pop	{r4, r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	240003f0 	.word	0x240003f0
 80011b4:	24000aa0 	.word	0x24000aa0
 80011b8:	240001b8 	.word	0x240001b8
 80011bc:	240002a8 	.word	0x240002a8
 80011c0:	24000908 	.word	0x24000908
 80011c4:	24000060 	.word	0x24000060
 80011c8:	240003f8 	.word	0x240003f8
 80011cc:	24000068 	.word	0x24000068
 80011d0:	24000b90 	.word	0x24000b90
 80011d4:	24000058 	.word	0x24000058

080011d8 <roR_pit_yaw_mixSpeed>:
	controlMotor4(_motor4Speed);
	spinalCordTrans();
}

void roR_pit_yaw_mixSpeed(void)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	ed2d 8b02 	vpush	{d8}
 80011de:	b08d      	sub	sp, #52	; 0x34
 80011e0:	af00      	add	r7, sp, #0
	double _roR_pit_speed = sqrt(roRPID*roRPID + pitPID*pitPID);
 80011e2:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <roR_pit_yaw_mixSpeed+0x1e0>)
 80011e4:	ed93 6b00 	vldr	d6, [r3]
 80011e8:	4b73      	ldr	r3, [pc, #460]	; (80013b8 <roR_pit_yaw_mixSpeed+0x1e0>)
 80011ea:	ed93 7b00 	vldr	d7, [r3]
 80011ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011f2:	4b72      	ldr	r3, [pc, #456]	; (80013bc <roR_pit_yaw_mixSpeed+0x1e4>)
 80011f4:	ed93 5b00 	vldr	d5, [r3]
 80011f8:	4b70      	ldr	r3, [pc, #448]	; (80013bc <roR_pit_yaw_mixSpeed+0x1e4>)
 80011fa:	ed93 7b00 	vldr	d7, [r3]
 80011fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001202:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001206:	eeb0 0b47 	vmov.f64	d0, d7
 800120a:	f00e f8e9 	bl	800f3e0 <sqrt>
 800120e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roR_pit_dir = atan2(-roRPID, pitPID);
 8001212:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <roR_pit_yaw_mixSpeed+0x1e0>)
 8001214:	ed93 7b00 	vldr	d7, [r3]
 8001218:	eeb1 7b47 	vneg.f64	d7, d7
 800121c:	4b67      	ldr	r3, [pc, #412]	; (80013bc <roR_pit_yaw_mixSpeed+0x1e4>)
 800121e:	ed93 6b00 	vldr	d6, [r3]
 8001222:	eeb0 1b46 	vmov.f64	d1, d6
 8001226:	eeb0 0b47 	vmov.f64	d0, d7
 800122a:	f00e f8d5 	bl	800f3d8 <atan2>
 800122e:	ed87 0b08 	vstr	d0, [r7, #32]
//	double _motor1Speed = yawPID + -(_roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0);
//	double _motor2Speed = yawPID + -(_roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0);
//	double _motor3Speed = yawPID +   _roR_pit_speed *sin(_roR_pit_dir + M_PI/4) + 0;
//	double _motor4Speed = yawPID +   _roR_pit_speed *cos(_roR_pit_dir + M_PI/4) - 0;

	double _motor1Speed = yawPID*factorYawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 - _roR_pit_dir) + 0.0);
 8001232:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <roR_pit_yaw_mixSpeed+0x1e8>)
 8001234:	ed93 6b00 	vldr	d6, [r3]
 8001238:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <roR_pit_yaw_mixSpeed+0x1ec>)
 800123a:	ed93 7b00 	vldr	d7, [r3]
 800123e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001242:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80013a0 <roR_pit_yaw_mixSpeed+0x1c8>
 8001246:	ed97 7b08 	vldr	d7, [r7, #32]
 800124a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800124e:	eeb0 0b47 	vmov.f64	d0, d7
 8001252:	f00e f885 	bl	800f360 <cos>
 8001256:	eeb0 6b40 	vmov.f64	d6, d0
 800125a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800125e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001262:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80013a8 <roR_pit_yaw_mixSpeed+0x1d0>
 8001266:	ee37 7b06 	vadd.f64	d7, d7, d6
 800126a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800126e:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID*factorYawPID + (_roR_pit_speed *cos(3.0*M_PI/4.0 + _roR_pit_dir) - 0.0);
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <roR_pit_yaw_mixSpeed+0x1e8>)
 8001274:	ed93 6b00 	vldr	d6, [r3]
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <roR_pit_yaw_mixSpeed+0x1ec>)
 800127a:	ed93 7b00 	vldr	d7, [r3]
 800127e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001282:	ed97 7b08 	vldr	d7, [r7, #32]
 8001286:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80013a0 <roR_pit_yaw_mixSpeed+0x1c8>
 800128a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800128e:	eeb0 0b47 	vmov.f64	d0, d7
 8001292:	f00e f865 	bl	800f360 <cos>
 8001296:	eeb0 6b40 	vmov.f64	d6, d0
 800129a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800129e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80012a6:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID*factorYawPID +  _roR_pit_speed *cos(    M_PI/4.0 + _roR_pit_dir) + 0.0;
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <roR_pit_yaw_mixSpeed+0x1e8>)
 80012ac:	ed93 6b00 	vldr	d6, [r3]
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <roR_pit_yaw_mixSpeed+0x1ec>)
 80012b2:	ed93 7b00 	vldr	d7, [r3]
 80012b6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80012ba:	ed97 7b08 	vldr	d7, [r7, #32]
 80012be:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80013b0 <roR_pit_yaw_mixSpeed+0x1d8>
 80012c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012c6:	eeb0 0b47 	vmov.f64	d0, d7
 80012ca:	f00e f849 	bl	800f360 <cos>
 80012ce:	eeb0 6b40 	vmov.f64	d6, d0
 80012d2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80012d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012da:	ee38 7b07 	vadd.f64	d7, d8, d7
 80012de:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80013a8 <roR_pit_yaw_mixSpeed+0x1d0>
 80012e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012e6:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID*factorYawPID +  _roR_pit_speed *cos(    M_PI/4.0 - _roR_pit_dir) - 0.0;
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <roR_pit_yaw_mixSpeed+0x1e8>)
 80012ec:	ed93 6b00 	vldr	d6, [r3]
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <roR_pit_yaw_mixSpeed+0x1ec>)
 80012f2:	ed93 7b00 	vldr	d7, [r3]
 80012f6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80012fa:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80013b0 <roR_pit_yaw_mixSpeed+0x1d8>
 80012fe:	ed97 7b08 	vldr	d7, [r7, #32]
 8001302:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001306:	eeb0 0b47 	vmov.f64	d0, d7
 800130a:	f00e f829 	bl	800f360 <cos>
 800130e:	eeb0 6b40 	vmov.f64	d6, d0
 8001312:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001316:	ee26 7b07 	vmul.f64	d7, d6, d7
 800131a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800131e:	ed87 7b00 	vstr	d7, [r7]
//	b = 1.0 - _motor3Speed;
//	absSpeed = _roR_pit_speed;
//	dir = _roR_pit_dir;
//	cos_ = cos(3*M_PI/4 - _roR_pit_dir);
//	motor1_debug = absSpeed*cos_;
	motor1Speed_ = _motor1Speed;
 8001322:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <roR_pit_yaw_mixSpeed+0x1f0>)
 8001324:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001328:	e9c2 3400 	strd	r3, r4, [r2]
	motor2Speed_ = _motor2Speed;
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <roR_pit_yaw_mixSpeed+0x1f4>)
 800132e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001332:	e9c2 3400 	strd	r3, r4, [r2]
	motor3Speed_ = _motor3Speed;
 8001336:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <roR_pit_yaw_mixSpeed+0x1f8>)
 8001338:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800133c:	e9c2 3400 	strd	r3, r4, [r2]
	motor4Speed_ = _motor4Speed;
 8001340:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <roR_pit_yaw_mixSpeed+0x1fc>)
 8001342:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001346:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 800134a:	ed97 7b06 	vldr	d7, [r7, #24]
 800134e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001352:	ee17 0a90 	vmov	r0, s15
 8001356:	f7ff fc5d 	bl	8000c14 <controlMotor1>
	controlMotor2(_motor2Speed);
 800135a:	ed97 7b04 	vldr	d7, [r7, #16]
 800135e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001362:	ee17 0a90 	vmov	r0, s15
 8001366:	f7ff fc91 	bl	8000c8c <controlMotor2>
	controlMotor3(_motor3Speed);
 800136a:	ed97 7b02 	vldr	d7, [r7, #8]
 800136e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001372:	ee17 0a90 	vmov	r0, s15
 8001376:	f7ff fcc5 	bl	8000d04 <controlMotor3>
	controlMotor4(_motor4Speed);
 800137a:	ed97 7b00 	vldr	d7, [r7]
 800137e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001382:	ee17 0a90 	vmov	r0, s15
 8001386:	f7ff fcf9 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 800138a:	f7ff fac3 	bl	8000914 <spinalCordTrans>
}
 800138e:	bf00      	nop
 8001390:	3734      	adds	r7, #52	; 0x34
 8001392:	46bd      	mov	sp, r7
 8001394:	ecbd 8b02 	vpop	{d8}
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	7f3321d2 	.word	0x7f3321d2
 80013a4:	4002d97c 	.word	0x4002d97c
	...
 80013b0:	54442d18 	.word	0x54442d18
 80013b4:	3fe921fb 	.word	0x3fe921fb
 80013b8:	240003e8 	.word	0x240003e8
 80013bc:	24000b90 	.word	0x24000b90
 80013c0:	24000bd0 	.word	0x24000bd0
 80013c4:	24000070 	.word	0x24000070
 80013c8:	240001b0 	.word	0x240001b0
 80013cc:	24000ca0 	.word	0x24000ca0
 80013d0:	24000b98 	.word	0x24000b98
 80013d4:	240008d8 	.word	0x240008d8

080013d8 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 80013dc:	2003      	movs	r0, #3
 80013de:	f7ff fc19 	bl	8000c14 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 80013e2:	f06f 0002 	mvn.w	r0, #2
 80013e6:	f7ff fc51 	bl	8000c8c <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 80013ea:	2003      	movs	r0, #3
 80013ec:	f7ff fc8a 	bl	8000d04 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 80013f0:	f06f 0002 	mvn.w	r0, #2
 80013f4:	f7ff fcc2 	bl	8000d7c <controlMotor4>
	spinalCordTrans();
 80013f8:	f7ff fa8c 	bl	8000914 <spinalCordTrans>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <roR_Pit_Yaw_GoTo>:
	roL_pit_yaw_mixSpeed();
}


void roR_Pit_Yaw_GoTo(uint32_t posRoR, uint32_t posPit, uint32_t posYaw)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
	PIDyaw(compassData, posYaw);
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <roR_Pit_Yaw_GoTo+0x58>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f7ff fced 	bl	8000df8 <PIDyaw>
	PIDroR(rigtDistance, posRoR);
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <roR_Pit_Yaw_GoTo+0x5c>)
 8001420:	ed93 7b00 	vldr	d7, [r3]
 8001424:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4619      	mov	r1, r3
 800142c:	ee17 0a90 	vmov	r0, s15
 8001430:	f7ff fd88 	bl	8000f44 <PIDroR>
	PIDpit(pitchDistance, posPit);
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <roR_Pit_Yaw_GoTo+0x60>)
 8001436:	ed93 7b00 	vldr	d7, [r3]
 800143a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4619      	mov	r1, r3
 8001442:	ee17 0a90 	vmov	r0, s15
 8001446:	f7ff fe27 	bl	8001098 <PIDpit>
	roR_pit_yaw_mixSpeed();
 800144a:	f7ff fec5 	bl	80011d8 <roR_pit_yaw_mixSpeed>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	240008e8 	.word	0x240008e8
 800145c:	24000928 	.word	0x24000928
 8001460:	24000cb8 	.word	0x24000cb8

08001464 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <positionControl_Init+0x18>)
 800146a:	f009 fc4b 	bl	800ad04 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <positionControl_Init+0x1c>)
 8001474:	f006 fd9c 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24000ccc 	.word	0x24000ccc
 8001480:	58021000 	.word	0x58021000

08001484 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d16e      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d16a      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d11e      	bne.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ae:	4837      	ldr	r0, [pc, #220]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014b0:	f006 fd7e 	bl	8007fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80014b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b8:	4834      	ldr	r0, [pc, #208]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014ba:	f006 fd92 	bl	8007fe2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	4a32      	ldr	r2, [pc, #200]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014c6:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 80014c8:	4b32      	ldr	r3, [pc, #200]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a31      	ldr	r2, [pc, #196]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014d0:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2bc7      	cmp	r3, #199	; 0xc7
 80014d8:	dd05      	ble.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d11f      	bne.n	800152e <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f4:	4825      	ldr	r0, [pc, #148]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014f6:	f006 fd5b 	bl	8007fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80014fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001500:	f006 fd6f 	bl	8007fe2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a21      	ldr	r2, [pc, #132]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800150c:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001516:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001520:	db05      	blt.n	800152e <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d11f      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800153e:	f006 fd37 	bl	8007fb0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001548:	f006 fd4b 	bl	8007fe2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001554:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800155e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001568:	db05      	blt.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	24000ccc 	.word	0x24000ccc
 8001584:	24000b68 	.word	0x24000b68
 8001588:	24000c78 	.word	0x24000c78
 800158c:	58020c00 	.word	0x58020c00
 8001590:	24000b58 	.word	0x24000b58
 8001594:	24000bbc 	.word	0x24000bbc

08001598 <GetSector>:
void solveDT50_Left(uint16_t a1, uint16_t a2);
void solveDT50_Rigt(uint16_t a1, uint16_t a2);
void solveDT50_Pitch(uint16_t a1, uint16_t a2);

uint32_t GetSector(uint32_t Address)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]

  if(((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <GetSector+0x150>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d803      	bhi.n	80015b4 <GetSector+0x1c>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015b2:	d207      	bcs.n	80015c4 <GetSector+0x2c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a4d      	ldr	r2, [pc, #308]	; (80016ec <GetSector+0x154>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d806      	bhi.n	80015ca <GetSector+0x32>
     ((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80015c2:	d302      	bcc.n	80015ca <GetSector+0x32>
  {
    sector = FLASH_SECTOR_0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e086      	b.n	80016d8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <GetSector+0x158>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d803      	bhi.n	80015da <GetSector+0x42>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <GetSector+0x150>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d807      	bhi.n	80015ea <GetSector+0x52>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a45      	ldr	r2, [pc, #276]	; (80016f4 <GetSector+0x15c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d806      	bhi.n	80015f0 <GetSector+0x58>
          ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a41      	ldr	r2, [pc, #260]	; (80016ec <GetSector+0x154>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d902      	bls.n	80015f0 <GetSector+0x58>
  {
    sector = FLASH_SECTOR_1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e073      	b.n	80016d8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a41      	ldr	r2, [pc, #260]	; (80016f8 <GetSector+0x160>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d803      	bhi.n	8001600 <GetSector+0x68>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <GetSector+0x158>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d807      	bhi.n	8001610 <GetSector+0x78>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3e      	ldr	r2, [pc, #248]	; (80016fc <GetSector+0x164>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d806      	bhi.n	8001616 <GetSector+0x7e>
          ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3a      	ldr	r2, [pc, #232]	; (80016f4 <GetSector+0x15c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d902      	bls.n	8001616 <GetSector+0x7e>
  {
    sector = FLASH_SECTOR_2;
 8001610:	2302      	movs	r3, #2
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e060      	b.n	80016d8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a39      	ldr	r2, [pc, #228]	; (8001700 <GetSector+0x168>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d803      	bhi.n	8001626 <GetSector+0x8e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a35      	ldr	r2, [pc, #212]	; (80016f8 <GetSector+0x160>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d807      	bhi.n	8001636 <GetSector+0x9e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a36      	ldr	r2, [pc, #216]	; (8001704 <GetSector+0x16c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d806      	bhi.n	800163c <GetSector+0xa4>
          ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a32      	ldr	r2, [pc, #200]	; (80016fc <GetSector+0x164>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d902      	bls.n	800163c <GetSector+0xa4>
  {
    sector = FLASH_SECTOR_3;
 8001636:	2303      	movs	r3, #3
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e04d      	b.n	80016d8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <GetSector+0x170>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d803      	bhi.n	800164c <GetSector+0xb4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <GetSector+0x168>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d807      	bhi.n	800165c <GetSector+0xc4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <GetSector+0x174>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d806      	bhi.n	8001662 <GetSector+0xca>
          ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a2b      	ldr	r2, [pc, #172]	; (8001704 <GetSector+0x16c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d902      	bls.n	8001662 <GetSector+0xca>
  {
    sector = FLASH_SECTOR_4;
 800165c:	2304      	movs	r3, #4
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	e03a      	b.n	80016d8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a2a      	ldr	r2, [pc, #168]	; (8001710 <GetSector+0x178>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d803      	bhi.n	8001672 <GetSector+0xda>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a26      	ldr	r2, [pc, #152]	; (8001708 <GetSector+0x170>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d807      	bhi.n	8001682 <GetSector+0xea>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a27      	ldr	r2, [pc, #156]	; (8001714 <GetSector+0x17c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d806      	bhi.n	8001688 <GetSector+0xf0>
          ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <GetSector+0x174>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d902      	bls.n	8001688 <GetSector+0xf0>
  {
    sector = FLASH_SECTOR_5;
 8001682:	2305      	movs	r3, #5
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e027      	b.n	80016d8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a23      	ldr	r2, [pc, #140]	; (8001718 <GetSector+0x180>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d803      	bhi.n	8001698 <GetSector+0x100>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <GetSector+0x178>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d807      	bhi.n	80016a8 <GetSector+0x110>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a20      	ldr	r2, [pc, #128]	; (800171c <GetSector+0x184>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d806      	bhi.n	80016ae <GetSector+0x116>
          ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <GetSector+0x17c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d902      	bls.n	80016ae <GetSector+0x116>
  {
    sector = FLASH_SECTOR_6;
 80016a8:	2306      	movs	r3, #6
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e014      	b.n	80016d8 <GetSector+0x140>
  }
  else if(((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80016b4:	d203      	bcs.n	80016be <GetSector+0x126>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <GetSector+0x180>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d807      	bhi.n	80016ce <GetSector+0x136>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <GetSector+0x188>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d806      	bhi.n	80016d4 <GetSector+0x13c>
          ((Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <GetSector+0x184>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d902      	bls.n	80016d4 <GetSector+0x13c>
  {
     sector = FLASH_SECTOR_7;
 80016ce:	2307      	movs	r3, #7
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e001      	b.n	80016d8 <GetSector+0x140>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 80016d4:	2307      	movs	r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80016d8:	68fb      	ldr	r3, [r7, #12]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	0801ffff 	.word	0x0801ffff
 80016ec:	0811ffff 	.word	0x0811ffff
 80016f0:	0803ffff 	.word	0x0803ffff
 80016f4:	0813ffff 	.word	0x0813ffff
 80016f8:	0805ffff 	.word	0x0805ffff
 80016fc:	0815ffff 	.word	0x0815ffff
 8001700:	0807ffff 	.word	0x0807ffff
 8001704:	0817ffff 	.word	0x0817ffff
 8001708:	0809ffff 	.word	0x0809ffff
 800170c:	0819ffff 	.word	0x0819ffff
 8001710:	080bffff 	.word	0x080bffff
 8001714:	081bffff 	.word	0x081bffff
 8001718:	080dffff 	.word	0x080dffff
 800171c:	081dffff 	.word	0x081dffff
 8001720:	081ffffe 	.word	0x081ffffe

08001724 <writeFLASH>:

void writeFLASH()
{
 8001724:	b598      	push	{r3, r4, r7, lr}
 8001726:	af00      	add	r7, sp, #0
	FlashWord[0] = (adcLeft_2000<<0)|(adcLeft_1000<<16);
 8001728:	4b40      	ldr	r3, [pc, #256]	; (800182c <writeFLASH+0x108>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b40      	ldr	r3, [pc, #256]	; (8001830 <writeFLASH+0x10c>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	4313      	orrs	r3, r2
 8001736:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800173a:	4a3e      	ldr	r2, [pc, #248]	; (8001834 <writeFLASH+0x110>)
 800173c:	e9c2 3400 	strd	r3, r4, [r2]
	FlashWord[1] = (adcPitc_2000<<0)|(adcPitc_1000<<16);
 8001740:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <writeFLASH+0x114>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <writeFLASH+0x118>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	041b      	lsls	r3, r3, #16
 800174c:	4313      	orrs	r3, r2
 800174e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001752:	4a38      	ldr	r2, [pc, #224]	; (8001834 <writeFLASH+0x110>)
 8001754:	e9c2 3402 	strd	r3, r4, [r2, #8]
	FlashWord[2] = (adcRigt_2000<<0)|(adcRigt_1000<<16);
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <writeFLASH+0x11c>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <writeFLASH+0x120>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	041b      	lsls	r3, r3, #16
 8001764:	4313      	orrs	r3, r2
 8001766:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800176a:	4a32      	ldr	r2, [pc, #200]	; (8001834 <writeFLASH+0x110>)
 800176c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	FlashWord[3] = 0xFFFFFFFF;
 8001770:	4a30      	ldr	r2, [pc, #192]	; (8001834 <writeFLASH+0x110>)
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	f04f 0400 	mov.w	r4, #0
 800177a:	e9c2 3406 	strd	r3, r4, [r2, #24]
//	FlashWord[0] = 0;
//	FlashWord[1] = 0;
//	FlashWord[2] = 0;

	HAL_FLASH_Unlock();
 800177e:	f005 ffdd 	bl	800773c <HAL_FLASH_Unlock>
	FirstSector = GetSector(FLASH_USER_START_ADDR);
 8001782:	4831      	ldr	r0, [pc, #196]	; (8001848 <writeFLASH+0x124>)
 8001784:	f7ff ff08 	bl	8001598 <GetSector>
 8001788:	4602      	mov	r2, r0
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <writeFLASH+0x128>)
 800178c:	601a      	str	r2, [r3, #0]
	/* Get the number of sector to erase from 1st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 800178e:	4830      	ldr	r0, [pc, #192]	; (8001850 <writeFLASH+0x12c>)
 8001790:	f7ff ff02 	bl	8001598 <GetSector>
 8001794:	4602      	mov	r2, r0
 8001796:	4b2d      	ldr	r3, [pc, #180]	; (800184c <writeFLASH+0x128>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	3301      	adds	r3, #1
 800179e:	4a2d      	ldr	r2, [pc, #180]	; (8001854 <writeFLASH+0x130>)
 80017a0:	6013      	str	r3, [r2, #0]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <writeFLASH+0x134>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <writeFLASH+0x134>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks         = FLASH_BANK_2;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <writeFLASH+0x134>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector        = FirstSector;
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <writeFLASH+0x128>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a27      	ldr	r2, [pc, #156]	; (8001858 <writeFLASH+0x134>)
 80017ba:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <writeFLASH+0x130>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a25      	ldr	r2, [pc, #148]	; (8001858 <writeFLASH+0x134>)
 80017c2:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80017c4:	4925      	ldr	r1, [pc, #148]	; (800185c <writeFLASH+0x138>)
 80017c6:	4824      	ldr	r0, [pc, #144]	; (8001858 <writeFLASH+0x134>)
 80017c8:	f006 f8b8 	bl	800793c <HAL_FLASHEx_Erase>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <writeFLASH+0xbe>
	  user can call function 'HAL_FLASH_GetError()'
	*/
	/* Infinite loop */
		while (1)
		{
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80017d2:	2102      	movs	r1, #2
 80017d4:	4822      	ldr	r0, [pc, #136]	; (8001860 <writeFLASH+0x13c>)
 80017d6:	f006 fc04 	bl	8007fe2 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80017da:	2064      	movs	r0, #100	; 0x64
 80017dc:	f002 f93a 	bl	8003a54 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80017e0:	e7f7      	b.n	80017d2 <writeFLASH+0xae>
		}
	}

	Address = FLASH_USER_START_ADDR;
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <writeFLASH+0x140>)
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <writeFLASH+0x124>)
 80017e6:	601a      	str	r2, [r3, #0]

	while (Address < FLASH_USER_END_ADDR)
 80017e8:	e017      	b.n	800181a <writeFLASH+0xf6>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)FlashWord)) == HAL_OK)
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <writeFLASH+0x140>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <writeFLASH+0x110>)
 80017f0:	4619      	mov	r1, r3
 80017f2:	2001      	movs	r0, #1
 80017f4:	f005 ff20 	bl	8007638 <HAL_FLASH_Program>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <writeFLASH+0xe6>
		{
			Address = Address + 32; /* increment for the next Flash word*/
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <writeFLASH+0x140>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3320      	adds	r3, #32
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <writeFLASH+0x140>)
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e007      	b.n	800181a <writeFLASH+0xf6>
		{
		  /* Error occurred while writing data in Flash memory.
			 User can add here some code to deal with this error */
		  while (1)
		  {
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800180a:	2102      	movs	r1, #2
 800180c:	4814      	ldr	r0, [pc, #80]	; (8001860 <writeFLASH+0x13c>)
 800180e:	f006 fbe8 	bl	8007fe2 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001812:	2064      	movs	r0, #100	; 0x64
 8001814:	f002 f91e 	bl	8003a54 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001818:	e7f7      	b.n	800180a <writeFLASH+0xe6>
	while (Address < FLASH_USER_END_ADDR)
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <writeFLASH+0x140>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <writeFLASH+0x144>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d9e2      	bls.n	80017ea <writeFLASH+0xc6>
		  }
		}
	}
	HAL_FLASH_Lock();
 8001824:	f005 ffc4 	bl	80077b0 <HAL_FLASH_Lock>
}
 8001828:	bf00      	nop
 800182a:	bd98      	pop	{r3, r4, r7, pc}
 800182c:	2400007a 	.word	0x2400007a
 8001830:	24000078 	.word	0x24000078
 8001834:	24000278 	.word	0x24000278
 8001838:	2400007e 	.word	0x2400007e
 800183c:	2400007c 	.word	0x2400007c
 8001840:	24000082 	.word	0x24000082
 8001844:	24000080 	.word	0x24000080
 8001848:	081e0000 	.word	0x081e0000
 800184c:	24000168 	.word	0x24000168
 8001850:	081ffffe 	.word	0x081ffffe
 8001854:	2400016c 	.word	0x2400016c
 8001858:	24000910 	.word	0x24000910
 800185c:	24000174 	.word	0x24000174
 8001860:	58021000 	.word	0x58021000
 8001864:	24000170 	.word	0x24000170
 8001868:	081ffffd 	.word	0x081ffffd

0800186c <readFLASH>:

void readFLASH()
{
 800186c:	b598      	push	{r3, r4, r7, lr}
 800186e:	af00      	add	r7, sp, #0
	Address = FLASH_USER_START_ADDR;
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <readFLASH+0xec>)
 8001872:	4a3a      	ldr	r2, [pc, #232]	; (800195c <readFLASH+0xf0>)
 8001874:	601a      	str	r2, [r3, #0]
	MemoryProgramStatus = 0x0;
 8001876:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <readFLASH+0xf4>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

	DT50Left = *(uint64_t*) FLASH_USER_START_ADDR;
 800187c:	4b37      	ldr	r3, [pc, #220]	; (800195c <readFLASH+0xf0>)
 800187e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001882:	4a38      	ldr	r2, [pc, #224]	; (8001964 <readFLASH+0xf8>)
 8001884:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Left_2000 = (DT50Left>>0)&0xFFFF;
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <readFLASH+0xf8>)
 800188a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <readFLASH+0xfc>)
 8001892:	801a      	strh	r2, [r3, #0]
	DT50Left_1000 = (DT50Left>>16)&0xFFFF;
 8001894:	4b33      	ldr	r3, [pc, #204]	; (8001964 <readFLASH+0xf8>)
 8001896:	e9d3 1200 	ldrd	r1, r2, [r3]
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	0c0b      	lsrs	r3, r1, #16
 80018a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018a8:	0c14      	lsrs	r4, r2, #16
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <readFLASH+0x100>)
 80018ae:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Pitc = *(uint64_t*) (FLASH_USER_START_ADDR+8);
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <readFLASH+0x104>)
 80018b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018ba:	4a2e      	ldr	r2, [pc, #184]	; (8001974 <readFLASH+0x108>)
 80018bc:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Pitc_2000 = (DT50Pitc>>0)&0xFFFF;
 80018c0:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <readFLASH+0x108>)
 80018c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <readFLASH+0x10c>)
 80018ca:	801a      	strh	r2, [r3, #0]
	DT50Pitc_1000 = (DT50Pitc>>16)&0xFFFF;
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <readFLASH+0x108>)
 80018ce:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f04f 0400 	mov.w	r4, #0
 80018da:	0c0b      	lsrs	r3, r1, #16
 80018dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018e0:	0c14      	lsrs	r4, r2, #16
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <readFLASH+0x110>)
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Rigt = *(uint64_t*) (FLASH_USER_START_ADDR+16);
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <readFLASH+0x114>)
 80018ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <readFLASH+0x118>)
 80018f4:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Rigt_2000 = (DT50Rigt>>0)&0xFFFF;
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <readFLASH+0x118>)
 80018fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <readFLASH+0x11c>)
 8001902:	801a      	strh	r2, [r3, #0]
	DT50Rigt_1000 = (DT50Rigt>>16)&0xFFFF;
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <readFLASH+0x118>)
 8001906:	e9d3 1200 	ldrd	r1, r2, [r3]
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	f04f 0400 	mov.w	r4, #0
 8001912:	0c0b      	lsrs	r3, r1, #16
 8001914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001918:	0c14      	lsrs	r4, r2, #16
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <readFLASH+0x120>)
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	f3bf 8f4f 	dsb	sy
	__DSB();

	solveDT50_Left(DT50Left_1000, DT50Left_2000);
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <readFLASH+0x100>)
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <readFLASH+0xfc>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f000 fa20 	bl	8001d74 <solveDT50_Left>
	solveDT50_Pitch(DT50Pitc_1000, DT50Pitc_2000);
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <readFLASH+0x110>)
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <readFLASH+0x10c>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f000 fab4 	bl	8001eac <solveDT50_Pitch>
	solveDT50_Rigt(DT50Rigt_1000, DT50Rigt_2000);
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <readFLASH+0x120>)
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <readFLASH+0x11c>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	4610      	mov	r0, r2
 8001950:	f000 fb48 	bl	8001fe4 <solveDT50_Rigt>
//		MemoryProgramStatus++;
//	  }
//	  Address +=8;
//		}
//	}
}
 8001954:	bf00      	nop
 8001956:	bd98      	pop	{r3, r4, r7, pc}
 8001958:	24000170 	.word	0x24000170
 800195c:	081e0000 	.word	0x081e0000
 8001960:	24000178 	.word	0x24000178
 8001964:	24000180 	.word	0x24000180
 8001968:	24000bd8 	.word	0x24000bd8
 800196c:	24000b6e 	.word	0x24000b6e
 8001970:	081e0008 	.word	0x081e0008
 8001974:	24000188 	.word	0x24000188
 8001978:	24000828 	.word	0x24000828
 800197c:	24000cb6 	.word	0x24000cb6
 8001980:	081e0010 	.word	0x081e0010
 8001984:	24000190 	.word	0x24000190
 8001988:	24000804 	.word	0x24000804
 800198c:	24000840 	.word	0x24000840

08001990 <getSample>:
void getSample()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b096      	sub	sp, #88	; 0x58
 8001994:	af00      	add	r7, sp, #0
	int sumADC_Left, sumADC_Pitc, sumADC_Rigt;

	//lấy mẫu left 1000
	sumADC_Left = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	657b      	str	r3, [r7, #84]	; 0x54
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 800199a:	e014      	b.n	80019c6 <getSample+0x36>
	{
		ST7920_SendString(0,4, "LEFT 1");
 800199c:	4aba      	ldr	r2, [pc, #744]	; (8001c88 <getSample+0x2f8>)
 800199e:	2104      	movs	r1, #4
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff f85f 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2102      	movs	r1, #2
 80019aa:	48b8      	ldr	r0, [pc, #736]	; (8001c8c <getSample+0x2fc>)
 80019ac:	f006 fb00 	bl	8007fb0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80019b0:	2064      	movs	r0, #100	; 0x64
 80019b2:	f002 f84f 	bl	8003a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2102      	movs	r1, #2
 80019ba:	48b4      	ldr	r0, [pc, #720]	; (8001c8c <getSample+0x2fc>)
 80019bc:	f006 faf8 	bl	8007fb0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80019c0:	2064      	movs	r0, #100	; 0x64
 80019c2:	f002 f847 	bl	8003a54 <HAL_Delay>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 80019c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ca:	48b0      	ldr	r0, [pc, #704]	; (8001c8c <getSample+0x2fc>)
 80019cc:	f006 fad8 	bl	8007f80 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0e2      	beq.n	800199c <getSample+0xc>
	}
	//đã gạt phải
	for(int i = 0; i < 100; ++i)
 80019d6:	2300      	movs	r3, #0
 80019d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80019da:	e010      	b.n	80019fe <getSample+0x6e>
	{
		HAL_Delay(10);
 80019dc:	200a      	movs	r0, #10
 80019de:	f002 f839 	bl	8003a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	2102      	movs	r1, #2
 80019e6:	48a9      	ldr	r0, [pc, #676]	; (8001c8c <getSample+0x2fc>)
 80019e8:	f006 fae2 	bl	8007fb0 <HAL_GPIO_WritePin>
		sumADC_Left += adc3Value[_left];
 80019ec:	4ba8      	ldr	r3, [pc, #672]	; (8001c90 <getSample+0x300>)
 80019ee:	885b      	ldrh	r3, [r3, #2]
 80019f0:	461a      	mov	r2, r3
 80019f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f4:	4413      	add	r3, r2
 80019f6:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < 100; ++i)
 80019f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019fa:	3301      	adds	r3, #1
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80019fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a00:	2b63      	cmp	r3, #99	; 0x63
 8001a02:	ddeb      	ble.n	80019dc <getSample+0x4c>
	}
	adcLeft_1000 = sumADC_Left/100;
 8001a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a06:	4aa3      	ldr	r2, [pc, #652]	; (8001c94 <getSample+0x304>)
 8001a08:	fb82 1203 	smull	r1, r2, r2, r3
 8001a0c:	1152      	asrs	r2, r2, #5
 8001a0e:	17db      	asrs	r3, r3, #31
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4ba0      	ldr	r3, [pc, #640]	; (8001c98 <getSample+0x308>)
 8001a16:	801a      	strh	r2, [r3, #0]
	char snum_left1000[5];
	sprintf(snum_left1000, "%d", adcLeft_1000);
 8001a18:	4b9f      	ldr	r3, [pc, #636]	; (8001c98 <getSample+0x308>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	499e      	ldr	r1, [pc, #632]	; (8001c9c <getSample+0x30c>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00d f893 	bl	800eb50 <siprintf>
//	itoa(adcLeft_1000, snum_left1000, 5);
	ST7920_SendString(1,0, snum_left1000);
 8001a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2100      	movs	r1, #0
 8001a32:	2001      	movs	r0, #1
 8001a34:	f7ff f816 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu left 2000
	sumADC_Left = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	657b      	str	r3, [r7, #84]	; 0x54
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001a3c:	e009      	b.n	8001a52 <getSample+0xc2>
	{
		ST7920_SendString(0,4, "LEFT 2");
 8001a3e:	4a98      	ldr	r2, [pc, #608]	; (8001ca0 <getSample+0x310>)
 8001a40:	2104      	movs	r1, #4
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff f80e 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	488f      	ldr	r0, [pc, #572]	; (8001c8c <getSample+0x2fc>)
 8001a4e:	f006 faaf 	bl	8007fb0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a56:	488d      	ldr	r0, [pc, #564]	; (8001c8c <getSample+0x2fc>)
 8001a58:	f006 fa92 	bl	8007f80 <HAL_GPIO_ReadPin>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d0ed      	beq.n	8001a3e <getSample+0xae>
	}
	//đã gạt trái
	HAL_Delay(100);
 8001a62:	2064      	movs	r0, #100	; 0x64
 8001a64:	f001 fff6 	bl	8003a54 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a6c:	e010      	b.n	8001a90 <getSample+0x100>
	{
		HAL_Delay(10);
 8001a6e:	200a      	movs	r0, #10
 8001a70:	f001 fff0 	bl	8003a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	2102      	movs	r1, #2
 8001a78:	4884      	ldr	r0, [pc, #528]	; (8001c8c <getSample+0x2fc>)
 8001a7a:	f006 fa99 	bl	8007fb0 <HAL_GPIO_WritePin>
		sumADC_Left += adc3Value[_left];
 8001a7e:	4b84      	ldr	r3, [pc, #528]	; (8001c90 <getSample+0x300>)
 8001a80:	885b      	ldrh	r3, [r3, #2]
 8001a82:	461a      	mov	r2, r3
 8001a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a86:	4413      	add	r3, r2
 8001a88:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i < 100; ++i)
 8001a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a92:	2b63      	cmp	r3, #99	; 0x63
 8001a94:	ddeb      	ble.n	8001a6e <getSample+0xde>
	}
	adcLeft_2000 = sumADC_Left/100;
 8001a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a98:	4a7e      	ldr	r2, [pc, #504]	; (8001c94 <getSample+0x304>)
 8001a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9e:	1152      	asrs	r2, r2, #5
 8001aa0:	17db      	asrs	r3, r3, #31
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <getSample+0x314>)
 8001aa8:	801a      	strh	r2, [r3, #0]
	char snum_left2000[5];
	sprintf(snum_left2000, "%d", adcLeft_2000);
 8001aaa:	4b7e      	ldr	r3, [pc, #504]	; (8001ca4 <getSample+0x314>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	4979      	ldr	r1, [pc, #484]	; (8001c9c <getSample+0x30c>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f00d f84a 	bl	800eb50 <siprintf>
//	itoa(adcLeft_2000, snum_left2000, 5);
	ST7920_SendString(1,5, snum_left2000);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7fe ffcd 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu pitc 1000
	sumADC_Pitc = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	653b      	str	r3, [r7, #80]	; 0x50
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001ace:	e009      	b.n	8001ae4 <getSample+0x154>
	{
		ST7920_SendString(0,4, "PITC 1");
 8001ad0:	4a75      	ldr	r2, [pc, #468]	; (8001ca8 <getSample+0x318>)
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7fe ffc5 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2102      	movs	r1, #2
 8001ade:	486b      	ldr	r0, [pc, #428]	; (8001c8c <getSample+0x2fc>)
 8001ae0:	f006 fa66 	bl	8007fb0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae8:	4868      	ldr	r0, [pc, #416]	; (8001c8c <getSample+0x2fc>)
 8001aea:	f006 fa49 	bl	8007f80 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ed      	beq.n	8001ad0 <getSample+0x140>
	}
	//đã gạt phải
	HAL_Delay(100);
 8001af4:	2064      	movs	r0, #100	; 0x64
 8001af6:	f001 ffad 	bl	8003a54 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001afa:	2300      	movs	r3, #0
 8001afc:	643b      	str	r3, [r7, #64]	; 0x40
 8001afe:	e010      	b.n	8001b22 <getSample+0x192>
	{
		HAL_Delay(10);
 8001b00:	200a      	movs	r0, #10
 8001b02:	f001 ffa7 	bl	8003a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4860      	ldr	r0, [pc, #384]	; (8001c8c <getSample+0x2fc>)
 8001b0c:	f006 fa50 	bl	8007fb0 <HAL_GPIO_WritePin>
		sumADC_Pitc += adc3Value[_pitc];
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <getSample+0x300>)
 8001b12:	889b      	ldrh	r3, [r3, #4]
 8001b14:	461a      	mov	r2, r3
 8001b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b18:	4413      	add	r3, r2
 8001b1a:	653b      	str	r3, [r7, #80]	; 0x50
	for(int i = 0; i < 100; ++i)
 8001b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b1e:	3301      	adds	r3, #1
 8001b20:	643b      	str	r3, [r7, #64]	; 0x40
 8001b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b24:	2b63      	cmp	r3, #99	; 0x63
 8001b26:	ddeb      	ble.n	8001b00 <getSample+0x170>
	}
	adcPitc_1000 = sumADC_Pitc/100;
 8001b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b2a:	4a5a      	ldr	r2, [pc, #360]	; (8001c94 <getSample+0x304>)
 8001b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b30:	1152      	asrs	r2, r2, #5
 8001b32:	17db      	asrs	r3, r3, #31
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b5c      	ldr	r3, [pc, #368]	; (8001cac <getSample+0x31c>)
 8001b3a:	801a      	strh	r2, [r3, #0]
	char snum_pitc1000[5];
	sprintf(snum_pitc1000, "%d", adcPitc_1000);
 8001b3c:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <getSample+0x31c>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4955      	ldr	r1, [pc, #340]	; (8001c9c <getSample+0x30c>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00d f801 	bl	800eb50 <siprintf>
//	itoa(adcPitc_1000, snum_pitc1000, 5);
	ST7920_SendString(2,0, snum_pitc1000);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	461a      	mov	r2, r3
 8001b54:	2100      	movs	r1, #0
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7fe ff84 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu pitc 2000
	sumADC_Pitc = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	653b      	str	r3, [r7, #80]	; 0x50
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001b60:	e009      	b.n	8001b76 <getSample+0x1e6>
	{
		ST7920_SendString(0,4, "PITC 2");
 8001b62:	4a53      	ldr	r2, [pc, #332]	; (8001cb0 <getSample+0x320>)
 8001b64:	2104      	movs	r1, #4
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7fe ff7c 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4846      	ldr	r0, [pc, #280]	; (8001c8c <getSample+0x2fc>)
 8001b72:	f006 fa1d 	bl	8007fb0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7a:	4844      	ldr	r0, [pc, #272]	; (8001c8c <getSample+0x2fc>)
 8001b7c:	f006 fa00 	bl	8007f80 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d0ed      	beq.n	8001b62 <getSample+0x1d2>
	}
	//đã gạt trái
	HAL_Delay(100);
 8001b86:	2064      	movs	r0, #100	; 0x64
 8001b88:	f001 ff64 	bl	8003a54 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b90:	e010      	b.n	8001bb4 <getSample+0x224>
	{
		HAL_Delay(10);
 8001b92:	200a      	movs	r0, #10
 8001b94:	f001 ff5e 	bl	8003a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	483b      	ldr	r0, [pc, #236]	; (8001c8c <getSample+0x2fc>)
 8001b9e:	f006 fa07 	bl	8007fb0 <HAL_GPIO_WritePin>
		sumADC_Pitc += adc3Value[_pitc];
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <getSample+0x300>)
 8001ba4:	889b      	ldrh	r3, [r3, #4]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001baa:	4413      	add	r3, r2
 8001bac:	653b      	str	r3, [r7, #80]	; 0x50
	for(int i = 0; i < 100; ++i)
 8001bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb6:	2b63      	cmp	r3, #99	; 0x63
 8001bb8:	ddeb      	ble.n	8001b92 <getSample+0x202>
	}
	adcPitc_2000 = sumADC_Pitc/100;
 8001bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bbc:	4a35      	ldr	r2, [pc, #212]	; (8001c94 <getSample+0x304>)
 8001bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc2:	1152      	asrs	r2, r2, #5
 8001bc4:	17db      	asrs	r3, r3, #31
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <getSample+0x324>)
 8001bcc:	801a      	strh	r2, [r3, #0]
	char snum_pitc2000[5];
	sprintf(snum_pitc2000, "%d", adcPitc_2000);
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <getSample+0x324>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4930      	ldr	r1, [pc, #192]	; (8001c9c <getSample+0x30c>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00c ffb8 	bl	800eb50 <siprintf>
//	itoa(adcPitc_1000, snum_pitc2000, 5);
	ST7920_SendString(2,5, snum_pitc2000);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	461a      	mov	r2, r3
 8001be6:	2105      	movs	r1, #5
 8001be8:	2002      	movs	r0, #2
 8001bea:	f7fe ff3b 	bl	8000a64 <ST7920_SendString>

	//lấy mẫu rigt 1000
	sumADC_Rigt = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001bf2:	e009      	b.n	8001c08 <getSample+0x278>
	{
		ST7920_SendString(0,4, "RIGT 1");
 8001bf4:	4a30      	ldr	r2, [pc, #192]	; (8001cb8 <getSample+0x328>)
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7fe ff33 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2102      	movs	r1, #2
 8001c02:	4822      	ldr	r0, [pc, #136]	; (8001c8c <getSample+0x2fc>)
 8001c04:	f006 f9d4 	bl	8007fb0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//chờ gạt phải
 8001c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0c:	481f      	ldr	r0, [pc, #124]	; (8001c8c <getSample+0x2fc>)
 8001c0e:	f006 f9b7 	bl	8007f80 <HAL_GPIO_ReadPin>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ed      	beq.n	8001bf4 <getSample+0x264>
	}
	//đã gạt phải
	HAL_Delay(100);
 8001c18:	2064      	movs	r0, #100	; 0x64
 8001c1a:	f001 ff1b 	bl	8003a54 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c22:	e010      	b.n	8001c46 <getSample+0x2b6>
	{
		HAL_Delay(10);
 8001c24:	200a      	movs	r0, #10
 8001c26:	f001 ff15 	bl	8003a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4817      	ldr	r0, [pc, #92]	; (8001c8c <getSample+0x2fc>)
 8001c30:	f006 f9be 	bl	8007fb0 <HAL_GPIO_WritePin>
		sumADC_Rigt += adc3Value[_rigt];
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <getSample+0x300>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3c:	4413      	add	r3, r2
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i = 0; i < 100; ++i)
 8001c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c42:	3301      	adds	r3, #1
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c48:	2b63      	cmp	r3, #99	; 0x63
 8001c4a:	ddeb      	ble.n	8001c24 <getSample+0x294>
	}
	adcRigt_1000 = sumADC_Rigt/100;
 8001c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c4e:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <getSample+0x304>)
 8001c50:	fb82 1203 	smull	r1, r2, r2, r3
 8001c54:	1152      	asrs	r2, r2, #5
 8001c56:	17db      	asrs	r3, r3, #31
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <getSample+0x32c>)
 8001c5e:	801a      	strh	r2, [r3, #0]
	char snum_rigt1000[5];
	sprintf(snum_rigt1000, "%d", adcRigt_1000);
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <getSample+0x32c>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	490c      	ldr	r1, [pc, #48]	; (8001c9c <getSample+0x30c>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00c ff6f 	bl	800eb50 <siprintf>
//	itoa(adcRigt_1000, snum_rigt1000, 5);
	ST7920_SendString(3,0, snum_rigt1000);
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	461a      	mov	r2, r3
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	f7fe fef2 	bl	8000a64 <ST7920_SendString>


	//lấy mẫu rigt 2000
	sumADC_Rigt = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001c84:	e026      	b.n	8001cd4 <getSample+0x344>
 8001c86:	bf00      	nop
 8001c88:	080103b8 	.word	0x080103b8
 8001c8c:	58021000 	.word	0x58021000
 8001c90:	24000cc4 	.word	0x24000cc4
 8001c94:	51eb851f 	.word	0x51eb851f
 8001c98:	24000078 	.word	0x24000078
 8001c9c:	080103c0 	.word	0x080103c0
 8001ca0:	080103c4 	.word	0x080103c4
 8001ca4:	2400007a 	.word	0x2400007a
 8001ca8:	080103cc 	.word	0x080103cc
 8001cac:	2400007c 	.word	0x2400007c
 8001cb0:	080103d4 	.word	0x080103d4
 8001cb4:	2400007e 	.word	0x2400007e
 8001cb8:	080103dc 	.word	0x080103dc
 8001cbc:	24000080 	.word	0x24000080
	{
		ST7920_SendString(0,4, "RIGT 2");
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <getSample+0x3cc>)
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7fe fecd 	bl	8000a64 <ST7920_SendString>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4824      	ldr	r0, [pc, #144]	; (8001d60 <getSample+0x3d0>)
 8001cd0:	f006 f96e 	bl	8007fb0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 1)	//chờ gạt trái
 8001cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd8:	4821      	ldr	r0, [pc, #132]	; (8001d60 <getSample+0x3d0>)
 8001cda:	f006 f951 	bl	8007f80 <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d0ed      	beq.n	8001cc0 <getSample+0x330>
	}
	HAL_Delay(100);
 8001ce4:	2064      	movs	r0, #100	; 0x64
 8001ce6:	f001 feb5 	bl	8003a54 <HAL_Delay>
	for(int i = 0; i < 100; ++i)
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
 8001cee:	e010      	b.n	8001d12 <getSample+0x382>
	{
		HAL_Delay(10);
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	f001 feaf 	bl	8003a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4819      	ldr	r0, [pc, #100]	; (8001d60 <getSample+0x3d0>)
 8001cfc:	f006 f958 	bl	8007fb0 <HAL_GPIO_WritePin>
		sumADC_Rigt += adc3Value[_rigt];
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <getSample+0x3d4>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d08:	4413      	add	r3, r2
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i = 0; i < 100; ++i)
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	3301      	adds	r3, #1
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
 8001d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d14:	2b63      	cmp	r3, #99	; 0x63
 8001d16:	ddeb      	ble.n	8001cf0 <getSample+0x360>
	}
	adcRigt_2000 = sumADC_Rigt/100;
 8001d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <getSample+0x3d8>)
 8001d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d20:	1152      	asrs	r2, r2, #5
 8001d22:	17db      	asrs	r3, r3, #31
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <getSample+0x3dc>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	char snum_rigt2000[5];
	sprintf(snum_rigt2000, "%d", adcRigt_2000);
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <getSample+0x3dc>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <getSample+0x3e0>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00c ff0a 	bl	800eb50 <siprintf>
//	itoa(adcRigt_2000, snum_rigt2000, 5);
	ST7920_SendString(3,5, snum_rigt2000);
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2105      	movs	r1, #5
 8001d42:	2003      	movs	r0, #3
 8001d44:	f7fe fe8e 	bl	8000a64 <ST7920_SendString>

	HAL_Delay(500);
 8001d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4c:	f001 fe82 	bl	8003a54 <HAL_Delay>
	//ghi vào flash
	writeFLASH();
 8001d50:	f7ff fce8 	bl	8001724 <writeFLASH>
}
 8001d54:	bf00      	nop
 8001d56:	3758      	adds	r7, #88	; 0x58
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	080103e4 	.word	0x080103e4
 8001d60:	58021000 	.word	0x58021000
 8001d64:	24000cc4 	.word	0x24000cc4
 8001d68:	51eb851f 	.word	0x51eb851f
 8001d6c:	24000082 	.word	0x24000082
 8001d70:	080103c0 	.word	0x080103c0

08001d74 <solveDT50_Left>:

void solveDT50_Left(uint16_t a1, uint16_t a2)
{
 8001d74:	b490      	push	{r4, r7}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8001d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d90:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8001d92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d96:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d03d      	beq.n	8001e1a <solveDT50_Left+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8001d9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	fb02 f203 	mul.w	r2, r2, r3
 8001da6:	88bb      	ldrh	r3, [r7, #4]
 8001da8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001db2:	88f9      	ldrh	r1, [r7, #6]
 8001db4:	fb01 f103 	mul.w	r1, r1, r3
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001dbc:	fb00 f303 	mul.w	r3, r0, r3
 8001dc0:	1acb      	subs	r3, r1, r3
 8001dc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001dce:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8001dd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001de6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001dea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001dee:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001dfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e00:	ed87 7b02 	vstr	d7, [r7, #8]
    aLeft_Linear = x;	//
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <solveDT50_Left+0x130>)
 8001e06:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e0a:	e9c2 3400 	strd	r3, r4, [r2]
    bLeft_Linear = y;	//
 8001e0e:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <solveDT50_Left+0x134>)
 8001e10:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e14:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aLeft_Linear = x;	//
    bLeft_Linear = y;	//
  }
}
 8001e18:	e03f      	b.n	8001e9a <solveDT50_Left+0x126>
  else if ( a2 != 0 )
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d03c      	beq.n	8001e9a <solveDT50_Left+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8001e20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	fb02 f203 	mul.w	r2, r2, r3
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	1ad2      	subs	r2, r2, r3
 8001e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e34:	88b9      	ldrh	r1, [r7, #4]
 8001e36:	fb01 f103 	mul.w	r1, r1, r3
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001e3e:	fb00 f303 	mul.w	r3, r0, r3
 8001e42:	1acb      	subs	r3, r1, r3
 8001e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e50:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 8001e54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e60:	ee07 3a90 	vmov	s15, r3
 8001e64:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001e68:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e6c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e70:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001e74:	88bb      	ldrh	r3, [r7, #4]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e82:	ed87 7b06 	vstr	d7, [r7, #24]
    aLeft_Linear = x;	//
 8001e86:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <solveDT50_Left+0x130>)
 8001e88:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e8c:	e9c2 3400 	strd	r3, r4, [r2]
    bLeft_Linear = y;	//
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <solveDT50_Left+0x134>)
 8001e92:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001e96:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001e9a:	bf00      	nop
 8001e9c:	3730      	adds	r7, #48	; 0x30
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc90      	pop	{r4, r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	24000c70 	.word	0x24000c70
 8001ea8:	24000838 	.word	0x24000838

08001eac <solveDT50_Pitch>:

void solveDT50_Pitch(uint16_t a1, uint16_t a2)
{
 8001eac:	b490      	push	{r4, r7}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	80fb      	strh	r3, [r7, #6]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8001ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec8:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8001eca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ece:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03d      	beq.n	8001f52 <solveDT50_Pitch+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 8001ed6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	fb02 f203 	mul.w	r2, r2, r3
 8001ede:	88bb      	ldrh	r3, [r7, #4]
 8001ee0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	1ad2      	subs	r2, r2, r3
 8001ee8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001eea:	88f9      	ldrh	r1, [r7, #6]
 8001eec:	fb01 f103 	mul.w	r1, r1, r3
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001ef4:	fb00 f303 	mul.w	r3, r0, r3
 8001ef8:	1acb      	subs	r3, r1, r3
 8001efa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f06:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8001f0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001f1e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001f26:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f38:	ed87 7b02 	vstr	d7, [r7, #8]
    aPitch_Linear = x;	//
 8001f3c:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <solveDT50_Pitch+0x130>)
 8001f3e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f42:	e9c2 3400 	strd	r3, r4, [r2]
    bPitch_Linear = y;	//
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <solveDT50_Pitch+0x134>)
 8001f48:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f4c:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aPitch_Linear = x;	//
    bPitch_Linear = y;	//
  }
}
 8001f50:	e03f      	b.n	8001fd2 <solveDT50_Pitch+0x126>
  else if ( a2 != 0 )
 8001f52:	88bb      	ldrh	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d03c      	beq.n	8001fd2 <solveDT50_Pitch+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8001f58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f5a:	88ba      	ldrh	r2, [r7, #4]
 8001f5c:	fb02 f203 	mul.w	r2, r2, r3
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f6c:	88b9      	ldrh	r1, [r7, #4]
 8001f6e:	fb01 f103 	mul.w	r1, r1, r3
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001f76:	fb00 f303 	mul.w	r3, r0, r3
 8001f7a:	1acb      	subs	r3, r1, r3
 8001f7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f88:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 8001f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001fa0:	ed97 7b08 	vldr	d7, [r7, #32]
 8001fa4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fa8:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001fac:	88bb      	ldrh	r3, [r7, #4]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001fb6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fba:	ed87 7b06 	vstr	d7, [r7, #24]
    aPitch_Linear = x;	//
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <solveDT50_Pitch+0x130>)
 8001fc0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fc4:	e9c2 3400 	strd	r3, r4, [r2]
    bPitch_Linear = y;	//
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <solveDT50_Pitch+0x134>)
 8001fca:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001fce:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001fd2:	bf00      	nop
 8001fd4:	3730      	adds	r7, #48	; 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc90      	pop	{r4, r7}
 8001fda:	4770      	bx	lr
 8001fdc:	24000a98 	.word	0x24000a98
 8001fe0:	24000c80 	.word	0x24000c80

08001fe4 <solveDT50_Rigt>:

void solveDT50_Rigt(uint16_t a1, uint16_t a2)
{
 8001fe4:	b490      	push	{r4, r7}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	460a      	mov	r2, r1
 8001fee:	80fb      	strh	r3, [r7, #6]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	80bb      	strh	r3, [r7, #4]
  const uint16_t b1 = 1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  const uint16_t b2 = 1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint16_t c1 = 1000;
 8001ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002000:	857b      	strh	r3, [r7, #42]	; 0x2a
  const uint16_t c2 = 2000;
 8002002:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002006:	853b      	strh	r3, [r7, #40]	; 0x28
  if ( a1 != 0 )
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03d      	beq.n	800208a <solveDT50_Rigt+0xa6>
  {
    double y = (c2 * a1 - a2 * c1) / (b2 * a1 - a2 * b1) ;
 800200e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	fb02 f203 	mul.w	r2, r2, r3
 8002016:	88bb      	ldrh	r3, [r7, #4]
 8002018:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	1ad2      	subs	r2, r2, r3
 8002020:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002022:	88f9      	ldrh	r1, [r7, #6]
 8002024:	fb01 f103 	mul.w	r1, r1, r3
 8002028:	88bb      	ldrh	r3, [r7, #4]
 800202a:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800202c:	fb00 f303 	mul.w	r3, r0, r3
 8002030:	1acb      	subs	r3, r1, r3
 8002032:	fb92 f3f3 	sdiv	r3, r2, r3
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800203e:	ed87 7b04 	vstr	d7, [r7, #16]
    double x = (c1 - b1 * y) / a1 ;
 8002042:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800204c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002056:	ed97 7b04 	vldr	d7, [r7, #16]
 800205a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800205e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800206c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002070:	ed87 7b02 	vstr	d7, [r7, #8]
    aRigt_Linear = x;	//
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <solveDT50_Rigt+0x130>)
 8002076:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800207a:	e9c2 3400 	strd	r3, r4, [r2]
    bRigt_Linear = y;	//
 800207e:	4a26      	ldr	r2, [pc, #152]	; (8002118 <solveDT50_Rigt+0x134>)
 8002080:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002084:	e9c2 3400 	strd	r3, r4, [r2]
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
    double x = (c2 - b2 * y) / a2 ;
    aRigt_Linear = x;	//
    bRigt_Linear = y;	//
  }
}
 8002088:	e03f      	b.n	800210a <solveDT50_Rigt+0x126>
  else if ( a2 != 0 )
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d03c      	beq.n	800210a <solveDT50_Rigt+0x126>
    double y = (c1 * a2 - a1 * c2) / (b1 * a2 - a1 * b2) ;
 8002090:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002092:	88ba      	ldrh	r2, [r7, #4]
 8002094:	fb02 f203 	mul.w	r2, r2, r3
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	1ad2      	subs	r2, r2, r3
 80020a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020a4:	88b9      	ldrh	r1, [r7, #4]
 80020a6:	fb01 f103 	mul.w	r1, r1, r3
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80020ae:	fb00 f303 	mul.w	r3, r0, r3
 80020b2:	1acb      	subs	r3, r1, r3
 80020b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020c0:	ed87 7b08 	vstr	d7, [r7, #32]
    double x = (c2 - b2 * y) / a2 ;
 80020c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80020d8:	ed97 7b08 	vldr	d7, [r7, #32]
 80020dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80020e0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020f2:	ed87 7b06 	vstr	d7, [r7, #24]
    aRigt_Linear = x;	//
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <solveDT50_Rigt+0x130>)
 80020f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80020fc:	e9c2 3400 	strd	r3, r4, [r2]
    bRigt_Linear = y;	//
 8002100:	4a05      	ldr	r2, [pc, #20]	; (8002118 <solveDT50_Rigt+0x134>)
 8002102:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002106:	e9c2 3400 	strd	r3, r4, [r2]
}
 800210a:	bf00      	nop
 800210c:	3730      	adds	r7, #48	; 0x30
 800210e:	46bd      	mov	sp, r7
 8002110:	bc90      	pop	{r4, r7}
 8002112:	4770      	bx	lr
 8002114:	240003d0 	.word	0x240003d0
 8002118:	240001e0 	.word	0x240001e0

0800211c <cylinder_Init>:

#define putQ(PUTQ_STATUS) (HAL_GPIO_WritePin(putQ_GPIO_Port, putQ_Pin, PUTQ_STATUS))
#define putE(PUTE_STATUS) (HAL_GPIO_WritePin(putE_GPIO_Port, putE_Pin, PUTE_STATUS))

void cylinder_Init()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	gripperE(GRIPPERE_CLOSE);
 8002120:	2200      	movs	r2, #0
 8002122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002126:	4810      	ldr	r0, [pc, #64]	; (8002168 <cylinder_Init+0x4c>)
 8002128:	f005 ff42 	bl	8007fb0 <HAL_GPIO_WritePin>
	gripperQ(GRIPPERQ_CLOSE);
 800212c:	2200      	movs	r2, #0
 800212e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002132:	480d      	ldr	r0, [pc, #52]	; (8002168 <cylinder_Init+0x4c>)
 8002134:	f005 ff3c 	bl	8007fb0 <HAL_GPIO_WritePin>
	putQ(PUTQ_UP);
 8002138:	2201      	movs	r2, #1
 800213a:	2120      	movs	r1, #32
 800213c:	480b      	ldr	r0, [pc, #44]	; (800216c <cylinder_Init+0x50>)
 800213e:	f005 ff37 	bl	8007fb0 <HAL_GPIO_WritePin>
	putE(PUTE_UP);
 8002142:	2201      	movs	r2, #1
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	4809      	ldr	r0, [pc, #36]	; (800216c <cylinder_Init+0x50>)
 8002148:	f005 ff32 	bl	8007fb0 <HAL_GPIO_WritePin>
	passArm(PASSARM_UP);
 800214c:	2200      	movs	r2, #0
 800214e:	2104      	movs	r1, #4
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <cylinder_Init+0x4c>)
 8002152:	f005 ff2d 	bl	8007fb0 <HAL_GPIO_WritePin>
	passHand(PASSHAND_OPEN);
 8002156:	2201      	movs	r2, #1
 8002158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <cylinder_Init+0x4c>)
 800215e:	f005 ff27 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	58020000 	.word	0x58020000
 800216c:	58020400 	.word	0x58020400

08002170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002174:	f001 fbdc 	bl	8003930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002178:	f000 f8dc 	bl	8002334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800217c:	f000 fbc4 	bl	8002908 <MX_GPIO_Init>
  MX_DMA_Init();
 8002180:	f000 fb7a 	bl	8002878 <MX_DMA_Init>
  MX_ADC3_Init();
 8002184:	f000 f98c 	bl	80024a0 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8002188:	f000 fa92 	bl	80026b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800218c:	f000 fadc 	bl	8002748 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8002190:	f000 fa0a 	bl	80025a8 <MX_TIM7_Init>
  MX_UART7_Init();
 8002194:	f000 fa40 	bl	8002618 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8002198:	f000 fb22 	bl	80027e0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 800219c:	f7fe fa70 	bl	8000680 <delayUs_Init>
  peripheralUART_Init();
 80021a0:	f7fe fab4 	bl	800070c <peripheralUART_Init>
  peripheralADC_Init();
 80021a4:	f7fe fd28 	bl	8000bf8 <peripheralADC_Init>
  positionControl_Init();
 80021a8:	f7ff f95c 	bl	8001464 <positionControl_Init>
  cylinder_Init();
 80021ac:	f7ff ffb6 	bl	800211c <cylinder_Init>
  ST7920_Init();
 80021b0:	f7fe fce2 	bl	8000b78 <ST7920_Init>
  brake();
 80021b4:	f7ff f910 	bl	80013d8 <brake>
  compassReset();
 80021b8:	f7fe fb76 	bl	80008a8 <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2101      	movs	r1, #1
 80021c0:	4851      	ldr	r0, [pc, #324]	; (8002308 <main+0x198>)
 80021c2:	f005 fef5 	bl	8007fb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80021c6:	2201      	movs	r2, #1
 80021c8:	2102      	movs	r1, #2
 80021ca:	4850      	ldr	r0, [pc, #320]	; (800230c <main+0x19c>)
 80021cc:	f005 fef0 	bl	8007fb0 <HAL_GPIO_WritePin>
  if(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//nếu như gạt phải khởi động
 80021d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d4:	484d      	ldr	r0, [pc, #308]	; (800230c <main+0x19c>)
 80021d6:	f005 fed3 	bl	8007f80 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d137      	bne.n	8002250 <main+0xe0>
  {
	  ST7920_SendString(0,0, "SAMPLE:");
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <main+0x1a0>)
 80021e2:	2100      	movs	r1, #0
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7fe fc3d 	bl	8000a64 <ST7920_SendString>
	  getSample();
 80021ea:	f7ff fbd1 	bl	8001990 <getSample>
	  while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//ch�? gạt phải
 80021ee:	e00e      	b.n	800220e <main+0x9e>
	  {
		  ST7920_SendString(0,0, "PLEASE SWITCH");
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <main+0x1a4>)
 80021f2:	2100      	movs	r1, #0
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7fe fc35 	bl	8000a64 <ST7920_SendString>
		  HAL_Delay(1000);
 80021fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021fe:	f001 fc29 	bl	8003a54 <HAL_Delay>
		  ST7920_Clear();
 8002202:	f7fe fc71 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(1000);
 8002206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800220a:	f001 fc23 	bl	8003a54 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(flashSwitch_GPIO_Port, flashSwitch_Pin) == 0)	//ch�? gạt phải
 800220e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002212:	483e      	ldr	r0, [pc, #248]	; (800230c <main+0x19c>)
 8002214:	f005 feb4 	bl	8007f80 <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0e8      	beq.n	80021f0 <main+0x80>
	  }
	  while(1)
	  {
		  tracking++;
 800221e:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <main+0x1a8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a3c      	ldr	r2, [pc, #240]	; (8002318 <main+0x1a8>)
 8002226:	6013      	str	r3, [r2, #0]
		  ST7920_SendString(0,0, "PLEASE RESET");
 8002228:	4a3c      	ldr	r2, [pc, #240]	; (800231c <main+0x1ac>)
 800222a:	2100      	movs	r1, #0
 800222c:	2000      	movs	r0, #0
 800222e:	f7fe fc19 	bl	8000a64 <ST7920_SendString>
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8002232:	2102      	movs	r1, #2
 8002234:	4835      	ldr	r0, [pc, #212]	; (800230c <main+0x19c>)
 8002236:	f005 fed4 	bl	8007fe2 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 800223a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800223e:	f001 fc09 	bl	8003a54 <HAL_Delay>
		  ST7920_Clear();
 8002242:	f7fe fc51 	bl	8000ae8 <ST7920_Clear>
		  HAL_Delay(500);
 8002246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800224a:	f001 fc03 	bl	8003a54 <HAL_Delay>
		  tracking++;
 800224e:	e7e6      	b.n	800221e <main+0xae>
	  }
  }
  else	// nếu như gạt trái HAL_Read == 1
  {
	  ST7920_SendString(0,0, "FREE MODE");
 8002250:	4a33      	ldr	r2, [pc, #204]	; (8002320 <main+0x1b0>)
 8002252:	2100      	movs	r1, #0
 8002254:	2000      	movs	r0, #0
 8002256:	f7fe fc05 	bl	8000a64 <ST7920_SendString>
	  tracking = 148;
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <main+0x1a8>)
 800225c:	2294      	movs	r2, #148	; 0x94
 800225e:	601a      	str	r2, [r3, #0]
	  readFLASH();
 8002260:	f7ff fb04 	bl	800186c <readFLASH>
	  tracking = 150;
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <main+0x1a8>)
 8002266:	2296      	movs	r2, #150	; 0x96
 8002268:	601a      	str	r2, [r3, #0]
  }
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	2102      	movs	r1, #2
 800226e:	4827      	ldr	r0, [pc, #156]	; (800230c <main+0x19c>)
 8002270:	f005 fe9e 	bl	8007fb0 <HAL_GPIO_WritePin>
  HAL_Delay(INIT_TIME);
 8002274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002278:	f001 fbec 	bl	8003a54 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  startTime = HAL_GetTick();
 800227c:	f001 fbde 	bl	8003a3c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <main+0x1b4>)
 8002284:	601a      	str	r2, [r3, #0]

	  while(HAL_GetTick()- startTime <3000)
 8002286:	e006      	b.n	8002296 <main+0x126>
	  {
		  roR_Pit_Yaw_GoTo(1000, 1000, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800228e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002292:	f7ff f8b5 	bl	8001400 <roR_Pit_Yaw_GoTo>
	  while(HAL_GetTick()- startTime <3000)
 8002296:	f001 fbd1 	bl	8003a3c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <main+0x1b4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d9ee      	bls.n	8002288 <main+0x118>
	  }
	  while(1)
	  {
		  PIDyaw(compassData, -900);
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <main+0x1b8>)
 80022ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b0:	491e      	ldr	r1, [pc, #120]	; (800232c <main+0x1bc>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fda0 	bl	8000df8 <PIDyaw>
		  controlMotor1(yawPID);
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <main+0x1c0>)
 80022ba:	ed93 7b00 	vldr	d7, [r3]
 80022be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80022c2:	ee17 0a90 	vmov	r0, s15
 80022c6:	f7fe fca5 	bl	8000c14 <controlMotor1>
		  controlMotor2(yawPID);
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <main+0x1c0>)
 80022cc:	ed93 7b00 	vldr	d7, [r3]
 80022d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80022d4:	ee17 0a90 	vmov	r0, s15
 80022d8:	f7fe fcd8 	bl	8000c8c <controlMotor2>
		  controlMotor3(yawPID);
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <main+0x1c0>)
 80022de:	ed93 7b00 	vldr	d7, [r3]
 80022e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80022e6:	ee17 0a90 	vmov	r0, s15
 80022ea:	f7fe fd0b 	bl	8000d04 <controlMotor3>
		  controlMotor4(yawPID);
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <main+0x1c0>)
 80022f0:	ed93 7b00 	vldr	d7, [r3]
 80022f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80022f8:	ee17 0a90 	vmov	r0, s15
 80022fc:	f7fe fd3e 	bl	8000d7c <controlMotor4>
		  spinalCordTrans();
 8002300:	f7fe fb08 	bl	8000914 <spinalCordTrans>
		  PIDyaw(compassData, -900);
 8002304:	e7d1      	b.n	80022aa <main+0x13a>
 8002306:	bf00      	nop
 8002308:	58020400 	.word	0x58020400
 800230c:	58021000 	.word	0x58021000
 8002310:	080104c0 	.word	0x080104c0
 8002314:	080104c8 	.word	0x080104c8
 8002318:	24000b8c 	.word	0x24000b8c
 800231c:	080104d8 	.word	0x080104d8
 8002320:	080104e8 	.word	0x080104e8
 8002324:	24000d10 	.word	0x24000d10
 8002328:	240008e8 	.word	0x240008e8
 800232c:	fffffc7c 	.word	0xfffffc7c
 8002330:	24000bd0 	.word	0x24000bd0

08002334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0cc      	sub	sp, #304	; 0x130
 8002338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800233e:	224c      	movs	r2, #76	; 0x4c
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f00c fbfc 	bl	800eb40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002348:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800234c:	2220      	movs	r2, #32
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f00c fbf5 	bl	800eb40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4618      	mov	r0, r3
 800235c:	23bc      	movs	r3, #188	; 0xbc
 800235e:	461a      	mov	r2, r3
 8002360:	2100      	movs	r1, #0
 8002362:	f00c fbed 	bl	800eb40 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002366:	2002      	movs	r0, #2
 8002368:	f005 fe56 	bl	8008018 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <SystemClock_Config+0x164>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	4a48      	ldr	r2, [pc, #288]	; (8002498 <SystemClock_Config+0x164>)
 8002378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800237c:	6193      	str	r3, [r2, #24]
 800237e:	4b46      	ldr	r3, [pc, #280]	; (8002498 <SystemClock_Config+0x164>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	4b44      	ldr	r3, [pc, #272]	; (800249c <SystemClock_Config+0x168>)
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	4a43      	ldr	r2, [pc, #268]	; (800249c <SystemClock_Config+0x168>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <SystemClock_Config+0x168>)
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	f003 0201 	and.w	r2, r3, #1
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023a6:	bf00      	nop
 80023a8:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <SystemClock_Config+0x164>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b4:	d1f8      	bne.n	80023a8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023b6:	2302      	movs	r3, #2
 80023b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80023bc:	2301      	movs	r3, #1
 80023be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023c2:	2340      	movs	r3, #64	; 0x40
 80023c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023d4:	2304      	movs	r3, #4
 80023d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 80023da:	233c      	movs	r3, #60	; 0x3c
 80023dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80023e0:	2302      	movs	r3, #2
 80023e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023ec:	2302      	movs	r3, #2
 80023ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80023f2:	230c      	movs	r3, #12
 80023f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002404:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002408:	4618      	mov	r0, r3
 800240a:	f005 fe3f 	bl	800808c <HAL_RCC_OscConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002414:	f000 fbd8 	bl	8002bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002418:	233f      	movs	r3, #63	; 0x3f
 800241a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800241e:	2303      	movs	r3, #3
 8002420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800242a:	2308      	movs	r3, #8
 800242c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002430:	2340      	movs	r3, #64	; 0x40
 8002432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002436:	2340      	movs	r3, #64	; 0x40
 8002438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800243c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002440:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002444:	2340      	movs	r3, #64	; 0x40
 8002446:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800244a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800244e:	2104      	movs	r1, #4
 8002450:	4618      	mov	r0, r3
 8002452:	f006 f9f3 	bl	800883c <HAL_RCC_ClockConfig>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800245c:	f000 fbb4 	bl	8002bc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	2203      	movs	r2, #3
 8002466:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002468:	f107 0308 	add.w	r3, r7, #8
 800246c:	2200      	movs	r2, #0
 800246e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	2200      	movs	r2, #0
 8002476:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	4618      	mov	r0, r3
 800247e:	f006 fd61 	bl	8008f44 <HAL_RCCEx_PeriphCLKConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002488:	f000 fb9e 	bl	8002bc8 <Error_Handler>
  }
}
 800248c:	bf00      	nop
 800248e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	58024800 	.word	0x58024800
 800249c:	58000400 	.word	0x58000400

080024a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
 80024b4:	615a      	str	r2, [r3, #20]
 80024b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80024b8:	4b36      	ldr	r3, [pc, #216]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024ba:	4a37      	ldr	r2, [pc, #220]	; (8002598 <MX_ADC3_Init+0xf8>)
 80024bc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80024c6:	4b33      	ldr	r3, [pc, #204]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024c8:	2208      	movs	r2, #8
 80024ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024cc:	4b31      	ldr	r3, [pc, #196]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024d4:	2204      	movs	r2, #4
 80024d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024e6:	2203      	movs	r2, #3
 80024e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <MX_ADC3_Init+0xf4>)
 80024fe:	2203      	movs	r2, #3
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <MX_ADC3_Init+0xf4>)
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <MX_ADC3_Init+0xf4>)
 800250a:	2200      	movs	r2, #0
 800250c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <MX_ADC3_Init+0xf4>)
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002516:	481f      	ldr	r0, [pc, #124]	; (8002594 <MX_ADC3_Init+0xf4>)
 8002518:	f001 fcbc 	bl	8003e94 <HAL_ADC_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002522:	f000 fb51 	bl	8002bc8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <MX_ADC3_Init+0xfc>)
 8002528:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800252a:	2306      	movs	r3, #6
 800252c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800252e:	2306      	movs	r3, #6
 8002530:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002532:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002536:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002538:	2304      	movs	r3, #4
 800253a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4813      	ldr	r0, [pc, #76]	; (8002594 <MX_ADC3_Init+0xf4>)
 8002546:	f001 ff27 	bl	8004398 <HAL_ADC_ConfigChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8002550:	f000 fb3a 	bl	8002bc8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <MX_ADC3_Init+0x100>)
 8002556:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002558:	230c      	movs	r3, #12
 800255a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4619      	mov	r1, r3
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <MX_ADC3_Init+0xf4>)
 8002562:	f001 ff19 	bl	8004398 <HAL_ADC_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800256c:	f000 fb2c 	bl	8002bc8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <MX_ADC3_Init+0x104>)
 8002572:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002574:	2312      	movs	r3, #18
 8002576:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_ADC3_Init+0xf4>)
 800257e:	f001 ff0b 	bl	8004398 <HAL_ADC_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8002588:	f000 fb1e 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	240009b8 	.word	0x240009b8
 8002598:	58026000 	.word	0x58026000
 800259c:	04300002 	.word	0x04300002
 80025a0:	2a000400 	.word	0x2a000400
 80025a4:	2e300800 	.word	0x2e300800

080025a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <MX_TIM7_Init+0x68>)
 80025ba:	4a16      	ldr	r2, [pc, #88]	; (8002614 <MX_TIM7_Init+0x6c>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_TIM7_Init+0x68>)
 80025c0:	f640 125f 	movw	r2, #2399	; 0x95f
 80025c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MX_TIM7_Init+0x68>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <MX_TIM7_Init+0x68>)
 80025ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_TIM7_Init+0x68>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025da:	480d      	ldr	r0, [pc, #52]	; (8002610 <MX_TIM7_Init+0x68>)
 80025dc:	f008 fb66 	bl	800acac <HAL_TIM_Base_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80025e6:	f000 faef 	bl	8002bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <MX_TIM7_Init+0x68>)
 80025f8:	f008 fd90 	bl	800b11c <HAL_TIMEx_MasterConfigSynchronization>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002602:	f000 fae1 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	24000ccc 	.word	0x24000ccc
 8002614:	40001400 	.word	0x40001400

08002618 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <MX_UART7_Init+0x90>)
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <MX_UART7_Init+0x94>)
 8002620:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <MX_UART7_Init+0x90>)
 8002624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002628:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <MX_UART7_Init+0x90>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <MX_UART7_Init+0x90>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <MX_UART7_Init+0x90>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <MX_UART7_Init+0x90>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <MX_UART7_Init+0x90>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <MX_UART7_Init+0x90>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <MX_UART7_Init+0x90>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_UART7_Init+0x90>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <MX_UART7_Init+0x90>)
 800265c:	2200      	movs	r2, #0
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002660:	4811      	ldr	r0, [pc, #68]	; (80026a8 <MX_UART7_Init+0x90>)
 8002662:	f008 fe01 	bl	800b268 <HAL_UART_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800266c:	f000 faac 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002670:	2100      	movs	r1, #0
 8002672:	480d      	ldr	r0, [pc, #52]	; (80026a8 <MX_UART7_Init+0x90>)
 8002674:	f00c f955 	bl	800e922 <HAL_UARTEx_SetTxFifoThreshold>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800267e:	f000 faa3 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002682:	2100      	movs	r1, #0
 8002684:	4808      	ldr	r0, [pc, #32]	; (80026a8 <MX_UART7_Init+0x90>)
 8002686:	f00c f98a 	bl	800e99e <HAL_UARTEx_SetRxFifoThreshold>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002690:	f000 fa9a 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <MX_UART7_Init+0x90>)
 8002696:	f00c f90b 	bl	800e8b0 <HAL_UARTEx_DisableFifoMode>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80026a0:	f000 fa92 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	240001ec 	.word	0x240001ec
 80026ac:	40007800 	.word	0x40007800

080026b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <MX_USART1_UART_Init+0x94>)
 80026b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026d6:	220c      	movs	r2, #12
 80026d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f8:	4811      	ldr	r0, [pc, #68]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026fa:	f008 fdb5 	bl	800b268 <HAL_UART_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002704:	f000 fa60 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002708:	2100      	movs	r1, #0
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800270c:	f00c f909 	bl	800e922 <HAL_UARTEx_SetTxFifoThreshold>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002716:	f000 fa57 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800271a:	2100      	movs	r1, #0
 800271c:	4808      	ldr	r0, [pc, #32]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800271e:	f00c f93e 	bl	800e99e <HAL_UARTEx_SetRxFifoThreshold>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002728:	f000 fa4e 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800272c:	4804      	ldr	r0, [pc, #16]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800272e:	f00c f8bf 	bl	800e8b0 <HAL_UARTEx_DisableFifoMode>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002738:	f000 fa46 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	24000ac8 	.word	0x24000ac8
 8002744:	40011000 	.word	0x40011000

08002748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 800274e:	4a23      	ldr	r2, [pc, #140]	; (80027dc <MX_USART3_UART_Init+0x94>)
 8002750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 8002754:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 800276e:	220c      	movs	r2, #12
 8002770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 8002786:	2200      	movs	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002790:	4811      	ldr	r0, [pc, #68]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 8002792:	f008 fd69 	bl	800b268 <HAL_UART_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800279c:	f000 fa14 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027a0:	2100      	movs	r1, #0
 80027a2:	480d      	ldr	r0, [pc, #52]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 80027a4:	f00c f8bd 	bl	800e922 <HAL_UARTEx_SetTxFifoThreshold>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80027ae:	f000 fa0b 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b2:	2100      	movs	r1, #0
 80027b4:	4808      	ldr	r0, [pc, #32]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 80027b6:	f00c f8f2 	bl	800e99e <HAL_UARTEx_SetRxFifoThreshold>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80027c0:	f000 fa02 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027c4:	4804      	ldr	r0, [pc, #16]	; (80027d8 <MX_USART3_UART_Init+0x90>)
 80027c6:	f00c f873 	bl	800e8b0 <HAL_UARTEx_DisableFifoMode>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027d0:	f000 f9fa 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	24000344 	.word	0x24000344
 80027dc:	40004800 	.word	0x40004800

080027e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <MX_USART6_UART_Init+0x90>)
 80027e6:	4a23      	ldr	r2, [pc, #140]	; (8002874 <MX_USART6_UART_Init+0x94>)
 80027e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <MX_USART6_UART_Init+0x90>)
 80027ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <MX_USART6_UART_Init+0x90>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <MX_USART6_UART_Init+0x90>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027fe:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <MX_USART6_UART_Init+0x90>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <MX_USART6_UART_Init+0x90>)
 8002806:	220c      	movs	r2, #12
 8002808:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <MX_USART6_UART_Init+0x90>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <MX_USART6_UART_Init+0x90>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <MX_USART6_UART_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <MX_USART6_UART_Init+0x90>)
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <MX_USART6_UART_Init+0x90>)
 8002824:	2200      	movs	r2, #0
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002828:	4811      	ldr	r0, [pc, #68]	; (8002870 <MX_USART6_UART_Init+0x90>)
 800282a:	f008 fd1d 	bl	800b268 <HAL_UART_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002834:	f000 f9c8 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002838:	2100      	movs	r1, #0
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_USART6_UART_Init+0x90>)
 800283c:	f00c f871 	bl	800e922 <HAL_UARTEx_SetTxFifoThreshold>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002846:	f000 f9bf 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284a:	2100      	movs	r1, #0
 800284c:	4808      	ldr	r0, [pc, #32]	; (8002870 <MX_USART6_UART_Init+0x90>)
 800284e:	f00c f8a6 	bl	800e99e <HAL_UARTEx_SetRxFifoThreshold>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002858:	f000 f9b6 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800285c:	4804      	ldr	r0, [pc, #16]	; (8002870 <MX_USART6_UART_Init+0x90>)
 800285e:	f00c f827 	bl	800e8b0 <HAL_UARTEx_DisableFifoMode>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002868:	f000 f9ae 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	24000bdc 	.word	0x24000bdc
 8002874:	40011400 	.word	0x40011400

08002878 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <MX_DMA_Init+0x8c>)
 8002880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002884:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <MX_DMA_Init+0x8c>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_DMA_Init+0x8c>)
 8002890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <MX_DMA_Init+0x8c>)
 800289e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028a2:	4a18      	ldr	r2, [pc, #96]	; (8002904 <MX_DMA_Init+0x8c>)
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_DMA_Init+0x8c>)
 80028ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2100      	movs	r1, #0
 80028be:	200b      	movs	r0, #11
 80028c0:	f002 fb69 	bl	8004f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80028c4:	200b      	movs	r0, #11
 80028c6:	f002 fb80 	bl	8004fca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	200d      	movs	r0, #13
 80028d0:	f002 fb61 	bl	8004f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80028d4:	200d      	movs	r0, #13
 80028d6:	f002 fb78 	bl	8004fca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	200e      	movs	r0, #14
 80028e0:	f002 fb59 	bl	8004f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028e4:	200e      	movs	r0, #14
 80028e6:	f002 fb70 	bl	8004fca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	203a      	movs	r0, #58	; 0x3a
 80028f0:	f002 fb51 	bl	8004f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80028f4:	203a      	movs	r0, #58	; 0x3a
 80028f6:	f002 fb68 	bl	8004fca <HAL_NVIC_EnableIRQ>

}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	58024400 	.word	0x58024400

08002908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800291e:	4ba3      	ldr	r3, [pc, #652]	; (8002bac <MX_GPIO_Init+0x2a4>)
 8002920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002924:	4aa1      	ldr	r2, [pc, #644]	; (8002bac <MX_GPIO_Init+0x2a4>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292e:	4b9f      	ldr	r3, [pc, #636]	; (8002bac <MX_GPIO_Init+0x2a4>)
 8002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800293c:	4b9b      	ldr	r3, [pc, #620]	; (8002bac <MX_GPIO_Init+0x2a4>)
 800293e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002942:	4a9a      	ldr	r2, [pc, #616]	; (8002bac <MX_GPIO_Init+0x2a4>)
 8002944:	f043 0320 	orr.w	r3, r3, #32
 8002948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800294c:	4b97      	ldr	r3, [pc, #604]	; (8002bac <MX_GPIO_Init+0x2a4>)
 800294e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	4b94      	ldr	r3, [pc, #592]	; (8002bac <MX_GPIO_Init+0x2a4>)
 800295c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002960:	4a92      	ldr	r2, [pc, #584]	; (8002bac <MX_GPIO_Init+0x2a4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800296a:	4b90      	ldr	r3, [pc, #576]	; (8002bac <MX_GPIO_Init+0x2a4>)
 800296c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002978:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <MX_GPIO_Init+0x2a4>)
 800297a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297e:	4a8b      	ldr	r2, [pc, #556]	; (8002bac <MX_GPIO_Init+0x2a4>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002988:	4b88      	ldr	r3, [pc, #544]	; (8002bac <MX_GPIO_Init+0x2a4>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002996:	4b85      	ldr	r3, [pc, #532]	; (8002bac <MX_GPIO_Init+0x2a4>)
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299c:	4a83      	ldr	r2, [pc, #524]	; (8002bac <MX_GPIO_Init+0x2a4>)
 800299e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a6:	4b81      	ldr	r3, [pc, #516]	; (8002bac <MX_GPIO_Init+0x2a4>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029b4:	4b7d      	ldr	r3, [pc, #500]	; (8002bac <MX_GPIO_Init+0x2a4>)
 80029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ba:	4a7c      	ldr	r2, [pc, #496]	; (8002bac <MX_GPIO_Init+0x2a4>)
 80029bc:	f043 0310 	orr.w	r3, r3, #16
 80029c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c4:	4b79      	ldr	r3, [pc, #484]	; (8002bac <MX_GPIO_Init+0x2a4>)
 80029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <MX_GPIO_Init+0x2a4>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d8:	4a74      	ldr	r2, [pc, #464]	; (8002bac <MX_GPIO_Init+0x2a4>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e2:	4b72      	ldr	r3, [pc, #456]	; (8002bac <MX_GPIO_Init+0x2a4>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, passArm_Pin|gripperQ_Pin|gripperE_Pin|passHand_Pin, GPIO_PIN_RESET);
 80029f0:	2200      	movs	r2, #0
 80029f2:	f240 7104 	movw	r1, #1796	; 0x704
 80029f6:	486e      	ldr	r0, [pc, #440]	; (8002bb0 <MX_GPIO_Init+0x2a8>)
 80029f8:	f005 fada 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2110      	movs	r1, #16
 8002a00:	486c      	ldr	r0, [pc, #432]	; (8002bb4 <MX_GPIO_Init+0x2ac>)
 8002a02:	f005 fad5 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8002a06:	2200      	movs	r2, #0
 8002a08:	f242 01e7 	movw	r1, #8423	; 0x20e7
 8002a0c:	486a      	ldr	r0, [pc, #424]	; (8002bb8 <MX_GPIO_Init+0x2b0>)
 8002a0e:	f005 facf 	bl	8007fb0 <HAL_GPIO_WritePin>
                          |putQ_Pin|putE_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8002a12:	2200      	movs	r2, #0
 8002a14:	f643 717d 	movw	r1, #16253	; 0x3f7d
 8002a18:	4868      	ldr	r0, [pc, #416]	; (8002bbc <MX_GPIO_Init+0x2b4>)
 8002a1a:	f005 fac9 	bl	8007fb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|leftArmDir_Pin 
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2182      	movs	r1, #130	; 0x82
 8002a22:	4867      	ldr	r0, [pc, #412]	; (8002bc0 <MX_GPIO_Init+0x2b8>)
 8002a24:	f005 fac4 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 8002a2e:	4865      	ldr	r0, [pc, #404]	; (8002bc4 <MX_GPIO_Init+0x2bc>)
 8002a30:	f005 fabe 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : flashButton_Pin */
  GPIO_InitStruct.Pin = flashButton_Pin;
 8002a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(flashButton_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	485a      	ldr	r0, [pc, #360]	; (8002bb4 <MX_GPIO_Init+0x2ac>)
 8002a4a:	f005 f8e9 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 031c 	add.w	r3, r7, #28
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4853      	ldr	r0, [pc, #332]	; (8002bb0 <MX_GPIO_Init+0x2a8>)
 8002a62:	f005 f8dd 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : passArm_Pin gripperQ_Pin gripperE_Pin passHand_Pin */
  GPIO_InitStruct.Pin = passArm_Pin|gripperQ_Pin|gripperE_Pin|passHand_Pin;
 8002a66:	f240 7304 	movw	r3, #1796	; 0x704
 8002a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	484c      	ldr	r0, [pc, #304]	; (8002bb0 <MX_GPIO_Init+0x2a8>)
 8002a80:	f005 f8ce 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a84:	2310      	movs	r3, #16
 8002a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4846      	ldr	r0, [pc, #280]	; (8002bb4 <MX_GPIO_Init+0x2ac>)
 8002a9c:	f005 f8c0 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           putQ_Pin putE_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8002aa0:	f242 03e7 	movw	r3, #8423	; 0x20e7
 8002aa4:	61fb      	str	r3, [r7, #28]
                          |putQ_Pin|putE_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	f107 031c 	add.w	r3, r7, #28
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	483f      	ldr	r0, [pc, #252]	; (8002bb8 <MX_GPIO_Init+0x2b0>)
 8002aba:	f005 f8b1 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002abe:	230d      	movs	r3, #13
 8002ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4839      	ldr	r0, [pc, #228]	; (8002bbc <MX_GPIO_Init+0x2b4>)
 8002ad6:	f005 f8a3 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 031c 	add.w	r3, r7, #28
 8002aee:	4619      	mov	r1, r3
 8002af0:	4833      	ldr	r0, [pc, #204]	; (8002bc0 <MX_GPIO_Init+0x2b8>)
 8002af2:	f005 f895 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : flashSwitch_Pin */
  GPIO_InitStruct.Pin = flashSwitch_Pin;
 8002af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(flashSwitch_GPIO_Port, &GPIO_InitStruct);
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	4619      	mov	r1, r3
 8002b0a:	482d      	ldr	r0, [pc, #180]	; (8002bc0 <MX_GPIO_Init+0x2b8>)
 8002b0c:	f005 f888 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8002b10:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8002b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b16:	2301      	movs	r3, #1
 8002b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	4619      	mov	r1, r3
 8002b28:	4826      	ldr	r0, [pc, #152]	; (8002bc4 <MX_GPIO_Init+0x2bc>)
 8002b2a:	f005 f879 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b34:	2301      	movs	r3, #1
 8002b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	4619      	mov	r1, r3
 8002b46:	481f      	ldr	r0, [pc, #124]	; (8002bc4 <MX_GPIO_Init+0x2bc>)
 8002b48:	f005 f86a 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8002b4c:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8002b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b52:	2301      	movs	r3, #1
 8002b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b5e:	f107 031c 	add.w	r3, r7, #28
 8002b62:	4619      	mov	r1, r3
 8002b64:	4815      	ldr	r0, [pc, #84]	; (8002bbc <MX_GPIO_Init+0x2b4>)
 8002b66:	f005 f85b 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8002b6a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8002b6e:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b70:	2301      	movs	r3, #1
 8002b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b7c:	f107 031c 	add.w	r3, r7, #28
 8002b80:	4619      	mov	r1, r3
 8002b82:	480e      	ldr	r0, [pc, #56]	; (8002bbc <MX_GPIO_Init+0x2b4>)
 8002b84:	f005 f84c 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b94:	2303      	movs	r3, #3
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4808      	ldr	r0, [pc, #32]	; (8002bc0 <MX_GPIO_Init+0x2b8>)
 8002ba0:	f005 f83e 	bl	8007c20 <HAL_GPIO_Init>

}
 8002ba4:	bf00      	nop
 8002ba6:	3730      	adds	r7, #48	; 0x30
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	58020000 	.word	0x58020000
 8002bb4:	58020800 	.word	0x58020800
 8002bb8:	58020400 	.word	0x58020400
 8002bbc:	58021800 	.word	0x58021800
 8002bc0:	58021000 	.word	0x58021000
 8002bc4:	58020c00 	.word	0x58020c00

08002bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_MspInit+0x30>)
 8002be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002be4:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <HAL_MspInit+0x30>)
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_MspInit+0x30>)
 8002bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	58024400 	.word	0x58024400

08002c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <HAL_ADC_MspInit+0xec>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d15f      	bne.n	8002cee <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_ADC_MspInit+0xf0>)
 8002c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c34:	4a31      	ldr	r2, [pc, #196]	; (8002cfc <HAL_ADC_MspInit+0xf0>)
 8002c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <HAL_ADC_MspInit+0xf0>)
 8002c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_ADC_MspInit+0xf0>)
 8002c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c52:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_ADC_MspInit+0xf0>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_ADC_MspInit+0xf0>)
 8002c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4820      	ldr	r0, [pc, #128]	; (8002d00 <HAL_ADC_MspInit+0xf4>)
 8002c7e:	f004 ffcf 	bl	8007c20 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002c82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002c86:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002c8a:	f000 ff11 	bl	8003ab0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_ADC_MspInit+0xfc>)
 8002c92:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002c96:	2273      	movs	r2, #115	; 0x73
 8002c98:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cac:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002cb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cbc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002cd2:	480c      	ldr	r0, [pc, #48]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002cd4:	f002 f994 	bl	8005000 <HAL_DMA_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8002cde:	f7ff ff73 	bl	8002bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002ce6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ce8:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <HAL_ADC_MspInit+0xf8>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cee:	bf00      	nop
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	58026000 	.word	0x58026000
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	58020800 	.word	0x58020800
 8002d04:	24000850 	.word	0x24000850
 8002d08:	40020040 	.word	0x40020040

08002d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <HAL_TIM_Base_MspInit+0x48>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d116      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_TIM_Base_MspInit+0x4c>)
 8002d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d24:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <HAL_TIM_Base_MspInit+0x4c>)
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_TIM_Base_MspInit+0x4c>)
 8002d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2100      	movs	r1, #0
 8002d40:	2037      	movs	r0, #55	; 0x37
 8002d42:	f002 f928 	bl	8004f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d46:	2037      	movs	r0, #55	; 0x37
 8002d48:	f002 f93f 	bl	8004fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40001400 	.word	0x40001400
 8002d58:	58024400 	.word	0x58024400

08002d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b090      	sub	sp, #64	; 0x40
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a9a      	ldr	r2, [pc, #616]	; (8002fe4 <HAL_UART_MspInit+0x288>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d164      	bne.n	8002e48 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d7e:	4b9a      	ldr	r3, [pc, #616]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d84:	4a98      	ldr	r2, [pc, #608]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002d86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d8e:	4b96      	ldr	r3, [pc, #600]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d9c:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da2:	4a91      	ldr	r2, [pc, #580]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002da4:	f043 0320 	orr.w	r3, r3, #32
 8002da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dac:	4b8e      	ldr	r3, [pc, #568]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8002dba:	23c0      	movs	r3, #192	; 0xc0
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002dca:	2307      	movs	r3, #7
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4885      	ldr	r0, [pc, #532]	; (8002fec <HAL_UART_MspInit+0x290>)
 8002dd6:	f004 ff23 	bl	8007c20 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream0;
 8002dda:	4b85      	ldr	r3, [pc, #532]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002ddc:	4a85      	ldr	r2, [pc, #532]	; (8002ff4 <HAL_UART_MspInit+0x298>)
 8002dde:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002de0:	4b83      	ldr	r3, [pc, #524]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002de2:	224f      	movs	r2, #79	; 0x4f
 8002de4:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de6:	4b82      	ldr	r3, [pc, #520]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dec:	4b80      	ldr	r3, [pc, #512]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002df2:	4b7f      	ldr	r3, [pc, #508]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df8:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dfa:	4b7d      	ldr	r3, [pc, #500]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e00:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002e06:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e0e:	4b78      	ldr	r3, [pc, #480]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e14:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002e1a:	4875      	ldr	r0, [pc, #468]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002e1c:	f002 f8f0 	bl	8005000 <HAL_DMA_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002e26:	f7ff fecf 	bl	8002bc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a70      	ldr	r2, [pc, #448]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002e2e:	679a      	str	r2, [r3, #120]	; 0x78
 8002e30:	4a6f      	ldr	r2, [pc, #444]	; (8002ff0 <HAL_UART_MspInit+0x294>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2104      	movs	r1, #4
 8002e3a:	2052      	movs	r0, #82	; 0x52
 8002e3c:	f002 f8ab 	bl	8004f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002e40:	2052      	movs	r0, #82	; 0x52
 8002e42:	f002 f8c2 	bl	8004fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e46:	e120      	b.n	800308a <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	; (8002ff8 <HAL_UART_MspInit+0x29c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d165      	bne.n	8002f1e <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e58:	4a63      	ldr	r2, [pc, #396]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002e5a:	f043 0310 	orr.w	r3, r3, #16
 8002e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e62:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e70:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e76:	4a5c      	ldr	r2, [pc, #368]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8002e8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4854      	ldr	r0, [pc, #336]	; (8002ffc <HAL_UART_MspInit+0x2a0>)
 8002eac:	f004 feb8 	bl	8007c20 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8002eb0:	4b53      	ldr	r3, [pc, #332]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002eb2:	4a54      	ldr	r2, [pc, #336]	; (8003004 <HAL_UART_MspInit+0x2a8>)
 8002eb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002eb6:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002eb8:	2229      	movs	r2, #41	; 0x29
 8002eba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ebc:	4b50      	ldr	r3, [pc, #320]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec2:	4b4f      	ldr	r3, [pc, #316]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ece:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ed6:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002edc:	4b48      	ldr	r3, [pc, #288]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ee4:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eea:	4b45      	ldr	r3, [pc, #276]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ef0:	4843      	ldr	r0, [pc, #268]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002ef2:	f002 f885 	bl	8005000 <HAL_DMA_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8002efc:	f7ff fe64 	bl	8002bc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a3f      	ldr	r2, [pc, #252]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002f04:	679a      	str	r2, [r3, #120]	; 0x78
 8002f06:	4a3e      	ldr	r2, [pc, #248]	; (8003000 <HAL_UART_MspInit+0x2a4>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2101      	movs	r1, #1
 8002f10:	2025      	movs	r0, #37	; 0x25
 8002f12:	f002 f840 	bl	8004f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f16:	2025      	movs	r0, #37	; 0x25
 8002f18:	f002 f857 	bl	8004fca <HAL_NVIC_EnableIRQ>
}
 8002f1c:	e0b5      	b.n	800308a <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART3)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a39      	ldr	r2, [pc, #228]	; (8003008 <HAL_UART_MspInit+0x2ac>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d175      	bne.n	8003014 <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f28:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f2e:	4a2e      	ldr	r2, [pc, #184]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002f4e:	f043 0302 	orr.w	r3, r3, #2
 8002f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_UART_MspInit+0x28c>)
 8002f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8002f64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	2300      	movs	r3, #0
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f76:	2307      	movs	r3, #7
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f7e:	4619      	mov	r1, r3
 8002f80:	481e      	ldr	r0, [pc, #120]	; (8002ffc <HAL_UART_MspInit+0x2a0>)
 8002f82:	f004 fe4d 	bl	8007c20 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002f88:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_UART_MspInit+0x2b4>)
 8002f8a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002f8e:	222d      	movs	r2, #45	; 0x2d
 8002f90:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f98:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002fc6:	4811      	ldr	r0, [pc, #68]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fc8:	f002 f81a 	bl	8005000 <HAL_DMA_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8002fd2:	f7ff fdf9 	bl	8002bc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fda:	679a      	str	r2, [r3, #120]	; 0x78
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	; (800300c <HAL_UART_MspInit+0x2b0>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002fe2:	e052      	b.n	800308a <HAL_UART_MspInit+0x32e>
 8002fe4:	40007800 	.word	0x40007800
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	58021400 	.word	0x58021400
 8002ff0:	24000938 	.word	0x24000938
 8002ff4:	40020010 	.word	0x40020010
 8002ff8:	40011000 	.word	0x40011000
 8002ffc:	58020400 	.word	0x58020400
 8003000:	24000a20 	.word	0x24000a20
 8003004:	40020058 	.word	0x40020058
 8003008:	40004800 	.word	0x40004800
 800300c:	240002c0 	.word	0x240002c0
 8003010:	40020440 	.word	0x40020440
  else if(huart->Instance==USART6)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_UART_MspInit+0x338>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d135      	bne.n	800308a <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_UART_MspInit+0x33c>)
 8003020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_UART_MspInit+0x33c>)
 8003026:	f043 0320 	orr.w	r3, r3, #32
 800302a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_UART_MspInit+0x33c>)
 8003030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <HAL_UART_MspInit+0x33c>)
 800303e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003042:	4a15      	ldr	r2, [pc, #84]	; (8003098 <HAL_UART_MspInit+0x33c>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_UART_MspInit+0x33c>)
 800304e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 800305a:	23c0      	movs	r3, #192	; 0xc0
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	2300      	movs	r3, #0
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800306a:	2307      	movs	r3, #7
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800306e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003072:	4619      	mov	r1, r3
 8003074:	4809      	ldr	r0, [pc, #36]	; (800309c <HAL_UART_MspInit+0x340>)
 8003076:	f004 fdd3 	bl	8007c20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2102      	movs	r1, #2
 800307e:	2047      	movs	r0, #71	; 0x47
 8003080:	f001 ff89 	bl	8004f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003084:	2047      	movs	r0, #71	; 0x47
 8003086:	f001 ffa0 	bl	8004fca <HAL_NVIC_EnableIRQ>
}
 800308a:	bf00      	nop
 800308c:	3740      	adds	r7, #64	; 0x40
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40011400 	.word	0x40011400
 8003098:	58024400 	.word	0x58024400
 800309c:	58020800 	.word	0x58020800

080030a0 <kalmanFilter_Pitch>:
double P_Rigt = 2;         //covariance estimation (err_estimate)
double R_Rigt = 2;         //covariance of the observation noise (err_measure)
double Q_Rigt = 0.0009;    //process variance

double kalmanFilter_Pitch(double mea)
{
 80030a0:	b490      	push	{r4, r7}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Pitch = P_Pitch /(P_Pitch + R_Pitch);
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <kalmanFilter_Pitch+0xb4>)
 80030ac:	ed93 5b00 	vldr	d5, [r3]
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <kalmanFilter_Pitch+0xb4>)
 80030b2:	ed93 6b00 	vldr	d6, [r3]
 80030b6:	4b28      	ldr	r3, [pc, #160]	; (8003158 <kalmanFilter_Pitch+0xb8>)
 80030b8:	ed93 7b00 	vldr	d7, [r3]
 80030bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80030c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <kalmanFilter_Pitch+0xbc>)
 80030c6:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k] = x_Pitch[k-1] + kalmanGain_Pitch *(mea - x_Pitch[k-1]);
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <kalmanFilter_Pitch+0xc0>)
 80030cc:	ed93 6b00 	vldr	d6, [r3]
 80030d0:	4b23      	ldr	r3, [pc, #140]	; (8003160 <kalmanFilter_Pitch+0xc0>)
 80030d2:	ed93 7b00 	vldr	d7, [r3]
 80030d6:	ed97 5b00 	vldr	d5, [r7]
 80030da:	ee35 5b47 	vsub.f64	d5, d5, d7
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <kalmanFilter_Pitch+0xbc>)
 80030e0:	ed93 7b00 	vldr	d7, [r3]
 80030e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80030e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <kalmanFilter_Pitch+0xc0>)
 80030ee:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Pitch =  (1.0 - kalmanGain_Pitch) *P_Pitch + fabs(x_Pitch[k-1]-x_Pitch[k]) *Q_Pitch;
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <kalmanFilter_Pitch+0xbc>)
 80030f4:	ed93 7b00 	vldr	d7, [r3]
 80030f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80030fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <kalmanFilter_Pitch+0xb4>)
 8003102:	ed93 7b00 	vldr	d7, [r3]
 8003106:	ee26 6b07 	vmul.f64	d6, d6, d7
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <kalmanFilter_Pitch+0xc0>)
 800310c:	ed93 5b00 	vldr	d5, [r3]
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <kalmanFilter_Pitch+0xc0>)
 8003112:	ed93 7b02 	vldr	d7, [r3, #8]
 8003116:	ee35 7b47 	vsub.f64	d7, d5, d7
 800311a:	eeb0 5bc7 	vabs.f64	d5, d7
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <kalmanFilter_Pitch+0xc4>)
 8003120:	ed93 7b00 	vldr	d7, [r3]
 8003124:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003128:	ee36 7b07 	vadd.f64	d7, d6, d7
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <kalmanFilter_Pitch+0xb4>)
 800312e:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k-1] = x_Pitch[k];
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <kalmanFilter_Pitch+0xc0>)
 8003134:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003138:	4a09      	ldr	r2, [pc, #36]	; (8003160 <kalmanFilter_Pitch+0xc0>)
 800313a:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Pitch[k];
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <kalmanFilter_Pitch+0xc0>)
 8003140:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003144:	ec44 3b17 	vmov	d7, r3, r4
}
 8003148:	eeb0 0b47 	vmov.f64	d0, d7
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bc90      	pop	{r4, r7}
 8003152:	4770      	bx	lr
 8003154:	24000088 	.word	0x24000088
 8003158:	24000090 	.word	0x24000090
 800315c:	24000d18 	.word	0x24000d18
 8003160:	24000d48 	.word	0x24000d48
 8003164:	24000098 	.word	0x24000098

08003168 <kalmanFilter_Left>:

double kalmanFilter_Left(double mea)
{
 8003168:	b490      	push	{r4, r7}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Left = P_Left /(P_Left + R_Left);
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <kalmanFilter_Left+0xb4>)
 8003174:	ed93 5b00 	vldr	d5, [r3]
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <kalmanFilter_Left+0xb4>)
 800317a:	ed93 6b00 	vldr	d6, [r3]
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <kalmanFilter_Left+0xb8>)
 8003180:	ed93 7b00 	vldr	d7, [r3]
 8003184:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003188:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <kalmanFilter_Left+0xbc>)
 800318e:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k] = x_Left[k-1] + kalmanGain_Left *(mea - x_Left[k-1]);
 8003192:	4b25      	ldr	r3, [pc, #148]	; (8003228 <kalmanFilter_Left+0xc0>)
 8003194:	ed93 6b00 	vldr	d6, [r3]
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <kalmanFilter_Left+0xc0>)
 800319a:	ed93 7b00 	vldr	d7, [r3]
 800319e:	ed97 5b00 	vldr	d5, [r7]
 80031a2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <kalmanFilter_Left+0xbc>)
 80031a8:	ed93 7b00 	vldr	d7, [r3]
 80031ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031b4:	4b1c      	ldr	r3, [pc, #112]	; (8003228 <kalmanFilter_Left+0xc0>)
 80031b6:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Left =  (1.0 - kalmanGain_Left) *P_Left + fabs(x_Left[k-1]-x_Left[k]) *Q_Left;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <kalmanFilter_Left+0xbc>)
 80031bc:	ed93 7b00 	vldr	d7, [r3]
 80031c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80031c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <kalmanFilter_Left+0xb4>)
 80031ca:	ed93 7b00 	vldr	d7, [r3]
 80031ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <kalmanFilter_Left+0xc0>)
 80031d4:	ed93 5b00 	vldr	d5, [r3]
 80031d8:	4b13      	ldr	r3, [pc, #76]	; (8003228 <kalmanFilter_Left+0xc0>)
 80031da:	ed93 7b02 	vldr	d7, [r3, #8]
 80031de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80031e2:	eeb0 5bc7 	vabs.f64	d5, d7
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <kalmanFilter_Left+0xc4>)
 80031e8:	ed93 7b00 	vldr	d7, [r3]
 80031ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <kalmanFilter_Left+0xb4>)
 80031f6:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k-1] = x_Left[k];
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <kalmanFilter_Left+0xc0>)
 80031fc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <kalmanFilter_Left+0xc0>)
 8003202:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Left[k];
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <kalmanFilter_Left+0xc0>)
 8003208:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800320c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003210:	eeb0 0b47 	vmov.f64	d0, d7
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bc90      	pop	{r4, r7}
 800321a:	4770      	bx	lr
 800321c:	240000a0 	.word	0x240000a0
 8003220:	240000a8 	.word	0x240000a8
 8003224:	24000d60 	.word	0x24000d60
 8003228:	24000d68 	.word	0x24000d68
 800322c:	240000b0 	.word	0x240000b0

08003230 <kalmanFilter_Rigt>:

double kalmanFilter_Rigt(double mea)
{
 8003230:	b490      	push	{r4, r7}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Rigt = P_Rigt /(P_Rigt + R_Rigt);
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <kalmanFilter_Rigt+0xb4>)
 800323c:	ed93 5b00 	vldr	d5, [r3]
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <kalmanFilter_Rigt+0xb4>)
 8003242:	ed93 6b00 	vldr	d6, [r3]
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <kalmanFilter_Rigt+0xb8>)
 8003248:	ed93 7b00 	vldr	d7, [r3]
 800324c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003250:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <kalmanFilter_Rigt+0xbc>)
 8003256:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k] = x_Rigt[k-1] + kalmanGain_Rigt *(mea - x_Rigt[k-1]);
 800325a:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <kalmanFilter_Rigt+0xc0>)
 800325c:	ed93 6b00 	vldr	d6, [r3]
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <kalmanFilter_Rigt+0xc0>)
 8003262:	ed93 7b00 	vldr	d7, [r3]
 8003266:	ed97 5b00 	vldr	d5, [r7]
 800326a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800326e:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <kalmanFilter_Rigt+0xbc>)
 8003270:	ed93 7b00 	vldr	d7, [r3]
 8003274:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003278:	ee36 7b07 	vadd.f64	d7, d6, d7
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <kalmanFilter_Rigt+0xc0>)
 800327e:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Rigt =  (1.0 - kalmanGain_Rigt) *P_Rigt + fabs(x_Rigt[k-1]-x_Rigt[k]) *Q_Rigt;
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <kalmanFilter_Rigt+0xbc>)
 8003284:	ed93 7b00 	vldr	d7, [r3]
 8003288:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800328c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <kalmanFilter_Rigt+0xb4>)
 8003292:	ed93 7b00 	vldr	d7, [r3]
 8003296:	ee26 6b07 	vmul.f64	d6, d6, d7
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <kalmanFilter_Rigt+0xc0>)
 800329c:	ed93 5b00 	vldr	d5, [r3]
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <kalmanFilter_Rigt+0xc0>)
 80032a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80032a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80032aa:	eeb0 5bc7 	vabs.f64	d5, d7
 80032ae:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <kalmanFilter_Rigt+0xc4>)
 80032b0:	ed93 7b00 	vldr	d7, [r3]
 80032b4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <kalmanFilter_Rigt+0xb4>)
 80032be:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k-1] = x_Rigt[k];
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <kalmanFilter_Rigt+0xc0>)
 80032c4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80032c8:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <kalmanFilter_Rigt+0xc0>)
 80032ca:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Rigt[k];
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <kalmanFilter_Rigt+0xc0>)
 80032d0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80032d4:	ec44 3b17 	vmov	d7, r3, r4
}
 80032d8:	eeb0 0b47 	vmov.f64	d0, d7
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc90      	pop	{r4, r7}
 80032e2:	4770      	bx	lr
 80032e4:	240000b8 	.word	0x240000b8
 80032e8:	240000c0 	.word	0x240000c0
 80032ec:	24000d58 	.word	0x24000d58
 80032f0:	24000d78 	.word	0x24000d78
 80032f4:	240000c8 	.word	0x240000c8

080032f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800330a:	e7fe      	b.n	800330a <HardFault_Handler+0x4>

0800330c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <MemManage_Handler+0x4>

08003312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003316:	e7fe      	b.n	8003316 <BusFault_Handler+0x4>

08003318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800331c:	e7fe      	b.n	800331c <UsageFault_Handler+0x4>

0800331e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <SysTick_Handler+0x2c>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <SysTick_Handler+0x2c>)
 8003356:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <SysTick_Handler+0x2c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d904      	bls.n	800336a <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <SysTick_Handler+0x2c>)
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8003366:	f7fd fab5 	bl	80008d4 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336a:	f000 fb53 	bl	8003a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	24000ab0 	.word	0x24000ab0

08003378 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <DMA1_Stream0_IRQHandler+0x10>)
 800337e:	f002 fe49 	bl	8006014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	24000938 	.word	0x24000938

0800338c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	rigtRawDistance = aRigt_Linear*adc3Value[0] + bRigt_Linear;
 8003390:	4b30      	ldr	r3, [pc, #192]	; (8003454 <DMA1_Stream2_IRQHandler+0xc8>)
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <DMA1_Stream2_IRQHandler+0xcc>)
 800339e:	ed93 7b00 	vldr	d7, [r3]
 80033a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <DMA1_Stream2_IRQHandler+0xd0>)
 80033a8:	ed93 7b00 	vldr	d7, [r3]
 80033ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033b0:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <DMA1_Stream2_IRQHandler+0xd4>)
 80033b2:	ed83 7b00 	vstr	d7, [r3]
	leftRawDistance = aLeft_Linear*adc3Value[1] + bLeft_Linear;
 80033b6:	4b27      	ldr	r3, [pc, #156]	; (8003454 <DMA1_Stream2_IRQHandler+0xc8>)
 80033b8:	885b      	ldrh	r3, [r3, #2]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <DMA1_Stream2_IRQHandler+0xd8>)
 80033c4:	ed93 7b00 	vldr	d7, [r3]
 80033c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <DMA1_Stream2_IRQHandler+0xdc>)
 80033ce:	ed93 7b00 	vldr	d7, [r3]
 80033d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033d6:	4b25      	ldr	r3, [pc, #148]	; (800346c <DMA1_Stream2_IRQHandler+0xe0>)
 80033d8:	ed83 7b00 	vstr	d7, [r3]
	pitchRawDistance = aPitch_Linear*adc3Value[2] + bPitch_Linear;
 80033dc:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <DMA1_Stream2_IRQHandler+0xc8>)
 80033de:	889b      	ldrh	r3, [r3, #4]
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80033e8:	4b21      	ldr	r3, [pc, #132]	; (8003470 <DMA1_Stream2_IRQHandler+0xe4>)
 80033ea:	ed93 7b00 	vldr	d7, [r3]
 80033ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <DMA1_Stream2_IRQHandler+0xe8>)
 80033f4:	ed93 7b00 	vldr	d7, [r3]
 80033f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <DMA1_Stream2_IRQHandler+0xec>)
 80033fe:	ed83 7b00 	vstr	d7, [r3]
	rigtDistance = kalmanFilter_Rigt(rigtRawDistance);
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <DMA1_Stream2_IRQHandler+0xd4>)
 8003404:	ed93 7b00 	vldr	d7, [r3]
 8003408:	eeb0 0b47 	vmov.f64	d0, d7
 800340c:	f7ff ff10 	bl	8003230 <kalmanFilter_Rigt>
 8003410:	eeb0 7b40 	vmov.f64	d7, d0
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <DMA1_Stream2_IRQHandler+0xf0>)
 8003416:	ed83 7b00 	vstr	d7, [r3]
	pitchDistance = kalmanFilter_Pitch(pitchRawDistance);
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <DMA1_Stream2_IRQHandler+0xec>)
 800341c:	ed93 7b00 	vldr	d7, [r3]
 8003420:	eeb0 0b47 	vmov.f64	d0, d7
 8003424:	f7ff fe3c 	bl	80030a0 <kalmanFilter_Pitch>
 8003428:	eeb0 7b40 	vmov.f64	d7, d0
 800342c:	4b14      	ldr	r3, [pc, #80]	; (8003480 <DMA1_Stream2_IRQHandler+0xf4>)
 800342e:	ed83 7b00 	vstr	d7, [r3]
	leftDistance = kalmanFilter_Left(leftRawDistance);
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <DMA1_Stream2_IRQHandler+0xe0>)
 8003434:	ed93 7b00 	vldr	d7, [r3]
 8003438:	eeb0 0b47 	vmov.f64	d0, d7
 800343c:	f7ff fe94 	bl	8003168 <kalmanFilter_Left>
 8003440:	eeb0 7b40 	vmov.f64	d7, d0
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <DMA1_Stream2_IRQHandler+0xf8>)
 8003446:	ed83 7b00 	vstr	d7, [r3]

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800344a:	480f      	ldr	r0, [pc, #60]	; (8003488 <DMA1_Stream2_IRQHandler+0xfc>)
 800344c:	f002 fde2 	bl	8006014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	24000cc4 	.word	0x24000cc4
 8003458:	240003d0 	.word	0x240003d0
 800345c:	240001e0 	.word	0x240001e0
 8003460:	240002b8 	.word	0x240002b8
 8003464:	24000c70 	.word	0x24000c70
 8003468:	24000838 	.word	0x24000838
 800346c:	240001d0 	.word	0x240001d0
 8003470:	24000a98 	.word	0x24000a98
 8003474:	24000c80 	.word	0x24000c80
 8003478:	24000d38 	.word	0x24000d38
 800347c:	24000928 	.word	0x24000928
 8003480:	24000cb8 	.word	0x24000cb8
 8003484:	24000b78 	.word	0x24000b78
 8003488:	24000850 	.word	0x24000850

0800348c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <DMA1_Stream3_IRQHandler+0x24>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	b21a      	sxth	r2, r3
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <DMA1_Stream3_IRQHandler+0x24>)
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	b21b      	sxth	r3, r3
 800349e:	4313      	orrs	r3, r2
 80034a0:	b21a      	sxth	r2, r3
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <DMA1_Stream3_IRQHandler+0x28>)
 80034a4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034a6:	4804      	ldr	r0, [pc, #16]	; (80034b8 <DMA1_Stream3_IRQHandler+0x2c>)
 80034a8:	f002 fdb4 	bl	8006014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	24000810 	.word	0x24000810
 80034b4:	240008e8 	.word	0x240008e8
 80034b8:	24000a20 	.word	0x24000a20

080034bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <USART1_IRQHandler+0x10>)
 80034c2:	f008 f99b 	bl	800b7fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	24000ac8 	.word	0x24000ac8

080034d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034d4:	4802      	ldr	r0, [pc, #8]	; (80034e0 <TIM7_IRQHandler+0x10>)
 80034d6:	f007 fc3f 	bl	800ad58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	24000ccc 	.word	0x24000ccc

080034e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 80034e8:	4b8d      	ldr	r3, [pc, #564]	; (8003720 <DMA2_Stream2_IRQHandler+0x23c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	f040 80ff 	bne.w	80036f0 <DMA2_Stream2_IRQHandler+0x20c>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 80034f2:	4b8c      	ldr	r3, [pc, #560]	; (8003724 <DMA2_Stream2_IRQHandler+0x240>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	b2d1      	uxtb	r1, r2
 80034fa:	4a8a      	ldr	r2, [pc, #552]	; (8003724 <DMA2_Stream2_IRQHandler+0x240>)
 80034fc:	7011      	strb	r1, [r2, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	4b89      	ldr	r3, [pc, #548]	; (8003728 <DMA2_Stream2_IRQHandler+0x244>)
 8003502:	7819      	ldrb	r1, [r3, #0]
 8003504:	4b89      	ldr	r3, [pc, #548]	; (800372c <DMA2_Stream2_IRQHandler+0x248>)
 8003506:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8003508:	4b86      	ldr	r3, [pc, #536]	; (8003724 <DMA2_Stream2_IRQHandler+0x240>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b05      	cmp	r3, #5
 800350e:	f240 80ef 	bls.w	80036f0 <DMA2_Stream2_IRQHandler+0x20c>
		{
			PS2DataIndex = 0;
 8003512:	4b84      	ldr	r3, [pc, #528]	; (8003724 <DMA2_Stream2_IRQHandler+0x240>)
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8003518:	4b81      	ldr	r3, [pc, #516]	; (8003720 <DMA2_Stream2_IRQHandler+0x23c>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 800351e:	4b83      	ldr	r3, [pc, #524]	; (800372c <DMA2_Stream2_IRQHandler+0x248>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	b21a      	sxth	r2, r3
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <DMA2_Stream2_IRQHandler+0x248>)
 8003528:	785b      	ldrb	r3, [r3, #1]
 800352a:	b21b      	sxth	r3, r3
 800352c:	4313      	orrs	r3, r2
 800352e:	b21a      	sxth	r2, r3
 8003530:	4b7f      	ldr	r3, [pc, #508]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 8003532:	801a      	strh	r2, [r3, #0]
			joyRigtHor = PS2Data[2] - joyRigtMidHor;
 8003534:	4b7d      	ldr	r3, [pc, #500]	; (800372c <DMA2_Stream2_IRQHandler+0x248>)
 8003536:	789b      	ldrb	r3, [r3, #2]
 8003538:	b29a      	uxth	r2, r3
 800353a:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <DMA2_Stream2_IRQHandler+0x250>)
 800353c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003540:	b29b      	uxth	r3, r3
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	b29b      	uxth	r3, r3
 8003546:	b21a      	sxth	r2, r3
 8003548:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <DMA2_Stream2_IRQHandler+0x254>)
 800354a:	801a      	strh	r2, [r3, #0]
			joyRigtVer = PS2Data[3] - joyRigtMidVer;
 800354c:	4b77      	ldr	r3, [pc, #476]	; (800372c <DMA2_Stream2_IRQHandler+0x248>)
 800354e:	78db      	ldrb	r3, [r3, #3]
 8003550:	b29a      	uxth	r2, r3
 8003552:	4b7a      	ldr	r3, [pc, #488]	; (800373c <DMA2_Stream2_IRQHandler+0x258>)
 8003554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003558:	b29b      	uxth	r3, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b29b      	uxth	r3, r3
 800355e:	b21a      	sxth	r2, r3
 8003560:	4b77      	ldr	r3, [pc, #476]	; (8003740 <DMA2_Stream2_IRQHandler+0x25c>)
 8003562:	801a      	strh	r2, [r3, #0]
			joyLeftHor = PS2Data[4] - joyLeftMidHor;
 8003564:	4b71      	ldr	r3, [pc, #452]	; (800372c <DMA2_Stream2_IRQHandler+0x248>)
 8003566:	791b      	ldrb	r3, [r3, #4]
 8003568:	b29a      	uxth	r2, r3
 800356a:	4b76      	ldr	r3, [pc, #472]	; (8003744 <DMA2_Stream2_IRQHandler+0x260>)
 800356c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003570:	b29b      	uxth	r3, r3
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	b29b      	uxth	r3, r3
 8003576:	b21a      	sxth	r2, r3
 8003578:	4b73      	ldr	r3, [pc, #460]	; (8003748 <DMA2_Stream2_IRQHandler+0x264>)
 800357a:	801a      	strh	r2, [r3, #0]
			joyLeftVer = PS2Data[5] - joyLeftMidVer;
 800357c:	4b6b      	ldr	r3, [pc, #428]	; (800372c <DMA2_Stream2_IRQHandler+0x248>)
 800357e:	795b      	ldrb	r3, [r3, #5]
 8003580:	b29a      	uxth	r2, r3
 8003582:	4b72      	ldr	r3, [pc, #456]	; (800374c <DMA2_Stream2_IRQHandler+0x268>)
 8003584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003588:	b29b      	uxth	r3, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	b29b      	uxth	r3, r3
 800358e:	b21a      	sxth	r2, r3
 8003590:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <DMA2_Stream2_IRQHandler+0x26c>)
 8003592:	801a      	strh	r2, [r3, #0]
			btn_leftLeft = (PS2Button >> 15) & 1U;
 8003594:	4b66      	ldr	r3, [pc, #408]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 8003596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359a:	13db      	asrs	r3, r3, #15
 800359c:	b21b      	sxth	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <DMA2_Stream2_IRQHandler+0x270>)
 80035a8:	701a      	strb	r2, [r3, #0]
			btn_leftDown = (PS2Button >> 14) & 1U;
 80035aa:	4b61      	ldr	r3, [pc, #388]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 80035ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b0:	139b      	asrs	r3, r3, #14
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <DMA2_Stream2_IRQHandler+0x274>)
 80035be:	701a      	strb	r2, [r3, #0]
			btn_leftRigt = (PS2Button >> 13) & 1U;
 80035c0:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 80035c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c6:	135b      	asrs	r3, r3, #13
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b62      	ldr	r3, [pc, #392]	; (800375c <DMA2_Stream2_IRQHandler+0x278>)
 80035d4:	701a      	strb	r2, [r3, #0]
			btn_leftUp   = (PS2Button >> 12) & 1U;
 80035d6:	4b56      	ldr	r3, [pc, #344]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 80035d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035dc:	131b      	asrs	r3, r3, #12
 80035de:	b21b      	sxth	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <DMA2_Stream2_IRQHandler+0x27c>)
 80035ea:	701a      	strb	r2, [r3, #0]
			btn_Sta		 = (PS2Button >> 11) & 1U;
 80035ec:	4b50      	ldr	r3, [pc, #320]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 80035ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f2:	12db      	asrs	r3, r3, #11
 80035f4:	b21b      	sxth	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b59      	ldr	r3, [pc, #356]	; (8003764 <DMA2_Stream2_IRQHandler+0x280>)
 8003600:	701a      	strb	r2, [r3, #0]
			btn_joyRigt  = (PS2Button >> 10) & 1U;
 8003602:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 8003604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003608:	129b      	asrs	r3, r3, #10
 800360a:	b21b      	sxth	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b54      	ldr	r3, [pc, #336]	; (8003768 <DMA2_Stream2_IRQHandler+0x284>)
 8003616:	701a      	strb	r2, [r3, #0]
			btn_joyLeft  = (PS2Button >>  9) & 1U;
 8003618:	4b45      	ldr	r3, [pc, #276]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 800361a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361e:	125b      	asrs	r3, r3, #9
 8003620:	b21b      	sxth	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b50      	ldr	r3, [pc, #320]	; (800376c <DMA2_Stream2_IRQHandler+0x288>)
 800362c:	701a      	strb	r2, [r3, #0]
			btn_Sel  	 = (PS2Button >>  8) & 1U;
 800362e:	4b40      	ldr	r3, [pc, #256]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 8003630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003634:	121b      	asrs	r3, r3, #8
 8003636:	b21b      	sxth	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <DMA2_Stream2_IRQHandler+0x28c>)
 8003642:	701a      	strb	r2, [r3, #0]
			btn_A  		 = (PS2Button >>  7) & 1U;
 8003644:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 8003646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364a:	11db      	asrs	r3, r3, #7
 800364c:	b21b      	sxth	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <DMA2_Stream2_IRQHandler+0x290>)
 8003658:	701a      	strb	r2, [r3, #0]
			btn_X  		 = (PS2Button >>  6) & 1U;
 800365a:	4b35      	ldr	r3, [pc, #212]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 800365c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003660:	119b      	asrs	r3, r3, #6
 8003662:	b21b      	sxth	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b42      	ldr	r3, [pc, #264]	; (8003778 <DMA2_Stream2_IRQHandler+0x294>)
 800366e:	701a      	strb	r2, [r3, #0]
			btn_D  		 = (PS2Button >>  5) & 1U;
 8003670:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 8003672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003676:	115b      	asrs	r3, r3, #5
 8003678:	b21b      	sxth	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b3e      	ldr	r3, [pc, #248]	; (800377c <DMA2_Stream2_IRQHandler+0x298>)
 8003684:	701a      	strb	r2, [r3, #0]
			btn_W  		 = (PS2Button >>  4) & 1U;
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 8003688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800368c:	111b      	asrs	r3, r3, #4
 800368e:	b21b      	sxth	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b39      	ldr	r3, [pc, #228]	; (8003780 <DMA2_Stream2_IRQHandler+0x29c>)
 800369a:	701a      	strb	r2, [r3, #0]
			btn_E  		 = (PS2Button >>  3) & 1U;
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 800369e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a2:	10db      	asrs	r3, r3, #3
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b35      	ldr	r3, [pc, #212]	; (8003784 <DMA2_Stream2_IRQHandler+0x2a0>)
 80036b0:	701a      	strb	r2, [r3, #0]
			btn_Q  		 = (PS2Button >>  2) & 1U;
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 80036b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b8:	109b      	asrs	r3, r3, #2
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b30      	ldr	r3, [pc, #192]	; (8003788 <DMA2_Stream2_IRQHandler+0x2a4>)
 80036c6:	701a      	strb	r2, [r3, #0]
			btn_C  		 = (PS2Button >>  1) & 1U;
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 80036ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ce:	105b      	asrs	r3, r3, #1
 80036d0:	b21b      	sxth	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b2c      	ldr	r3, [pc, #176]	; (800378c <DMA2_Stream2_IRQHandler+0x2a8>)
 80036dc:	701a      	strb	r2, [r3, #0]
			btn_Z  		 = (PS2Button >>  0) & 1U;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <DMA2_Stream2_IRQHandler+0x24c>)
 80036e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b28      	ldr	r3, [pc, #160]	; (8003790 <DMA2_Stream2_IRQHandler+0x2ac>)
 80036ee:	701a      	strb	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <DMA2_Stream2_IRQHandler+0x244>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2baa      	cmp	r3, #170	; 0xaa
 80036f6:	d106      	bne.n	8003706 <DMA2_Stream2_IRQHandler+0x222>
		PS2CheckbyteCount++;
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <DMA2_Stream2_IRQHandler+0x23c>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <DMA2_Stream2_IRQHandler+0x23c>)
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e006      	b.n	8003714 <DMA2_Stream2_IRQHandler+0x230>
	else
		if(PS2CheckbyteCount != 4)
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <DMA2_Stream2_IRQHandler+0x23c>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b04      	cmp	r3, #4
 800370c:	d002      	beq.n	8003714 <DMA2_Stream2_IRQHandler+0x230>
			PS2CheckbyteCount = 0;
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <DMA2_Stream2_IRQHandler+0x23c>)
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003714:	481f      	ldr	r0, [pc, #124]	; (8003794 <DMA2_Stream2_IRQHandler+0x2b0>)
 8003716:	f002 fc7d 	bl	8006014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	24000164 	.word	0x24000164
 8003724:	240009b0 	.word	0x240009b0
 8003728:	24000c68 	.word	0x24000c68
 800372c:	24000808 	.word	0x24000808
 8003730:	24000b6c 	.word	0x24000b6c
 8003734:	24000010 	.word	0x24000010
 8003738:	24000400 	.word	0x24000400
 800373c:	2400000e 	.word	0x2400000e
 8003740:	24000ba4 	.word	0x24000ba4
 8003744:	2400000c 	.word	0x2400000c
 8003748:	24000cc0 	.word	0x24000cc0
 800374c:	2400000a 	.word	0x2400000a
 8003750:	24000d14 	.word	0x24000d14
 8003754:	240003dd 	.word	0x240003dd
 8003758:	24000b80 	.word	0x24000b80
 800375c:	24000b71 	.word	0x24000b71
 8003760:	24000c88 	.word	0x24000c88
 8003764:	24000ba6 	.word	0x24000ba6
 8003768:	24000bc1 	.word	0x24000bc1
 800376c:	24000ccb 	.word	0x24000ccb
 8003770:	240008d4 	.word	0x240008d4
 8003774:	24000b84 	.word	0x24000b84
 8003778:	240001a9 	.word	0x240001a9
 800377c:	240003de 	.word	0x240003de
 8003780:	240008d5 	.word	0x240008d5
 8003784:	240003e0 	.word	0x240003e0
 8003788:	24000bbb 	.word	0x24000bbb
 800378c:	24000d0c 	.word	0x24000d0c
 8003790:	24000c98 	.word	0x24000c98
 8003794:	240002c0 	.word	0x240002c0

08003798 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <USART6_IRQHandler+0x10>)
 800379e:	f008 f82d 	bl	800b7fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	24000bdc 	.word	0x24000bdc

080037ac <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80037b0:	4802      	ldr	r0, [pc, #8]	; (80037bc <UART7_IRQHandler+0x10>)
 80037b2:	f008 f823 	bl	800b7fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	240001ec 	.word	0x240001ec

080037c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <_sbrk+0x50>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_sbrk+0x16>
		heap_end = &end;
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <_sbrk+0x50>)
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <_sbrk+0x54>)
 80037d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <_sbrk+0x50>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <_sbrk+0x50>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	466a      	mov	r2, sp
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d907      	bls.n	80037fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037ea:	f00b f97f 	bl	800eaec <__errno>
 80037ee:	4602      	mov	r2, r0
 80037f0:	230c      	movs	r3, #12
 80037f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
 80037f8:	e006      	b.n	8003808 <_sbrk+0x48>
	}

	heap_end += incr;
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <_sbrk+0x50>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	4a03      	ldr	r2, [pc, #12]	; (8003810 <_sbrk+0x50>)
 8003804:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	24000198 	.word	0x24000198
 8003814:	24000db0 	.word	0x24000db0

08003818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800381c:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <SystemInit+0xac>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <SystemInit+0xac>)
 8003824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <SystemInit+0xb0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a25      	ldr	r2, [pc, #148]	; (80038c8 <SystemInit+0xb0>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003838:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <SystemInit+0xb0>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <SystemInit+0xb0>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4921      	ldr	r1, [pc, #132]	; (80038c8 <SystemInit+0xb0>)
 8003844:	4b21      	ldr	r3, [pc, #132]	; (80038cc <SystemInit+0xb4>)
 8003846:	4013      	ands	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800384a:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <SystemInit+0xb0>)
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <SystemInit+0xb0>)
 8003852:	2200      	movs	r2, #0
 8003854:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003856:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <SystemInit+0xb0>)
 8003858:	2200      	movs	r2, #0
 800385a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <SystemInit+0xb0>)
 800385e:	2200      	movs	r2, #0
 8003860:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003862:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <SystemInit+0xb0>)
 8003864:	2200      	movs	r2, #0
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <SystemInit+0xb0>)
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <SystemInit+0xb0>)
 8003870:	2200      	movs	r2, #0
 8003872:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <SystemInit+0xb0>)
 8003876:	2200      	movs	r2, #0
 8003878:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <SystemInit+0xb0>)
 800387c:	2200      	movs	r2, #0
 800387e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <SystemInit+0xb0>)
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <SystemInit+0xb0>)
 8003888:	2200      	movs	r2, #0
 800388a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <SystemInit+0xb0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <SystemInit+0xb0>)
 8003892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003896:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <SystemInit+0xb0>)
 800389a:	2200      	movs	r2, #0
 800389c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <SystemInit+0xb8>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <SystemInit+0xbc>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038aa:	d202      	bcs.n	80038b2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <SystemInit+0xc0>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <SystemInit+0xac>)
 80038b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038b8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00
 80038c8:	58024400 	.word	0x58024400
 80038cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80038d0:	5c001000 	.word	0x5c001000
 80038d4:	ffff0000 	.word	0xffff0000
 80038d8:	51008108 	.word	0x51008108

080038dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003914 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038e2:	e003      	b.n	80038ec <LoopCopyDataInit>

080038e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038ea:	3104      	adds	r1, #4

080038ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038ec:	480b      	ldr	r0, [pc, #44]	; (800391c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038f4:	d3f6      	bcc.n	80038e4 <CopyDataInit>
  ldr  r2, =_sbss
 80038f6:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038f8:	e002      	b.n	8003900 <LoopFillZerobss>

080038fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038fc:	f842 3b04 	str.w	r3, [r2], #4

08003900 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003902:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003904:	d3f9      	bcc.n	80038fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003906:	f7ff ff87 	bl	8003818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800390a:	f00b f8f5 	bl	800eaf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800390e:	f7fe fc2f 	bl	8002170 <main>
  bx  lr    
 8003912:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003914:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003918:	08010780 	.word	0x08010780
  ldr  r0, =_sdata
 800391c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003920:	24000148 	.word	0x24000148
  ldr  r2, =_sbss
 8003924:	24000148 	.word	0x24000148
  ldr  r3, = _ebss
 8003928:	24000dac 	.word	0x24000dac

0800392c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800392c:	e7fe      	b.n	800392c <ADC3_IRQHandler>
	...

08003930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003936:	2003      	movs	r0, #3
 8003938:	f001 fb22 	bl	8004f80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800393c:	f005 f934 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 8003940:	4601      	mov	r1, r0
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <HAL_Init+0x68>)
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_Init+0x6c>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa21 f303 	lsr.w	r3, r1, r3
 8003958:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <HAL_Init+0x68>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	4a0e      	ldr	r2, [pc, #56]	; (800399c <HAL_Init+0x6c>)
 8003964:	5cd3      	ldrb	r3, [r2, r3]
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <HAL_Init+0x70>)
 8003972:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003974:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <HAL_Init+0x74>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800397a:	2000      	movs	r0, #0
 800397c:	f000 f814 	bl	80039a8 <HAL_InitTick>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e002      	b.n	8003990 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800398a:	f7ff f925 	bl	8002bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	58024400 	.word	0x58024400
 800399c:	08010504 	.word	0x08010504
 80039a0:	240000d4 	.word	0x240000d4
 80039a4:	240000d0 	.word	0x240000d0

080039a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_InitTick+0x60>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e021      	b.n	8003a00 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <HAL_InitTick+0x64>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_InitTick+0x60>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	4619      	mov	r1, r3
 80039c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fb07 	bl	8004fe6 <HAL_SYSTICK_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e00e      	b.n	8003a00 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b0f      	cmp	r3, #15
 80039e6:	d80a      	bhi.n	80039fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e8:	2200      	movs	r2, #0
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295
 80039f0:	f001 fad1 	bl	8004f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f4:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <HAL_InitTick+0x68>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	240000dc 	.word	0x240000dc
 8003a0c:	240000d0 	.word	0x240000d0
 8003a10:	240000d8 	.word	0x240000d8

08003a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_IncTick+0x20>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_IncTick+0x24>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4413      	add	r3, r2
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_IncTick+0x24>)
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	240000dc 	.word	0x240000dc
 8003a38:	24000d88 	.word	0x24000d88

08003a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_GetTick+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	24000d88 	.word	0x24000d88

08003a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a5c:	f7ff ffee 	bl	8003a3c <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d005      	beq.n	8003a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_Delay+0x40>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a7a:	bf00      	nop
 8003a7c:	f7ff ffde 	bl	8003a3c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d8f7      	bhi.n	8003a7c <HAL_Delay+0x28>
  {
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	240000dc 	.word	0x240000dc

08003a98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_GetREVID+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	5c001000 	.word	0x5c001000

08003ab0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	58000400 	.word	0x58000400

08003adc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b44:	b490      	push	{r4, r7}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3360      	adds	r3, #96	; 0x60
 8003b56:	461a      	mov	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	4313      	orrs	r3, r2
 8003b72:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc90      	pop	{r4, r7}
 8003b7c:	4770      	bx	lr

08003b7e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	611a      	str	r2, [r3, #16]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003bb0:	b490      	push	{r4, r7}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3360      	adds	r3, #96	; 0x60
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	6023      	str	r3, [r4, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc90      	pop	{r4, r7}
 8003bde:	4770      	bx	lr

08003be0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c06:	b490      	push	{r4, r7}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3330      	adds	r3, #48	; 0x30
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	4413      	add	r3, r2
 8003c24:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	211f      	movs	r1, #31
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	401a      	ands	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0e9b      	lsrs	r3, r3, #26
 8003c3c:	f003 011f 	and.w	r1, r3, #31
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc90      	pop	{r4, r7}
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60da      	str	r2, [r3, #12]
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c7e:	b490      	push	{r4, r7}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	0e5b      	lsrs	r3, r3, #25
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	4413      	add	r3, r2
 8003c9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003c9e:	6822      	ldr	r2, [r4, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	0d1b      	lsrs	r3, r3, #20
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2107      	movs	r1, #7
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	0d1b      	lsrs	r3, r3, #20
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc90      	pop	{r4, r7}
 8003ccc:	4770      	bx	lr
	...

08003cd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	401a      	ands	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0318 	and.w	r3, r3, #24
 8003cf2:	4908      	ldr	r1, [pc, #32]	; (8003d14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cf4:	40d9      	lsrs	r1, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	000fffff 	.word	0x000fffff

08003d18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 031f 	and.w	r3, r3, #31
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6093      	str	r3, [r2, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	5fffffc0 	.word	0x5fffffc0

08003d58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6c:	d101      	bne.n	8003d72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	6fffffc0 	.word	0x6fffffc0

08003da8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dbc:	d101      	bne.n	8003dc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <LL_ADC_Enable+0x24>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	7fffffc0 	.word	0x7fffffc0

08003df8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <LL_ADC_IsEnabled+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <LL_ADC_IsEnabled+0x1a>
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <LL_ADC_REG_StartConversion+0x24>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	f043 0204 	orr.w	r2, r3, #4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	7fffffc0 	.word	0x7fffffc0

08003e48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d101      	bne.n	8003e60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d101      	bne.n	8003e86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e18e      	b.n	80041cc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fe fea5 	bl	8002c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff3f 	bl	8003d58 <LL_ADC_IsDeepPowerDownEnabled>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff25 	bl	8003d34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff5a 	bl	8003da8 <LL_ADC_IsInternalRegulatorEnabled>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d113      	bne.n	8003f22 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ff3e 	bl	8003d80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003f04:	4b9a      	ldr	r3, [pc, #616]	; (8004170 <HAL_ADC_Init+0x2dc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	4a9a      	ldr	r2, [pc, #616]	; (8004174 <HAL_ADC_Init+0x2e0>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f14:	e002      	b.n	8003f1c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f9      	bne.n	8003f16 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff ff3e 	bl	8003da8 <LL_ADC_IsInternalRegulatorEnabled>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	f043 0210 	orr.w	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff78 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8003f58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 8129 	bne.w	80041ba <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 8125 	bne.w	80041ba <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f78:	f043 0202 	orr.w	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff37 	bl	8003df8 <LL_ADC_IsEnabled>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d136      	bne.n	8003ffe <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a78      	ldr	r2, [pc, #480]	; (8004178 <HAL_ADC_Init+0x2e4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_ADC_Init+0x110>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a77      	ldr	r2, [pc, #476]	; (800417c <HAL_ADC_Init+0x2e8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10e      	bne.n	8003fc2 <HAL_ADC_Init+0x12e>
 8003fa4:	4874      	ldr	r0, [pc, #464]	; (8004178 <HAL_ADC_Init+0x2e4>)
 8003fa6:	f7ff ff27 	bl	8003df8 <LL_ADC_IsEnabled>
 8003faa:	4604      	mov	r4, r0
 8003fac:	4873      	ldr	r0, [pc, #460]	; (800417c <HAL_ADC_Init+0x2e8>)
 8003fae:	f7ff ff23 	bl	8003df8 <LL_ADC_IsEnabled>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4323      	orrs	r3, r4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf0c      	ite	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	2300      	movne	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e008      	b.n	8003fd4 <HAL_ADC_Init+0x140>
 8003fc2:	486f      	ldr	r0, [pc, #444]	; (8004180 <HAL_ADC_Init+0x2ec>)
 8003fc4:	f7ff ff18 	bl	8003df8 <LL_ADC_IsEnabled>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf0c      	ite	eq
 8003fce:	2301      	moveq	r3, #1
 8003fd0:	2300      	movne	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a66      	ldr	r2, [pc, #408]	; (8004178 <HAL_ADC_Init+0x2e4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_ADC_Init+0x158>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a65      	ldr	r2, [pc, #404]	; (800417c <HAL_ADC_Init+0x2e8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_Init+0x15c>
 8003fec:	4a65      	ldr	r2, [pc, #404]	; (8004184 <HAL_ADC_Init+0x2f0>)
 8003fee:	e000      	b.n	8003ff2 <HAL_ADC_Init+0x15e>
 8003ff0:	4a65      	ldr	r2, [pc, #404]	; (8004188 <HAL_ADC_Init+0x2f4>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f7ff fd6f 	bl	8003adc <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ffe:	f7ff fd4b 	bl	8003a98 <HAL_GetREVID>
 8004002:	4602      	mov	r2, r0
 8004004:	f241 0303 	movw	r3, #4099	; 0x1003
 8004008:	429a      	cmp	r2, r3
 800400a:	d914      	bls.n	8004036 <HAL_ADC_Init+0x1a2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d110      	bne.n	8004036 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7d5b      	ldrb	r3, [r3, #21]
 8004018:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800401e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004024:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7f1b      	ldrb	r3, [r3, #28]
 800402a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800402c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800402e:	f043 030c 	orr.w	r3, r3, #12
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e00d      	b.n	8004052 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7d5b      	ldrb	r3, [r3, #21]
 800403a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004040:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004046:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7f1b      	ldrb	r3, [r3, #28]
 800404c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	7f1b      	ldrb	r3, [r3, #28]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d106      	bne.n	8004068 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	3b01      	subs	r3, #1
 8004060:	045b      	lsls	r3, r3, #17
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_ADC_Init+0x2f8>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	69b9      	ldr	r1, [r7, #24]
 8004094:	430b      	orrs	r3, r1
 8004096:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fed3 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 80040a2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fee0 	bl	8003e6e <LL_ADC_INJ_IsConversionOngoing>
 80040ae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d14a      	bne.n	800414c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d147      	bne.n	800414c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7d1b      	ldrb	r3, [r3, #20]
 80040c0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <HAL_ADC_Init+0x2fc>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	430b      	orrs	r3, r1
 80040dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d11b      	bne.n	8004120 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <HAL_ADC_Init+0x300>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040fc:	3a01      	subs	r2, #1
 80040fe:	0411      	lsls	r1, r2, #16
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800410a:	4311      	orrs	r1, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004110:	430a      	orrs	r2, r1
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	e007      	b.n	8004130 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fd52 	bl	8004bf0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d121      	bne.n	8004198 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f023 010f 	bic.w	r1, r3, #15
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	1e5a      	subs	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
 800416c:	e01c      	b.n	80041a8 <HAL_ADC_Init+0x314>
 800416e:	bf00      	nop
 8004170:	240000d0 	.word	0x240000d0
 8004174:	053e2d63 	.word	0x053e2d63
 8004178:	40022000 	.word	0x40022000
 800417c:	40022100 	.word	0x40022100
 8004180:	58026000 	.word	0x58026000
 8004184:	40022300 	.word	0x40022300
 8004188:	58026300 	.word	0x58026300
 800418c:	fff0c003 	.word	0xfff0c003
 8004190:	ffffbffc 	.word	0xffffbffc
 8004194:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 020f 	bic.w	r2, r2, #15
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f023 0303 	bic.w	r3, r3, #3
 80041b0:	f043 0201 	orr.w	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
 80041b8:	e007      	b.n	80041ca <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0210 	orr.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3724      	adds	r7, #36	; 0x24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}

080041d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a55      	ldr	r2, [pc, #340]	; (800433c <HAL_ADC_Start_DMA+0x168>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_ADC_Start_DMA+0x20>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a54      	ldr	r2, [pc, #336]	; (8004340 <HAL_ADC_Start_DMA+0x16c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_Start_DMA+0x24>
 80041f4:	4b53      	ldr	r3, [pc, #332]	; (8004344 <HAL_ADC_Start_DMA+0x170>)
 80041f6:	e000      	b.n	80041fa <HAL_ADC_Start_DMA+0x26>
 80041f8:	4b53      	ldr	r3, [pc, #332]	; (8004348 <HAL_ADC_Start_DMA+0x174>)
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fd8c 	bl	8003d18 <LL_ADC_GetMultimode>
 8004200:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fe1e 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 808c 	bne.w	800432c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_ADC_Start_DMA+0x4e>
 800421e:	2302      	movs	r3, #2
 8004220:	e087      	b.n	8004332 <HAL_ADC_Start_DMA+0x15e>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b05      	cmp	r3, #5
 8004234:	d002      	beq.n	800423c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b09      	cmp	r3, #9
 800423a:	d170      	bne.n	800431e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fbbf 	bl	80049c0 <ADC_Enable>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d163      	bne.n	8004314 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004250:	4b3e      	ldr	r3, [pc, #248]	; (800434c <HAL_ADC_Start_DMA+0x178>)
 8004252:	4013      	ands	r3, r2
 8004254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a37      	ldr	r2, [pc, #220]	; (8004340 <HAL_ADC_Start_DMA+0x16c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d002      	beq.n	800426c <HAL_ADC_Start_DMA+0x98>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	e000      	b.n	800426e <HAL_ADC_Start_DMA+0x9a>
 800426c:	4b33      	ldr	r3, [pc, #204]	; (800433c <HAL_ADC_Start_DMA+0x168>)
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	4293      	cmp	r3, r2
 8004274:	d002      	beq.n	800427c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f023 0206 	bic.w	r2, r3, #6
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	659a      	str	r2, [r3, #88]	; 0x58
 80042a0:	e002      	b.n	80042a8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ac:	4a28      	ldr	r2, [pc, #160]	; (8004350 <HAL_ADC_Start_DMA+0x17c>)
 80042ae:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b4:	4a27      	ldr	r2, [pc, #156]	; (8004354 <HAL_ADC_Start_DMA+0x180>)
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042bc:	4a26      	ldr	r2, [pc, #152]	; (8004358 <HAL_ADC_Start_DMA+0x184>)
 80042be:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	221c      	movs	r2, #28
 80042c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0210 	orr.w	r2, r2, #16
 80042de:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f7ff fcb4 	bl	8003c58 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3340      	adds	r3, #64	; 0x40
 80042fa:	4619      	mov	r1, r3
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f001 f9da 	bl	80056b8 <HAL_DMA_Start_IT>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fd87 	bl	8003e20 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004312:	e00d      	b.n	8004330 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800431c:	e008      	b.n	8004330 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800432a:	e001      	b.n	8004330 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800432c:	2302      	movs	r3, #2
 800432e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004330:	7dfb      	ldrb	r3, [r7, #23]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40022000 	.word	0x40022000
 8004340:	40022100 	.word	0x40022100
 8004344:	40022300 	.word	0x40022300
 8004348:	58026300 	.word	0x58026300
 800434c:	fffff0fe 	.word	0xfffff0fe
 8004350:	08004ac9 	.word	0x08004ac9
 8004354:	08004ba1 	.word	0x08004ba1
 8004358:	08004bbd 	.word	0x08004bbd

0800435c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b099      	sub	sp, #100	; 0x64
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a99      	ldr	r2, [pc, #612]	; (8004618 <HAL_ADC_ConfigChannel+0x280>)
 80043b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x2a>
 80043be:	2302      	movs	r3, #2
 80043c0:	e2e6      	b.n	8004990 <HAL_ADC_ConfigChannel+0x5f8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fd3a 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f040 82cb 	bne.w	8004972 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x62>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	0e9b      	lsrs	r3, r3, #26
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	2201      	movs	r2, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	e00f      	b.n	800441a <HAL_ADC_ConfigChannel+0x82>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2201      	movs	r2, #1
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	69d1      	ldr	r1, [r2, #28]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	430b      	orrs	r3, r1
 8004426:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	f7ff fbe6 	bl	8003c06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fd02 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8004444:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fd0f 	bl	8003e6e <LL_ADC_INJ_IsConversionOngoing>
 8004450:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 80b3 	bne.w	80045c0 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800445a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 80af 	bne.w	80045c0 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	461a      	mov	r2, r3
 8004470:	f7ff fc05 	bl	8003c7e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004474:	4b69      	ldr	r3, [pc, #420]	; (800461c <HAL_ADC_ConfigChannel+0x284>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800447c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004480:	d10b      	bne.n	800449a <HAL_ADC_ConfigChannel+0x102>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	e01d      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x13e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x128>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	e00a      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x13e>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d027      	beq.n	8004530 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6919      	ldr	r1, [r3, #16]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ee:	f7ff fb29 	bl	8003b44 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6919      	ldr	r1, [r3, #16]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	7e5b      	ldrb	r3, [r3, #25]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x170>
 8004502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004506:	e000      	b.n	800450a <HAL_ADC_ConfigChannel+0x172>
 8004508:	2300      	movs	r3, #0
 800450a:	461a      	mov	r2, r3
 800450c:	f7ff fb50 	bl	8003bb0 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6919      	ldr	r1, [r3, #16]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	7e1b      	ldrb	r3, [r3, #24]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d102      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x18e>
 8004520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004524:	e000      	b.n	8004528 <HAL_ADC_ConfigChannel+0x190>
 8004526:	2300      	movs	r3, #0
 8004528:	461a      	mov	r2, r3
 800452a:	f7ff fb28 	bl	8003b7e <LL_ADC_SetDataRightShift>
 800452e:	e047      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	069b      	lsls	r3, r3, #26
 8004540:	429a      	cmp	r2, r3
 8004542:	d107      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	069b      	lsls	r3, r3, #26
 8004564:	429a      	cmp	r2, r3
 8004566:	d107      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004576:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	069b      	lsls	r3, r3, #26
 8004588:	429a      	cmp	r2, r3
 800458a:	d107      	bne.n	800459c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800459a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	069b      	lsls	r3, r3, #26
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d107      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fc17 	bl	8003df8 <LL_ADC_IsEnabled>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 81d9 	bne.w	8004984 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	461a      	mov	r2, r3
 80045e0:	f7ff fb76 	bl	8003cd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <HAL_ADC_ConfigChannel+0x280>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	f040 8101 	bne.w	80047f2 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10f      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x288>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0e9b      	lsrs	r3, r3, #26
 8004606:	3301      	adds	r3, #1
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2b09      	cmp	r3, #9
 800460e:	bf94      	ite	ls
 8004610:	2301      	movls	r3, #1
 8004612:	2300      	movhi	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e016      	b.n	8004646 <HAL_ADC_ConfigChannel+0x2ae>
 8004618:	47ff0000 	.word	0x47ff0000
 800461c:	5c001000 	.word	0x5c001000
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004628:	fa93 f3a3 	rbit	r3, r3
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2b09      	cmp	r3, #9
 800463e:	bf94      	ite	ls
 8004640:	2301      	movls	r3, #1
 8004642:	2300      	movhi	r3, #0
 8004644:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004646:	2b00      	cmp	r3, #0
 8004648:	d064      	beq.n	8004714 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x2ce>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	0e9b      	lsrs	r3, r3, #26
 800465c:	3301      	adds	r3, #1
 800465e:	069b      	lsls	r3, r3, #26
 8004660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004664:	e00e      	b.n	8004684 <HAL_ADC_ConfigChannel+0x2ec>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3301      	adds	r3, #1
 800467e:	069b      	lsls	r3, r3, #26
 8004680:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x30c>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	3301      	adds	r3, #1
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2101      	movs	r1, #1
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	e010      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x32e>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	ea42 0103 	orr.w	r1, r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x354>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	0e9b      	lsrs	r3, r3, #26
 80046dc:	3301      	adds	r3, #1
 80046de:	f003 021f 	and.w	r2, r3, #31
 80046e2:	4613      	mov	r3, r2
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	051b      	lsls	r3, r3, #20
 80046ea:	e011      	b.n	8004710 <HAL_ADC_ConfigChannel+0x378>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	fab3 f383 	clz	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	3301      	adds	r3, #1
 8004704:	f003 021f 	and.w	r2, r3, #31
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004710:	430b      	orrs	r3, r1
 8004712:	e069      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x398>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0e9b      	lsrs	r3, r3, #26
 8004726:	3301      	adds	r3, #1
 8004728:	069b      	lsls	r3, r3, #26
 800472a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800472e:	e00e      	b.n	800474e <HAL_ADC_ConfigChannel+0x3b6>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	fa93 f3a3 	rbit	r3, r3
 800473c:	61fb      	str	r3, [r7, #28]
  return result;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	fab3 f383 	clz	r3, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3301      	adds	r3, #1
 8004748:	069b      	lsls	r3, r3, #26
 800474a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_ADC_ConfigChannel+0x3d6>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	0e9b      	lsrs	r3, r3, #26
 8004760:	3301      	adds	r3, #1
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2101      	movs	r1, #1
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	e010      	b.n	8004790 <HAL_ADC_ConfigChannel+0x3f8>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	617b      	str	r3, [r7, #20]
  return result;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	3301      	adds	r3, #1
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2101      	movs	r1, #1
 800478c:	fa01 f303 	lsl.w	r3, r1, r3
 8004790:	ea42 0103 	orr.w	r1, r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x424>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0e9b      	lsrs	r3, r3, #26
 80047a6:	3301      	adds	r3, #1
 80047a8:	f003 021f 	and.w	r2, r3, #31
 80047ac:	4613      	mov	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	3b1e      	subs	r3, #30
 80047b4:	051b      	lsls	r3, r3, #20
 80047b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047ba:	e014      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x44e>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	fa93 f3a3 	rbit	r3, r3
 80047c8:	60fb      	str	r3, [r7, #12]
  return result;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f003 021f 	and.w	r2, r3, #31
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	3b1e      	subs	r3, #30
 80047e0:	051b      	lsls	r3, r3, #20
 80047e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e6:	430b      	orrs	r3, r1
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	6892      	ldr	r2, [r2, #8]
 80047ec:	4619      	mov	r1, r3
 80047ee:	f7ff fa46 	bl	8003c7e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f280 80c4 	bge.w	8004984 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a65      	ldr	r2, [pc, #404]	; (8004998 <HAL_ADC_ConfigChannel+0x600>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_ADC_ConfigChannel+0x478>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a64      	ldr	r2, [pc, #400]	; (800499c <HAL_ADC_ConfigChannel+0x604>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x47c>
 8004810:	4b63      	ldr	r3, [pc, #396]	; (80049a0 <HAL_ADC_ConfigChannel+0x608>)
 8004812:	e000      	b.n	8004816 <HAL_ADC_ConfigChannel+0x47e>
 8004814:	4b63      	ldr	r3, [pc, #396]	; (80049a4 <HAL_ADC_ConfigChannel+0x60c>)
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff f986 	bl	8003b28 <LL_ADC_GetCommonPathInternalCh>
 800481c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a5d      	ldr	r2, [pc, #372]	; (8004998 <HAL_ADC_ConfigChannel+0x600>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_ADC_ConfigChannel+0x49a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a5b      	ldr	r2, [pc, #364]	; (800499c <HAL_ADC_ConfigChannel+0x604>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10e      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x4b8>
 8004832:	4859      	ldr	r0, [pc, #356]	; (8004998 <HAL_ADC_ConfigChannel+0x600>)
 8004834:	f7ff fae0 	bl	8003df8 <LL_ADC_IsEnabled>
 8004838:	4604      	mov	r4, r0
 800483a:	4858      	ldr	r0, [pc, #352]	; (800499c <HAL_ADC_ConfigChannel+0x604>)
 800483c:	f7ff fadc 	bl	8003df8 <LL_ADC_IsEnabled>
 8004840:	4603      	mov	r3, r0
 8004842:	4323      	orrs	r3, r4
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e008      	b.n	8004862 <HAL_ADC_ConfigChannel+0x4ca>
 8004850:	4855      	ldr	r0, [pc, #340]	; (80049a8 <HAL_ADC_ConfigChannel+0x610>)
 8004852:	f7ff fad1 	bl	8003df8 <LL_ADC_IsEnabled>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d07b      	beq.n	800495e <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a50      	ldr	r2, [pc, #320]	; (80049ac <HAL_ADC_ConfigChannel+0x614>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d12e      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x536>
 8004870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d129      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a4a      	ldr	r2, [pc, #296]	; (80049a8 <HAL_ADC_ConfigChannel+0x610>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d17f      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a43      	ldr	r2, [pc, #268]	; (8004998 <HAL_ADC_ConfigChannel+0x600>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_ADC_ConfigChannel+0x500>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a42      	ldr	r2, [pc, #264]	; (800499c <HAL_ADC_ConfigChannel+0x604>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_ADC_ConfigChannel+0x504>
 8004898:	4a41      	ldr	r2, [pc, #260]	; (80049a0 <HAL_ADC_ConfigChannel+0x608>)
 800489a:	e000      	b.n	800489e <HAL_ADC_ConfigChannel+0x506>
 800489c:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <HAL_ADC_ConfigChannel+0x60c>)
 800489e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f7ff f92b 	bl	8003b02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80048ac:	4b40      	ldr	r3, [pc, #256]	; (80049b0 <HAL_ADC_ConfigChannel+0x618>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	4a40      	ldr	r2, [pc, #256]	; (80049b4 <HAL_ADC_ConfigChannel+0x61c>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	099b      	lsrs	r3, r3, #6
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80048be:	e002      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f9      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048cc:	e05a      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a39      	ldr	r2, [pc, #228]	; (80049b8 <HAL_ADC_ConfigChannel+0x620>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d11e      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x57e>
 80048d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d119      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a30      	ldr	r2, [pc, #192]	; (80049a8 <HAL_ADC_ConfigChannel+0x610>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d14b      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a29      	ldr	r2, [pc, #164]	; (8004998 <HAL_ADC_ConfigChannel+0x600>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x568>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a28      	ldr	r2, [pc, #160]	; (800499c <HAL_ADC_ConfigChannel+0x604>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x56c>
 8004900:	4a27      	ldr	r2, [pc, #156]	; (80049a0 <HAL_ADC_ConfigChannel+0x608>)
 8004902:	e000      	b.n	8004906 <HAL_ADC_ConfigChannel+0x56e>
 8004904:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <HAL_ADC_ConfigChannel+0x60c>)
 8004906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f7ff f8f7 	bl	8003b02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004914:	e036      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a28      	ldr	r2, [pc, #160]	; (80049bc <HAL_ADC_ConfigChannel+0x624>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d131      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
 8004920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d12c      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_ADC_ConfigChannel+0x610>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d127      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <HAL_ADC_ConfigChannel+0x600>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_ADC_ConfigChannel+0x5b0>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a16      	ldr	r2, [pc, #88]	; (800499c <HAL_ADC_ConfigChannel+0x604>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_ADC_ConfigChannel+0x5b4>
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <HAL_ADC_ConfigChannel+0x608>)
 800494a:	e000      	b.n	800494e <HAL_ADC_ConfigChannel+0x5b6>
 800494c:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <HAL_ADC_ConfigChannel+0x60c>)
 800494e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7ff f8d3 	bl	8003b02 <LL_ADC_SetCommonPathInternalCh>
 800495c:	e012      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004970:	e008      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004976:	f043 0220 	orr.w	r2, r3, #32
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800498c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004990:	4618      	mov	r0, r3
 8004992:	3764      	adds	r7, #100	; 0x64
 8004994:	46bd      	mov	sp, r7
 8004996:	bd90      	pop	{r4, r7, pc}
 8004998:	40022000 	.word	0x40022000
 800499c:	40022100 	.word	0x40022100
 80049a0:	40022300 	.word	0x40022300
 80049a4:	58026300 	.word	0x58026300
 80049a8:	58026000 	.word	0x58026000
 80049ac:	cb840000 	.word	0xcb840000
 80049b0:	240000d0 	.word	0x240000d0
 80049b4:	053e2d63 	.word	0x053e2d63
 80049b8:	c7520000 	.word	0xc7520000
 80049bc:	cfb80000 	.word	0xcfb80000

080049c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fa13 	bl	8003df8 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d167      	bne.n	8004aa8 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <ADC_Enable+0xf4>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	f043 0210 	orr.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e053      	b.n	8004aaa <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff f9e2 	bl	8003dd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a0c:	f7ff f816 	bl	8003a3c <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <ADC_Enable+0xf8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <ADC_Enable+0x66>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a26      	ldr	r2, [pc, #152]	; (8004abc <ADC_Enable+0xfc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <ADC_Enable+0x6a>
 8004a26:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <ADC_Enable+0x100>)
 8004a28:	e000      	b.n	8004a2c <ADC_Enable+0x6c>
 8004a2a:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <ADC_Enable+0x104>)
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f973 	bl	8003d18 <LL_ADC_GetMultimode>
 8004a32:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a20      	ldr	r2, [pc, #128]	; (8004abc <ADC_Enable+0xfc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d002      	beq.n	8004a44 <ADC_Enable+0x84>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	e000      	b.n	8004a46 <ADC_Enable+0x86>
 8004a44:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <ADC_Enable+0xf8>)
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d025      	beq.n	8004a9a <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d129      	bne.n	8004aa8 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a54:	e021      	b.n	8004a9a <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff f9cc 	bl	8003df8 <LL_ADC_IsEnabled>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f9b0 	bl	8003dd0 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a70:	f7fe ffe4 	bl	8003a3c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d90d      	bls.n	8004a9a <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f043 0210 	orr.w	r2, r3, #16
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	f043 0201 	orr.w	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e007      	b.n	8004aaa <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d1d6      	bne.n	8004a56 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	8000003f 	.word	0x8000003f
 8004ab8:	40022000 	.word	0x40022000
 8004abc:	40022100 	.word	0x40022100
 8004ac0:	40022300 	.word	0x40022300
 8004ac4:	58026300 	.word	0x58026300

08004ac8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d14b      	bne.n	8004b7a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d021      	beq.n	8004b40 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff f86d 	bl	8003be0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d032      	beq.n	8004b72 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d12b      	bne.n	8004b72 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11f      	bne.n	8004b72 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f043 0201 	orr.w	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54
 8004b3e:	e018      	b.n	8004b72 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d111      	bne.n	8004b72 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d105      	bne.n	8004b72 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff fbf2 	bl	800435c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b78:	e00e      	b.n	8004b98 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff fbfc 	bl	8004384 <HAL_ADC_ErrorCallback>
}
 8004b8c:	e004      	b.n	8004b98 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff fbde 	bl	8004370 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	f043 0204 	orr.w	r2, r3, #4
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff fbce 	bl	8004384 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a70      	ldr	r2, [pc, #448]	; (8004dc0 <ADC_ConfigureBoostMode+0x1d0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <ADC_ConfigureBoostMode+0x1c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6f      	ldr	r2, [pc, #444]	; (8004dc4 <ADC_ConfigureBoostMode+0x1d4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d109      	bne.n	8004c20 <ADC_ConfigureBoostMode+0x30>
 8004c0c:	4b6e      	ldr	r3, [pc, #440]	; (8004dc8 <ADC_ConfigureBoostMode+0x1d8>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e008      	b.n	8004c32 <ADC_ConfigureBoostMode+0x42>
 8004c20:	4b6a      	ldr	r3, [pc, #424]	; (8004dcc <ADC_ConfigureBoostMode+0x1dc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01a      	beq.n	8004c6c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004c36:	f004 f929 	bl	8008e8c <HAL_RCC_GetHCLKFreq>
 8004c3a:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c44:	d006      	beq.n	8004c54 <ADC_ConfigureBoostMode+0x64>
 8004c46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c4a:	d00b      	beq.n	8004c64 <ADC_ConfigureBoostMode+0x74>
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d000      	beq.n	8004c54 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8004c52:	e05d      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	60fb      	str	r3, [r7, #12]
        break;
 8004c62:	e055      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	60fb      	str	r3, [r7, #12]
        break;
 8004c6a:	e051      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004c70:	f005 f846 	bl	8009d00 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c74:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c7e:	d02a      	beq.n	8004cd6 <ADC_ConfigureBoostMode+0xe6>
 8004c80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c84:	d813      	bhi.n	8004cae <ADC_ConfigureBoostMode+0xbe>
 8004c86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c8a:	d024      	beq.n	8004cd6 <ADC_ConfigureBoostMode+0xe6>
 8004c8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c90:	d806      	bhi.n	8004ca0 <ADC_ConfigureBoostMode+0xb0>
 8004c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c96:	d01e      	beq.n	8004cd6 <ADC_ConfigureBoostMode+0xe6>
 8004c98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c9c:	d01b      	beq.n	8004cd6 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8004c9e:	e037      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8004ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca4:	d017      	beq.n	8004cd6 <ADC_ConfigureBoostMode+0xe6>
 8004ca6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004caa:	d014      	beq.n	8004cd6 <ADC_ConfigureBoostMode+0xe6>
        break;
 8004cac:	e030      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8004cae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004cb2:	d021      	beq.n	8004cf8 <ADC_ConfigureBoostMode+0x108>
 8004cb4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004cb8:	d806      	bhi.n	8004cc8 <ADC_ConfigureBoostMode+0xd8>
 8004cba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004cbe:	d013      	beq.n	8004ce8 <ADC_ConfigureBoostMode+0xf8>
 8004cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc4:	d014      	beq.n	8004cf0 <ADC_ConfigureBoostMode+0x100>
        break;
 8004cc6:	e023      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8004cc8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ccc:	d018      	beq.n	8004d00 <ADC_ConfigureBoostMode+0x110>
 8004cce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004cd2:	d019      	beq.n	8004d08 <ADC_ConfigureBoostMode+0x118>
        break;
 8004cd4:	e01c      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	0c9b      	lsrs	r3, r3, #18
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	60fb      	str	r3, [r7, #12]
        break;
 8004ce6:	e013      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	60fb      	str	r3, [r7, #12]
      break;
 8004cee:	e00f      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	60fb      	str	r3, [r7, #12]
        break;
 8004cf6:	e00b      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	099b      	lsrs	r3, r3, #6
 8004cfc:	60fb      	str	r3, [r7, #12]
        break;
 8004cfe:	e007      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	09db      	lsrs	r3, r3, #7
 8004d04:	60fb      	str	r3, [r7, #12]
        break;
 8004d06:	e003      	b.n	8004d10 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	60fb      	str	r3, [r7, #12]
        break;
 8004d0e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004d10:	f7fe fec2 	bl	8003a98 <HAL_GetREVID>
 8004d14:	4602      	mov	r2, r0
 8004d16:	f241 0303 	movw	r3, #4099	; 0x1003
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d815      	bhi.n	8004d4a <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a2b      	ldr	r2, [pc, #172]	; (8004dd0 <ADC_ConfigureBoostMode+0x1e0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d908      	bls.n	8004d38 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d34:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004d36:	e03e      	b.n	8004db6 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	e035      	b.n	8004db6 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a20      	ldr	r2, [pc, #128]	; (8004dd4 <ADC_ConfigureBoostMode+0x1e4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d808      	bhi.n	8004d6a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	e025      	b.n	8004db6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <ADC_ConfigureBoostMode+0x1e8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d80a      	bhi.n	8004d88 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d84:	609a      	str	r2, [r3, #8]
}
 8004d86:	e016      	b.n	8004db6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <ADC_ConfigureBoostMode+0x1ec>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d80a      	bhi.n	8004da6 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	e007      	b.n	8004db6 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004db4:	609a      	str	r2, [r3, #8]
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	40022100 	.word	0x40022100
 8004dc8:	40022300 	.word	0x40022300
 8004dcc:	58026300 	.word	0x58026300
 8004dd0:	01312d00 	.word	0x01312d00
 8004dd4:	005f5e10 	.word	0x005f5e10
 8004dd8:	00bebc20 	.word	0x00bebc20
 8004ddc:	017d7840 	.word	0x017d7840

08004de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <__NVIC_SetPriorityGrouping+0x40>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <__NVIC_SetPriorityGrouping+0x44>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e0e:	4a04      	ldr	r2, [pc, #16]	; (8004e20 <__NVIC_SetPriorityGrouping+0x40>)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	60d3      	str	r3, [r2, #12]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	e000ed00 	.word	0xe000ed00
 8004e24:	05fa0000 	.word	0x05fa0000

08004e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <__NVIC_GetPriorityGrouping+0x18>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	f003 0307 	and.w	r3, r3, #7
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	db0b      	blt.n	8004e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	f003 021f 	and.w	r2, r3, #31
 8004e5c:	4907      	ldr	r1, [pc, #28]	; (8004e7c <__NVIC_EnableIRQ+0x38>)
 8004e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2001      	movs	r0, #1
 8004e66:	fa00 f202 	lsl.w	r2, r0, r2
 8004e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	e000e100 	.word	0xe000e100

08004e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	6039      	str	r1, [r7, #0]
 8004e8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	db0a      	blt.n	8004eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	490c      	ldr	r1, [pc, #48]	; (8004ecc <__NVIC_SetPriority+0x4c>)
 8004e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9e:	0112      	lsls	r2, r2, #4
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ea8:	e00a      	b.n	8004ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	4908      	ldr	r1, [pc, #32]	; (8004ed0 <__NVIC_SetPriority+0x50>)
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	3b04      	subs	r3, #4
 8004eb8:	0112      	lsls	r2, r2, #4
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	761a      	strb	r2, [r3, #24]
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000e100 	.word	0xe000e100
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f1c3 0307 	rsb	r3, r3, #7
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf28      	it	cs
 8004ef2:	2304      	movcs	r3, #4
 8004ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d902      	bls.n	8004f04 <NVIC_EncodePriority+0x30>
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3b03      	subs	r3, #3
 8004f02:	e000      	b.n	8004f06 <NVIC_EncodePriority+0x32>
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f08:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43da      	mvns	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	401a      	ands	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	fa01 f303 	lsl.w	r3, r1, r3
 8004f26:	43d9      	mvns	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f2c:	4313      	orrs	r3, r2
         );
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3724      	adds	r7, #36	; 0x24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f4c:	d301      	bcc.n	8004f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e00f      	b.n	8004f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f52:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <SysTick_Config+0x40>)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f5a:	210f      	movs	r1, #15
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f60:	f7ff ff8e 	bl	8004e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <SysTick_Config+0x40>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f6a:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <SysTick_Config+0x40>)
 8004f6c:	2207      	movs	r2, #7
 8004f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	e000e010 	.word	0xe000e010

08004f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff29 	bl	8004de0 <__NVIC_SetPriorityGrouping>
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fa4:	f7ff ff40 	bl	8004e28 <__NVIC_GetPriorityGrouping>
 8004fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	6978      	ldr	r0, [r7, #20]
 8004fb0:	f7ff ff90 	bl	8004ed4 <NVIC_EncodePriority>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ff5f 	bl	8004e80 <__NVIC_SetPriority>
}
 8004fc2:	bf00      	nop
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff ff33 	bl	8004e44 <__NVIC_EnableIRQ>
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff ffa4 	bl	8004f3c <SysTick_Config>
 8004ff4:	4603      	mov	r3, r0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005008:	f7fe fd18 	bl	8003a3c <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e316      	b.n	8005646 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a66      	ldr	r2, [pc, #408]	; (80051b8 <HAL_DMA_Init+0x1b8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d04a      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a65      	ldr	r2, [pc, #404]	; (80051bc <HAL_DMA_Init+0x1bc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d045      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a63      	ldr	r2, [pc, #396]	; (80051c0 <HAL_DMA_Init+0x1c0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d040      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a62      	ldr	r2, [pc, #392]	; (80051c4 <HAL_DMA_Init+0x1c4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d03b      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a60      	ldr	r2, [pc, #384]	; (80051c8 <HAL_DMA_Init+0x1c8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d036      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a5f      	ldr	r2, [pc, #380]	; (80051cc <HAL_DMA_Init+0x1cc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d031      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5d      	ldr	r2, [pc, #372]	; (80051d0 <HAL_DMA_Init+0x1d0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d02c      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a5c      	ldr	r2, [pc, #368]	; (80051d4 <HAL_DMA_Init+0x1d4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d027      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5a      	ldr	r2, [pc, #360]	; (80051d8 <HAL_DMA_Init+0x1d8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a59      	ldr	r2, [pc, #356]	; (80051dc <HAL_DMA_Init+0x1dc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d01d      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a57      	ldr	r2, [pc, #348]	; (80051e0 <HAL_DMA_Init+0x1e0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a56      	ldr	r2, [pc, #344]	; (80051e4 <HAL_DMA_Init+0x1e4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a54      	ldr	r2, [pc, #336]	; (80051e8 <HAL_DMA_Init+0x1e8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a53      	ldr	r2, [pc, #332]	; (80051ec <HAL_DMA_Init+0x1ec>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a51      	ldr	r2, [pc, #324]	; (80051f0 <HAL_DMA_Init+0x1f0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_DMA_Init+0xb8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a50      	ldr	r2, [pc, #320]	; (80051f4 <HAL_DMA_Init+0x1f4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <HAL_DMA_Init+0xbc>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_DMA_Init+0xbe>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 813b 	beq.w	800533a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a37      	ldr	r2, [pc, #220]	; (80051b8 <HAL_DMA_Init+0x1b8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d04a      	beq.n	8005174 <HAL_DMA_Init+0x174>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a36      	ldr	r2, [pc, #216]	; (80051bc <HAL_DMA_Init+0x1bc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d045      	beq.n	8005174 <HAL_DMA_Init+0x174>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a34      	ldr	r2, [pc, #208]	; (80051c0 <HAL_DMA_Init+0x1c0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d040      	beq.n	8005174 <HAL_DMA_Init+0x174>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a33      	ldr	r2, [pc, #204]	; (80051c4 <HAL_DMA_Init+0x1c4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d03b      	beq.n	8005174 <HAL_DMA_Init+0x174>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a31      	ldr	r2, [pc, #196]	; (80051c8 <HAL_DMA_Init+0x1c8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d036      	beq.n	8005174 <HAL_DMA_Init+0x174>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a30      	ldr	r2, [pc, #192]	; (80051cc <HAL_DMA_Init+0x1cc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d031      	beq.n	8005174 <HAL_DMA_Init+0x174>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2e      	ldr	r2, [pc, #184]	; (80051d0 <HAL_DMA_Init+0x1d0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d02c      	beq.n	8005174 <HAL_DMA_Init+0x174>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2d      	ldr	r2, [pc, #180]	; (80051d4 <HAL_DMA_Init+0x1d4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d027      	beq.n	8005174 <HAL_DMA_Init+0x174>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <HAL_DMA_Init+0x1d8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d022      	beq.n	8005174 <HAL_DMA_Init+0x174>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2a      	ldr	r2, [pc, #168]	; (80051dc <HAL_DMA_Init+0x1dc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d01d      	beq.n	8005174 <HAL_DMA_Init+0x174>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a28      	ldr	r2, [pc, #160]	; (80051e0 <HAL_DMA_Init+0x1e0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d018      	beq.n	8005174 <HAL_DMA_Init+0x174>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a27      	ldr	r2, [pc, #156]	; (80051e4 <HAL_DMA_Init+0x1e4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d013      	beq.n	8005174 <HAL_DMA_Init+0x174>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a25      	ldr	r2, [pc, #148]	; (80051e8 <HAL_DMA_Init+0x1e8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00e      	beq.n	8005174 <HAL_DMA_Init+0x174>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a24      	ldr	r2, [pc, #144]	; (80051ec <HAL_DMA_Init+0x1ec>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_DMA_Init+0x174>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <HAL_DMA_Init+0x1f0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <HAL_DMA_Init+0x174>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a21      	ldr	r2, [pc, #132]	; (80051f4 <HAL_DMA_Init+0x1f4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d108      	bne.n	8005186 <HAL_DMA_Init+0x186>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e007      	b.n	8005196 <HAL_DMA_Init+0x196>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005196:	e02f      	b.n	80051f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005198:	f7fe fc50 	bl	8003a3c <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b05      	cmp	r3, #5
 80051a4:	d928      	bls.n	80051f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2203      	movs	r2, #3
 80051b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e246      	b.n	8005646 <HAL_DMA_Init+0x646>
 80051b8:	40020010 	.word	0x40020010
 80051bc:	40020028 	.word	0x40020028
 80051c0:	40020040 	.word	0x40020040
 80051c4:	40020058 	.word	0x40020058
 80051c8:	40020070 	.word	0x40020070
 80051cc:	40020088 	.word	0x40020088
 80051d0:	400200a0 	.word	0x400200a0
 80051d4:	400200b8 	.word	0x400200b8
 80051d8:	40020410 	.word	0x40020410
 80051dc:	40020428 	.word	0x40020428
 80051e0:	40020440 	.word	0x40020440
 80051e4:	40020458 	.word	0x40020458
 80051e8:	40020470 	.word	0x40020470
 80051ec:	40020488 	.word	0x40020488
 80051f0:	400204a0 	.word	0x400204a0
 80051f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1c8      	bne.n	8005198 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4b83      	ldr	r3, [pc, #524]	; (8005420 <HAL_DMA_Init+0x420>)
 8005212:	4013      	ands	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800521e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005236:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	2b04      	cmp	r3, #4
 800524a:	d107      	bne.n	800525c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	4313      	orrs	r3, r2
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800525c:	4b71      	ldr	r3, [pc, #452]	; (8005424 <HAL_DMA_Init+0x424>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b71      	ldr	r3, [pc, #452]	; (8005428 <HAL_DMA_Init+0x428>)
 8005262:	4013      	ands	r3, r2
 8005264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005268:	d328      	bcc.n	80052bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b28      	cmp	r3, #40	; 0x28
 8005270:	d903      	bls.n	800527a <HAL_DMA_Init+0x27a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b2e      	cmp	r3, #46	; 0x2e
 8005278:	d917      	bls.n	80052aa <HAL_DMA_Init+0x2aa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b3e      	cmp	r3, #62	; 0x3e
 8005280:	d903      	bls.n	800528a <HAL_DMA_Init+0x28a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b42      	cmp	r3, #66	; 0x42
 8005288:	d90f      	bls.n	80052aa <HAL_DMA_Init+0x2aa>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b46      	cmp	r3, #70	; 0x46
 8005290:	d903      	bls.n	800529a <HAL_DMA_Init+0x29a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b48      	cmp	r3, #72	; 0x48
 8005298:	d907      	bls.n	80052aa <HAL_DMA_Init+0x2aa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b4e      	cmp	r3, #78	; 0x4e
 80052a0:	d905      	bls.n	80052ae <HAL_DMA_Init+0x2ae>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b52      	cmp	r3, #82	; 0x52
 80052a8:	d801      	bhi.n	80052ae <HAL_DMA_Init+0x2ae>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_DMA_Init+0x2b0>
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0307 	bic.w	r3, r3, #7
 80052d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d117      	bne.n	8005316 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00e      	beq.n	8005316 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f002 f813 	bl	8007324 <DMA_CheckFifoParam>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2240      	movs	r2, #64	; 0x40
 8005308:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e197      	b.n	8005646 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 ff4e 	bl	80071c0 <DMA_CalcBaseAndBitshift>
 8005324:	4603      	mov	r3, r0
 8005326:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	223f      	movs	r2, #63	; 0x3f
 8005332:	409a      	lsls	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	e0cd      	b.n	80054d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a3b      	ldr	r2, [pc, #236]	; (800542c <HAL_DMA_Init+0x42c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d022      	beq.n	800538a <HAL_DMA_Init+0x38a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a39      	ldr	r2, [pc, #228]	; (8005430 <HAL_DMA_Init+0x430>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01d      	beq.n	800538a <HAL_DMA_Init+0x38a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a38      	ldr	r2, [pc, #224]	; (8005434 <HAL_DMA_Init+0x434>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d018      	beq.n	800538a <HAL_DMA_Init+0x38a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a36      	ldr	r2, [pc, #216]	; (8005438 <HAL_DMA_Init+0x438>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_DMA_Init+0x38a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a35      	ldr	r2, [pc, #212]	; (800543c <HAL_DMA_Init+0x43c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <HAL_DMA_Init+0x38a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a33      	ldr	r2, [pc, #204]	; (8005440 <HAL_DMA_Init+0x440>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <HAL_DMA_Init+0x38a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a32      	ldr	r2, [pc, #200]	; (8005444 <HAL_DMA_Init+0x444>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_DMA_Init+0x38a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a30      	ldr	r2, [pc, #192]	; (8005448 <HAL_DMA_Init+0x448>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <HAL_DMA_Init+0x38e>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_DMA_Init+0x390>
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8097 	beq.w	80054c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a24      	ldr	r2, [pc, #144]	; (800542c <HAL_DMA_Init+0x42c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d021      	beq.n	80053e4 <HAL_DMA_Init+0x3e4>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a22      	ldr	r2, [pc, #136]	; (8005430 <HAL_DMA_Init+0x430>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d01c      	beq.n	80053e4 <HAL_DMA_Init+0x3e4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a21      	ldr	r2, [pc, #132]	; (8005434 <HAL_DMA_Init+0x434>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d017      	beq.n	80053e4 <HAL_DMA_Init+0x3e4>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <HAL_DMA_Init+0x438>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d012      	beq.n	80053e4 <HAL_DMA_Init+0x3e4>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <HAL_DMA_Init+0x43c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00d      	beq.n	80053e4 <HAL_DMA_Init+0x3e4>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1c      	ldr	r2, [pc, #112]	; (8005440 <HAL_DMA_Init+0x440>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d008      	beq.n	80053e4 <HAL_DMA_Init+0x3e4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1b      	ldr	r2, [pc, #108]	; (8005444 <HAL_DMA_Init+0x444>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <HAL_DMA_Init+0x3e4>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a19      	ldr	r2, [pc, #100]	; (8005448 <HAL_DMA_Init+0x448>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <HAL_DMA_Init+0x44c>)
 8005402:	4013      	ands	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	d020      	beq.n	8005450 <HAL_DMA_Init+0x450>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d102      	bne.n	800541c <HAL_DMA_Init+0x41c>
 8005416:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800541a:	e01a      	b.n	8005452 <HAL_DMA_Init+0x452>
 800541c:	2300      	movs	r3, #0
 800541e:	e018      	b.n	8005452 <HAL_DMA_Init+0x452>
 8005420:	fe10803f 	.word	0xfe10803f
 8005424:	5c001000 	.word	0x5c001000
 8005428:	ffff0000 	.word	0xffff0000
 800542c:	58025408 	.word	0x58025408
 8005430:	5802541c 	.word	0x5802541c
 8005434:	58025430 	.word	0x58025430
 8005438:	58025444 	.word	0x58025444
 800543c:	58025458 	.word	0x58025458
 8005440:	5802546c 	.word	0x5802546c
 8005444:	58025480 	.word	0x58025480
 8005448:	58025494 	.word	0x58025494
 800544c:	fffe000f 	.word	0xfffe000f
 8005450:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68d2      	ldr	r2, [r2, #12]
 8005456:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005478:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005480:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	4b6e      	ldr	r3, [pc, #440]	; (8005650 <HAL_DMA_Init+0x650>)
 8005498:	4413      	add	r3, r2
 800549a:	4a6e      	ldr	r2, [pc, #440]	; (8005654 <HAL_DMA_Init+0x654>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	009a      	lsls	r2, r3, #2
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 fe89 	bl	80071c0 <DMA_CalcBaseAndBitshift>
 80054ae:	4603      	mov	r3, r0
 80054b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2201      	movs	r2, #1
 80054bc:	409a      	lsls	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	e008      	b.n	80054d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2240      	movs	r2, #64	; 0x40
 80054c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2203      	movs	r2, #3
 80054ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e0b7      	b.n	8005646 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <HAL_DMA_Init+0x658>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d072      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a5d      	ldr	r2, [pc, #372]	; (800565c <HAL_DMA_Init+0x65c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d06d      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a5c      	ldr	r2, [pc, #368]	; (8005660 <HAL_DMA_Init+0x660>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d068      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5a      	ldr	r2, [pc, #360]	; (8005664 <HAL_DMA_Init+0x664>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d063      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a59      	ldr	r2, [pc, #356]	; (8005668 <HAL_DMA_Init+0x668>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d05e      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a57      	ldr	r2, [pc, #348]	; (800566c <HAL_DMA_Init+0x66c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d059      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a56      	ldr	r2, [pc, #344]	; (8005670 <HAL_DMA_Init+0x670>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d054      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a54      	ldr	r2, [pc, #336]	; (8005674 <HAL_DMA_Init+0x674>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d04f      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a53      	ldr	r2, [pc, #332]	; (8005678 <HAL_DMA_Init+0x678>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d04a      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a51      	ldr	r2, [pc, #324]	; (800567c <HAL_DMA_Init+0x67c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d045      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a50      	ldr	r2, [pc, #320]	; (8005680 <HAL_DMA_Init+0x680>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d040      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a4e      	ldr	r2, [pc, #312]	; (8005684 <HAL_DMA_Init+0x684>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d03b      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a4d      	ldr	r2, [pc, #308]	; (8005688 <HAL_DMA_Init+0x688>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d036      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a4b      	ldr	r2, [pc, #300]	; (800568c <HAL_DMA_Init+0x68c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d031      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4a      	ldr	r2, [pc, #296]	; (8005690 <HAL_DMA_Init+0x690>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d02c      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a48      	ldr	r2, [pc, #288]	; (8005694 <HAL_DMA_Init+0x694>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d027      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a47      	ldr	r2, [pc, #284]	; (8005698 <HAL_DMA_Init+0x698>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d022      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a45      	ldr	r2, [pc, #276]	; (800569c <HAL_DMA_Init+0x69c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01d      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a44      	ldr	r2, [pc, #272]	; (80056a0 <HAL_DMA_Init+0x6a0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a42      	ldr	r2, [pc, #264]	; (80056a4 <HAL_DMA_Init+0x6a4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a41      	ldr	r2, [pc, #260]	; (80056a8 <HAL_DMA_Init+0x6a8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a3f      	ldr	r2, [pc, #252]	; (80056ac <HAL_DMA_Init+0x6ac>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3e      	ldr	r2, [pc, #248]	; (80056b0 <HAL_DMA_Init+0x6b0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_DMA_Init+0x5c6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3c      	ldr	r2, [pc, #240]	; (80056b4 <HAL_DMA_Init+0x6b4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d101      	bne.n	80055ca <HAL_DMA_Init+0x5ca>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <HAL_DMA_Init+0x5cc>
 80055ca:	2300      	movs	r3, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d032      	beq.n	8005636 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 ff23 	bl	800741c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b80      	cmp	r3, #128	; 0x80
 80055dc:	d102      	bne.n	80055e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_DMA_Init+0x624>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b08      	cmp	r3, #8
 8005608:	d80c      	bhi.n	8005624 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 ffa0 	bl	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	e008      	b.n	8005636 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	a7fdabf8 	.word	0xa7fdabf8
 8005654:	cccccccd 	.word	0xcccccccd
 8005658:	40020010 	.word	0x40020010
 800565c:	40020028 	.word	0x40020028
 8005660:	40020040 	.word	0x40020040
 8005664:	40020058 	.word	0x40020058
 8005668:	40020070 	.word	0x40020070
 800566c:	40020088 	.word	0x40020088
 8005670:	400200a0 	.word	0x400200a0
 8005674:	400200b8 	.word	0x400200b8
 8005678:	40020410 	.word	0x40020410
 800567c:	40020428 	.word	0x40020428
 8005680:	40020440 	.word	0x40020440
 8005684:	40020458 	.word	0x40020458
 8005688:	40020470 	.word	0x40020470
 800568c:	40020488 	.word	0x40020488
 8005690:	400204a0 	.word	0x400204a0
 8005694:	400204b8 	.word	0x400204b8
 8005698:	58025408 	.word	0x58025408
 800569c:	5802541c 	.word	0x5802541c
 80056a0:	58025430 	.word	0x58025430
 80056a4:	58025444 	.word	0x58025444
 80056a8:	58025458 	.word	0x58025458
 80056ac:	5802546c 	.word	0x5802546c
 80056b0:	58025480 	.word	0x58025480
 80056b4:	58025494 	.word	0x58025494

080056b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e226      	b.n	8005b22 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_DMA_Start_IT+0x2a>
 80056de:	2302      	movs	r3, #2
 80056e0:	e21f      	b.n	8005b22 <HAL_DMA_Start_IT+0x46a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	f040 820a 	bne.w	8005b0c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a68      	ldr	r2, [pc, #416]	; (80058ac <HAL_DMA_Start_IT+0x1f4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d04a      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a66      	ldr	r2, [pc, #408]	; (80058b0 <HAL_DMA_Start_IT+0x1f8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d045      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a65      	ldr	r2, [pc, #404]	; (80058b4 <HAL_DMA_Start_IT+0x1fc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d040      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a63      	ldr	r2, [pc, #396]	; (80058b8 <HAL_DMA_Start_IT+0x200>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d03b      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a62      	ldr	r2, [pc, #392]	; (80058bc <HAL_DMA_Start_IT+0x204>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d036      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a60      	ldr	r2, [pc, #384]	; (80058c0 <HAL_DMA_Start_IT+0x208>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d031      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a5f      	ldr	r2, [pc, #380]	; (80058c4 <HAL_DMA_Start_IT+0x20c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d02c      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a5d      	ldr	r2, [pc, #372]	; (80058c8 <HAL_DMA_Start_IT+0x210>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d027      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a5c      	ldr	r2, [pc, #368]	; (80058cc <HAL_DMA_Start_IT+0x214>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d022      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a5a      	ldr	r2, [pc, #360]	; (80058d0 <HAL_DMA_Start_IT+0x218>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01d      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a59      	ldr	r2, [pc, #356]	; (80058d4 <HAL_DMA_Start_IT+0x21c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d018      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a57      	ldr	r2, [pc, #348]	; (80058d8 <HAL_DMA_Start_IT+0x220>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a56      	ldr	r2, [pc, #344]	; (80058dc <HAL_DMA_Start_IT+0x224>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a54      	ldr	r2, [pc, #336]	; (80058e0 <HAL_DMA_Start_IT+0x228>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a53      	ldr	r2, [pc, #332]	; (80058e4 <HAL_DMA_Start_IT+0x22c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_DMA_Start_IT+0xee>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a51      	ldr	r2, [pc, #324]	; (80058e8 <HAL_DMA_Start_IT+0x230>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <HAL_DMA_Start_IT+0x100>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e007      	b.n	80057c8 <HAL_DMA_Start_IT+0x110>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f001 fb4a 	bl	8006e68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a34      	ldr	r2, [pc, #208]	; (80058ac <HAL_DMA_Start_IT+0x1f4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d04a      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a33      	ldr	r2, [pc, #204]	; (80058b0 <HAL_DMA_Start_IT+0x1f8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d045      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a31      	ldr	r2, [pc, #196]	; (80058b4 <HAL_DMA_Start_IT+0x1fc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d040      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a30      	ldr	r2, [pc, #192]	; (80058b8 <HAL_DMA_Start_IT+0x200>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d03b      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2e      	ldr	r2, [pc, #184]	; (80058bc <HAL_DMA_Start_IT+0x204>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d036      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2d      	ldr	r2, [pc, #180]	; (80058c0 <HAL_DMA_Start_IT+0x208>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d031      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2b      	ldr	r2, [pc, #172]	; (80058c4 <HAL_DMA_Start_IT+0x20c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d02c      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2a      	ldr	r2, [pc, #168]	; (80058c8 <HAL_DMA_Start_IT+0x210>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d027      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a28      	ldr	r2, [pc, #160]	; (80058cc <HAL_DMA_Start_IT+0x214>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d022      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a27      	ldr	r2, [pc, #156]	; (80058d0 <HAL_DMA_Start_IT+0x218>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d01d      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a25      	ldr	r2, [pc, #148]	; (80058d4 <HAL_DMA_Start_IT+0x21c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d018      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <HAL_DMA_Start_IT+0x220>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <HAL_DMA_Start_IT+0x224>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00e      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <HAL_DMA_Start_IT+0x228>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d009      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <HAL_DMA_Start_IT+0x22c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_DMA_Start_IT+0x1bc>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <HAL_DMA_Start_IT+0x230>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d101      	bne.n	8005878 <HAL_DMA_Start_IT+0x1c0>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_DMA_Start_IT+0x1c2>
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d036      	beq.n	80058ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 021e 	bic.w	r2, r3, #30
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0216 	orr.w	r2, r2, #22
 8005890:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d03e      	beq.n	8005918 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0208 	orr.w	r2, r2, #8
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e035      	b.n	8005918 <HAL_DMA_Start_IT+0x260>
 80058ac:	40020010 	.word	0x40020010
 80058b0:	40020028 	.word	0x40020028
 80058b4:	40020040 	.word	0x40020040
 80058b8:	40020058 	.word	0x40020058
 80058bc:	40020070 	.word	0x40020070
 80058c0:	40020088 	.word	0x40020088
 80058c4:	400200a0 	.word	0x400200a0
 80058c8:	400200b8 	.word	0x400200b8
 80058cc:	40020410 	.word	0x40020410
 80058d0:	40020428 	.word	0x40020428
 80058d4:	40020440 	.word	0x40020440
 80058d8:	40020458 	.word	0x40020458
 80058dc:	40020470 	.word	0x40020470
 80058e0:	40020488 	.word	0x40020488
 80058e4:	400204a0 	.word	0x400204a0
 80058e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f023 020e 	bic.w	r2, r3, #14
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 020a 	orr.w	r2, r2, #10
 80058fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0204 	orr.w	r2, r2, #4
 8005916:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a83      	ldr	r2, [pc, #524]	; (8005b2c <HAL_DMA_Start_IT+0x474>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d072      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a82      	ldr	r2, [pc, #520]	; (8005b30 <HAL_DMA_Start_IT+0x478>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d06d      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a80      	ldr	r2, [pc, #512]	; (8005b34 <HAL_DMA_Start_IT+0x47c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d068      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a7f      	ldr	r2, [pc, #508]	; (8005b38 <HAL_DMA_Start_IT+0x480>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d063      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a7d      	ldr	r2, [pc, #500]	; (8005b3c <HAL_DMA_Start_IT+0x484>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d05e      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a7c      	ldr	r2, [pc, #496]	; (8005b40 <HAL_DMA_Start_IT+0x488>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d059      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a7a      	ldr	r2, [pc, #488]	; (8005b44 <HAL_DMA_Start_IT+0x48c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d054      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a79      	ldr	r2, [pc, #484]	; (8005b48 <HAL_DMA_Start_IT+0x490>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d04f      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a77      	ldr	r2, [pc, #476]	; (8005b4c <HAL_DMA_Start_IT+0x494>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d04a      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a76      	ldr	r2, [pc, #472]	; (8005b50 <HAL_DMA_Start_IT+0x498>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d045      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a74      	ldr	r2, [pc, #464]	; (8005b54 <HAL_DMA_Start_IT+0x49c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d040      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a73      	ldr	r2, [pc, #460]	; (8005b58 <HAL_DMA_Start_IT+0x4a0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d03b      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a71      	ldr	r2, [pc, #452]	; (8005b5c <HAL_DMA_Start_IT+0x4a4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d036      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a70      	ldr	r2, [pc, #448]	; (8005b60 <HAL_DMA_Start_IT+0x4a8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d031      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a6e      	ldr	r2, [pc, #440]	; (8005b64 <HAL_DMA_Start_IT+0x4ac>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d02c      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a6d      	ldr	r2, [pc, #436]	; (8005b68 <HAL_DMA_Start_IT+0x4b0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d027      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a6b      	ldr	r2, [pc, #428]	; (8005b6c <HAL_DMA_Start_IT+0x4b4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6a      	ldr	r2, [pc, #424]	; (8005b70 <HAL_DMA_Start_IT+0x4b8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a68      	ldr	r2, [pc, #416]	; (8005b74 <HAL_DMA_Start_IT+0x4bc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a67      	ldr	r2, [pc, #412]	; (8005b78 <HAL_DMA_Start_IT+0x4c0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <HAL_DMA_Start_IT+0x4c4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a64      	ldr	r2, [pc, #400]	; (8005b80 <HAL_DMA_Start_IT+0x4c8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a62      	ldr	r2, [pc, #392]	; (8005b84 <HAL_DMA_Start_IT+0x4cc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_DMA_Start_IT+0x350>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a61      	ldr	r2, [pc, #388]	; (8005b88 <HAL_DMA_Start_IT+0x4d0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <HAL_DMA_Start_IT+0x354>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <HAL_DMA_Start_IT+0x356>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01a      	beq.n	8005a48 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d007      	beq.n	8005a48 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a46:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a37      	ldr	r2, [pc, #220]	; (8005b2c <HAL_DMA_Start_IT+0x474>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d04a      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a36      	ldr	r2, [pc, #216]	; (8005b30 <HAL_DMA_Start_IT+0x478>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d045      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <HAL_DMA_Start_IT+0x47c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d040      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a33      	ldr	r2, [pc, #204]	; (8005b38 <HAL_DMA_Start_IT+0x480>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d03b      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a31      	ldr	r2, [pc, #196]	; (8005b3c <HAL_DMA_Start_IT+0x484>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d036      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a30      	ldr	r2, [pc, #192]	; (8005b40 <HAL_DMA_Start_IT+0x488>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d031      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a2e      	ldr	r2, [pc, #184]	; (8005b44 <HAL_DMA_Start_IT+0x48c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d02c      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a2d      	ldr	r2, [pc, #180]	; (8005b48 <HAL_DMA_Start_IT+0x490>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d027      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a2b      	ldr	r2, [pc, #172]	; (8005b4c <HAL_DMA_Start_IT+0x494>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d022      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <HAL_DMA_Start_IT+0x498>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d01d      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a28      	ldr	r2, [pc, #160]	; (8005b54 <HAL_DMA_Start_IT+0x49c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a27      	ldr	r2, [pc, #156]	; (8005b58 <HAL_DMA_Start_IT+0x4a0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a25      	ldr	r2, [pc, #148]	; (8005b5c <HAL_DMA_Start_IT+0x4a4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <HAL_DMA_Start_IT+0x4a8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a22      	ldr	r2, [pc, #136]	; (8005b64 <HAL_DMA_Start_IT+0x4ac>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_DMA_Start_IT+0x430>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <HAL_DMA_Start_IT+0x4b0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d108      	bne.n	8005afa <HAL_DMA_Start_IT+0x442>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e012      	b.n	8005b20 <HAL_DMA_Start_IT+0x468>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e009      	b.n	8005b20 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40020010 	.word	0x40020010
 8005b30:	40020028 	.word	0x40020028
 8005b34:	40020040 	.word	0x40020040
 8005b38:	40020058 	.word	0x40020058
 8005b3c:	40020070 	.word	0x40020070
 8005b40:	40020088 	.word	0x40020088
 8005b44:	400200a0 	.word	0x400200a0
 8005b48:	400200b8 	.word	0x400200b8
 8005b4c:	40020410 	.word	0x40020410
 8005b50:	40020428 	.word	0x40020428
 8005b54:	40020440 	.word	0x40020440
 8005b58:	40020458 	.word	0x40020458
 8005b5c:	40020470 	.word	0x40020470
 8005b60:	40020488 	.word	0x40020488
 8005b64:	400204a0 	.word	0x400204a0
 8005b68:	400204b8 	.word	0x400204b8
 8005b6c:	58025408 	.word	0x58025408
 8005b70:	5802541c 	.word	0x5802541c
 8005b74:	58025430 	.word	0x58025430
 8005b78:	58025444 	.word	0x58025444
 8005b7c:	58025458 	.word	0x58025458
 8005b80:	5802546c 	.word	0x5802546c
 8005b84:	58025480 	.word	0x58025480
 8005b88:	58025494 	.word	0x58025494

08005b8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e205      	b.n	8005faa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2280      	movs	r2, #128	; 0x80
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e1fa      	b.n	8005faa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a8c      	ldr	r2, [pc, #560]	; (8005dec <HAL_DMA_Abort_IT+0x260>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d04a      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a8b      	ldr	r2, [pc, #556]	; (8005df0 <HAL_DMA_Abort_IT+0x264>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d045      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a89      	ldr	r2, [pc, #548]	; (8005df4 <HAL_DMA_Abort_IT+0x268>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d040      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a88      	ldr	r2, [pc, #544]	; (8005df8 <HAL_DMA_Abort_IT+0x26c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d03b      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a86      	ldr	r2, [pc, #536]	; (8005dfc <HAL_DMA_Abort_IT+0x270>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d036      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a85      	ldr	r2, [pc, #532]	; (8005e00 <HAL_DMA_Abort_IT+0x274>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d031      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a83      	ldr	r2, [pc, #524]	; (8005e04 <HAL_DMA_Abort_IT+0x278>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d02c      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a82      	ldr	r2, [pc, #520]	; (8005e08 <HAL_DMA_Abort_IT+0x27c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d027      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a80      	ldr	r2, [pc, #512]	; (8005e0c <HAL_DMA_Abort_IT+0x280>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d022      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a7f      	ldr	r2, [pc, #508]	; (8005e10 <HAL_DMA_Abort_IT+0x284>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d01d      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a7d      	ldr	r2, [pc, #500]	; (8005e14 <HAL_DMA_Abort_IT+0x288>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d018      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a7c      	ldr	r2, [pc, #496]	; (8005e18 <HAL_DMA_Abort_IT+0x28c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a7a      	ldr	r2, [pc, #488]	; (8005e1c <HAL_DMA_Abort_IT+0x290>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a79      	ldr	r2, [pc, #484]	; (8005e20 <HAL_DMA_Abort_IT+0x294>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a77      	ldr	r2, [pc, #476]	; (8005e24 <HAL_DMA_Abort_IT+0x298>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_DMA_Abort_IT+0xc8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a76      	ldr	r2, [pc, #472]	; (8005e28 <HAL_DMA_Abort_IT+0x29c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <HAL_DMA_Abort_IT+0xcc>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_DMA_Abort_IT+0xce>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d065      	beq.n	8005d2a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2204      	movs	r2, #4
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a60      	ldr	r2, [pc, #384]	; (8005dec <HAL_DMA_Abort_IT+0x260>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d04a      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a5e      	ldr	r2, [pc, #376]	; (8005df0 <HAL_DMA_Abort_IT+0x264>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d045      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a5d      	ldr	r2, [pc, #372]	; (8005df4 <HAL_DMA_Abort_IT+0x268>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d040      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a5b      	ldr	r2, [pc, #364]	; (8005df8 <HAL_DMA_Abort_IT+0x26c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d03b      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a5a      	ldr	r2, [pc, #360]	; (8005dfc <HAL_DMA_Abort_IT+0x270>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d036      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a58      	ldr	r2, [pc, #352]	; (8005e00 <HAL_DMA_Abort_IT+0x274>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d031      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a57      	ldr	r2, [pc, #348]	; (8005e04 <HAL_DMA_Abort_IT+0x278>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d02c      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a55      	ldr	r2, [pc, #340]	; (8005e08 <HAL_DMA_Abort_IT+0x27c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d027      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a54      	ldr	r2, [pc, #336]	; (8005e0c <HAL_DMA_Abort_IT+0x280>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a52      	ldr	r2, [pc, #328]	; (8005e10 <HAL_DMA_Abort_IT+0x284>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01d      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a51      	ldr	r2, [pc, #324]	; (8005e14 <HAL_DMA_Abort_IT+0x288>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a4f      	ldr	r2, [pc, #316]	; (8005e18 <HAL_DMA_Abort_IT+0x28c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a4e      	ldr	r2, [pc, #312]	; (8005e1c <HAL_DMA_Abort_IT+0x290>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a4c      	ldr	r2, [pc, #304]	; (8005e20 <HAL_DMA_Abort_IT+0x294>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a4b      	ldr	r2, [pc, #300]	; (8005e24 <HAL_DMA_Abort_IT+0x298>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_DMA_Abort_IT+0x17a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a49      	ldr	r2, [pc, #292]	; (8005e28 <HAL_DMA_Abort_IT+0x29c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <HAL_DMA_Abort_IT+0x18c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0201 	bic.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e147      	b.n	8005fa8 <HAL_DMA_Abort_IT+0x41c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0201 	bic.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e13e      	b.n	8005fa8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 020e 	bic.w	r2, r2, #14
 8005d38:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2b      	ldr	r2, [pc, #172]	; (8005dec <HAL_DMA_Abort_IT+0x260>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d04a      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a29      	ldr	r2, [pc, #164]	; (8005df0 <HAL_DMA_Abort_IT+0x264>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d045      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <HAL_DMA_Abort_IT+0x268>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d040      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <HAL_DMA_Abort_IT+0x26c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d03b      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <HAL_DMA_Abort_IT+0x270>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d036      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a23      	ldr	r2, [pc, #140]	; (8005e00 <HAL_DMA_Abort_IT+0x274>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d031      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <HAL_DMA_Abort_IT+0x278>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d02c      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <HAL_DMA_Abort_IT+0x27c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d027      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <HAL_DMA_Abort_IT+0x280>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d022      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <HAL_DMA_Abort_IT+0x284>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01d      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <HAL_DMA_Abort_IT+0x288>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d018      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1a      	ldr	r2, [pc, #104]	; (8005e18 <HAL_DMA_Abort_IT+0x28c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <HAL_DMA_Abort_IT+0x290>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00e      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a17      	ldr	r2, [pc, #92]	; (8005e20 <HAL_DMA_Abort_IT+0x294>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a16      	ldr	r2, [pc, #88]	; (8005e24 <HAL_DMA_Abort_IT+0x298>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_DMA_Abort_IT+0x24e>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <HAL_DMA_Abort_IT+0x29c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d128      	bne.n	8005e2c <HAL_DMA_Abort_IT+0x2a0>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e027      	b.n	8005e3c <HAL_DMA_Abort_IT+0x2b0>
 8005dec:	40020010 	.word	0x40020010
 8005df0:	40020028 	.word	0x40020028
 8005df4:	40020040 	.word	0x40020040
 8005df8:	40020058 	.word	0x40020058
 8005dfc:	40020070 	.word	0x40020070
 8005e00:	40020088 	.word	0x40020088
 8005e04:	400200a0 	.word	0x400200a0
 8005e08:	400200b8 	.word	0x400200b8
 8005e0c:	40020410 	.word	0x40020410
 8005e10:	40020428 	.word	0x40020428
 8005e14:	40020440 	.word	0x40020440
 8005e18:	40020458 	.word	0x40020458
 8005e1c:	40020470 	.word	0x40020470
 8005e20:	40020488 	.word	0x40020488
 8005e24:	400204a0 	.word	0x400204a0
 8005e28:	400204b8 	.word	0x400204b8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a5c      	ldr	r2, [pc, #368]	; (8005fb4 <HAL_DMA_Abort_IT+0x428>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d072      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a5b      	ldr	r2, [pc, #364]	; (8005fb8 <HAL_DMA_Abort_IT+0x42c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d06d      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a59      	ldr	r2, [pc, #356]	; (8005fbc <HAL_DMA_Abort_IT+0x430>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d068      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a58      	ldr	r2, [pc, #352]	; (8005fc0 <HAL_DMA_Abort_IT+0x434>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d063      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a56      	ldr	r2, [pc, #344]	; (8005fc4 <HAL_DMA_Abort_IT+0x438>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d05e      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a55      	ldr	r2, [pc, #340]	; (8005fc8 <HAL_DMA_Abort_IT+0x43c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d059      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a53      	ldr	r2, [pc, #332]	; (8005fcc <HAL_DMA_Abort_IT+0x440>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d054      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a52      	ldr	r2, [pc, #328]	; (8005fd0 <HAL_DMA_Abort_IT+0x444>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d04f      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a50      	ldr	r2, [pc, #320]	; (8005fd4 <HAL_DMA_Abort_IT+0x448>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d04a      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a4f      	ldr	r2, [pc, #316]	; (8005fd8 <HAL_DMA_Abort_IT+0x44c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d045      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a4d      	ldr	r2, [pc, #308]	; (8005fdc <HAL_DMA_Abort_IT+0x450>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d040      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a4c      	ldr	r2, [pc, #304]	; (8005fe0 <HAL_DMA_Abort_IT+0x454>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d03b      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <HAL_DMA_Abort_IT+0x458>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d036      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a49      	ldr	r2, [pc, #292]	; (8005fe8 <HAL_DMA_Abort_IT+0x45c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d031      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a47      	ldr	r2, [pc, #284]	; (8005fec <HAL_DMA_Abort_IT+0x460>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d02c      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a46      	ldr	r2, [pc, #280]	; (8005ff0 <HAL_DMA_Abort_IT+0x464>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d027      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a44      	ldr	r2, [pc, #272]	; (8005ff4 <HAL_DMA_Abort_IT+0x468>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a43      	ldr	r2, [pc, #268]	; (8005ff8 <HAL_DMA_Abort_IT+0x46c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d01d      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a41      	ldr	r2, [pc, #260]	; (8005ffc <HAL_DMA_Abort_IT+0x470>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a40      	ldr	r2, [pc, #256]	; (8006000 <HAL_DMA_Abort_IT+0x474>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a3e      	ldr	r2, [pc, #248]	; (8006004 <HAL_DMA_Abort_IT+0x478>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a3d      	ldr	r2, [pc, #244]	; (8006008 <HAL_DMA_Abort_IT+0x47c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a3b      	ldr	r2, [pc, #236]	; (800600c <HAL_DMA_Abort_IT+0x480>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x3a0>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a3a      	ldr	r2, [pc, #232]	; (8006010 <HAL_DMA_Abort_IT+0x484>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <HAL_DMA_Abort_IT+0x3a4>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_DMA_Abort_IT+0x3a6>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d028      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	2201      	movs	r2, #1
 8005f56:	409a      	lsls	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00c      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40020010 	.word	0x40020010
 8005fb8:	40020028 	.word	0x40020028
 8005fbc:	40020040 	.word	0x40020040
 8005fc0:	40020058 	.word	0x40020058
 8005fc4:	40020070 	.word	0x40020070
 8005fc8:	40020088 	.word	0x40020088
 8005fcc:	400200a0 	.word	0x400200a0
 8005fd0:	400200b8 	.word	0x400200b8
 8005fd4:	40020410 	.word	0x40020410
 8005fd8:	40020428 	.word	0x40020428
 8005fdc:	40020440 	.word	0x40020440
 8005fe0:	40020458 	.word	0x40020458
 8005fe4:	40020470 	.word	0x40020470
 8005fe8:	40020488 	.word	0x40020488
 8005fec:	400204a0 	.word	0x400204a0
 8005ff0:	400204b8 	.word	0x400204b8
 8005ff4:	58025408 	.word	0x58025408
 8005ff8:	5802541c 	.word	0x5802541c
 8005ffc:	58025430 	.word	0x58025430
 8006000:	58025444 	.word	0x58025444
 8006004:	58025458 	.word	0x58025458
 8006008:	5802546c 	.word	0x5802546c
 800600c:	58025480 	.word	0x58025480
 8006010:	58025494 	.word	0x58025494

08006014 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006020:	4b67      	ldr	r3, [pc, #412]	; (80061c0 <HAL_DMA_IRQHandler+0x1ac>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a67      	ldr	r2, [pc, #412]	; (80061c4 <HAL_DMA_IRQHandler+0x1b0>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	0a9b      	lsrs	r3, r3, #10
 800602c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a5f      	ldr	r2, [pc, #380]	; (80061c8 <HAL_DMA_IRQHandler+0x1b4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d04a      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a5d      	ldr	r2, [pc, #372]	; (80061cc <HAL_DMA_IRQHandler+0x1b8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d045      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a5c      	ldr	r2, [pc, #368]	; (80061d0 <HAL_DMA_IRQHandler+0x1bc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d040      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5a      	ldr	r2, [pc, #360]	; (80061d4 <HAL_DMA_IRQHandler+0x1c0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d03b      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a59      	ldr	r2, [pc, #356]	; (80061d8 <HAL_DMA_IRQHandler+0x1c4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d036      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a57      	ldr	r2, [pc, #348]	; (80061dc <HAL_DMA_IRQHandler+0x1c8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d031      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a56      	ldr	r2, [pc, #344]	; (80061e0 <HAL_DMA_IRQHandler+0x1cc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d02c      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a54      	ldr	r2, [pc, #336]	; (80061e4 <HAL_DMA_IRQHandler+0x1d0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d027      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a53      	ldr	r2, [pc, #332]	; (80061e8 <HAL_DMA_IRQHandler+0x1d4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d022      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a51      	ldr	r2, [pc, #324]	; (80061ec <HAL_DMA_IRQHandler+0x1d8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01d      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a50      	ldr	r2, [pc, #320]	; (80061f0 <HAL_DMA_IRQHandler+0x1dc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d018      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a4e      	ldr	r2, [pc, #312]	; (80061f4 <HAL_DMA_IRQHandler+0x1e0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a4d      	ldr	r2, [pc, #308]	; (80061f8 <HAL_DMA_IRQHandler+0x1e4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00e      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a4b      	ldr	r2, [pc, #300]	; (80061fc <HAL_DMA_IRQHandler+0x1e8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d009      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a4a      	ldr	r2, [pc, #296]	; (8006200 <HAL_DMA_IRQHandler+0x1ec>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d004      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xd2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a48      	ldr	r2, [pc, #288]	; (8006204 <HAL_DMA_IRQHandler+0x1f0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d101      	bne.n	80060ea <HAL_DMA_IRQHandler+0xd6>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <HAL_DMA_IRQHandler+0xd8>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 842b 	beq.w	8006948 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2208      	movs	r2, #8
 80060fc:	409a      	lsls	r2, r3
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80a2 	beq.w	800624c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2e      	ldr	r2, [pc, #184]	; (80061c8 <HAL_DMA_IRQHandler+0x1b4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d04a      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2d      	ldr	r2, [pc, #180]	; (80061cc <HAL_DMA_IRQHandler+0x1b8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d045      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2b      	ldr	r2, [pc, #172]	; (80061d0 <HAL_DMA_IRQHandler+0x1bc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d040      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2a      	ldr	r2, [pc, #168]	; (80061d4 <HAL_DMA_IRQHandler+0x1c0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d03b      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a28      	ldr	r2, [pc, #160]	; (80061d8 <HAL_DMA_IRQHandler+0x1c4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d036      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a27      	ldr	r2, [pc, #156]	; (80061dc <HAL_DMA_IRQHandler+0x1c8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d031      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a25      	ldr	r2, [pc, #148]	; (80061e0 <HAL_DMA_IRQHandler+0x1cc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d02c      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a24      	ldr	r2, [pc, #144]	; (80061e4 <HAL_DMA_IRQHandler+0x1d0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d027      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a22      	ldr	r2, [pc, #136]	; (80061e8 <HAL_DMA_IRQHandler+0x1d4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d022      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a21      	ldr	r2, [pc, #132]	; (80061ec <HAL_DMA_IRQHandler+0x1d8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d01d      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1f      	ldr	r2, [pc, #124]	; (80061f0 <HAL_DMA_IRQHandler+0x1dc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d018      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1e      	ldr	r2, [pc, #120]	; (80061f4 <HAL_DMA_IRQHandler+0x1e0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <HAL_DMA_IRQHandler+0x1e4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <HAL_DMA_IRQHandler+0x1e8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a19      	ldr	r2, [pc, #100]	; (8006200 <HAL_DMA_IRQHandler+0x1ec>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x194>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <HAL_DMA_IRQHandler+0x1f0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d12f      	bne.n	8006208 <HAL_DMA_IRQHandler+0x1f4>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bf14      	ite	ne
 80061b6:	2301      	movne	r3, #1
 80061b8:	2300      	moveq	r3, #0
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	e02e      	b.n	800621c <HAL_DMA_IRQHandler+0x208>
 80061be:	bf00      	nop
 80061c0:	240000d0 	.word	0x240000d0
 80061c4:	1b4e81b5 	.word	0x1b4e81b5
 80061c8:	40020010 	.word	0x40020010
 80061cc:	40020028 	.word	0x40020028
 80061d0:	40020040 	.word	0x40020040
 80061d4:	40020058 	.word	0x40020058
 80061d8:	40020070 	.word	0x40020070
 80061dc:	40020088 	.word	0x40020088
 80061e0:	400200a0 	.word	0x400200a0
 80061e4:	400200b8 	.word	0x400200b8
 80061e8:	40020410 	.word	0x40020410
 80061ec:	40020428 	.word	0x40020428
 80061f0:	40020440 	.word	0x40020440
 80061f4:	40020458 	.word	0x40020458
 80061f8:	40020470 	.word	0x40020470
 80061fc:	40020488 	.word	0x40020488
 8006200:	400204a0 	.word	0x400204a0
 8006204:	400204b8 	.word	0x400204b8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d015      	beq.n	800624c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	2208      	movs	r2, #8
 800623a:	409a      	lsls	r2, r3
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006244:	f043 0201 	orr.w	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d06e      	beq.n	8006340 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a69      	ldr	r2, [pc, #420]	; (800640c <HAL_DMA_IRQHandler+0x3f8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d04a      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a67      	ldr	r2, [pc, #412]	; (8006410 <HAL_DMA_IRQHandler+0x3fc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d045      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a66      	ldr	r2, [pc, #408]	; (8006414 <HAL_DMA_IRQHandler+0x400>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d040      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a64      	ldr	r2, [pc, #400]	; (8006418 <HAL_DMA_IRQHandler+0x404>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d03b      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a63      	ldr	r2, [pc, #396]	; (800641c <HAL_DMA_IRQHandler+0x408>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d036      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a61      	ldr	r2, [pc, #388]	; (8006420 <HAL_DMA_IRQHandler+0x40c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d031      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a60      	ldr	r2, [pc, #384]	; (8006424 <HAL_DMA_IRQHandler+0x410>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d02c      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a5e      	ldr	r2, [pc, #376]	; (8006428 <HAL_DMA_IRQHandler+0x414>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d027      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a5d      	ldr	r2, [pc, #372]	; (800642c <HAL_DMA_IRQHandler+0x418>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d022      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a5b      	ldr	r2, [pc, #364]	; (8006430 <HAL_DMA_IRQHandler+0x41c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01d      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a5a      	ldr	r2, [pc, #360]	; (8006434 <HAL_DMA_IRQHandler+0x420>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a58      	ldr	r2, [pc, #352]	; (8006438 <HAL_DMA_IRQHandler+0x424>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a57      	ldr	r2, [pc, #348]	; (800643c <HAL_DMA_IRQHandler+0x428>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a55      	ldr	r2, [pc, #340]	; (8006440 <HAL_DMA_IRQHandler+0x42c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a54      	ldr	r2, [pc, #336]	; (8006444 <HAL_DMA_IRQHandler+0x430>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_DMA_IRQHandler+0x2ee>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a52      	ldr	r2, [pc, #328]	; (8006448 <HAL_DMA_IRQHandler+0x434>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10a      	bne.n	8006318 <HAL_DMA_IRQHandler+0x304>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	2b00      	cmp	r3, #0
 800630e:	bf14      	ite	ne
 8006310:	2301      	movne	r3, #1
 8006312:	2300      	moveq	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	e003      	b.n	8006320 <HAL_DMA_IRQHandler+0x30c>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2201      	movs	r2, #1
 800632e:	409a      	lsls	r2, r3
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006338:	f043 0202 	orr.w	r2, r3, #2
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2204      	movs	r2, #4
 800634a:	409a      	lsls	r2, r3
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	4013      	ands	r3, r2
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 808f 	beq.w	8006474 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a2c      	ldr	r2, [pc, #176]	; (800640c <HAL_DMA_IRQHandler+0x3f8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d04a      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <HAL_DMA_IRQHandler+0x3fc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d045      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a29      	ldr	r2, [pc, #164]	; (8006414 <HAL_DMA_IRQHandler+0x400>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d040      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a27      	ldr	r2, [pc, #156]	; (8006418 <HAL_DMA_IRQHandler+0x404>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d03b      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a26      	ldr	r2, [pc, #152]	; (800641c <HAL_DMA_IRQHandler+0x408>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d036      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a24      	ldr	r2, [pc, #144]	; (8006420 <HAL_DMA_IRQHandler+0x40c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d031      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a23      	ldr	r2, [pc, #140]	; (8006424 <HAL_DMA_IRQHandler+0x410>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d02c      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a21      	ldr	r2, [pc, #132]	; (8006428 <HAL_DMA_IRQHandler+0x414>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d027      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a20      	ldr	r2, [pc, #128]	; (800642c <HAL_DMA_IRQHandler+0x418>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d022      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <HAL_DMA_IRQHandler+0x41c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d01d      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <HAL_DMA_IRQHandler+0x420>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d018      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <HAL_DMA_IRQHandler+0x424>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1a      	ldr	r2, [pc, #104]	; (800643c <HAL_DMA_IRQHandler+0x428>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00e      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a18      	ldr	r2, [pc, #96]	; (8006440 <HAL_DMA_IRQHandler+0x42c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d009      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a17      	ldr	r2, [pc, #92]	; (8006444 <HAL_DMA_IRQHandler+0x430>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d004      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x3e2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a15      	ldr	r2, [pc, #84]	; (8006448 <HAL_DMA_IRQHandler+0x434>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d12a      	bne.n	800644c <HAL_DMA_IRQHandler+0x438>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e023      	b.n	8006454 <HAL_DMA_IRQHandler+0x440>
 800640c:	40020010 	.word	0x40020010
 8006410:	40020028 	.word	0x40020028
 8006414:	40020040 	.word	0x40020040
 8006418:	40020058 	.word	0x40020058
 800641c:	40020070 	.word	0x40020070
 8006420:	40020088 	.word	0x40020088
 8006424:	400200a0 	.word	0x400200a0
 8006428:	400200b8 	.word	0x400200b8
 800642c:	40020410 	.word	0x40020410
 8006430:	40020428 	.word	0x40020428
 8006434:	40020440 	.word	0x40020440
 8006438:	40020458 	.word	0x40020458
 800643c:	40020470 	.word	0x40020470
 8006440:	40020488 	.word	0x40020488
 8006444:	400204a0 	.word	0x400204a0
 8006448:	400204b8 	.word	0x400204b8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2300      	movs	r3, #0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	2204      	movs	r2, #4
 8006462:	409a      	lsls	r2, r3
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646c:	f043 0204 	orr.w	r2, r3, #4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2210      	movs	r2, #16
 800647e:	409a      	lsls	r2, r3
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	4013      	ands	r3, r2
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80a6 	beq.w	80065d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a85      	ldr	r2, [pc, #532]	; (80066a4 <HAL_DMA_IRQHandler+0x690>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d04a      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a83      	ldr	r2, [pc, #524]	; (80066a8 <HAL_DMA_IRQHandler+0x694>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d045      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a82      	ldr	r2, [pc, #520]	; (80066ac <HAL_DMA_IRQHandler+0x698>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d040      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a80      	ldr	r2, [pc, #512]	; (80066b0 <HAL_DMA_IRQHandler+0x69c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d03b      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a7f      	ldr	r2, [pc, #508]	; (80066b4 <HAL_DMA_IRQHandler+0x6a0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d036      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a7d      	ldr	r2, [pc, #500]	; (80066b8 <HAL_DMA_IRQHandler+0x6a4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d031      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a7c      	ldr	r2, [pc, #496]	; (80066bc <HAL_DMA_IRQHandler+0x6a8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d02c      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a7a      	ldr	r2, [pc, #488]	; (80066c0 <HAL_DMA_IRQHandler+0x6ac>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d027      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a79      	ldr	r2, [pc, #484]	; (80066c4 <HAL_DMA_IRQHandler+0x6b0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d022      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a77      	ldr	r2, [pc, #476]	; (80066c8 <HAL_DMA_IRQHandler+0x6b4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01d      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a76      	ldr	r2, [pc, #472]	; (80066cc <HAL_DMA_IRQHandler+0x6b8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d018      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a74      	ldr	r2, [pc, #464]	; (80066d0 <HAL_DMA_IRQHandler+0x6bc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a73      	ldr	r2, [pc, #460]	; (80066d4 <HAL_DMA_IRQHandler+0x6c0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00e      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a71      	ldr	r2, [pc, #452]	; (80066d8 <HAL_DMA_IRQHandler+0x6c4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d009      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a70      	ldr	r2, [pc, #448]	; (80066dc <HAL_DMA_IRQHandler+0x6c8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d004      	beq.n	800652a <HAL_DMA_IRQHandler+0x516>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a6e      	ldr	r2, [pc, #440]	; (80066e0 <HAL_DMA_IRQHandler+0x6cc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d10a      	bne.n	8006540 <HAL_DMA_IRQHandler+0x52c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e009      	b.n	8006554 <HAL_DMA_IRQHandler+0x540>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf14      	ite	ne
 800654e:	2301      	movne	r3, #1
 8006550:	2300      	moveq	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d03e      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2210      	movs	r2, #16
 8006562:	409a      	lsls	r2, r3
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d018      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d108      	bne.n	8006596 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d024      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
 8006594:	e01f      	b.n	80065d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01b      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
 80065a6:	e016      	b.n	80065d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d107      	bne.n	80065c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0208 	bic.w	r2, r2, #8
 80065c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2220      	movs	r2, #32
 80065e0:	409a      	lsls	r2, r3
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 8110 	beq.w	800680c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <HAL_DMA_IRQHandler+0x690>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d04a      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a2b      	ldr	r2, [pc, #172]	; (80066a8 <HAL_DMA_IRQHandler+0x694>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d045      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a29      	ldr	r2, [pc, #164]	; (80066ac <HAL_DMA_IRQHandler+0x698>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d040      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a28      	ldr	r2, [pc, #160]	; (80066b0 <HAL_DMA_IRQHandler+0x69c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d03b      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a26      	ldr	r2, [pc, #152]	; (80066b4 <HAL_DMA_IRQHandler+0x6a0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d036      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a25      	ldr	r2, [pc, #148]	; (80066b8 <HAL_DMA_IRQHandler+0x6a4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d031      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a23      	ldr	r2, [pc, #140]	; (80066bc <HAL_DMA_IRQHandler+0x6a8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d02c      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a22      	ldr	r2, [pc, #136]	; (80066c0 <HAL_DMA_IRQHandler+0x6ac>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d027      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <HAL_DMA_IRQHandler+0x6b0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d022      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <HAL_DMA_IRQHandler+0x6b4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d01d      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1d      	ldr	r2, [pc, #116]	; (80066cc <HAL_DMA_IRQHandler+0x6b8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d018      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <HAL_DMA_IRQHandler+0x6bc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1a      	ldr	r2, [pc, #104]	; (80066d4 <HAL_DMA_IRQHandler+0x6c0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00e      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <HAL_DMA_IRQHandler+0x6c4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a17      	ldr	r2, [pc, #92]	; (80066dc <HAL_DMA_IRQHandler+0x6c8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_DMA_IRQHandler+0x678>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <HAL_DMA_IRQHandler+0x6cc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d12b      	bne.n	80066e4 <HAL_DMA_IRQHandler+0x6d0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	bf14      	ite	ne
 800669a:	2301      	movne	r3, #1
 800669c:	2300      	moveq	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	e02a      	b.n	80066f8 <HAL_DMA_IRQHandler+0x6e4>
 80066a2:	bf00      	nop
 80066a4:	40020010 	.word	0x40020010
 80066a8:	40020028 	.word	0x40020028
 80066ac:	40020040 	.word	0x40020040
 80066b0:	40020058 	.word	0x40020058
 80066b4:	40020070 	.word	0x40020070
 80066b8:	40020088 	.word	0x40020088
 80066bc:	400200a0 	.word	0x400200a0
 80066c0:	400200b8 	.word	0x400200b8
 80066c4:	40020410 	.word	0x40020410
 80066c8:	40020428 	.word	0x40020428
 80066cc:	40020440 	.word	0x40020440
 80066d0:	40020458 	.word	0x40020458
 80066d4:	40020470 	.word	0x40020470
 80066d8:	40020488 	.word	0x40020488
 80066dc:	400204a0 	.word	0x400204a0
 80066e0:	400204b8 	.word	0x400204b8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bf14      	ite	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	2300      	moveq	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8087 	beq.w	800680c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2220      	movs	r2, #32
 8006708:	409a      	lsls	r2, r3
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b04      	cmp	r3, #4
 8006718:	d139      	bne.n	800678e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0216 	bic.w	r2, r2, #22
 8006728:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	695a      	ldr	r2, [r3, #20]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006738:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <HAL_DMA_IRQHandler+0x736>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0208 	bic.w	r2, r2, #8
 8006758:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	223f      	movs	r2, #63	; 0x3f
 8006764:	409a      	lsls	r2, r3
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 834a 	beq.w	8006e18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
          }
          return;
 800678c:	e344      	b.n	8006e18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d018      	beq.n	80067ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d108      	bne.n	80067bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d02c      	beq.n	800680c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	4798      	blx	r3
 80067ba:	e027      	b.n	800680c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d023      	beq.n	800680c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
 80067cc:	e01e      	b.n	800680c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10f      	bne.n	80067fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0210 	bic.w	r2, r2, #16
 80067ea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8306 	beq.w	8006e22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8088 	beq.w	8006934 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2204      	movs	r2, #4
 8006828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a7a      	ldr	r2, [pc, #488]	; (8006a1c <HAL_DMA_IRQHandler+0xa08>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d04a      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a79      	ldr	r2, [pc, #484]	; (8006a20 <HAL_DMA_IRQHandler+0xa0c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d045      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a77      	ldr	r2, [pc, #476]	; (8006a24 <HAL_DMA_IRQHandler+0xa10>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d040      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a76      	ldr	r2, [pc, #472]	; (8006a28 <HAL_DMA_IRQHandler+0xa14>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d03b      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a74      	ldr	r2, [pc, #464]	; (8006a2c <HAL_DMA_IRQHandler+0xa18>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d036      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a73      	ldr	r2, [pc, #460]	; (8006a30 <HAL_DMA_IRQHandler+0xa1c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d031      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a71      	ldr	r2, [pc, #452]	; (8006a34 <HAL_DMA_IRQHandler+0xa20>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d02c      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a70      	ldr	r2, [pc, #448]	; (8006a38 <HAL_DMA_IRQHandler+0xa24>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d027      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a6e      	ldr	r2, [pc, #440]	; (8006a3c <HAL_DMA_IRQHandler+0xa28>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d022      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a6d      	ldr	r2, [pc, #436]	; (8006a40 <HAL_DMA_IRQHandler+0xa2c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d01d      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a6b      	ldr	r2, [pc, #428]	; (8006a44 <HAL_DMA_IRQHandler+0xa30>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d018      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a6a      	ldr	r2, [pc, #424]	; (8006a48 <HAL_DMA_IRQHandler+0xa34>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a68      	ldr	r2, [pc, #416]	; (8006a4c <HAL_DMA_IRQHandler+0xa38>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00e      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a67      	ldr	r2, [pc, #412]	; (8006a50 <HAL_DMA_IRQHandler+0xa3c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d009      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a65      	ldr	r2, [pc, #404]	; (8006a54 <HAL_DMA_IRQHandler+0xa40>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d004      	beq.n	80068cc <HAL_DMA_IRQHandler+0x8b8>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a64      	ldr	r2, [pc, #400]	; (8006a58 <HAL_DMA_IRQHandler+0xa44>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d108      	bne.n	80068de <HAL_DMA_IRQHandler+0x8ca>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0201 	bic.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e007      	b.n	80068ee <HAL_DMA_IRQHandler+0x8da>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0201 	bic.w	r2, r2, #1
 80068ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d307      	bcc.n	800690a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1f2      	bne.n	80068ee <HAL_DMA_IRQHandler+0x8da>
 8006908:	e000      	b.n	800690c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800690a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2203      	movs	r2, #3
 8006926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800692a:	e003      	b.n	8006934 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8272 	beq.w	8006e22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
 8006946:	e26c      	b.n	8006e22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a43      	ldr	r2, [pc, #268]	; (8006a5c <HAL_DMA_IRQHandler+0xa48>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d022      	beq.n	8006998 <HAL_DMA_IRQHandler+0x984>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a42      	ldr	r2, [pc, #264]	; (8006a60 <HAL_DMA_IRQHandler+0xa4c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d01d      	beq.n	8006998 <HAL_DMA_IRQHandler+0x984>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a40      	ldr	r2, [pc, #256]	; (8006a64 <HAL_DMA_IRQHandler+0xa50>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d018      	beq.n	8006998 <HAL_DMA_IRQHandler+0x984>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a3f      	ldr	r2, [pc, #252]	; (8006a68 <HAL_DMA_IRQHandler+0xa54>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <HAL_DMA_IRQHandler+0x984>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a3d      	ldr	r2, [pc, #244]	; (8006a6c <HAL_DMA_IRQHandler+0xa58>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00e      	beq.n	8006998 <HAL_DMA_IRQHandler+0x984>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a3c      	ldr	r2, [pc, #240]	; (8006a70 <HAL_DMA_IRQHandler+0xa5c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d009      	beq.n	8006998 <HAL_DMA_IRQHandler+0x984>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a3a      	ldr	r2, [pc, #232]	; (8006a74 <HAL_DMA_IRQHandler+0xa60>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <HAL_DMA_IRQHandler+0x984>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a39      	ldr	r2, [pc, #228]	; (8006a78 <HAL_DMA_IRQHandler+0xa64>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d101      	bne.n	800699c <HAL_DMA_IRQHandler+0x988>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <HAL_DMA_IRQHandler+0x98a>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 823f 	beq.w	8006e22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	2204      	movs	r2, #4
 80069b6:	409a      	lsls	r2, r3
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80cd 	beq.w	8006b5c <HAL_DMA_IRQHandler+0xb48>
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80c7 	beq.w	8006b5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	2204      	movs	r2, #4
 80069d8:	409a      	lsls	r2, r3
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d049      	beq.n	8006a7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 8210 	beq.w	8006e1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a04:	e20a      	b.n	8006e1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8206 	beq.w	8006e1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a18:	e200      	b.n	8006e1c <HAL_DMA_IRQHandler+0xe08>
 8006a1a:	bf00      	nop
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
 8006a5c:	58025408 	.word	0x58025408
 8006a60:	5802541c 	.word	0x5802541c
 8006a64:	58025430 	.word	0x58025430
 8006a68:	58025444 	.word	0x58025444
 8006a6c:	58025458 	.word	0x58025458
 8006a70:	5802546c 	.word	0x5802546c
 8006a74:	58025480 	.word	0x58025480
 8006a78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d160      	bne.n	8006b48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a8c      	ldr	r2, [pc, #560]	; (8006cbc <HAL_DMA_IRQHandler+0xca8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d04a      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a8a      	ldr	r2, [pc, #552]	; (8006cc0 <HAL_DMA_IRQHandler+0xcac>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d045      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a89      	ldr	r2, [pc, #548]	; (8006cc4 <HAL_DMA_IRQHandler+0xcb0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d040      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a87      	ldr	r2, [pc, #540]	; (8006cc8 <HAL_DMA_IRQHandler+0xcb4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d03b      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a86      	ldr	r2, [pc, #536]	; (8006ccc <HAL_DMA_IRQHandler+0xcb8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d036      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a84      	ldr	r2, [pc, #528]	; (8006cd0 <HAL_DMA_IRQHandler+0xcbc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d031      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a83      	ldr	r2, [pc, #524]	; (8006cd4 <HAL_DMA_IRQHandler+0xcc0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d02c      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a81      	ldr	r2, [pc, #516]	; (8006cd8 <HAL_DMA_IRQHandler+0xcc4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d027      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a80      	ldr	r2, [pc, #512]	; (8006cdc <HAL_DMA_IRQHandler+0xcc8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d022      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a7e      	ldr	r2, [pc, #504]	; (8006ce0 <HAL_DMA_IRQHandler+0xccc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d01d      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a7d      	ldr	r2, [pc, #500]	; (8006ce4 <HAL_DMA_IRQHandler+0xcd0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d018      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a7b      	ldr	r2, [pc, #492]	; (8006ce8 <HAL_DMA_IRQHandler+0xcd4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d013      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7a      	ldr	r2, [pc, #488]	; (8006cec <HAL_DMA_IRQHandler+0xcd8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00e      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a78      	ldr	r2, [pc, #480]	; (8006cf0 <HAL_DMA_IRQHandler+0xcdc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d009      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a77      	ldr	r2, [pc, #476]	; (8006cf4 <HAL_DMA_IRQHandler+0xce0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d004      	beq.n	8006b26 <HAL_DMA_IRQHandler+0xb12>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a75      	ldr	r2, [pc, #468]	; (8006cf8 <HAL_DMA_IRQHandler+0xce4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d108      	bne.n	8006b38 <HAL_DMA_IRQHandler+0xb24>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0208 	bic.w	r2, r2, #8
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e007      	b.n	8006b48 <HAL_DMA_IRQHandler+0xb34>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0204 	bic.w	r2, r2, #4
 8006b46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8165 	beq.w	8006e1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b5a:	e15f      	b.n	8006e1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b60:	f003 031f 	and.w	r3, r3, #31
 8006b64:	2202      	movs	r2, #2
 8006b66:	409a      	lsls	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80c5 	beq.w	8006cfc <HAL_DMA_IRQHandler+0xce8>
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80bf 	beq.w	8006cfc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	2202      	movs	r2, #2
 8006b88:	409a      	lsls	r2, r3
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d018      	beq.n	8006bca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 813a 	beq.w	8006e20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb4:	e134      	b.n	8006e20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8130 	beq.w	8006e20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bc8:	e12a      	b.n	8006e20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d168      	bne.n	8006ca6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a38      	ldr	r2, [pc, #224]	; (8006cbc <HAL_DMA_IRQHandler+0xca8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d04a      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a37      	ldr	r2, [pc, #220]	; (8006cc0 <HAL_DMA_IRQHandler+0xcac>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d045      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a35      	ldr	r2, [pc, #212]	; (8006cc4 <HAL_DMA_IRQHandler+0xcb0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d040      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a34      	ldr	r2, [pc, #208]	; (8006cc8 <HAL_DMA_IRQHandler+0xcb4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d03b      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a32      	ldr	r2, [pc, #200]	; (8006ccc <HAL_DMA_IRQHandler+0xcb8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d036      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a31      	ldr	r2, [pc, #196]	; (8006cd0 <HAL_DMA_IRQHandler+0xcbc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d031      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2f      	ldr	r2, [pc, #188]	; (8006cd4 <HAL_DMA_IRQHandler+0xcc0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d02c      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2e      	ldr	r2, [pc, #184]	; (8006cd8 <HAL_DMA_IRQHandler+0xcc4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d027      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <HAL_DMA_IRQHandler+0xcc8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d022      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2b      	ldr	r2, [pc, #172]	; (8006ce0 <HAL_DMA_IRQHandler+0xccc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d01d      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a29      	ldr	r2, [pc, #164]	; (8006ce4 <HAL_DMA_IRQHandler+0xcd0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d018      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a28      	ldr	r2, [pc, #160]	; (8006ce8 <HAL_DMA_IRQHandler+0xcd4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a26      	ldr	r2, [pc, #152]	; (8006cec <HAL_DMA_IRQHandler+0xcd8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00e      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a25      	ldr	r2, [pc, #148]	; (8006cf0 <HAL_DMA_IRQHandler+0xcdc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a23      	ldr	r2, [pc, #140]	; (8006cf4 <HAL_DMA_IRQHandler+0xce0>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xc60>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a22      	ldr	r2, [pc, #136]	; (8006cf8 <HAL_DMA_IRQHandler+0xce4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d108      	bne.n	8006c86 <HAL_DMA_IRQHandler+0xc72>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0214 	bic.w	r2, r2, #20
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e007      	b.n	8006c96 <HAL_DMA_IRQHandler+0xc82>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 020a 	bic.w	r2, r2, #10
 8006c94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80b8 	beq.w	8006e20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb8:	e0b2      	b.n	8006e20 <HAL_DMA_IRQHandler+0xe0c>
 8006cba:	bf00      	nop
 8006cbc:	40020010 	.word	0x40020010
 8006cc0:	40020028 	.word	0x40020028
 8006cc4:	40020040 	.word	0x40020040
 8006cc8:	40020058 	.word	0x40020058
 8006ccc:	40020070 	.word	0x40020070
 8006cd0:	40020088 	.word	0x40020088
 8006cd4:	400200a0 	.word	0x400200a0
 8006cd8:	400200b8 	.word	0x400200b8
 8006cdc:	40020410 	.word	0x40020410
 8006ce0:	40020428 	.word	0x40020428
 8006ce4:	40020440 	.word	0x40020440
 8006ce8:	40020458 	.word	0x40020458
 8006cec:	40020470 	.word	0x40020470
 8006cf0:	40020488 	.word	0x40020488
 8006cf4:	400204a0 	.word	0x400204a0
 8006cf8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2208      	movs	r2, #8
 8006d06:	409a      	lsls	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8088 	beq.w	8006e22 <HAL_DMA_IRQHandler+0xe0e>
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8082 	beq.w	8006e22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a41      	ldr	r2, [pc, #260]	; (8006e28 <HAL_DMA_IRQHandler+0xe14>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d04a      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a3f      	ldr	r2, [pc, #252]	; (8006e2c <HAL_DMA_IRQHandler+0xe18>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d045      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a3e      	ldr	r2, [pc, #248]	; (8006e30 <HAL_DMA_IRQHandler+0xe1c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d040      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a3c      	ldr	r2, [pc, #240]	; (8006e34 <HAL_DMA_IRQHandler+0xe20>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d03b      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a3b      	ldr	r2, [pc, #236]	; (8006e38 <HAL_DMA_IRQHandler+0xe24>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d036      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a39      	ldr	r2, [pc, #228]	; (8006e3c <HAL_DMA_IRQHandler+0xe28>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d031      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a38      	ldr	r2, [pc, #224]	; (8006e40 <HAL_DMA_IRQHandler+0xe2c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d02c      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a36      	ldr	r2, [pc, #216]	; (8006e44 <HAL_DMA_IRQHandler+0xe30>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d027      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a35      	ldr	r2, [pc, #212]	; (8006e48 <HAL_DMA_IRQHandler+0xe34>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d022      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a33      	ldr	r2, [pc, #204]	; (8006e4c <HAL_DMA_IRQHandler+0xe38>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01d      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a32      	ldr	r2, [pc, #200]	; (8006e50 <HAL_DMA_IRQHandler+0xe3c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d018      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a30      	ldr	r2, [pc, #192]	; (8006e54 <HAL_DMA_IRQHandler+0xe40>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a2f      	ldr	r2, [pc, #188]	; (8006e58 <HAL_DMA_IRQHandler+0xe44>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00e      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <HAL_DMA_IRQHandler+0xe48>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d009      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2c      	ldr	r2, [pc, #176]	; (8006e60 <HAL_DMA_IRQHandler+0xe4c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d004      	beq.n	8006dbe <HAL_DMA_IRQHandler+0xdaa>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2a      	ldr	r2, [pc, #168]	; (8006e64 <HAL_DMA_IRQHandler+0xe50>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d108      	bne.n	8006dd0 <HAL_DMA_IRQHandler+0xdbc>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 021c 	bic.w	r2, r2, #28
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e007      	b.n	8006de0 <HAL_DMA_IRQHandler+0xdcc>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 020e 	bic.w	r2, r2, #14
 8006dde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	2201      	movs	r2, #1
 8006dea:	409a      	lsls	r2, r3
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3
 8006e16:	e004      	b.n	8006e22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e18:	bf00      	nop
 8006e1a:	e002      	b.n	8006e22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e22:	3728      	adds	r7, #40	; 0x28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40020010 	.word	0x40020010
 8006e2c:	40020028 	.word	0x40020028
 8006e30:	40020040 	.word	0x40020040
 8006e34:	40020058 	.word	0x40020058
 8006e38:	40020070 	.word	0x40020070
 8006e3c:	40020088 	.word	0x40020088
 8006e40:	400200a0 	.word	0x400200a0
 8006e44:	400200b8 	.word	0x400200b8
 8006e48:	40020410 	.word	0x40020410
 8006e4c:	40020428 	.word	0x40020428
 8006e50:	40020440 	.word	0x40020440
 8006e54:	40020458 	.word	0x40020458
 8006e58:	40020470 	.word	0x40020470
 8006e5c:	40020488 	.word	0x40020488
 8006e60:	400204a0 	.word	0x400204a0
 8006e64:	400204b8 	.word	0x400204b8

08006e68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a84      	ldr	r2, [pc, #528]	; (8007098 <DMA_SetConfig+0x230>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d072      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a82      	ldr	r2, [pc, #520]	; (800709c <DMA_SetConfig+0x234>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d06d      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a81      	ldr	r2, [pc, #516]	; (80070a0 <DMA_SetConfig+0x238>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d068      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a7f      	ldr	r2, [pc, #508]	; (80070a4 <DMA_SetConfig+0x23c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d063      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a7e      	ldr	r2, [pc, #504]	; (80070a8 <DMA_SetConfig+0x240>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d05e      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a7c      	ldr	r2, [pc, #496]	; (80070ac <DMA_SetConfig+0x244>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d059      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a7b      	ldr	r2, [pc, #492]	; (80070b0 <DMA_SetConfig+0x248>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d054      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a79      	ldr	r2, [pc, #484]	; (80070b4 <DMA_SetConfig+0x24c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d04f      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a78      	ldr	r2, [pc, #480]	; (80070b8 <DMA_SetConfig+0x250>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d04a      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a76      	ldr	r2, [pc, #472]	; (80070bc <DMA_SetConfig+0x254>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d045      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a75      	ldr	r2, [pc, #468]	; (80070c0 <DMA_SetConfig+0x258>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d040      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a73      	ldr	r2, [pc, #460]	; (80070c4 <DMA_SetConfig+0x25c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d03b      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a72      	ldr	r2, [pc, #456]	; (80070c8 <DMA_SetConfig+0x260>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d036      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a70      	ldr	r2, [pc, #448]	; (80070cc <DMA_SetConfig+0x264>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d031      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a6f      	ldr	r2, [pc, #444]	; (80070d0 <DMA_SetConfig+0x268>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d02c      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a6d      	ldr	r2, [pc, #436]	; (80070d4 <DMA_SetConfig+0x26c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d027      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6c      	ldr	r2, [pc, #432]	; (80070d8 <DMA_SetConfig+0x270>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d022      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a6a      	ldr	r2, [pc, #424]	; (80070dc <DMA_SetConfig+0x274>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01d      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a69      	ldr	r2, [pc, #420]	; (80070e0 <DMA_SetConfig+0x278>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d018      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a67      	ldr	r2, [pc, #412]	; (80070e4 <DMA_SetConfig+0x27c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a66      	ldr	r2, [pc, #408]	; (80070e8 <DMA_SetConfig+0x280>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a64      	ldr	r2, [pc, #400]	; (80070ec <DMA_SetConfig+0x284>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a63      	ldr	r2, [pc, #396]	; (80070f0 <DMA_SetConfig+0x288>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <DMA_SetConfig+0x10a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a61      	ldr	r2, [pc, #388]	; (80070f4 <DMA_SetConfig+0x28c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d101      	bne.n	8006f76 <DMA_SetConfig+0x10e>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <DMA_SetConfig+0x110>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00d      	beq.n	8006f98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a3e      	ldr	r2, [pc, #248]	; (8007098 <DMA_SetConfig+0x230>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d04a      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a3d      	ldr	r2, [pc, #244]	; (800709c <DMA_SetConfig+0x234>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d045      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a3b      	ldr	r2, [pc, #236]	; (80070a0 <DMA_SetConfig+0x238>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d040      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a3a      	ldr	r2, [pc, #232]	; (80070a4 <DMA_SetConfig+0x23c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d03b      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a38      	ldr	r2, [pc, #224]	; (80070a8 <DMA_SetConfig+0x240>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d036      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a37      	ldr	r2, [pc, #220]	; (80070ac <DMA_SetConfig+0x244>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d031      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a35      	ldr	r2, [pc, #212]	; (80070b0 <DMA_SetConfig+0x248>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d02c      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a34      	ldr	r2, [pc, #208]	; (80070b4 <DMA_SetConfig+0x24c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d027      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a32      	ldr	r2, [pc, #200]	; (80070b8 <DMA_SetConfig+0x250>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d022      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a31      	ldr	r2, [pc, #196]	; (80070bc <DMA_SetConfig+0x254>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d01d      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a2f      	ldr	r2, [pc, #188]	; (80070c0 <DMA_SetConfig+0x258>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d018      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2e      	ldr	r2, [pc, #184]	; (80070c4 <DMA_SetConfig+0x25c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <DMA_SetConfig+0x260>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a2b      	ldr	r2, [pc, #172]	; (80070cc <DMA_SetConfig+0x264>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d009      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a29      	ldr	r2, [pc, #164]	; (80070d0 <DMA_SetConfig+0x268>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <DMA_SetConfig+0x1d0>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a28      	ldr	r2, [pc, #160]	; (80070d4 <DMA_SetConfig+0x26c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d101      	bne.n	800703c <DMA_SetConfig+0x1d4>
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <DMA_SetConfig+0x1d6>
 800703c:	2300      	movs	r3, #0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d05a      	beq.n	80070f8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	223f      	movs	r2, #63	; 0x3f
 800704c:	409a      	lsls	r2, r3
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007060:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d108      	bne.n	8007084 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007082:	e087      	b.n	8007194 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	60da      	str	r2, [r3, #12]
}
 8007094:	e07e      	b.n	8007194 <DMA_SetConfig+0x32c>
 8007096:	bf00      	nop
 8007098:	40020010 	.word	0x40020010
 800709c:	40020028 	.word	0x40020028
 80070a0:	40020040 	.word	0x40020040
 80070a4:	40020058 	.word	0x40020058
 80070a8:	40020070 	.word	0x40020070
 80070ac:	40020088 	.word	0x40020088
 80070b0:	400200a0 	.word	0x400200a0
 80070b4:	400200b8 	.word	0x400200b8
 80070b8:	40020410 	.word	0x40020410
 80070bc:	40020428 	.word	0x40020428
 80070c0:	40020440 	.word	0x40020440
 80070c4:	40020458 	.word	0x40020458
 80070c8:	40020470 	.word	0x40020470
 80070cc:	40020488 	.word	0x40020488
 80070d0:	400204a0 	.word	0x400204a0
 80070d4:	400204b8 	.word	0x400204b8
 80070d8:	58025408 	.word	0x58025408
 80070dc:	5802541c 	.word	0x5802541c
 80070e0:	58025430 	.word	0x58025430
 80070e4:	58025444 	.word	0x58025444
 80070e8:	58025458 	.word	0x58025458
 80070ec:	5802546c 	.word	0x5802546c
 80070f0:	58025480 	.word	0x58025480
 80070f4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a28      	ldr	r2, [pc, #160]	; (80071a0 <DMA_SetConfig+0x338>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d022      	beq.n	8007148 <DMA_SetConfig+0x2e0>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <DMA_SetConfig+0x33c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d01d      	beq.n	8007148 <DMA_SetConfig+0x2e0>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a25      	ldr	r2, [pc, #148]	; (80071a8 <DMA_SetConfig+0x340>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d018      	beq.n	8007148 <DMA_SetConfig+0x2e0>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a24      	ldr	r2, [pc, #144]	; (80071ac <DMA_SetConfig+0x344>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <DMA_SetConfig+0x2e0>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a22      	ldr	r2, [pc, #136]	; (80071b0 <DMA_SetConfig+0x348>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00e      	beq.n	8007148 <DMA_SetConfig+0x2e0>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <DMA_SetConfig+0x34c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d009      	beq.n	8007148 <DMA_SetConfig+0x2e0>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1f      	ldr	r2, [pc, #124]	; (80071b8 <DMA_SetConfig+0x350>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d004      	beq.n	8007148 <DMA_SetConfig+0x2e0>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1e      	ldr	r2, [pc, #120]	; (80071bc <DMA_SetConfig+0x354>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d101      	bne.n	800714c <DMA_SetConfig+0x2e4>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <DMA_SetConfig+0x2e6>
 800714c:	2300      	movs	r3, #0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d020      	beq.n	8007194 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	2201      	movs	r2, #1
 800715c:	409a      	lsls	r2, r3
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b40      	cmp	r3, #64	; 0x40
 8007170:	d108      	bne.n	8007184 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	60da      	str	r2, [r3, #12]
}
 8007182:	e007      	b.n	8007194 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	60da      	str	r2, [r3, #12]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	58025408 	.word	0x58025408
 80071a4:	5802541c 	.word	0x5802541c
 80071a8:	58025430 	.word	0x58025430
 80071ac:	58025444 	.word	0x58025444
 80071b0:	58025458 	.word	0x58025458
 80071b4:	5802546c 	.word	0x5802546c
 80071b8:	58025480 	.word	0x58025480
 80071bc:	58025494 	.word	0x58025494

080071c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a42      	ldr	r2, [pc, #264]	; (80072d8 <DMA_CalcBaseAndBitshift+0x118>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d04a      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a41      	ldr	r2, [pc, #260]	; (80072dc <DMA_CalcBaseAndBitshift+0x11c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d045      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a3f      	ldr	r2, [pc, #252]	; (80072e0 <DMA_CalcBaseAndBitshift+0x120>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d040      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a3e      	ldr	r2, [pc, #248]	; (80072e4 <DMA_CalcBaseAndBitshift+0x124>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d03b      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a3c      	ldr	r2, [pc, #240]	; (80072e8 <DMA_CalcBaseAndBitshift+0x128>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d036      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a3b      	ldr	r2, [pc, #236]	; (80072ec <DMA_CalcBaseAndBitshift+0x12c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d031      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a39      	ldr	r2, [pc, #228]	; (80072f0 <DMA_CalcBaseAndBitshift+0x130>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d02c      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a38      	ldr	r2, [pc, #224]	; (80072f4 <DMA_CalcBaseAndBitshift+0x134>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d027      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a36      	ldr	r2, [pc, #216]	; (80072f8 <DMA_CalcBaseAndBitshift+0x138>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d022      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a35      	ldr	r2, [pc, #212]	; (80072fc <DMA_CalcBaseAndBitshift+0x13c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d01d      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a33      	ldr	r2, [pc, #204]	; (8007300 <DMA_CalcBaseAndBitshift+0x140>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d018      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a32      	ldr	r2, [pc, #200]	; (8007304 <DMA_CalcBaseAndBitshift+0x144>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d013      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a30      	ldr	r2, [pc, #192]	; (8007308 <DMA_CalcBaseAndBitshift+0x148>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00e      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2f      	ldr	r2, [pc, #188]	; (800730c <DMA_CalcBaseAndBitshift+0x14c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d009      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a2d      	ldr	r2, [pc, #180]	; (8007310 <DMA_CalcBaseAndBitshift+0x150>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d004      	beq.n	8007268 <DMA_CalcBaseAndBitshift+0xa8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a2c      	ldr	r2, [pc, #176]	; (8007314 <DMA_CalcBaseAndBitshift+0x154>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d101      	bne.n	800726c <DMA_CalcBaseAndBitshift+0xac>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <DMA_CalcBaseAndBitshift+0xae>
 800726c:	2300      	movs	r3, #0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d024      	beq.n	80072bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	3b10      	subs	r3, #16
 800727a:	4a27      	ldr	r2, [pc, #156]	; (8007318 <DMA_CalcBaseAndBitshift+0x158>)
 800727c:	fba2 2303 	umull	r2, r3, r2, r3
 8007280:	091b      	lsrs	r3, r3, #4
 8007282:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	4a24      	ldr	r2, [pc, #144]	; (800731c <DMA_CalcBaseAndBitshift+0x15c>)
 800728c:	5cd3      	ldrb	r3, [r2, r3]
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b03      	cmp	r3, #3
 8007298:	d908      	bls.n	80072ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	4b1f      	ldr	r3, [pc, #124]	; (8007320 <DMA_CalcBaseAndBitshift+0x160>)
 80072a2:	4013      	ands	r3, r2
 80072a4:	1d1a      	adds	r2, r3, #4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	659a      	str	r2, [r3, #88]	; 0x58
 80072aa:	e00d      	b.n	80072c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	461a      	mov	r2, r3
 80072b2:	4b1b      	ldr	r3, [pc, #108]	; (8007320 <DMA_CalcBaseAndBitshift+0x160>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6593      	str	r3, [r2, #88]	; 0x58
 80072ba:	e005      	b.n	80072c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40020010 	.word	0x40020010
 80072dc:	40020028 	.word	0x40020028
 80072e0:	40020040 	.word	0x40020040
 80072e4:	40020058 	.word	0x40020058
 80072e8:	40020070 	.word	0x40020070
 80072ec:	40020088 	.word	0x40020088
 80072f0:	400200a0 	.word	0x400200a0
 80072f4:	400200b8 	.word	0x400200b8
 80072f8:	40020410 	.word	0x40020410
 80072fc:	40020428 	.word	0x40020428
 8007300:	40020440 	.word	0x40020440
 8007304:	40020458 	.word	0x40020458
 8007308:	40020470 	.word	0x40020470
 800730c:	40020488 	.word	0x40020488
 8007310:	400204a0 	.word	0x400204a0
 8007314:	400204b8 	.word	0x400204b8
 8007318:	aaaaaaab 	.word	0xaaaaaaab
 800731c:	08010514 	.word	0x08010514
 8007320:	fffffc00 	.word	0xfffffc00

08007324 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d120      	bne.n	800737a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	2b03      	cmp	r3, #3
 800733e:	d858      	bhi.n	80073f2 <DMA_CheckFifoParam+0xce>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <DMA_CheckFifoParam+0x24>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	08007359 	.word	0x08007359
 800734c:	0800736b 	.word	0x0800736b
 8007350:	08007359 	.word	0x08007359
 8007354:	080073f3 	.word	0x080073f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d048      	beq.n	80073f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007368:	e045      	b.n	80073f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007372:	d142      	bne.n	80073fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007378:	e03f      	b.n	80073fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007382:	d123      	bne.n	80073cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	2b03      	cmp	r3, #3
 800738a:	d838      	bhi.n	80073fe <DMA_CheckFifoParam+0xda>
 800738c:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <DMA_CheckFifoParam+0x70>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	080073a5 	.word	0x080073a5
 8007398:	080073ab 	.word	0x080073ab
 800739c:	080073a5 	.word	0x080073a5
 80073a0:	080073bd 	.word	0x080073bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
        break;
 80073a8:	e030      	b.n	800740c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d025      	beq.n	8007402 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073ba:	e022      	b.n	8007402 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073c4:	d11f      	bne.n	8007406 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073ca:	e01c      	b.n	8007406 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d902      	bls.n	80073da <DMA_CheckFifoParam+0xb6>
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d003      	beq.n	80073e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80073d8:	e018      	b.n	800740c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	73fb      	strb	r3, [r7, #15]
        break;
 80073de:	e015      	b.n	800740c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00e      	beq.n	800740a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
    break;
 80073f0:	e00b      	b.n	800740a <DMA_CheckFifoParam+0xe6>
        break;
 80073f2:	bf00      	nop
 80073f4:	e00a      	b.n	800740c <DMA_CheckFifoParam+0xe8>
        break;
 80073f6:	bf00      	nop
 80073f8:	e008      	b.n	800740c <DMA_CheckFifoParam+0xe8>
        break;
 80073fa:	bf00      	nop
 80073fc:	e006      	b.n	800740c <DMA_CheckFifoParam+0xe8>
        break;
 80073fe:	bf00      	nop
 8007400:	e004      	b.n	800740c <DMA_CheckFifoParam+0xe8>
        break;
 8007402:	bf00      	nop
 8007404:	e002      	b.n	800740c <DMA_CheckFifoParam+0xe8>
        break;
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <DMA_CheckFifoParam+0xe8>
    break;
 800740a:	bf00      	nop
    }
  }

  return status;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop

0800741c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a38      	ldr	r2, [pc, #224]	; (8007510 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d022      	beq.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a36      	ldr	r2, [pc, #216]	; (8007514 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d01d      	beq.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a35      	ldr	r2, [pc, #212]	; (8007518 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d018      	beq.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a33      	ldr	r2, [pc, #204]	; (800751c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a32      	ldr	r2, [pc, #200]	; (8007520 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00e      	beq.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a30      	ldr	r2, [pc, #192]	; (8007524 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d009      	beq.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2f      	ldr	r2, [pc, #188]	; (8007528 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d004      	beq.n	800747a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a2d      	ldr	r2, [pc, #180]	; (800752c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d101      	bne.n	800747e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01a      	beq.n	80074ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	3b08      	subs	r3, #8
 800748c:	4a28      	ldr	r2, [pc, #160]	; (8007530 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800748e:	fba2 2303 	umull	r2, r3, r2, r3
 8007492:	091b      	lsrs	r3, r3, #4
 8007494:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4b26      	ldr	r3, [pc, #152]	; (8007534 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	461a      	mov	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a24      	ldr	r2, [pc, #144]	; (8007538 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80074a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f003 031f 	and.w	r3, r3, #31
 80074b0:	2201      	movs	r2, #1
 80074b2:	409a      	lsls	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80074b8:	e024      	b.n	8007504 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	3b10      	subs	r3, #16
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80074c4:	fba2 2303 	umull	r2, r3, r2, r3
 80074c8:	091b      	lsrs	r3, r3, #4
 80074ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d806      	bhi.n	80074e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4a1b      	ldr	r2, [pc, #108]	; (8007544 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d902      	bls.n	80074e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3308      	adds	r3, #8
 80074e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4b18      	ldr	r3, [pc, #96]	; (8007548 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	461a      	mov	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a16      	ldr	r2, [pc, #88]	; (800754c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80074f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f003 031f 	and.w	r3, r3, #31
 80074fc:	2201      	movs	r2, #1
 80074fe:	409a      	lsls	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007504:	bf00      	nop
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	58025408 	.word	0x58025408
 8007514:	5802541c 	.word	0x5802541c
 8007518:	58025430 	.word	0x58025430
 800751c:	58025444 	.word	0x58025444
 8007520:	58025458 	.word	0x58025458
 8007524:	5802546c 	.word	0x5802546c
 8007528:	58025480 	.word	0x58025480
 800752c:	58025494 	.word	0x58025494
 8007530:	cccccccd 	.word	0xcccccccd
 8007534:	16009600 	.word	0x16009600
 8007538:	58025880 	.word	0x58025880
 800753c:	aaaaaaab 	.word	0xaaaaaaab
 8007540:	400204b8 	.word	0x400204b8
 8007544:	4002040f 	.word	0x4002040f
 8007548:	10008200 	.word	0x10008200
 800754c:	40020880 	.word	0x40020880

08007550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d04a      	beq.n	80075fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d847      	bhi.n	80075fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a25      	ldr	r2, [pc, #148]	; (8007608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d022      	beq.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a24      	ldr	r2, [pc, #144]	; (800760c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d01d      	beq.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a22      	ldr	r2, [pc, #136]	; (8007610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d018      	beq.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a21      	ldr	r2, [pc, #132]	; (8007614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1f      	ldr	r2, [pc, #124]	; (8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00e      	beq.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1e      	ldr	r2, [pc, #120]	; (800761c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d009      	beq.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1b      	ldr	r2, [pc, #108]	; (8007624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d101      	bne.n	80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80075bc:	2301      	movs	r3, #1
 80075be:	e000      	b.n	80075c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80075c0:	2300      	movs	r3, #0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4b17      	ldr	r3, [pc, #92]	; (8007628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	461a      	mov	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a15      	ldr	r2, [pc, #84]	; (800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80075d8:	671a      	str	r2, [r3, #112]	; 0x70
 80075da:	e009      	b.n	80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4b14      	ldr	r3, [pc, #80]	; (8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	461a      	mov	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a11      	ldr	r2, [pc, #68]	; (8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80075ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	2201      	movs	r2, #1
 80075f6:	409a      	lsls	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	58025408 	.word	0x58025408
 800760c:	5802541c 	.word	0x5802541c
 8007610:	58025430 	.word	0x58025430
 8007614:	58025444 	.word	0x58025444
 8007618:	58025458 	.word	0x58025458
 800761c:	5802546c 	.word	0x5802546c
 8007620:	58025480 	.word	0x58025480
 8007624:	58025494 	.word	0x58025494
 8007628:	1600963f 	.word	0x1600963f
 800762c:	58025940 	.word	0x58025940
 8007630:	1000823f 	.word	0x1000823f
 8007634:	40020940 	.word	0x40020940

08007638 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800764c:	2308      	movs	r3, #8
 800764e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007650:	4b38      	ldr	r3, [pc, #224]	; (8007734 <HAL_FLASH_Program+0xfc>)
 8007652:	7d1b      	ldrb	r3, [r3, #20]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_FLASH_Program+0x24>
 8007658:	2302      	movs	r3, #2
 800765a:	e067      	b.n	800772c <HAL_FLASH_Program+0xf4>
 800765c:	4b35      	ldr	r3, [pc, #212]	; (8007734 <HAL_FLASH_Program+0xfc>)
 800765e:	2201      	movs	r2, #1
 8007660:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007668:	d306      	bcc.n	8007678 <HAL_FLASH_Program+0x40>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8007670:	d202      	bcs.n	8007678 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8007672:	2301      	movs	r3, #1
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	e001      	b.n	800767c <HAL_FLASH_Program+0x44>
  }
  else
  {
    bank = FLASH_BANK_2;
 8007678:	2302      	movs	r3, #2
 800767a:	61bb      	str	r3, [r7, #24]
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800767c:	4b2d      	ldr	r3, [pc, #180]	; (8007734 <HAL_FLASH_Program+0xfc>)
 800767e:	2200      	movs	r2, #0
 8007680:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8007682:	69b9      	ldr	r1, [r7, #24]
 8007684:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007688:	f000 f8bc 	bl	8007804 <FLASH_WaitForLastOperation>
 800768c:	4603      	mov	r3, r0
 800768e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8007692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007696:	2b00      	cmp	r3, #0
 8007698:	d143      	bne.n	8007722 <HAL_FLASH_Program+0xea>
  {
    if(bank == FLASH_BANK_1)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d106      	bne.n	80076ae <HAL_FLASH_Program+0x76>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80076a0:	4b25      	ldr	r3, [pc, #148]	; (8007738 <HAL_FLASH_Program+0x100>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	4a24      	ldr	r2, [pc, #144]	; (8007738 <HAL_FLASH_Program+0x100>)
 80076a6:	f043 0302 	orr.w	r3, r3, #2
 80076aa:	60d3      	str	r3, [r2, #12]
 80076ac:	e007      	b.n	80076be <HAL_FLASH_Program+0x86>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 80076ae:	4b22      	ldr	r3, [pc, #136]	; (8007738 <HAL_FLASH_Program+0x100>)
 80076b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80076b4:	4a20      	ldr	r2, [pc, #128]	; (8007738 <HAL_FLASH_Program+0x100>)
 80076b6:	f043 0302 	orr.w	r3, r3, #2
 80076ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 80076be:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80076c2:	f3bf 8f4f 	dsb	sy
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	3304      	adds	r3, #4
 80076d2:	623b      	str	r3, [r7, #32]
        src_addr++;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	3304      	adds	r3, #4
 80076d8:	61fb      	str	r3, [r7, #28]
        row_index--;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	3b01      	subs	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1ef      	bne.n	80076c6 <HAL_FLASH_Program+0x8e>
  __ASM volatile ("isb 0xF":::"memory");
 80076e6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80076ea:	f3bf 8f4f 	dsb	sy

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80076ee:	69b9      	ldr	r1, [r7, #24]
 80076f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80076f4:	f000 f886 	bl	8007804 <FLASH_WaitForLastOperation>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d106      	bne.n	8007712 <HAL_FLASH_Program+0xda>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <HAL_FLASH_Program+0x100>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4a0b      	ldr	r2, [pc, #44]	; (8007738 <HAL_FLASH_Program+0x100>)
 800770a:	f023 0302 	bic.w	r3, r3, #2
 800770e:	60d3      	str	r3, [r2, #12]
 8007710:	e007      	b.n	8007722 <HAL_FLASH_Program+0xea>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8007712:	4b09      	ldr	r3, [pc, #36]	; (8007738 <HAL_FLASH_Program+0x100>)
 8007714:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007718:	4a07      	ldr	r2, [pc, #28]	; (8007738 <HAL_FLASH_Program+0x100>)
 800771a:	f023 0302 	bic.w	r3, r3, #2
 800771e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007722:	4b04      	ldr	r3, [pc, #16]	; (8007734 <HAL_FLASH_Program+0xfc>)
 8007724:	2200      	movs	r2, #0
 8007726:	751a      	strb	r2, [r3, #20]

  return status;
 8007728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800772c:	4618      	mov	r0, r3
 800772e:	3728      	adds	r7, #40	; 0x28
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	24000d8c 	.word	0x24000d8c
 8007738:	52002000 	.word	0x52002000

0800773c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8007740:	4b18      	ldr	r3, [pc, #96]	; (80077a4 <HAL_FLASH_Unlock+0x68>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00d      	beq.n	8007768 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800774c:	4b15      	ldr	r3, [pc, #84]	; (80077a4 <HAL_FLASH_Unlock+0x68>)
 800774e:	4a16      	ldr	r2, [pc, #88]	; (80077a8 <HAL_FLASH_Unlock+0x6c>)
 8007750:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <HAL_FLASH_Unlock+0x68>)
 8007754:	4a15      	ldr	r2, [pc, #84]	; (80077ac <HAL_FLASH_Unlock+0x70>)
 8007756:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8007758:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <HAL_FLASH_Unlock+0x68>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e018      	b.n	800779a <HAL_FLASH_Unlock+0x5e>
    }
  }

  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <HAL_FLASH_Unlock+0x68>)
 800776a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d010      	beq.n	8007798 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8007776:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <HAL_FLASH_Unlock+0x68>)
 8007778:	4a0b      	ldr	r2, [pc, #44]	; (80077a8 <HAL_FLASH_Unlock+0x6c>)
 800777a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800777e:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <HAL_FLASH_Unlock+0x68>)
 8007780:	4a0a      	ldr	r2, [pc, #40]	; (80077ac <HAL_FLASH_Unlock+0x70>)
 8007782:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <HAL_FLASH_Unlock+0x68>)
 8007788:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <HAL_FLASH_Unlock+0x5e>
    }
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	52002000 	.word	0x52002000
 80077a8:	45670123 	.word	0x45670123
 80077ac:	cdef89ab 	.word	0xcdef89ab

080077b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80077b4:	4b12      	ldr	r3, [pc, #72]	; (8007800 <HAL_FLASH_Lock+0x50>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a11      	ldr	r2, [pc, #68]	; (8007800 <HAL_FLASH_Lock+0x50>)
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80077c0:	4b0f      	ldr	r3, [pc, #60]	; (8007800 <HAL_FLASH_Lock+0x50>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e011      	b.n	80077f4 <HAL_FLASH_Lock+0x44>
  }

  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 80077d0:	4b0b      	ldr	r3, [pc, #44]	; (8007800 <HAL_FLASH_Lock+0x50>)
 80077d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80077d6:	4a0a      	ldr	r2, [pc, #40]	; (8007800 <HAL_FLASH_Lock+0x50>)
 80077d8:	f043 0301 	orr.w	r3, r3, #1
 80077dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <HAL_FLASH_Lock+0x50>)
 80077e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <HAL_FLASH_Lock+0x44>
  }

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	52002000 	.word	0x52002000

08007804 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag, errorflag;
  uint32_t tickstart = HAL_GetTick();
 800780e:	f7fc f915 	bl	8003a3c <HAL_GetTick>
 8007812:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d102      	bne.n	8007820 <FLASH_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_QW_BANK1;
 800781a:	2304      	movs	r3, #4
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	e013      	b.n	8007848 <FLASH_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_QW_BANK2;
 8007820:	4b41      	ldr	r3, [pc, #260]	; (8007928 <FLASH_WaitForLastOperation+0x124>)
 8007822:	617b      	str	r3, [r7, #20]
  }

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8007824:	e010      	b.n	8007848 <FLASH_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d00c      	beq.n	8007848 <FLASH_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800782e:	f7fc f905 	bl	8003a3c <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	429a      	cmp	r2, r3
 800783c:	d302      	bcc.n	8007844 <FLASH_WaitForLastOperation+0x40>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <FLASH_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e06a      	b.n	800791e <FLASH_WaitForLastOperation+0x11a>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4b38      	ldr	r3, [pc, #224]	; (800792c <FLASH_WaitForLastOperation+0x128>)
 800784c:	4013      	ands	r3, r2
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	429a      	cmp	r2, r3
 8007852:	d10a      	bne.n	800786a <FLASH_WaitForLastOperation+0x66>
 8007854:	4b36      	ldr	r3, [pc, #216]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4013      	ands	r3, r2
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	429a      	cmp	r2, r3
 8007860:	bf0c      	ite	eq
 8007862:	2301      	moveq	r3, #1
 8007864:	2300      	movne	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	e00c      	b.n	8007884 <FLASH_WaitForLastOperation+0x80>
 800786a:	4b31      	ldr	r3, [pc, #196]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 800786c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007870:	43da      	mvns	r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	4013      	ands	r3, r2
 8007876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	bf0c      	ite	eq
 800787e:	2301      	moveq	r3, #1
 8007880:	2300      	movne	r3, #0
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1ce      	bne.n	8007826 <FLASH_WaitForLastOperation+0x22>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d105      	bne.n	800789a <FLASH_WaitForLastOperation+0x96>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800788e:	4b28      	ldr	r3, [pc, #160]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	4b28      	ldr	r3, [pc, #160]	; (8007934 <FLASH_WaitForLastOperation+0x130>)
 8007894:	4013      	ands	r3, r2
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	e007      	b.n	80078aa <FLASH_WaitForLastOperation+0xa6>
  }
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800789a:	4b25      	ldr	r3, [pc, #148]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 800789c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80078a0:	4b24      	ldr	r3, [pc, #144]	; (8007934 <FLASH_WaitForLastOperation+0x130>)
 80078a2:	4013      	ands	r3, r2
 80078a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078a8:	613b      	str	r3, [r7, #16]
  }

  /* In case of error reported in Flash SR1 or SR2 registers (ECCC not managed as an error) */
  if((errorflag & 0x7DFFFFFFU) != 0U)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d017      	beq.n	80078e4 <FLASH_WaitForLastOperation+0xe0>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80078b4:	4b20      	ldr	r3, [pc, #128]	; (8007938 <FLASH_WaitForLastOperation+0x134>)
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	4a1e      	ldr	r2, [pc, #120]	; (8007938 <FLASH_WaitForLastOperation+0x134>)
 80078be:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	4b1a      	ldr	r3, [pc, #104]	; (800792c <FLASH_WaitForLastOperation+0x128>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d103      	bne.n	80078d4 <FLASH_WaitForLastOperation+0xd0>
 80078cc:	4a18      	ldr	r2, [pc, #96]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6153      	str	r3, [r2, #20]
 80078d2:	e005      	b.n	80078e0 <FLASH_WaitForLastOperation+0xdc>
 80078d4:	4a16      	ldr	r2, [pc, #88]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078dc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e01c      	b.n	800791e <FLASH_WaitForLastOperation+0x11a>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d10b      	bne.n	8007902 <FLASH_WaitForLastOperation+0xfe>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f6:	d111      	bne.n	800791c <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80078f8:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 80078fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80078fe:	615a      	str	r2, [r3, #20]
 8007900:	e00c      	b.n	800791c <FLASH_WaitForLastOperation+0x118>
    }
  }
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8007902:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 8007904:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007910:	d104      	bne.n	800791c <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8007912:	4b07      	ldr	r3, [pc, #28]	; (8007930 <FLASH_WaitForLastOperation+0x12c>)
 8007914:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007918:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	80000004 	.word	0x80000004
 800792c:	1fef000f 	.word	0x1fef000f
 8007930:	52002000 	.word	0x52002000
 8007934:	17ee0000 	.word	0x17ee0000
 8007938:	24000d8c 	.word	0x24000d8c

0800793c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800794a:	4b5e      	ldr	r3, [pc, #376]	; (8007ac4 <HAL_FLASHEx_Erase+0x188>)
 800794c:	7d1b      	ldrb	r3, [r3, #20]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_FLASHEx_Erase+0x1a>
 8007952:	2302      	movs	r3, #2
 8007954:	e0b2      	b.n	8007abc <HAL_FLASHEx_Erase+0x180>
 8007956:	4b5b      	ldr	r3, [pc, #364]	; (8007ac4 <HAL_FLASHEx_Erase+0x188>)
 8007958:	2201      	movs	r2, #1
 800795a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800795c:	4b59      	ldr	r3, [pc, #356]	; (8007ac4 <HAL_FLASHEx_Erase+0x188>)
 800795e:	2200      	movs	r2, #0
 8007960:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800796e:	2101      	movs	r1, #1
 8007970:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007974:	f7ff ff46 	bl	8007804 <FLASH_WaitForLastOperation>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800798e:	2102      	movs	r1, #2
 8007990:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007994:	f7ff ff36 	bl	8007804 <FLASH_WaitForLastOperation>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  if(status == HAL_OK)
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 8085 	bne.w	8007ab4 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d136      	bne.n	8007a20 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691a      	ldr	r2, [r3, #16]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4610      	mov	r0, r2
 80079be:	f000 f887 	bl	8007ad0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00f      	beq.n	80079ee <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80079ce:	2101      	movs	r1, #1
 80079d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079d4:	f7ff ff16 	bl	8007804 <FLASH_WaitForLastOperation>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80079e2:	4b39      	ldr	r3, [pc, #228]	; (8007ac8 <HAL_FLASHEx_Erase+0x18c>)
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	4a38      	ldr	r2, [pc, #224]	; (8007ac8 <HAL_FLASHEx_Erase+0x18c>)
 80079e8:	f023 0308 	bic.w	r3, r3, #8
 80079ec:	60d3      	str	r3, [r2, #12]
      }
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d05c      	beq.n	8007ab4 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80079fa:	2102      	movs	r1, #2
 80079fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a00:	f7ff ff00 	bl	8007804 <FLASH_WaitForLastOperation>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8007a0e:	4b2e      	ldr	r3, [pc, #184]	; (8007ac8 <HAL_FLASHEx_Erase+0x18c>)
 8007a10:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007a14:	4a2c      	ldr	r2, [pc, #176]	; (8007ac8 <HAL_FLASHEx_Erase+0x18c>)
 8007a16:	f023 0308 	bic.w	r3, r3, #8
 8007a1a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8007a1e:	e049      	b.n	8007ab4 <HAL_FLASHEx_Erase+0x178>
      }
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295
 8007a26:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	e039      	b.n	8007aa4 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6859      	ldr	r1, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	68b8      	ldr	r0, [r7, #8]
 8007a3c:	f000 f8b2 	bl	8007ba4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a52:	f7ff fed7 	bl	8007804 <FLASH_WaitForLastOperation>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <HAL_FLASHEx_Erase+0x18c>)
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	491a      	ldr	r1, [pc, #104]	; (8007ac8 <HAL_FLASHEx_Erase+0x18c>)
 8007a60:	4b1a      	ldr	r3, [pc, #104]	; (8007acc <HAL_FLASHEx_Erase+0x190>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	60cb      	str	r3, [r1, #12]
        }
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00e      	beq.n	8007a90 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8007a72:	2102      	movs	r1, #2
 8007a74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a78:	f7ff fec4 	bl	8007804 <FLASH_WaitForLastOperation>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8007a80:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <HAL_FLASHEx_Erase+0x18c>)
 8007a82:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007a86:	4910      	ldr	r1, [pc, #64]	; (8007ac8 <HAL_FLASHEx_Erase+0x18c>)
 8007a88:	4b10      	ldr	r3, [pc, #64]	; (8007acc <HAL_FLASHEx_Erase+0x190>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }

        if(status != HAL_OK)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	601a      	str	r2, [r3, #0]
          break;
 8007a9c:	e00a      	b.n	8007ab4 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60bb      	str	r3, [r7, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	4413      	add	r3, r2
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d3bd      	bcc.n	8007a30 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007ab4:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <HAL_FLASHEx_Erase+0x188>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	751a      	strb	r2, [r3, #20]

  return status;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	24000d8c 	.word	0x24000d8c
 8007ac8:	52002000 	.word	0x52002000
 8007acc:	fffff8fb 	.word	0xfffff8fb

08007ad0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d122      	bne.n	8007b2a <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8007ae4:	4b2e      	ldr	r3, [pc, #184]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007aea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007aee:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8007af0:	4b2b      	ldr	r3, [pc, #172]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007af2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007af6:	4a2a      	ldr	r2, [pc, #168]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007af8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007afc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8007b00:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	4926      	ldr	r1, [pc, #152]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8007b0c:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b0e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007b12:	4923      	ldr	r1, [pc, #140]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8007b1c:	4b20      	ldr	r3, [pc, #128]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b22:	f043 0310 	orr.w	r3, r3, #16
 8007b26:	6193      	str	r3, [r2, #24]

      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
  }
}
 8007b28:	e033      	b.n	8007b92 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d011      	beq.n	8007b58 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007b3e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8007b40:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	4916      	ldr	r1, [pc, #88]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8007b4c:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b52:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8007b56:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d017      	beq.n	8007b92 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8007b62:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b64:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007b68:	4a0d      	ldr	r2, [pc, #52]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007b6e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8007b72:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b74:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007b78:	4909      	ldr	r1, [pc, #36]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8007b82:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b84:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007b88:	4a05      	ldr	r2, [pc, #20]	; (8007ba0 <FLASH_MassErase+0xd0>)
 8007b8a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8007b8e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	52002000 	.word	0x52002000

08007ba4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d010      	beq.n	8007bdc <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8007bba:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <FLASH_Erase_Sector+0x78>)
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	4a17      	ldr	r2, [pc, #92]	; (8007c1c <FLASH_Erase_Sector+0x78>)
 8007bc0:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8007bc4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007bc6:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <FLASH_Erase_Sector+0x78>)
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	0219      	lsls	r1, r3, #8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	4a11      	ldr	r2, [pc, #68]	; (8007c1c <FLASH_Erase_Sector+0x78>)
 8007bd6:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8007bda:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d014      	beq.n	8007c10 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8007be6:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <FLASH_Erase_Sector+0x78>)
 8007be8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007bec:	4a0b      	ldr	r2, [pc, #44]	; (8007c1c <FLASH_Erase_Sector+0x78>)
 8007bee:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8007bf2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007bf6:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <FLASH_Erase_Sector+0x78>)
 8007bf8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	0219      	lsls	r1, r3, #8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	430b      	orrs	r3, r1
 8007c04:	4313      	orrs	r3, r2
 8007c06:	4a05      	ldr	r2, [pc, #20]	; (8007c1c <FLASH_Erase_Sector+0x78>)
 8007c08:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8007c0c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    FLASH->CR2 &= ~(FLASH_CR_SNB);

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
}
 8007c10:	bf00      	nop
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	52002000 	.word	0x52002000

08007c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b089      	sub	sp, #36	; 0x24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c2e:	4b89      	ldr	r3, [pc, #548]	; (8007e54 <HAL_GPIO_Init+0x234>)
 8007c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c32:	e194      	b.n	8007f5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	2101      	movs	r1, #1
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	4013      	ands	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 8186 	beq.w	8007f58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d00b      	beq.n	8007c6c <HAL_GPIO_Init+0x4c>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d007      	beq.n	8007c6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c60:	2b11      	cmp	r3, #17
 8007c62:	d003      	beq.n	8007c6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b12      	cmp	r3, #18
 8007c6a:	d130      	bne.n	8007cce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	2203      	movs	r2, #3
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	4013      	ands	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	43db      	mvns	r3, r3
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	091b      	lsrs	r3, r3, #4
 8007cb8:	f003 0201 	and.w	r2, r3, #1
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	2203      	movs	r2, #3
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d003      	beq.n	8007d0e <HAL_GPIO_Init+0xee>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b12      	cmp	r3, #18
 8007d0c:	d123      	bne.n	8007d56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	08da      	lsrs	r2, r3, #3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3208      	adds	r2, #8
 8007d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	220f      	movs	r2, #15
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	08da      	lsrs	r2, r3, #3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3208      	adds	r2, #8
 8007d50:	69b9      	ldr	r1, [r7, #24]
 8007d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	2203      	movs	r2, #3
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	43db      	mvns	r3, r3
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f003 0203 	and.w	r2, r3, #3
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80e0 	beq.w	8007f58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d98:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <HAL_GPIO_Init+0x238>)
 8007d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d9e:	4a2e      	ldr	r2, [pc, #184]	; (8007e58 <HAL_GPIO_Init+0x238>)
 8007da0:	f043 0302 	orr.w	r3, r3, #2
 8007da4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007da8:	4b2b      	ldr	r3, [pc, #172]	; (8007e58 <HAL_GPIO_Init+0x238>)
 8007daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007db6:	4a29      	ldr	r2, [pc, #164]	; (8007e5c <HAL_GPIO_Init+0x23c>)
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	089b      	lsrs	r3, r3, #2
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	220f      	movs	r2, #15
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a20      	ldr	r2, [pc, #128]	; (8007e60 <HAL_GPIO_Init+0x240>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d052      	beq.n	8007e88 <HAL_GPIO_Init+0x268>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a1f      	ldr	r2, [pc, #124]	; (8007e64 <HAL_GPIO_Init+0x244>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d031      	beq.n	8007e4e <HAL_GPIO_Init+0x22e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <HAL_GPIO_Init+0x248>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d02b      	beq.n	8007e4a <HAL_GPIO_Init+0x22a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a1d      	ldr	r2, [pc, #116]	; (8007e6c <HAL_GPIO_Init+0x24c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d025      	beq.n	8007e46 <HAL_GPIO_Init+0x226>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a1c      	ldr	r2, [pc, #112]	; (8007e70 <HAL_GPIO_Init+0x250>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d01f      	beq.n	8007e42 <HAL_GPIO_Init+0x222>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a1b      	ldr	r2, [pc, #108]	; (8007e74 <HAL_GPIO_Init+0x254>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d019      	beq.n	8007e3e <HAL_GPIO_Init+0x21e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1a      	ldr	r2, [pc, #104]	; (8007e78 <HAL_GPIO_Init+0x258>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d013      	beq.n	8007e3a <HAL_GPIO_Init+0x21a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a19      	ldr	r2, [pc, #100]	; (8007e7c <HAL_GPIO_Init+0x25c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00d      	beq.n	8007e36 <HAL_GPIO_Init+0x216>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a18      	ldr	r2, [pc, #96]	; (8007e80 <HAL_GPIO_Init+0x260>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <HAL_GPIO_Init+0x212>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a17      	ldr	r2, [pc, #92]	; (8007e84 <HAL_GPIO_Init+0x264>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d101      	bne.n	8007e2e <HAL_GPIO_Init+0x20e>
 8007e2a:	2309      	movs	r3, #9
 8007e2c:	e02d      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e2e:	230a      	movs	r3, #10
 8007e30:	e02b      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e32:	2308      	movs	r3, #8
 8007e34:	e029      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e36:	2307      	movs	r3, #7
 8007e38:	e027      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e3a:	2306      	movs	r3, #6
 8007e3c:	e025      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e3e:	2305      	movs	r3, #5
 8007e40:	e023      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e42:	2304      	movs	r3, #4
 8007e44:	e021      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e46:	2303      	movs	r3, #3
 8007e48:	e01f      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e01d      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e01b      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e52:	bf00      	nop
 8007e54:	58000080 	.word	0x58000080
 8007e58:	58024400 	.word	0x58024400
 8007e5c:	58000400 	.word	0x58000400
 8007e60:	58020000 	.word	0x58020000
 8007e64:	58020400 	.word	0x58020400
 8007e68:	58020800 	.word	0x58020800
 8007e6c:	58020c00 	.word	0x58020c00
 8007e70:	58021000 	.word	0x58021000
 8007e74:	58021400 	.word	0x58021400
 8007e78:	58021800 	.word	0x58021800
 8007e7c:	58021c00 	.word	0x58021c00
 8007e80:	58022000 	.word	0x58022000
 8007e84:	58022400 	.word	0x58022400
 8007e88:	2300      	movs	r3, #0
 8007e8a:	69fa      	ldr	r2, [r7, #28]
 8007e8c:	f002 0203 	and.w	r2, r2, #3
 8007e90:	0092      	lsls	r2, r2, #2
 8007e92:	4093      	lsls	r3, r2
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e9a:	4938      	ldr	r1, [pc, #224]	; (8007f7c <HAL_GPIO_Init+0x35c>)
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	089b      	lsrs	r3, r3, #2
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	43db      	mvns	r3, r3
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	43db      	mvns	r3, r3
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	43db      	mvns	r3, r3
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f47f ae63 	bne.w	8007c34 <HAL_GPIO_Init+0x14>
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3724      	adds	r7, #36	; 0x24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	58000400 	.word	0x58000400

08007f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	887b      	ldrh	r3, [r7, #2]
 8007f92:	4013      	ands	r3, r2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	e001      	b.n	8007fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	807b      	strh	r3, [r7, #2]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fc0:	787b      	ldrb	r3, [r7, #1]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fc6:	887a      	ldrh	r2, [r7, #2]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007fcc:	e003      	b.n	8007fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fce:	887b      	ldrh	r3, [r7, #2]
 8007fd0:	041a      	lsls	r2, r3, #16
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	619a      	str	r2, [r3, #24]
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695a      	ldr	r2, [r3, #20]
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	401a      	ands	r2, r3
 8007ff6:	887b      	ldrh	r3, [r7, #2]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d104      	bne.n	8008006 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	041a      	lsls	r2, r3, #16
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008004:	e002      	b.n	800800c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008006:	887a      	ldrh	r2, [r7, #2]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	619a      	str	r2, [r3, #24]
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008020:	4b19      	ldr	r3, [pc, #100]	; (8008088 <HAL_PWREx_ConfigSupply+0x70>)
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b04      	cmp	r3, #4
 800802a:	d00a      	beq.n	8008042 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800802c:	4b16      	ldr	r3, [pc, #88]	; (8008088 <HAL_PWREx_ConfigSupply+0x70>)
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d001      	beq.n	800803e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e01f      	b.n	800807e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	e01d      	b.n	800807e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <HAL_PWREx_ConfigSupply+0x70>)
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f023 0207 	bic.w	r2, r3, #7
 800804a:	490f      	ldr	r1, [pc, #60]	; (8008088 <HAL_PWREx_ConfigSupply+0x70>)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4313      	orrs	r3, r2
 8008050:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008052:	f7fb fcf3 	bl	8003a3c <HAL_GetTick>
 8008056:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008058:	e009      	b.n	800806e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800805a:	f7fb fcef 	bl	8003a3c <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008068:	d901      	bls.n	800806e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e007      	b.n	800807e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <HAL_PWREx_ConfigSupply+0x70>)
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800807a:	d1ee      	bne.n	800805a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	58024800 	.word	0x58024800

0800808c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08c      	sub	sp, #48	; 0x30
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e3c4      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 8087 	beq.w	80081ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080ac:	4ba2      	ldr	r3, [pc, #648]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080b6:	4ba0      	ldr	r3, [pc, #640]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80080b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d007      	beq.n	80080d2 <HAL_RCC_OscConfig+0x46>
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	2b18      	cmp	r3, #24
 80080c6:	d110      	bne.n	80080ea <HAL_RCC_OscConfig+0x5e>
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d10b      	bne.n	80080ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080d2:	4b99      	ldr	r3, [pc, #612]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d06c      	beq.n	80081b8 <HAL_RCC_OscConfig+0x12c>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d168      	bne.n	80081b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e39e      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f2:	d106      	bne.n	8008102 <HAL_RCC_OscConfig+0x76>
 80080f4:	4b90      	ldr	r3, [pc, #576]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a8f      	ldr	r2, [pc, #572]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80080fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	e02e      	b.n	8008160 <HAL_RCC_OscConfig+0xd4>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10c      	bne.n	8008124 <HAL_RCC_OscConfig+0x98>
 800810a:	4b8b      	ldr	r3, [pc, #556]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a8a      	ldr	r2, [pc, #552]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	4b88      	ldr	r3, [pc, #544]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a87      	ldr	r2, [pc, #540]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800811c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	e01d      	b.n	8008160 <HAL_RCC_OscConfig+0xd4>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800812c:	d10c      	bne.n	8008148 <HAL_RCC_OscConfig+0xbc>
 800812e:	4b82      	ldr	r3, [pc, #520]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a81      	ldr	r2, [pc, #516]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	4b7f      	ldr	r3, [pc, #508]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a7e      	ldr	r2, [pc, #504]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	e00b      	b.n	8008160 <HAL_RCC_OscConfig+0xd4>
 8008148:	4b7b      	ldr	r3, [pc, #492]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a7a      	ldr	r2, [pc, #488]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800814e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	4b78      	ldr	r3, [pc, #480]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a77      	ldr	r2, [pc, #476]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800815a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800815e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d013      	beq.n	8008190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008168:	f7fb fc68 	bl	8003a3c <HAL_GetTick>
 800816c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008170:	f7fb fc64 	bl	8003a3c <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b64      	cmp	r3, #100	; 0x64
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e352      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008182:	4b6d      	ldr	r3, [pc, #436]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0f0      	beq.n	8008170 <HAL_RCC_OscConfig+0xe4>
 800818e:	e014      	b.n	80081ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008190:	f7fb fc54 	bl	8003a3c <HAL_GetTick>
 8008194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008198:	f7fb fc50 	bl	8003a3c <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b64      	cmp	r3, #100	; 0x64
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e33e      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081aa:	4b63      	ldr	r3, [pc, #396]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f0      	bne.n	8008198 <HAL_RCC_OscConfig+0x10c>
 80081b6:	e000      	b.n	80081ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 8092 	beq.w	80082ec <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081c8:	4b5b      	ldr	r3, [pc, #364]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081d2:	4b59      	ldr	r3, [pc, #356]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80081d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d007      	beq.n	80081ee <HAL_RCC_OscConfig+0x162>
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	2b18      	cmp	r3, #24
 80081e2:	d12d      	bne.n	8008240 <HAL_RCC_OscConfig+0x1b4>
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d128      	bne.n	8008240 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081ee:	4b52      	ldr	r3, [pc, #328]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <HAL_RCC_OscConfig+0x17a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e310      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008206:	f7fb fc47 	bl	8003a98 <HAL_GetREVID>
 800820a:	4602      	mov	r2, r0
 800820c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008210:	429a      	cmp	r2, r3
 8008212:	d80a      	bhi.n	800822a <HAL_RCC_OscConfig+0x19e>
 8008214:	4b48      	ldr	r3, [pc, #288]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	031b      	lsls	r3, r3, #12
 8008222:	4945      	ldr	r1, [pc, #276]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008224:	4313      	orrs	r3, r2
 8008226:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008228:	e060      	b.n	80082ec <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800822a:	4b43      	ldr	r3, [pc, #268]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	061b      	lsls	r3, r3, #24
 8008238:	493f      	ldr	r1, [pc, #252]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800823a:	4313      	orrs	r3, r2
 800823c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800823e:	e055      	b.n	80082ec <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d038      	beq.n	80082ba <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008248:	4b3b      	ldr	r3, [pc, #236]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f023 0219 	bic.w	r2, r3, #25
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	4938      	ldr	r1, [pc, #224]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008256:	4313      	orrs	r3, r2
 8008258:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825a:	f7fb fbef 	bl	8003a3c <HAL_GetTick>
 800825e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008260:	e008      	b.n	8008274 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008262:	f7fb fbeb 	bl	8003a3c <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e2d9      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008274:	4b30      	ldr	r3, [pc, #192]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0f0      	beq.n	8008262 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008280:	f7fb fc0a 	bl	8003a98 <HAL_GetREVID>
 8008284:	4602      	mov	r2, r0
 8008286:	f241 0303 	movw	r3, #4099	; 0x1003
 800828a:	429a      	cmp	r2, r3
 800828c:	d80a      	bhi.n	80082a4 <HAL_RCC_OscConfig+0x218>
 800828e:	4b2a      	ldr	r3, [pc, #168]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	031b      	lsls	r3, r3, #12
 800829c:	4926      	ldr	r1, [pc, #152]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	604b      	str	r3, [r1, #4]
 80082a2:	e023      	b.n	80082ec <HAL_RCC_OscConfig+0x260>
 80082a4:	4b24      	ldr	r3, [pc, #144]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	061b      	lsls	r3, r3, #24
 80082b2:	4921      	ldr	r1, [pc, #132]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	604b      	str	r3, [r1, #4]
 80082b8:	e018      	b.n	80082ec <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082ba:	4b1f      	ldr	r3, [pc, #124]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a1e      	ldr	r2, [pc, #120]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c6:	f7fb fbb9 	bl	8003a3c <HAL_GetTick>
 80082ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082cc:	e008      	b.n	80082e0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082ce:	f7fb fbb5 	bl	8003a3c <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d901      	bls.n	80082e0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e2a3      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082e0:	4b15      	ldr	r3, [pc, #84]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1f0      	bne.n	80082ce <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8091 	beq.w	800841c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082fa:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008302:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008304:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2b08      	cmp	r3, #8
 800830e:	d007      	beq.n	8008320 <HAL_RCC_OscConfig+0x294>
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b18      	cmp	r3, #24
 8008314:	d12f      	bne.n	8008376 <HAL_RCC_OscConfig+0x2ea>
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f003 0303 	and.w	r3, r3, #3
 800831c:	2b01      	cmp	r3, #1
 800831e:	d12a      	bne.n	8008376 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <HAL_RCC_OscConfig+0x2ac>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <HAL_RCC_OscConfig+0x2b0>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	2b80      	cmp	r3, #128	; 0x80
 8008332:	d003      	beq.n	800833c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e277      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
 8008338:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800833c:	f7fb fbac 	bl	8003a98 <HAL_GetREVID>
 8008340:	4602      	mov	r2, r0
 8008342:	f241 0303 	movw	r3, #4099	; 0x1003
 8008346:	429a      	cmp	r2, r3
 8008348:	d80a      	bhi.n	8008360 <HAL_RCC_OscConfig+0x2d4>
 800834a:	4ba2      	ldr	r3, [pc, #648]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	069b      	lsls	r3, r3, #26
 8008358:	499e      	ldr	r1, [pc, #632]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 800835a:	4313      	orrs	r3, r2
 800835c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800835e:	e05d      	b.n	800841c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008360:	4b9c      	ldr	r3, [pc, #624]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	061b      	lsls	r3, r3, #24
 800836e:	4999      	ldr	r1, [pc, #612]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008370:	4313      	orrs	r3, r2
 8008372:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008374:	e052      	b.n	800841c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d035      	beq.n	80083ea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800837e:	4b95      	ldr	r3, [pc, #596]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a94      	ldr	r2, [pc, #592]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838a:	f7fb fb57 	bl	8003a3c <HAL_GetTick>
 800838e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008390:	e008      	b.n	80083a4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008392:	f7fb fb53 	bl	8003a3c <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d901      	bls.n	80083a4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e241      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083a4:	4b8b      	ldr	r3, [pc, #556]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0f0      	beq.n	8008392 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083b0:	f7fb fb72 	bl	8003a98 <HAL_GetREVID>
 80083b4:	4602      	mov	r2, r0
 80083b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d80a      	bhi.n	80083d4 <HAL_RCC_OscConfig+0x348>
 80083be:	4b85      	ldr	r3, [pc, #532]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	069b      	lsls	r3, r3, #26
 80083cc:	4981      	ldr	r1, [pc, #516]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	604b      	str	r3, [r1, #4]
 80083d2:	e023      	b.n	800841c <HAL_RCC_OscConfig+0x390>
 80083d4:	4b7f      	ldr	r3, [pc, #508]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	061b      	lsls	r3, r3, #24
 80083e2:	497c      	ldr	r1, [pc, #496]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60cb      	str	r3, [r1, #12]
 80083e8:	e018      	b.n	800841c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80083ea:	4b7a      	ldr	r3, [pc, #488]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a79      	ldr	r2, [pc, #484]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80083f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f6:	f7fb fb21 	bl	8003a3c <HAL_GetTick>
 80083fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083fc:	e008      	b.n	8008410 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083fe:	f7fb fb1d 	bl	8003a3c <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d901      	bls.n	8008410 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e20b      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008410:	4b70      	ldr	r3, [pc, #448]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f0      	bne.n	80083fe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0308 	and.w	r3, r3, #8
 8008424:	2b00      	cmp	r3, #0
 8008426:	d036      	beq.n	8008496 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d019      	beq.n	8008464 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008430:	4b68      	ldr	r3, [pc, #416]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008434:	4a67      	ldr	r2, [pc, #412]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843c:	f7fb fafe 	bl	8003a3c <HAL_GetTick>
 8008440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008444:	f7fb fafa 	bl	8003a3c <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e1e8      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008456:	4b5f      	ldr	r3, [pc, #380]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f0      	beq.n	8008444 <HAL_RCC_OscConfig+0x3b8>
 8008462:	e018      	b.n	8008496 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008464:	4b5b      	ldr	r3, [pc, #364]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008468:	4a5a      	ldr	r2, [pc, #360]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 800846a:	f023 0301 	bic.w	r3, r3, #1
 800846e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fb fae4 	bl	8003a3c <HAL_GetTick>
 8008474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008478:	f7fb fae0 	bl	8003a3c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e1ce      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800848a:	4b52      	ldr	r3, [pc, #328]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 800848c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f0      	bne.n	8008478 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d036      	beq.n	8008510 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d019      	beq.n	80084de <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084aa:	4b4a      	ldr	r3, [pc, #296]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a49      	ldr	r2, [pc, #292]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80084b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084b6:	f7fb fac1 	bl	8003a3c <HAL_GetTick>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084be:	f7fb fabd 	bl	8003a3c <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e1ab      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084d0:	4b40      	ldr	r3, [pc, #256]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0f0      	beq.n	80084be <HAL_RCC_OscConfig+0x432>
 80084dc:	e018      	b.n	8008510 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084de:	4b3d      	ldr	r3, [pc, #244]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a3c      	ldr	r2, [pc, #240]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80084e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084ea:	f7fb faa7 	bl	8003a3c <HAL_GetTick>
 80084ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084f0:	e008      	b.n	8008504 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084f2:	f7fb faa3 	bl	8003a3c <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d901      	bls.n	8008504 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e191      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008504:	4b33      	ldr	r3, [pc, #204]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1f0      	bne.n	80084f2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8086 	beq.w	800862a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800851e:	4b2e      	ldr	r3, [pc, #184]	; (80085d8 <HAL_RCC_OscConfig+0x54c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a2d      	ldr	r2, [pc, #180]	; (80085d8 <HAL_RCC_OscConfig+0x54c>)
 8008524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008528:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800852a:	f7fb fa87 	bl	8003a3c <HAL_GetTick>
 800852e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008530:	e008      	b.n	8008544 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008532:	f7fb fa83 	bl	8003a3c <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b64      	cmp	r3, #100	; 0x64
 800853e:	d901      	bls.n	8008544 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e171      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008544:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <HAL_RCC_OscConfig+0x54c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0f0      	beq.n	8008532 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d106      	bne.n	8008566 <HAL_RCC_OscConfig+0x4da>
 8008558:	4b1e      	ldr	r3, [pc, #120]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	6713      	str	r3, [r2, #112]	; 0x70
 8008564:	e02d      	b.n	80085c2 <HAL_RCC_OscConfig+0x536>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10c      	bne.n	8008588 <HAL_RCC_OscConfig+0x4fc>
 800856e:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	4a18      	ldr	r2, [pc, #96]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008574:	f023 0301 	bic.w	r3, r3, #1
 8008578:	6713      	str	r3, [r2, #112]	; 0x70
 800857a:	4b16      	ldr	r3, [pc, #88]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 800857c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857e:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008580:	f023 0304 	bic.w	r3, r3, #4
 8008584:	6713      	str	r3, [r2, #112]	; 0x70
 8008586:	e01c      	b.n	80085c2 <HAL_RCC_OscConfig+0x536>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b05      	cmp	r3, #5
 800858e:	d10c      	bne.n	80085aa <HAL_RCC_OscConfig+0x51e>
 8008590:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008594:	4a0f      	ldr	r2, [pc, #60]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 8008596:	f043 0304 	orr.w	r3, r3, #4
 800859a:	6713      	str	r3, [r2, #112]	; 0x70
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 800859e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a0:	4a0c      	ldr	r2, [pc, #48]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	6713      	str	r3, [r2, #112]	; 0x70
 80085a8:	e00b      	b.n	80085c2 <HAL_RCC_OscConfig+0x536>
 80085aa:	4b0a      	ldr	r3, [pc, #40]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80085ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ae:	4a09      	ldr	r2, [pc, #36]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80085b0:	f023 0301 	bic.w	r3, r3, #1
 80085b4:	6713      	str	r3, [r2, #112]	; 0x70
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	4a06      	ldr	r2, [pc, #24]	; (80085d4 <HAL_RCC_OscConfig+0x548>)
 80085bc:	f023 0304 	bic.w	r3, r3, #4
 80085c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d01a      	beq.n	8008600 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ca:	f7fb fa37 	bl	8003a3c <HAL_GetTick>
 80085ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085d0:	e00f      	b.n	80085f2 <HAL_RCC_OscConfig+0x566>
 80085d2:	bf00      	nop
 80085d4:	58024400 	.word	0x58024400
 80085d8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085dc:	f7fb fa2e 	bl	8003a3c <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e11a      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085f2:	4b8f      	ldr	r3, [pc, #572]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0ee      	beq.n	80085dc <HAL_RCC_OscConfig+0x550>
 80085fe:	e014      	b.n	800862a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008600:	f7fb fa1c 	bl	8003a3c <HAL_GetTick>
 8008604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008606:	e00a      	b.n	800861e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008608:	f7fb fa18 	bl	8003a3c <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	f241 3288 	movw	r2, #5000	; 0x1388
 8008616:	4293      	cmp	r3, r2
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e104      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800861e:	4b84      	ldr	r3, [pc, #528]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1ee      	bne.n	8008608 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80f9 	beq.w	8008826 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008634:	4b7e      	ldr	r3, [pc, #504]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800863c:	2b18      	cmp	r3, #24
 800863e:	f000 80b4 	beq.w	80087aa <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	2b02      	cmp	r3, #2
 8008648:	f040 8095 	bne.w	8008776 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800864c:	4b78      	ldr	r3, [pc, #480]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a77      	ldr	r2, [pc, #476]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008658:	f7fb f9f0 	bl	8003a3c <HAL_GetTick>
 800865c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008660:	f7fb f9ec 	bl	8003a3c <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e0da      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008672:	4b6f      	ldr	r3, [pc, #444]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f0      	bne.n	8008660 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800867e:	4b6c      	ldr	r3, [pc, #432]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008682:	4b6c      	ldr	r3, [pc, #432]	; (8008834 <HAL_RCC_OscConfig+0x7a8>)
 8008684:	4013      	ands	r3, r2
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800868e:	0112      	lsls	r2, r2, #4
 8008690:	430a      	orrs	r2, r1
 8008692:	4967      	ldr	r1, [pc, #412]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008694:	4313      	orrs	r3, r2
 8008696:	628b      	str	r3, [r1, #40]	; 0x28
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	3b01      	subs	r3, #1
 800869e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a6:	3b01      	subs	r3, #1
 80086a8:	025b      	lsls	r3, r3, #9
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b2:	3b01      	subs	r3, #1
 80086b4:	041b      	lsls	r3, r3, #16
 80086b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c0:	3b01      	subs	r3, #1
 80086c2:	061b      	lsls	r3, r3, #24
 80086c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086c8:	4959      	ldr	r1, [pc, #356]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80086ce:	4b58      	ldr	r3, [pc, #352]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	4a57      	ldr	r2, [pc, #348]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086da:	4b55      	ldr	r3, [pc, #340]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80086dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086de:	4b56      	ldr	r3, [pc, #344]	; (8008838 <HAL_RCC_OscConfig+0x7ac>)
 80086e0:	4013      	ands	r3, r2
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086e6:	00d2      	lsls	r2, r2, #3
 80086e8:	4951      	ldr	r1, [pc, #324]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086ee:	4b50      	ldr	r3, [pc, #320]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	f023 020c 	bic.w	r2, r3, #12
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	494d      	ldr	r1, [pc, #308]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008700:	4b4b      	ldr	r3, [pc, #300]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f023 0202 	bic.w	r2, r3, #2
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870c:	4948      	ldr	r1, [pc, #288]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 800870e:	4313      	orrs	r3, r2
 8008710:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008712:	4b47      	ldr	r3, [pc, #284]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	4a46      	ldr	r2, [pc, #280]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800871c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800871e:	4b44      	ldr	r3, [pc, #272]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	4a43      	ldr	r2, [pc, #268]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800872a:	4b41      	ldr	r3, [pc, #260]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	4a40      	ldr	r2, [pc, #256]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008736:	4b3e      	ldr	r3, [pc, #248]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	4a3d      	ldr	r2, [pc, #244]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 800873c:	f043 0301 	orr.w	r3, r3, #1
 8008740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008742:	4b3b      	ldr	r3, [pc, #236]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a3a      	ldr	r2, [pc, #232]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800874c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874e:	f7fb f975 	bl	8003a3c <HAL_GetTick>
 8008752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008754:	e008      	b.n	8008768 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008756:	f7fb f971 	bl	8003a3c <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e05f      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008768:	4b31      	ldr	r3, [pc, #196]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0f0      	beq.n	8008756 <HAL_RCC_OscConfig+0x6ca>
 8008774:	e057      	b.n	8008826 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008776:	4b2e      	ldr	r3, [pc, #184]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a2d      	ldr	r2, [pc, #180]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 800877c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008782:	f7fb f95b 	bl	8003a3c <HAL_GetTick>
 8008786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800878a:	f7fb f957 	bl	8003a3c <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e045      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800879c:	4b24      	ldr	r3, [pc, #144]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f0      	bne.n	800878a <HAL_RCC_OscConfig+0x6fe>
 80087a8:	e03d      	b.n	8008826 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80087aa:	4b21      	ldr	r3, [pc, #132]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087b0:	4b1f      	ldr	r3, [pc, #124]	; (8008830 <HAL_RCC_OscConfig+0x7a4>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d031      	beq.n	8008822 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f003 0203 	and.w	r2, r3, #3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d12a      	bne.n	8008822 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	091b      	lsrs	r3, r3, #4
 80087d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d8:	429a      	cmp	r2, r3
 80087da:	d122      	bne.n	8008822 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d11a      	bne.n	8008822 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	0a5b      	lsrs	r3, r3, #9
 80087f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d111      	bne.n	8008822 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	0c1b      	lsrs	r3, r3, #16
 8008802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800880c:	429a      	cmp	r2, r3
 800880e:	d108      	bne.n	8008822 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	0e1b      	lsrs	r3, r3, #24
 8008814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800881e:	429a      	cmp	r2, r3
 8008820:	d001      	beq.n	8008826 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3730      	adds	r7, #48	; 0x30
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	58024400 	.word	0x58024400
 8008834:	fffffc0c 	.word	0xfffffc0c
 8008838:	ffff0007 	.word	0xffff0007

0800883c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e19c      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008850:	4b8a      	ldr	r3, [pc, #552]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d910      	bls.n	8008880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800885e:	4b87      	ldr	r3, [pc, #540]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f023 020f 	bic.w	r2, r3, #15
 8008866:	4985      	ldr	r1, [pc, #532]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	4313      	orrs	r3, r2
 800886c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800886e:	4b83      	ldr	r3, [pc, #524]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d001      	beq.n	8008880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e184      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0304 	and.w	r3, r3, #4
 8008888:	2b00      	cmp	r3, #0
 800888a:	d010      	beq.n	80088ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	691a      	ldr	r2, [r3, #16]
 8008890:	4b7b      	ldr	r3, [pc, #492]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008898:	429a      	cmp	r2, r3
 800889a:	d908      	bls.n	80088ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800889c:	4b78      	ldr	r3, [pc, #480]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	4975      	ldr	r1, [pc, #468]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d010      	beq.n	80088dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695a      	ldr	r2, [r3, #20]
 80088be:	4b70      	ldr	r3, [pc, #448]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d908      	bls.n	80088dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088ca:	4b6d      	ldr	r3, [pc, #436]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	496a      	ldr	r1, [pc, #424]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d010      	beq.n	800890a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	699a      	ldr	r2, [r3, #24]
 80088ec:	4b64      	ldr	r3, [pc, #400]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d908      	bls.n	800890a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088f8:	4b61      	ldr	r3, [pc, #388]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	495e      	ldr	r1, [pc, #376]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008906:	4313      	orrs	r3, r2
 8008908:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d010      	beq.n	8008938 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	69da      	ldr	r2, [r3, #28]
 800891a:	4b59      	ldr	r3, [pc, #356]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008922:	429a      	cmp	r2, r3
 8008924:	d908      	bls.n	8008938 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008926:	4b56      	ldr	r3, [pc, #344]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	4953      	ldr	r1, [pc, #332]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008934:	4313      	orrs	r3, r2
 8008936:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d010      	beq.n	8008966 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	4b4d      	ldr	r3, [pc, #308]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f003 030f 	and.w	r3, r3, #15
 8008950:	429a      	cmp	r2, r3
 8008952:	d908      	bls.n	8008966 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008954:	4b4a      	ldr	r3, [pc, #296]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	f023 020f 	bic.w	r2, r3, #15
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	4947      	ldr	r1, [pc, #284]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008962:	4313      	orrs	r3, r2
 8008964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d055      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008972:	4b43      	ldr	r3, [pc, #268]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	4940      	ldr	r1, [pc, #256]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008980:	4313      	orrs	r3, r2
 8008982:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b02      	cmp	r3, #2
 800898a:	d107      	bne.n	800899c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800898c:	4b3c      	ldr	r3, [pc, #240]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d121      	bne.n	80089dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e0f6      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d107      	bne.n	80089b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089a4:	4b36      	ldr	r3, [pc, #216]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d115      	bne.n	80089dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0ea      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d107      	bne.n	80089cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089bc:	4b30      	ldr	r3, [pc, #192]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0de      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089cc:	4b2c      	ldr	r3, [pc, #176]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e0d6      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089dc:	4b28      	ldr	r3, [pc, #160]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f023 0207 	bic.w	r2, r3, #7
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4925      	ldr	r1, [pc, #148]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ee:	f7fb f825 	bl	8003a3c <HAL_GetTick>
 80089f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089f4:	e00a      	b.n	8008a0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089f6:	f7fb f821 	bl	8003a3c <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e0be      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a0c:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d1eb      	bne.n	80089f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d010      	beq.n	8008a4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	4b14      	ldr	r3, [pc, #80]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f003 030f 	and.w	r3, r3, #15
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d208      	bcs.n	8008a4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a3a:	4b11      	ldr	r3, [pc, #68]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f023 020f 	bic.w	r2, r3, #15
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	490e      	ldr	r1, [pc, #56]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 030f 	and.w	r3, r3, #15
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d214      	bcs.n	8008a84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5a:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f023 020f 	bic.w	r2, r3, #15
 8008a62:	4906      	ldr	r1, [pc, #24]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a6a:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d005      	beq.n	8008a84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e086      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
 8008a7c:	52002000 	.word	0x52002000
 8008a80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	4b3f      	ldr	r3, [pc, #252]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d208      	bcs.n	8008ab2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008aa0:	4b3c      	ldr	r3, [pc, #240]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	4939      	ldr	r1, [pc, #228]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d010      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695a      	ldr	r2, [r3, #20]
 8008ac2:	4b34      	ldr	r3, [pc, #208]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d208      	bcs.n	8008ae0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	492e      	ldr	r1, [pc, #184]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d010      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	699a      	ldr	r2, [r3, #24]
 8008af0:	4b28      	ldr	r3, [pc, #160]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d208      	bcs.n	8008b0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008afc:	4b25      	ldr	r3, [pc, #148]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4922      	ldr	r1, [pc, #136]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d010      	beq.n	8008b3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69da      	ldr	r2, [r3, #28]
 8008b1e:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d208      	bcs.n	8008b3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b2a:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	4917      	ldr	r1, [pc, #92]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b3c:	f000 f834 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 8008b40:	4601      	mov	r1, r0
 8008b42:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	4a12      	ldr	r2, [pc, #72]	; (8008b98 <HAL_RCC_ClockConfig+0x35c>)
 8008b4e:	5cd3      	ldrb	r3, [r2, r3]
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	fa21 f303 	lsr.w	r3, r1, r3
 8008b58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b5a:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	4a0d      	ldr	r2, [pc, #52]	; (8008b98 <HAL_RCC_ClockConfig+0x35c>)
 8008b64:	5cd3      	ldrb	r3, [r2, r3]
 8008b66:	f003 031f 	and.w	r3, r3, #31
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b70:	4a0a      	ldr	r2, [pc, #40]	; (8008b9c <HAL_RCC_ClockConfig+0x360>)
 8008b72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b74:	4a0a      	ldr	r2, [pc, #40]	; (8008ba0 <HAL_RCC_ClockConfig+0x364>)
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <HAL_RCC_ClockConfig+0x368>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fa ff12 	bl	80039a8 <HAL_InitTick>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	58024400 	.word	0x58024400
 8008b98:	08010504 	.word	0x08010504
 8008b9c:	240000d4 	.word	0x240000d4
 8008ba0:	240000d0 	.word	0x240000d0
 8008ba4:	240000d8 	.word	0x240000d8

08008ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b089      	sub	sp, #36	; 0x24
 8008bac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bae:	4baf      	ldr	r3, [pc, #700]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bb6:	2b18      	cmp	r3, #24
 8008bb8:	f200 814e 	bhi.w	8008e58 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008bbc:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008c29 	.word	0x08008c29
 8008bc8:	08008e59 	.word	0x08008e59
 8008bcc:	08008e59 	.word	0x08008e59
 8008bd0:	08008e59 	.word	0x08008e59
 8008bd4:	08008e59 	.word	0x08008e59
 8008bd8:	08008e59 	.word	0x08008e59
 8008bdc:	08008e59 	.word	0x08008e59
 8008be0:	08008e59 	.word	0x08008e59
 8008be4:	08008c4f 	.word	0x08008c4f
 8008be8:	08008e59 	.word	0x08008e59
 8008bec:	08008e59 	.word	0x08008e59
 8008bf0:	08008e59 	.word	0x08008e59
 8008bf4:	08008e59 	.word	0x08008e59
 8008bf8:	08008e59 	.word	0x08008e59
 8008bfc:	08008e59 	.word	0x08008e59
 8008c00:	08008e59 	.word	0x08008e59
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	08008e59 	.word	0x08008e59
 8008c0c:	08008e59 	.word	0x08008e59
 8008c10:	08008e59 	.word	0x08008e59
 8008c14:	08008e59 	.word	0x08008e59
 8008c18:	08008e59 	.word	0x08008e59
 8008c1c:	08008e59 	.word	0x08008e59
 8008c20:	08008e59 	.word	0x08008e59
 8008c24:	08008c5b 	.word	0x08008c5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c28:	4b90      	ldr	r3, [pc, #576]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0320 	and.w	r3, r3, #32
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d009      	beq.n	8008c48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c34:	4b8d      	ldr	r3, [pc, #564]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	08db      	lsrs	r3, r3, #3
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	4a8c      	ldr	r2, [pc, #560]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008c40:	fa22 f303 	lsr.w	r3, r2, r3
 8008c44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008c46:	e10a      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c48:	4b89      	ldr	r3, [pc, #548]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008c4a:	61bb      	str	r3, [r7, #24]
    break;
 8008c4c:	e107      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008c4e:	4b89      	ldr	r3, [pc, #548]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008c50:	61bb      	str	r3, [r7, #24]
    break;
 8008c52:	e104      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008c54:	4b88      	ldr	r3, [pc, #544]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8008c56:	61bb      	str	r3, [r7, #24]
    break;
 8008c58:	e101      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c5a:	4b84      	ldr	r3, [pc, #528]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008c64:	4b81      	ldr	r3, [pc, #516]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c68:	091b      	lsrs	r3, r3, #4
 8008c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c70:	4b7e      	ldr	r3, [pc, #504]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c7a:	4b7c      	ldr	r3, [pc, #496]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7e:	08db      	lsrs	r3, r3, #3
 8008c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	fb02 f303 	mul.w	r3, r2, r3
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 80da 	beq.w	8008e52 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d05a      	beq.n	8008d5a <HAL_RCC_GetSysClockFreq+0x1b2>
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d302      	bcc.n	8008cae <HAL_RCC_GetSysClockFreq+0x106>
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d078      	beq.n	8008d9e <HAL_RCC_GetSysClockFreq+0x1f6>
 8008cac:	e099      	b.n	8008de2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cae:	4b6f      	ldr	r3, [pc, #444]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d02d      	beq.n	8008d16 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cba:	4b6c      	ldr	r3, [pc, #432]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	08db      	lsrs	r3, r3, #3
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	4a6a      	ldr	r2, [pc, #424]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	ee07 3a90 	vmov	s15, r3
 8008cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce4:	4b61      	ldr	r3, [pc, #388]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cf8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8008cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008d14:	e087      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	ee07 3a90 	vmov	s15, r3
 8008d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d20:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008e80 <HAL_RCC_GetSysClockFreq+0x2d8>
 8008d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d28:	4b50      	ldr	r3, [pc, #320]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d38:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d3c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8008d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d58:	e065      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d64:	eddf 6a47 	vldr	s13, [pc, #284]	; 8008e84 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6c:	4b3f      	ldr	r3, [pc, #252]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d74:	ee07 3a90 	vmov	s15, r3
 8008d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d80:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8008d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d9c:	e043      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	ee07 3a90 	vmov	s15, r3
 8008da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008e88 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db0:	4b2e      	ldr	r3, [pc, #184]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db8:	ee07 3a90 	vmov	s15, r3
 8008dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8008dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ddc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de0:	e021      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	ee07 3a90 	vmov	s15, r3
 8008de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008e84 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df4:	4b1d      	ldr	r3, [pc, #116]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e04:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e08:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8008e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e24:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008e26:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	0a5b      	lsrs	r3, r3, #9
 8008e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e30:	3301      	adds	r3, #1
 8008e32:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e4a:	ee17 3a90 	vmov	r3, s15
 8008e4e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008e50:	e005      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	61bb      	str	r3, [r7, #24]
    break;
 8008e56:	e002      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008e58:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008e5a:	61bb      	str	r3, [r7, #24]
    break;
 8008e5c:	bf00      	nop
  }

  return sysclockfreq;
 8008e5e:	69bb      	ldr	r3, [r7, #24]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3724      	adds	r7, #36	; 0x24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	58024400 	.word	0x58024400
 8008e70:	03d09000 	.word	0x03d09000
 8008e74:	003d0900 	.word	0x003d0900
 8008e78:	017d7840 	.word	0x017d7840
 8008e7c:	46000000 	.word	0x46000000
 8008e80:	4c742400 	.word	0x4c742400
 8008e84:	4a742400 	.word	0x4a742400
 8008e88:	4bbebc20 	.word	0x4bbebc20

08008e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e92:	f7ff fe89 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 8008e96:	4601      	mov	r1, r0
 8008e98:	4b10      	ldr	r3, [pc, #64]	; (8008edc <HAL_RCC_GetHCLKFreq+0x50>)
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	f003 030f 	and.w	r3, r3, #15
 8008ea2:	4a0f      	ldr	r2, [pc, #60]	; (8008ee0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ea4:	5cd3      	ldrb	r3, [r2, r3]
 8008ea6:	f003 031f 	and.w	r3, r3, #31
 8008eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8008eae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <HAL_RCC_GetHCLKFreq+0x50>)
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	f003 030f 	and.w	r3, r3, #15
 8008eb8:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008eba:	5cd3      	ldrb	r3, [r2, r3]
 8008ebc:	f003 031f 	and.w	r3, r3, #31
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec6:	4a07      	ldr	r2, [pc, #28]	; (8008ee4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ec8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008eca:	4a07      	ldr	r2, [pc, #28]	; (8008ee8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ed0:	4b04      	ldr	r3, [pc, #16]	; (8008ee4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	58024400 	.word	0x58024400
 8008ee0:	08010504 	.word	0x08010504
 8008ee4:	240000d4 	.word	0x240000d4
 8008ee8:	240000d0 	.word	0x240000d0

08008eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ef0:	f7ff ffcc 	bl	8008e8c <HAL_RCC_GetHCLKFreq>
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	091b      	lsrs	r3, r3, #4
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f02:	5cd3      	ldrb	r3, [r2, r3]
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	58024400 	.word	0x58024400
 8008f14:	08010504 	.word	0x08010504

08008f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f1c:	f7ff ffb6 	bl	8008e8c <HAL_RCC_GetHCLKFreq>
 8008f20:	4601      	mov	r1, r0
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	4a04      	ldr	r2, [pc, #16]	; (8008f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f2e:	5cd3      	ldrb	r3, [r2, r3]
 8008f30:	f003 031f 	and.w	r3, r3, #31
 8008f34:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	58024400 	.word	0x58024400
 8008f40:	08010504 	.word	0x08010504

08008f44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f50:	2300      	movs	r3, #0
 8008f52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d03d      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f68:	d013      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f6e:	d802      	bhi.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d007      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008f74:	e01f      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f7a:	d013      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008f7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f80:	d01c      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008f82:	e018      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f84:	4baf      	ldr	r3, [pc, #700]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	4aae      	ldr	r2, [pc, #696]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f90:	e015      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3304      	adds	r3, #4
 8008f96:	2102      	movs	r1, #2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fd23 	bl	800a9e4 <RCCEx_PLL2_Config>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008fa2:	e00c      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3324      	adds	r3, #36	; 0x24
 8008fa8:	2102      	movs	r1, #2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 fdcc 	bl	800ab48 <RCCEx_PLL3_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008fb4:	e003      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fba:	e000      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fbe:	7dfb      	ldrb	r3, [r7, #23]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008fc4:	4b9f      	ldr	r3, [pc, #636]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd0:	499c      	ldr	r1, [pc, #624]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	650b      	str	r3, [r1, #80]	; 0x50
 8008fd6:	e001      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d03d      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d826      	bhi.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8008ff0:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	0800900d 	.word	0x0800900d
 8008ffc:	0800901b 	.word	0x0800901b
 8009000:	0800902d 	.word	0x0800902d
 8009004:	08009045 	.word	0x08009045
 8009008:	08009045 	.word	0x08009045
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800900c:	4b8d      	ldr	r3, [pc, #564]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	4a8c      	ldr	r2, [pc, #560]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009018:	e015      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	2100      	movs	r1, #0
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fcdf 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009026:	4603      	mov	r3, r0
 8009028:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800902a:	e00c      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3324      	adds	r3, #36	; 0x24
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f001 fd88 	bl	800ab48 <RCCEx_PLL3_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800903c:	e003      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]
      break;
 8009042:	e000      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8009044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d109      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800904c:	4b7d      	ldr	r3, [pc, #500]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800904e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009050:	f023 0207 	bic.w	r2, r3, #7
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009058:	497a      	ldr	r1, [pc, #488]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800905a:	4313      	orrs	r3, r2
 800905c:	650b      	str	r3, [r1, #80]	; 0x50
 800905e:	e001      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800906c:	2b00      	cmp	r3, #0
 800906e:	d03e      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009074:	2b80      	cmp	r3, #128	; 0x80
 8009076:	d01c      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009078:	2b80      	cmp	r3, #128	; 0x80
 800907a:	d804      	bhi.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d008      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d00d      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009084:	e01e      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009086:	2bc0      	cmp	r3, #192	; 0xc0
 8009088:	d01f      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 800908a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800908e:	d01e      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009090:	e018      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009092:	4b6c      	ldr	r3, [pc, #432]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009096:	4a6b      	ldr	r2, [pc, #428]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800909c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800909e:	e017      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3304      	adds	r3, #4
 80090a4:	2100      	movs	r1, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f001 fc9c 	bl	800a9e4 <RCCEx_PLL2_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80090b0:	e00e      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3324      	adds	r3, #36	; 0x24
 80090b6:	2100      	movs	r1, #0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 fd45 	bl	800ab48 <RCCEx_PLL3_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80090c2:	e005      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
      break;
 80090c8:	e002      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80090ca:	bf00      	nop
 80090cc:	e000      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80090ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d109      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80090d6:	4b5b      	ldr	r3, [pc, #364]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80090d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e2:	4958      	ldr	r1, [pc, #352]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	650b      	str	r3, [r1, #80]	; 0x50
 80090e8:	e001      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d044      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009104:	d01f      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800910a:	d805      	bhi.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00a      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009114:	d00e      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8009116:	e01f      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8009118:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800911c:	d01f      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800911e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009122:	d01e      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009124:	e018      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009126:	4b47      	ldr	r3, [pc, #284]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	4a46      	ldr	r2, [pc, #280]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800912c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009130:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009132:	e017      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3304      	adds	r3, #4
 8009138:	2100      	movs	r1, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f001 fc52 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009140:	4603      	mov	r3, r0
 8009142:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009144:	e00e      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3324      	adds	r3, #36	; 0x24
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f001 fcfb 	bl	800ab48 <RCCEx_PLL3_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009156:	e005      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	75fb      	strb	r3, [r7, #23]
      break;
 800915c:	e002      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800915e:	bf00      	nop
 8009160:	e000      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800916a:	4b36      	ldr	r3, [pc, #216]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800916c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800916e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009178:	4932      	ldr	r1, [pc, #200]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800917a:	4313      	orrs	r3, r2
 800917c:	658b      	str	r3, [r1, #88]	; 0x58
 800917e:	e001      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800918c:	2b00      	cmp	r3, #0
 800918e:	d044      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800919a:	d01f      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800919c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091a0:	d805      	bhi.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80091a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091aa:	d00e      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 80091ac:	e01f      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80091ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091b2:	d01f      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80091b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091b8:	d01e      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80091ba:	e018      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091bc:	4b21      	ldr	r3, [pc, #132]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	4a20      	ldr	r2, [pc, #128]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80091c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091c8:	e017      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3304      	adds	r3, #4
 80091ce:	2100      	movs	r1, #0
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 fc07 	bl	800a9e4 <RCCEx_PLL2_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80091da:	e00e      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3324      	adds	r3, #36	; 0x24
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 fcb0 	bl	800ab48 <RCCEx_PLL3_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091ec:	e005      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	75fb      	strb	r3, [r7, #23]
      break;
 80091f2:	e002      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80091f4:	bf00      	nop
 80091f6:	e000      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80091f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10a      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009200:	4b10      	ldr	r3, [pc, #64]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009204:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800920e:	490d      	ldr	r1, [pc, #52]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009210:	4313      	orrs	r3, r2
 8009212:	658b      	str	r3, [r1, #88]	; 0x58
 8009214:	e001      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d035      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800922a:	2b10      	cmp	r3, #16
 800922c:	d00c      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800922e:	2b10      	cmp	r3, #16
 8009230:	d802      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009232:	2b00      	cmp	r3, #0
 8009234:	d01b      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8009236:	e017      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009238:	2b20      	cmp	r3, #32
 800923a:	d00c      	beq.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800923c:	2b30      	cmp	r3, #48	; 0x30
 800923e:	d018      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009240:	e012      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009242:	bf00      	nop
 8009244:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009248:	4baf      	ldr	r3, [pc, #700]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	4aae      	ldr	r2, [pc, #696]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800924e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009254:	e00e      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3304      	adds	r3, #4
 800925a:	2102      	movs	r1, #2
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fbc1 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009262:	4603      	mov	r3, r0
 8009264:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009266:	e005      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]
      break;
 800926c:	e002      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800926e:	bf00      	nop
 8009270:	e000      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d109      	bne.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800927a:	4ba3      	ldr	r3, [pc, #652]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800927c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009286:	49a0      	ldr	r1, [pc, #640]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009288:	4313      	orrs	r3, r2
 800928a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800928c:	e001      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d042      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a6:	d01f      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80092a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ac:	d805      	bhi.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80092b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b6:	d00e      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80092b8:	e01f      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80092ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092be:	d01f      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80092c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092c4:	d01e      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80092c6:	e018      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c8:	4b8f      	ldr	r3, [pc, #572]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	4a8e      	ldr	r2, [pc, #568]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80092ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092d4:	e017      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3304      	adds	r3, #4
 80092da:	2100      	movs	r1, #0
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 fb81 	bl	800a9e4 <RCCEx_PLL2_Config>
 80092e2:	4603      	mov	r3, r0
 80092e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092e6:	e00e      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3324      	adds	r3, #36	; 0x24
 80092ec:	2100      	movs	r1, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f001 fc2a 	bl	800ab48 <RCCEx_PLL3_Config>
 80092f4:	4603      	mov	r3, r0
 80092f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092f8:	e005      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	75fb      	strb	r3, [r7, #23]
      break;
 80092fe:	e002      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009300:	bf00      	nop
 8009302:	e000      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d109      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800930c:	4b7e      	ldr	r3, [pc, #504]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800930e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009310:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009318:	497b      	ldr	r1, [pc, #492]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800931a:	4313      	orrs	r3, r2
 800931c:	650b      	str	r3, [r1, #80]	; 0x50
 800931e:	e001      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d042      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009338:	d01b      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800933a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800933e:	d805      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d022      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009348:	d00a      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800934a:	e01b      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800934c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009350:	d01d      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009352:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009356:	d01c      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009358:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800935c:	d01b      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800935e:	e011      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3304      	adds	r3, #4
 8009364:	2101      	movs	r1, #1
 8009366:	4618      	mov	r0, r3
 8009368:	f001 fb3c 	bl	800a9e4 <RCCEx_PLL2_Config>
 800936c:	4603      	mov	r3, r0
 800936e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009370:	e012      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3324      	adds	r3, #36	; 0x24
 8009376:	2101      	movs	r1, #1
 8009378:	4618      	mov	r0, r3
 800937a:	f001 fbe5 	bl	800ab48 <RCCEx_PLL3_Config>
 800937e:	4603      	mov	r3, r0
 8009380:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009382:	e009      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	75fb      	strb	r3, [r7, #23]
      break;
 8009388:	e006      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800938a:	bf00      	nop
 800938c:	e004      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800938e:	bf00      	nop
 8009390:	e002      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009392:	bf00      	nop
 8009394:	e000      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800939e:	4b5a      	ldr	r3, [pc, #360]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80093a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093aa:	4957      	ldr	r1, [pc, #348]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	650b      	str	r3, [r1, #80]	; 0x50
 80093b0:	e001      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d044      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093cc:	d01b      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80093ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d2:	d805      	bhi.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d022      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80093d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093dc:	d00a      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80093de:	e01b      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80093e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e4:	d01d      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80093e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ea:	d01c      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80093ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093f0:	d01b      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80093f2:	e011      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3304      	adds	r3, #4
 80093f8:	2101      	movs	r1, #1
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 faf2 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009404:	e012      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3324      	adds	r3, #36	; 0x24
 800940a:	2101      	movs	r1, #1
 800940c:	4618      	mov	r0, r3
 800940e:	f001 fb9b 	bl	800ab48 <RCCEx_PLL3_Config>
 8009412:	4603      	mov	r3, r0
 8009414:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009416:	e009      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	75fb      	strb	r3, [r7, #23]
      break;
 800941c:	e006      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800941e:	bf00      	nop
 8009420:	e004      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009422:	bf00      	nop
 8009424:	e002      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009426:	bf00      	nop
 8009428:	e000      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800942a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009432:	4b35      	ldr	r3, [pc, #212]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009436:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009440:	4931      	ldr	r1, [pc, #196]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009442:	4313      	orrs	r3, r2
 8009444:	658b      	str	r3, [r1, #88]	; 0x58
 8009446:	e001      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009448:	7dfb      	ldrb	r3, [r7, #23]
 800944a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d02d      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800945c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009460:	d005      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009466:	d009      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009468:	2b00      	cmp	r3, #0
 800946a:	d013      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800946c:	e00f      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800946e:	4b26      	ldr	r3, [pc, #152]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	4a25      	ldr	r2, [pc, #148]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009478:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800947a:	e00c      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	2101      	movs	r1, #1
 8009482:	4618      	mov	r0, r3
 8009484:	f001 faae 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009488:	4603      	mov	r3, r0
 800948a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800948c:	e003      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]
      break;
 8009492:	e000      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d109      	bne.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800949c:	4b1a      	ldr	r3, [pc, #104]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800949e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a8:	4917      	ldr	r1, [pc, #92]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	650b      	str	r3, [r1, #80]	; 0x50
 80094ae:	e001      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d035      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d81b      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80094c8:	a201      	add	r2, pc, #4	; (adr r2, 80094d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ce:	bf00      	nop
 80094d0:	0800950d 	.word	0x0800950d
 80094d4:	080094e1 	.word	0x080094e1
 80094d8:	080094ef 	.word	0x080094ef
 80094dc:	0800950d 	.word	0x0800950d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e0:	4b09      	ldr	r3, [pc, #36]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e4:	4a08      	ldr	r2, [pc, #32]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80094e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094ec:	e00f      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3304      	adds	r3, #4
 80094f2:	2102      	movs	r1, #2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 fa75 	bl	800a9e4 <RCCEx_PLL2_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094fe:	e006      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
      break;
 8009504:	e003      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009506:	bf00      	nop
 8009508:	58024400 	.word	0x58024400
      break;
 800950c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d109      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009514:	4bba      	ldr	r3, [pc, #744]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009518:	f023 0203 	bic.w	r2, r3, #3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009520:	49b7      	ldr	r1, [pc, #732]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009522:	4313      	orrs	r3, r2
 8009524:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009526:	e001      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8086 	beq.w	8009646 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800953a:	4bb2      	ldr	r3, [pc, #712]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4ab1      	ldr	r2, [pc, #708]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009546:	f7fa fa79 	bl	8003a3c <HAL_GetTick>
 800954a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800954c:	e009      	b.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800954e:	f7fa fa75 	bl	8003a3c <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b64      	cmp	r3, #100	; 0x64
 800955a:	d902      	bls.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	75fb      	strb	r3, [r7, #23]
        break;
 8009560:	e005      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009562:	4ba8      	ldr	r3, [pc, #672]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0ef      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d166      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009574:	4ba2      	ldr	r3, [pc, #648]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800957e:	4053      	eors	r3, r2
 8009580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009584:	2b00      	cmp	r3, #0
 8009586:	d013      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009588:	4b9d      	ldr	r3, [pc, #628]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800958a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009590:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009592:	4b9b      	ldr	r3, [pc, #620]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009596:	4a9a      	ldr	r2, [pc, #616]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800959c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800959e:	4b98      	ldr	r3, [pc, #608]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80095a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a2:	4a97      	ldr	r2, [pc, #604]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80095a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80095aa:	4a95      	ldr	r2, [pc, #596]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ba:	d115      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095bc:	f7fa fa3e 	bl	8003a3c <HAL_GetTick>
 80095c0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095c2:	e00b      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095c4:	f7fa fa3a 	bl	8003a3c <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d902      	bls.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	75fb      	strb	r3, [r7, #23]
            break;
 80095da:	e005      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095dc:	4b88      	ldr	r3, [pc, #544]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80095de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0ed      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d126      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095fc:	d10d      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80095fe:	4b80      	ldr	r3, [pc, #512]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800960c:	0919      	lsrs	r1, r3, #4
 800960e:	4b7e      	ldr	r3, [pc, #504]	; (8009808 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009610:	400b      	ands	r3, r1
 8009612:	497b      	ldr	r1, [pc, #492]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009614:	4313      	orrs	r3, r2
 8009616:	610b      	str	r3, [r1, #16]
 8009618:	e005      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800961a:	4b79      	ldr	r3, [pc, #484]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	4a78      	ldr	r2, [pc, #480]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009620:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009624:	6113      	str	r3, [r2, #16]
 8009626:	4b76      	ldr	r3, [pc, #472]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009628:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009634:	4972      	ldr	r1, [pc, #456]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009636:	4313      	orrs	r3, r2
 8009638:	670b      	str	r3, [r1, #112]	; 0x70
 800963a:	e004      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	75bb      	strb	r3, [r7, #22]
 8009640:	e001      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d07d      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009656:	2b28      	cmp	r3, #40	; 0x28
 8009658:	d866      	bhi.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800965a:	a201      	add	r2, pc, #4	; (adr r2, 8009660 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800965c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009660:	0800972f 	.word	0x0800972f
 8009664:	08009729 	.word	0x08009729
 8009668:	08009729 	.word	0x08009729
 800966c:	08009729 	.word	0x08009729
 8009670:	08009729 	.word	0x08009729
 8009674:	08009729 	.word	0x08009729
 8009678:	08009729 	.word	0x08009729
 800967c:	08009729 	.word	0x08009729
 8009680:	08009705 	.word	0x08009705
 8009684:	08009729 	.word	0x08009729
 8009688:	08009729 	.word	0x08009729
 800968c:	08009729 	.word	0x08009729
 8009690:	08009729 	.word	0x08009729
 8009694:	08009729 	.word	0x08009729
 8009698:	08009729 	.word	0x08009729
 800969c:	08009729 	.word	0x08009729
 80096a0:	08009717 	.word	0x08009717
 80096a4:	08009729 	.word	0x08009729
 80096a8:	08009729 	.word	0x08009729
 80096ac:	08009729 	.word	0x08009729
 80096b0:	08009729 	.word	0x08009729
 80096b4:	08009729 	.word	0x08009729
 80096b8:	08009729 	.word	0x08009729
 80096bc:	08009729 	.word	0x08009729
 80096c0:	0800972f 	.word	0x0800972f
 80096c4:	08009729 	.word	0x08009729
 80096c8:	08009729 	.word	0x08009729
 80096cc:	08009729 	.word	0x08009729
 80096d0:	08009729 	.word	0x08009729
 80096d4:	08009729 	.word	0x08009729
 80096d8:	08009729 	.word	0x08009729
 80096dc:	08009729 	.word	0x08009729
 80096e0:	0800972f 	.word	0x0800972f
 80096e4:	08009729 	.word	0x08009729
 80096e8:	08009729 	.word	0x08009729
 80096ec:	08009729 	.word	0x08009729
 80096f0:	08009729 	.word	0x08009729
 80096f4:	08009729 	.word	0x08009729
 80096f8:	08009729 	.word	0x08009729
 80096fc:	08009729 	.word	0x08009729
 8009700:	0800972f 	.word	0x0800972f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3304      	adds	r3, #4
 8009708:	2101      	movs	r1, #1
 800970a:	4618      	mov	r0, r3
 800970c:	f001 f96a 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009714:	e00c      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3324      	adds	r3, #36	; 0x24
 800971a:	2101      	movs	r1, #1
 800971c:	4618      	mov	r0, r3
 800971e:	f001 fa13 	bl	800ab48 <RCCEx_PLL3_Config>
 8009722:	4603      	mov	r3, r0
 8009724:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009726:	e003      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	75fb      	strb	r3, [r7, #23]
      break;
 800972c:	e000      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800972e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009736:	4b32      	ldr	r3, [pc, #200]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009742:	492f      	ldr	r1, [pc, #188]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009744:	4313      	orrs	r3, r2
 8009746:	654b      	str	r3, [r1, #84]	; 0x54
 8009748:	e001      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0302 	and.w	r3, r3, #2
 8009756:	2b00      	cmp	r3, #0
 8009758:	d037      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975e:	2b05      	cmp	r3, #5
 8009760:	d820      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	080097ab 	.word	0x080097ab
 800976c:	08009781 	.word	0x08009781
 8009770:	08009793 	.word	0x08009793
 8009774:	080097ab 	.word	0x080097ab
 8009778:	080097ab 	.word	0x080097ab
 800977c:	080097ab 	.word	0x080097ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3304      	adds	r3, #4
 8009784:	2101      	movs	r1, #1
 8009786:	4618      	mov	r0, r3
 8009788:	f001 f92c 	bl	800a9e4 <RCCEx_PLL2_Config>
 800978c:	4603      	mov	r3, r0
 800978e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009790:	e00c      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3324      	adds	r3, #36	; 0x24
 8009796:	2101      	movs	r1, #1
 8009798:	4618      	mov	r0, r3
 800979a:	f001 f9d5 	bl	800ab48 <RCCEx_PLL3_Config>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80097a2:	e003      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	75fb      	strb	r3, [r7, #23]
      break;
 80097a8:	e000      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80097aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097b2:	4b13      	ldr	r3, [pc, #76]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80097b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b6:	f023 0207 	bic.w	r2, r3, #7
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097be:	4910      	ldr	r1, [pc, #64]	; (8009800 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	654b      	str	r3, [r1, #84]	; 0x54
 80097c4:	e001      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d040      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d827      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	08009837 	.word	0x08009837
 80097ec:	0800980d 	.word	0x0800980d
 80097f0:	0800981f 	.word	0x0800981f
 80097f4:	08009837 	.word	0x08009837
 80097f8:	08009837 	.word	0x08009837
 80097fc:	08009837 	.word	0x08009837
 8009800:	58024400 	.word	0x58024400
 8009804:	58024800 	.word	0x58024800
 8009808:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	2101      	movs	r1, #1
 8009812:	4618      	mov	r0, r3
 8009814:	f001 f8e6 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800981c:	e00c      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3324      	adds	r3, #36	; 0x24
 8009822:	2101      	movs	r1, #1
 8009824:	4618      	mov	r0, r3
 8009826:	f001 f98f 	bl	800ab48 <RCCEx_PLL3_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800982e:	e003      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]
      break;
 8009834:	e000      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10a      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800983e:	4bb2      	ldr	r3, [pc, #712]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009842:	f023 0207 	bic.w	r2, r3, #7
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984c:	49ae      	ldr	r1, [pc, #696]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800984e:	4313      	orrs	r3, r2
 8009850:	658b      	str	r3, [r1, #88]	; 0x58
 8009852:	e001      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0320 	and.w	r3, r3, #32
 8009860:	2b00      	cmp	r3, #0
 8009862:	d044      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800986a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800986e:	d01b      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009874:	d805      	bhi.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d022      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800987a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800987e:	d00a      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009880:	e01b      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009886:	d01d      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800988c:	d01c      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800988e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009892:	d01b      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009894:	e011      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3304      	adds	r3, #4
 800989a:	2100      	movs	r1, #0
 800989c:	4618      	mov	r0, r3
 800989e:	f001 f8a1 	bl	800a9e4 <RCCEx_PLL2_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098a6:	e012      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	2102      	movs	r1, #2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 f94a 	bl	800ab48 <RCCEx_PLL3_Config>
 80098b4:	4603      	mov	r3, r0
 80098b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098b8:	e009      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	75fb      	strb	r3, [r7, #23]
      break;
 80098be:	e006      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80098c0:	bf00      	nop
 80098c2:	e004      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80098c4:	bf00      	nop
 80098c6:	e002      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80098c8:	bf00      	nop
 80098ca:	e000      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80098cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098d4:	4b8c      	ldr	r3, [pc, #560]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80098d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e2:	4989      	ldr	r1, [pc, #548]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	654b      	str	r3, [r1, #84]	; 0x54
 80098e8:	e001      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d044      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009904:	d01b      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800990a:	d805      	bhi.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d022      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009914:	d00a      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009916:	e01b      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991c:	d01d      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800991e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009922:	d01c      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009928:	d01b      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800992a:	e011      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3304      	adds	r3, #4
 8009930:	2100      	movs	r1, #0
 8009932:	4618      	mov	r0, r3
 8009934:	f001 f856 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009938:	4603      	mov	r3, r0
 800993a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800993c:	e012      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3324      	adds	r3, #36	; 0x24
 8009942:	2102      	movs	r1, #2
 8009944:	4618      	mov	r0, r3
 8009946:	f001 f8ff 	bl	800ab48 <RCCEx_PLL3_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800994e:	e009      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	75fb      	strb	r3, [r7, #23]
      break;
 8009954:	e006      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009956:	bf00      	nop
 8009958:	e004      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800995a:	bf00      	nop
 800995c:	e002      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800995e:	bf00      	nop
 8009960:	e000      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800996a:	4b67      	ldr	r3, [pc, #412]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800996c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009978:	4963      	ldr	r1, [pc, #396]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800997a:	4313      	orrs	r3, r2
 800997c:	658b      	str	r3, [r1, #88]	; 0x58
 800997e:	e001      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800998c:	2b00      	cmp	r3, #0
 800998e:	d044      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800999a:	d01b      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800999c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099a0:	d805      	bhi.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d022      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80099a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099aa:	d00a      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80099ac:	e01b      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80099ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b2:	d01d      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80099b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80099b8:	d01c      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80099ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099be:	d01b      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80099c0:	e011      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3304      	adds	r3, #4
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 f80b 	bl	800a9e4 <RCCEx_PLL2_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099d2:	e012      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3324      	adds	r3, #36	; 0x24
 80099d8:	2102      	movs	r1, #2
 80099da:	4618      	mov	r0, r3
 80099dc:	f001 f8b4 	bl	800ab48 <RCCEx_PLL3_Config>
 80099e0:	4603      	mov	r3, r0
 80099e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099e4:	e009      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	75fb      	strb	r3, [r7, #23]
      break;
 80099ea:	e006      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80099ec:	bf00      	nop
 80099ee:	e004      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80099f0:	bf00      	nop
 80099f2:	e002      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80099f4:	bf00      	nop
 80099f6:	e000      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80099f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a00:	4b41      	ldr	r3, [pc, #260]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a0e:	493e      	ldr	r1, [pc, #248]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	658b      	str	r3, [r1, #88]	; 0x58
 8009a14:	e001      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0308 	and.w	r3, r3, #8
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d01a      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a30:	d10a      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3324      	adds	r3, #36	; 0x24
 8009a36:	2102      	movs	r1, #2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f001 f885 	bl	800ab48 <RCCEx_PLL3_Config>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009a48:	4b2f      	ldr	r3, [pc, #188]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a56:	492c      	ldr	r1, [pc, #176]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 0310 	and.w	r3, r3, #16
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d01a      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a72:	d10a      	bne.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3324      	adds	r3, #36	; 0x24
 8009a78:	2102      	movs	r1, #2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 f864 	bl	800ab48 <RCCEx_PLL3_Config>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a8a:	4b1f      	ldr	r3, [pc, #124]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a98:	491b      	ldr	r1, [pc, #108]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d032      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab4:	d00d      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aba:	d016      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d111      	bne.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 ff8c 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ad0:	e00c      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3324      	adds	r3, #36	; 0x24
 8009ad6:	2102      	movs	r1, #2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 f835 	bl	800ab48 <RCCEx_PLL3_Config>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ae2:	e003      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae8:	e000      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10c      	bne.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009af2:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b00:	4901      	ldr	r1, [pc, #4]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	658b      	str	r3, [r1, #88]	; 0x58
 8009b06:	e003      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d02f      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b26:	d00c      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009b28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b2c:	d015      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b32:	d10f      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b34:	4b71      	ldr	r3, [pc, #452]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	4a70      	ldr	r2, [pc, #448]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b40:	e00c      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3324      	adds	r3, #36	; 0x24
 8009b46:	2101      	movs	r1, #1
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 fffd 	bl	800ab48 <RCCEx_PLL3_Config>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b52:	e003      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	75fb      	strb	r3, [r7, #23]
      break;
 8009b58:	e000      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b62:	4b66      	ldr	r3, [pc, #408]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b70:	4962      	ldr	r1, [pc, #392]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	654b      	str	r3, [r1, #84]	; 0x54
 8009b76:	e001      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d029      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b94:	d007      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009b96:	e00f      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b98:	4b58      	ldr	r3, [pc, #352]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	4a57      	ldr	r2, [pc, #348]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ba4:	e00b      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	2102      	movs	r1, #2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 ff19 	bl	800a9e4 <RCCEx_PLL2_Config>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bb6:	e002      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
      break;
 8009bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d109      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009bc4:	4b4d      	ldr	r3, [pc, #308]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd0:	494a      	ldr	r1, [pc, #296]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009bd6:	e001      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00a      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	3324      	adds	r3, #36	; 0x24
 8009bec:	2102      	movs	r1, #2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 ffaa 	bl	800ab48 <RCCEx_PLL3_Config>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d02f      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c12:	d00c      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c18:	d802      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d011      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009c1e:	e00d      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c24:	d00f      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c2a:	d00e      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009c2c:	e006      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c2e:	4b33      	ldr	r3, [pc, #204]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	4a32      	ldr	r2, [pc, #200]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009c3a:	e007      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c40:	e004      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009c42:	bf00      	nop
 8009c44:	e002      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d109      	bne.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c52:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c5e:	4927      	ldr	r1, [pc, #156]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	654b      	str	r3, [r1, #84]	; 0x54
 8009c64:	e001      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c66:	7dfb      	ldrb	r3, [r7, #23]
 8009c68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d008      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c76:	4b21      	ldr	r3, [pc, #132]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c82:	491e      	ldr	r1, [pc, #120]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d008      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c94:	4b19      	ldr	r3, [pc, #100]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ca0:	4916      	ldr	r1, [pc, #88]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00d      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009cb2:	4b12      	ldr	r3, [pc, #72]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	4a11      	ldr	r2, [pc, #68]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009cb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cbc:	6113      	str	r3, [r2, #16]
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009cc0:	691a      	ldr	r2, [r3, #16]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009cc8:	490c      	ldr	r1, [pc, #48]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	da08      	bge.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce2:	4906      	ldr	r1, [pc, #24]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009ce8:	7dbb      	ldrb	r3, [r7, #22]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e000      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	58024400 	.word	0x58024400

08009d00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b090      	sub	sp, #64	; 0x40
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0e:	d150      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009d10:	4ba1      	ldr	r3, [pc, #644]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d14:	f003 0307 	and.w	r3, r3, #7
 8009d18:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	d844      	bhi.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009d20:	a201      	add	r2, pc, #4	; (adr r2, 8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d26:	bf00      	nop
 8009d28:	08009d3d 	.word	0x08009d3d
 8009d2c:	08009d4d 	.word	0x08009d4d
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	08009da5 	.word	0x08009da5
 8009d38:	08009d6d 	.word	0x08009d6d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 fd03 	bl	800a74c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d4a:	e241      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d4c:	f107 0318 	add.w	r3, r7, #24
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fa63 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d5a:	e239      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5c:	f107 030c 	add.w	r3, r7, #12
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fba7 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d6a:	e231      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d6c:	4b8a      	ldr	r3, [pc, #552]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009d7c:	4b87      	ldr	r3, [pc, #540]	; (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009d80:	e226      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d88:	d102      	bne.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009d8a:	4b85      	ldr	r3, [pc, #532]	; (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d8e:	e21f      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d96:	d102      	bne.n	8009d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009d98:	4b82      	ldr	r3, [pc, #520]	; (8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d9c:	e218      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da2:	e215      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009da4:	4b80      	ldr	r3, [pc, #512]	; (8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da8:	e212      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dae:	bf00      	nop
 8009db0:	e20e      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009db8:	d14f      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009dba:	4b77      	ldr	r3, [pc, #476]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dbe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009dc2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	2b80      	cmp	r3, #128	; 0x80
 8009dc8:	d01c      	beq.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009dca:	2b80      	cmp	r3, #128	; 0x80
 8009dcc:	d804      	bhi.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d008      	beq.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8009dd2:	2b40      	cmp	r3, #64	; 0x40
 8009dd4:	d00e      	beq.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009dd6:	e03c      	b.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009dd8:	2bc0      	cmp	r3, #192	; 0xc0
 8009dda:	d037      	beq.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de0:	d018      	beq.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8009de2:	e036      	b.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fcaf 	bl	800a74c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009df2:	e1ed      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009df4:	f107 0318 	add.w	r3, r7, #24
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 fa0f 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e02:	e1e5      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e04:	f107 030c 	add.w	r3, r7, #12
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 fb53 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e12:	e1dd      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e14:	4b60      	ldr	r3, [pc, #384]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e1c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009e24:	4b5d      	ldr	r3, [pc, #372]	; (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009e28:	e1d2      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e30:	d102      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8009e32:	4b5b      	ldr	r3, [pc, #364]	; (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e36:	e1cb      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e3e:	d102      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8009e40:	4b58      	ldr	r3, [pc, #352]	; (8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e44:	e1c4      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e4a:	e1c1      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009e4c:	4b56      	ldr	r3, [pc, #344]	; (8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e50:	e1be      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e56:	bf00      	nop
 8009e58:	e1ba      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e60:	d153      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009e62:	4b4d      	ldr	r3, [pc, #308]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e66:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009e6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e72:	d01f      	beq.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e78:	d805      	bhi.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00a      	beq.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e82:	d00f      	beq.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009e84:	e03d      	b.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8009e86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e8a:	d037      	beq.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e90:	d018      	beq.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8009e92:	e036      	b.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fc57 	bl	800a74c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ea2:	e195      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ea4:	f107 0318 	add.w	r3, r7, #24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 f9b7 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eb2:	e18d      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eb4:	f107 030c 	add.w	r3, r7, #12
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fafb 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ec2:	e185      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ec4:	4b34      	ldr	r3, [pc, #208]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ecc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d102      	bne.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009ed4:	4b31      	ldr	r3, [pc, #196]	; (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009ed8:	e17a      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ee0:	d102      	bne.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8009ee2:	4b2f      	ldr	r3, [pc, #188]	; (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ee6:	e173      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eee:	d102      	bne.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8009ef0:	4b2c      	ldr	r3, [pc, #176]	; (8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ef4:	e16c      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009efa:	e169      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009efc:	4b2a      	ldr	r3, [pc, #168]	; (8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f00:	e166      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f06:	bf00      	nop
 8009f08:	e162      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f10:	d15d      	bne.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009f12:	4b21      	ldr	r3, [pc, #132]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009f1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f22:	d01f      	beq.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f28:	d805      	bhi.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009f2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f32:	d00f      	beq.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8009f34:	e047      	b.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009f36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f3a:	d041      	beq.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f40:	d018      	beq.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8009f42:	e040      	b.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fbff 	bl	800a74c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f52:	e13d      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f54:	f107 0318 	add.w	r3, r7, #24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 f95f 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f62:	e135      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 faa3 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f72:	e12d      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f74:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f7c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d102      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009f88:	e122      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f90:	d10c      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8009f92:	4b03      	ldr	r3, [pc, #12]	; (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f96:	e11b      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009f98:	58024400 	.word	0x58024400
 8009f9c:	03d09000 	.word	0x03d09000
 8009fa0:	003d0900 	.word	0x003d0900
 8009fa4:	017d7840 	.word	0x017d7840
 8009fa8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb2:	d102      	bne.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8009fb4:	4b89      	ldr	r3, [pc, #548]	; (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fb8:	e10a      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fbe:	e107      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009fc0:	4b87      	ldr	r3, [pc, #540]	; (800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8009fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fc4:	e104      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fca:	bf00      	nop
 8009fcc:	e100      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd4:	d153      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009fd6:	4b83      	ldr	r3, [pc, #524]	; (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fda:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009fde:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe6:	d01f      	beq.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fec:	d805      	bhi.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8009ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff6:	d00f      	beq.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009ff8:	e03d      	b.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8009ffa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ffe:	d037      	beq.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a004:	d018      	beq.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a006:	e036      	b.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fb9d 	bl	800a74c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a016:	e0db      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a018:	f107 0318 	add.w	r3, r7, #24
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 f8fd 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a026:	e0d3      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a028:	f107 030c 	add.w	r3, r7, #12
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fa41 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a036:	e0cb      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a038:	4b6a      	ldr	r3, [pc, #424]	; (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a03a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a03c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a040:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a044:	2b00      	cmp	r3, #0
 800a046:	d102      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a048:	4b67      	ldr	r3, [pc, #412]	; (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a04c:	e0c0      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a054:	d102      	bne.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a056:	4b65      	ldr	r3, [pc, #404]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a05a:	e0b9      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a062:	d102      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a064:	4b5d      	ldr	r3, [pc, #372]	; (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a068:	e0b2      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a06e:	e0af      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a070:	4b5b      	ldr	r3, [pc, #364]	; (800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a074:	e0ac      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a07a:	bf00      	nop
 800a07c:	e0a8      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a084:	d13d      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a086:	4b57      	ldr	r3, [pc, #348]	; (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a08e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a096:	d00c      	beq.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a09c:	d011      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d12b      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a2:	f107 0318 	add.w	r3, r7, #24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 f8b8 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0b0:	e08e      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0b2:	f107 030c 	add.w	r3, r7, #12
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 f9fc 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0c0:	e086      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a0c2:	4b48      	ldr	r3, [pc, #288]	; (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0ca:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d102      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a0d2:	4b45      	ldr	r3, [pc, #276]	; (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a0d6:	e07b      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0de:	d102      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a0e0:	4b42      	ldr	r3, [pc, #264]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0e4:	e074      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ec:	d102      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a0ee:	4b3b      	ldr	r3, [pc, #236]	; (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0f2:	e06d      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0f8:	e06a      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0fe:	bf00      	nop
 800a100:	e066      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a108:	d11f      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a10a:	4b36      	ldr	r3, [pc, #216]	; (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a112:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a11a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a11e:	d008      	beq.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a120:	e00f      	b.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fb10 	bl	800a74c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a130:	e04e      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a132:	f107 0318 	add.w	r3, r7, #24
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f870 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a140:	e046      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a146:	bf00      	nop
 800a148:	e042      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a150:	d13c      	bne.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a152:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a156:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a15a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a162:	d01e      	beq.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a168:	d805      	bhi.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00d      	beq.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a16e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a172:	d00e      	beq.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a174:	e026      	b.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a17a:	d01d      	beq.n	800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a17c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a180:	d01d      	beq.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a186:	d014      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a188:	e01c      	b.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a18a:	f000 f831 	bl	800a1f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a18e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a190:	e01e      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a192:	f107 0318 	add.w	r3, r7, #24
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f840 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1a0:	e016      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 f984 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1b0:	e00e      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1b6:	e00b      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a1b8:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1bc:	e008      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a1be:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1c2:	e005      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1c8:	bf00      	nop
 800a1ca:	e001      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3740      	adds	r7, #64	; 0x40
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	017d7840 	.word	0x017d7840
 800a1e0:	00bb8000 	.word	0x00bb8000
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	03d09000 	.word	0x03d09000
 800a1ec:	003d0900 	.word	0x003d0900

0800a1f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a1f4:	f7fe fe4a 	bl	8008e8c <HAL_RCC_GetHCLKFreq>
 800a1f8:	4601      	mov	r1, r0
 800a1fa:	4b06      	ldr	r3, [pc, #24]	; (800a214 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	091b      	lsrs	r3, r3, #4
 800a200:	f003 0307 	and.w	r3, r3, #7
 800a204:	4a04      	ldr	r2, [pc, #16]	; (800a218 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a206:	5cd3      	ldrb	r3, [r2, r3]
 800a208:	f003 031f 	and.w	r3, r3, #31
 800a20c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a210:	4618      	mov	r0, r3
 800a212:	bd80      	pop	{r7, pc}
 800a214:	58024400 	.word	0x58024400
 800a218:	08010504 	.word	0x08010504

0800a21c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b089      	sub	sp, #36	; 0x24
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a224:	4b9d      	ldr	r3, [pc, #628]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a228:	f003 0303 	and.w	r3, r3, #3
 800a22c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a22e:	4b9b      	ldr	r3, [pc, #620]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	0b1b      	lsrs	r3, r3, #12
 800a234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a238:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a23a:	4b98      	ldr	r3, [pc, #608]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23e:	091b      	lsrs	r3, r3, #4
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a246:	4b95      	ldr	r3, [pc, #596]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24a:	08db      	lsrs	r3, r3, #3
 800a24c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	fb02 f303 	mul.w	r3, r2, r3
 800a256:	ee07 3a90 	vmov	s15, r3
 800a25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 810a 	beq.w	800a47e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d05a      	beq.n	800a326 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a270:	2b01      	cmp	r3, #1
 800a272:	d302      	bcc.n	800a27a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a274:	2b02      	cmp	r3, #2
 800a276:	d078      	beq.n	800a36a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a278:	e099      	b.n	800a3ae <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a27a:	4b88      	ldr	r3, [pc, #544]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0320 	and.w	r3, r3, #32
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02d      	beq.n	800a2e2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a286:	4b85      	ldr	r3, [pc, #532]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	08db      	lsrs	r3, r3, #3
 800a28c:	f003 0303 	and.w	r3, r3, #3
 800a290:	4a83      	ldr	r2, [pc, #524]	; (800a4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800a292:	fa22 f303 	lsr.w	r3, r2, r3
 800a296:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2b0:	4b7a      	ldr	r3, [pc, #488]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b8:	ee07 3a90 	vmov	s15, r3
 800a2bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a2c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a2e0:	e087      	b.n	800a3f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a2f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2f4:	4b69      	ldr	r3, [pc, #420]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fc:	ee07 3a90 	vmov	s15, r3
 800a300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a304:	ed97 6a03 	vldr	s12, [r7, #12]
 800a308:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a30c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a31c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a320:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a324:	e065      	b.n	800a3f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	ee07 3a90 	vmov	s15, r3
 800a32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a330:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a338:	4b58      	ldr	r3, [pc, #352]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a340:	ee07 3a90 	vmov	s15, r3
 800a344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a348:	ed97 6a03 	vldr	s12, [r7, #12]
 800a34c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a35c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a360:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a364:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a368:	e043      	b.n	800a3f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	ee07 3a90 	vmov	s15, r3
 800a370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a374:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a37c:	4b47      	ldr	r3, [pc, #284]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a384:	ee07 3a90 	vmov	s15, r3
 800a388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a390:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a39c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3ac:	e021      	b.n	800a3f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a3bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c0:	4b36      	ldr	r3, [pc, #216]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c8:	ee07 3a90 	vmov	s15, r3
 800a3cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a3d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3f0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a3f2:	4b2a      	ldr	r3, [pc, #168]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	0a5b      	lsrs	r3, r3, #9
 800a3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fc:	ee07 3a90 	vmov	s15, r3
 800a400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a418:	ee17 2a90 	vmov	r2, s15
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a420:	4b1e      	ldr	r3, [pc, #120]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	0c1b      	lsrs	r3, r3, #16
 800a426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a43a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a446:	ee17 2a90 	vmov	r2, s15
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	0e1b      	lsrs	r3, r3, #24
 800a454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a458:	ee07 3a90 	vmov	s15, r3
 800a45c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a464:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a468:	edd7 6a07 	vldr	s13, [r7, #28]
 800a46c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a474:	ee17 2a90 	vmov	r2, s15
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a47c:	e008      	b.n	800a490 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	609a      	str	r2, [r3, #8]
}
 800a490:	bf00      	nop
 800a492:	3724      	adds	r7, #36	; 0x24
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	58024400 	.word	0x58024400
 800a4a0:	03d09000 	.word	0x03d09000
 800a4a4:	46000000 	.word	0x46000000
 800a4a8:	4c742400 	.word	0x4c742400
 800a4ac:	4a742400 	.word	0x4a742400
 800a4b0:	4bbebc20 	.word	0x4bbebc20

0800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b089      	sub	sp, #36	; 0x24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4bc:	4b9d      	ldr	r3, [pc, #628]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a4c6:	4b9b      	ldr	r3, [pc, #620]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ca:	0d1b      	lsrs	r3, r3, #20
 800a4cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a4d2:	4b98      	ldr	r3, [pc, #608]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d6:	0a1b      	lsrs	r3, r3, #8
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a4de:	4b95      	ldr	r3, [pc, #596]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e2:	08db      	lsrs	r3, r3, #3
 800a4e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	fb02 f303 	mul.w	r3, r2, r3
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 810a 	beq.w	800a716 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d05a      	beq.n	800a5be <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d302      	bcc.n	800a512 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d078      	beq.n	800a602 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a510:	e099      	b.n	800a646 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a512:	4b88      	ldr	r3, [pc, #544]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d02d      	beq.n	800a57a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a51e:	4b85      	ldr	r3, [pc, #532]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	08db      	lsrs	r3, r3, #3
 800a524:	f003 0303 	and.w	r3, r3, #3
 800a528:	4a83      	ldr	r2, [pc, #524]	; (800a738 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a52a:	fa22 f303 	lsr.w	r3, r2, r3
 800a52e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	ee07 3a90 	vmov	s15, r3
 800a540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a548:	4b7a      	ldr	r3, [pc, #488]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a550:	ee07 3a90 	vmov	s15, r3
 800a554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a558:	ed97 6a03 	vldr	s12, [r7, #12]
 800a55c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a73c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a56c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a570:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a574:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a578:	e087      	b.n	800a68a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	ee07 3a90 	vmov	s15, r3
 800a580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a584:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a740 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a58c:	4b69      	ldr	r3, [pc, #420]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a594:	ee07 3a90 	vmov	s15, r3
 800a598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a59c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a73c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a5a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5bc:	e065      	b.n	800a68a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a5cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d0:	4b58      	ldr	r3, [pc, #352]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d8:	ee07 3a90 	vmov	s15, r3
 800a5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a73c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a5e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a600:	e043      	b.n	800a68a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	ee07 3a90 	vmov	s15, r3
 800a608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a60c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a748 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a614:	4b47      	ldr	r3, [pc, #284]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a61c:	ee07 3a90 	vmov	s15, r3
 800a620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a624:	ed97 6a03 	vldr	s12, [r7, #12]
 800a628:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a73c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a62c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a63c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a640:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a644:	e021      	b.n	800a68a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	ee07 3a90 	vmov	s15, r3
 800a64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a650:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a658:	4b36      	ldr	r3, [pc, #216]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a660:	ee07 3a90 	vmov	s15, r3
 800a664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a668:	ed97 6a03 	vldr	s12, [r7, #12]
 800a66c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a73c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a67c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a680:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a684:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a688:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a68a:	4b2a      	ldr	r3, [pc, #168]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	0a5b      	lsrs	r3, r3, #9
 800a690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a694:	ee07 3a90 	vmov	s15, r3
 800a698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6b0:	ee17 2a90 	vmov	r2, s15
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a6b8:	4b1e      	ldr	r3, [pc, #120]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6bc:	0c1b      	lsrs	r3, r3, #16
 800a6be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6de:	ee17 2a90 	vmov	r2, s15
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a6e6:	4b13      	ldr	r3, [pc, #76]	; (800a734 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ea:	0e1b      	lsrs	r3, r3, #24
 800a6ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6f0:	ee07 3a90 	vmov	s15, r3
 800a6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a700:	edd7 6a07 	vldr	s13, [r7, #28]
 800a704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a70c:	ee17 2a90 	vmov	r2, s15
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a714:	e008      	b.n	800a728 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	609a      	str	r2, [r3, #8]
}
 800a728:	bf00      	nop
 800a72a:	3724      	adds	r7, #36	; 0x24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	58024400 	.word	0x58024400
 800a738:	03d09000 	.word	0x03d09000
 800a73c:	46000000 	.word	0x46000000
 800a740:	4c742400 	.word	0x4c742400
 800a744:	4a742400 	.word	0x4a742400
 800a748:	4bbebc20 	.word	0x4bbebc20

0800a74c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b089      	sub	sp, #36	; 0x24
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a754:	4b9d      	ldr	r3, [pc, #628]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a758:	f003 0303 	and.w	r3, r3, #3
 800a75c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a75e:	4b9b      	ldr	r3, [pc, #620]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a762:	091b      	lsrs	r3, r3, #4
 800a764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a768:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a76a:	4b98      	ldr	r3, [pc, #608]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a774:	4b95      	ldr	r3, [pc, #596]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a778:	08db      	lsrs	r3, r3, #3
 800a77a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	fb02 f303 	mul.w	r3, r2, r3
 800a784:	ee07 3a90 	vmov	s15, r3
 800a788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 810a 	beq.w	800a9ac <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d05a      	beq.n	800a854 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d302      	bcc.n	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d078      	beq.n	800a898 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800a7a6:	e099      	b.n	800a8dc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7a8:	4b88      	ldr	r3, [pc, #544]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0320 	and.w	r3, r3, #32
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d02d      	beq.n	800a810 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7b4:	4b85      	ldr	r3, [pc, #532]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	08db      	lsrs	r3, r3, #3
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	4a84      	ldr	r2, [pc, #528]	; (800a9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800a7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	ee07 3a90 	vmov	s15, r3
 800a7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7de:	4b7b      	ldr	r3, [pc, #492]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e6:	ee07 3a90 	vmov	s15, r3
 800a7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a80a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a80e:	e087      	b.n	800a920 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800a81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a822:	4b6a      	ldr	r3, [pc, #424]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a832:	ed97 6a03 	vldr	s12, [r7, #12]
 800a836:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a852:	e065      	b.n	800a920 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a866:	4b59      	ldr	r3, [pc, #356]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a876:	ed97 6a03 	vldr	s12, [r7, #12]
 800a87a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a896:	e043      	b.n	800a920 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8aa:	4b48      	ldr	r3, [pc, #288]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8da:	e021      	b.n	800a920 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	ee07 3a90 	vmov	s15, r3
 800a8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ee:	4b37      	ldr	r3, [pc, #220]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a902:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a91e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a920:	4b2a      	ldr	r3, [pc, #168]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a924:	0a5b      	lsrs	r3, r3, #9
 800a926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a946:	ee17 2a90 	vmov	r2, s15
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a94e:	4b1f      	ldr	r3, [pc, #124]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a952:	0c1b      	lsrs	r3, r3, #16
 800a954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a958:	ee07 3a90 	vmov	s15, r3
 800a95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a964:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a968:	edd7 6a07 	vldr	s13, [r7, #28]
 800a96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a974:	ee17 2a90 	vmov	r2, s15
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a97c:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a980:	0e1b      	lsrs	r3, r3, #24
 800a982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a992:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a996:	edd7 6a07 	vldr	s13, [r7, #28]
 800a99a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9a2:	ee17 2a90 	vmov	r2, s15
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a9aa:	e008      	b.n	800a9be <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	609a      	str	r2, [r3, #8]
}
 800a9be:	bf00      	nop
 800a9c0:	3724      	adds	r7, #36	; 0x24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	03d09000 	.word	0x03d09000
 800a9d4:	46000000 	.word	0x46000000
 800a9d8:	4c742400 	.word	0x4c742400
 800a9dc:	4a742400 	.word	0x4a742400
 800a9e0:	4bbebc20 	.word	0x4bbebc20

0800a9e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a9f2:	4b53      	ldr	r3, [pc, #332]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d101      	bne.n	800aa02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e099      	b.n	800ab36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa02:	4b4f      	ldr	r3, [pc, #316]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a4e      	ldr	r2, [pc, #312]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aa0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa0e:	f7f9 f815 	bl	8003a3c <HAL_GetTick>
 800aa12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa14:	e008      	b.n	800aa28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa16:	f7f9 f811 	bl	8003a3c <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d901      	bls.n	800aa28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e086      	b.n	800ab36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa28:	4b45      	ldr	r3, [pc, #276]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1f0      	bne.n	800aa16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aa34:	4b42      	ldr	r3, [pc, #264]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	031b      	lsls	r3, r3, #12
 800aa42:	493f      	ldr	r1, [pc, #252]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	628b      	str	r3, [r1, #40]	; 0x28
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	025b      	lsls	r3, r3, #9
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	041b      	lsls	r3, r3, #16
 800aa66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	061b      	lsls	r3, r3, #24
 800aa74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa78:	4931      	ldr	r1, [pc, #196]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aa7e:	4b30      	ldr	r3, [pc, #192]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	492d      	ldr	r1, [pc, #180]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aa90:	4b2b      	ldr	r3, [pc, #172]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa94:	f023 0220 	bic.w	r2, r3, #32
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	4928      	ldr	r1, [pc, #160]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aaa2:	4b27      	ldr	r3, [pc, #156]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa6:	4a26      	ldr	r2, [pc, #152]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aaa8:	f023 0310 	bic.w	r3, r3, #16
 800aaac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aaae:	4b24      	ldr	r3, [pc, #144]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aab2:	4b24      	ldr	r3, [pc, #144]	; (800ab44 <RCCEx_PLL2_Config+0x160>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	69d2      	ldr	r2, [r2, #28]
 800aaba:	00d2      	lsls	r2, r2, #3
 800aabc:	4920      	ldr	r1, [pc, #128]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aabe:	4313      	orrs	r3, r2
 800aac0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aac2:	4b1f      	ldr	r3, [pc, #124]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac6:	4a1e      	ldr	r2, [pc, #120]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aac8:	f043 0310 	orr.w	r3, r3, #16
 800aacc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d106      	bne.n	800aae2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aad4:	4b1a      	ldr	r3, [pc, #104]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4a19      	ldr	r2, [pc, #100]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aade:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aae0:	e00f      	b.n	800ab02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d106      	bne.n	800aaf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aae8:	4b15      	ldr	r3, [pc, #84]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	4a14      	ldr	r2, [pc, #80]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aaee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aaf4:	e005      	b.n	800ab02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aaf6:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aaf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafa:	4a11      	ldr	r2, [pc, #68]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800aafc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab02:	4b0f      	ldr	r3, [pc, #60]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a0e      	ldr	r2, [pc, #56]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800ab08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab0e:	f7f8 ff95 	bl	8003a3c <HAL_GetTick>
 800ab12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab14:	e008      	b.n	800ab28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab16:	f7f8 ff91 	bl	8003a3c <HAL_GetTick>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d901      	bls.n	800ab28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e006      	b.n	800ab36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab28:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <RCCEx_PLL2_Config+0x15c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0f0      	beq.n	800ab16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	58024400 	.word	0x58024400
 800ab44:	ffff0007 	.word	0xffff0007

0800ab48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab56:	4b53      	ldr	r3, [pc, #332]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d101      	bne.n	800ab66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e099      	b.n	800ac9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ab66:	4b4f      	ldr	r3, [pc, #316]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a4e      	ldr	r2, [pc, #312]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ab6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab72:	f7f8 ff63 	bl	8003a3c <HAL_GetTick>
 800ab76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab78:	e008      	b.n	800ab8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab7a:	f7f8 ff5f 	bl	8003a3c <HAL_GetTick>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d901      	bls.n	800ab8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e086      	b.n	800ac9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab8c:	4b45      	ldr	r3, [pc, #276]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1f0      	bne.n	800ab7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ab98:	4b42      	ldr	r3, [pc, #264]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	051b      	lsls	r3, r3, #20
 800aba6:	493f      	ldr	r1, [pc, #252]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800aba8:	4313      	orrs	r3, r2
 800abaa:	628b      	str	r3, [r1, #40]	; 0x28
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	3b01      	subs	r3, #1
 800abbc:	025b      	lsls	r3, r3, #9
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	431a      	orrs	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	041b      	lsls	r3, r3, #16
 800abca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	061b      	lsls	r3, r3, #24
 800abd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800abdc:	4931      	ldr	r1, [pc, #196]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800abde:	4313      	orrs	r3, r2
 800abe0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800abe2:	4b30      	ldr	r3, [pc, #192]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	492d      	ldr	r1, [pc, #180]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800abf0:	4313      	orrs	r3, r2
 800abf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800abf4:	4b2b      	ldr	r3, [pc, #172]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800abf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	4928      	ldr	r1, [pc, #160]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac02:	4313      	orrs	r3, r2
 800ac04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac06:	4b27      	ldr	r3, [pc, #156]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0a:	4a26      	ldr	r2, [pc, #152]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac12:	4b24      	ldr	r3, [pc, #144]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac16:	4b24      	ldr	r3, [pc, #144]	; (800aca8 <RCCEx_PLL3_Config+0x160>)
 800ac18:	4013      	ands	r3, r2
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	69d2      	ldr	r2, [r2, #28]
 800ac1e:	00d2      	lsls	r2, r2, #3
 800ac20:	4920      	ldr	r1, [pc, #128]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ac26:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2a:	4a1e      	ldr	r2, [pc, #120]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d106      	bne.n	800ac46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ac38:	4b1a      	ldr	r3, [pc, #104]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3c:	4a19      	ldr	r2, [pc, #100]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ac42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac44:	e00f      	b.n	800ac66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d106      	bne.n	800ac5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ac4c:	4b15      	ldr	r3, [pc, #84]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac50:	4a14      	ldr	r2, [pc, #80]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac58:	e005      	b.n	800ac66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ac5a:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5e:	4a11      	ldr	r2, [pc, #68]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac66:	4b0f      	ldr	r3, [pc, #60]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a0e      	ldr	r2, [pc, #56]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac72:	f7f8 fee3 	bl	8003a3c <HAL_GetTick>
 800ac76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac78:	e008      	b.n	800ac8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ac7a:	f7f8 fedf 	bl	8003a3c <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e006      	b.n	800ac9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac8c:	4b05      	ldr	r3, [pc, #20]	; (800aca4 <RCCEx_PLL3_Config+0x15c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d0f0      	beq.n	800ac7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	58024400 	.word	0x58024400
 800aca8:	ffff0007 	.word	0xffff0007

0800acac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e01d      	b.n	800acfa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7f8 f81a 	bl	8002d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f000 f97c 	bl	800afe8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
	...

0800ad04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f042 0201 	orr.w	r2, r2, #1
 800ad1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689a      	ldr	r2, [r3, #8]
 800ad22:	4b0c      	ldr	r3, [pc, #48]	; (800ad54 <HAL_TIM_Base_Start_IT+0x50>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b06      	cmp	r3, #6
 800ad2c:	d00b      	beq.n	800ad46 <HAL_TIM_Base_Start_IT+0x42>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad34:	d007      	beq.n	800ad46 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f042 0201 	orr.w	r2, r2, #1
 800ad44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	00010007 	.word	0x00010007

0800ad58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d122      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d11b      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f06f 0202 	mvn.w	r2, #2
 800ad84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	f003 0303 	and.w	r3, r3, #3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f905 	bl	800afaa <HAL_TIM_IC_CaptureCallback>
 800ada0:	e005      	b.n	800adae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f8f7 	bl	800af96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f908 	bl	800afbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b04      	cmp	r3, #4
 800adc0:	d122      	bne.n	800ae08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d11b      	bne.n	800ae08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f06f 0204 	mvn.w	r2, #4
 800add8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2202      	movs	r2, #2
 800adde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adea:	2b00      	cmp	r3, #0
 800adec:	d003      	beq.n	800adf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f8db 	bl	800afaa <HAL_TIM_IC_CaptureCallback>
 800adf4:	e005      	b.n	800ae02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f8cd 	bl	800af96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f8de 	bl	800afbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	f003 0308 	and.w	r3, r3, #8
 800ae12:	2b08      	cmp	r3, #8
 800ae14:	d122      	bne.n	800ae5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	f003 0308 	and.w	r3, r3, #8
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d11b      	bne.n	800ae5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f06f 0208 	mvn.w	r2, #8
 800ae2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2204      	movs	r2, #4
 800ae32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f8b1 	bl	800afaa <HAL_TIM_IC_CaptureCallback>
 800ae48:	e005      	b.n	800ae56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f8a3 	bl	800af96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f8b4 	bl	800afbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	f003 0310 	and.w	r3, r3, #16
 800ae66:	2b10      	cmp	r3, #16
 800ae68:	d122      	bne.n	800aeb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f003 0310 	and.w	r3, r3, #16
 800ae74:	2b10      	cmp	r3, #16
 800ae76:	d11b      	bne.n	800aeb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f06f 0210 	mvn.w	r2, #16
 800ae80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2208      	movs	r2, #8
 800ae86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	69db      	ldr	r3, [r3, #28]
 800ae8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d003      	beq.n	800ae9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f887 	bl	800afaa <HAL_TIM_IC_CaptureCallback>
 800ae9c:	e005      	b.n	800aeaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f879 	bl	800af96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f88a 	bl	800afbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d10e      	bne.n	800aedc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d107      	bne.n	800aedc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f06f 0201 	mvn.w	r2, #1
 800aed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7f6 fad4 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee6:	2b80      	cmp	r3, #128	; 0x80
 800aee8:	d10e      	bne.n	800af08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef4:	2b80      	cmp	r3, #128	; 0x80
 800aef6:	d107      	bne.n	800af08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f99c 	bl	800b240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af16:	d10e      	bne.n	800af36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af22:	2b80      	cmp	r3, #128	; 0x80
 800af24:	d107      	bne.n	800af36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f98f 	bl	800b254 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af40:	2b40      	cmp	r3, #64	; 0x40
 800af42:	d10e      	bne.n	800af62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4e:	2b40      	cmp	r3, #64	; 0x40
 800af50:	d107      	bne.n	800af62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f838 	bl	800afd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	d10e      	bne.n	800af8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b20      	cmp	r3, #32
 800af7c:	d107      	bne.n	800af8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f06f 0220 	mvn.w	r2, #32
 800af86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f94f 	bl	800b22c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af8e:	bf00      	nop
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af96:	b480      	push	{r7}
 800af98:	b083      	sub	sp, #12
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af9e:	bf00      	nop
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800afb2:	bf00      	nop
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800afc6:	bf00      	nop
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
	...

0800afe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a40      	ldr	r2, [pc, #256]	; (800b0fc <TIM_Base_SetConfig+0x114>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d013      	beq.n	800b028 <TIM_Base_SetConfig+0x40>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b006:	d00f      	beq.n	800b028 <TIM_Base_SetConfig+0x40>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a3d      	ldr	r2, [pc, #244]	; (800b100 <TIM_Base_SetConfig+0x118>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00b      	beq.n	800b028 <TIM_Base_SetConfig+0x40>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a3c      	ldr	r2, [pc, #240]	; (800b104 <TIM_Base_SetConfig+0x11c>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d007      	beq.n	800b028 <TIM_Base_SetConfig+0x40>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a3b      	ldr	r2, [pc, #236]	; (800b108 <TIM_Base_SetConfig+0x120>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d003      	beq.n	800b028 <TIM_Base_SetConfig+0x40>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a3a      	ldr	r2, [pc, #232]	; (800b10c <TIM_Base_SetConfig+0x124>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d108      	bne.n	800b03a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b02e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a2f      	ldr	r2, [pc, #188]	; (800b0fc <TIM_Base_SetConfig+0x114>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d01f      	beq.n	800b082 <TIM_Base_SetConfig+0x9a>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b048:	d01b      	beq.n	800b082 <TIM_Base_SetConfig+0x9a>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a2c      	ldr	r2, [pc, #176]	; (800b100 <TIM_Base_SetConfig+0x118>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d017      	beq.n	800b082 <TIM_Base_SetConfig+0x9a>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a2b      	ldr	r2, [pc, #172]	; (800b104 <TIM_Base_SetConfig+0x11c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d013      	beq.n	800b082 <TIM_Base_SetConfig+0x9a>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a2a      	ldr	r2, [pc, #168]	; (800b108 <TIM_Base_SetConfig+0x120>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d00f      	beq.n	800b082 <TIM_Base_SetConfig+0x9a>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a29      	ldr	r2, [pc, #164]	; (800b10c <TIM_Base_SetConfig+0x124>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d00b      	beq.n	800b082 <TIM_Base_SetConfig+0x9a>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a28      	ldr	r2, [pc, #160]	; (800b110 <TIM_Base_SetConfig+0x128>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d007      	beq.n	800b082 <TIM_Base_SetConfig+0x9a>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a27      	ldr	r2, [pc, #156]	; (800b114 <TIM_Base_SetConfig+0x12c>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d003      	beq.n	800b082 <TIM_Base_SetConfig+0x9a>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a26      	ldr	r2, [pc, #152]	; (800b118 <TIM_Base_SetConfig+0x130>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d108      	bne.n	800b094 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	4313      	orrs	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	689a      	ldr	r2, [r3, #8]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a10      	ldr	r2, [pc, #64]	; (800b0fc <TIM_Base_SetConfig+0x114>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d00f      	beq.n	800b0e0 <TIM_Base_SetConfig+0xf8>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a12      	ldr	r2, [pc, #72]	; (800b10c <TIM_Base_SetConfig+0x124>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d00b      	beq.n	800b0e0 <TIM_Base_SetConfig+0xf8>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a11      	ldr	r2, [pc, #68]	; (800b110 <TIM_Base_SetConfig+0x128>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d007      	beq.n	800b0e0 <TIM_Base_SetConfig+0xf8>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a10      	ldr	r2, [pc, #64]	; (800b114 <TIM_Base_SetConfig+0x12c>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d003      	beq.n	800b0e0 <TIM_Base_SetConfig+0xf8>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a0f      	ldr	r2, [pc, #60]	; (800b118 <TIM_Base_SetConfig+0x130>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d103      	bne.n	800b0e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	615a      	str	r2, [r3, #20]
}
 800b0ee:	bf00      	nop
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	40010000 	.word	0x40010000
 800b100:	40000400 	.word	0x40000400
 800b104:	40000800 	.word	0x40000800
 800b108:	40000c00 	.word	0x40000c00
 800b10c:	40010400 	.word	0x40010400
 800b110:	40014000 	.word	0x40014000
 800b114:	40014400 	.word	0x40014400
 800b118:	40014800 	.word	0x40014800

0800b11c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d101      	bne.n	800b134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b130:	2302      	movs	r3, #2
 800b132:	e068      	b.n	800b206 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a2e      	ldr	r2, [pc, #184]	; (800b214 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d004      	beq.n	800b168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a2d      	ldr	r2, [pc, #180]	; (800b218 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d108      	bne.n	800b17a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b16e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	4313      	orrs	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b180:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	4313      	orrs	r3, r2
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a1e      	ldr	r2, [pc, #120]	; (800b214 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d01d      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a6:	d018      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d013      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a1a      	ldr	r2, [pc, #104]	; (800b220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00e      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a18      	ldr	r2, [pc, #96]	; (800b224 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d009      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a13      	ldr	r2, [pc, #76]	; (800b218 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d004      	beq.n	800b1da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a14      	ldr	r2, [pc, #80]	; (800b228 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d10c      	bne.n	800b1f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	40010000 	.word	0x40010000
 800b218:	40010400 	.word	0x40010400
 800b21c:	40000400 	.word	0x40000400
 800b220:	40000800 	.word	0x40000800
 800b224:	40000c00 	.word	0x40000c00
 800b228:	40001800 	.word	0x40001800

0800b22c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e042      	b.n	800b300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7f7 fd65 	bl	8002d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2224      	movs	r2, #36	; 0x24
 800b296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f022 0201 	bic.w	r2, r2, #1
 800b2a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fc3c 	bl	800bb28 <UART_SetConfig>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d101      	bne.n	800b2ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e022      	b.n	800b300 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f002 fdae 	bl	800de24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685a      	ldr	r2, [r3, #4]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f042 0201 	orr.w	r2, r2, #1
 800b2f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f002 fe35 	bl	800df68 <UART_CheckIdleState>
 800b2fe:	4603      	mov	r3, r0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08a      	sub	sp, #40	; 0x28
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	4613      	mov	r3, r2
 800b316:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b31e:	2b20      	cmp	r3, #32
 800b320:	f040 8083 	bne.w	800b42a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d002      	beq.n	800b330 <HAL_UART_Transmit+0x28>
 800b32a:	88fb      	ldrh	r3, [r7, #6]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e07b      	b.n	800b42c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d101      	bne.n	800b342 <HAL_UART_Transmit+0x3a>
 800b33e:	2302      	movs	r3, #2
 800b340:	e074      	b.n	800b42c <HAL_UART_Transmit+0x124>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2221      	movs	r2, #33	; 0x21
 800b356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b35a:	f7f8 fb6f 	bl	8003a3c <HAL_GetTick>
 800b35e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	88fa      	ldrh	r2, [r7, #6]
 800b364:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	88fa      	ldrh	r2, [r7, #6]
 800b36c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b378:	d108      	bne.n	800b38c <HAL_UART_Transmit+0x84>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d104      	bne.n	800b38c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b382:	2300      	movs	r3, #0
 800b384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	61bb      	str	r3, [r7, #24]
 800b38a:	e003      	b.n	800b394 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b390:	2300      	movs	r3, #0
 800b392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b394:	e02c      	b.n	800b3f0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2200      	movs	r2, #0
 800b39e:	2180      	movs	r1, #128	; 0x80
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f002 fe29 	bl	800dff8 <UART_WaitOnFlagUntilTimeout>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e03d      	b.n	800b42c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10b      	bne.n	800b3ce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	3302      	adds	r3, #2
 800b3ca:	61bb      	str	r3, [r7, #24]
 800b3cc:	e007      	b.n	800b3de <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	781a      	ldrb	r2, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1cc      	bne.n	800b396 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2200      	movs	r2, #0
 800b404:	2140      	movs	r1, #64	; 0x40
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f002 fdf6 	bl	800dff8 <UART_WaitOnFlagUntilTimeout>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e00a      	b.n	800b42c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2220      	movs	r2, #32
 800b41a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	e000      	b.n	800b42c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b42a:	2302      	movs	r3, #2
  }
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3720      	adds	r7, #32
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	4613      	mov	r3, r2
 800b440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b448:	2b20      	cmp	r3, #32
 800b44a:	d168      	bne.n	800b51e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <HAL_UART_Transmit_IT+0x24>
 800b452:	88fb      	ldrh	r3, [r7, #6]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e061      	b.n	800b520 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b462:	2b01      	cmp	r3, #1
 800b464:	d101      	bne.n	800b46a <HAL_UART_Transmit_IT+0x36>
 800b466:	2302      	movs	r3, #2
 800b468:	e05a      	b.n	800b520 <HAL_UART_Transmit_IT+0xec>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	88fa      	ldrh	r2, [r7, #6]
 800b47c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	88fa      	ldrh	r2, [r7, #6]
 800b484:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2221      	movs	r2, #33	; 0x21
 800b49a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4a6:	d11c      	bne.n	800b4e2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b0:	d107      	bne.n	800b4c2 <HAL_UART_Transmit_IT+0x8e>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d103      	bne.n	800b4c2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	4a1b      	ldr	r2, [pc, #108]	; (800b52c <HAL_UART_Transmit_IT+0xf8>)
 800b4be:	671a      	str	r2, [r3, #112]	; 0x70
 800b4c0:	e002      	b.n	800b4c8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	4a1a      	ldr	r2, [pc, #104]	; (800b530 <HAL_UART_Transmit_IT+0xfc>)
 800b4c6:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689a      	ldr	r2, [r3, #8]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b4de:	609a      	str	r2, [r3, #8]
 800b4e0:	e01b      	b.n	800b51a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ea:	d107      	bne.n	800b4fc <HAL_UART_Transmit_IT+0xc8>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d103      	bne.n	800b4fc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4a0f      	ldr	r2, [pc, #60]	; (800b534 <HAL_UART_Transmit_IT+0x100>)
 800b4f8:	671a      	str	r2, [r3, #112]	; 0x70
 800b4fa:	e002      	b.n	800b502 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4a0e      	ldr	r2, [pc, #56]	; (800b538 <HAL_UART_Transmit_IT+0x104>)
 800b500:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b518:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	e000      	b.n	800b520 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800b51e:	2302      	movs	r3, #2
  }
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	0800e437 	.word	0x0800e437
 800b530:	0800e39d 	.word	0x0800e39d
 800b534:	0800e31f 	.word	0x0800e31f
 800b538:	0800e2ab 	.word	0x0800e2ab

0800b53c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b550:	2b20      	cmp	r3, #32
 800b552:	f040 80bc 	bne.w	800b6ce <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <HAL_UART_Receive_IT+0x26>
 800b55c:	88fb      	ldrh	r3, [r7, #6]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e0b4      	b.n	800b6d0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_UART_Receive_IT+0x38>
 800b570:	2302      	movs	r3, #2
 800b572:	e0ad      	b.n	800b6d0 <HAL_UART_Receive_IT+0x194>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	88fa      	ldrh	r2, [r7, #6]
 800b586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	88fa      	ldrh	r2, [r7, #6]
 800b58e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5a0:	d10e      	bne.n	800b5c0 <HAL_UART_Receive_IT+0x84>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d105      	bne.n	800b5b6 <HAL_UART_Receive_IT+0x7a>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b5b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b5b4:	e02d      	b.n	800b612 <HAL_UART_Receive_IT+0xd6>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	22ff      	movs	r2, #255	; 0xff
 800b5ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b5be:	e028      	b.n	800b612 <HAL_UART_Receive_IT+0xd6>
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10d      	bne.n	800b5e4 <HAL_UART_Receive_IT+0xa8>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d104      	bne.n	800b5da <HAL_UART_Receive_IT+0x9e>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	22ff      	movs	r2, #255	; 0xff
 800b5d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b5d8:	e01b      	b.n	800b612 <HAL_UART_Receive_IT+0xd6>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	227f      	movs	r2, #127	; 0x7f
 800b5de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b5e2:	e016      	b.n	800b612 <HAL_UART_Receive_IT+0xd6>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5ec:	d10d      	bne.n	800b60a <HAL_UART_Receive_IT+0xce>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d104      	bne.n	800b600 <HAL_UART_Receive_IT+0xc4>
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	227f      	movs	r2, #127	; 0x7f
 800b5fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b5fe:	e008      	b.n	800b612 <HAL_UART_Receive_IT+0xd6>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	223f      	movs	r2, #63	; 0x3f
 800b604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b608:	e003      	b.n	800b612 <HAL_UART_Receive_IT+0xd6>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2222      	movs	r2, #34	; 0x22
 800b61e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	689a      	ldr	r2, [r3, #8]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f042 0201 	orr.w	r2, r2, #1
 800b630:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b63a:	d12a      	bne.n	800b692 <HAL_UART_Receive_IT+0x156>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b642:	88fa      	ldrh	r2, [r7, #6]
 800b644:	429a      	cmp	r2, r3
 800b646:	d324      	bcc.n	800b692 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b650:	d107      	bne.n	800b662 <HAL_UART_Receive_IT+0x126>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d103      	bne.n	800b662 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	4a1f      	ldr	r2, [pc, #124]	; (800b6dc <HAL_UART_Receive_IT+0x1a0>)
 800b65e:	66da      	str	r2, [r3, #108]	; 0x6c
 800b660:	e002      	b.n	800b668 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	4a1e      	ldr	r2, [pc, #120]	; (800b6e0 <HAL_UART_Receive_IT+0x1a4>)
 800b666:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b67e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	689a      	ldr	r2, [r3, #8]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b68e:	609a      	str	r2, [r3, #8]
 800b690:	e01b      	b.n	800b6ca <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b69a:	d107      	bne.n	800b6ac <HAL_UART_Receive_IT+0x170>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d103      	bne.n	800b6ac <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4a0f      	ldr	r2, [pc, #60]	; (800b6e4 <HAL_UART_Receive_IT+0x1a8>)
 800b6a8:	66da      	str	r2, [r3, #108]	; 0x6c
 800b6aa:	e002      	b.n	800b6b2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4a0e      	ldr	r2, [pc, #56]	; (800b6e8 <HAL_UART_Receive_IT+0x1ac>)
 800b6b0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b6c8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e000      	b.n	800b6d0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800b6ce:	2302      	movs	r3, #2
  }
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	0800e76d 	.word	0x0800e76d
 800b6e0:	0800e665 	.word	0x0800e665
 800b6e4:	0800e5b9 	.word	0x0800e5b9
 800b6e8:	0800e50f 	.word	0x0800e50f

0800b6ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b700:	2b20      	cmp	r3, #32
 800b702:	d170      	bne.n	800b7e6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <HAL_UART_Receive_DMA+0x24>
 800b70a:	88fb      	ldrh	r3, [r7, #6]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	e069      	b.n	800b7e8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d101      	bne.n	800b722 <HAL_UART_Receive_DMA+0x36>
 800b71e:	2302      	movs	r3, #2
 800b720:	e062      	b.n	800b7e8 <HAL_UART_Receive_DMA+0xfc>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	88fa      	ldrh	r2, [r7, #6]
 800b734:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2222      	movs	r2, #34	; 0x22
 800b744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d02c      	beq.n	800b7aa <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b754:	4a26      	ldr	r2, [pc, #152]	; (800b7f0 <HAL_UART_Receive_DMA+0x104>)
 800b756:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b75c:	4a25      	ldr	r2, [pc, #148]	; (800b7f4 <HAL_UART_Receive_DMA+0x108>)
 800b75e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b764:	4a24      	ldr	r2, [pc, #144]	; (800b7f8 <HAL_UART_Receive_DMA+0x10c>)
 800b766:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b76c:	2200      	movs	r2, #0
 800b76e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3324      	adds	r3, #36	; 0x24
 800b77a:	4619      	mov	r1, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b780:	461a      	mov	r2, r3
 800b782:	88fb      	ldrh	r3, [r7, #6]
 800b784:	f7f9 ff98 	bl	80056b8 <HAL_DMA_Start_IT>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00d      	beq.n	800b7aa <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2210      	movs	r2, #16
 800b792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2220      	movs	r2, #32
 800b7a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e01e      	b.n	800b7e8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7c0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	689a      	ldr	r2, [r3, #8]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f042 0201 	orr.w	r2, r2, #1
 800b7d0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7e0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e000      	b.n	800b7e8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800b7e6:	2302      	movs	r3, #2
  }
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	0800e17d 	.word	0x0800e17d
 800b7f4:	0800e1e3 	.word	0x0800e1e3
 800b7f8:	0800e1ff 	.word	0x0800e1ff

0800b7fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b822:	4013      	ands	r3, r2
 800b824:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d118      	bne.n	800b85e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	f003 0320 	and.w	r3, r3, #32
 800b832:	2b00      	cmp	r3, #0
 800b834:	d013      	beq.n	800b85e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f003 0320 	and.w	r3, r3, #32
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d104      	bne.n	800b84a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d009      	beq.n	800b85e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 8145 	beq.w	800bade <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	4798      	blx	r3
      }
      return;
 800b85c:	e13f      	b.n	800bade <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 80e8 	beq.w	800ba36 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	4ba1      	ldr	r3, [pc, #644]	; (800baf0 <HAL_UART_IRQHandler+0x2f4>)
 800b86a:	4013      	ands	r3, r2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d105      	bne.n	800b87c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b870:	69ba      	ldr	r2, [r7, #24]
 800b872:	4ba0      	ldr	r3, [pc, #640]	; (800baf4 <HAL_UART_IRQHandler+0x2f8>)
 800b874:	4013      	ands	r3, r2
 800b876:	2b00      	cmp	r3, #0
 800b878:	f000 80dd 	beq.w	800ba36 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	2b00      	cmp	r3, #0
 800b884:	d010      	beq.n	800b8a8 <HAL_UART_IRQHandler+0xac>
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2201      	movs	r2, #1
 800b896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b89e:	f043 0201 	orr.w	r2, r3, #1
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d010      	beq.n	800b8d4 <HAL_UART_IRQHandler+0xd8>
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00b      	beq.n	800b8d4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ca:	f043 0204 	orr.w	r2, r3, #4
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f003 0304 	and.w	r3, r3, #4
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d010      	beq.n	800b900 <HAL_UART_IRQHandler+0x104>
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00b      	beq.n	800b900 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2204      	movs	r2, #4
 800b8ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8f6:	f043 0202 	orr.w	r2, r3, #2
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	f003 0308 	and.w	r3, r3, #8
 800b906:	2b00      	cmp	r3, #0
 800b908:	d015      	beq.n	800b936 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	f003 0320 	and.w	r3, r3, #32
 800b910:	2b00      	cmp	r3, #0
 800b912:	d104      	bne.n	800b91e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	4b76      	ldr	r3, [pc, #472]	; (800baf0 <HAL_UART_IRQHandler+0x2f4>)
 800b918:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00b      	beq.n	800b936 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2208      	movs	r2, #8
 800b924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92c:	f043 0208 	orr.w	r2, r3, #8
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d011      	beq.n	800b964 <HAL_UART_IRQHandler+0x168>
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00c      	beq.n	800b964 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b95a:	f043 0220 	orr.w	r2, r3, #32
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80b9 	beq.w	800bae2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	f003 0320 	and.w	r3, r3, #32
 800b976:	2b00      	cmp	r3, #0
 800b978:	d011      	beq.n	800b99e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	f003 0320 	and.w	r3, r3, #32
 800b980:	2b00      	cmp	r3, #0
 800b982:	d104      	bne.n	800b98e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d007      	beq.n	800b99e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b0:	2b40      	cmp	r3, #64	; 0x40
 800b9b2:	d004      	beq.n	800b9be <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d031      	beq.n	800ba22 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f002 fbb8 	bl	800e134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ce:	2b40      	cmp	r3, #64	; 0x40
 800b9d0:	d123      	bne.n	800ba1a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d013      	beq.n	800ba12 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9ee:	4a42      	ldr	r2, [pc, #264]	; (800baf8 <HAL_UART_IRQHandler+0x2fc>)
 800b9f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fa f8c8 	bl	8005b8c <HAL_DMA_Abort_IT>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d017      	beq.n	800ba32 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba10:	e00f      	b.n	800ba32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f87c 	bl	800bb10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba18:	e00b      	b.n	800ba32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 f878 	bl	800bb10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba20:	e007      	b.n	800ba32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f874 	bl	800bb10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800ba30:	e057      	b.n	800bae2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba32:	bf00      	nop
    return;
 800ba34:	e055      	b.n	800bae2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00d      	beq.n	800ba5c <HAL_UART_IRQHandler+0x260>
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d008      	beq.n	800ba5c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f002 ff0d 	bl	800e874 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba5a:	e045      	b.n	800bae8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d012      	beq.n	800ba8c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d104      	bne.n	800ba7a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d008      	beq.n	800ba8c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d031      	beq.n	800bae6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
    }
    return;
 800ba8a:	e02c      	b.n	800bae6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d008      	beq.n	800baa8 <HAL_UART_IRQHandler+0x2ac>
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f002 fd1a 	bl	800e4da <UART_EndTransmit_IT>
    return;
 800baa6:	e01f      	b.n	800bae8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d008      	beq.n	800bac4 <HAL_UART_IRQHandler+0x2c8>
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f002 feed 	bl	800e89c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bac2:	e011      	b.n	800bae8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00c      	beq.n	800bae8 <HAL_UART_IRQHandler+0x2ec>
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	da09      	bge.n	800bae8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f002 fed7 	bl	800e888 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bada:	bf00      	nop
 800badc:	e004      	b.n	800bae8 <HAL_UART_IRQHandler+0x2ec>
      return;
 800bade:	bf00      	nop
 800bae0:	e002      	b.n	800bae8 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bae2:	bf00      	nop
 800bae4:	e000      	b.n	800bae8 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bae6:	bf00      	nop
  }
}
 800bae8:	3720      	adds	r7, #32
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	10000001 	.word	0x10000001
 800baf4:	04000120 	.word	0x04000120
 800baf8:	0800e27f 	.word	0x0800e27f

0800bafc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb04:	bf00      	nop
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	0000      	movs	r0, r0
	...

0800bb28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb28:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bb2c:	b090      	sub	sp, #64	; 0x40
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	689a      	ldr	r2, [r3, #8]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	431a      	orrs	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	4bc1      	ldr	r3, [pc, #772]	; (800be70 <UART_SetConfig+0x348>)
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	6812      	ldr	r2, [r2, #0]
 800bb70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb72:	430b      	orrs	r3, r1
 800bb74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68da      	ldr	r2, [r3, #12]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4ab7      	ldr	r2, [pc, #732]	; (800be74 <UART_SetConfig+0x34c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d004      	beq.n	800bba6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a1b      	ldr	r3, [r3, #32]
 800bba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bba2:	4313      	orrs	r3, r2
 800bba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	689a      	ldr	r2, [r3, #8]
 800bbac:	4bb2      	ldr	r3, [pc, #712]	; (800be78 <UART_SetConfig+0x350>)
 800bbae:	4013      	ands	r3, r2
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	6812      	ldr	r2, [r2, #0]
 800bbb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbb6:	430b      	orrs	r3, r1
 800bbb8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	f023 010f 	bic.w	r1, r3, #15
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	430a      	orrs	r2, r1
 800bbce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4aa9      	ldr	r2, [pc, #676]	; (800be7c <UART_SetConfig+0x354>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d177      	bne.n	800bcca <UART_SetConfig+0x1a2>
 800bbda:	4ba9      	ldr	r3, [pc, #676]	; (800be80 <UART_SetConfig+0x358>)
 800bbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbe2:	2b28      	cmp	r3, #40	; 0x28
 800bbe4:	d86c      	bhi.n	800bcc0 <UART_SetConfig+0x198>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <UART_SetConfig+0xc4>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc91 	.word	0x0800bc91
 800bbf0:	0800bcc1 	.word	0x0800bcc1
 800bbf4:	0800bcc1 	.word	0x0800bcc1
 800bbf8:	0800bcc1 	.word	0x0800bcc1
 800bbfc:	0800bcc1 	.word	0x0800bcc1
 800bc00:	0800bcc1 	.word	0x0800bcc1
 800bc04:	0800bcc1 	.word	0x0800bcc1
 800bc08:	0800bcc1 	.word	0x0800bcc1
 800bc0c:	0800bc99 	.word	0x0800bc99
 800bc10:	0800bcc1 	.word	0x0800bcc1
 800bc14:	0800bcc1 	.word	0x0800bcc1
 800bc18:	0800bcc1 	.word	0x0800bcc1
 800bc1c:	0800bcc1 	.word	0x0800bcc1
 800bc20:	0800bcc1 	.word	0x0800bcc1
 800bc24:	0800bcc1 	.word	0x0800bcc1
 800bc28:	0800bcc1 	.word	0x0800bcc1
 800bc2c:	0800bca1 	.word	0x0800bca1
 800bc30:	0800bcc1 	.word	0x0800bcc1
 800bc34:	0800bcc1 	.word	0x0800bcc1
 800bc38:	0800bcc1 	.word	0x0800bcc1
 800bc3c:	0800bcc1 	.word	0x0800bcc1
 800bc40:	0800bcc1 	.word	0x0800bcc1
 800bc44:	0800bcc1 	.word	0x0800bcc1
 800bc48:	0800bcc1 	.word	0x0800bcc1
 800bc4c:	0800bca9 	.word	0x0800bca9
 800bc50:	0800bcc1 	.word	0x0800bcc1
 800bc54:	0800bcc1 	.word	0x0800bcc1
 800bc58:	0800bcc1 	.word	0x0800bcc1
 800bc5c:	0800bcc1 	.word	0x0800bcc1
 800bc60:	0800bcc1 	.word	0x0800bcc1
 800bc64:	0800bcc1 	.word	0x0800bcc1
 800bc68:	0800bcc1 	.word	0x0800bcc1
 800bc6c:	0800bcb1 	.word	0x0800bcb1
 800bc70:	0800bcc1 	.word	0x0800bcc1
 800bc74:	0800bcc1 	.word	0x0800bcc1
 800bc78:	0800bcc1 	.word	0x0800bcc1
 800bc7c:	0800bcc1 	.word	0x0800bcc1
 800bc80:	0800bcc1 	.word	0x0800bcc1
 800bc84:	0800bcc1 	.word	0x0800bcc1
 800bc88:	0800bcc1 	.word	0x0800bcc1
 800bc8c:	0800bcb9 	.word	0x0800bcb9
 800bc90:	2301      	movs	r3, #1
 800bc92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc96:	e233      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bc98:	2304      	movs	r3, #4
 800bc9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bc9e:	e22f      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bca0:	2308      	movs	r3, #8
 800bca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bca6:	e22b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bca8:	2310      	movs	r3, #16
 800bcaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcae:	e227      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bcb0:	2320      	movs	r3, #32
 800bcb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcb6:	e223      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bcb8:	2340      	movs	r3, #64	; 0x40
 800bcba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcbe:	e21f      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bcc0:	2380      	movs	r3, #128	; 0x80
 800bcc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bcc6:	bf00      	nop
 800bcc8:	e21a      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a6d      	ldr	r2, [pc, #436]	; (800be84 <UART_SetConfig+0x35c>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d132      	bne.n	800bd3a <UART_SetConfig+0x212>
 800bcd4:	4b6a      	ldr	r3, [pc, #424]	; (800be80 <UART_SetConfig+0x358>)
 800bcd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd8:	f003 0307 	and.w	r3, r3, #7
 800bcdc:	2b05      	cmp	r3, #5
 800bcde:	d827      	bhi.n	800bd30 <UART_SetConfig+0x208>
 800bce0:	a201      	add	r2, pc, #4	; (adr r2, 800bce8 <UART_SetConfig+0x1c0>)
 800bce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce6:	bf00      	nop
 800bce8:	0800bd01 	.word	0x0800bd01
 800bcec:	0800bd09 	.word	0x0800bd09
 800bcf0:	0800bd11 	.word	0x0800bd11
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd21 	.word	0x0800bd21
 800bcfc:	0800bd29 	.word	0x0800bd29
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd06:	e1fb      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd08:	2304      	movs	r3, #4
 800bd0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd0e:	e1f7      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd10:	2308      	movs	r3, #8
 800bd12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd16:	e1f3      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd18:	2310      	movs	r3, #16
 800bd1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd1e:	e1ef      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd20:	2320      	movs	r3, #32
 800bd22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd26:	e1eb      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd28:	2340      	movs	r3, #64	; 0x40
 800bd2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd2e:	e1e7      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd30:	2380      	movs	r3, #128	; 0x80
 800bd32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd36:	bf00      	nop
 800bd38:	e1e2      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a52      	ldr	r2, [pc, #328]	; (800be88 <UART_SetConfig+0x360>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d132      	bne.n	800bdaa <UART_SetConfig+0x282>
 800bd44:	4b4e      	ldr	r3, [pc, #312]	; (800be80 <UART_SetConfig+0x358>)
 800bd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd48:	f003 0307 	and.w	r3, r3, #7
 800bd4c:	2b05      	cmp	r3, #5
 800bd4e:	d827      	bhi.n	800bda0 <UART_SetConfig+0x278>
 800bd50:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <UART_SetConfig+0x230>)
 800bd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd56:	bf00      	nop
 800bd58:	0800bd71 	.word	0x0800bd71
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	0800bd81 	.word	0x0800bd81
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd99 	.word	0x0800bd99
 800bd70:	2300      	movs	r3, #0
 800bd72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd76:	e1c3      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd78:	2304      	movs	r3, #4
 800bd7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd7e:	e1bf      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd80:	2308      	movs	r3, #8
 800bd82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd86:	e1bb      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd88:	2310      	movs	r3, #16
 800bd8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd8e:	e1b7      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd90:	2320      	movs	r3, #32
 800bd92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd96:	e1b3      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bd98:	2340      	movs	r3, #64	; 0x40
 800bd9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bd9e:	e1af      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bda0:	2380      	movs	r3, #128	; 0x80
 800bda2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bda6:	bf00      	nop
 800bda8:	e1aa      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a37      	ldr	r2, [pc, #220]	; (800be8c <UART_SetConfig+0x364>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d132      	bne.n	800be1a <UART_SetConfig+0x2f2>
 800bdb4:	4b32      	ldr	r3, [pc, #200]	; (800be80 <UART_SetConfig+0x358>)
 800bdb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb8:	f003 0307 	and.w	r3, r3, #7
 800bdbc:	2b05      	cmp	r3, #5
 800bdbe:	d827      	bhi.n	800be10 <UART_SetConfig+0x2e8>
 800bdc0:	a201      	add	r2, pc, #4	; (adr r2, 800bdc8 <UART_SetConfig+0x2a0>)
 800bdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc6:	bf00      	nop
 800bdc8:	0800bde1 	.word	0x0800bde1
 800bdcc:	0800bde9 	.word	0x0800bde9
 800bdd0:	0800bdf1 	.word	0x0800bdf1
 800bdd4:	0800bdf9 	.word	0x0800bdf9
 800bdd8:	0800be01 	.word	0x0800be01
 800bddc:	0800be09 	.word	0x0800be09
 800bde0:	2300      	movs	r3, #0
 800bde2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bde6:	e18b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bde8:	2304      	movs	r3, #4
 800bdea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bdee:	e187      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bdf0:	2308      	movs	r3, #8
 800bdf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bdf6:	e183      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bdf8:	2310      	movs	r3, #16
 800bdfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bdfe:	e17f      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be00:	2320      	movs	r3, #32
 800be02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be06:	e17b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be08:	2340      	movs	r3, #64	; 0x40
 800be0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be0e:	e177      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be10:	2380      	movs	r3, #128	; 0x80
 800be12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be16:	bf00      	nop
 800be18:	e172      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a1c      	ldr	r2, [pc, #112]	; (800be90 <UART_SetConfig+0x368>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d144      	bne.n	800beae <UART_SetConfig+0x386>
 800be24:	4b16      	ldr	r3, [pc, #88]	; (800be80 <UART_SetConfig+0x358>)
 800be26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be28:	f003 0307 	and.w	r3, r3, #7
 800be2c:	2b05      	cmp	r3, #5
 800be2e:	d839      	bhi.n	800bea4 <UART_SetConfig+0x37c>
 800be30:	a201      	add	r2, pc, #4	; (adr r2, 800be38 <UART_SetConfig+0x310>)
 800be32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be36:	bf00      	nop
 800be38:	0800be51 	.word	0x0800be51
 800be3c:	0800be59 	.word	0x0800be59
 800be40:	0800be61 	.word	0x0800be61
 800be44:	0800be69 	.word	0x0800be69
 800be48:	0800be95 	.word	0x0800be95
 800be4c:	0800be9d 	.word	0x0800be9d
 800be50:	2300      	movs	r3, #0
 800be52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be56:	e153      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be58:	2304      	movs	r3, #4
 800be5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be5e:	e14f      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be60:	2308      	movs	r3, #8
 800be62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be66:	e14b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be68:	2310      	movs	r3, #16
 800be6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be6e:	e147      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be70:	cfff69f3 	.word	0xcfff69f3
 800be74:	58000c00 	.word	0x58000c00
 800be78:	11fff4ff 	.word	0x11fff4ff
 800be7c:	40011000 	.word	0x40011000
 800be80:	58024400 	.word	0x58024400
 800be84:	40004400 	.word	0x40004400
 800be88:	40004800 	.word	0x40004800
 800be8c:	40004c00 	.word	0x40004c00
 800be90:	40005000 	.word	0x40005000
 800be94:	2320      	movs	r3, #32
 800be96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800be9a:	e131      	b.n	800c100 <UART_SetConfig+0x5d8>
 800be9c:	2340      	movs	r3, #64	; 0x40
 800be9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bea2:	e12d      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bea4:	2380      	movs	r3, #128	; 0x80
 800bea6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800beaa:	bf00      	nop
 800beac:	e128      	b.n	800c100 <UART_SetConfig+0x5d8>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4ac3      	ldr	r2, [pc, #780]	; (800c1c0 <UART_SetConfig+0x698>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d178      	bne.n	800bfaa <UART_SetConfig+0x482>
 800beb8:	4bc2      	ldr	r3, [pc, #776]	; (800c1c4 <UART_SetConfig+0x69c>)
 800beba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bec0:	2b28      	cmp	r3, #40	; 0x28
 800bec2:	d86d      	bhi.n	800bfa0 <UART_SetConfig+0x478>
 800bec4:	a201      	add	r2, pc, #4	; (adr r2, 800becc <UART_SetConfig+0x3a4>)
 800bec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beca:	bf00      	nop
 800becc:	0800bf71 	.word	0x0800bf71
 800bed0:	0800bfa1 	.word	0x0800bfa1
 800bed4:	0800bfa1 	.word	0x0800bfa1
 800bed8:	0800bfa1 	.word	0x0800bfa1
 800bedc:	0800bfa1 	.word	0x0800bfa1
 800bee0:	0800bfa1 	.word	0x0800bfa1
 800bee4:	0800bfa1 	.word	0x0800bfa1
 800bee8:	0800bfa1 	.word	0x0800bfa1
 800beec:	0800bf79 	.word	0x0800bf79
 800bef0:	0800bfa1 	.word	0x0800bfa1
 800bef4:	0800bfa1 	.word	0x0800bfa1
 800bef8:	0800bfa1 	.word	0x0800bfa1
 800befc:	0800bfa1 	.word	0x0800bfa1
 800bf00:	0800bfa1 	.word	0x0800bfa1
 800bf04:	0800bfa1 	.word	0x0800bfa1
 800bf08:	0800bfa1 	.word	0x0800bfa1
 800bf0c:	0800bf81 	.word	0x0800bf81
 800bf10:	0800bfa1 	.word	0x0800bfa1
 800bf14:	0800bfa1 	.word	0x0800bfa1
 800bf18:	0800bfa1 	.word	0x0800bfa1
 800bf1c:	0800bfa1 	.word	0x0800bfa1
 800bf20:	0800bfa1 	.word	0x0800bfa1
 800bf24:	0800bfa1 	.word	0x0800bfa1
 800bf28:	0800bfa1 	.word	0x0800bfa1
 800bf2c:	0800bf89 	.word	0x0800bf89
 800bf30:	0800bfa1 	.word	0x0800bfa1
 800bf34:	0800bfa1 	.word	0x0800bfa1
 800bf38:	0800bfa1 	.word	0x0800bfa1
 800bf3c:	0800bfa1 	.word	0x0800bfa1
 800bf40:	0800bfa1 	.word	0x0800bfa1
 800bf44:	0800bfa1 	.word	0x0800bfa1
 800bf48:	0800bfa1 	.word	0x0800bfa1
 800bf4c:	0800bf91 	.word	0x0800bf91
 800bf50:	0800bfa1 	.word	0x0800bfa1
 800bf54:	0800bfa1 	.word	0x0800bfa1
 800bf58:	0800bfa1 	.word	0x0800bfa1
 800bf5c:	0800bfa1 	.word	0x0800bfa1
 800bf60:	0800bfa1 	.word	0x0800bfa1
 800bf64:	0800bfa1 	.word	0x0800bfa1
 800bf68:	0800bfa1 	.word	0x0800bfa1
 800bf6c:	0800bf99 	.word	0x0800bf99
 800bf70:	2301      	movs	r3, #1
 800bf72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf76:	e0c3      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bf78:	2304      	movs	r3, #4
 800bf7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf7e:	e0bf      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bf80:	2308      	movs	r3, #8
 800bf82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf86:	e0bb      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bf88:	2310      	movs	r3, #16
 800bf8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf8e:	e0b7      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bf90:	2320      	movs	r3, #32
 800bf92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf96:	e0b3      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bf98:	2340      	movs	r3, #64	; 0x40
 800bf9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf9e:	e0af      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bfa0:	2380      	movs	r3, #128	; 0x80
 800bfa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfa6:	bf00      	nop
 800bfa8:	e0aa      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a86      	ldr	r2, [pc, #536]	; (800c1c8 <UART_SetConfig+0x6a0>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d132      	bne.n	800c01a <UART_SetConfig+0x4f2>
 800bfb4:	4b83      	ldr	r3, [pc, #524]	; (800c1c4 <UART_SetConfig+0x69c>)
 800bfb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb8:	f003 0307 	and.w	r3, r3, #7
 800bfbc:	2b05      	cmp	r3, #5
 800bfbe:	d827      	bhi.n	800c010 <UART_SetConfig+0x4e8>
 800bfc0:	a201      	add	r2, pc, #4	; (adr r2, 800bfc8 <UART_SetConfig+0x4a0>)
 800bfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc6:	bf00      	nop
 800bfc8:	0800bfe1 	.word	0x0800bfe1
 800bfcc:	0800bfe9 	.word	0x0800bfe9
 800bfd0:	0800bff1 	.word	0x0800bff1
 800bfd4:	0800bff9 	.word	0x0800bff9
 800bfd8:	0800c001 	.word	0x0800c001
 800bfdc:	0800c009 	.word	0x0800c009
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfe6:	e08b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bfe8:	2304      	movs	r3, #4
 800bfea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfee:	e087      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bff0:	2308      	movs	r3, #8
 800bff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bff6:	e083      	b.n	800c100 <UART_SetConfig+0x5d8>
 800bff8:	2310      	movs	r3, #16
 800bffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bffe:	e07f      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c000:	2320      	movs	r3, #32
 800c002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c006:	e07b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c008:	2340      	movs	r3, #64	; 0x40
 800c00a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c00e:	e077      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c010:	2380      	movs	r3, #128	; 0x80
 800c012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c016:	bf00      	nop
 800c018:	e072      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a6b      	ldr	r2, [pc, #428]	; (800c1cc <UART_SetConfig+0x6a4>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d132      	bne.n	800c08a <UART_SetConfig+0x562>
 800c024:	4b67      	ldr	r3, [pc, #412]	; (800c1c4 <UART_SetConfig+0x69c>)
 800c026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c028:	f003 0307 	and.w	r3, r3, #7
 800c02c:	2b05      	cmp	r3, #5
 800c02e:	d827      	bhi.n	800c080 <UART_SetConfig+0x558>
 800c030:	a201      	add	r2, pc, #4	; (adr r2, 800c038 <UART_SetConfig+0x510>)
 800c032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c036:	bf00      	nop
 800c038:	0800c051 	.word	0x0800c051
 800c03c:	0800c059 	.word	0x0800c059
 800c040:	0800c061 	.word	0x0800c061
 800c044:	0800c069 	.word	0x0800c069
 800c048:	0800c071 	.word	0x0800c071
 800c04c:	0800c079 	.word	0x0800c079
 800c050:	2300      	movs	r3, #0
 800c052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c056:	e053      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c058:	2304      	movs	r3, #4
 800c05a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c05e:	e04f      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c060:	2308      	movs	r3, #8
 800c062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c066:	e04b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c068:	2310      	movs	r3, #16
 800c06a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c06e:	e047      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c070:	2320      	movs	r3, #32
 800c072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c076:	e043      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c078:	2340      	movs	r3, #64	; 0x40
 800c07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c07e:	e03f      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c080:	2380      	movs	r3, #128	; 0x80
 800c082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c086:	bf00      	nop
 800c088:	e03a      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a50      	ldr	r2, [pc, #320]	; (800c1d0 <UART_SetConfig+0x6a8>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d132      	bne.n	800c0fa <UART_SetConfig+0x5d2>
 800c094:	4b4b      	ldr	r3, [pc, #300]	; (800c1c4 <UART_SetConfig+0x69c>)
 800c096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c098:	f003 0307 	and.w	r3, r3, #7
 800c09c:	2b05      	cmp	r3, #5
 800c09e:	d827      	bhi.n	800c0f0 <UART_SetConfig+0x5c8>
 800c0a0:	a201      	add	r2, pc, #4	; (adr r2, 800c0a8 <UART_SetConfig+0x580>)
 800c0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a6:	bf00      	nop
 800c0a8:	0800c0c1 	.word	0x0800c0c1
 800c0ac:	0800c0c9 	.word	0x0800c0c9
 800c0b0:	0800c0d1 	.word	0x0800c0d1
 800c0b4:	0800c0d9 	.word	0x0800c0d9
 800c0b8:	0800c0e1 	.word	0x0800c0e1
 800c0bc:	0800c0e9 	.word	0x0800c0e9
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0c6:	e01b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c0c8:	2304      	movs	r3, #4
 800c0ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0ce:	e017      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c0d0:	2308      	movs	r3, #8
 800c0d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0d6:	e013      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c0d8:	2310      	movs	r3, #16
 800c0da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0de:	e00f      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c0e0:	2320      	movs	r3, #32
 800c0e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0e6:	e00b      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c0e8:	2340      	movs	r3, #64	; 0x40
 800c0ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0ee:	e007      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c0f0:	2380      	movs	r3, #128	; 0x80
 800c0f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0f6:	bf00      	nop
 800c0f8:	e002      	b.n	800c100 <UART_SetConfig+0x5d8>
 800c0fa:	2380      	movs	r3, #128	; 0x80
 800c0fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a32      	ldr	r2, [pc, #200]	; (800c1d0 <UART_SetConfig+0x6a8>)
 800c106:	4293      	cmp	r3, r2
 800c108:	f040 86f7 	bne.w	800cefa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c10c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c110:	2b08      	cmp	r3, #8
 800c112:	f000 80c0 	beq.w	800c296 <UART_SetConfig+0x76e>
 800c116:	2b08      	cmp	r3, #8
 800c118:	dc04      	bgt.n	800c124 <UART_SetConfig+0x5fc>
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d00c      	beq.n	800c138 <UART_SetConfig+0x610>
 800c11e:	2b04      	cmp	r3, #4
 800c120:	d065      	beq.n	800c1ee <UART_SetConfig+0x6c6>
 800c122:	e27a      	b.n	800c61a <UART_SetConfig+0xaf2>
 800c124:	2b20      	cmp	r3, #32
 800c126:	f000 81b0 	beq.w	800c48a <UART_SetConfig+0x962>
 800c12a:	2b40      	cmp	r3, #64	; 0x40
 800c12c:	f000 821e 	beq.w	800c56c <UART_SetConfig+0xa44>
 800c130:	2b10      	cmp	r3, #16
 800c132:	f000 8104 	beq.w	800c33e <UART_SetConfig+0x816>
 800c136:	e270      	b.n	800c61a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c138:	f7fe f85a 	bl	800a1f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c13c:	4602      	mov	r2, r0
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c142:	2b00      	cmp	r3, #0
 800c144:	d04e      	beq.n	800c1e4 <UART_SetConfig+0x6bc>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d048      	beq.n	800c1e0 <UART_SetConfig+0x6b8>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c152:	2b02      	cmp	r3, #2
 800c154:	d042      	beq.n	800c1dc <UART_SetConfig+0x6b4>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d03c      	beq.n	800c1d8 <UART_SetConfig+0x6b0>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c162:	2b04      	cmp	r3, #4
 800c164:	d036      	beq.n	800c1d4 <UART_SetConfig+0x6ac>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16a:	2b05      	cmp	r3, #5
 800c16c:	d026      	beq.n	800c1bc <UART_SetConfig+0x694>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	2b06      	cmp	r3, #6
 800c174:	d020      	beq.n	800c1b8 <UART_SetConfig+0x690>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17a:	2b07      	cmp	r3, #7
 800c17c:	d01a      	beq.n	800c1b4 <UART_SetConfig+0x68c>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	2b08      	cmp	r3, #8
 800c184:	d014      	beq.n	800c1b0 <UART_SetConfig+0x688>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18a:	2b09      	cmp	r3, #9
 800c18c:	d00e      	beq.n	800c1ac <UART_SetConfig+0x684>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c192:	2b0a      	cmp	r3, #10
 800c194:	d008      	beq.n	800c1a8 <UART_SetConfig+0x680>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19a:	2b0b      	cmp	r3, #11
 800c19c:	d102      	bne.n	800c1a4 <UART_SetConfig+0x67c>
 800c19e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1a2:	e020      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e01e      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1a8:	2380      	movs	r3, #128	; 0x80
 800c1aa:	e01c      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1ac:	2340      	movs	r3, #64	; 0x40
 800c1ae:	e01a      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1b0:	2320      	movs	r3, #32
 800c1b2:	e018      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1b4:	2310      	movs	r3, #16
 800c1b6:	e016      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1b8:	230c      	movs	r3, #12
 800c1ba:	e014      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1bc:	230a      	movs	r3, #10
 800c1be:	e012      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1c0:	40011400 	.word	0x40011400
 800c1c4:	58024400 	.word	0x58024400
 800c1c8:	40007800 	.word	0x40007800
 800c1cc:	40007c00 	.word	0x40007c00
 800c1d0:	58000c00 	.word	0x58000c00
 800c1d4:	2308      	movs	r3, #8
 800c1d6:	e006      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1d8:	2306      	movs	r3, #6
 800c1da:	e004      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1dc:	2304      	movs	r3, #4
 800c1de:	e002      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	e000      	b.n	800c1e6 <UART_SetConfig+0x6be>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1ec:	e219      	b.n	800c622 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ee:	f107 0318 	add.w	r3, r7, #24
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe f812 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c1f8:	69fa      	ldr	r2, [r7, #28]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d044      	beq.n	800c28c <UART_SetConfig+0x764>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c206:	2b01      	cmp	r3, #1
 800c208:	d03e      	beq.n	800c288 <UART_SetConfig+0x760>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d038      	beq.n	800c284 <UART_SetConfig+0x75c>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	2b03      	cmp	r3, #3
 800c218:	d032      	beq.n	800c280 <UART_SetConfig+0x758>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21e:	2b04      	cmp	r3, #4
 800c220:	d02c      	beq.n	800c27c <UART_SetConfig+0x754>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c226:	2b05      	cmp	r3, #5
 800c228:	d026      	beq.n	800c278 <UART_SetConfig+0x750>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22e:	2b06      	cmp	r3, #6
 800c230:	d020      	beq.n	800c274 <UART_SetConfig+0x74c>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c236:	2b07      	cmp	r3, #7
 800c238:	d01a      	beq.n	800c270 <UART_SetConfig+0x748>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23e:	2b08      	cmp	r3, #8
 800c240:	d014      	beq.n	800c26c <UART_SetConfig+0x744>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c246:	2b09      	cmp	r3, #9
 800c248:	d00e      	beq.n	800c268 <UART_SetConfig+0x740>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24e:	2b0a      	cmp	r3, #10
 800c250:	d008      	beq.n	800c264 <UART_SetConfig+0x73c>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	2b0b      	cmp	r3, #11
 800c258:	d102      	bne.n	800c260 <UART_SetConfig+0x738>
 800c25a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c25e:	e016      	b.n	800c28e <UART_SetConfig+0x766>
 800c260:	2301      	movs	r3, #1
 800c262:	e014      	b.n	800c28e <UART_SetConfig+0x766>
 800c264:	2380      	movs	r3, #128	; 0x80
 800c266:	e012      	b.n	800c28e <UART_SetConfig+0x766>
 800c268:	2340      	movs	r3, #64	; 0x40
 800c26a:	e010      	b.n	800c28e <UART_SetConfig+0x766>
 800c26c:	2320      	movs	r3, #32
 800c26e:	e00e      	b.n	800c28e <UART_SetConfig+0x766>
 800c270:	2310      	movs	r3, #16
 800c272:	e00c      	b.n	800c28e <UART_SetConfig+0x766>
 800c274:	230c      	movs	r3, #12
 800c276:	e00a      	b.n	800c28e <UART_SetConfig+0x766>
 800c278:	230a      	movs	r3, #10
 800c27a:	e008      	b.n	800c28e <UART_SetConfig+0x766>
 800c27c:	2308      	movs	r3, #8
 800c27e:	e006      	b.n	800c28e <UART_SetConfig+0x766>
 800c280:	2306      	movs	r3, #6
 800c282:	e004      	b.n	800c28e <UART_SetConfig+0x766>
 800c284:	2304      	movs	r3, #4
 800c286:	e002      	b.n	800c28e <UART_SetConfig+0x766>
 800c288:	2302      	movs	r3, #2
 800c28a:	e000      	b.n	800c28e <UART_SetConfig+0x766>
 800c28c:	2301      	movs	r3, #1
 800c28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c294:	e1c5      	b.n	800c622 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c296:	f107 030c 	add.w	r3, r7, #12
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe f90a 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d044      	beq.n	800c334 <UART_SetConfig+0x80c>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d03e      	beq.n	800c330 <UART_SetConfig+0x808>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d038      	beq.n	800c32c <UART_SetConfig+0x804>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d032      	beq.n	800c328 <UART_SetConfig+0x800>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c6:	2b04      	cmp	r3, #4
 800c2c8:	d02c      	beq.n	800c324 <UART_SetConfig+0x7fc>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	2b05      	cmp	r3, #5
 800c2d0:	d026      	beq.n	800c320 <UART_SetConfig+0x7f8>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d6:	2b06      	cmp	r3, #6
 800c2d8:	d020      	beq.n	800c31c <UART_SetConfig+0x7f4>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2de:	2b07      	cmp	r3, #7
 800c2e0:	d01a      	beq.n	800c318 <UART_SetConfig+0x7f0>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e6:	2b08      	cmp	r3, #8
 800c2e8:	d014      	beq.n	800c314 <UART_SetConfig+0x7ec>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ee:	2b09      	cmp	r3, #9
 800c2f0:	d00e      	beq.n	800c310 <UART_SetConfig+0x7e8>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f6:	2b0a      	cmp	r3, #10
 800c2f8:	d008      	beq.n	800c30c <UART_SetConfig+0x7e4>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fe:	2b0b      	cmp	r3, #11
 800c300:	d102      	bne.n	800c308 <UART_SetConfig+0x7e0>
 800c302:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c306:	e016      	b.n	800c336 <UART_SetConfig+0x80e>
 800c308:	2301      	movs	r3, #1
 800c30a:	e014      	b.n	800c336 <UART_SetConfig+0x80e>
 800c30c:	2380      	movs	r3, #128	; 0x80
 800c30e:	e012      	b.n	800c336 <UART_SetConfig+0x80e>
 800c310:	2340      	movs	r3, #64	; 0x40
 800c312:	e010      	b.n	800c336 <UART_SetConfig+0x80e>
 800c314:	2320      	movs	r3, #32
 800c316:	e00e      	b.n	800c336 <UART_SetConfig+0x80e>
 800c318:	2310      	movs	r3, #16
 800c31a:	e00c      	b.n	800c336 <UART_SetConfig+0x80e>
 800c31c:	230c      	movs	r3, #12
 800c31e:	e00a      	b.n	800c336 <UART_SetConfig+0x80e>
 800c320:	230a      	movs	r3, #10
 800c322:	e008      	b.n	800c336 <UART_SetConfig+0x80e>
 800c324:	2308      	movs	r3, #8
 800c326:	e006      	b.n	800c336 <UART_SetConfig+0x80e>
 800c328:	2306      	movs	r3, #6
 800c32a:	e004      	b.n	800c336 <UART_SetConfig+0x80e>
 800c32c:	2304      	movs	r3, #4
 800c32e:	e002      	b.n	800c336 <UART_SetConfig+0x80e>
 800c330:	2302      	movs	r3, #2
 800c332:	e000      	b.n	800c336 <UART_SetConfig+0x80e>
 800c334:	2301      	movs	r3, #1
 800c336:	fbb2 f3f3 	udiv	r3, r2, r3
 800c33a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c33c:	e171      	b.n	800c622 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c33e:	4b7a      	ldr	r3, [pc, #488]	; (800c528 <UART_SetConfig+0xa00>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0320 	and.w	r3, r3, #32
 800c346:	2b00      	cmp	r3, #0
 800c348:	d054      	beq.n	800c3f4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c34a:	4b77      	ldr	r3, [pc, #476]	; (800c528 <UART_SetConfig+0xa00>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	08db      	lsrs	r3, r3, #3
 800c350:	f003 0303 	and.w	r3, r3, #3
 800c354:	4a75      	ldr	r2, [pc, #468]	; (800c52c <UART_SetConfig+0xa04>)
 800c356:	40da      	lsrs	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d044      	beq.n	800c3ea <UART_SetConfig+0x8c2>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	2b01      	cmp	r3, #1
 800c366:	d03e      	beq.n	800c3e6 <UART_SetConfig+0x8be>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d038      	beq.n	800c3e2 <UART_SetConfig+0x8ba>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c374:	2b03      	cmp	r3, #3
 800c376:	d032      	beq.n	800c3de <UART_SetConfig+0x8b6>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	d02c      	beq.n	800c3da <UART_SetConfig+0x8b2>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c384:	2b05      	cmp	r3, #5
 800c386:	d026      	beq.n	800c3d6 <UART_SetConfig+0x8ae>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38c:	2b06      	cmp	r3, #6
 800c38e:	d020      	beq.n	800c3d2 <UART_SetConfig+0x8aa>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c394:	2b07      	cmp	r3, #7
 800c396:	d01a      	beq.n	800c3ce <UART_SetConfig+0x8a6>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39c:	2b08      	cmp	r3, #8
 800c39e:	d014      	beq.n	800c3ca <UART_SetConfig+0x8a2>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	2b09      	cmp	r3, #9
 800c3a6:	d00e      	beq.n	800c3c6 <UART_SetConfig+0x89e>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ac:	2b0a      	cmp	r3, #10
 800c3ae:	d008      	beq.n	800c3c2 <UART_SetConfig+0x89a>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b4:	2b0b      	cmp	r3, #11
 800c3b6:	d102      	bne.n	800c3be <UART_SetConfig+0x896>
 800c3b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3bc:	e016      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e014      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3c2:	2380      	movs	r3, #128	; 0x80
 800c3c4:	e012      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3c6:	2340      	movs	r3, #64	; 0x40
 800c3c8:	e010      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3ca:	2320      	movs	r3, #32
 800c3cc:	e00e      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3ce:	2310      	movs	r3, #16
 800c3d0:	e00c      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3d2:	230c      	movs	r3, #12
 800c3d4:	e00a      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3d6:	230a      	movs	r3, #10
 800c3d8:	e008      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3da:	2308      	movs	r3, #8
 800c3dc:	e006      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3de:	2306      	movs	r3, #6
 800c3e0:	e004      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3e2:	2304      	movs	r3, #4
 800c3e4:	e002      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	e000      	b.n	800c3ec <UART_SetConfig+0x8c4>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800c3f2:	e116      	b.n	800c622 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d043      	beq.n	800c484 <UART_SetConfig+0x95c>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	2b01      	cmp	r3, #1
 800c402:	d03d      	beq.n	800c480 <UART_SetConfig+0x958>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d037      	beq.n	800c47c <UART_SetConfig+0x954>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c410:	2b03      	cmp	r3, #3
 800c412:	d031      	beq.n	800c478 <UART_SetConfig+0x950>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d02b      	beq.n	800c474 <UART_SetConfig+0x94c>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c420:	2b05      	cmp	r3, #5
 800c422:	d025      	beq.n	800c470 <UART_SetConfig+0x948>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c428:	2b06      	cmp	r3, #6
 800c42a:	d01f      	beq.n	800c46c <UART_SetConfig+0x944>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	2b07      	cmp	r3, #7
 800c432:	d019      	beq.n	800c468 <UART_SetConfig+0x940>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c438:	2b08      	cmp	r3, #8
 800c43a:	d013      	beq.n	800c464 <UART_SetConfig+0x93c>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	2b09      	cmp	r3, #9
 800c442:	d00d      	beq.n	800c460 <UART_SetConfig+0x938>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	2b0a      	cmp	r3, #10
 800c44a:	d007      	beq.n	800c45c <UART_SetConfig+0x934>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c450:	2b0b      	cmp	r3, #11
 800c452:	d101      	bne.n	800c458 <UART_SetConfig+0x930>
 800c454:	4b36      	ldr	r3, [pc, #216]	; (800c530 <UART_SetConfig+0xa08>)
 800c456:	e016      	b.n	800c486 <UART_SetConfig+0x95e>
 800c458:	4b34      	ldr	r3, [pc, #208]	; (800c52c <UART_SetConfig+0xa04>)
 800c45a:	e014      	b.n	800c486 <UART_SetConfig+0x95e>
 800c45c:	4b35      	ldr	r3, [pc, #212]	; (800c534 <UART_SetConfig+0xa0c>)
 800c45e:	e012      	b.n	800c486 <UART_SetConfig+0x95e>
 800c460:	4b35      	ldr	r3, [pc, #212]	; (800c538 <UART_SetConfig+0xa10>)
 800c462:	e010      	b.n	800c486 <UART_SetConfig+0x95e>
 800c464:	4b35      	ldr	r3, [pc, #212]	; (800c53c <UART_SetConfig+0xa14>)
 800c466:	e00e      	b.n	800c486 <UART_SetConfig+0x95e>
 800c468:	4b35      	ldr	r3, [pc, #212]	; (800c540 <UART_SetConfig+0xa18>)
 800c46a:	e00c      	b.n	800c486 <UART_SetConfig+0x95e>
 800c46c:	4b35      	ldr	r3, [pc, #212]	; (800c544 <UART_SetConfig+0xa1c>)
 800c46e:	e00a      	b.n	800c486 <UART_SetConfig+0x95e>
 800c470:	4b35      	ldr	r3, [pc, #212]	; (800c548 <UART_SetConfig+0xa20>)
 800c472:	e008      	b.n	800c486 <UART_SetConfig+0x95e>
 800c474:	4b35      	ldr	r3, [pc, #212]	; (800c54c <UART_SetConfig+0xa24>)
 800c476:	e006      	b.n	800c486 <UART_SetConfig+0x95e>
 800c478:	4b35      	ldr	r3, [pc, #212]	; (800c550 <UART_SetConfig+0xa28>)
 800c47a:	e004      	b.n	800c486 <UART_SetConfig+0x95e>
 800c47c:	4b35      	ldr	r3, [pc, #212]	; (800c554 <UART_SetConfig+0xa2c>)
 800c47e:	e002      	b.n	800c486 <UART_SetConfig+0x95e>
 800c480:	4b35      	ldr	r3, [pc, #212]	; (800c558 <UART_SetConfig+0xa30>)
 800c482:	e000      	b.n	800c486 <UART_SetConfig+0x95e>
 800c484:	4b29      	ldr	r3, [pc, #164]	; (800c52c <UART_SetConfig+0xa04>)
 800c486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c488:	e0cb      	b.n	800c622 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d046      	beq.n	800c520 <UART_SetConfig+0x9f8>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	2b01      	cmp	r3, #1
 800c498:	d040      	beq.n	800c51c <UART_SetConfig+0x9f4>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d03a      	beq.n	800c518 <UART_SetConfig+0x9f0>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d034      	beq.n	800c514 <UART_SetConfig+0x9ec>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	d02e      	beq.n	800c510 <UART_SetConfig+0x9e8>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b6:	2b05      	cmp	r3, #5
 800c4b8:	d028      	beq.n	800c50c <UART_SetConfig+0x9e4>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4be:	2b06      	cmp	r3, #6
 800c4c0:	d022      	beq.n	800c508 <UART_SetConfig+0x9e0>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c6:	2b07      	cmp	r3, #7
 800c4c8:	d01c      	beq.n	800c504 <UART_SetConfig+0x9dc>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ce:	2b08      	cmp	r3, #8
 800c4d0:	d016      	beq.n	800c500 <UART_SetConfig+0x9d8>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d6:	2b09      	cmp	r3, #9
 800c4d8:	d00f      	beq.n	800c4fa <UART_SetConfig+0x9d2>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4de:	2b0a      	cmp	r3, #10
 800c4e0:	d008      	beq.n	800c4f4 <UART_SetConfig+0x9cc>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e6:	2b0b      	cmp	r3, #11
 800c4e8:	d102      	bne.n	800c4f0 <UART_SetConfig+0x9c8>
 800c4ea:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c4ee:	e018      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c4f0:	4b13      	ldr	r3, [pc, #76]	; (800c540 <UART_SetConfig+0xa18>)
 800c4f2:	e016      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c4f4:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c4f8:	e013      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c4fa:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c4fe:	e010      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c500:	4b16      	ldr	r3, [pc, #88]	; (800c55c <UART_SetConfig+0xa34>)
 800c502:	e00e      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c504:	4b0a      	ldr	r3, [pc, #40]	; (800c530 <UART_SetConfig+0xa08>)
 800c506:	e00c      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <UART_SetConfig+0xa38>)
 800c50a:	e00a      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c50c:	4b15      	ldr	r3, [pc, #84]	; (800c564 <UART_SetConfig+0xa3c>)
 800c50e:	e008      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c510:	4b08      	ldr	r3, [pc, #32]	; (800c534 <UART_SetConfig+0xa0c>)
 800c512:	e006      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c514:	4b14      	ldr	r3, [pc, #80]	; (800c568 <UART_SetConfig+0xa40>)
 800c516:	e004      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c518:	4b07      	ldr	r3, [pc, #28]	; (800c538 <UART_SetConfig+0xa10>)
 800c51a:	e002      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c51c:	4b07      	ldr	r3, [pc, #28]	; (800c53c <UART_SetConfig+0xa14>)
 800c51e:	e000      	b.n	800c522 <UART_SetConfig+0x9fa>
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <UART_SetConfig+0xa18>)
 800c522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c524:	e07d      	b.n	800c622 <UART_SetConfig+0xafa>
 800c526:	bf00      	nop
 800c528:	58024400 	.word	0x58024400
 800c52c:	03d09000 	.word	0x03d09000
 800c530:	0003d090 	.word	0x0003d090
 800c534:	0007a120 	.word	0x0007a120
 800c538:	000f4240 	.word	0x000f4240
 800c53c:	001e8480 	.word	0x001e8480
 800c540:	003d0900 	.word	0x003d0900
 800c544:	00516155 	.word	0x00516155
 800c548:	0061a800 	.word	0x0061a800
 800c54c:	007a1200 	.word	0x007a1200
 800c550:	00a2c2aa 	.word	0x00a2c2aa
 800c554:	00f42400 	.word	0x00f42400
 800c558:	01e84800 	.word	0x01e84800
 800c55c:	0001e848 	.word	0x0001e848
 800c560:	00051615 	.word	0x00051615
 800c564:	00061a80 	.word	0x00061a80
 800c568:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	2b00      	cmp	r3, #0
 800c572:	d04e      	beq.n	800c612 <UART_SetConfig+0xaea>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d047      	beq.n	800c60c <UART_SetConfig+0xae4>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c580:	2b02      	cmp	r3, #2
 800c582:	d040      	beq.n	800c606 <UART_SetConfig+0xade>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d039      	beq.n	800c600 <UART_SetConfig+0xad8>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c590:	2b04      	cmp	r3, #4
 800c592:	d032      	beq.n	800c5fa <UART_SetConfig+0xad2>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	2b05      	cmp	r3, #5
 800c59a:	d02b      	beq.n	800c5f4 <UART_SetConfig+0xacc>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a0:	2b06      	cmp	r3, #6
 800c5a2:	d024      	beq.n	800c5ee <UART_SetConfig+0xac6>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a8:	2b07      	cmp	r3, #7
 800c5aa:	d01d      	beq.n	800c5e8 <UART_SetConfig+0xac0>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b0:	2b08      	cmp	r3, #8
 800c5b2:	d016      	beq.n	800c5e2 <UART_SetConfig+0xaba>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	2b09      	cmp	r3, #9
 800c5ba:	d00f      	beq.n	800c5dc <UART_SetConfig+0xab4>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c0:	2b0a      	cmp	r3, #10
 800c5c2:	d008      	beq.n	800c5d6 <UART_SetConfig+0xaae>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c8:	2b0b      	cmp	r3, #11
 800c5ca:	d101      	bne.n	800c5d0 <UART_SetConfig+0xaa8>
 800c5cc:	2380      	movs	r3, #128	; 0x80
 800c5ce:	e022      	b.n	800c616 <UART_SetConfig+0xaee>
 800c5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5d4:	e01f      	b.n	800c616 <UART_SetConfig+0xaee>
 800c5d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5da:	e01c      	b.n	800c616 <UART_SetConfig+0xaee>
 800c5dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5e0:	e019      	b.n	800c616 <UART_SetConfig+0xaee>
 800c5e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5e6:	e016      	b.n	800c616 <UART_SetConfig+0xaee>
 800c5e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5ec:	e013      	b.n	800c616 <UART_SetConfig+0xaee>
 800c5ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c5f2:	e010      	b.n	800c616 <UART_SetConfig+0xaee>
 800c5f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c5f8:	e00d      	b.n	800c616 <UART_SetConfig+0xaee>
 800c5fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5fe:	e00a      	b.n	800c616 <UART_SetConfig+0xaee>
 800c600:	f241 5355 	movw	r3, #5461	; 0x1555
 800c604:	e007      	b.n	800c616 <UART_SetConfig+0xaee>
 800c606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c60a:	e004      	b.n	800c616 <UART_SetConfig+0xaee>
 800c60c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c610:	e001      	b.n	800c616 <UART_SetConfig+0xaee>
 800c612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c618:	e003      	b.n	800c622 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c620:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	2b00      	cmp	r3, #0
 800c626:	f001 83e8 	beq.w	800ddfa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	4613      	mov	r3, r2
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	4413      	add	r3, r2
 800c634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c636:	429a      	cmp	r2, r3
 800c638:	d305      	bcc.n	800c646 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c642:	429a      	cmp	r2, r3
 800c644:	d904      	bls.n	800c650 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c64c:	f001 bbd5 	b.w	800ddfa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800c650:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c654:	2b08      	cmp	r3, #8
 800c656:	f000 8154 	beq.w	800c902 <UART_SetConfig+0xdda>
 800c65a:	2b08      	cmp	r3, #8
 800c65c:	dc06      	bgt.n	800c66c <UART_SetConfig+0xb44>
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d00f      	beq.n	800c682 <UART_SetConfig+0xb5a>
 800c662:	2b04      	cmp	r3, #4
 800c664:	f000 80ac 	beq.w	800c7c0 <UART_SetConfig+0xc98>
 800c668:	f000 bc30 	b.w	800cecc <UART_SetConfig+0x13a4>
 800c66c:	2b20      	cmp	r3, #32
 800c66e:	f000 832d 	beq.w	800cccc <UART_SetConfig+0x11a4>
 800c672:	2b40      	cmp	r3, #64	; 0x40
 800c674:	f000 83a5 	beq.w	800cdc2 <UART_SetConfig+0x129a>
 800c678:	2b10      	cmp	r3, #16
 800c67a:	f000 81e3 	beq.w	800ca44 <UART_SetConfig+0xf1c>
 800c67e:	f000 bc25 	b.w	800cecc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c682:	f7fd fdb5 	bl	800a1f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c686:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	4618      	mov	r0, r3
 800c68c:	f04f 0100 	mov.w	r1, #0
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	d067      	beq.n	800c768 <UART_SetConfig+0xc40>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d05e      	beq.n	800c75e <UART_SetConfig+0xc36>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d055      	beq.n	800c754 <UART_SetConfig+0xc2c>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d04c      	beq.n	800c74a <UART_SetConfig+0xc22>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b4:	2b04      	cmp	r3, #4
 800c6b6:	d043      	beq.n	800c740 <UART_SetConfig+0xc18>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6bc:	2b05      	cmp	r3, #5
 800c6be:	d03a      	beq.n	800c736 <UART_SetConfig+0xc0e>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c4:	2b06      	cmp	r3, #6
 800c6c6:	d031      	beq.n	800c72c <UART_SetConfig+0xc04>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6cc:	2b07      	cmp	r3, #7
 800c6ce:	d028      	beq.n	800c722 <UART_SetConfig+0xbfa>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	d01f      	beq.n	800c718 <UART_SetConfig+0xbf0>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6dc:	2b09      	cmp	r3, #9
 800c6de:	d016      	beq.n	800c70e <UART_SetConfig+0xbe6>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e4:	2b0a      	cmp	r3, #10
 800c6e6:	d00d      	beq.n	800c704 <UART_SetConfig+0xbdc>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ec:	2b0b      	cmp	r3, #11
 800c6ee:	d104      	bne.n	800c6fa <UART_SetConfig+0xbd2>
 800c6f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6f4:	f04f 0400 	mov.w	r4, #0
 800c6f8:	e03a      	b.n	800c770 <UART_SetConfig+0xc48>
 800c6fa:	f04f 0301 	mov.w	r3, #1
 800c6fe:	f04f 0400 	mov.w	r4, #0
 800c702:	e035      	b.n	800c770 <UART_SetConfig+0xc48>
 800c704:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c708:	f04f 0400 	mov.w	r4, #0
 800c70c:	e030      	b.n	800c770 <UART_SetConfig+0xc48>
 800c70e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c712:	f04f 0400 	mov.w	r4, #0
 800c716:	e02b      	b.n	800c770 <UART_SetConfig+0xc48>
 800c718:	f04f 0320 	mov.w	r3, #32
 800c71c:	f04f 0400 	mov.w	r4, #0
 800c720:	e026      	b.n	800c770 <UART_SetConfig+0xc48>
 800c722:	f04f 0310 	mov.w	r3, #16
 800c726:	f04f 0400 	mov.w	r4, #0
 800c72a:	e021      	b.n	800c770 <UART_SetConfig+0xc48>
 800c72c:	f04f 030c 	mov.w	r3, #12
 800c730:	f04f 0400 	mov.w	r4, #0
 800c734:	e01c      	b.n	800c770 <UART_SetConfig+0xc48>
 800c736:	f04f 030a 	mov.w	r3, #10
 800c73a:	f04f 0400 	mov.w	r4, #0
 800c73e:	e017      	b.n	800c770 <UART_SetConfig+0xc48>
 800c740:	f04f 0308 	mov.w	r3, #8
 800c744:	f04f 0400 	mov.w	r4, #0
 800c748:	e012      	b.n	800c770 <UART_SetConfig+0xc48>
 800c74a:	f04f 0306 	mov.w	r3, #6
 800c74e:	f04f 0400 	mov.w	r4, #0
 800c752:	e00d      	b.n	800c770 <UART_SetConfig+0xc48>
 800c754:	f04f 0304 	mov.w	r3, #4
 800c758:	f04f 0400 	mov.w	r4, #0
 800c75c:	e008      	b.n	800c770 <UART_SetConfig+0xc48>
 800c75e:	f04f 0302 	mov.w	r3, #2
 800c762:	f04f 0400 	mov.w	r4, #0
 800c766:	e003      	b.n	800c770 <UART_SetConfig+0xc48>
 800c768:	f04f 0301 	mov.w	r3, #1
 800c76c:	f04f 0400 	mov.w	r4, #0
 800c770:	461a      	mov	r2, r3
 800c772:	4623      	mov	r3, r4
 800c774:	f7f3 fe04 	bl	8000380 <__aeabi_uldivmod>
 800c778:	4603      	mov	r3, r0
 800c77a:	460c      	mov	r4, r1
 800c77c:	4619      	mov	r1, r3
 800c77e:	4622      	mov	r2, r4
 800c780:	f04f 0300 	mov.w	r3, #0
 800c784:	f04f 0400 	mov.w	r4, #0
 800c788:	0214      	lsls	r4, r2, #8
 800c78a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c78e:	020b      	lsls	r3, r1, #8
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	6852      	ldr	r2, [r2, #4]
 800c794:	0852      	lsrs	r2, r2, #1
 800c796:	4611      	mov	r1, r2
 800c798:	f04f 0200 	mov.w	r2, #0
 800c79c:	eb13 0b01 	adds.w	fp, r3, r1
 800c7a0:	eb44 0c02 	adc.w	ip, r4, r2
 800c7a4:	4658      	mov	r0, fp
 800c7a6:	4661      	mov	r1, ip
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	f04f 0400 	mov.w	r4, #0
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4623      	mov	r3, r4
 800c7b4:	f7f3 fde4 	bl	8000380 <__aeabi_uldivmod>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c7be:	e389      	b.n	800ced4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7c0:	f107 0318 	add.w	r3, r7, #24
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fd fd29 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f04f 0100 	mov.w	r1, #0
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d067      	beq.n	800c8aa <UART_SetConfig+0xd82>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d05e      	beq.n	800c8a0 <UART_SetConfig+0xd78>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d055      	beq.n	800c896 <UART_SetConfig+0xd6e>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d04c      	beq.n	800c88c <UART_SetConfig+0xd64>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	2b04      	cmp	r3, #4
 800c7f8:	d043      	beq.n	800c882 <UART_SetConfig+0xd5a>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fe:	2b05      	cmp	r3, #5
 800c800:	d03a      	beq.n	800c878 <UART_SetConfig+0xd50>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c806:	2b06      	cmp	r3, #6
 800c808:	d031      	beq.n	800c86e <UART_SetConfig+0xd46>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	2b07      	cmp	r3, #7
 800c810:	d028      	beq.n	800c864 <UART_SetConfig+0xd3c>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c816:	2b08      	cmp	r3, #8
 800c818:	d01f      	beq.n	800c85a <UART_SetConfig+0xd32>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81e:	2b09      	cmp	r3, #9
 800c820:	d016      	beq.n	800c850 <UART_SetConfig+0xd28>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	2b0a      	cmp	r3, #10
 800c828:	d00d      	beq.n	800c846 <UART_SetConfig+0xd1e>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82e:	2b0b      	cmp	r3, #11
 800c830:	d104      	bne.n	800c83c <UART_SetConfig+0xd14>
 800c832:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c836:	f04f 0400 	mov.w	r4, #0
 800c83a:	e03a      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c83c:	f04f 0301 	mov.w	r3, #1
 800c840:	f04f 0400 	mov.w	r4, #0
 800c844:	e035      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c846:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c84a:	f04f 0400 	mov.w	r4, #0
 800c84e:	e030      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c850:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c854:	f04f 0400 	mov.w	r4, #0
 800c858:	e02b      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c85a:	f04f 0320 	mov.w	r3, #32
 800c85e:	f04f 0400 	mov.w	r4, #0
 800c862:	e026      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c864:	f04f 0310 	mov.w	r3, #16
 800c868:	f04f 0400 	mov.w	r4, #0
 800c86c:	e021      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c86e:	f04f 030c 	mov.w	r3, #12
 800c872:	f04f 0400 	mov.w	r4, #0
 800c876:	e01c      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c878:	f04f 030a 	mov.w	r3, #10
 800c87c:	f04f 0400 	mov.w	r4, #0
 800c880:	e017      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c882:	f04f 0308 	mov.w	r3, #8
 800c886:	f04f 0400 	mov.w	r4, #0
 800c88a:	e012      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c88c:	f04f 0306 	mov.w	r3, #6
 800c890:	f04f 0400 	mov.w	r4, #0
 800c894:	e00d      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c896:	f04f 0304 	mov.w	r3, #4
 800c89a:	f04f 0400 	mov.w	r4, #0
 800c89e:	e008      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c8a0:	f04f 0302 	mov.w	r3, #2
 800c8a4:	f04f 0400 	mov.w	r4, #0
 800c8a8:	e003      	b.n	800c8b2 <UART_SetConfig+0xd8a>
 800c8aa:	f04f 0301 	mov.w	r3, #1
 800c8ae:	f04f 0400 	mov.w	r4, #0
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	4623      	mov	r3, r4
 800c8b6:	f7f3 fd63 	bl	8000380 <__aeabi_uldivmod>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	460c      	mov	r4, r1
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	f04f 0300 	mov.w	r3, #0
 800c8c6:	f04f 0400 	mov.w	r4, #0
 800c8ca:	0214      	lsls	r4, r2, #8
 800c8cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c8d0:	020b      	lsls	r3, r1, #8
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	6852      	ldr	r2, [r2, #4]
 800c8d6:	0852      	lsrs	r2, r2, #1
 800c8d8:	4611      	mov	r1, r2
 800c8da:	f04f 0200 	mov.w	r2, #0
 800c8de:	eb13 0b01 	adds.w	fp, r3, r1
 800c8e2:	eb44 0c02 	adc.w	ip, r4, r2
 800c8e6:	4658      	mov	r0, fp
 800c8e8:	4661      	mov	r1, ip
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	f04f 0400 	mov.w	r4, #0
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	4623      	mov	r3, r4
 800c8f6:	f7f3 fd43 	bl	8000380 <__aeabi_uldivmod>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c900:	e2e8      	b.n	800ced4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c902:	f107 030c 	add.w	r3, r7, #12
 800c906:	4618      	mov	r0, r3
 800c908:	f7fd fdd4 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	4618      	mov	r0, r3
 800c910:	f04f 0100 	mov.w	r1, #0
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d067      	beq.n	800c9ec <UART_SetConfig+0xec4>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c920:	2b01      	cmp	r3, #1
 800c922:	d05e      	beq.n	800c9e2 <UART_SetConfig+0xeba>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d055      	beq.n	800c9d8 <UART_SetConfig+0xeb0>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c930:	2b03      	cmp	r3, #3
 800c932:	d04c      	beq.n	800c9ce <UART_SetConfig+0xea6>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d043      	beq.n	800c9c4 <UART_SetConfig+0xe9c>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c940:	2b05      	cmp	r3, #5
 800c942:	d03a      	beq.n	800c9ba <UART_SetConfig+0xe92>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c948:	2b06      	cmp	r3, #6
 800c94a:	d031      	beq.n	800c9b0 <UART_SetConfig+0xe88>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c950:	2b07      	cmp	r3, #7
 800c952:	d028      	beq.n	800c9a6 <UART_SetConfig+0xe7e>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c958:	2b08      	cmp	r3, #8
 800c95a:	d01f      	beq.n	800c99c <UART_SetConfig+0xe74>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c960:	2b09      	cmp	r3, #9
 800c962:	d016      	beq.n	800c992 <UART_SetConfig+0xe6a>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	2b0a      	cmp	r3, #10
 800c96a:	d00d      	beq.n	800c988 <UART_SetConfig+0xe60>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c970:	2b0b      	cmp	r3, #11
 800c972:	d104      	bne.n	800c97e <UART_SetConfig+0xe56>
 800c974:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c978:	f04f 0400 	mov.w	r4, #0
 800c97c:	e03a      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c97e:	f04f 0301 	mov.w	r3, #1
 800c982:	f04f 0400 	mov.w	r4, #0
 800c986:	e035      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c988:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c98c:	f04f 0400 	mov.w	r4, #0
 800c990:	e030      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c992:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c996:	f04f 0400 	mov.w	r4, #0
 800c99a:	e02b      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c99c:	f04f 0320 	mov.w	r3, #32
 800c9a0:	f04f 0400 	mov.w	r4, #0
 800c9a4:	e026      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c9a6:	f04f 0310 	mov.w	r3, #16
 800c9aa:	f04f 0400 	mov.w	r4, #0
 800c9ae:	e021      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c9b0:	f04f 030c 	mov.w	r3, #12
 800c9b4:	f04f 0400 	mov.w	r4, #0
 800c9b8:	e01c      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c9ba:	f04f 030a 	mov.w	r3, #10
 800c9be:	f04f 0400 	mov.w	r4, #0
 800c9c2:	e017      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c9c4:	f04f 0308 	mov.w	r3, #8
 800c9c8:	f04f 0400 	mov.w	r4, #0
 800c9cc:	e012      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c9ce:	f04f 0306 	mov.w	r3, #6
 800c9d2:	f04f 0400 	mov.w	r4, #0
 800c9d6:	e00d      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c9d8:	f04f 0304 	mov.w	r3, #4
 800c9dc:	f04f 0400 	mov.w	r4, #0
 800c9e0:	e008      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c9e2:	f04f 0302 	mov.w	r3, #2
 800c9e6:	f04f 0400 	mov.w	r4, #0
 800c9ea:	e003      	b.n	800c9f4 <UART_SetConfig+0xecc>
 800c9ec:	f04f 0301 	mov.w	r3, #1
 800c9f0:	f04f 0400 	mov.w	r4, #0
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	4623      	mov	r3, r4
 800c9f8:	f7f3 fcc2 	bl	8000380 <__aeabi_uldivmod>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	4619      	mov	r1, r3
 800ca02:	4622      	mov	r2, r4
 800ca04:	f04f 0300 	mov.w	r3, #0
 800ca08:	f04f 0400 	mov.w	r4, #0
 800ca0c:	0214      	lsls	r4, r2, #8
 800ca0e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ca12:	020b      	lsls	r3, r1, #8
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	6852      	ldr	r2, [r2, #4]
 800ca18:	0852      	lsrs	r2, r2, #1
 800ca1a:	4611      	mov	r1, r2
 800ca1c:	f04f 0200 	mov.w	r2, #0
 800ca20:	eb13 0b01 	adds.w	fp, r3, r1
 800ca24:	eb44 0c02 	adc.w	ip, r4, r2
 800ca28:	4658      	mov	r0, fp
 800ca2a:	4661      	mov	r1, ip
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	f04f 0400 	mov.w	r4, #0
 800ca34:	461a      	mov	r2, r3
 800ca36:	4623      	mov	r3, r4
 800ca38:	f7f3 fca2 	bl	8000380 <__aeabi_uldivmod>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca42:	e247      	b.n	800ced4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca44:	4b96      	ldr	r3, [pc, #600]	; (800cca0 <UART_SetConfig+0x1178>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0320 	and.w	r3, r3, #32
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 80a3 	beq.w	800cb98 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca52:	4b93      	ldr	r3, [pc, #588]	; (800cca0 <UART_SetConfig+0x1178>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	08db      	lsrs	r3, r3, #3
 800ca58:	f003 0303 	and.w	r3, r3, #3
 800ca5c:	4a91      	ldr	r2, [pc, #580]	; (800cca4 <UART_SetConfig+0x117c>)
 800ca5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca62:	4618      	mov	r0, r3
 800ca64:	f04f 0100 	mov.w	r1, #0
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d067      	beq.n	800cb40 <UART_SetConfig+0x1018>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d05e      	beq.n	800cb36 <UART_SetConfig+0x100e>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d055      	beq.n	800cb2c <UART_SetConfig+0x1004>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	2b03      	cmp	r3, #3
 800ca86:	d04c      	beq.n	800cb22 <UART_SetConfig+0xffa>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8c:	2b04      	cmp	r3, #4
 800ca8e:	d043      	beq.n	800cb18 <UART_SetConfig+0xff0>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca94:	2b05      	cmp	r3, #5
 800ca96:	d03a      	beq.n	800cb0e <UART_SetConfig+0xfe6>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	2b06      	cmp	r3, #6
 800ca9e:	d031      	beq.n	800cb04 <UART_SetConfig+0xfdc>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa4:	2b07      	cmp	r3, #7
 800caa6:	d028      	beq.n	800cafa <UART_SetConfig+0xfd2>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caac:	2b08      	cmp	r3, #8
 800caae:	d01f      	beq.n	800caf0 <UART_SetConfig+0xfc8>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab4:	2b09      	cmp	r3, #9
 800cab6:	d016      	beq.n	800cae6 <UART_SetConfig+0xfbe>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabc:	2b0a      	cmp	r3, #10
 800cabe:	d00d      	beq.n	800cadc <UART_SetConfig+0xfb4>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac4:	2b0b      	cmp	r3, #11
 800cac6:	d104      	bne.n	800cad2 <UART_SetConfig+0xfaa>
 800cac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cacc:	f04f 0400 	mov.w	r4, #0
 800cad0:	e03a      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cad2:	f04f 0301 	mov.w	r3, #1
 800cad6:	f04f 0400 	mov.w	r4, #0
 800cada:	e035      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cadc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cae0:	f04f 0400 	mov.w	r4, #0
 800cae4:	e030      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cae6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800caea:	f04f 0400 	mov.w	r4, #0
 800caee:	e02b      	b.n	800cb48 <UART_SetConfig+0x1020>
 800caf0:	f04f 0320 	mov.w	r3, #32
 800caf4:	f04f 0400 	mov.w	r4, #0
 800caf8:	e026      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cafa:	f04f 0310 	mov.w	r3, #16
 800cafe:	f04f 0400 	mov.w	r4, #0
 800cb02:	e021      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cb04:	f04f 030c 	mov.w	r3, #12
 800cb08:	f04f 0400 	mov.w	r4, #0
 800cb0c:	e01c      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cb0e:	f04f 030a 	mov.w	r3, #10
 800cb12:	f04f 0400 	mov.w	r4, #0
 800cb16:	e017      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cb18:	f04f 0308 	mov.w	r3, #8
 800cb1c:	f04f 0400 	mov.w	r4, #0
 800cb20:	e012      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cb22:	f04f 0306 	mov.w	r3, #6
 800cb26:	f04f 0400 	mov.w	r4, #0
 800cb2a:	e00d      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cb2c:	f04f 0304 	mov.w	r3, #4
 800cb30:	f04f 0400 	mov.w	r4, #0
 800cb34:	e008      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cb36:	f04f 0302 	mov.w	r3, #2
 800cb3a:	f04f 0400 	mov.w	r4, #0
 800cb3e:	e003      	b.n	800cb48 <UART_SetConfig+0x1020>
 800cb40:	f04f 0301 	mov.w	r3, #1
 800cb44:	f04f 0400 	mov.w	r4, #0
 800cb48:	461a      	mov	r2, r3
 800cb4a:	4623      	mov	r3, r4
 800cb4c:	f7f3 fc18 	bl	8000380 <__aeabi_uldivmod>
 800cb50:	4603      	mov	r3, r0
 800cb52:	460c      	mov	r4, r1
 800cb54:	4619      	mov	r1, r3
 800cb56:	4622      	mov	r2, r4
 800cb58:	f04f 0300 	mov.w	r3, #0
 800cb5c:	f04f 0400 	mov.w	r4, #0
 800cb60:	0214      	lsls	r4, r2, #8
 800cb62:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cb66:	020b      	lsls	r3, r1, #8
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	6852      	ldr	r2, [r2, #4]
 800cb6c:	0852      	lsrs	r2, r2, #1
 800cb6e:	4611      	mov	r1, r2
 800cb70:	f04f 0200 	mov.w	r2, #0
 800cb74:	eb13 0b01 	adds.w	fp, r3, r1
 800cb78:	eb44 0c02 	adc.w	ip, r4, r2
 800cb7c:	4658      	mov	r0, fp
 800cb7e:	4661      	mov	r1, ip
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	f04f 0400 	mov.w	r4, #0
 800cb88:	461a      	mov	r2, r3
 800cb8a:	4623      	mov	r3, r4
 800cb8c:	f7f3 fbf8 	bl	8000380 <__aeabi_uldivmod>
 800cb90:	4603      	mov	r3, r0
 800cb92:	460c      	mov	r4, r1
 800cb94:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800cb96:	e19d      	b.n	800ced4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d05b      	beq.n	800cc58 <UART_SetConfig+0x1130>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d053      	beq.n	800cc50 <UART_SetConfig+0x1128>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d04b      	beq.n	800cc48 <UART_SetConfig+0x1120>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb4:	2b03      	cmp	r3, #3
 800cbb6:	d043      	beq.n	800cc40 <UART_SetConfig+0x1118>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbc:	2b04      	cmp	r3, #4
 800cbbe:	d03b      	beq.n	800cc38 <UART_SetConfig+0x1110>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc4:	2b05      	cmp	r3, #5
 800cbc6:	d033      	beq.n	800cc30 <UART_SetConfig+0x1108>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbcc:	2b06      	cmp	r3, #6
 800cbce:	d02b      	beq.n	800cc28 <UART_SetConfig+0x1100>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	2b07      	cmp	r3, #7
 800cbd6:	d023      	beq.n	800cc20 <UART_SetConfig+0x10f8>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbdc:	2b08      	cmp	r3, #8
 800cbde:	d01b      	beq.n	800cc18 <UART_SetConfig+0x10f0>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe4:	2b09      	cmp	r3, #9
 800cbe6:	d013      	beq.n	800cc10 <UART_SetConfig+0x10e8>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbec:	2b0a      	cmp	r3, #10
 800cbee:	d00b      	beq.n	800cc08 <UART_SetConfig+0x10e0>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf4:	2b0b      	cmp	r3, #11
 800cbf6:	d103      	bne.n	800cc00 <UART_SetConfig+0x10d8>
 800cbf8:	4b2a      	ldr	r3, [pc, #168]	; (800cca4 <UART_SetConfig+0x117c>)
 800cbfa:	f04f 0400 	mov.w	r4, #0
 800cbfe:	e02e      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc00:	4b29      	ldr	r3, [pc, #164]	; (800cca8 <UART_SetConfig+0x1180>)
 800cc02:	f04f 0403 	mov.w	r4, #3
 800cc06:	e02a      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc08:	4b28      	ldr	r3, [pc, #160]	; (800ccac <UART_SetConfig+0x1184>)
 800cc0a:	f04f 0400 	mov.w	r4, #0
 800cc0e:	e026      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc10:	4b27      	ldr	r3, [pc, #156]	; (800ccb0 <UART_SetConfig+0x1188>)
 800cc12:	f04f 0400 	mov.w	r4, #0
 800cc16:	e022      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc18:	4b26      	ldr	r3, [pc, #152]	; (800ccb4 <UART_SetConfig+0x118c>)
 800cc1a:	f04f 0400 	mov.w	r4, #0
 800cc1e:	e01e      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc20:	4b25      	ldr	r3, [pc, #148]	; (800ccb8 <UART_SetConfig+0x1190>)
 800cc22:	f04f 0400 	mov.w	r4, #0
 800cc26:	e01a      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc28:	a419      	add	r4, pc, #100	; (adr r4, 800cc90 <UART_SetConfig+0x1168>)
 800cc2a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cc2e:	e016      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc30:	4b22      	ldr	r3, [pc, #136]	; (800ccbc <UART_SetConfig+0x1194>)
 800cc32:	f04f 0400 	mov.w	r4, #0
 800cc36:	e012      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc38:	4b21      	ldr	r3, [pc, #132]	; (800ccc0 <UART_SetConfig+0x1198>)
 800cc3a:	f04f 0400 	mov.w	r4, #0
 800cc3e:	e00e      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc40:	a415      	add	r4, pc, #84	; (adr r4, 800cc98 <UART_SetConfig+0x1170>)
 800cc42:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cc46:	e00a      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc48:	4b1e      	ldr	r3, [pc, #120]	; (800ccc4 <UART_SetConfig+0x119c>)
 800cc4a:	f04f 0400 	mov.w	r4, #0
 800cc4e:	e006      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc50:	4b1d      	ldr	r3, [pc, #116]	; (800ccc8 <UART_SetConfig+0x11a0>)
 800cc52:	f04f 0401 	mov.w	r4, #1
 800cc56:	e002      	b.n	800cc5e <UART_SetConfig+0x1136>
 800cc58:	4b13      	ldr	r3, [pc, #76]	; (800cca8 <UART_SetConfig+0x1180>)
 800cc5a:	f04f 0403 	mov.w	r4, #3
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	6852      	ldr	r2, [r2, #4]
 800cc62:	0852      	lsrs	r2, r2, #1
 800cc64:	4611      	mov	r1, r2
 800cc66:	f04f 0200 	mov.w	r2, #0
 800cc6a:	eb13 0b01 	adds.w	fp, r3, r1
 800cc6e:	eb44 0c02 	adc.w	ip, r4, r2
 800cc72:	4658      	mov	r0, fp
 800cc74:	4661      	mov	r1, ip
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f04f 0400 	mov.w	r4, #0
 800cc7e:	461a      	mov	r2, r3
 800cc80:	4623      	mov	r3, r4
 800cc82:	f7f3 fb7d 	bl	8000380 <__aeabi_uldivmod>
 800cc86:	4603      	mov	r3, r0
 800cc88:	460c      	mov	r4, r1
 800cc8a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc8c:	e122      	b.n	800ced4 <UART_SetConfig+0x13ac>
 800cc8e:	bf00      	nop
 800cc90:	51615500 	.word	0x51615500
 800cc94:	00000000 	.word	0x00000000
 800cc98:	a2c2aa00 	.word	0xa2c2aa00
 800cc9c:	00000000 	.word	0x00000000
 800cca0:	58024400 	.word	0x58024400
 800cca4:	03d09000 	.word	0x03d09000
 800cca8:	d0900000 	.word	0xd0900000
 800ccac:	07a12000 	.word	0x07a12000
 800ccb0:	0f424000 	.word	0x0f424000
 800ccb4:	1e848000 	.word	0x1e848000
 800ccb8:	3d090000 	.word	0x3d090000
 800ccbc:	61a80000 	.word	0x61a80000
 800ccc0:	7a120000 	.word	0x7a120000
 800ccc4:	f4240000 	.word	0xf4240000
 800ccc8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d05b      	beq.n	800cd8c <UART_SetConfig+0x1264>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d053      	beq.n	800cd84 <UART_SetConfig+0x125c>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d04b      	beq.n	800cd7c <UART_SetConfig+0x1254>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce8:	2b03      	cmp	r3, #3
 800ccea:	d043      	beq.n	800cd74 <UART_SetConfig+0x124c>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf0:	2b04      	cmp	r3, #4
 800ccf2:	d03b      	beq.n	800cd6c <UART_SetConfig+0x1244>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf8:	2b05      	cmp	r3, #5
 800ccfa:	d033      	beq.n	800cd64 <UART_SetConfig+0x123c>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd00:	2b06      	cmp	r3, #6
 800cd02:	d02b      	beq.n	800cd5c <UART_SetConfig+0x1234>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd08:	2b07      	cmp	r3, #7
 800cd0a:	d023      	beq.n	800cd54 <UART_SetConfig+0x122c>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	2b08      	cmp	r3, #8
 800cd12:	d01b      	beq.n	800cd4c <UART_SetConfig+0x1224>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd18:	2b09      	cmp	r3, #9
 800cd1a:	d013      	beq.n	800cd44 <UART_SetConfig+0x121c>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd20:	2b0a      	cmp	r3, #10
 800cd22:	d00b      	beq.n	800cd3c <UART_SetConfig+0x1214>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd28:	2b0b      	cmp	r3, #11
 800cd2a:	d103      	bne.n	800cd34 <UART_SetConfig+0x120c>
 800cd2c:	4bc0      	ldr	r3, [pc, #768]	; (800d030 <UART_SetConfig+0x1508>)
 800cd2e:	f04f 0400 	mov.w	r4, #0
 800cd32:	e02e      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd34:	4bbf      	ldr	r3, [pc, #764]	; (800d034 <UART_SetConfig+0x150c>)
 800cd36:	f04f 0400 	mov.w	r4, #0
 800cd3a:	e02a      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd3c:	4bbe      	ldr	r3, [pc, #760]	; (800d038 <UART_SetConfig+0x1510>)
 800cd3e:	f04f 0400 	mov.w	r4, #0
 800cd42:	e026      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd44:	4bbd      	ldr	r3, [pc, #756]	; (800d03c <UART_SetConfig+0x1514>)
 800cd46:	f04f 0400 	mov.w	r4, #0
 800cd4a:	e022      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd4c:	4bbc      	ldr	r3, [pc, #752]	; (800d040 <UART_SetConfig+0x1518>)
 800cd4e:	f04f 0400 	mov.w	r4, #0
 800cd52:	e01e      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd54:	4bbb      	ldr	r3, [pc, #748]	; (800d044 <UART_SetConfig+0x151c>)
 800cd56:	f04f 0400 	mov.w	r4, #0
 800cd5a:	e01a      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd5c:	a4b0      	add	r4, pc, #704	; (adr r4, 800d020 <UART_SetConfig+0x14f8>)
 800cd5e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cd62:	e016      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd64:	4bb8      	ldr	r3, [pc, #736]	; (800d048 <UART_SetConfig+0x1520>)
 800cd66:	f04f 0400 	mov.w	r4, #0
 800cd6a:	e012      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd6c:	4bb7      	ldr	r3, [pc, #732]	; (800d04c <UART_SetConfig+0x1524>)
 800cd6e:	f04f 0400 	mov.w	r4, #0
 800cd72:	e00e      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd74:	a4ac      	add	r4, pc, #688	; (adr r4, 800d028 <UART_SetConfig+0x1500>)
 800cd76:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cd7a:	e00a      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd7c:	4bb4      	ldr	r3, [pc, #720]	; (800d050 <UART_SetConfig+0x1528>)
 800cd7e:	f04f 0400 	mov.w	r4, #0
 800cd82:	e006      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd84:	4bb3      	ldr	r3, [pc, #716]	; (800d054 <UART_SetConfig+0x152c>)
 800cd86:	f04f 0400 	mov.w	r4, #0
 800cd8a:	e002      	b.n	800cd92 <UART_SetConfig+0x126a>
 800cd8c:	4ba9      	ldr	r3, [pc, #676]	; (800d034 <UART_SetConfig+0x150c>)
 800cd8e:	f04f 0400 	mov.w	r4, #0
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	6852      	ldr	r2, [r2, #4]
 800cd96:	0852      	lsrs	r2, r2, #1
 800cd98:	4611      	mov	r1, r2
 800cd9a:	f04f 0200 	mov.w	r2, #0
 800cd9e:	eb13 0b01 	adds.w	fp, r3, r1
 800cda2:	eb44 0c02 	adc.w	ip, r4, r2
 800cda6:	4658      	mov	r0, fp
 800cda8:	4661      	mov	r1, ip
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	f04f 0400 	mov.w	r4, #0
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	4623      	mov	r3, r4
 800cdb6:	f7f3 fae3 	bl	8000380 <__aeabi_uldivmod>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdc0:	e088      	b.n	800ced4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d064      	beq.n	800ce94 <UART_SetConfig+0x136c>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d05b      	beq.n	800ce8a <UART_SetConfig+0x1362>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d052      	beq.n	800ce80 <UART_SetConfig+0x1358>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	d04a      	beq.n	800ce78 <UART_SetConfig+0x1350>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde6:	2b04      	cmp	r3, #4
 800cde8:	d041      	beq.n	800ce6e <UART_SetConfig+0x1346>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdee:	2b05      	cmp	r3, #5
 800cdf0:	d039      	beq.n	800ce66 <UART_SetConfig+0x133e>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf6:	2b06      	cmp	r3, #6
 800cdf8:	d031      	beq.n	800ce5e <UART_SetConfig+0x1336>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfe:	2b07      	cmp	r3, #7
 800ce00:	d028      	beq.n	800ce54 <UART_SetConfig+0x132c>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce06:	2b08      	cmp	r3, #8
 800ce08:	d01f      	beq.n	800ce4a <UART_SetConfig+0x1322>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0e:	2b09      	cmp	r3, #9
 800ce10:	d016      	beq.n	800ce40 <UART_SetConfig+0x1318>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce16:	2b0a      	cmp	r3, #10
 800ce18:	d00d      	beq.n	800ce36 <UART_SetConfig+0x130e>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1e:	2b0b      	cmp	r3, #11
 800ce20:	d104      	bne.n	800ce2c <UART_SetConfig+0x1304>
 800ce22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce26:	f04f 0400 	mov.w	r4, #0
 800ce2a:	e037      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ce30:	f04f 0400 	mov.w	r4, #0
 800ce34:	e032      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ce3a:	f04f 0400 	mov.w	r4, #0
 800ce3e:	e02d      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ce44:	f04f 0400 	mov.w	r4, #0
 800ce48:	e028      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ce4e:	f04f 0400 	mov.w	r4, #0
 800ce52:	e023      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ce58:	f04f 0400 	mov.w	r4, #0
 800ce5c:	e01e      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce5e:	4b7e      	ldr	r3, [pc, #504]	; (800d058 <UART_SetConfig+0x1530>)
 800ce60:	f04f 0400 	mov.w	r4, #0
 800ce64:	e01a      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce66:	4b7d      	ldr	r3, [pc, #500]	; (800d05c <UART_SetConfig+0x1534>)
 800ce68:	f04f 0400 	mov.w	r4, #0
 800ce6c:	e016      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ce72:	f04f 0400 	mov.w	r4, #0
 800ce76:	e011      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce78:	4b79      	ldr	r3, [pc, #484]	; (800d060 <UART_SetConfig+0x1538>)
 800ce7a:	f04f 0400 	mov.w	r4, #0
 800ce7e:	e00d      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ce84:	f04f 0400 	mov.w	r4, #0
 800ce88:	e008      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ce8e:	f04f 0400 	mov.w	r4, #0
 800ce92:	e003      	b.n	800ce9c <UART_SetConfig+0x1374>
 800ce94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ce98:	f04f 0400 	mov.w	r4, #0
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6852      	ldr	r2, [r2, #4]
 800cea0:	0852      	lsrs	r2, r2, #1
 800cea2:	4611      	mov	r1, r2
 800cea4:	f04f 0200 	mov.w	r2, #0
 800cea8:	eb13 0b01 	adds.w	fp, r3, r1
 800ceac:	eb44 0c02 	adc.w	ip, r4, r2
 800ceb0:	4658      	mov	r0, fp
 800ceb2:	4661      	mov	r1, ip
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	f04f 0400 	mov.w	r4, #0
 800cebc:	461a      	mov	r2, r3
 800cebe:	4623      	mov	r3, r4
 800cec0:	f7f3 fa5e 	bl	8000380 <__aeabi_uldivmod>
 800cec4:	4603      	mov	r3, r0
 800cec6:	460c      	mov	r4, r1
 800cec8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ceca:	e003      	b.n	800ced4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800ced2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ced4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceda:	d309      	bcc.n	800cef0 <UART_SetConfig+0x13c8>
 800cedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cee2:	d205      	bcs.n	800cef0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceea:	60da      	str	r2, [r3, #12]
 800ceec:	f000 bf85 	b.w	800ddfa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cef6:	f000 bf80 	b.w	800ddfa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	69db      	ldr	r3, [r3, #28]
 800cefe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf02:	f040 83da 	bne.w	800d6ba <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800cf06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf0a:	2b40      	cmp	r3, #64	; 0x40
 800cf0c:	f200 83b3 	bhi.w	800d676 <UART_SetConfig+0x1b4e>
 800cf10:	a201      	add	r2, pc, #4	; (adr r2, 800cf18 <UART_SetConfig+0x13f0>)
 800cf12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf16:	bf00      	nop
 800cf18:	0800d065 	.word	0x0800d065
 800cf1c:	0800d11d 	.word	0x0800d11d
 800cf20:	0800d677 	.word	0x0800d677
 800cf24:	0800d677 	.word	0x0800d677
 800cf28:	0800d1d5 	.word	0x0800d1d5
 800cf2c:	0800d677 	.word	0x0800d677
 800cf30:	0800d677 	.word	0x0800d677
 800cf34:	0800d677 	.word	0x0800d677
 800cf38:	0800d291 	.word	0x0800d291
 800cf3c:	0800d677 	.word	0x0800d677
 800cf40:	0800d677 	.word	0x0800d677
 800cf44:	0800d677 	.word	0x0800d677
 800cf48:	0800d677 	.word	0x0800d677
 800cf4c:	0800d677 	.word	0x0800d677
 800cf50:	0800d677 	.word	0x0800d677
 800cf54:	0800d677 	.word	0x0800d677
 800cf58:	0800d34d 	.word	0x0800d34d
 800cf5c:	0800d677 	.word	0x0800d677
 800cf60:	0800d677 	.word	0x0800d677
 800cf64:	0800d677 	.word	0x0800d677
 800cf68:	0800d677 	.word	0x0800d677
 800cf6c:	0800d677 	.word	0x0800d677
 800cf70:	0800d677 	.word	0x0800d677
 800cf74:	0800d677 	.word	0x0800d677
 800cf78:	0800d677 	.word	0x0800d677
 800cf7c:	0800d677 	.word	0x0800d677
 800cf80:	0800d677 	.word	0x0800d677
 800cf84:	0800d677 	.word	0x0800d677
 800cf88:	0800d677 	.word	0x0800d677
 800cf8c:	0800d677 	.word	0x0800d677
 800cf90:	0800d677 	.word	0x0800d677
 800cf94:	0800d677 	.word	0x0800d677
 800cf98:	0800d4bf 	.word	0x0800d4bf
 800cf9c:	0800d677 	.word	0x0800d677
 800cfa0:	0800d677 	.word	0x0800d677
 800cfa4:	0800d677 	.word	0x0800d677
 800cfa8:	0800d677 	.word	0x0800d677
 800cfac:	0800d677 	.word	0x0800d677
 800cfb0:	0800d677 	.word	0x0800d677
 800cfb4:	0800d677 	.word	0x0800d677
 800cfb8:	0800d677 	.word	0x0800d677
 800cfbc:	0800d677 	.word	0x0800d677
 800cfc0:	0800d677 	.word	0x0800d677
 800cfc4:	0800d677 	.word	0x0800d677
 800cfc8:	0800d677 	.word	0x0800d677
 800cfcc:	0800d677 	.word	0x0800d677
 800cfd0:	0800d677 	.word	0x0800d677
 800cfd4:	0800d677 	.word	0x0800d677
 800cfd8:	0800d677 	.word	0x0800d677
 800cfdc:	0800d677 	.word	0x0800d677
 800cfe0:	0800d677 	.word	0x0800d677
 800cfe4:	0800d677 	.word	0x0800d677
 800cfe8:	0800d677 	.word	0x0800d677
 800cfec:	0800d677 	.word	0x0800d677
 800cff0:	0800d677 	.word	0x0800d677
 800cff4:	0800d677 	.word	0x0800d677
 800cff8:	0800d677 	.word	0x0800d677
 800cffc:	0800d677 	.word	0x0800d677
 800d000:	0800d677 	.word	0x0800d677
 800d004:	0800d677 	.word	0x0800d677
 800d008:	0800d677 	.word	0x0800d677
 800d00c:	0800d677 	.word	0x0800d677
 800d010:	0800d677 	.word	0x0800d677
 800d014:	0800d677 	.word	0x0800d677
 800d018:	0800d5b5 	.word	0x0800d5b5
 800d01c:	f3af 8000 	nop.w
 800d020:	05161500 	.word	0x05161500
 800d024:	00000000 	.word	0x00000000
 800d028:	0a2c2a00 	.word	0x0a2c2a00
 800d02c:	00000000 	.word	0x00000000
 800d030:	003d0900 	.word	0x003d0900
 800d034:	3d090000 	.word	0x3d090000
 800d038:	007a1200 	.word	0x007a1200
 800d03c:	00f42400 	.word	0x00f42400
 800d040:	01e84800 	.word	0x01e84800
 800d044:	03d09000 	.word	0x03d09000
 800d048:	061a8000 	.word	0x061a8000
 800d04c:	07a12000 	.word	0x07a12000
 800d050:	0f424000 	.word	0x0f424000
 800d054:	1e848000 	.word	0x1e848000
 800d058:	000aaa00 	.word	0x000aaa00
 800d05c:	000ccc00 	.word	0x000ccc00
 800d060:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d064:	f7fb ff42 	bl	8008eec <HAL_RCC_GetPCLK1Freq>
 800d068:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d044      	beq.n	800d0fc <UART_SetConfig+0x15d4>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d076:	2b01      	cmp	r3, #1
 800d078:	d03e      	beq.n	800d0f8 <UART_SetConfig+0x15d0>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d038      	beq.n	800d0f4 <UART_SetConfig+0x15cc>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d086:	2b03      	cmp	r3, #3
 800d088:	d032      	beq.n	800d0f0 <UART_SetConfig+0x15c8>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08e:	2b04      	cmp	r3, #4
 800d090:	d02c      	beq.n	800d0ec <UART_SetConfig+0x15c4>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d096:	2b05      	cmp	r3, #5
 800d098:	d026      	beq.n	800d0e8 <UART_SetConfig+0x15c0>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09e:	2b06      	cmp	r3, #6
 800d0a0:	d020      	beq.n	800d0e4 <UART_SetConfig+0x15bc>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a6:	2b07      	cmp	r3, #7
 800d0a8:	d01a      	beq.n	800d0e0 <UART_SetConfig+0x15b8>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ae:	2b08      	cmp	r3, #8
 800d0b0:	d014      	beq.n	800d0dc <UART_SetConfig+0x15b4>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b6:	2b09      	cmp	r3, #9
 800d0b8:	d00e      	beq.n	800d0d8 <UART_SetConfig+0x15b0>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0be:	2b0a      	cmp	r3, #10
 800d0c0:	d008      	beq.n	800d0d4 <UART_SetConfig+0x15ac>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c6:	2b0b      	cmp	r3, #11
 800d0c8:	d102      	bne.n	800d0d0 <UART_SetConfig+0x15a8>
 800d0ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0ce:	e016      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e014      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0d4:	2380      	movs	r3, #128	; 0x80
 800d0d6:	e012      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0d8:	2340      	movs	r3, #64	; 0x40
 800d0da:	e010      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0dc:	2320      	movs	r3, #32
 800d0de:	e00e      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0e0:	2310      	movs	r3, #16
 800d0e2:	e00c      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0e4:	230c      	movs	r3, #12
 800d0e6:	e00a      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0e8:	230a      	movs	r3, #10
 800d0ea:	e008      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0ec:	2308      	movs	r3, #8
 800d0ee:	e006      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0f0:	2306      	movs	r3, #6
 800d0f2:	e004      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0f4:	2304      	movs	r3, #4
 800d0f6:	e002      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	e000      	b.n	800d0fe <UART_SetConfig+0x15d6>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d100:	fbb2 f3f3 	udiv	r3, r2, r3
 800d104:	005a      	lsls	r2, r3, #1
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	085b      	lsrs	r3, r3, #1
 800d10c:	441a      	add	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	fbb2 f3f3 	udiv	r3, r2, r3
 800d116:	b29b      	uxth	r3, r3
 800d118:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d11a:	e2b0      	b.n	800d67e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d11c:	f7fb fefc 	bl	8008f18 <HAL_RCC_GetPCLK2Freq>
 800d120:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d126:	2b00      	cmp	r3, #0
 800d128:	d044      	beq.n	800d1b4 <UART_SetConfig+0x168c>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d03e      	beq.n	800d1b0 <UART_SetConfig+0x1688>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d136:	2b02      	cmp	r3, #2
 800d138:	d038      	beq.n	800d1ac <UART_SetConfig+0x1684>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d032      	beq.n	800d1a8 <UART_SetConfig+0x1680>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d146:	2b04      	cmp	r3, #4
 800d148:	d02c      	beq.n	800d1a4 <UART_SetConfig+0x167c>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14e:	2b05      	cmp	r3, #5
 800d150:	d026      	beq.n	800d1a0 <UART_SetConfig+0x1678>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d156:	2b06      	cmp	r3, #6
 800d158:	d020      	beq.n	800d19c <UART_SetConfig+0x1674>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15e:	2b07      	cmp	r3, #7
 800d160:	d01a      	beq.n	800d198 <UART_SetConfig+0x1670>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d166:	2b08      	cmp	r3, #8
 800d168:	d014      	beq.n	800d194 <UART_SetConfig+0x166c>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	2b09      	cmp	r3, #9
 800d170:	d00e      	beq.n	800d190 <UART_SetConfig+0x1668>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d176:	2b0a      	cmp	r3, #10
 800d178:	d008      	beq.n	800d18c <UART_SetConfig+0x1664>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	2b0b      	cmp	r3, #11
 800d180:	d102      	bne.n	800d188 <UART_SetConfig+0x1660>
 800d182:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d186:	e016      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d188:	2301      	movs	r3, #1
 800d18a:	e014      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d18c:	2380      	movs	r3, #128	; 0x80
 800d18e:	e012      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d190:	2340      	movs	r3, #64	; 0x40
 800d192:	e010      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d194:	2320      	movs	r3, #32
 800d196:	e00e      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d198:	2310      	movs	r3, #16
 800d19a:	e00c      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d19c:	230c      	movs	r3, #12
 800d19e:	e00a      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d1a0:	230a      	movs	r3, #10
 800d1a2:	e008      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d1a4:	2308      	movs	r3, #8
 800d1a6:	e006      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d1a8:	2306      	movs	r3, #6
 800d1aa:	e004      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d1ac:	2304      	movs	r3, #4
 800d1ae:	e002      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	e000      	b.n	800d1b6 <UART_SetConfig+0x168e>
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1bc:	005a      	lsls	r2, r3, #1
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	085b      	lsrs	r3, r3, #1
 800d1c4:	441a      	add	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d1d2:	e254      	b.n	800d67e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1d4:	f107 0318 	add.w	r3, r7, #24
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fd f81f 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1de:	69fa      	ldr	r2, [r7, #28]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d044      	beq.n	800d272 <UART_SetConfig+0x174a>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d03e      	beq.n	800d26e <UART_SetConfig+0x1746>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d038      	beq.n	800d26a <UART_SetConfig+0x1742>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d032      	beq.n	800d266 <UART_SetConfig+0x173e>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d204:	2b04      	cmp	r3, #4
 800d206:	d02c      	beq.n	800d262 <UART_SetConfig+0x173a>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20c:	2b05      	cmp	r3, #5
 800d20e:	d026      	beq.n	800d25e <UART_SetConfig+0x1736>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d214:	2b06      	cmp	r3, #6
 800d216:	d020      	beq.n	800d25a <UART_SetConfig+0x1732>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21c:	2b07      	cmp	r3, #7
 800d21e:	d01a      	beq.n	800d256 <UART_SetConfig+0x172e>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d224:	2b08      	cmp	r3, #8
 800d226:	d014      	beq.n	800d252 <UART_SetConfig+0x172a>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22c:	2b09      	cmp	r3, #9
 800d22e:	d00e      	beq.n	800d24e <UART_SetConfig+0x1726>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d234:	2b0a      	cmp	r3, #10
 800d236:	d008      	beq.n	800d24a <UART_SetConfig+0x1722>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	2b0b      	cmp	r3, #11
 800d23e:	d102      	bne.n	800d246 <UART_SetConfig+0x171e>
 800d240:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d244:	e016      	b.n	800d274 <UART_SetConfig+0x174c>
 800d246:	2301      	movs	r3, #1
 800d248:	e014      	b.n	800d274 <UART_SetConfig+0x174c>
 800d24a:	2380      	movs	r3, #128	; 0x80
 800d24c:	e012      	b.n	800d274 <UART_SetConfig+0x174c>
 800d24e:	2340      	movs	r3, #64	; 0x40
 800d250:	e010      	b.n	800d274 <UART_SetConfig+0x174c>
 800d252:	2320      	movs	r3, #32
 800d254:	e00e      	b.n	800d274 <UART_SetConfig+0x174c>
 800d256:	2310      	movs	r3, #16
 800d258:	e00c      	b.n	800d274 <UART_SetConfig+0x174c>
 800d25a:	230c      	movs	r3, #12
 800d25c:	e00a      	b.n	800d274 <UART_SetConfig+0x174c>
 800d25e:	230a      	movs	r3, #10
 800d260:	e008      	b.n	800d274 <UART_SetConfig+0x174c>
 800d262:	2308      	movs	r3, #8
 800d264:	e006      	b.n	800d274 <UART_SetConfig+0x174c>
 800d266:	2306      	movs	r3, #6
 800d268:	e004      	b.n	800d274 <UART_SetConfig+0x174c>
 800d26a:	2304      	movs	r3, #4
 800d26c:	e002      	b.n	800d274 <UART_SetConfig+0x174c>
 800d26e:	2302      	movs	r3, #2
 800d270:	e000      	b.n	800d274 <UART_SetConfig+0x174c>
 800d272:	2301      	movs	r3, #1
 800d274:	fbb2 f3f3 	udiv	r3, r2, r3
 800d278:	005a      	lsls	r2, r3, #1
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	085b      	lsrs	r3, r3, #1
 800d280:	441a      	add	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	fbb2 f3f3 	udiv	r3, r2, r3
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d28e:	e1f6      	b.n	800d67e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d290:	f107 030c 	add.w	r3, r7, #12
 800d294:	4618      	mov	r0, r3
 800d296:	f7fd f90d 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d044      	beq.n	800d32e <UART_SetConfig+0x1806>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d03e      	beq.n	800d32a <UART_SetConfig+0x1802>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d038      	beq.n	800d326 <UART_SetConfig+0x17fe>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d032      	beq.n	800d322 <UART_SetConfig+0x17fa>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	2b04      	cmp	r3, #4
 800d2c2:	d02c      	beq.n	800d31e <UART_SetConfig+0x17f6>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c8:	2b05      	cmp	r3, #5
 800d2ca:	d026      	beq.n	800d31a <UART_SetConfig+0x17f2>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d0:	2b06      	cmp	r3, #6
 800d2d2:	d020      	beq.n	800d316 <UART_SetConfig+0x17ee>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d8:	2b07      	cmp	r3, #7
 800d2da:	d01a      	beq.n	800d312 <UART_SetConfig+0x17ea>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e0:	2b08      	cmp	r3, #8
 800d2e2:	d014      	beq.n	800d30e <UART_SetConfig+0x17e6>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e8:	2b09      	cmp	r3, #9
 800d2ea:	d00e      	beq.n	800d30a <UART_SetConfig+0x17e2>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f0:	2b0a      	cmp	r3, #10
 800d2f2:	d008      	beq.n	800d306 <UART_SetConfig+0x17de>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f8:	2b0b      	cmp	r3, #11
 800d2fa:	d102      	bne.n	800d302 <UART_SetConfig+0x17da>
 800d2fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d300:	e016      	b.n	800d330 <UART_SetConfig+0x1808>
 800d302:	2301      	movs	r3, #1
 800d304:	e014      	b.n	800d330 <UART_SetConfig+0x1808>
 800d306:	2380      	movs	r3, #128	; 0x80
 800d308:	e012      	b.n	800d330 <UART_SetConfig+0x1808>
 800d30a:	2340      	movs	r3, #64	; 0x40
 800d30c:	e010      	b.n	800d330 <UART_SetConfig+0x1808>
 800d30e:	2320      	movs	r3, #32
 800d310:	e00e      	b.n	800d330 <UART_SetConfig+0x1808>
 800d312:	2310      	movs	r3, #16
 800d314:	e00c      	b.n	800d330 <UART_SetConfig+0x1808>
 800d316:	230c      	movs	r3, #12
 800d318:	e00a      	b.n	800d330 <UART_SetConfig+0x1808>
 800d31a:	230a      	movs	r3, #10
 800d31c:	e008      	b.n	800d330 <UART_SetConfig+0x1808>
 800d31e:	2308      	movs	r3, #8
 800d320:	e006      	b.n	800d330 <UART_SetConfig+0x1808>
 800d322:	2306      	movs	r3, #6
 800d324:	e004      	b.n	800d330 <UART_SetConfig+0x1808>
 800d326:	2304      	movs	r3, #4
 800d328:	e002      	b.n	800d330 <UART_SetConfig+0x1808>
 800d32a:	2302      	movs	r3, #2
 800d32c:	e000      	b.n	800d330 <UART_SetConfig+0x1808>
 800d32e:	2301      	movs	r3, #1
 800d330:	fbb2 f3f3 	udiv	r3, r2, r3
 800d334:	005a      	lsls	r2, r3, #1
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	085b      	lsrs	r3, r3, #1
 800d33c:	441a      	add	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	fbb2 f3f3 	udiv	r3, r2, r3
 800d346:	b29b      	uxth	r3, r3
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d34a:	e198      	b.n	800d67e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d34c:	4b87      	ldr	r3, [pc, #540]	; (800d56c <UART_SetConfig+0x1a44>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 0320 	and.w	r3, r3, #32
 800d354:	2b00      	cmp	r3, #0
 800d356:	d05e      	beq.n	800d416 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d358:	4b84      	ldr	r3, [pc, #528]	; (800d56c <UART_SetConfig+0x1a44>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	08db      	lsrs	r3, r3, #3
 800d35e:	f003 0303 	and.w	r3, r3, #3
 800d362:	4a83      	ldr	r2, [pc, #524]	; (800d570 <UART_SetConfig+0x1a48>)
 800d364:	40da      	lsrs	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d044      	beq.n	800d3f8 <UART_SetConfig+0x18d0>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d372:	2b01      	cmp	r3, #1
 800d374:	d03e      	beq.n	800d3f4 <UART_SetConfig+0x18cc>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37a:	2b02      	cmp	r3, #2
 800d37c:	d038      	beq.n	800d3f0 <UART_SetConfig+0x18c8>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d382:	2b03      	cmp	r3, #3
 800d384:	d032      	beq.n	800d3ec <UART_SetConfig+0x18c4>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38a:	2b04      	cmp	r3, #4
 800d38c:	d02c      	beq.n	800d3e8 <UART_SetConfig+0x18c0>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d392:	2b05      	cmp	r3, #5
 800d394:	d026      	beq.n	800d3e4 <UART_SetConfig+0x18bc>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39a:	2b06      	cmp	r3, #6
 800d39c:	d020      	beq.n	800d3e0 <UART_SetConfig+0x18b8>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	2b07      	cmp	r3, #7
 800d3a4:	d01a      	beq.n	800d3dc <UART_SetConfig+0x18b4>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	2b08      	cmp	r3, #8
 800d3ac:	d014      	beq.n	800d3d8 <UART_SetConfig+0x18b0>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b2:	2b09      	cmp	r3, #9
 800d3b4:	d00e      	beq.n	800d3d4 <UART_SetConfig+0x18ac>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ba:	2b0a      	cmp	r3, #10
 800d3bc:	d008      	beq.n	800d3d0 <UART_SetConfig+0x18a8>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c2:	2b0b      	cmp	r3, #11
 800d3c4:	d102      	bne.n	800d3cc <UART_SetConfig+0x18a4>
 800d3c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3ca:	e016      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e014      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3d0:	2380      	movs	r3, #128	; 0x80
 800d3d2:	e012      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3d4:	2340      	movs	r3, #64	; 0x40
 800d3d6:	e010      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3d8:	2320      	movs	r3, #32
 800d3da:	e00e      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3dc:	2310      	movs	r3, #16
 800d3de:	e00c      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3e0:	230c      	movs	r3, #12
 800d3e2:	e00a      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3e4:	230a      	movs	r3, #10
 800d3e6:	e008      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3e8:	2308      	movs	r3, #8
 800d3ea:	e006      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3ec:	2306      	movs	r3, #6
 800d3ee:	e004      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3f0:	2304      	movs	r3, #4
 800d3f2:	e002      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	e000      	b.n	800d3fa <UART_SetConfig+0x18d2>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3fe:	005a      	lsls	r2, r3, #1
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	085b      	lsrs	r3, r3, #1
 800d406:	441a      	add	r2, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d410:	b29b      	uxth	r3, r3
 800d412:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800d414:	e133      	b.n	800d67e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d043      	beq.n	800d4a6 <UART_SetConfig+0x197e>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d422:	2b01      	cmp	r3, #1
 800d424:	d03d      	beq.n	800d4a2 <UART_SetConfig+0x197a>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d037      	beq.n	800d49e <UART_SetConfig+0x1976>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d432:	2b03      	cmp	r3, #3
 800d434:	d031      	beq.n	800d49a <UART_SetConfig+0x1972>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43a:	2b04      	cmp	r3, #4
 800d43c:	d02b      	beq.n	800d496 <UART_SetConfig+0x196e>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d442:	2b05      	cmp	r3, #5
 800d444:	d025      	beq.n	800d492 <UART_SetConfig+0x196a>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44a:	2b06      	cmp	r3, #6
 800d44c:	d01f      	beq.n	800d48e <UART_SetConfig+0x1966>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d452:	2b07      	cmp	r3, #7
 800d454:	d019      	beq.n	800d48a <UART_SetConfig+0x1962>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45a:	2b08      	cmp	r3, #8
 800d45c:	d013      	beq.n	800d486 <UART_SetConfig+0x195e>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d462:	2b09      	cmp	r3, #9
 800d464:	d00d      	beq.n	800d482 <UART_SetConfig+0x195a>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46a:	2b0a      	cmp	r3, #10
 800d46c:	d007      	beq.n	800d47e <UART_SetConfig+0x1956>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d472:	2b0b      	cmp	r3, #11
 800d474:	d101      	bne.n	800d47a <UART_SetConfig+0x1952>
 800d476:	4b3f      	ldr	r3, [pc, #252]	; (800d574 <UART_SetConfig+0x1a4c>)
 800d478:	e016      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d47a:	4b3f      	ldr	r3, [pc, #252]	; (800d578 <UART_SetConfig+0x1a50>)
 800d47c:	e014      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d47e:	4b3f      	ldr	r3, [pc, #252]	; (800d57c <UART_SetConfig+0x1a54>)
 800d480:	e012      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d482:	4b3f      	ldr	r3, [pc, #252]	; (800d580 <UART_SetConfig+0x1a58>)
 800d484:	e010      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d486:	4b3f      	ldr	r3, [pc, #252]	; (800d584 <UART_SetConfig+0x1a5c>)
 800d488:	e00e      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d48a:	4b3f      	ldr	r3, [pc, #252]	; (800d588 <UART_SetConfig+0x1a60>)
 800d48c:	e00c      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d48e:	4b3f      	ldr	r3, [pc, #252]	; (800d58c <UART_SetConfig+0x1a64>)
 800d490:	e00a      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d492:	4b3f      	ldr	r3, [pc, #252]	; (800d590 <UART_SetConfig+0x1a68>)
 800d494:	e008      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d496:	4b3f      	ldr	r3, [pc, #252]	; (800d594 <UART_SetConfig+0x1a6c>)
 800d498:	e006      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d49a:	4b3f      	ldr	r3, [pc, #252]	; (800d598 <UART_SetConfig+0x1a70>)
 800d49c:	e004      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d49e:	4b3f      	ldr	r3, [pc, #252]	; (800d59c <UART_SetConfig+0x1a74>)
 800d4a0:	e002      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d4a2:	4b33      	ldr	r3, [pc, #204]	; (800d570 <UART_SetConfig+0x1a48>)
 800d4a4:	e000      	b.n	800d4a8 <UART_SetConfig+0x1980>
 800d4a6:	4b34      	ldr	r3, [pc, #208]	; (800d578 <UART_SetConfig+0x1a50>)
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	6852      	ldr	r2, [r2, #4]
 800d4ac:	0852      	lsrs	r2, r2, #1
 800d4ae:	441a      	add	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d4bc:	e0df      	b.n	800d67e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d045      	beq.n	800d552 <UART_SetConfig+0x1a2a>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d03f      	beq.n	800d54e <UART_SetConfig+0x1a26>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d039      	beq.n	800d54a <UART_SetConfig+0x1a22>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	d033      	beq.n	800d546 <UART_SetConfig+0x1a1e>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e2:	2b04      	cmp	r3, #4
 800d4e4:	d02d      	beq.n	800d542 <UART_SetConfig+0x1a1a>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ea:	2b05      	cmp	r3, #5
 800d4ec:	d027      	beq.n	800d53e <UART_SetConfig+0x1a16>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f2:	2b06      	cmp	r3, #6
 800d4f4:	d021      	beq.n	800d53a <UART_SetConfig+0x1a12>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fa:	2b07      	cmp	r3, #7
 800d4fc:	d01b      	beq.n	800d536 <UART_SetConfig+0x1a0e>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d502:	2b08      	cmp	r3, #8
 800d504:	d015      	beq.n	800d532 <UART_SetConfig+0x1a0a>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50a:	2b09      	cmp	r3, #9
 800d50c:	d00f      	beq.n	800d52e <UART_SetConfig+0x1a06>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d512:	2b0a      	cmp	r3, #10
 800d514:	d008      	beq.n	800d528 <UART_SetConfig+0x1a00>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51a:	2b0b      	cmp	r3, #11
 800d51c:	d102      	bne.n	800d524 <UART_SetConfig+0x19fc>
 800d51e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d522:	e017      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d524:	4b18      	ldr	r3, [pc, #96]	; (800d588 <UART_SetConfig+0x1a60>)
 800d526:	e015      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d528:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d52c:	e012      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d52e:	4b1c      	ldr	r3, [pc, #112]	; (800d5a0 <UART_SetConfig+0x1a78>)
 800d530:	e010      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d532:	4b1c      	ldr	r3, [pc, #112]	; (800d5a4 <UART_SetConfig+0x1a7c>)
 800d534:	e00e      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d536:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <UART_SetConfig+0x1a4c>)
 800d538:	e00c      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d53a:	4b1b      	ldr	r3, [pc, #108]	; (800d5a8 <UART_SetConfig+0x1a80>)
 800d53c:	e00a      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d53e:	4b1b      	ldr	r3, [pc, #108]	; (800d5ac <UART_SetConfig+0x1a84>)
 800d540:	e008      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d542:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <UART_SetConfig+0x1a54>)
 800d544:	e006      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d546:	4b1a      	ldr	r3, [pc, #104]	; (800d5b0 <UART_SetConfig+0x1a88>)
 800d548:	e004      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d54a:	4b0d      	ldr	r3, [pc, #52]	; (800d580 <UART_SetConfig+0x1a58>)
 800d54c:	e002      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d54e:	4b0d      	ldr	r3, [pc, #52]	; (800d584 <UART_SetConfig+0x1a5c>)
 800d550:	e000      	b.n	800d554 <UART_SetConfig+0x1a2c>
 800d552:	4b0d      	ldr	r3, [pc, #52]	; (800d588 <UART_SetConfig+0x1a60>)
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	6852      	ldr	r2, [r2, #4]
 800d558:	0852      	lsrs	r2, r2, #1
 800d55a:	441a      	add	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	fbb2 f3f3 	udiv	r3, r2, r3
 800d564:	b29b      	uxth	r3, r3
 800d566:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d568:	e089      	b.n	800d67e <UART_SetConfig+0x1b56>
 800d56a:	bf00      	nop
 800d56c:	58024400 	.word	0x58024400
 800d570:	03d09000 	.word	0x03d09000
 800d574:	0007a120 	.word	0x0007a120
 800d578:	07a12000 	.word	0x07a12000
 800d57c:	000f4240 	.word	0x000f4240
 800d580:	001e8480 	.word	0x001e8480
 800d584:	003d0900 	.word	0x003d0900
 800d588:	007a1200 	.word	0x007a1200
 800d58c:	00a2c2aa 	.word	0x00a2c2aa
 800d590:	00c35000 	.word	0x00c35000
 800d594:	00f42400 	.word	0x00f42400
 800d598:	01458554 	.word	0x01458554
 800d59c:	01e84800 	.word	0x01e84800
 800d5a0:	0001e848 	.word	0x0001e848
 800d5a4:	0003d090 	.word	0x0003d090
 800d5a8:	000a2c2a 	.word	0x000a2c2a
 800d5ac:	000c3500 	.word	0x000c3500
 800d5b0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d04f      	beq.n	800d65c <UART_SetConfig+0x1b34>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d048      	beq.n	800d656 <UART_SetConfig+0x1b2e>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	d041      	beq.n	800d650 <UART_SetConfig+0x1b28>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d03a      	beq.n	800d64a <UART_SetConfig+0x1b22>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d8:	2b04      	cmp	r3, #4
 800d5da:	d033      	beq.n	800d644 <UART_SetConfig+0x1b1c>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e0:	2b05      	cmp	r3, #5
 800d5e2:	d02c      	beq.n	800d63e <UART_SetConfig+0x1b16>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e8:	2b06      	cmp	r3, #6
 800d5ea:	d025      	beq.n	800d638 <UART_SetConfig+0x1b10>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f0:	2b07      	cmp	r3, #7
 800d5f2:	d01e      	beq.n	800d632 <UART_SetConfig+0x1b0a>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	2b08      	cmp	r3, #8
 800d5fa:	d017      	beq.n	800d62c <UART_SetConfig+0x1b04>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d600:	2b09      	cmp	r3, #9
 800d602:	d010      	beq.n	800d626 <UART_SetConfig+0x1afe>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d608:	2b0a      	cmp	r3, #10
 800d60a:	d009      	beq.n	800d620 <UART_SetConfig+0x1af8>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d610:	2b0b      	cmp	r3, #11
 800d612:	d102      	bne.n	800d61a <UART_SetConfig+0x1af2>
 800d614:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d618:	e022      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d61a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d61e:	e01f      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d620:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d624:	e01c      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d62a:	e019      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d62c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d630:	e016      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d636:	e013      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d638:	f241 5354 	movw	r3, #5460	; 0x1554
 800d63c:	e010      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d63e:	f641 1398 	movw	r3, #6552	; 0x1998
 800d642:	e00d      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d648:	e00a      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d64a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800d64e:	e007      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d654:	e004      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d65a:	e001      	b.n	800d660 <UART_SetConfig+0x1b38>
 800d65c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	6852      	ldr	r2, [r2, #4]
 800d664:	0852      	lsrs	r2, r2, #1
 800d666:	441a      	add	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d670:	b29b      	uxth	r3, r3
 800d672:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d674:	e003      	b.n	800d67e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800d67c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d680:	2b0f      	cmp	r3, #15
 800d682:	d916      	bls.n	800d6b2 <UART_SetConfig+0x1b8a>
 800d684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d68a:	d212      	bcs.n	800d6b2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68e:	b29b      	uxth	r3, r3
 800d690:	f023 030f 	bic.w	r3, r3, #15
 800d694:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d698:	085b      	lsrs	r3, r3, #1
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	f003 0307 	and.w	r3, r3, #7
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6ae:	60da      	str	r2, [r3, #12]
 800d6b0:	e3a3      	b.n	800ddfa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6b8:	e39f      	b.n	800ddfa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800d6ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d6be:	2b40      	cmp	r3, #64	; 0x40
 800d6c0:	f200 8388 	bhi.w	800ddd4 <UART_SetConfig+0x22ac>
 800d6c4:	a201      	add	r2, pc, #4	; (adr r2, 800d6cc <UART_SetConfig+0x1ba4>)
 800d6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ca:	bf00      	nop
 800d6cc:	0800d7d1 	.word	0x0800d7d1
 800d6d0:	0800d887 	.word	0x0800d887
 800d6d4:	0800ddd5 	.word	0x0800ddd5
 800d6d8:	0800ddd5 	.word	0x0800ddd5
 800d6dc:	0800d93d 	.word	0x0800d93d
 800d6e0:	0800ddd5 	.word	0x0800ddd5
 800d6e4:	0800ddd5 	.word	0x0800ddd5
 800d6e8:	0800ddd5 	.word	0x0800ddd5
 800d6ec:	0800d9f7 	.word	0x0800d9f7
 800d6f0:	0800ddd5 	.word	0x0800ddd5
 800d6f4:	0800ddd5 	.word	0x0800ddd5
 800d6f8:	0800ddd5 	.word	0x0800ddd5
 800d6fc:	0800ddd5 	.word	0x0800ddd5
 800d700:	0800ddd5 	.word	0x0800ddd5
 800d704:	0800ddd5 	.word	0x0800ddd5
 800d708:	0800ddd5 	.word	0x0800ddd5
 800d70c:	0800dab1 	.word	0x0800dab1
 800d710:	0800ddd5 	.word	0x0800ddd5
 800d714:	0800ddd5 	.word	0x0800ddd5
 800d718:	0800ddd5 	.word	0x0800ddd5
 800d71c:	0800ddd5 	.word	0x0800ddd5
 800d720:	0800ddd5 	.word	0x0800ddd5
 800d724:	0800ddd5 	.word	0x0800ddd5
 800d728:	0800ddd5 	.word	0x0800ddd5
 800d72c:	0800ddd5 	.word	0x0800ddd5
 800d730:	0800ddd5 	.word	0x0800ddd5
 800d734:	0800ddd5 	.word	0x0800ddd5
 800d738:	0800ddd5 	.word	0x0800ddd5
 800d73c:	0800ddd5 	.word	0x0800ddd5
 800d740:	0800ddd5 	.word	0x0800ddd5
 800d744:	0800ddd5 	.word	0x0800ddd5
 800d748:	0800ddd5 	.word	0x0800ddd5
 800d74c:	0800dc21 	.word	0x0800dc21
 800d750:	0800ddd5 	.word	0x0800ddd5
 800d754:	0800ddd5 	.word	0x0800ddd5
 800d758:	0800ddd5 	.word	0x0800ddd5
 800d75c:	0800ddd5 	.word	0x0800ddd5
 800d760:	0800ddd5 	.word	0x0800ddd5
 800d764:	0800ddd5 	.word	0x0800ddd5
 800d768:	0800ddd5 	.word	0x0800ddd5
 800d76c:	0800ddd5 	.word	0x0800ddd5
 800d770:	0800ddd5 	.word	0x0800ddd5
 800d774:	0800ddd5 	.word	0x0800ddd5
 800d778:	0800ddd5 	.word	0x0800ddd5
 800d77c:	0800ddd5 	.word	0x0800ddd5
 800d780:	0800ddd5 	.word	0x0800ddd5
 800d784:	0800ddd5 	.word	0x0800ddd5
 800d788:	0800ddd5 	.word	0x0800ddd5
 800d78c:	0800ddd5 	.word	0x0800ddd5
 800d790:	0800ddd5 	.word	0x0800ddd5
 800d794:	0800ddd5 	.word	0x0800ddd5
 800d798:	0800ddd5 	.word	0x0800ddd5
 800d79c:	0800ddd5 	.word	0x0800ddd5
 800d7a0:	0800ddd5 	.word	0x0800ddd5
 800d7a4:	0800ddd5 	.word	0x0800ddd5
 800d7a8:	0800ddd5 	.word	0x0800ddd5
 800d7ac:	0800ddd5 	.word	0x0800ddd5
 800d7b0:	0800ddd5 	.word	0x0800ddd5
 800d7b4:	0800ddd5 	.word	0x0800ddd5
 800d7b8:	0800ddd5 	.word	0x0800ddd5
 800d7bc:	0800ddd5 	.word	0x0800ddd5
 800d7c0:	0800ddd5 	.word	0x0800ddd5
 800d7c4:	0800ddd5 	.word	0x0800ddd5
 800d7c8:	0800ddd5 	.word	0x0800ddd5
 800d7cc:	0800dd15 	.word	0x0800dd15
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7d0:	f7fb fb8c 	bl	8008eec <HAL_RCC_GetPCLK1Freq>
 800d7d4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d044      	beq.n	800d868 <UART_SetConfig+0x1d40>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d03e      	beq.n	800d864 <UART_SetConfig+0x1d3c>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	d038      	beq.n	800d860 <UART_SetConfig+0x1d38>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	2b03      	cmp	r3, #3
 800d7f4:	d032      	beq.n	800d85c <UART_SetConfig+0x1d34>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	2b04      	cmp	r3, #4
 800d7fc:	d02c      	beq.n	800d858 <UART_SetConfig+0x1d30>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d802:	2b05      	cmp	r3, #5
 800d804:	d026      	beq.n	800d854 <UART_SetConfig+0x1d2c>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80a:	2b06      	cmp	r3, #6
 800d80c:	d020      	beq.n	800d850 <UART_SetConfig+0x1d28>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d812:	2b07      	cmp	r3, #7
 800d814:	d01a      	beq.n	800d84c <UART_SetConfig+0x1d24>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81a:	2b08      	cmp	r3, #8
 800d81c:	d014      	beq.n	800d848 <UART_SetConfig+0x1d20>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d822:	2b09      	cmp	r3, #9
 800d824:	d00e      	beq.n	800d844 <UART_SetConfig+0x1d1c>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82a:	2b0a      	cmp	r3, #10
 800d82c:	d008      	beq.n	800d840 <UART_SetConfig+0x1d18>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d832:	2b0b      	cmp	r3, #11
 800d834:	d102      	bne.n	800d83c <UART_SetConfig+0x1d14>
 800d836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d83a:	e016      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d83c:	2301      	movs	r3, #1
 800d83e:	e014      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d840:	2380      	movs	r3, #128	; 0x80
 800d842:	e012      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d844:	2340      	movs	r3, #64	; 0x40
 800d846:	e010      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d848:	2320      	movs	r3, #32
 800d84a:	e00e      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d84c:	2310      	movs	r3, #16
 800d84e:	e00c      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d850:	230c      	movs	r3, #12
 800d852:	e00a      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d854:	230a      	movs	r3, #10
 800d856:	e008      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d858:	2308      	movs	r3, #8
 800d85a:	e006      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d85c:	2306      	movs	r3, #6
 800d85e:	e004      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d860:	2304      	movs	r3, #4
 800d862:	e002      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d864:	2302      	movs	r3, #2
 800d866:	e000      	b.n	800d86a <UART_SetConfig+0x1d42>
 800d868:	2301      	movs	r3, #1
 800d86a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d86c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	085b      	lsrs	r3, r3, #1
 800d876:	441a      	add	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d880:	b29b      	uxth	r3, r3
 800d882:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d884:	e2aa      	b.n	800dddc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d886:	f7fb fb47 	bl	8008f18 <HAL_RCC_GetPCLK2Freq>
 800d88a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d890:	2b00      	cmp	r3, #0
 800d892:	d044      	beq.n	800d91e <UART_SetConfig+0x1df6>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d03e      	beq.n	800d91a <UART_SetConfig+0x1df2>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d038      	beq.n	800d916 <UART_SetConfig+0x1dee>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a8:	2b03      	cmp	r3, #3
 800d8aa:	d032      	beq.n	800d912 <UART_SetConfig+0x1dea>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b0:	2b04      	cmp	r3, #4
 800d8b2:	d02c      	beq.n	800d90e <UART_SetConfig+0x1de6>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b8:	2b05      	cmp	r3, #5
 800d8ba:	d026      	beq.n	800d90a <UART_SetConfig+0x1de2>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	2b06      	cmp	r3, #6
 800d8c2:	d020      	beq.n	800d906 <UART_SetConfig+0x1dde>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	2b07      	cmp	r3, #7
 800d8ca:	d01a      	beq.n	800d902 <UART_SetConfig+0x1dda>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d0:	2b08      	cmp	r3, #8
 800d8d2:	d014      	beq.n	800d8fe <UART_SetConfig+0x1dd6>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d8:	2b09      	cmp	r3, #9
 800d8da:	d00e      	beq.n	800d8fa <UART_SetConfig+0x1dd2>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e0:	2b0a      	cmp	r3, #10
 800d8e2:	d008      	beq.n	800d8f6 <UART_SetConfig+0x1dce>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e8:	2b0b      	cmp	r3, #11
 800d8ea:	d102      	bne.n	800d8f2 <UART_SetConfig+0x1dca>
 800d8ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8f0:	e016      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e014      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d8f6:	2380      	movs	r3, #128	; 0x80
 800d8f8:	e012      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d8fa:	2340      	movs	r3, #64	; 0x40
 800d8fc:	e010      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d8fe:	2320      	movs	r3, #32
 800d900:	e00e      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d902:	2310      	movs	r3, #16
 800d904:	e00c      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d906:	230c      	movs	r3, #12
 800d908:	e00a      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d90a:	230a      	movs	r3, #10
 800d90c:	e008      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d90e:	2308      	movs	r3, #8
 800d910:	e006      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d912:	2306      	movs	r3, #6
 800d914:	e004      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d916:	2304      	movs	r3, #4
 800d918:	e002      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d91a:	2302      	movs	r3, #2
 800d91c:	e000      	b.n	800d920 <UART_SetConfig+0x1df8>
 800d91e:	2301      	movs	r3, #1
 800d920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d922:	fbb2 f2f3 	udiv	r2, r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	085b      	lsrs	r3, r3, #1
 800d92c:	441a      	add	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	fbb2 f3f3 	udiv	r3, r2, r3
 800d936:	b29b      	uxth	r3, r3
 800d938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d93a:	e24f      	b.n	800dddc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d93c:	f107 0318 	add.w	r3, r7, #24
 800d940:	4618      	mov	r0, r3
 800d942:	f7fc fc6b 	bl	800a21c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d946:	69fa      	ldr	r2, [r7, #28]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d044      	beq.n	800d9da <UART_SetConfig+0x1eb2>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d954:	2b01      	cmp	r3, #1
 800d956:	d03e      	beq.n	800d9d6 <UART_SetConfig+0x1eae>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d038      	beq.n	800d9d2 <UART_SetConfig+0x1eaa>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d964:	2b03      	cmp	r3, #3
 800d966:	d032      	beq.n	800d9ce <UART_SetConfig+0x1ea6>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	d02c      	beq.n	800d9ca <UART_SetConfig+0x1ea2>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d974:	2b05      	cmp	r3, #5
 800d976:	d026      	beq.n	800d9c6 <UART_SetConfig+0x1e9e>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97c:	2b06      	cmp	r3, #6
 800d97e:	d020      	beq.n	800d9c2 <UART_SetConfig+0x1e9a>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d984:	2b07      	cmp	r3, #7
 800d986:	d01a      	beq.n	800d9be <UART_SetConfig+0x1e96>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98c:	2b08      	cmp	r3, #8
 800d98e:	d014      	beq.n	800d9ba <UART_SetConfig+0x1e92>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d994:	2b09      	cmp	r3, #9
 800d996:	d00e      	beq.n	800d9b6 <UART_SetConfig+0x1e8e>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d99c:	2b0a      	cmp	r3, #10
 800d99e:	d008      	beq.n	800d9b2 <UART_SetConfig+0x1e8a>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a4:	2b0b      	cmp	r3, #11
 800d9a6:	d102      	bne.n	800d9ae <UART_SetConfig+0x1e86>
 800d9a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9ac:	e016      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e014      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9b2:	2380      	movs	r3, #128	; 0x80
 800d9b4:	e012      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9b6:	2340      	movs	r3, #64	; 0x40
 800d9b8:	e010      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9ba:	2320      	movs	r3, #32
 800d9bc:	e00e      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9be:	2310      	movs	r3, #16
 800d9c0:	e00c      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9c2:	230c      	movs	r3, #12
 800d9c4:	e00a      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9c6:	230a      	movs	r3, #10
 800d9c8:	e008      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9ca:	2308      	movs	r3, #8
 800d9cc:	e006      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9ce:	2306      	movs	r3, #6
 800d9d0:	e004      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9d2:	2304      	movs	r3, #4
 800d9d4:	e002      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	e000      	b.n	800d9dc <UART_SetConfig+0x1eb4>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	085b      	lsrs	r3, r3, #1
 800d9e6:	441a      	add	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d9f4:	e1f2      	b.n	800dddc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9f6:	f107 030c 	add.w	r3, r7, #12
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7fc fd5a 	bl	800a4b4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da00:	693a      	ldr	r2, [r7, #16]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da06:	2b00      	cmp	r3, #0
 800da08:	d044      	beq.n	800da94 <UART_SetConfig+0x1f6c>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d03e      	beq.n	800da90 <UART_SetConfig+0x1f68>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da16:	2b02      	cmp	r3, #2
 800da18:	d038      	beq.n	800da8c <UART_SetConfig+0x1f64>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	2b03      	cmp	r3, #3
 800da20:	d032      	beq.n	800da88 <UART_SetConfig+0x1f60>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	2b04      	cmp	r3, #4
 800da28:	d02c      	beq.n	800da84 <UART_SetConfig+0x1f5c>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2e:	2b05      	cmp	r3, #5
 800da30:	d026      	beq.n	800da80 <UART_SetConfig+0x1f58>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da36:	2b06      	cmp	r3, #6
 800da38:	d020      	beq.n	800da7c <UART_SetConfig+0x1f54>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3e:	2b07      	cmp	r3, #7
 800da40:	d01a      	beq.n	800da78 <UART_SetConfig+0x1f50>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da46:	2b08      	cmp	r3, #8
 800da48:	d014      	beq.n	800da74 <UART_SetConfig+0x1f4c>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4e:	2b09      	cmp	r3, #9
 800da50:	d00e      	beq.n	800da70 <UART_SetConfig+0x1f48>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da56:	2b0a      	cmp	r3, #10
 800da58:	d008      	beq.n	800da6c <UART_SetConfig+0x1f44>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5e:	2b0b      	cmp	r3, #11
 800da60:	d102      	bne.n	800da68 <UART_SetConfig+0x1f40>
 800da62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da66:	e016      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da68:	2301      	movs	r3, #1
 800da6a:	e014      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da6c:	2380      	movs	r3, #128	; 0x80
 800da6e:	e012      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da70:	2340      	movs	r3, #64	; 0x40
 800da72:	e010      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da74:	2320      	movs	r3, #32
 800da76:	e00e      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da78:	2310      	movs	r3, #16
 800da7a:	e00c      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da7c:	230c      	movs	r3, #12
 800da7e:	e00a      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da80:	230a      	movs	r3, #10
 800da82:	e008      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da84:	2308      	movs	r3, #8
 800da86:	e006      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da88:	2306      	movs	r3, #6
 800da8a:	e004      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da8c:	2304      	movs	r3, #4
 800da8e:	e002      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da90:	2302      	movs	r3, #2
 800da92:	e000      	b.n	800da96 <UART_SetConfig+0x1f6e>
 800da94:	2301      	movs	r3, #1
 800da96:	fbb2 f2f3 	udiv	r2, r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	085b      	lsrs	r3, r3, #1
 800daa0:	441a      	add	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800daaa:	b29b      	uxth	r3, r3
 800daac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800daae:	e195      	b.n	800dddc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dab0:	4b87      	ldr	r3, [pc, #540]	; (800dcd0 <UART_SetConfig+0x21a8>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f003 0320 	and.w	r3, r3, #32
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d05d      	beq.n	800db78 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dabc:	4b84      	ldr	r3, [pc, #528]	; (800dcd0 <UART_SetConfig+0x21a8>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	08db      	lsrs	r3, r3, #3
 800dac2:	f003 0303 	and.w	r3, r3, #3
 800dac6:	4a83      	ldr	r2, [pc, #524]	; (800dcd4 <UART_SetConfig+0x21ac>)
 800dac8:	40da      	lsrs	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d044      	beq.n	800db5c <UART_SetConfig+0x2034>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d03e      	beq.n	800db58 <UART_SetConfig+0x2030>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d038      	beq.n	800db54 <UART_SetConfig+0x202c>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d032      	beq.n	800db50 <UART_SetConfig+0x2028>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daee:	2b04      	cmp	r3, #4
 800daf0:	d02c      	beq.n	800db4c <UART_SetConfig+0x2024>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf6:	2b05      	cmp	r3, #5
 800daf8:	d026      	beq.n	800db48 <UART_SetConfig+0x2020>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafe:	2b06      	cmp	r3, #6
 800db00:	d020      	beq.n	800db44 <UART_SetConfig+0x201c>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db06:	2b07      	cmp	r3, #7
 800db08:	d01a      	beq.n	800db40 <UART_SetConfig+0x2018>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0e:	2b08      	cmp	r3, #8
 800db10:	d014      	beq.n	800db3c <UART_SetConfig+0x2014>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db16:	2b09      	cmp	r3, #9
 800db18:	d00e      	beq.n	800db38 <UART_SetConfig+0x2010>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1e:	2b0a      	cmp	r3, #10
 800db20:	d008      	beq.n	800db34 <UART_SetConfig+0x200c>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	2b0b      	cmp	r3, #11
 800db28:	d102      	bne.n	800db30 <UART_SetConfig+0x2008>
 800db2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db2e:	e016      	b.n	800db5e <UART_SetConfig+0x2036>
 800db30:	2301      	movs	r3, #1
 800db32:	e014      	b.n	800db5e <UART_SetConfig+0x2036>
 800db34:	2380      	movs	r3, #128	; 0x80
 800db36:	e012      	b.n	800db5e <UART_SetConfig+0x2036>
 800db38:	2340      	movs	r3, #64	; 0x40
 800db3a:	e010      	b.n	800db5e <UART_SetConfig+0x2036>
 800db3c:	2320      	movs	r3, #32
 800db3e:	e00e      	b.n	800db5e <UART_SetConfig+0x2036>
 800db40:	2310      	movs	r3, #16
 800db42:	e00c      	b.n	800db5e <UART_SetConfig+0x2036>
 800db44:	230c      	movs	r3, #12
 800db46:	e00a      	b.n	800db5e <UART_SetConfig+0x2036>
 800db48:	230a      	movs	r3, #10
 800db4a:	e008      	b.n	800db5e <UART_SetConfig+0x2036>
 800db4c:	2308      	movs	r3, #8
 800db4e:	e006      	b.n	800db5e <UART_SetConfig+0x2036>
 800db50:	2306      	movs	r3, #6
 800db52:	e004      	b.n	800db5e <UART_SetConfig+0x2036>
 800db54:	2304      	movs	r3, #4
 800db56:	e002      	b.n	800db5e <UART_SetConfig+0x2036>
 800db58:	2302      	movs	r3, #2
 800db5a:	e000      	b.n	800db5e <UART_SetConfig+0x2036>
 800db5c:	2301      	movs	r3, #1
 800db5e:	fbb2 f2f3 	udiv	r2, r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	085b      	lsrs	r3, r3, #1
 800db68:	441a      	add	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db72:	b29b      	uxth	r3, r3
 800db74:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800db76:	e131      	b.n	800dddc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d043      	beq.n	800dc08 <UART_SetConfig+0x20e0>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db84:	2b01      	cmp	r3, #1
 800db86:	d03d      	beq.n	800dc04 <UART_SetConfig+0x20dc>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d037      	beq.n	800dc00 <UART_SetConfig+0x20d8>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db94:	2b03      	cmp	r3, #3
 800db96:	d031      	beq.n	800dbfc <UART_SetConfig+0x20d4>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9c:	2b04      	cmp	r3, #4
 800db9e:	d02b      	beq.n	800dbf8 <UART_SetConfig+0x20d0>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba4:	2b05      	cmp	r3, #5
 800dba6:	d025      	beq.n	800dbf4 <UART_SetConfig+0x20cc>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	2b06      	cmp	r3, #6
 800dbae:	d01f      	beq.n	800dbf0 <UART_SetConfig+0x20c8>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb4:	2b07      	cmp	r3, #7
 800dbb6:	d019      	beq.n	800dbec <UART_SetConfig+0x20c4>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbc:	2b08      	cmp	r3, #8
 800dbbe:	d013      	beq.n	800dbe8 <UART_SetConfig+0x20c0>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc4:	2b09      	cmp	r3, #9
 800dbc6:	d00d      	beq.n	800dbe4 <UART_SetConfig+0x20bc>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbcc:	2b0a      	cmp	r3, #10
 800dbce:	d007      	beq.n	800dbe0 <UART_SetConfig+0x20b8>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd4:	2b0b      	cmp	r3, #11
 800dbd6:	d101      	bne.n	800dbdc <UART_SetConfig+0x20b4>
 800dbd8:	4b3f      	ldr	r3, [pc, #252]	; (800dcd8 <UART_SetConfig+0x21b0>)
 800dbda:	e016      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbdc:	4b3d      	ldr	r3, [pc, #244]	; (800dcd4 <UART_SetConfig+0x21ac>)
 800dbde:	e014      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbe0:	4b3e      	ldr	r3, [pc, #248]	; (800dcdc <UART_SetConfig+0x21b4>)
 800dbe2:	e012      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbe4:	4b3e      	ldr	r3, [pc, #248]	; (800dce0 <UART_SetConfig+0x21b8>)
 800dbe6:	e010      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbe8:	4b3e      	ldr	r3, [pc, #248]	; (800dce4 <UART_SetConfig+0x21bc>)
 800dbea:	e00e      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbec:	4b3e      	ldr	r3, [pc, #248]	; (800dce8 <UART_SetConfig+0x21c0>)
 800dbee:	e00c      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbf0:	4b3e      	ldr	r3, [pc, #248]	; (800dcec <UART_SetConfig+0x21c4>)
 800dbf2:	e00a      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbf4:	4b3e      	ldr	r3, [pc, #248]	; (800dcf0 <UART_SetConfig+0x21c8>)
 800dbf6:	e008      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbf8:	4b3e      	ldr	r3, [pc, #248]	; (800dcf4 <UART_SetConfig+0x21cc>)
 800dbfa:	e006      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dbfc:	4b3e      	ldr	r3, [pc, #248]	; (800dcf8 <UART_SetConfig+0x21d0>)
 800dbfe:	e004      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dc00:	4b3e      	ldr	r3, [pc, #248]	; (800dcfc <UART_SetConfig+0x21d4>)
 800dc02:	e002      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dc04:	4b3e      	ldr	r3, [pc, #248]	; (800dd00 <UART_SetConfig+0x21d8>)
 800dc06:	e000      	b.n	800dc0a <UART_SetConfig+0x20e2>
 800dc08:	4b32      	ldr	r3, [pc, #200]	; (800dcd4 <UART_SetConfig+0x21ac>)
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	6852      	ldr	r2, [r2, #4]
 800dc0e:	0852      	lsrs	r2, r2, #1
 800dc10:	441a      	add	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc1e:	e0dd      	b.n	800dddc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d046      	beq.n	800dcb6 <UART_SetConfig+0x218e>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d040      	beq.n	800dcb2 <UART_SetConfig+0x218a>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d03a      	beq.n	800dcae <UART_SetConfig+0x2186>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3c:	2b03      	cmp	r3, #3
 800dc3e:	d034      	beq.n	800dcaa <UART_SetConfig+0x2182>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	d02e      	beq.n	800dca6 <UART_SetConfig+0x217e>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4c:	2b05      	cmp	r3, #5
 800dc4e:	d028      	beq.n	800dca2 <UART_SetConfig+0x217a>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc54:	2b06      	cmp	r3, #6
 800dc56:	d022      	beq.n	800dc9e <UART_SetConfig+0x2176>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5c:	2b07      	cmp	r3, #7
 800dc5e:	d01c      	beq.n	800dc9a <UART_SetConfig+0x2172>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc64:	2b08      	cmp	r3, #8
 800dc66:	d016      	beq.n	800dc96 <UART_SetConfig+0x216e>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6c:	2b09      	cmp	r3, #9
 800dc6e:	d00f      	beq.n	800dc90 <UART_SetConfig+0x2168>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc74:	2b0a      	cmp	r3, #10
 800dc76:	d008      	beq.n	800dc8a <UART_SetConfig+0x2162>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7c:	2b0b      	cmp	r3, #11
 800dc7e:	d102      	bne.n	800dc86 <UART_SetConfig+0x215e>
 800dc80:	f643 5309 	movw	r3, #15625	; 0x3d09
 800dc84:	e018      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dc86:	4b18      	ldr	r3, [pc, #96]	; (800dce8 <UART_SetConfig+0x21c0>)
 800dc88:	e016      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dc8a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800dc8e:	e013      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dc90:	f24f 4324 	movw	r3, #62500	; 0xf424
 800dc94:	e010      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dc96:	4b1b      	ldr	r3, [pc, #108]	; (800dd04 <UART_SetConfig+0x21dc>)
 800dc98:	e00e      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dc9a:	4b0f      	ldr	r3, [pc, #60]	; (800dcd8 <UART_SetConfig+0x21b0>)
 800dc9c:	e00c      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dc9e:	4b1a      	ldr	r3, [pc, #104]	; (800dd08 <UART_SetConfig+0x21e0>)
 800dca0:	e00a      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dca2:	4b1a      	ldr	r3, [pc, #104]	; (800dd0c <UART_SetConfig+0x21e4>)
 800dca4:	e008      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dca6:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <UART_SetConfig+0x21b4>)
 800dca8:	e006      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dcaa:	4b19      	ldr	r3, [pc, #100]	; (800dd10 <UART_SetConfig+0x21e8>)
 800dcac:	e004      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dcae:	4b0c      	ldr	r3, [pc, #48]	; (800dce0 <UART_SetConfig+0x21b8>)
 800dcb0:	e002      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dcb2:	4b0c      	ldr	r3, [pc, #48]	; (800dce4 <UART_SetConfig+0x21bc>)
 800dcb4:	e000      	b.n	800dcb8 <UART_SetConfig+0x2190>
 800dcb6:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <UART_SetConfig+0x21c0>)
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	6852      	ldr	r2, [r2, #4]
 800dcbc:	0852      	lsrs	r2, r2, #1
 800dcbe:	441a      	add	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dccc:	e086      	b.n	800dddc <UART_SetConfig+0x22b4>
 800dcce:	bf00      	nop
 800dcd0:	58024400 	.word	0x58024400
 800dcd4:	03d09000 	.word	0x03d09000
 800dcd8:	0003d090 	.word	0x0003d090
 800dcdc:	0007a120 	.word	0x0007a120
 800dce0:	000f4240 	.word	0x000f4240
 800dce4:	001e8480 	.word	0x001e8480
 800dce8:	003d0900 	.word	0x003d0900
 800dcec:	00516155 	.word	0x00516155
 800dcf0:	0061a800 	.word	0x0061a800
 800dcf4:	007a1200 	.word	0x007a1200
 800dcf8:	00a2c2aa 	.word	0x00a2c2aa
 800dcfc:	00f42400 	.word	0x00f42400
 800dd00:	01e84800 	.word	0x01e84800
 800dd04:	0001e848 	.word	0x0001e848
 800dd08:	00051615 	.word	0x00051615
 800dd0c:	00061a80 	.word	0x00061a80
 800dd10:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d04e      	beq.n	800ddba <UART_SetConfig+0x2292>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d047      	beq.n	800ddb4 <UART_SetConfig+0x228c>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d040      	beq.n	800ddae <UART_SetConfig+0x2286>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	2b03      	cmp	r3, #3
 800dd32:	d039      	beq.n	800dda8 <UART_SetConfig+0x2280>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd38:	2b04      	cmp	r3, #4
 800dd3a:	d032      	beq.n	800dda2 <UART_SetConfig+0x227a>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	2b05      	cmp	r3, #5
 800dd42:	d02b      	beq.n	800dd9c <UART_SetConfig+0x2274>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	2b06      	cmp	r3, #6
 800dd4a:	d024      	beq.n	800dd96 <UART_SetConfig+0x226e>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd50:	2b07      	cmp	r3, #7
 800dd52:	d01d      	beq.n	800dd90 <UART_SetConfig+0x2268>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd58:	2b08      	cmp	r3, #8
 800dd5a:	d016      	beq.n	800dd8a <UART_SetConfig+0x2262>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd60:	2b09      	cmp	r3, #9
 800dd62:	d00f      	beq.n	800dd84 <UART_SetConfig+0x225c>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	2b0a      	cmp	r3, #10
 800dd6a:	d008      	beq.n	800dd7e <UART_SetConfig+0x2256>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd70:	2b0b      	cmp	r3, #11
 800dd72:	d101      	bne.n	800dd78 <UART_SetConfig+0x2250>
 800dd74:	2380      	movs	r3, #128	; 0x80
 800dd76:	e022      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dd78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd7c:	e01f      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dd7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd82:	e01c      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dd84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd88:	e019      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dd8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd8e:	e016      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dd90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd94:	e013      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dd96:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800dd9a:	e010      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dd9c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800dda0:	e00d      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dda2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dda6:	e00a      	b.n	800ddbe <UART_SetConfig+0x2296>
 800dda8:	f241 5355 	movw	r3, #5461	; 0x1555
 800ddac:	e007      	b.n	800ddbe <UART_SetConfig+0x2296>
 800ddae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ddb2:	e004      	b.n	800ddbe <UART_SetConfig+0x2296>
 800ddb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ddb8:	e001      	b.n	800ddbe <UART_SetConfig+0x2296>
 800ddba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	6852      	ldr	r2, [r2, #4]
 800ddc2:	0852      	lsrs	r2, r2, #1
 800ddc4:	441a      	add	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ddd2:	e003      	b.n	800dddc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ddda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddde:	2b0f      	cmp	r3, #15
 800dde0:	d908      	bls.n	800ddf4 <UART_SetConfig+0x22cc>
 800dde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dde8:	d204      	bcs.n	800ddf4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddf0:	60da      	str	r2, [r3, #12]
 800ddf2:	e002      	b.n	800ddfa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2201      	movs	r2, #1
 800de06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2200      	movs	r2, #0
 800de0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800de16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3740      	adds	r7, #64	; 0x40
 800de1e:	46bd      	mov	sp, r7
 800de20:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800de24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00a      	beq.n	800de4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	430a      	orrs	r2, r1
 800de4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de52:	f003 0302 	and.w	r3, r3, #2
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00a      	beq.n	800de70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	430a      	orrs	r2, r1
 800de6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de74:	f003 0304 	and.w	r3, r3, #4
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00a      	beq.n	800de92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	430a      	orrs	r2, r1
 800de90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de96:	f003 0308 	and.w	r3, r3, #8
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00a      	beq.n	800deb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	430a      	orrs	r2, r1
 800deb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deb8:	f003 0310 	and.w	r3, r3, #16
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00a      	beq.n	800ded6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	430a      	orrs	r2, r1
 800ded4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deda:	f003 0320 	and.w	r3, r3, #32
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d00a      	beq.n	800def8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	430a      	orrs	r2, r1
 800def6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df00:	2b00      	cmp	r3, #0
 800df02:	d01a      	beq.n	800df3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	430a      	orrs	r2, r1
 800df18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df22:	d10a      	bne.n	800df3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	430a      	orrs	r2, r1
 800df38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00a      	beq.n	800df5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	430a      	orrs	r2, r1
 800df5a:	605a      	str	r2, [r3, #4]
  }
}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800df78:	f7f5 fd60 	bl	8003a3c <HAL_GetTick>
 800df7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 0308 	and.w	r3, r3, #8
 800df88:	2b08      	cmp	r3, #8
 800df8a:	d10e      	bne.n	800dfaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 f82c 	bl	800dff8 <UART_WaitOnFlagUntilTimeout>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d001      	beq.n	800dfaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	e022      	b.n	800dff0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f003 0304 	and.w	r3, r3, #4
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	d10e      	bne.n	800dfd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f816 	bl	800dff8 <UART_WaitOnFlagUntilTimeout>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d001      	beq.n	800dfd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfd2:	2303      	movs	r3, #3
 800dfd4:	e00c      	b.n	800dff0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2220      	movs	r2, #32
 800dfda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2220      	movs	r2, #32
 800dfe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	603b      	str	r3, [r7, #0]
 800e004:	4613      	mov	r3, r2
 800e006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e008:	e062      	b.n	800e0d0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e010:	d05e      	beq.n	800e0d0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e012:	f7f5 fd13 	bl	8003a3c <HAL_GetTick>
 800e016:	4602      	mov	r2, r0
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	69ba      	ldr	r2, [r7, #24]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d302      	bcc.n	800e028 <UART_WaitOnFlagUntilTimeout+0x30>
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d11d      	bne.n	800e064 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e036:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689a      	ldr	r2, [r3, #8]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f022 0201 	bic.w	r2, r2, #1
 800e046:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2220      	movs	r2, #32
 800e04c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2220      	movs	r2, #32
 800e054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e060:	2303      	movs	r3, #3
 800e062:	e045      	b.n	800e0f0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f003 0304 	and.w	r3, r3, #4
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d02e      	beq.n	800e0d0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	69db      	ldr	r3, [r3, #28]
 800e078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e07c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e080:	d126      	bne.n	800e0d0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e08a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e09a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	689a      	ldr	r2, [r3, #8]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f022 0201 	bic.w	r2, r2, #1
 800e0aa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2220      	movs	r2, #32
 800e0b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2220      	movs	r2, #32
 800e0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2220      	movs	r2, #32
 800e0c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e00f      	b.n	800e0f0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	69da      	ldr	r2, [r3, #28]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	4013      	ands	r3, r2
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	bf0c      	ite	eq
 800e0e0:	2301      	moveq	r3, #1
 800e0e2:	2300      	movne	r3, #0
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d08d      	beq.n	800e00a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e10e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	689a      	ldr	r2, [r3, #8]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e11e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2220      	movs	r2, #32
 800e124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e14a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	6899      	ldr	r1, [r3, #8]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	4b08      	ldr	r3, [pc, #32]	; (800e178 <UART_EndRxTransfer+0x44>)
 800e158:	400b      	ands	r3, r1
 800e15a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2220      	movs	r2, #32
 800e160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800e16a:	bf00      	nop
 800e16c:	370c      	adds	r7, #12
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	effffffe 	.word	0xeffffffe

0800e17c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e188:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	69db      	ldr	r3, [r3, #28]
 800e18e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e192:	d01f      	beq.n	800e1d4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e1aa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	689a      	ldr	r2, [r3, #8]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f022 0201 	bic.w	r2, r2, #1
 800e1ba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	689a      	ldr	r2, [r3, #8]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1ca:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2220      	movs	r2, #32
 800e1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f7f2 fb15 	bl	8000804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1da:	bf00      	nop
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b084      	sub	sp, #16
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7fd fc83 	bl	800bafc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b086      	sub	sp, #24
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e20a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e212:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e21a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e226:	2b80      	cmp	r3, #128	; 0x80
 800e228:	d109      	bne.n	800e23e <UART_DMAError+0x40>
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	2b21      	cmp	r3, #33	; 0x21
 800e22e:	d106      	bne.n	800e23e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	2200      	movs	r2, #0
 800e234:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e238:	6978      	ldr	r0, [r7, #20]
 800e23a:	f7ff ff5d 	bl	800e0f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e248:	2b40      	cmp	r3, #64	; 0x40
 800e24a:	d109      	bne.n	800e260 <UART_DMAError+0x62>
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2b22      	cmp	r3, #34	; 0x22
 800e250:	d106      	bne.n	800e260 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	2200      	movs	r2, #0
 800e256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e25a:	6978      	ldr	r0, [r7, #20]
 800e25c:	f7ff ff6a 	bl	800e134 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e266:	f043 0210 	orr.w	r2, r3, #16
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e270:	6978      	ldr	r0, [r7, #20]
 800e272:	f7fd fc4d 	bl	800bb10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e276:	bf00      	nop
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b084      	sub	sp, #16
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f7fd fc37 	bl	800bb10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2a2:	bf00      	nop
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e2aa:	b480      	push	{r7}
 800e2ac:	b083      	sub	sp, #12
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2b8:	2b21      	cmp	r3, #33	; 0x21
 800e2ba:	d12a      	bne.n	800e312 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d110      	bne.n	800e2ea <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e2d6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2e6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e2e8:	e013      	b.n	800e312 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2ee:	781a      	ldrb	r2, [r3, #0]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2fa:	1c5a      	adds	r2, r3, #1
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e306:	b29b      	uxth	r3, r3
 800e308:	3b01      	subs	r3, #1
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e312:	bf00      	nop
 800e314:	370c      	adds	r7, #12
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr

0800e31e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e31e:	b480      	push	{r7}
 800e320:	b085      	sub	sp, #20
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e32c:	2b21      	cmp	r3, #33	; 0x21
 800e32e:	d12f      	bne.n	800e390 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e336:	b29b      	uxth	r3, r3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d110      	bne.n	800e35e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e34a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e35a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e35c:	e018      	b.n	800e390 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e362:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	461a      	mov	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e372:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e378:	1c9a      	adds	r2, r3, #2
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e384:	b29b      	uxth	r3, r3
 800e386:	3b01      	subs	r3, #1
 800e388:	b29a      	uxth	r2, r3
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e390:	bf00      	nop
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3aa:	2b21      	cmp	r3, #33	; 0x21
 800e3ac:	d13d      	bne.n	800e42a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3b4:	81fb      	strh	r3, [r7, #14]
 800e3b6:	e035      	b.n	800e424 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d111      	bne.n	800e3e8 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	689a      	ldr	r2, [r3, #8]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e3d2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3e2:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e3e4:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e3e6:	e020      	b.n	800e42a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	69db      	ldr	r3, [r3, #28]
 800e3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d013      	beq.n	800e41e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3fa:	781a      	ldrb	r2, [r3, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e412:	b29b      	uxth	r3, r3
 800e414:	3b01      	subs	r3, #1
 800e416:	b29a      	uxth	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e41e:	89fb      	ldrh	r3, [r7, #14]
 800e420:	3b01      	subs	r3, #1
 800e422:	81fb      	strh	r3, [r7, #14]
 800e424:	89fb      	ldrh	r3, [r7, #14]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1c6      	bne.n	800e3b8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800e42a:	bf00      	nop
 800e42c:	3714      	adds	r7, #20
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e436:	b480      	push	{r7}
 800e438:	b085      	sub	sp, #20
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e444:	2b21      	cmp	r3, #33	; 0x21
 800e446:	d142      	bne.n	800e4ce <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e44e:	81fb      	strh	r3, [r7, #14]
 800e450:	e03a      	b.n	800e4c8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e458:	b29b      	uxth	r3, r3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d111      	bne.n	800e482 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	689a      	ldr	r2, [r3, #8]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e46c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e47c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e47e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e480:	e025      	b.n	800e4ce <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	69db      	ldr	r3, [r3, #28]
 800e488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d018      	beq.n	800e4c2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e494:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	461a      	mov	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4a4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4aa:	1c9a      	adds	r2, r3, #2
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e4c2:	89fb      	ldrh	r3, [r7, #14]
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	81fb      	strh	r3, [r7, #14]
 800e4c8:	89fb      	ldrh	r3, [r7, #14]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1c1      	bne.n	800e452 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800e4ce:	bf00      	nop
 800e4d0:	3714      	adds	r7, #20
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4f0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2220      	movs	r2, #32
 800e4f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7f2 f93d 	bl	8000780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e506:	bf00      	nop
 800e508:	3708      	adds	r7, #8
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b084      	sub	sp, #16
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e51c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e524:	2b22      	cmp	r3, #34	; 0x22
 800e526:	d13b      	bne.n	800e5a0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e530:	89bb      	ldrh	r3, [r7, #12]
 800e532:	b2d9      	uxtb	r1, r3
 800e534:	89fb      	ldrh	r3, [r7, #14]
 800e536:	b2da      	uxtb	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53c:	400a      	ands	r2, r1
 800e53e:	b2d2      	uxtb	r2, r2
 800e540:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e546:	1c5a      	adds	r2, r3, #1
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e552:	b29b      	uxth	r3, r3
 800e554:	3b01      	subs	r3, #1
 800e556:	b29a      	uxth	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e564:	b29b      	uxth	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d122      	bne.n	800e5b0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e578:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	689a      	ldr	r2, [r3, #8]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f022 0201 	bic.w	r2, r2, #1
 800e588:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2220      	movs	r2, #32
 800e58e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7f2 f933 	bl	8000804 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e59e:	e007      	b.n	800e5b0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	699a      	ldr	r2, [r3, #24]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f042 0208 	orr.w	r2, r2, #8
 800e5ae:	619a      	str	r2, [r3, #24]
}
 800e5b0:	bf00      	nop
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5ce:	2b22      	cmp	r3, #34	; 0x22
 800e5d0:	d13b      	bne.n	800e64a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5de:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800e5e0:	89ba      	ldrh	r2, [r7, #12]
 800e5e2:	89fb      	ldrh	r3, [r7, #14]
 800e5e4:	4013      	ands	r3, r2
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5f0:	1c9a      	adds	r2, r3, #2
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	3b01      	subs	r3, #1
 800e600:	b29a      	uxth	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e60e:	b29b      	uxth	r3, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	d122      	bne.n	800e65a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e622:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	689a      	ldr	r2, [r3, #8]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f022 0201 	bic.w	r2, r2, #1
 800e632:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2220      	movs	r2, #32
 800e638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7f2 f8de 	bl	8000804 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e648:	e007      	b.n	800e65a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	699a      	ldr	r2, [r3, #24]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f042 0208 	orr.w	r2, r2, #8
 800e658:	619a      	str	r2, [r3, #24]
}
 800e65a:	bf00      	nop
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
	...

0800e664 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e672:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e67a:	2b22      	cmp	r3, #34	; 0x22
 800e67c:	d166      	bne.n	800e74c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e684:	81fb      	strh	r3, [r7, #14]
 800e686:	e03d      	b.n	800e704 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e690:	893b      	ldrh	r3, [r7, #8]
 800e692:	b2d9      	uxtb	r1, r3
 800e694:	89bb      	ldrh	r3, [r7, #12]
 800e696:	b2da      	uxtb	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e69c:	400a      	ands	r2, r1
 800e69e:	b2d2      	uxtb	r2, r2
 800e6a0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6a6:	1c5a      	adds	r2, r3, #1
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d119      	bne.n	800e6fe <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e6d8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	6899      	ldr	r1, [r3, #8]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	4b1f      	ldr	r3, [pc, #124]	; (800e764 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800e6e6:	400b      	ands	r3, r1
 800e6e8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2220      	movs	r2, #32
 800e6ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7f2 f883 	bl	8000804 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e6fe:	89fb      	ldrh	r3, [r7, #14]
 800e700:	3b01      	subs	r3, #1
 800e702:	81fb      	strh	r3, [r7, #14]
 800e704:	89fb      	ldrh	r3, [r7, #14]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d1be      	bne.n	800e688 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e710:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e712:	897b      	ldrh	r3, [r7, #10]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d021      	beq.n	800e75c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e71e:	897a      	ldrh	r2, [r7, #10]
 800e720:	429a      	cmp	r2, r3
 800e722:	d21b      	bcs.n	800e75c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	689a      	ldr	r2, [r3, #8]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e732:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a0c      	ldr	r2, [pc, #48]	; (800e768 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800e738:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f042 0220 	orr.w	r2, r2, #32
 800e748:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e74a:	e007      	b.n	800e75c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	699a      	ldr	r2, [r3, #24]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f042 0208 	orr.w	r2, r2, #8
 800e75a:	619a      	str	r2, [r3, #24]
}
 800e75c:	bf00      	nop
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	effffffe 	.word	0xeffffffe
 800e768:	0800e50f 	.word	0x0800e50f

0800e76c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e77a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e782:	2b22      	cmp	r3, #34	; 0x22
 800e784:	d166      	bne.n	800e854 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e78c:	82fb      	strh	r3, [r7, #22]
 800e78e:	e03d      	b.n	800e80c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e796:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e79c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800e79e:	8a3a      	ldrh	r2, [r7, #16]
 800e7a0:	8abb      	ldrh	r3, [r7, #20]
 800e7a2:	4013      	ands	r3, r2
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7ae:	1c9a      	adds	r2, r3, #2
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d119      	bne.n	800e806 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e7e0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	6899      	ldr	r1, [r3, #8]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	4b1f      	ldr	r3, [pc, #124]	; (800e86c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800e7ee:	400b      	ands	r3, r1
 800e7f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2220      	movs	r2, #32
 800e7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7f1 ffff 	bl	8000804 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e806:	8afb      	ldrh	r3, [r7, #22]
 800e808:	3b01      	subs	r3, #1
 800e80a:	82fb      	strh	r3, [r7, #22]
 800e80c:	8afb      	ldrh	r3, [r7, #22]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1be      	bne.n	800e790 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e818:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e81a:	8a7b      	ldrh	r3, [r7, #18]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d021      	beq.n	800e864 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e826:	8a7a      	ldrh	r2, [r7, #18]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d21b      	bcs.n	800e864 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	689a      	ldr	r2, [r3, #8]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e83a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a0c      	ldr	r2, [pc, #48]	; (800e870 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800e840:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f042 0220 	orr.w	r2, r2, #32
 800e850:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e852:	e007      	b.n	800e864 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	699a      	ldr	r2, [r3, #24]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f042 0208 	orr.w	r2, r2, #8
 800e862:	619a      	str	r2, [r3, #24]
}
 800e864:	bf00      	nop
 800e866:	3718      	adds	r7, #24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	effffffe 	.word	0xeffffffe
 800e870:	0800e5b9 	.word	0x0800e5b9

0800e874 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e890:	bf00      	nop
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b083      	sub	sp, #12
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e8a4:	bf00      	nop
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d101      	bne.n	800e8c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	e027      	b.n	800e916 <HAL_UARTEx_DisableFifoMode+0x66>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2224      	movs	r2, #36	; 0x24
 800e8d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f022 0201 	bic.w	r2, r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e8f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2220      	movs	r2, #32
 800e908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3714      	adds	r7, #20
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr

0800e922 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b084      	sub	sp, #16
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e932:	2b01      	cmp	r3, #1
 800e934:	d101      	bne.n	800e93a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e936:	2302      	movs	r3, #2
 800e938:	e02d      	b.n	800e996 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2201      	movs	r2, #1
 800e93e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2224      	movs	r2, #36	; 0x24
 800e946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f022 0201 	bic.w	r2, r2, #1
 800e960:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	683a      	ldr	r2, [r7, #0]
 800e972:	430a      	orrs	r2, r1
 800e974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f850 	bl	800ea1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2220      	movs	r2, #32
 800e988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e994:	2300      	movs	r3, #0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b084      	sub	sp, #16
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d101      	bne.n	800e9b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e9b2:	2302      	movs	r3, #2
 800e9b4:	e02d      	b.n	800ea12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2224      	movs	r2, #36	; 0x24
 800e9c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f022 0201 	bic.w	r2, r2, #1
 800e9dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	689b      	ldr	r3, [r3, #8]
 800e9e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	683a      	ldr	r2, [r7, #0]
 800e9ee:	430a      	orrs	r2, r1
 800e9f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 f812 	bl	800ea1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2220      	movs	r2, #32
 800ea04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ea10:	2300      	movs	r3, #0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
	...

0800ea1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b089      	sub	sp, #36	; 0x24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ea24:	4a2f      	ldr	r2, [pc, #188]	; (800eae4 <UARTEx_SetNbDataToProcess+0xc8>)
 800ea26:	f107 0314 	add.w	r3, r7, #20
 800ea2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea2e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ea32:	4a2d      	ldr	r2, [pc, #180]	; (800eae8 <UARTEx_SetNbDataToProcess+0xcc>)
 800ea34:	f107 030c 	add.w	r3, r7, #12
 800ea38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea3c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d108      	bne.n	800ea5a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea58:	e03d      	b.n	800ead6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea5a:	2308      	movs	r3, #8
 800ea5c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea5e:	2308      	movs	r3, #8
 800ea60:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	0e5b      	lsrs	r3, r3, #25
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	f003 0307 	and.w	r3, r3, #7
 800ea70:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	0f5b      	lsrs	r3, r3, #29
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	f003 0307 	and.w	r3, r3, #7
 800ea80:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ea82:	7fbb      	ldrb	r3, [r7, #30]
 800ea84:	7f3a      	ldrb	r2, [r7, #28]
 800ea86:	f107 0120 	add.w	r1, r7, #32
 800ea8a:	440a      	add	r2, r1
 800ea8c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ea90:	fb02 f303 	mul.w	r3, r2, r3
 800ea94:	7f3a      	ldrb	r2, [r7, #28]
 800ea96:	f107 0120 	add.w	r1, r7, #32
 800ea9a:	440a      	add	r2, r1
 800ea9c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800eaa0:	fb93 f3f2 	sdiv	r3, r3, r2
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800eaac:	7ffb      	ldrb	r3, [r7, #31]
 800eaae:	7f7a      	ldrb	r2, [r7, #29]
 800eab0:	f107 0120 	add.w	r1, r7, #32
 800eab4:	440a      	add	r2, r1
 800eab6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800eaba:	fb02 f303 	mul.w	r3, r2, r3
 800eabe:	7f7a      	ldrb	r2, [r7, #29]
 800eac0:	f107 0120 	add.w	r1, r7, #32
 800eac4:	440a      	add	r2, r1
 800eac6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800eaca:	fb93 f3f2 	sdiv	r3, r3, r2
 800eace:	b29a      	uxth	r2, r3
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ead6:	bf00      	nop
 800ead8:	3724      	adds	r7, #36	; 0x24
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	080104f4 	.word	0x080104f4
 800eae8:	080104fc 	.word	0x080104fc

0800eaec <__errno>:
 800eaec:	4b01      	ldr	r3, [pc, #4]	; (800eaf4 <__errno+0x8>)
 800eaee:	6818      	ldr	r0, [r3, #0]
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	240000e0 	.word	0x240000e0

0800eaf8 <__libc_init_array>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	4e0d      	ldr	r6, [pc, #52]	; (800eb30 <__libc_init_array+0x38>)
 800eafc:	4c0d      	ldr	r4, [pc, #52]	; (800eb34 <__libc_init_array+0x3c>)
 800eafe:	1ba4      	subs	r4, r4, r6
 800eb00:	10a4      	asrs	r4, r4, #2
 800eb02:	2500      	movs	r5, #0
 800eb04:	42a5      	cmp	r5, r4
 800eb06:	d109      	bne.n	800eb1c <__libc_init_array+0x24>
 800eb08:	4e0b      	ldr	r6, [pc, #44]	; (800eb38 <__libc_init_array+0x40>)
 800eb0a:	4c0c      	ldr	r4, [pc, #48]	; (800eb3c <__libc_init_array+0x44>)
 800eb0c:	f001 fc46 	bl	801039c <_init>
 800eb10:	1ba4      	subs	r4, r4, r6
 800eb12:	10a4      	asrs	r4, r4, #2
 800eb14:	2500      	movs	r5, #0
 800eb16:	42a5      	cmp	r5, r4
 800eb18:	d105      	bne.n	800eb26 <__libc_init_array+0x2e>
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb20:	4798      	blx	r3
 800eb22:	3501      	adds	r5, #1
 800eb24:	e7ee      	b.n	800eb04 <__libc_init_array+0xc>
 800eb26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb2a:	4798      	blx	r3
 800eb2c:	3501      	adds	r5, #1
 800eb2e:	e7f2      	b.n	800eb16 <__libc_init_array+0x1e>
 800eb30:	08010778 	.word	0x08010778
 800eb34:	08010778 	.word	0x08010778
 800eb38:	08010778 	.word	0x08010778
 800eb3c:	0801077c 	.word	0x0801077c

0800eb40 <memset>:
 800eb40:	4402      	add	r2, r0
 800eb42:	4603      	mov	r3, r0
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d100      	bne.n	800eb4a <memset+0xa>
 800eb48:	4770      	bx	lr
 800eb4a:	f803 1b01 	strb.w	r1, [r3], #1
 800eb4e:	e7f9      	b.n	800eb44 <memset+0x4>

0800eb50 <siprintf>:
 800eb50:	b40e      	push	{r1, r2, r3}
 800eb52:	b500      	push	{lr}
 800eb54:	b09c      	sub	sp, #112	; 0x70
 800eb56:	ab1d      	add	r3, sp, #116	; 0x74
 800eb58:	9002      	str	r0, [sp, #8]
 800eb5a:	9006      	str	r0, [sp, #24]
 800eb5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb60:	4809      	ldr	r0, [pc, #36]	; (800eb88 <siprintf+0x38>)
 800eb62:	9107      	str	r1, [sp, #28]
 800eb64:	9104      	str	r1, [sp, #16]
 800eb66:	4909      	ldr	r1, [pc, #36]	; (800eb8c <siprintf+0x3c>)
 800eb68:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb6c:	9105      	str	r1, [sp, #20]
 800eb6e:	6800      	ldr	r0, [r0, #0]
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	a902      	add	r1, sp, #8
 800eb74:	f000 f866 	bl	800ec44 <_svfiprintf_r>
 800eb78:	9b02      	ldr	r3, [sp, #8]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	701a      	strb	r2, [r3, #0]
 800eb7e:	b01c      	add	sp, #112	; 0x70
 800eb80:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb84:	b003      	add	sp, #12
 800eb86:	4770      	bx	lr
 800eb88:	240000e0 	.word	0x240000e0
 800eb8c:	ffff0208 	.word	0xffff0208

0800eb90 <__ssputs_r>:
 800eb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb94:	688e      	ldr	r6, [r1, #8]
 800eb96:	429e      	cmp	r6, r3
 800eb98:	4682      	mov	sl, r0
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	4690      	mov	r8, r2
 800eb9e:	4699      	mov	r9, r3
 800eba0:	d837      	bhi.n	800ec12 <__ssputs_r+0x82>
 800eba2:	898a      	ldrh	r2, [r1, #12]
 800eba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eba8:	d031      	beq.n	800ec0e <__ssputs_r+0x7e>
 800ebaa:	6825      	ldr	r5, [r4, #0]
 800ebac:	6909      	ldr	r1, [r1, #16]
 800ebae:	1a6f      	subs	r7, r5, r1
 800ebb0:	6965      	ldr	r5, [r4, #20]
 800ebb2:	2302      	movs	r3, #2
 800ebb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ebb8:	fb95 f5f3 	sdiv	r5, r5, r3
 800ebbc:	f109 0301 	add.w	r3, r9, #1
 800ebc0:	443b      	add	r3, r7
 800ebc2:	429d      	cmp	r5, r3
 800ebc4:	bf38      	it	cc
 800ebc6:	461d      	movcc	r5, r3
 800ebc8:	0553      	lsls	r3, r2, #21
 800ebca:	d530      	bpl.n	800ec2e <__ssputs_r+0x9e>
 800ebcc:	4629      	mov	r1, r5
 800ebce:	f000 fb2b 	bl	800f228 <_malloc_r>
 800ebd2:	4606      	mov	r6, r0
 800ebd4:	b950      	cbnz	r0, 800ebec <__ssputs_r+0x5c>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	f8ca 3000 	str.w	r3, [sl]
 800ebdc:	89a3      	ldrh	r3, [r4, #12]
 800ebde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe2:	81a3      	strh	r3, [r4, #12]
 800ebe4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebec:	463a      	mov	r2, r7
 800ebee:	6921      	ldr	r1, [r4, #16]
 800ebf0:	f000 faa8 	bl	800f144 <memcpy>
 800ebf4:	89a3      	ldrh	r3, [r4, #12]
 800ebf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebfe:	81a3      	strh	r3, [r4, #12]
 800ec00:	6126      	str	r6, [r4, #16]
 800ec02:	6165      	str	r5, [r4, #20]
 800ec04:	443e      	add	r6, r7
 800ec06:	1bed      	subs	r5, r5, r7
 800ec08:	6026      	str	r6, [r4, #0]
 800ec0a:	60a5      	str	r5, [r4, #8]
 800ec0c:	464e      	mov	r6, r9
 800ec0e:	454e      	cmp	r6, r9
 800ec10:	d900      	bls.n	800ec14 <__ssputs_r+0x84>
 800ec12:	464e      	mov	r6, r9
 800ec14:	4632      	mov	r2, r6
 800ec16:	4641      	mov	r1, r8
 800ec18:	6820      	ldr	r0, [r4, #0]
 800ec1a:	f000 fa9e 	bl	800f15a <memmove>
 800ec1e:	68a3      	ldr	r3, [r4, #8]
 800ec20:	1b9b      	subs	r3, r3, r6
 800ec22:	60a3      	str	r3, [r4, #8]
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	441e      	add	r6, r3
 800ec28:	6026      	str	r6, [r4, #0]
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	e7dc      	b.n	800ebe8 <__ssputs_r+0x58>
 800ec2e:	462a      	mov	r2, r5
 800ec30:	f000 fb54 	bl	800f2dc <_realloc_r>
 800ec34:	4606      	mov	r6, r0
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d1e2      	bne.n	800ec00 <__ssputs_r+0x70>
 800ec3a:	6921      	ldr	r1, [r4, #16]
 800ec3c:	4650      	mov	r0, sl
 800ec3e:	f000 faa5 	bl	800f18c <_free_r>
 800ec42:	e7c8      	b.n	800ebd6 <__ssputs_r+0x46>

0800ec44 <_svfiprintf_r>:
 800ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec48:	461d      	mov	r5, r3
 800ec4a:	898b      	ldrh	r3, [r1, #12]
 800ec4c:	061f      	lsls	r7, r3, #24
 800ec4e:	b09d      	sub	sp, #116	; 0x74
 800ec50:	4680      	mov	r8, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	4616      	mov	r6, r2
 800ec56:	d50f      	bpl.n	800ec78 <_svfiprintf_r+0x34>
 800ec58:	690b      	ldr	r3, [r1, #16]
 800ec5a:	b96b      	cbnz	r3, 800ec78 <_svfiprintf_r+0x34>
 800ec5c:	2140      	movs	r1, #64	; 0x40
 800ec5e:	f000 fae3 	bl	800f228 <_malloc_r>
 800ec62:	6020      	str	r0, [r4, #0]
 800ec64:	6120      	str	r0, [r4, #16]
 800ec66:	b928      	cbnz	r0, 800ec74 <_svfiprintf_r+0x30>
 800ec68:	230c      	movs	r3, #12
 800ec6a:	f8c8 3000 	str.w	r3, [r8]
 800ec6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec72:	e0c8      	b.n	800ee06 <_svfiprintf_r+0x1c2>
 800ec74:	2340      	movs	r3, #64	; 0x40
 800ec76:	6163      	str	r3, [r4, #20]
 800ec78:	2300      	movs	r3, #0
 800ec7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec7c:	2320      	movs	r3, #32
 800ec7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec82:	2330      	movs	r3, #48	; 0x30
 800ec84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec88:	9503      	str	r5, [sp, #12]
 800ec8a:	f04f 0b01 	mov.w	fp, #1
 800ec8e:	4637      	mov	r7, r6
 800ec90:	463d      	mov	r5, r7
 800ec92:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ec96:	b10b      	cbz	r3, 800ec9c <_svfiprintf_r+0x58>
 800ec98:	2b25      	cmp	r3, #37	; 0x25
 800ec9a:	d13e      	bne.n	800ed1a <_svfiprintf_r+0xd6>
 800ec9c:	ebb7 0a06 	subs.w	sl, r7, r6
 800eca0:	d00b      	beq.n	800ecba <_svfiprintf_r+0x76>
 800eca2:	4653      	mov	r3, sl
 800eca4:	4632      	mov	r2, r6
 800eca6:	4621      	mov	r1, r4
 800eca8:	4640      	mov	r0, r8
 800ecaa:	f7ff ff71 	bl	800eb90 <__ssputs_r>
 800ecae:	3001      	adds	r0, #1
 800ecb0:	f000 80a4 	beq.w	800edfc <_svfiprintf_r+0x1b8>
 800ecb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecb6:	4453      	add	r3, sl
 800ecb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecba:	783b      	ldrb	r3, [r7, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f000 809d 	beq.w	800edfc <_svfiprintf_r+0x1b8>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eccc:	9304      	str	r3, [sp, #16]
 800ecce:	9307      	str	r3, [sp, #28]
 800ecd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecd4:	931a      	str	r3, [sp, #104]	; 0x68
 800ecd6:	462f      	mov	r7, r5
 800ecd8:	2205      	movs	r2, #5
 800ecda:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ecde:	4850      	ldr	r0, [pc, #320]	; (800ee20 <_svfiprintf_r+0x1dc>)
 800ece0:	f7f1 fafe 	bl	80002e0 <memchr>
 800ece4:	9b04      	ldr	r3, [sp, #16]
 800ece6:	b9d0      	cbnz	r0, 800ed1e <_svfiprintf_r+0xda>
 800ece8:	06d9      	lsls	r1, r3, #27
 800ecea:	bf44      	itt	mi
 800ecec:	2220      	movmi	r2, #32
 800ecee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ecf2:	071a      	lsls	r2, r3, #28
 800ecf4:	bf44      	itt	mi
 800ecf6:	222b      	movmi	r2, #43	; 0x2b
 800ecf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ecfc:	782a      	ldrb	r2, [r5, #0]
 800ecfe:	2a2a      	cmp	r2, #42	; 0x2a
 800ed00:	d015      	beq.n	800ed2e <_svfiprintf_r+0xea>
 800ed02:	9a07      	ldr	r2, [sp, #28]
 800ed04:	462f      	mov	r7, r5
 800ed06:	2000      	movs	r0, #0
 800ed08:	250a      	movs	r5, #10
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed10:	3b30      	subs	r3, #48	; 0x30
 800ed12:	2b09      	cmp	r3, #9
 800ed14:	d94d      	bls.n	800edb2 <_svfiprintf_r+0x16e>
 800ed16:	b1b8      	cbz	r0, 800ed48 <_svfiprintf_r+0x104>
 800ed18:	e00f      	b.n	800ed3a <_svfiprintf_r+0xf6>
 800ed1a:	462f      	mov	r7, r5
 800ed1c:	e7b8      	b.n	800ec90 <_svfiprintf_r+0x4c>
 800ed1e:	4a40      	ldr	r2, [pc, #256]	; (800ee20 <_svfiprintf_r+0x1dc>)
 800ed20:	1a80      	subs	r0, r0, r2
 800ed22:	fa0b f000 	lsl.w	r0, fp, r0
 800ed26:	4318      	orrs	r0, r3
 800ed28:	9004      	str	r0, [sp, #16]
 800ed2a:	463d      	mov	r5, r7
 800ed2c:	e7d3      	b.n	800ecd6 <_svfiprintf_r+0x92>
 800ed2e:	9a03      	ldr	r2, [sp, #12]
 800ed30:	1d11      	adds	r1, r2, #4
 800ed32:	6812      	ldr	r2, [r2, #0]
 800ed34:	9103      	str	r1, [sp, #12]
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	db01      	blt.n	800ed3e <_svfiprintf_r+0xfa>
 800ed3a:	9207      	str	r2, [sp, #28]
 800ed3c:	e004      	b.n	800ed48 <_svfiprintf_r+0x104>
 800ed3e:	4252      	negs	r2, r2
 800ed40:	f043 0302 	orr.w	r3, r3, #2
 800ed44:	9207      	str	r2, [sp, #28]
 800ed46:	9304      	str	r3, [sp, #16]
 800ed48:	783b      	ldrb	r3, [r7, #0]
 800ed4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ed4c:	d10c      	bne.n	800ed68 <_svfiprintf_r+0x124>
 800ed4e:	787b      	ldrb	r3, [r7, #1]
 800ed50:	2b2a      	cmp	r3, #42	; 0x2a
 800ed52:	d133      	bne.n	800edbc <_svfiprintf_r+0x178>
 800ed54:	9b03      	ldr	r3, [sp, #12]
 800ed56:	1d1a      	adds	r2, r3, #4
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	9203      	str	r2, [sp, #12]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	bfb8      	it	lt
 800ed60:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed64:	3702      	adds	r7, #2
 800ed66:	9305      	str	r3, [sp, #20]
 800ed68:	4d2e      	ldr	r5, [pc, #184]	; (800ee24 <_svfiprintf_r+0x1e0>)
 800ed6a:	7839      	ldrb	r1, [r7, #0]
 800ed6c:	2203      	movs	r2, #3
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f7f1 fab6 	bl	80002e0 <memchr>
 800ed74:	b138      	cbz	r0, 800ed86 <_svfiprintf_r+0x142>
 800ed76:	2340      	movs	r3, #64	; 0x40
 800ed78:	1b40      	subs	r0, r0, r5
 800ed7a:	fa03 f000 	lsl.w	r0, r3, r0
 800ed7e:	9b04      	ldr	r3, [sp, #16]
 800ed80:	4303      	orrs	r3, r0
 800ed82:	3701      	adds	r7, #1
 800ed84:	9304      	str	r3, [sp, #16]
 800ed86:	7839      	ldrb	r1, [r7, #0]
 800ed88:	4827      	ldr	r0, [pc, #156]	; (800ee28 <_svfiprintf_r+0x1e4>)
 800ed8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed8e:	2206      	movs	r2, #6
 800ed90:	1c7e      	adds	r6, r7, #1
 800ed92:	f7f1 faa5 	bl	80002e0 <memchr>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d038      	beq.n	800ee0c <_svfiprintf_r+0x1c8>
 800ed9a:	4b24      	ldr	r3, [pc, #144]	; (800ee2c <_svfiprintf_r+0x1e8>)
 800ed9c:	bb13      	cbnz	r3, 800ede4 <_svfiprintf_r+0x1a0>
 800ed9e:	9b03      	ldr	r3, [sp, #12]
 800eda0:	3307      	adds	r3, #7
 800eda2:	f023 0307 	bic.w	r3, r3, #7
 800eda6:	3308      	adds	r3, #8
 800eda8:	9303      	str	r3, [sp, #12]
 800edaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edac:	444b      	add	r3, r9
 800edae:	9309      	str	r3, [sp, #36]	; 0x24
 800edb0:	e76d      	b.n	800ec8e <_svfiprintf_r+0x4a>
 800edb2:	fb05 3202 	mla	r2, r5, r2, r3
 800edb6:	2001      	movs	r0, #1
 800edb8:	460f      	mov	r7, r1
 800edba:	e7a6      	b.n	800ed0a <_svfiprintf_r+0xc6>
 800edbc:	2300      	movs	r3, #0
 800edbe:	3701      	adds	r7, #1
 800edc0:	9305      	str	r3, [sp, #20]
 800edc2:	4619      	mov	r1, r3
 800edc4:	250a      	movs	r5, #10
 800edc6:	4638      	mov	r0, r7
 800edc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edcc:	3a30      	subs	r2, #48	; 0x30
 800edce:	2a09      	cmp	r2, #9
 800edd0:	d903      	bls.n	800edda <_svfiprintf_r+0x196>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0c8      	beq.n	800ed68 <_svfiprintf_r+0x124>
 800edd6:	9105      	str	r1, [sp, #20]
 800edd8:	e7c6      	b.n	800ed68 <_svfiprintf_r+0x124>
 800edda:	fb05 2101 	mla	r1, r5, r1, r2
 800edde:	2301      	movs	r3, #1
 800ede0:	4607      	mov	r7, r0
 800ede2:	e7f0      	b.n	800edc6 <_svfiprintf_r+0x182>
 800ede4:	ab03      	add	r3, sp, #12
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	4622      	mov	r2, r4
 800edea:	4b11      	ldr	r3, [pc, #68]	; (800ee30 <_svfiprintf_r+0x1ec>)
 800edec:	a904      	add	r1, sp, #16
 800edee:	4640      	mov	r0, r8
 800edf0:	f3af 8000 	nop.w
 800edf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800edf8:	4681      	mov	r9, r0
 800edfa:	d1d6      	bne.n	800edaa <_svfiprintf_r+0x166>
 800edfc:	89a3      	ldrh	r3, [r4, #12]
 800edfe:	065b      	lsls	r3, r3, #25
 800ee00:	f53f af35 	bmi.w	800ec6e <_svfiprintf_r+0x2a>
 800ee04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee06:	b01d      	add	sp, #116	; 0x74
 800ee08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0c:	ab03      	add	r3, sp, #12
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	4622      	mov	r2, r4
 800ee12:	4b07      	ldr	r3, [pc, #28]	; (800ee30 <_svfiprintf_r+0x1ec>)
 800ee14:	a904      	add	r1, sp, #16
 800ee16:	4640      	mov	r0, r8
 800ee18:	f000 f882 	bl	800ef20 <_printf_i>
 800ee1c:	e7ea      	b.n	800edf4 <_svfiprintf_r+0x1b0>
 800ee1e:	bf00      	nop
 800ee20:	0801051c 	.word	0x0801051c
 800ee24:	08010522 	.word	0x08010522
 800ee28:	08010526 	.word	0x08010526
 800ee2c:	00000000 	.word	0x00000000
 800ee30:	0800eb91 	.word	0x0800eb91

0800ee34 <_printf_common>:
 800ee34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee38:	4691      	mov	r9, r2
 800ee3a:	461f      	mov	r7, r3
 800ee3c:	688a      	ldr	r2, [r1, #8]
 800ee3e:	690b      	ldr	r3, [r1, #16]
 800ee40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee44:	4293      	cmp	r3, r2
 800ee46:	bfb8      	it	lt
 800ee48:	4613      	movlt	r3, r2
 800ee4a:	f8c9 3000 	str.w	r3, [r9]
 800ee4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee52:	4606      	mov	r6, r0
 800ee54:	460c      	mov	r4, r1
 800ee56:	b112      	cbz	r2, 800ee5e <_printf_common+0x2a>
 800ee58:	3301      	adds	r3, #1
 800ee5a:	f8c9 3000 	str.w	r3, [r9]
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	0699      	lsls	r1, r3, #26
 800ee62:	bf42      	ittt	mi
 800ee64:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ee68:	3302      	addmi	r3, #2
 800ee6a:	f8c9 3000 	strmi.w	r3, [r9]
 800ee6e:	6825      	ldr	r5, [r4, #0]
 800ee70:	f015 0506 	ands.w	r5, r5, #6
 800ee74:	d107      	bne.n	800ee86 <_printf_common+0x52>
 800ee76:	f104 0a19 	add.w	sl, r4, #25
 800ee7a:	68e3      	ldr	r3, [r4, #12]
 800ee7c:	f8d9 2000 	ldr.w	r2, [r9]
 800ee80:	1a9b      	subs	r3, r3, r2
 800ee82:	42ab      	cmp	r3, r5
 800ee84:	dc28      	bgt.n	800eed8 <_printf_common+0xa4>
 800ee86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ee8a:	6822      	ldr	r2, [r4, #0]
 800ee8c:	3300      	adds	r3, #0
 800ee8e:	bf18      	it	ne
 800ee90:	2301      	movne	r3, #1
 800ee92:	0692      	lsls	r2, r2, #26
 800ee94:	d42d      	bmi.n	800eef2 <_printf_common+0xbe>
 800ee96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee9a:	4639      	mov	r1, r7
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	47c0      	blx	r8
 800eea0:	3001      	adds	r0, #1
 800eea2:	d020      	beq.n	800eee6 <_printf_common+0xb2>
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	68e5      	ldr	r5, [r4, #12]
 800eea8:	f8d9 2000 	ldr.w	r2, [r9]
 800eeac:	f003 0306 	and.w	r3, r3, #6
 800eeb0:	2b04      	cmp	r3, #4
 800eeb2:	bf08      	it	eq
 800eeb4:	1aad      	subeq	r5, r5, r2
 800eeb6:	68a3      	ldr	r3, [r4, #8]
 800eeb8:	6922      	ldr	r2, [r4, #16]
 800eeba:	bf0c      	ite	eq
 800eebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eec0:	2500      	movne	r5, #0
 800eec2:	4293      	cmp	r3, r2
 800eec4:	bfc4      	itt	gt
 800eec6:	1a9b      	subgt	r3, r3, r2
 800eec8:	18ed      	addgt	r5, r5, r3
 800eeca:	f04f 0900 	mov.w	r9, #0
 800eece:	341a      	adds	r4, #26
 800eed0:	454d      	cmp	r5, r9
 800eed2:	d11a      	bne.n	800ef0a <_printf_common+0xd6>
 800eed4:	2000      	movs	r0, #0
 800eed6:	e008      	b.n	800eeea <_printf_common+0xb6>
 800eed8:	2301      	movs	r3, #1
 800eeda:	4652      	mov	r2, sl
 800eedc:	4639      	mov	r1, r7
 800eede:	4630      	mov	r0, r6
 800eee0:	47c0      	blx	r8
 800eee2:	3001      	adds	r0, #1
 800eee4:	d103      	bne.n	800eeee <_printf_common+0xba>
 800eee6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeee:	3501      	adds	r5, #1
 800eef0:	e7c3      	b.n	800ee7a <_printf_common+0x46>
 800eef2:	18e1      	adds	r1, r4, r3
 800eef4:	1c5a      	adds	r2, r3, #1
 800eef6:	2030      	movs	r0, #48	; 0x30
 800eef8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eefc:	4422      	add	r2, r4
 800eefe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef06:	3302      	adds	r3, #2
 800ef08:	e7c5      	b.n	800ee96 <_printf_common+0x62>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	4622      	mov	r2, r4
 800ef0e:	4639      	mov	r1, r7
 800ef10:	4630      	mov	r0, r6
 800ef12:	47c0      	blx	r8
 800ef14:	3001      	adds	r0, #1
 800ef16:	d0e6      	beq.n	800eee6 <_printf_common+0xb2>
 800ef18:	f109 0901 	add.w	r9, r9, #1
 800ef1c:	e7d8      	b.n	800eed0 <_printf_common+0x9c>
	...

0800ef20 <_printf_i>:
 800ef20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ef28:	460c      	mov	r4, r1
 800ef2a:	7e09      	ldrb	r1, [r1, #24]
 800ef2c:	b085      	sub	sp, #20
 800ef2e:	296e      	cmp	r1, #110	; 0x6e
 800ef30:	4617      	mov	r7, r2
 800ef32:	4606      	mov	r6, r0
 800ef34:	4698      	mov	r8, r3
 800ef36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef38:	f000 80b3 	beq.w	800f0a2 <_printf_i+0x182>
 800ef3c:	d822      	bhi.n	800ef84 <_printf_i+0x64>
 800ef3e:	2963      	cmp	r1, #99	; 0x63
 800ef40:	d036      	beq.n	800efb0 <_printf_i+0x90>
 800ef42:	d80a      	bhi.n	800ef5a <_printf_i+0x3a>
 800ef44:	2900      	cmp	r1, #0
 800ef46:	f000 80b9 	beq.w	800f0bc <_printf_i+0x19c>
 800ef4a:	2958      	cmp	r1, #88	; 0x58
 800ef4c:	f000 8083 	beq.w	800f056 <_printf_i+0x136>
 800ef50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ef58:	e032      	b.n	800efc0 <_printf_i+0xa0>
 800ef5a:	2964      	cmp	r1, #100	; 0x64
 800ef5c:	d001      	beq.n	800ef62 <_printf_i+0x42>
 800ef5e:	2969      	cmp	r1, #105	; 0x69
 800ef60:	d1f6      	bne.n	800ef50 <_printf_i+0x30>
 800ef62:	6820      	ldr	r0, [r4, #0]
 800ef64:	6813      	ldr	r3, [r2, #0]
 800ef66:	0605      	lsls	r5, r0, #24
 800ef68:	f103 0104 	add.w	r1, r3, #4
 800ef6c:	d52a      	bpl.n	800efc4 <_printf_i+0xa4>
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	6011      	str	r1, [r2, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	da03      	bge.n	800ef7e <_printf_i+0x5e>
 800ef76:	222d      	movs	r2, #45	; 0x2d
 800ef78:	425b      	negs	r3, r3
 800ef7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ef7e:	486f      	ldr	r0, [pc, #444]	; (800f13c <_printf_i+0x21c>)
 800ef80:	220a      	movs	r2, #10
 800ef82:	e039      	b.n	800eff8 <_printf_i+0xd8>
 800ef84:	2973      	cmp	r1, #115	; 0x73
 800ef86:	f000 809d 	beq.w	800f0c4 <_printf_i+0x1a4>
 800ef8a:	d808      	bhi.n	800ef9e <_printf_i+0x7e>
 800ef8c:	296f      	cmp	r1, #111	; 0x6f
 800ef8e:	d020      	beq.n	800efd2 <_printf_i+0xb2>
 800ef90:	2970      	cmp	r1, #112	; 0x70
 800ef92:	d1dd      	bne.n	800ef50 <_printf_i+0x30>
 800ef94:	6823      	ldr	r3, [r4, #0]
 800ef96:	f043 0320 	orr.w	r3, r3, #32
 800ef9a:	6023      	str	r3, [r4, #0]
 800ef9c:	e003      	b.n	800efa6 <_printf_i+0x86>
 800ef9e:	2975      	cmp	r1, #117	; 0x75
 800efa0:	d017      	beq.n	800efd2 <_printf_i+0xb2>
 800efa2:	2978      	cmp	r1, #120	; 0x78
 800efa4:	d1d4      	bne.n	800ef50 <_printf_i+0x30>
 800efa6:	2378      	movs	r3, #120	; 0x78
 800efa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800efac:	4864      	ldr	r0, [pc, #400]	; (800f140 <_printf_i+0x220>)
 800efae:	e055      	b.n	800f05c <_printf_i+0x13c>
 800efb0:	6813      	ldr	r3, [r2, #0]
 800efb2:	1d19      	adds	r1, r3, #4
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6011      	str	r1, [r2, #0]
 800efb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efc0:	2301      	movs	r3, #1
 800efc2:	e08c      	b.n	800f0de <_printf_i+0x1be>
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	6011      	str	r1, [r2, #0]
 800efc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800efcc:	bf18      	it	ne
 800efce:	b21b      	sxthne	r3, r3
 800efd0:	e7cf      	b.n	800ef72 <_printf_i+0x52>
 800efd2:	6813      	ldr	r3, [r2, #0]
 800efd4:	6825      	ldr	r5, [r4, #0]
 800efd6:	1d18      	adds	r0, r3, #4
 800efd8:	6010      	str	r0, [r2, #0]
 800efda:	0628      	lsls	r0, r5, #24
 800efdc:	d501      	bpl.n	800efe2 <_printf_i+0xc2>
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	e002      	b.n	800efe8 <_printf_i+0xc8>
 800efe2:	0668      	lsls	r0, r5, #25
 800efe4:	d5fb      	bpl.n	800efde <_printf_i+0xbe>
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	4854      	ldr	r0, [pc, #336]	; (800f13c <_printf_i+0x21c>)
 800efea:	296f      	cmp	r1, #111	; 0x6f
 800efec:	bf14      	ite	ne
 800efee:	220a      	movne	r2, #10
 800eff0:	2208      	moveq	r2, #8
 800eff2:	2100      	movs	r1, #0
 800eff4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eff8:	6865      	ldr	r5, [r4, #4]
 800effa:	60a5      	str	r5, [r4, #8]
 800effc:	2d00      	cmp	r5, #0
 800effe:	f2c0 8095 	blt.w	800f12c <_printf_i+0x20c>
 800f002:	6821      	ldr	r1, [r4, #0]
 800f004:	f021 0104 	bic.w	r1, r1, #4
 800f008:	6021      	str	r1, [r4, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d13d      	bne.n	800f08a <_printf_i+0x16a>
 800f00e:	2d00      	cmp	r5, #0
 800f010:	f040 808e 	bne.w	800f130 <_printf_i+0x210>
 800f014:	4665      	mov	r5, ip
 800f016:	2a08      	cmp	r2, #8
 800f018:	d10b      	bne.n	800f032 <_printf_i+0x112>
 800f01a:	6823      	ldr	r3, [r4, #0]
 800f01c:	07db      	lsls	r3, r3, #31
 800f01e:	d508      	bpl.n	800f032 <_printf_i+0x112>
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	6862      	ldr	r2, [r4, #4]
 800f024:	429a      	cmp	r2, r3
 800f026:	bfde      	ittt	le
 800f028:	2330      	movle	r3, #48	; 0x30
 800f02a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f02e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f032:	ebac 0305 	sub.w	r3, ip, r5
 800f036:	6123      	str	r3, [r4, #16]
 800f038:	f8cd 8000 	str.w	r8, [sp]
 800f03c:	463b      	mov	r3, r7
 800f03e:	aa03      	add	r2, sp, #12
 800f040:	4621      	mov	r1, r4
 800f042:	4630      	mov	r0, r6
 800f044:	f7ff fef6 	bl	800ee34 <_printf_common>
 800f048:	3001      	adds	r0, #1
 800f04a:	d14d      	bne.n	800f0e8 <_printf_i+0x1c8>
 800f04c:	f04f 30ff 	mov.w	r0, #4294967295
 800f050:	b005      	add	sp, #20
 800f052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f056:	4839      	ldr	r0, [pc, #228]	; (800f13c <_printf_i+0x21c>)
 800f058:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f05c:	6813      	ldr	r3, [r2, #0]
 800f05e:	6821      	ldr	r1, [r4, #0]
 800f060:	1d1d      	adds	r5, r3, #4
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	6015      	str	r5, [r2, #0]
 800f066:	060a      	lsls	r2, r1, #24
 800f068:	d50b      	bpl.n	800f082 <_printf_i+0x162>
 800f06a:	07ca      	lsls	r2, r1, #31
 800f06c:	bf44      	itt	mi
 800f06e:	f041 0120 	orrmi.w	r1, r1, #32
 800f072:	6021      	strmi	r1, [r4, #0]
 800f074:	b91b      	cbnz	r3, 800f07e <_printf_i+0x15e>
 800f076:	6822      	ldr	r2, [r4, #0]
 800f078:	f022 0220 	bic.w	r2, r2, #32
 800f07c:	6022      	str	r2, [r4, #0]
 800f07e:	2210      	movs	r2, #16
 800f080:	e7b7      	b.n	800eff2 <_printf_i+0xd2>
 800f082:	064d      	lsls	r5, r1, #25
 800f084:	bf48      	it	mi
 800f086:	b29b      	uxthmi	r3, r3
 800f088:	e7ef      	b.n	800f06a <_printf_i+0x14a>
 800f08a:	4665      	mov	r5, ip
 800f08c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f090:	fb02 3311 	mls	r3, r2, r1, r3
 800f094:	5cc3      	ldrb	r3, [r0, r3]
 800f096:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f09a:	460b      	mov	r3, r1
 800f09c:	2900      	cmp	r1, #0
 800f09e:	d1f5      	bne.n	800f08c <_printf_i+0x16c>
 800f0a0:	e7b9      	b.n	800f016 <_printf_i+0xf6>
 800f0a2:	6813      	ldr	r3, [r2, #0]
 800f0a4:	6825      	ldr	r5, [r4, #0]
 800f0a6:	6961      	ldr	r1, [r4, #20]
 800f0a8:	1d18      	adds	r0, r3, #4
 800f0aa:	6010      	str	r0, [r2, #0]
 800f0ac:	0628      	lsls	r0, r5, #24
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	d501      	bpl.n	800f0b6 <_printf_i+0x196>
 800f0b2:	6019      	str	r1, [r3, #0]
 800f0b4:	e002      	b.n	800f0bc <_printf_i+0x19c>
 800f0b6:	066a      	lsls	r2, r5, #25
 800f0b8:	d5fb      	bpl.n	800f0b2 <_printf_i+0x192>
 800f0ba:	8019      	strh	r1, [r3, #0]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	6123      	str	r3, [r4, #16]
 800f0c0:	4665      	mov	r5, ip
 800f0c2:	e7b9      	b.n	800f038 <_printf_i+0x118>
 800f0c4:	6813      	ldr	r3, [r2, #0]
 800f0c6:	1d19      	adds	r1, r3, #4
 800f0c8:	6011      	str	r1, [r2, #0]
 800f0ca:	681d      	ldr	r5, [r3, #0]
 800f0cc:	6862      	ldr	r2, [r4, #4]
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	f7f1 f905 	bl	80002e0 <memchr>
 800f0d6:	b108      	cbz	r0, 800f0dc <_printf_i+0x1bc>
 800f0d8:	1b40      	subs	r0, r0, r5
 800f0da:	6060      	str	r0, [r4, #4]
 800f0dc:	6863      	ldr	r3, [r4, #4]
 800f0de:	6123      	str	r3, [r4, #16]
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0e6:	e7a7      	b.n	800f038 <_printf_i+0x118>
 800f0e8:	6923      	ldr	r3, [r4, #16]
 800f0ea:	462a      	mov	r2, r5
 800f0ec:	4639      	mov	r1, r7
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	47c0      	blx	r8
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	d0aa      	beq.n	800f04c <_printf_i+0x12c>
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	079b      	lsls	r3, r3, #30
 800f0fa:	d413      	bmi.n	800f124 <_printf_i+0x204>
 800f0fc:	68e0      	ldr	r0, [r4, #12]
 800f0fe:	9b03      	ldr	r3, [sp, #12]
 800f100:	4298      	cmp	r0, r3
 800f102:	bfb8      	it	lt
 800f104:	4618      	movlt	r0, r3
 800f106:	e7a3      	b.n	800f050 <_printf_i+0x130>
 800f108:	2301      	movs	r3, #1
 800f10a:	464a      	mov	r2, r9
 800f10c:	4639      	mov	r1, r7
 800f10e:	4630      	mov	r0, r6
 800f110:	47c0      	blx	r8
 800f112:	3001      	adds	r0, #1
 800f114:	d09a      	beq.n	800f04c <_printf_i+0x12c>
 800f116:	3501      	adds	r5, #1
 800f118:	68e3      	ldr	r3, [r4, #12]
 800f11a:	9a03      	ldr	r2, [sp, #12]
 800f11c:	1a9b      	subs	r3, r3, r2
 800f11e:	42ab      	cmp	r3, r5
 800f120:	dcf2      	bgt.n	800f108 <_printf_i+0x1e8>
 800f122:	e7eb      	b.n	800f0fc <_printf_i+0x1dc>
 800f124:	2500      	movs	r5, #0
 800f126:	f104 0919 	add.w	r9, r4, #25
 800f12a:	e7f5      	b.n	800f118 <_printf_i+0x1f8>
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1ac      	bne.n	800f08a <_printf_i+0x16a>
 800f130:	7803      	ldrb	r3, [r0, #0]
 800f132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f136:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f13a:	e76c      	b.n	800f016 <_printf_i+0xf6>
 800f13c:	0801052d 	.word	0x0801052d
 800f140:	0801053e 	.word	0x0801053e

0800f144 <memcpy>:
 800f144:	b510      	push	{r4, lr}
 800f146:	1e43      	subs	r3, r0, #1
 800f148:	440a      	add	r2, r1
 800f14a:	4291      	cmp	r1, r2
 800f14c:	d100      	bne.n	800f150 <memcpy+0xc>
 800f14e:	bd10      	pop	{r4, pc}
 800f150:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f154:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f158:	e7f7      	b.n	800f14a <memcpy+0x6>

0800f15a <memmove>:
 800f15a:	4288      	cmp	r0, r1
 800f15c:	b510      	push	{r4, lr}
 800f15e:	eb01 0302 	add.w	r3, r1, r2
 800f162:	d807      	bhi.n	800f174 <memmove+0x1a>
 800f164:	1e42      	subs	r2, r0, #1
 800f166:	4299      	cmp	r1, r3
 800f168:	d00a      	beq.n	800f180 <memmove+0x26>
 800f16a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f16e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f172:	e7f8      	b.n	800f166 <memmove+0xc>
 800f174:	4283      	cmp	r3, r0
 800f176:	d9f5      	bls.n	800f164 <memmove+0xa>
 800f178:	1881      	adds	r1, r0, r2
 800f17a:	1ad2      	subs	r2, r2, r3
 800f17c:	42d3      	cmn	r3, r2
 800f17e:	d100      	bne.n	800f182 <memmove+0x28>
 800f180:	bd10      	pop	{r4, pc}
 800f182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f186:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f18a:	e7f7      	b.n	800f17c <memmove+0x22>

0800f18c <_free_r>:
 800f18c:	b538      	push	{r3, r4, r5, lr}
 800f18e:	4605      	mov	r5, r0
 800f190:	2900      	cmp	r1, #0
 800f192:	d045      	beq.n	800f220 <_free_r+0x94>
 800f194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f198:	1f0c      	subs	r4, r1, #4
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	bfb8      	it	lt
 800f19e:	18e4      	addlt	r4, r4, r3
 800f1a0:	f000 f8d2 	bl	800f348 <__malloc_lock>
 800f1a4:	4a1f      	ldr	r2, [pc, #124]	; (800f224 <_free_r+0x98>)
 800f1a6:	6813      	ldr	r3, [r2, #0]
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	b933      	cbnz	r3, 800f1ba <_free_r+0x2e>
 800f1ac:	6063      	str	r3, [r4, #4]
 800f1ae:	6014      	str	r4, [r2, #0]
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1b6:	f000 b8c8 	b.w	800f34a <__malloc_unlock>
 800f1ba:	42a3      	cmp	r3, r4
 800f1bc:	d90c      	bls.n	800f1d8 <_free_r+0x4c>
 800f1be:	6821      	ldr	r1, [r4, #0]
 800f1c0:	1862      	adds	r2, r4, r1
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	bf04      	itt	eq
 800f1c6:	681a      	ldreq	r2, [r3, #0]
 800f1c8:	685b      	ldreq	r3, [r3, #4]
 800f1ca:	6063      	str	r3, [r4, #4]
 800f1cc:	bf04      	itt	eq
 800f1ce:	1852      	addeq	r2, r2, r1
 800f1d0:	6022      	streq	r2, [r4, #0]
 800f1d2:	6004      	str	r4, [r0, #0]
 800f1d4:	e7ec      	b.n	800f1b0 <_free_r+0x24>
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	685a      	ldr	r2, [r3, #4]
 800f1da:	b10a      	cbz	r2, 800f1e0 <_free_r+0x54>
 800f1dc:	42a2      	cmp	r2, r4
 800f1de:	d9fa      	bls.n	800f1d6 <_free_r+0x4a>
 800f1e0:	6819      	ldr	r1, [r3, #0]
 800f1e2:	1858      	adds	r0, r3, r1
 800f1e4:	42a0      	cmp	r0, r4
 800f1e6:	d10b      	bne.n	800f200 <_free_r+0x74>
 800f1e8:	6820      	ldr	r0, [r4, #0]
 800f1ea:	4401      	add	r1, r0
 800f1ec:	1858      	adds	r0, r3, r1
 800f1ee:	4282      	cmp	r2, r0
 800f1f0:	6019      	str	r1, [r3, #0]
 800f1f2:	d1dd      	bne.n	800f1b0 <_free_r+0x24>
 800f1f4:	6810      	ldr	r0, [r2, #0]
 800f1f6:	6852      	ldr	r2, [r2, #4]
 800f1f8:	605a      	str	r2, [r3, #4]
 800f1fa:	4401      	add	r1, r0
 800f1fc:	6019      	str	r1, [r3, #0]
 800f1fe:	e7d7      	b.n	800f1b0 <_free_r+0x24>
 800f200:	d902      	bls.n	800f208 <_free_r+0x7c>
 800f202:	230c      	movs	r3, #12
 800f204:	602b      	str	r3, [r5, #0]
 800f206:	e7d3      	b.n	800f1b0 <_free_r+0x24>
 800f208:	6820      	ldr	r0, [r4, #0]
 800f20a:	1821      	adds	r1, r4, r0
 800f20c:	428a      	cmp	r2, r1
 800f20e:	bf04      	itt	eq
 800f210:	6811      	ldreq	r1, [r2, #0]
 800f212:	6852      	ldreq	r2, [r2, #4]
 800f214:	6062      	str	r2, [r4, #4]
 800f216:	bf04      	itt	eq
 800f218:	1809      	addeq	r1, r1, r0
 800f21a:	6021      	streq	r1, [r4, #0]
 800f21c:	605c      	str	r4, [r3, #4]
 800f21e:	e7c7      	b.n	800f1b0 <_free_r+0x24>
 800f220:	bd38      	pop	{r3, r4, r5, pc}
 800f222:	bf00      	nop
 800f224:	2400019c 	.word	0x2400019c

0800f228 <_malloc_r>:
 800f228:	b570      	push	{r4, r5, r6, lr}
 800f22a:	1ccd      	adds	r5, r1, #3
 800f22c:	f025 0503 	bic.w	r5, r5, #3
 800f230:	3508      	adds	r5, #8
 800f232:	2d0c      	cmp	r5, #12
 800f234:	bf38      	it	cc
 800f236:	250c      	movcc	r5, #12
 800f238:	2d00      	cmp	r5, #0
 800f23a:	4606      	mov	r6, r0
 800f23c:	db01      	blt.n	800f242 <_malloc_r+0x1a>
 800f23e:	42a9      	cmp	r1, r5
 800f240:	d903      	bls.n	800f24a <_malloc_r+0x22>
 800f242:	230c      	movs	r3, #12
 800f244:	6033      	str	r3, [r6, #0]
 800f246:	2000      	movs	r0, #0
 800f248:	bd70      	pop	{r4, r5, r6, pc}
 800f24a:	f000 f87d 	bl	800f348 <__malloc_lock>
 800f24e:	4a21      	ldr	r2, [pc, #132]	; (800f2d4 <_malloc_r+0xac>)
 800f250:	6814      	ldr	r4, [r2, #0]
 800f252:	4621      	mov	r1, r4
 800f254:	b991      	cbnz	r1, 800f27c <_malloc_r+0x54>
 800f256:	4c20      	ldr	r4, [pc, #128]	; (800f2d8 <_malloc_r+0xb0>)
 800f258:	6823      	ldr	r3, [r4, #0]
 800f25a:	b91b      	cbnz	r3, 800f264 <_malloc_r+0x3c>
 800f25c:	4630      	mov	r0, r6
 800f25e:	f000 f863 	bl	800f328 <_sbrk_r>
 800f262:	6020      	str	r0, [r4, #0]
 800f264:	4629      	mov	r1, r5
 800f266:	4630      	mov	r0, r6
 800f268:	f000 f85e 	bl	800f328 <_sbrk_r>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d124      	bne.n	800f2ba <_malloc_r+0x92>
 800f270:	230c      	movs	r3, #12
 800f272:	6033      	str	r3, [r6, #0]
 800f274:	4630      	mov	r0, r6
 800f276:	f000 f868 	bl	800f34a <__malloc_unlock>
 800f27a:	e7e4      	b.n	800f246 <_malloc_r+0x1e>
 800f27c:	680b      	ldr	r3, [r1, #0]
 800f27e:	1b5b      	subs	r3, r3, r5
 800f280:	d418      	bmi.n	800f2b4 <_malloc_r+0x8c>
 800f282:	2b0b      	cmp	r3, #11
 800f284:	d90f      	bls.n	800f2a6 <_malloc_r+0x7e>
 800f286:	600b      	str	r3, [r1, #0]
 800f288:	50cd      	str	r5, [r1, r3]
 800f28a:	18cc      	adds	r4, r1, r3
 800f28c:	4630      	mov	r0, r6
 800f28e:	f000 f85c 	bl	800f34a <__malloc_unlock>
 800f292:	f104 000b 	add.w	r0, r4, #11
 800f296:	1d23      	adds	r3, r4, #4
 800f298:	f020 0007 	bic.w	r0, r0, #7
 800f29c:	1ac3      	subs	r3, r0, r3
 800f29e:	d0d3      	beq.n	800f248 <_malloc_r+0x20>
 800f2a0:	425a      	negs	r2, r3
 800f2a2:	50e2      	str	r2, [r4, r3]
 800f2a4:	e7d0      	b.n	800f248 <_malloc_r+0x20>
 800f2a6:	428c      	cmp	r4, r1
 800f2a8:	684b      	ldr	r3, [r1, #4]
 800f2aa:	bf16      	itet	ne
 800f2ac:	6063      	strne	r3, [r4, #4]
 800f2ae:	6013      	streq	r3, [r2, #0]
 800f2b0:	460c      	movne	r4, r1
 800f2b2:	e7eb      	b.n	800f28c <_malloc_r+0x64>
 800f2b4:	460c      	mov	r4, r1
 800f2b6:	6849      	ldr	r1, [r1, #4]
 800f2b8:	e7cc      	b.n	800f254 <_malloc_r+0x2c>
 800f2ba:	1cc4      	adds	r4, r0, #3
 800f2bc:	f024 0403 	bic.w	r4, r4, #3
 800f2c0:	42a0      	cmp	r0, r4
 800f2c2:	d005      	beq.n	800f2d0 <_malloc_r+0xa8>
 800f2c4:	1a21      	subs	r1, r4, r0
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f000 f82e 	bl	800f328 <_sbrk_r>
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	d0cf      	beq.n	800f270 <_malloc_r+0x48>
 800f2d0:	6025      	str	r5, [r4, #0]
 800f2d2:	e7db      	b.n	800f28c <_malloc_r+0x64>
 800f2d4:	2400019c 	.word	0x2400019c
 800f2d8:	240001a0 	.word	0x240001a0

0800f2dc <_realloc_r>:
 800f2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2de:	4607      	mov	r7, r0
 800f2e0:	4614      	mov	r4, r2
 800f2e2:	460e      	mov	r6, r1
 800f2e4:	b921      	cbnz	r1, 800f2f0 <_realloc_r+0x14>
 800f2e6:	4611      	mov	r1, r2
 800f2e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f2ec:	f7ff bf9c 	b.w	800f228 <_malloc_r>
 800f2f0:	b922      	cbnz	r2, 800f2fc <_realloc_r+0x20>
 800f2f2:	f7ff ff4b 	bl	800f18c <_free_r>
 800f2f6:	4625      	mov	r5, r4
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2fc:	f000 f826 	bl	800f34c <_malloc_usable_size_r>
 800f300:	42a0      	cmp	r0, r4
 800f302:	d20f      	bcs.n	800f324 <_realloc_r+0x48>
 800f304:	4621      	mov	r1, r4
 800f306:	4638      	mov	r0, r7
 800f308:	f7ff ff8e 	bl	800f228 <_malloc_r>
 800f30c:	4605      	mov	r5, r0
 800f30e:	2800      	cmp	r0, #0
 800f310:	d0f2      	beq.n	800f2f8 <_realloc_r+0x1c>
 800f312:	4631      	mov	r1, r6
 800f314:	4622      	mov	r2, r4
 800f316:	f7ff ff15 	bl	800f144 <memcpy>
 800f31a:	4631      	mov	r1, r6
 800f31c:	4638      	mov	r0, r7
 800f31e:	f7ff ff35 	bl	800f18c <_free_r>
 800f322:	e7e9      	b.n	800f2f8 <_realloc_r+0x1c>
 800f324:	4635      	mov	r5, r6
 800f326:	e7e7      	b.n	800f2f8 <_realloc_r+0x1c>

0800f328 <_sbrk_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	4c06      	ldr	r4, [pc, #24]	; (800f344 <_sbrk_r+0x1c>)
 800f32c:	2300      	movs	r3, #0
 800f32e:	4605      	mov	r5, r0
 800f330:	4608      	mov	r0, r1
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	f7f4 fa44 	bl	80037c0 <_sbrk>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_sbrk_r+0x1a>
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_sbrk_r+0x1a>
 800f340:	602b      	str	r3, [r5, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	24000da8 	.word	0x24000da8

0800f348 <__malloc_lock>:
 800f348:	4770      	bx	lr

0800f34a <__malloc_unlock>:
 800f34a:	4770      	bx	lr

0800f34c <_malloc_usable_size_r>:
 800f34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f350:	1f18      	subs	r0, r3, #4
 800f352:	2b00      	cmp	r3, #0
 800f354:	bfbc      	itt	lt
 800f356:	580b      	ldrlt	r3, [r1, r0]
 800f358:	18c0      	addlt	r0, r0, r3
 800f35a:	4770      	bx	lr
 800f35c:	0000      	movs	r0, r0
	...

0800f360 <cos>:
 800f360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f362:	eeb0 7b40 	vmov.f64	d7, d0
 800f366:	ee17 3a90 	vmov	r3, s15
 800f36a:	4a19      	ldr	r2, [pc, #100]	; (800f3d0 <cos+0x70>)
 800f36c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f370:	4293      	cmp	r3, r2
 800f372:	dc04      	bgt.n	800f37e <cos+0x1e>
 800f374:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800f3c8 <cos+0x68>
 800f378:	f000 faa2 	bl	800f8c0 <__kernel_cos>
 800f37c:	e004      	b.n	800f388 <cos+0x28>
 800f37e:	4a15      	ldr	r2, [pc, #84]	; (800f3d4 <cos+0x74>)
 800f380:	4293      	cmp	r3, r2
 800f382:	dd04      	ble.n	800f38e <cos+0x2e>
 800f384:	ee30 0b40 	vsub.f64	d0, d0, d0
 800f388:	b005      	add	sp, #20
 800f38a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f38e:	4668      	mov	r0, sp
 800f390:	f000 f956 	bl	800f640 <__ieee754_rem_pio2>
 800f394:	f000 0003 	and.w	r0, r0, #3
 800f398:	2801      	cmp	r0, #1
 800f39a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f39e:	ed9d 0b00 	vldr	d0, [sp]
 800f3a2:	d007      	beq.n	800f3b4 <cos+0x54>
 800f3a4:	2802      	cmp	r0, #2
 800f3a6:	d00a      	beq.n	800f3be <cos+0x5e>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d0e5      	beq.n	800f378 <cos+0x18>
 800f3ac:	2001      	movs	r0, #1
 800f3ae:	f000 fd8f 	bl	800fed0 <__kernel_sin>
 800f3b2:	e7e9      	b.n	800f388 <cos+0x28>
 800f3b4:	f000 fd8c 	bl	800fed0 <__kernel_sin>
 800f3b8:	eeb1 0b40 	vneg.f64	d0, d0
 800f3bc:	e7e4      	b.n	800f388 <cos+0x28>
 800f3be:	f000 fa7f 	bl	800f8c0 <__kernel_cos>
 800f3c2:	e7f9      	b.n	800f3b8 <cos+0x58>
 800f3c4:	f3af 8000 	nop.w
	...
 800f3d0:	3fe921fb 	.word	0x3fe921fb
 800f3d4:	7fefffff 	.word	0x7fefffff

0800f3d8 <atan2>:
 800f3d8:	f000 b84e 	b.w	800f478 <__ieee754_atan2>
 800f3dc:	0000      	movs	r0, r0
	...

0800f3e0 <sqrt>:
 800f3e0:	b500      	push	{lr}
 800f3e2:	ed2d 8b02 	vpush	{d8}
 800f3e6:	eeb0 8b40 	vmov.f64	d8, d0
 800f3ea:	b08b      	sub	sp, #44	; 0x2c
 800f3ec:	f000 fa64 	bl	800f8b8 <__ieee754_sqrt>
 800f3f0:	4b1f      	ldr	r3, [pc, #124]	; (800f470 <sqrt+0x90>)
 800f3f2:	f993 3000 	ldrsb.w	r3, [r3]
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	d024      	beq.n	800f444 <sqrt+0x64>
 800f3fa:	eeb4 8b48 	vcmp.f64	d8, d8
 800f3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f402:	d61f      	bvs.n	800f444 <sqrt+0x64>
 800f404:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800f468 <sqrt+0x88>
 800f408:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f410:	d518      	bpl.n	800f444 <sqrt+0x64>
 800f412:	2201      	movs	r2, #1
 800f414:	9200      	str	r2, [sp, #0]
 800f416:	4a17      	ldr	r2, [pc, #92]	; (800f474 <sqrt+0x94>)
 800f418:	9201      	str	r2, [sp, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	9208      	str	r2, [sp, #32]
 800f41e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f422:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f426:	b993      	cbnz	r3, 800f44e <sqrt+0x6e>
 800f428:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f42c:	4668      	mov	r0, sp
 800f42e:	f000 ff23 	bl	8010278 <matherr>
 800f432:	b190      	cbz	r0, 800f45a <sqrt+0x7a>
 800f434:	9b08      	ldr	r3, [sp, #32]
 800f436:	b11b      	cbz	r3, 800f440 <sqrt+0x60>
 800f438:	f7ff fb58 	bl	800eaec <__errno>
 800f43c:	9b08      	ldr	r3, [sp, #32]
 800f43e:	6003      	str	r3, [r0, #0]
 800f440:	ed9d 0b06 	vldr	d0, [sp, #24]
 800f444:	b00b      	add	sp, #44	; 0x2c
 800f446:	ecbd 8b02 	vpop	{d8}
 800f44a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f44e:	2b02      	cmp	r3, #2
 800f450:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800f454:	ed8d 6b06 	vstr	d6, [sp, #24]
 800f458:	d1e8      	bne.n	800f42c <sqrt+0x4c>
 800f45a:	f7ff fb47 	bl	800eaec <__errno>
 800f45e:	2321      	movs	r3, #33	; 0x21
 800f460:	6003      	str	r3, [r0, #0]
 800f462:	e7e7      	b.n	800f434 <sqrt+0x54>
 800f464:	f3af 8000 	nop.w
	...
 800f470:	24000144 	.word	0x24000144
 800f474:	0801054f 	.word	0x0801054f

0800f478 <__ieee754_atan2>:
 800f478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f47a:	ee11 6a10 	vmov	r6, s2
 800f47e:	ee11 0a90 	vmov	r0, s3
 800f482:	4273      	negs	r3, r6
 800f484:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f488:	4333      	orrs	r3, r6
 800f48a:	4f6b      	ldr	r7, [pc, #428]	; (800f638 <__ieee754_atan2+0x1c0>)
 800f48c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f490:	42bb      	cmp	r3, r7
 800f492:	ed8d 0b00 	vstr	d0, [sp]
 800f496:	d80b      	bhi.n	800f4b0 <__ieee754_atan2+0x38>
 800f498:	e9dd c500 	ldrd	ip, r5, [sp]
 800f49c:	f1cc 0100 	rsb	r1, ip, #0
 800f4a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f4a4:	ea41 010c 	orr.w	r1, r1, ip
 800f4a8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800f4ac:	42b9      	cmp	r1, r7
 800f4ae:	d906      	bls.n	800f4be <__ieee754_atan2+0x46>
 800f4b0:	ed9d 7b00 	vldr	d7, [sp]
 800f4b4:	ee37 7b01 	vadd.f64	d7, d7, d1
 800f4b8:	ed8d 7b00 	vstr	d7, [sp]
 800f4bc:	e063      	b.n	800f586 <__ieee754_atan2+0x10e>
 800f4be:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800f4c2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800f4c6:	4331      	orrs	r1, r6
 800f4c8:	d104      	bne.n	800f4d4 <__ieee754_atan2+0x5c>
 800f4ca:	b003      	add	sp, #12
 800f4cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f4d0:	f000 bd56 	b.w	800ff80 <atan>
 800f4d4:	1784      	asrs	r4, r0, #30
 800f4d6:	f004 0402 	and.w	r4, r4, #2
 800f4da:	ea53 010c 	orrs.w	r1, r3, ip
 800f4de:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800f4e2:	d109      	bne.n	800f4f8 <__ieee754_atan2+0x80>
 800f4e4:	2c02      	cmp	r4, #2
 800f4e6:	d078      	beq.n	800f5da <__ieee754_atan2+0x162>
 800f4e8:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800f5e0 <__ieee754_atan2+0x168>
 800f4ec:	ed9d 6b00 	vldr	d6, [sp]
 800f4f0:	2c03      	cmp	r4, #3
 800f4f2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800f4f6:	e7df      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f4f8:	ea52 0106 	orrs.w	r1, r2, r6
 800f4fc:	d107      	bne.n	800f50e <__ieee754_atan2+0x96>
 800f4fe:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800f5e8 <__ieee754_atan2+0x170>
 800f502:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800f5f0 <__ieee754_atan2+0x178>
 800f506:	2d00      	cmp	r5, #0
 800f508:	fe26 7b07 	vselge.f64	d7, d6, d7
 800f50c:	e7d4      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f50e:	42ba      	cmp	r2, r7
 800f510:	d120      	bne.n	800f554 <__ieee754_atan2+0xdc>
 800f512:	4293      	cmp	r3, r2
 800f514:	d111      	bne.n	800f53a <__ieee754_atan2+0xc2>
 800f516:	2c02      	cmp	r4, #2
 800f518:	d009      	beq.n	800f52e <__ieee754_atan2+0xb6>
 800f51a:	2c03      	cmp	r4, #3
 800f51c:	d00a      	beq.n	800f534 <__ieee754_atan2+0xbc>
 800f51e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800f5f8 <__ieee754_atan2+0x180>
 800f522:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800f600 <__ieee754_atan2+0x188>
 800f526:	2c01      	cmp	r4, #1
 800f528:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800f52c:	e7c4      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f52e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800f608 <__ieee754_atan2+0x190>
 800f532:	e7c1      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f534:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800f610 <__ieee754_atan2+0x198>
 800f538:	e7be      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f53a:	2c02      	cmp	r4, #2
 800f53c:	d04d      	beq.n	800f5da <__ieee754_atan2+0x162>
 800f53e:	2c03      	cmp	r4, #3
 800f540:	d005      	beq.n	800f54e <__ieee754_atan2+0xd6>
 800f542:	2c01      	cmp	r4, #1
 800f544:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800f618 <__ieee754_atan2+0x1a0>
 800f548:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f620 <__ieee754_atan2+0x1a8>
 800f54c:	e7ec      	b.n	800f528 <__ieee754_atan2+0xb0>
 800f54e:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800f5e0 <__ieee754_atan2+0x168>
 800f552:	e7b1      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f554:	42bb      	cmp	r3, r7
 800f556:	d0d2      	beq.n	800f4fe <__ieee754_atan2+0x86>
 800f558:	1a9b      	subs	r3, r3, r2
 800f55a:	151b      	asrs	r3, r3, #20
 800f55c:	2b3c      	cmp	r3, #60	; 0x3c
 800f55e:	dc16      	bgt.n	800f58e <__ieee754_atan2+0x116>
 800f560:	2800      	cmp	r0, #0
 800f562:	da01      	bge.n	800f568 <__ieee754_atan2+0xf0>
 800f564:	333c      	adds	r3, #60	; 0x3c
 800f566:	db17      	blt.n	800f598 <__ieee754_atan2+0x120>
 800f568:	ed9d 7b00 	vldr	d7, [sp]
 800f56c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800f570:	f000 fe00 	bl	8010174 <fabs>
 800f574:	f000 fd04 	bl	800ff80 <atan>
 800f578:	ed8d 0b00 	vstr	d0, [sp]
 800f57c:	2c01      	cmp	r4, #1
 800f57e:	d00e      	beq.n	800f59e <__ieee754_atan2+0x126>
 800f580:	2c02      	cmp	r4, #2
 800f582:	d014      	beq.n	800f5ae <__ieee754_atan2+0x136>
 800f584:	b9f4      	cbnz	r4, 800f5c4 <__ieee754_atan2+0x14c>
 800f586:	ed9d 0b00 	vldr	d0, [sp]
 800f58a:	b003      	add	sp, #12
 800f58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f58e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f5e8 <__ieee754_atan2+0x170>
 800f592:	ed8d 7b00 	vstr	d7, [sp]
 800f596:	e7f1      	b.n	800f57c <__ieee754_atan2+0x104>
 800f598:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800f620 <__ieee754_atan2+0x1a8>
 800f59c:	e7f9      	b.n	800f592 <__ieee754_atan2+0x11a>
 800f59e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5a2:	9901      	ldr	r1, [sp, #4]
 800f5a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5a8:	e9cd 2300 	strd	r2, r3, [sp]
 800f5ac:	e7eb      	b.n	800f586 <__ieee754_atan2+0x10e>
 800f5ae:	ed9d 6b00 	vldr	d6, [sp]
 800f5b2:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800f628 <__ieee754_atan2+0x1b0>
 800f5b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f5ba:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800f630 <__ieee754_atan2+0x1b8>
 800f5be:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f5c2:	e779      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f5c4:	ed9d 6b00 	vldr	d6, [sp]
 800f5c8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800f628 <__ieee754_atan2+0x1b0>
 800f5cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f5d0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800f630 <__ieee754_atan2+0x1b8>
 800f5d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f5d8:	e76e      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f5da:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f630 <__ieee754_atan2+0x1b8>
 800f5de:	e76b      	b.n	800f4b8 <__ieee754_atan2+0x40>
 800f5e0:	54442d18 	.word	0x54442d18
 800f5e4:	c00921fb 	.word	0xc00921fb
 800f5e8:	54442d18 	.word	0x54442d18
 800f5ec:	3ff921fb 	.word	0x3ff921fb
 800f5f0:	54442d18 	.word	0x54442d18
 800f5f4:	bff921fb 	.word	0xbff921fb
 800f5f8:	54442d18 	.word	0x54442d18
 800f5fc:	bfe921fb 	.word	0xbfe921fb
 800f600:	54442d18 	.word	0x54442d18
 800f604:	3fe921fb 	.word	0x3fe921fb
 800f608:	7f3321d2 	.word	0x7f3321d2
 800f60c:	4002d97c 	.word	0x4002d97c
 800f610:	7f3321d2 	.word	0x7f3321d2
 800f614:	c002d97c 	.word	0xc002d97c
 800f618:	00000000 	.word	0x00000000
 800f61c:	80000000 	.word	0x80000000
	...
 800f628:	33145c07 	.word	0x33145c07
 800f62c:	3ca1a626 	.word	0x3ca1a626
 800f630:	54442d18 	.word	0x54442d18
 800f634:	400921fb 	.word	0x400921fb
 800f638:	7ff00000 	.word	0x7ff00000
 800f63c:	00000000 	.word	0x00000000

0800f640 <__ieee754_rem_pio2>:
 800f640:	b570      	push	{r4, r5, r6, lr}
 800f642:	eeb0 7b40 	vmov.f64	d7, d0
 800f646:	ee17 5a90 	vmov	r5, s15
 800f64a:	4b95      	ldr	r3, [pc, #596]	; (800f8a0 <__ieee754_rem_pio2+0x260>)
 800f64c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f650:	429e      	cmp	r6, r3
 800f652:	b088      	sub	sp, #32
 800f654:	4604      	mov	r4, r0
 800f656:	dc07      	bgt.n	800f668 <__ieee754_rem_pio2+0x28>
 800f658:	2200      	movs	r2, #0
 800f65a:	2300      	movs	r3, #0
 800f65c:	ed84 0b00 	vstr	d0, [r4]
 800f660:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f664:	2000      	movs	r0, #0
 800f666:	e01b      	b.n	800f6a0 <__ieee754_rem_pio2+0x60>
 800f668:	4b8e      	ldr	r3, [pc, #568]	; (800f8a4 <__ieee754_rem_pio2+0x264>)
 800f66a:	429e      	cmp	r6, r3
 800f66c:	dc3b      	bgt.n	800f6e6 <__ieee754_rem_pio2+0xa6>
 800f66e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800f672:	2d00      	cmp	r5, #0
 800f674:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800f860 <__ieee754_rem_pio2+0x220>
 800f678:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800f67c:	dd19      	ble.n	800f6b2 <__ieee754_rem_pio2+0x72>
 800f67e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f682:	429e      	cmp	r6, r3
 800f684:	d00e      	beq.n	800f6a4 <__ieee754_rem_pio2+0x64>
 800f686:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800f868 <__ieee754_rem_pio2+0x228>
 800f68a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800f68e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f692:	ed84 5b00 	vstr	d5, [r4]
 800f696:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f69a:	ed84 7b02 	vstr	d7, [r4, #8]
 800f69e:	2001      	movs	r0, #1
 800f6a0:	b008      	add	sp, #32
 800f6a2:	bd70      	pop	{r4, r5, r6, pc}
 800f6a4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800f870 <__ieee754_rem_pio2+0x230>
 800f6a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f6ac:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800f878 <__ieee754_rem_pio2+0x238>
 800f6b0:	e7eb      	b.n	800f68a <__ieee754_rem_pio2+0x4a>
 800f6b2:	429e      	cmp	r6, r3
 800f6b4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800f6b8:	d00e      	beq.n	800f6d8 <__ieee754_rem_pio2+0x98>
 800f6ba:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800f868 <__ieee754_rem_pio2+0x228>
 800f6be:	ee37 5b06 	vadd.f64	d5, d7, d6
 800f6c2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f6c6:	ed84 5b00 	vstr	d5, [r4]
 800f6ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d2:	ed84 7b02 	vstr	d7, [r4, #8]
 800f6d6:	e7e3      	b.n	800f6a0 <__ieee754_rem_pio2+0x60>
 800f6d8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800f870 <__ieee754_rem_pio2+0x230>
 800f6dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f6e0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800f878 <__ieee754_rem_pio2+0x238>
 800f6e4:	e7eb      	b.n	800f6be <__ieee754_rem_pio2+0x7e>
 800f6e6:	4b70      	ldr	r3, [pc, #448]	; (800f8a8 <__ieee754_rem_pio2+0x268>)
 800f6e8:	429e      	cmp	r6, r3
 800f6ea:	dc6c      	bgt.n	800f7c6 <__ieee754_rem_pio2+0x186>
 800f6ec:	f000 fd42 	bl	8010174 <fabs>
 800f6f0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f6f4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800f880 <__ieee754_rem_pio2+0x240>
 800f6f8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800f6fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f700:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f704:	ee17 0a90 	vmov	r0, s15
 800f708:	eeb1 5b44 	vneg.f64	d5, d4
 800f70c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800f860 <__ieee754_rem_pio2+0x220>
 800f710:	eea5 0b07 	vfma.f64	d0, d5, d7
 800f714:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800f868 <__ieee754_rem_pio2+0x228>
 800f718:	281f      	cmp	r0, #31
 800f71a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f71e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f722:	dc08      	bgt.n	800f736 <__ieee754_rem_pio2+0xf6>
 800f724:	1e42      	subs	r2, r0, #1
 800f726:	4b61      	ldr	r3, [pc, #388]	; (800f8ac <__ieee754_rem_pio2+0x26c>)
 800f728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f72c:	42b3      	cmp	r3, r6
 800f72e:	d002      	beq.n	800f736 <__ieee754_rem_pio2+0xf6>
 800f730:	ed84 6b00 	vstr	d6, [r4]
 800f734:	e022      	b.n	800f77c <__ieee754_rem_pio2+0x13c>
 800f736:	ee16 3a90 	vmov	r3, s13
 800f73a:	1536      	asrs	r6, r6, #20
 800f73c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f740:	1af3      	subs	r3, r6, r3
 800f742:	2b10      	cmp	r3, #16
 800f744:	ddf4      	ble.n	800f730 <__ieee754_rem_pio2+0xf0>
 800f746:	eeb0 6b40 	vmov.f64	d6, d0
 800f74a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800f870 <__ieee754_rem_pio2+0x230>
 800f74e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800f752:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f756:	eea5 7b03 	vfma.f64	d7, d5, d3
 800f75a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800f878 <__ieee754_rem_pio2+0x238>
 800f75e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800f762:	ee36 3b47 	vsub.f64	d3, d6, d7
 800f766:	ee13 3a90 	vmov	r3, s7
 800f76a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f76e:	1af6      	subs	r6, r6, r3
 800f770:	2e31      	cmp	r6, #49	; 0x31
 800f772:	dc17      	bgt.n	800f7a4 <__ieee754_rem_pio2+0x164>
 800f774:	eeb0 0b46 	vmov.f64	d0, d6
 800f778:	ed84 3b00 	vstr	d3, [r4]
 800f77c:	ed94 6b00 	vldr	d6, [r4]
 800f780:	2d00      	cmp	r5, #0
 800f782:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f786:	ee30 7b47 	vsub.f64	d7, d0, d7
 800f78a:	ed84 7b02 	vstr	d7, [r4, #8]
 800f78e:	da87      	bge.n	800f6a0 <__ieee754_rem_pio2+0x60>
 800f790:	eeb1 6b46 	vneg.f64	d6, d6
 800f794:	ed84 6b00 	vstr	d6, [r4]
 800f798:	eeb1 7b47 	vneg.f64	d7, d7
 800f79c:	4240      	negs	r0, r0
 800f79e:	ed84 7b02 	vstr	d7, [r4, #8]
 800f7a2:	e77d      	b.n	800f6a0 <__ieee754_rem_pio2+0x60>
 800f7a4:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800f888 <__ieee754_rem_pio2+0x248>
 800f7a8:	eeb0 0b46 	vmov.f64	d0, d6
 800f7ac:	eea5 0b03 	vfma.f64	d0, d5, d3
 800f7b0:	ee36 7b40 	vsub.f64	d7, d6, d0
 800f7b4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800f890 <__ieee754_rem_pio2+0x250>
 800f7b8:	eea5 7b03 	vfma.f64	d7, d5, d3
 800f7bc:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800f7c0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f7c4:	e7b4      	b.n	800f730 <__ieee754_rem_pio2+0xf0>
 800f7c6:	4b3a      	ldr	r3, [pc, #232]	; (800f8b0 <__ieee754_rem_pio2+0x270>)
 800f7c8:	429e      	cmp	r6, r3
 800f7ca:	dd06      	ble.n	800f7da <__ieee754_rem_pio2+0x19a>
 800f7cc:	ee30 7b40 	vsub.f64	d7, d0, d0
 800f7d0:	ed80 7b02 	vstr	d7, [r0, #8]
 800f7d4:	ed80 7b00 	vstr	d7, [r0]
 800f7d8:	e744      	b.n	800f664 <__ieee754_rem_pio2+0x24>
 800f7da:	1532      	asrs	r2, r6, #20
 800f7dc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800f7e0:	ee10 0a10 	vmov	r0, s0
 800f7e4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800f7e8:	ec41 0b17 	vmov	d7, r0, r1
 800f7ec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f7f0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800f898 <__ieee754_rem_pio2+0x258>
 800f7f4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f7f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f7fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f800:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f804:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f808:	a908      	add	r1, sp, #32
 800f80a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f80e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f812:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f816:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f81a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f81e:	2303      	movs	r3, #3
 800f820:	ed31 7b02 	vldmdb	r1!, {d7}
 800f824:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f82c:	f103 30ff 	add.w	r0, r3, #4294967295
 800f830:	d013      	beq.n	800f85a <__ieee754_rem_pio2+0x21a>
 800f832:	4920      	ldr	r1, [pc, #128]	; (800f8b4 <__ieee754_rem_pio2+0x274>)
 800f834:	9101      	str	r1, [sp, #4]
 800f836:	2102      	movs	r1, #2
 800f838:	9100      	str	r1, [sp, #0]
 800f83a:	a802      	add	r0, sp, #8
 800f83c:	4621      	mov	r1, r4
 800f83e:	f000 f8ab 	bl	800f998 <__kernel_rem_pio2>
 800f842:	2d00      	cmp	r5, #0
 800f844:	f6bf af2c 	bge.w	800f6a0 <__ieee754_rem_pio2+0x60>
 800f848:	ed94 7b00 	vldr	d7, [r4]
 800f84c:	eeb1 7b47 	vneg.f64	d7, d7
 800f850:	ed84 7b00 	vstr	d7, [r4]
 800f854:	ed94 7b02 	vldr	d7, [r4, #8]
 800f858:	e79e      	b.n	800f798 <__ieee754_rem_pio2+0x158>
 800f85a:	4603      	mov	r3, r0
 800f85c:	e7e0      	b.n	800f820 <__ieee754_rem_pio2+0x1e0>
 800f85e:	bf00      	nop
 800f860:	54400000 	.word	0x54400000
 800f864:	3ff921fb 	.word	0x3ff921fb
 800f868:	1a626331 	.word	0x1a626331
 800f86c:	3dd0b461 	.word	0x3dd0b461
 800f870:	1a600000 	.word	0x1a600000
 800f874:	3dd0b461 	.word	0x3dd0b461
 800f878:	2e037073 	.word	0x2e037073
 800f87c:	3ba3198a 	.word	0x3ba3198a
 800f880:	6dc9c883 	.word	0x6dc9c883
 800f884:	3fe45f30 	.word	0x3fe45f30
 800f888:	2e000000 	.word	0x2e000000
 800f88c:	3ba3198a 	.word	0x3ba3198a
 800f890:	252049c1 	.word	0x252049c1
 800f894:	397b839a 	.word	0x397b839a
 800f898:	00000000 	.word	0x00000000
 800f89c:	41700000 	.word	0x41700000
 800f8a0:	3fe921fb 	.word	0x3fe921fb
 800f8a4:	4002d97b 	.word	0x4002d97b
 800f8a8:	413921fb 	.word	0x413921fb
 800f8ac:	08010554 	.word	0x08010554
 800f8b0:	7fefffff 	.word	0x7fefffff
 800f8b4:	080105d4 	.word	0x080105d4

0800f8b8 <__ieee754_sqrt>:
 800f8b8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800f8bc:	4770      	bx	lr
	...

0800f8c0 <__kernel_cos>:
 800f8c0:	ee10 1a90 	vmov	r1, s1
 800f8c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f8c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f8cc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800f8d0:	da05      	bge.n	800f8de <__kernel_cos+0x1e>
 800f8d2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800f8d6:	ee16 3a90 	vmov	r3, s13
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d03d      	beq.n	800f95a <__kernel_cos+0x9a>
 800f8de:	ee20 4b00 	vmul.f64	d4, d0, d0
 800f8e2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f8e6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800f960 <__kernel_cos+0xa0>
 800f8ea:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800f8ee:	ee24 6b06 	vmul.f64	d6, d4, d6
 800f8f2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800f968 <__kernel_cos+0xa8>
 800f8f6:	eea4 5b03 	vfma.f64	d5, d4, d3
 800f8fa:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800f970 <__kernel_cos+0xb0>
 800f8fe:	eea5 3b04 	vfma.f64	d3, d5, d4
 800f902:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800f978 <__kernel_cos+0xb8>
 800f906:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f90a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800f980 <__kernel_cos+0xc0>
 800f90e:	4b20      	ldr	r3, [pc, #128]	; (800f990 <__kernel_cos+0xd0>)
 800f910:	eea5 3b04 	vfma.f64	d3, d5, d4
 800f914:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800f988 <__kernel_cos+0xc8>
 800f918:	4299      	cmp	r1, r3
 800f91a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f91e:	ee25 5b04 	vmul.f64	d5, d5, d4
 800f922:	eea4 1b05 	vfma.f64	d1, d4, d5
 800f926:	dc04      	bgt.n	800f932 <__kernel_cos+0x72>
 800f928:	ee36 6b41 	vsub.f64	d6, d6, d1
 800f92c:	ee37 0b46 	vsub.f64	d0, d7, d6
 800f930:	4770      	bx	lr
 800f932:	4b18      	ldr	r3, [pc, #96]	; (800f994 <__kernel_cos+0xd4>)
 800f934:	4299      	cmp	r1, r3
 800f936:	dc0d      	bgt.n	800f954 <__kernel_cos+0x94>
 800f938:	2200      	movs	r2, #0
 800f93a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800f93e:	ec43 2b15 	vmov	d5, r2, r3
 800f942:	ee37 0b45 	vsub.f64	d0, d7, d5
 800f946:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f94a:	ee36 6b41 	vsub.f64	d6, d6, d1
 800f94e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f952:	4770      	bx	lr
 800f954:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800f958:	e7f3      	b.n	800f942 <__kernel_cos+0x82>
 800f95a:	eeb0 0b47 	vmov.f64	d0, d7
 800f95e:	4770      	bx	lr
 800f960:	be8838d4 	.word	0xbe8838d4
 800f964:	bda8fae9 	.word	0xbda8fae9
 800f968:	bdb4b1c4 	.word	0xbdb4b1c4
 800f96c:	3e21ee9e 	.word	0x3e21ee9e
 800f970:	809c52ad 	.word	0x809c52ad
 800f974:	be927e4f 	.word	0xbe927e4f
 800f978:	19cb1590 	.word	0x19cb1590
 800f97c:	3efa01a0 	.word	0x3efa01a0
 800f980:	16c15177 	.word	0x16c15177
 800f984:	bf56c16c 	.word	0xbf56c16c
 800f988:	5555554c 	.word	0x5555554c
 800f98c:	3fa55555 	.word	0x3fa55555
 800f990:	3fd33332 	.word	0x3fd33332
 800f994:	3fe90000 	.word	0x3fe90000

0800f998 <__kernel_rem_pio2>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	ed2d 8b06 	vpush	{d8-d10}
 800f9a0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800f9a4:	469b      	mov	fp, r3
 800f9a6:	460e      	mov	r6, r1
 800f9a8:	4bc7      	ldr	r3, [pc, #796]	; (800fcc8 <__kernel_rem_pio2+0x330>)
 800f9aa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f9ac:	9002      	str	r0, [sp, #8]
 800f9ae:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f9b2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800f9b4:	1ed1      	subs	r1, r2, #3
 800f9b6:	2318      	movs	r3, #24
 800f9b8:	f06f 0417 	mvn.w	r4, #23
 800f9bc:	fb91 f1f3 	sdiv	r1, r1, r3
 800f9c0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f9c4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f9c8:	fb01 4404 	mla	r4, r1, r4, r4
 800f9cc:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800fcb0 <__kernel_rem_pio2+0x318>
 800f9d0:	4414      	add	r4, r2
 800f9d2:	eba1 050a 	sub.w	r5, r1, sl
 800f9d6:	aa1a      	add	r2, sp, #104	; 0x68
 800f9d8:	eb09 070a 	add.w	r7, r9, sl
 800f9dc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f9e0:	4696      	mov	lr, r2
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	42bb      	cmp	r3, r7
 800f9e6:	dd0f      	ble.n	800fa08 <__kernel_rem_pio2+0x70>
 800f9e8:	af6a      	add	r7, sp, #424	; 0x1a8
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	454a      	cmp	r2, r9
 800f9ee:	dc28      	bgt.n	800fa42 <__kernel_rem_pio2+0xaa>
 800f9f0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f9f4:	eb0b 0302 	add.w	r3, fp, r2
 800f9f8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800f9fc:	9d02      	ldr	r5, [sp, #8]
 800f9fe:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800fcb0 <__kernel_rem_pio2+0x318>
 800fa02:	f04f 0c00 	mov.w	ip, #0
 800fa06:	e016      	b.n	800fa36 <__kernel_rem_pio2+0x9e>
 800fa08:	42dd      	cmn	r5, r3
 800fa0a:	d409      	bmi.n	800fa20 <__kernel_rem_pio2+0x88>
 800fa0c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800fa10:	ee07 2a90 	vmov	s15, r2
 800fa14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fa18:	ecae 7b02 	vstmia	lr!, {d7}
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	e7e1      	b.n	800f9e4 <__kernel_rem_pio2+0x4c>
 800fa20:	eeb0 7b46 	vmov.f64	d7, d6
 800fa24:	e7f8      	b.n	800fa18 <__kernel_rem_pio2+0x80>
 800fa26:	ecb5 5b02 	vldmia	r5!, {d5}
 800fa2a:	ed33 6b02 	vldmdb	r3!, {d6}
 800fa2e:	f10c 0c01 	add.w	ip, ip, #1
 800fa32:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fa36:	45d4      	cmp	ip, sl
 800fa38:	ddf5      	ble.n	800fa26 <__kernel_rem_pio2+0x8e>
 800fa3a:	eca7 7b02 	vstmia	r7!, {d7}
 800fa3e:	3201      	adds	r2, #1
 800fa40:	e7d4      	b.n	800f9ec <__kernel_rem_pio2+0x54>
 800fa42:	ab06      	add	r3, sp, #24
 800fa44:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800fa48:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800fcb8 <__kernel_rem_pio2+0x320>
 800fa4c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800fcc0 <__kernel_rem_pio2+0x328>
 800fa50:	9304      	str	r3, [sp, #16]
 800fa52:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800fa56:	9303      	str	r3, [sp, #12]
 800fa58:	464d      	mov	r5, r9
 800fa5a:	ab92      	add	r3, sp, #584	; 0x248
 800fa5c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800fa60:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fa64:	3f01      	subs	r7, #1
 800fa66:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800fa6a:	00ff      	lsls	r7, r7, #3
 800fa6c:	ab92      	add	r3, sp, #584	; 0x248
 800fa6e:	19da      	adds	r2, r3, r7
 800fa70:	3a98      	subs	r2, #152	; 0x98
 800fa72:	2300      	movs	r3, #0
 800fa74:	1ae9      	subs	r1, r5, r3
 800fa76:	2900      	cmp	r1, #0
 800fa78:	dc4e      	bgt.n	800fb18 <__kernel_rem_pio2+0x180>
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f000 fc00 	bl	8010280 <scalbn>
 800fa80:	eeb0 8b40 	vmov.f64	d8, d0
 800fa84:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800fa88:	ee28 0b00 	vmul.f64	d0, d8, d0
 800fa8c:	f000 fb7c 	bl	8010188 <floor>
 800fa90:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800fa94:	eea0 8b47 	vfms.f64	d8, d0, d7
 800fa98:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800fa9c:	2c00      	cmp	r4, #0
 800fa9e:	edcd 7a01 	vstr	s15, [sp, #4]
 800faa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800faa6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800faaa:	dd4a      	ble.n	800fb42 <__kernel_rem_pio2+0x1aa>
 800faac:	1e69      	subs	r1, r5, #1
 800faae:	ab06      	add	r3, sp, #24
 800fab0:	f1c4 0018 	rsb	r0, r4, #24
 800fab4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800fab8:	9a01      	ldr	r2, [sp, #4]
 800faba:	fa4c f300 	asr.w	r3, ip, r0
 800fabe:	441a      	add	r2, r3
 800fac0:	4083      	lsls	r3, r0
 800fac2:	9201      	str	r2, [sp, #4]
 800fac4:	ebac 0203 	sub.w	r2, ip, r3
 800fac8:	ab06      	add	r3, sp, #24
 800faca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800face:	f1c4 0317 	rsb	r3, r4, #23
 800fad2:	fa42 f803 	asr.w	r8, r2, r3
 800fad6:	f1b8 0f00 	cmp.w	r8, #0
 800fada:	dd43      	ble.n	800fb64 <__kernel_rem_pio2+0x1cc>
 800fadc:	9b01      	ldr	r3, [sp, #4]
 800fade:	2000      	movs	r0, #0
 800fae0:	3301      	adds	r3, #1
 800fae2:	9301      	str	r3, [sp, #4]
 800fae4:	4601      	mov	r1, r0
 800fae6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800faea:	4285      	cmp	r5, r0
 800faec:	dc6e      	bgt.n	800fbcc <__kernel_rem_pio2+0x234>
 800faee:	2c00      	cmp	r4, #0
 800faf0:	dd04      	ble.n	800fafc <__kernel_rem_pio2+0x164>
 800faf2:	2c01      	cmp	r4, #1
 800faf4:	d07f      	beq.n	800fbf6 <__kernel_rem_pio2+0x25e>
 800faf6:	2c02      	cmp	r4, #2
 800faf8:	f000 8087 	beq.w	800fc0a <__kernel_rem_pio2+0x272>
 800fafc:	f1b8 0f02 	cmp.w	r8, #2
 800fb00:	d130      	bne.n	800fb64 <__kernel_rem_pio2+0x1cc>
 800fb02:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fb06:	ee30 8b48 	vsub.f64	d8, d0, d8
 800fb0a:	b359      	cbz	r1, 800fb64 <__kernel_rem_pio2+0x1cc>
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f000 fbb7 	bl	8010280 <scalbn>
 800fb12:	ee38 8b40 	vsub.f64	d8, d8, d0
 800fb16:	e025      	b.n	800fb64 <__kernel_rem_pio2+0x1cc>
 800fb18:	ee20 7b09 	vmul.f64	d7, d0, d9
 800fb1c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800fb20:	a806      	add	r0, sp, #24
 800fb22:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800fb26:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800fb2a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fb2e:	ee10 1a10 	vmov	r1, s0
 800fb32:	ed32 0b02 	vldmdb	r2!, {d0}
 800fb36:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800fb3a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800fb3e:	3301      	adds	r3, #1
 800fb40:	e798      	b.n	800fa74 <__kernel_rem_pio2+0xdc>
 800fb42:	d106      	bne.n	800fb52 <__kernel_rem_pio2+0x1ba>
 800fb44:	1e6b      	subs	r3, r5, #1
 800fb46:	aa06      	add	r2, sp, #24
 800fb48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb4c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800fb50:	e7c1      	b.n	800fad6 <__kernel_rem_pio2+0x13e>
 800fb52:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800fb56:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5e:	da32      	bge.n	800fbc6 <__kernel_rem_pio2+0x22e>
 800fb60:	f04f 0800 	mov.w	r8, #0
 800fb64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6c:	f040 80b0 	bne.w	800fcd0 <__kernel_rem_pio2+0x338>
 800fb70:	1e6b      	subs	r3, r5, #1
 800fb72:	4618      	mov	r0, r3
 800fb74:	2200      	movs	r2, #0
 800fb76:	4548      	cmp	r0, r9
 800fb78:	da4e      	bge.n	800fc18 <__kernel_rem_pio2+0x280>
 800fb7a:	2a00      	cmp	r2, #0
 800fb7c:	f000 8088 	beq.w	800fc90 <__kernel_rem_pio2+0x2f8>
 800fb80:	aa06      	add	r2, sp, #24
 800fb82:	3c18      	subs	r4, #24
 800fb84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fb88:	2900      	cmp	r1, #0
 800fb8a:	f000 808e 	beq.w	800fcaa <__kernel_rem_pio2+0x312>
 800fb8e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fb92:	4620      	mov	r0, r4
 800fb94:	9302      	str	r3, [sp, #8]
 800fb96:	f000 fb73 	bl	8010280 <scalbn>
 800fb9a:	9b02      	ldr	r3, [sp, #8]
 800fb9c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800fb9e:	00d9      	lsls	r1, r3, #3
 800fba0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800fcb8 <__kernel_rem_pio2+0x320>
 800fba4:	1850      	adds	r0, r2, r1
 800fba6:	f100 0508 	add.w	r5, r0, #8
 800fbaa:	461c      	mov	r4, r3
 800fbac:	2c00      	cmp	r4, #0
 800fbae:	f280 80bd 	bge.w	800fd2c <__kernel_rem_pio2+0x394>
 800fbb2:	2500      	movs	r5, #0
 800fbb4:	1b5c      	subs	r4, r3, r5
 800fbb6:	2c00      	cmp	r4, #0
 800fbb8:	f2c0 80dd 	blt.w	800fd76 <__kernel_rem_pio2+0x3de>
 800fbbc:	4f43      	ldr	r7, [pc, #268]	; (800fccc <__kernel_rem_pio2+0x334>)
 800fbbe:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800fcb0 <__kernel_rem_pio2+0x318>
 800fbc2:	2400      	movs	r4, #0
 800fbc4:	e0cb      	b.n	800fd5e <__kernel_rem_pio2+0x3c6>
 800fbc6:	f04f 0802 	mov.w	r8, #2
 800fbca:	e787      	b.n	800fadc <__kernel_rem_pio2+0x144>
 800fbcc:	ab06      	add	r3, sp, #24
 800fbce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fbd2:	b949      	cbnz	r1, 800fbe8 <__kernel_rem_pio2+0x250>
 800fbd4:	b12b      	cbz	r3, 800fbe2 <__kernel_rem_pio2+0x24a>
 800fbd6:	aa06      	add	r2, sp, #24
 800fbd8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fbdc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	3001      	adds	r0, #1
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	e780      	b.n	800faea <__kernel_rem_pio2+0x152>
 800fbe8:	aa06      	add	r2, sp, #24
 800fbea:	ebac 0303 	sub.w	r3, ip, r3
 800fbee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	e7f5      	b.n	800fbe2 <__kernel_rem_pio2+0x24a>
 800fbf6:	1e68      	subs	r0, r5, #1
 800fbf8:	ab06      	add	r3, sp, #24
 800fbfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fbfe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fc02:	aa06      	add	r2, sp, #24
 800fc04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fc08:	e778      	b.n	800fafc <__kernel_rem_pio2+0x164>
 800fc0a:	1e68      	subs	r0, r5, #1
 800fc0c:	ab06      	add	r3, sp, #24
 800fc0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fc12:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fc16:	e7f4      	b.n	800fc02 <__kernel_rem_pio2+0x26a>
 800fc18:	a906      	add	r1, sp, #24
 800fc1a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fc1e:	3801      	subs	r0, #1
 800fc20:	430a      	orrs	r2, r1
 800fc22:	e7a8      	b.n	800fb76 <__kernel_rem_pio2+0x1de>
 800fc24:	f10c 0c01 	add.w	ip, ip, #1
 800fc28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc2c:	2a00      	cmp	r2, #0
 800fc2e:	d0f9      	beq.n	800fc24 <__kernel_rem_pio2+0x28c>
 800fc30:	eb0b 0305 	add.w	r3, fp, r5
 800fc34:	aa1a      	add	r2, sp, #104	; 0x68
 800fc36:	00db      	lsls	r3, r3, #3
 800fc38:	1898      	adds	r0, r3, r2
 800fc3a:	3008      	adds	r0, #8
 800fc3c:	1c69      	adds	r1, r5, #1
 800fc3e:	3708      	adds	r7, #8
 800fc40:	2200      	movs	r2, #0
 800fc42:	4465      	add	r5, ip
 800fc44:	9005      	str	r0, [sp, #20]
 800fc46:	428d      	cmp	r5, r1
 800fc48:	f6ff af07 	blt.w	800fa5a <__kernel_rem_pio2+0xc2>
 800fc4c:	a81a      	add	r0, sp, #104	; 0x68
 800fc4e:	eb02 0c03 	add.w	ip, r2, r3
 800fc52:	4484      	add	ip, r0
 800fc54:	9803      	ldr	r0, [sp, #12]
 800fc56:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fc5a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800fc5e:	9001      	str	r0, [sp, #4]
 800fc60:	ee07 0a90 	vmov	s15, r0
 800fc64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fc68:	9805      	ldr	r0, [sp, #20]
 800fc6a:	ed8c 7b00 	vstr	d7, [ip]
 800fc6e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800fcb0 <__kernel_rem_pio2+0x318>
 800fc72:	eb00 0802 	add.w	r8, r0, r2
 800fc76:	f04f 0c00 	mov.w	ip, #0
 800fc7a:	45d4      	cmp	ip, sl
 800fc7c:	dd0c      	ble.n	800fc98 <__kernel_rem_pio2+0x300>
 800fc7e:	eb02 0c07 	add.w	ip, r2, r7
 800fc82:	a86a      	add	r0, sp, #424	; 0x1a8
 800fc84:	4484      	add	ip, r0
 800fc86:	ed8c 7b02 	vstr	d7, [ip, #8]
 800fc8a:	3101      	adds	r1, #1
 800fc8c:	3208      	adds	r2, #8
 800fc8e:	e7da      	b.n	800fc46 <__kernel_rem_pio2+0x2ae>
 800fc90:	9b04      	ldr	r3, [sp, #16]
 800fc92:	f04f 0c01 	mov.w	ip, #1
 800fc96:	e7c7      	b.n	800fc28 <__kernel_rem_pio2+0x290>
 800fc98:	ecbe 5b02 	vldmia	lr!, {d5}
 800fc9c:	ed38 6b02 	vldmdb	r8!, {d6}
 800fca0:	f10c 0c01 	add.w	ip, ip, #1
 800fca4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fca8:	e7e7      	b.n	800fc7a <__kernel_rem_pio2+0x2e2>
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	e768      	b.n	800fb80 <__kernel_rem_pio2+0x1e8>
 800fcae:	bf00      	nop
	...
 800fcbc:	3e700000 	.word	0x3e700000
 800fcc0:	00000000 	.word	0x00000000
 800fcc4:	41700000 	.word	0x41700000
 800fcc8:	08010720 	.word	0x08010720
 800fccc:	080106e0 	.word	0x080106e0
 800fcd0:	4260      	negs	r0, r4
 800fcd2:	eeb0 0b48 	vmov.f64	d0, d8
 800fcd6:	f000 fad3 	bl	8010280 <scalbn>
 800fcda:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800feb8 <__kernel_rem_pio2+0x520>
 800fcde:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce6:	db18      	blt.n	800fd1a <__kernel_rem_pio2+0x382>
 800fce8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800fec0 <__kernel_rem_pio2+0x528>
 800fcec:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fcf0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800fcf4:	aa06      	add	r2, sp, #24
 800fcf6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800fcfa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800fcfe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fd02:	a906      	add	r1, sp, #24
 800fd04:	ee10 3a10 	vmov	r3, s0
 800fd08:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800fd0c:	1c6b      	adds	r3, r5, #1
 800fd0e:	ee17 2a10 	vmov	r2, s14
 800fd12:	3418      	adds	r4, #24
 800fd14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fd18:	e739      	b.n	800fb8e <__kernel_rem_pio2+0x1f6>
 800fd1a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fd1e:	aa06      	add	r2, sp, #24
 800fd20:	ee10 3a10 	vmov	r3, s0
 800fd24:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800fd28:	462b      	mov	r3, r5
 800fd2a:	e730      	b.n	800fb8e <__kernel_rem_pio2+0x1f6>
 800fd2c:	aa06      	add	r2, sp, #24
 800fd2e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800fd32:	9202      	str	r2, [sp, #8]
 800fd34:	ee07 2a90 	vmov	s15, r2
 800fd38:	3c01      	subs	r4, #1
 800fd3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fd3e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800fd42:	ee20 0b06 	vmul.f64	d0, d0, d6
 800fd46:	ed25 7b02 	vstmdb	r5!, {d7}
 800fd4a:	e72f      	b.n	800fbac <__kernel_rem_pio2+0x214>
 800fd4c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800fd50:	ecb7 5b02 	vldmia	r7!, {d5}
 800fd54:	ed9c 6b00 	vldr	d6, [ip]
 800fd58:	3401      	adds	r4, #1
 800fd5a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fd5e:	454c      	cmp	r4, r9
 800fd60:	dc01      	bgt.n	800fd66 <__kernel_rem_pio2+0x3ce>
 800fd62:	42a5      	cmp	r5, r4
 800fd64:	daf2      	bge.n	800fd4c <__kernel_rem_pio2+0x3b4>
 800fd66:	aa42      	add	r2, sp, #264	; 0x108
 800fd68:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800fd6c:	ed84 7b00 	vstr	d7, [r4]
 800fd70:	3501      	adds	r5, #1
 800fd72:	3808      	subs	r0, #8
 800fd74:	e71e      	b.n	800fbb4 <__kernel_rem_pio2+0x21c>
 800fd76:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800fd78:	2a03      	cmp	r2, #3
 800fd7a:	d84e      	bhi.n	800fe1a <__kernel_rem_pio2+0x482>
 800fd7c:	e8df f002 	tbb	[pc, r2]
 800fd80:	021f1f3e 	.word	0x021f1f3e
 800fd84:	3108      	adds	r1, #8
 800fd86:	aa42      	add	r2, sp, #264	; 0x108
 800fd88:	4411      	add	r1, r2
 800fd8a:	4608      	mov	r0, r1
 800fd8c:	461c      	mov	r4, r3
 800fd8e:	2c00      	cmp	r4, #0
 800fd90:	dc61      	bgt.n	800fe56 <__kernel_rem_pio2+0x4be>
 800fd92:	4608      	mov	r0, r1
 800fd94:	461c      	mov	r4, r3
 800fd96:	2c01      	cmp	r4, #1
 800fd98:	dc6d      	bgt.n	800fe76 <__kernel_rem_pio2+0x4de>
 800fd9a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fec8 <__kernel_rem_pio2+0x530>
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	dc79      	bgt.n	800fe96 <__kernel_rem_pio2+0x4fe>
 800fda2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800fda6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800fdaa:	f1b8 0f00 	cmp.w	r8, #0
 800fdae:	d178      	bne.n	800fea2 <__kernel_rem_pio2+0x50a>
 800fdb0:	ed86 5b00 	vstr	d5, [r6]
 800fdb4:	ed86 6b02 	vstr	d6, [r6, #8]
 800fdb8:	ed86 7b04 	vstr	d7, [r6, #16]
 800fdbc:	e02d      	b.n	800fe1a <__kernel_rem_pio2+0x482>
 800fdbe:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800fec8 <__kernel_rem_pio2+0x530>
 800fdc2:	3108      	adds	r1, #8
 800fdc4:	aa42      	add	r2, sp, #264	; 0x108
 800fdc6:	4411      	add	r1, r2
 800fdc8:	4618      	mov	r0, r3
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	da34      	bge.n	800fe38 <__kernel_rem_pio2+0x4a0>
 800fdce:	f1b8 0f00 	cmp.w	r8, #0
 800fdd2:	d037      	beq.n	800fe44 <__kernel_rem_pio2+0x4ac>
 800fdd4:	eeb1 7b46 	vneg.f64	d7, d6
 800fdd8:	ed86 7b00 	vstr	d7, [r6]
 800fddc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800fde0:	a844      	add	r0, sp, #272	; 0x110
 800fde2:	2101      	movs	r1, #1
 800fde4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fde8:	428b      	cmp	r3, r1
 800fdea:	da2e      	bge.n	800fe4a <__kernel_rem_pio2+0x4b2>
 800fdec:	f1b8 0f00 	cmp.w	r8, #0
 800fdf0:	d001      	beq.n	800fdf6 <__kernel_rem_pio2+0x45e>
 800fdf2:	eeb1 7b47 	vneg.f64	d7, d7
 800fdf6:	ed86 7b02 	vstr	d7, [r6, #8]
 800fdfa:	e00e      	b.n	800fe1a <__kernel_rem_pio2+0x482>
 800fdfc:	aa92      	add	r2, sp, #584	; 0x248
 800fdfe:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800fec8 <__kernel_rem_pio2+0x530>
 800fe02:	4411      	add	r1, r2
 800fe04:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	da0f      	bge.n	800fe2c <__kernel_rem_pio2+0x494>
 800fe0c:	f1b8 0f00 	cmp.w	r8, #0
 800fe10:	d001      	beq.n	800fe16 <__kernel_rem_pio2+0x47e>
 800fe12:	eeb1 7b47 	vneg.f64	d7, d7
 800fe16:	ed86 7b00 	vstr	d7, [r6]
 800fe1a:	9b01      	ldr	r3, [sp, #4]
 800fe1c:	f003 0007 	and.w	r0, r3, #7
 800fe20:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800fe24:	ecbd 8b06 	vpop	{d8-d10}
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	ed31 6b02 	vldmdb	r1!, {d6}
 800fe30:	3b01      	subs	r3, #1
 800fe32:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fe36:	e7e7      	b.n	800fe08 <__kernel_rem_pio2+0x470>
 800fe38:	ed31 7b02 	vldmdb	r1!, {d7}
 800fe3c:	3801      	subs	r0, #1
 800fe3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fe42:	e7c2      	b.n	800fdca <__kernel_rem_pio2+0x432>
 800fe44:	eeb0 7b46 	vmov.f64	d7, d6
 800fe48:	e7c6      	b.n	800fdd8 <__kernel_rem_pio2+0x440>
 800fe4a:	ecb0 6b02 	vldmia	r0!, {d6}
 800fe4e:	3101      	adds	r1, #1
 800fe50:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fe54:	e7c8      	b.n	800fde8 <__kernel_rem_pio2+0x450>
 800fe56:	ed10 7b04 	vldr	d7, [r0, #-16]
 800fe5a:	ed30 5b02 	vldmdb	r0!, {d5}
 800fe5e:	3c01      	subs	r4, #1
 800fe60:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fe64:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe68:	ed00 6b02 	vstr	d6, [r0, #-8]
 800fe6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fe70:	ed80 7b00 	vstr	d7, [r0]
 800fe74:	e78b      	b.n	800fd8e <__kernel_rem_pio2+0x3f6>
 800fe76:	ed10 7b04 	vldr	d7, [r0, #-16]
 800fe7a:	ed30 5b02 	vldmdb	r0!, {d5}
 800fe7e:	3c01      	subs	r4, #1
 800fe80:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fe84:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe88:	ed00 6b02 	vstr	d6, [r0, #-8]
 800fe8c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fe90:	ed80 7b00 	vstr	d7, [r0]
 800fe94:	e77f      	b.n	800fd96 <__kernel_rem_pio2+0x3fe>
 800fe96:	ed31 6b02 	vldmdb	r1!, {d6}
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fea0:	e77d      	b.n	800fd9e <__kernel_rem_pio2+0x406>
 800fea2:	eeb1 5b45 	vneg.f64	d5, d5
 800fea6:	eeb1 6b46 	vneg.f64	d6, d6
 800feaa:	ed86 5b00 	vstr	d5, [r6]
 800feae:	eeb1 7b47 	vneg.f64	d7, d7
 800feb2:	ed86 6b02 	vstr	d6, [r6, #8]
 800feb6:	e77f      	b.n	800fdb8 <__kernel_rem_pio2+0x420>
 800feb8:	00000000 	.word	0x00000000
 800febc:	41700000 	.word	0x41700000
 800fec0:	00000000 	.word	0x00000000
 800fec4:	3e700000 	.word	0x3e700000
	...

0800fed0 <__kernel_sin>:
 800fed0:	ee10 3a90 	vmov	r3, s1
 800fed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fed8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fedc:	da04      	bge.n	800fee8 <__kernel_sin+0x18>
 800fede:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800fee2:	ee17 3a90 	vmov	r3, s15
 800fee6:	b35b      	cbz	r3, 800ff40 <__kernel_sin+0x70>
 800fee8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800feec:	ee20 5b06 	vmul.f64	d5, d0, d6
 800fef0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ff48 <__kernel_sin+0x78>
 800fef4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ff50 <__kernel_sin+0x80>
 800fef8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fefc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ff58 <__kernel_sin+0x88>
 800ff00:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ff04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ff60 <__kernel_sin+0x90>
 800ff08:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ff0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ff68 <__kernel_sin+0x98>
 800ff10:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ff14:	b930      	cbnz	r0, 800ff24 <__kernel_sin+0x54>
 800ff16:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ff70 <__kernel_sin+0xa0>
 800ff1a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ff1e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ff22:	4770      	bx	lr
 800ff24:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ff28:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ff2c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ff30:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ff34:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ff78 <__kernel_sin+0xa8>
 800ff38:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ff3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	f3af 8000 	nop.w
 800ff48:	5acfd57c 	.word	0x5acfd57c
 800ff4c:	3de5d93a 	.word	0x3de5d93a
 800ff50:	8a2b9ceb 	.word	0x8a2b9ceb
 800ff54:	be5ae5e6 	.word	0xbe5ae5e6
 800ff58:	57b1fe7d 	.word	0x57b1fe7d
 800ff5c:	3ec71de3 	.word	0x3ec71de3
 800ff60:	19c161d5 	.word	0x19c161d5
 800ff64:	bf2a01a0 	.word	0xbf2a01a0
 800ff68:	1110f8a6 	.word	0x1110f8a6
 800ff6c:	3f811111 	.word	0x3f811111
 800ff70:	55555549 	.word	0x55555549
 800ff74:	bfc55555 	.word	0xbfc55555
 800ff78:	55555549 	.word	0x55555549
 800ff7c:	3fc55555 	.word	0x3fc55555

0800ff80 <atan>:
 800ff80:	b538      	push	{r3, r4, r5, lr}
 800ff82:	eeb0 7b40 	vmov.f64	d7, d0
 800ff86:	ee17 5a90 	vmov	r5, s15
 800ff8a:	4b73      	ldr	r3, [pc, #460]	; (8010158 <atan+0x1d8>)
 800ff8c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ff90:	429c      	cmp	r4, r3
 800ff92:	dd13      	ble.n	800ffbc <atan+0x3c>
 800ff94:	4b71      	ldr	r3, [pc, #452]	; (801015c <atan+0x1dc>)
 800ff96:	429c      	cmp	r4, r3
 800ff98:	dc03      	bgt.n	800ffa2 <atan+0x22>
 800ff9a:	d107      	bne.n	800ffac <atan+0x2c>
 800ff9c:	ee10 3a10 	vmov	r3, s0
 800ffa0:	b123      	cbz	r3, 800ffac <atan+0x2c>
 800ffa2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ffa6:	eeb0 0b47 	vmov.f64	d0, d7
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80100e8 <atan+0x168>
 800ffb0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80100f0 <atan+0x170>
 800ffb4:	2d00      	cmp	r5, #0
 800ffb6:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800ffba:	e7f4      	b.n	800ffa6 <atan+0x26>
 800ffbc:	4b68      	ldr	r3, [pc, #416]	; (8010160 <atan+0x1e0>)
 800ffbe:	429c      	cmp	r4, r3
 800ffc0:	dc11      	bgt.n	800ffe6 <atan+0x66>
 800ffc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ffc6:	429c      	cmp	r4, r3
 800ffc8:	dc0a      	bgt.n	800ffe0 <atan+0x60>
 800ffca:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800ffce:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80100f8 <atan+0x178>
 800ffd2:	ee30 6b06 	vadd.f64	d6, d0, d6
 800ffd6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ffda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffde:	dce2      	bgt.n	800ffa6 <atan+0x26>
 800ffe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe4:	e013      	b.n	801000e <atan+0x8e>
 800ffe6:	f000 f8c5 	bl	8010174 <fabs>
 800ffea:	4b5e      	ldr	r3, [pc, #376]	; (8010164 <atan+0x1e4>)
 800ffec:	429c      	cmp	r4, r3
 800ffee:	dc4f      	bgt.n	8010090 <atan+0x110>
 800fff0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fff4:	429c      	cmp	r4, r3
 800fff6:	dc41      	bgt.n	801007c <atan+0xfc>
 800fff8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800fffc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010000:	2300      	movs	r3, #0
 8010002:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010006:	ee30 0b07 	vadd.f64	d0, d0, d7
 801000a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801000e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010100 <atan+0x180>
 8010012:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010016:	ee24 5b04 	vmul.f64	d5, d4, d4
 801001a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010108 <atan+0x188>
 801001e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010022:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010110 <atan+0x190>
 8010026:	eea3 6b05 	vfma.f64	d6, d3, d5
 801002a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010118 <atan+0x198>
 801002e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010032:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010120 <atan+0x1a0>
 8010036:	eea3 6b05 	vfma.f64	d6, d3, d5
 801003a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010128 <atan+0x1a8>
 801003e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010130 <atan+0x1b0>
 8010042:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010046:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010138 <atan+0x1b8>
 801004a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801004e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010140 <atan+0x1c0>
 8010052:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010056:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010148 <atan+0x1c8>
 801005a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801005e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010150 <atan+0x1d0>
 8010062:	1c5a      	adds	r2, r3, #1
 8010064:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010068:	ee26 6b05 	vmul.f64	d6, d6, d5
 801006c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010070:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010074:	d121      	bne.n	80100ba <atan+0x13a>
 8010076:	ee37 7b46 	vsub.f64	d7, d7, d6
 801007a:	e794      	b.n	800ffa6 <atan+0x26>
 801007c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010080:	2301      	movs	r3, #1
 8010082:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010086:	ee30 0b07 	vadd.f64	d0, d0, d7
 801008a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801008e:	e7be      	b.n	801000e <atan+0x8e>
 8010090:	4b35      	ldr	r3, [pc, #212]	; (8010168 <atan+0x1e8>)
 8010092:	429c      	cmp	r4, r3
 8010094:	dc0b      	bgt.n	80100ae <atan+0x12e>
 8010096:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801009a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801009e:	ee30 5b47 	vsub.f64	d5, d0, d7
 80100a2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80100a6:	2302      	movs	r3, #2
 80100a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80100ac:	e7af      	b.n	801000e <atan+0x8e>
 80100ae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80100b2:	2303      	movs	r3, #3
 80100b4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80100b8:	e7a9      	b.n	801000e <atan+0x8e>
 80100ba:	4a2c      	ldr	r2, [pc, #176]	; (801016c <atan+0x1ec>)
 80100bc:	492c      	ldr	r1, [pc, #176]	; (8010170 <atan+0x1f0>)
 80100be:	00db      	lsls	r3, r3, #3
 80100c0:	441a      	add	r2, r3
 80100c2:	440b      	add	r3, r1
 80100c4:	ed93 5b00 	vldr	d5, [r3]
 80100c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80100cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80100d0:	ed92 6b00 	vldr	d6, [r2]
 80100d4:	2d00      	cmp	r5, #0
 80100d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80100da:	bfb8      	it	lt
 80100dc:	eeb1 7b47 	vneglt.f64	d7, d7
 80100e0:	e761      	b.n	800ffa6 <atan+0x26>
 80100e2:	bf00      	nop
 80100e4:	f3af 8000 	nop.w
 80100e8:	54442d18 	.word	0x54442d18
 80100ec:	bff921fb 	.word	0xbff921fb
 80100f0:	54442d18 	.word	0x54442d18
 80100f4:	3ff921fb 	.word	0x3ff921fb
 80100f8:	8800759c 	.word	0x8800759c
 80100fc:	7e37e43c 	.word	0x7e37e43c
 8010100:	e322da11 	.word	0xe322da11
 8010104:	3f90ad3a 	.word	0x3f90ad3a
 8010108:	24760deb 	.word	0x24760deb
 801010c:	3fa97b4b 	.word	0x3fa97b4b
 8010110:	a0d03d51 	.word	0xa0d03d51
 8010114:	3fb10d66 	.word	0x3fb10d66
 8010118:	c54c206e 	.word	0xc54c206e
 801011c:	3fb745cd 	.word	0x3fb745cd
 8010120:	920083ff 	.word	0x920083ff
 8010124:	3fc24924 	.word	0x3fc24924
 8010128:	5555550d 	.word	0x5555550d
 801012c:	3fd55555 	.word	0x3fd55555
 8010130:	52defd9a 	.word	0x52defd9a
 8010134:	bfadde2d 	.word	0xbfadde2d
 8010138:	2c6a6c2f 	.word	0x2c6a6c2f
 801013c:	bfa2b444 	.word	0xbfa2b444
 8010140:	af749a6d 	.word	0xaf749a6d
 8010144:	bfb3b0f2 	.word	0xbfb3b0f2
 8010148:	fe231671 	.word	0xfe231671
 801014c:	bfbc71c6 	.word	0xbfbc71c6
 8010150:	9998ebc4 	.word	0x9998ebc4
 8010154:	bfc99999 	.word	0xbfc99999
 8010158:	440fffff 	.word	0x440fffff
 801015c:	7ff00000 	.word	0x7ff00000
 8010160:	3fdbffff 	.word	0x3fdbffff
 8010164:	3ff2ffff 	.word	0x3ff2ffff
 8010168:	40037fff 	.word	0x40037fff
 801016c:	08010730 	.word	0x08010730
 8010170:	08010750 	.word	0x08010750

08010174 <fabs>:
 8010174:	ec51 0b10 	vmov	r0, r1, d0
 8010178:	ee10 2a10 	vmov	r2, s0
 801017c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010180:	ec43 2b10 	vmov	d0, r2, r3
 8010184:	4770      	bx	lr
	...

08010188 <floor>:
 8010188:	ee10 1a90 	vmov	r1, s1
 801018c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010190:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8010194:	2b13      	cmp	r3, #19
 8010196:	b530      	push	{r4, r5, lr}
 8010198:	ee10 0a10 	vmov	r0, s0
 801019c:	ee10 5a10 	vmov	r5, s0
 80101a0:	dc33      	bgt.n	801020a <floor+0x82>
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	da17      	bge.n	80101d6 <floor+0x4e>
 80101a6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010268 <floor+0xe0>
 80101aa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80101ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80101b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b6:	dd09      	ble.n	80101cc <floor+0x44>
 80101b8:	2900      	cmp	r1, #0
 80101ba:	da50      	bge.n	801025e <floor+0xd6>
 80101bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80101c0:	4a2b      	ldr	r2, [pc, #172]	; (8010270 <floor+0xe8>)
 80101c2:	4303      	orrs	r3, r0
 80101c4:	2000      	movs	r0, #0
 80101c6:	4283      	cmp	r3, r0
 80101c8:	bf18      	it	ne
 80101ca:	4611      	movne	r1, r2
 80101cc:	460b      	mov	r3, r1
 80101ce:	4602      	mov	r2, r0
 80101d0:	ec43 2b10 	vmov	d0, r2, r3
 80101d4:	e020      	b.n	8010218 <floor+0x90>
 80101d6:	4a27      	ldr	r2, [pc, #156]	; (8010274 <floor+0xec>)
 80101d8:	411a      	asrs	r2, r3
 80101da:	ea01 0402 	and.w	r4, r1, r2
 80101de:	4304      	orrs	r4, r0
 80101e0:	d01a      	beq.n	8010218 <floor+0x90>
 80101e2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8010268 <floor+0xe0>
 80101e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80101ea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80101ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f2:	ddeb      	ble.n	80101cc <floor+0x44>
 80101f4:	2900      	cmp	r1, #0
 80101f6:	bfbe      	ittt	lt
 80101f8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80101fc:	fa40 f303 	asrlt.w	r3, r0, r3
 8010200:	18c9      	addlt	r1, r1, r3
 8010202:	ea21 0102 	bic.w	r1, r1, r2
 8010206:	2000      	movs	r0, #0
 8010208:	e7e0      	b.n	80101cc <floor+0x44>
 801020a:	2b33      	cmp	r3, #51	; 0x33
 801020c:	dd05      	ble.n	801021a <floor+0x92>
 801020e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010212:	d101      	bne.n	8010218 <floor+0x90>
 8010214:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010218:	bd30      	pop	{r4, r5, pc}
 801021a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801021e:	f04f 32ff 	mov.w	r2, #4294967295
 8010222:	40e2      	lsrs	r2, r4
 8010224:	4202      	tst	r2, r0
 8010226:	d0f7      	beq.n	8010218 <floor+0x90>
 8010228:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010268 <floor+0xe0>
 801022c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010230:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010238:	ddc8      	ble.n	80101cc <floor+0x44>
 801023a:	2900      	cmp	r1, #0
 801023c:	da02      	bge.n	8010244 <floor+0xbc>
 801023e:	2b14      	cmp	r3, #20
 8010240:	d103      	bne.n	801024a <floor+0xc2>
 8010242:	3101      	adds	r1, #1
 8010244:	ea20 0002 	bic.w	r0, r0, r2
 8010248:	e7c0      	b.n	80101cc <floor+0x44>
 801024a:	2401      	movs	r4, #1
 801024c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010250:	fa04 f303 	lsl.w	r3, r4, r3
 8010254:	4418      	add	r0, r3
 8010256:	42a8      	cmp	r0, r5
 8010258:	bf38      	it	cc
 801025a:	1909      	addcc	r1, r1, r4
 801025c:	e7f2      	b.n	8010244 <floor+0xbc>
 801025e:	2000      	movs	r0, #0
 8010260:	4601      	mov	r1, r0
 8010262:	e7b3      	b.n	80101cc <floor+0x44>
 8010264:	f3af 8000 	nop.w
 8010268:	8800759c 	.word	0x8800759c
 801026c:	7e37e43c 	.word	0x7e37e43c
 8010270:	bff00000 	.word	0xbff00000
 8010274:	000fffff 	.word	0x000fffff

08010278 <matherr>:
 8010278:	2000      	movs	r0, #0
 801027a:	4770      	bx	lr
 801027c:	0000      	movs	r0, r0
	...

08010280 <scalbn>:
 8010280:	b500      	push	{lr}
 8010282:	ed2d 8b02 	vpush	{d8}
 8010286:	b083      	sub	sp, #12
 8010288:	ed8d 0b00 	vstr	d0, [sp]
 801028c:	9b01      	ldr	r3, [sp, #4]
 801028e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010292:	b9a2      	cbnz	r2, 80102be <scalbn+0x3e>
 8010294:	9a00      	ldr	r2, [sp, #0]
 8010296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801029a:	4313      	orrs	r3, r2
 801029c:	d03a      	beq.n	8010314 <scalbn+0x94>
 801029e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010358 <scalbn+0xd8>
 80102a2:	4b35      	ldr	r3, [pc, #212]	; (8010378 <scalbn+0xf8>)
 80102a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80102a8:	4298      	cmp	r0, r3
 80102aa:	ed8d 7b00 	vstr	d7, [sp]
 80102ae:	da11      	bge.n	80102d4 <scalbn+0x54>
 80102b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8010360 <scalbn+0xe0>
 80102b4:	ed9d 6b00 	vldr	d6, [sp]
 80102b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80102bc:	e007      	b.n	80102ce <scalbn+0x4e>
 80102be:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80102c2:	428a      	cmp	r2, r1
 80102c4:	d10a      	bne.n	80102dc <scalbn+0x5c>
 80102c6:	ed9d 7b00 	vldr	d7, [sp]
 80102ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80102ce:	ed8d 7b00 	vstr	d7, [sp]
 80102d2:	e01f      	b.n	8010314 <scalbn+0x94>
 80102d4:	9b01      	ldr	r3, [sp, #4]
 80102d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80102da:	3a36      	subs	r2, #54	; 0x36
 80102dc:	4402      	add	r2, r0
 80102de:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80102e2:	428a      	cmp	r2, r1
 80102e4:	dd0a      	ble.n	80102fc <scalbn+0x7c>
 80102e6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8010368 <scalbn+0xe8>
 80102ea:	eeb0 0b48 	vmov.f64	d0, d8
 80102ee:	ed9d 1b00 	vldr	d1, [sp]
 80102f2:	f000 f843 	bl	801037c <copysign>
 80102f6:	ee20 7b08 	vmul.f64	d7, d0, d8
 80102fa:	e7e8      	b.n	80102ce <scalbn+0x4e>
 80102fc:	2a00      	cmp	r2, #0
 80102fe:	dd10      	ble.n	8010322 <scalbn+0xa2>
 8010300:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010304:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010308:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801030c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010310:	e9cd 0100 	strd	r0, r1, [sp]
 8010314:	ed9d 0b00 	vldr	d0, [sp]
 8010318:	b003      	add	sp, #12
 801031a:	ecbd 8b02 	vpop	{d8}
 801031e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010322:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010326:	da06      	bge.n	8010336 <scalbn+0xb6>
 8010328:	f24c 3350 	movw	r3, #50000	; 0xc350
 801032c:	4298      	cmp	r0, r3
 801032e:	dcda      	bgt.n	80102e6 <scalbn+0x66>
 8010330:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8010360 <scalbn+0xe0>
 8010334:	e7d9      	b.n	80102ea <scalbn+0x6a>
 8010336:	e9dd 0100 	ldrd	r0, r1, [sp]
 801033a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801033e:	3236      	adds	r2, #54	; 0x36
 8010340:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010344:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010348:	ec41 0b17 	vmov	d7, r0, r1
 801034c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8010370 <scalbn+0xf0>
 8010350:	e7b2      	b.n	80102b8 <scalbn+0x38>
 8010352:	bf00      	nop
 8010354:	f3af 8000 	nop.w
 8010358:	00000000 	.word	0x00000000
 801035c:	43500000 	.word	0x43500000
 8010360:	c2f8f359 	.word	0xc2f8f359
 8010364:	01a56e1f 	.word	0x01a56e1f
 8010368:	8800759c 	.word	0x8800759c
 801036c:	7e37e43c 	.word	0x7e37e43c
 8010370:	00000000 	.word	0x00000000
 8010374:	3c900000 	.word	0x3c900000
 8010378:	ffff3cb0 	.word	0xffff3cb0

0801037c <copysign>:
 801037c:	ec51 0b10 	vmov	r0, r1, d0
 8010380:	ee11 0a90 	vmov	r0, s3
 8010384:	ee10 2a10 	vmov	r2, s0
 8010388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801038c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010390:	ea41 0300 	orr.w	r3, r1, r0
 8010394:	ec43 2b10 	vmov	d0, r2, r3
 8010398:	4770      	bx	lr
	...

0801039c <_init>:
 801039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039e:	bf00      	nop
 80103a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103a2:	bc08      	pop	{r3}
 80103a4:	469e      	mov	lr, r3
 80103a6:	4770      	bx	lr

080103a8 <_fini>:
 80103a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103aa:	bf00      	nop
 80103ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ae:	bc08      	pop	{r3}
 80103b0:	469e      	mov	lr, r3
 80103b2:	4770      	bx	lr
